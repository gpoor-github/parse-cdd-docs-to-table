"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-4"	"7.4.2.4/C-1-4"	"07040204.670104"	"""C-1-4] MUST declare android.hardware.wifi.passpoint feature flag."""	""	"wifi"	"android.hardware.wifi.passpoint"	"passpoint flag feature"	""	""	""	""	""	""	""	"com.android.cts.verifier.wifiaware.TestListActivity"	"getPackageManager"	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 116), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 27), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/EasyConnectStatusCallbackTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WaitForResultActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MulticastLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/SupplicantStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/RadioChainInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 1)]"	"[('(5,feature,/android/net/wifi/cts/EasyConnectStatusCallbackTest.java)', 1), ('(6,feature,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(2,flag,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(3,feature,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(4,feature,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(2,feature,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(20,feature,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(5,flag,/android/net/wifi/cts/TestHelper.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/PnoSettingsTest.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(4,feature,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(2,feature,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,feature,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(2,flag,/android/net/wifi/cts/WaitForResultActivity.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(2,feature,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(1,feature,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/PnoNetworkTest.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(6,feature,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(2,feature,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,feature,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(144,feature,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(2,flag,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(3,feature,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(1,feature,/android/net/wifi/cts/WifiLockTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(12,feature,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(1,feature,/android/net/wifi/cts/MulticastLockTest.java)', 1), ('(1,feature,/android/net/wifi/cts/SupplicantStateTest.java)', 1), ('(2,feature,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/RadioChainInfoTest.java)', 1), ('(2,feature,/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java)', 1), ('(1,feature,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(1,feature,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(2,flag,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(18,feature,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(5,feature,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(5,feature,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,flag,/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java)', 1), ('(3,feature,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 4), ('([1:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[feature]:[1]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 2), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 2), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[ds.     * <p>     * Test that getting a set client private key produces the same value     */   ])', 2), ('([1:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[feature]:[1]:method_text:[sion and expect a     * DPP URI     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[feature]:[2]:method_text:[h (IllegalArgumentException expected) {}        uiAutomation.dropShellPermissionIdentity();    }}])', 1), ('([6:/android/net/wifi/rtt/cts/TestBase.java]:[feature]:[6]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([2:/android/net/wifi/rtt/cts/TestBase.java]:[flag]:[2]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiInfoTest.java]:[feature]:[2]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[feature]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([2:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[feature]:[2]:method_text:[s the string was not logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([2:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[feature]:[2]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[feature]:[2]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[2]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([4:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[4]:method_text:[tMode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_HIGH_PERF);        }    }   ])', 1), ('([4:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[4]:method_text:[ode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_LOW_LATENCY);        }    }   ])', 1), ('([4:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[4]:method_text:[ckStateChanged().getTag();            assertThat(tag).isEqualTo(EXPECTED_TAG);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[2]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[2]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[feature]:[2]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([5:/android/net/wifi/cts/TestHelper.java]:[flag]:[5]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[feature]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[feature]:[2]:method_text:[tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(mContext));    }   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[feature]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[feature]:[2]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[feature]:[2]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([2:/android/net/wifi/cts/WaitForResultActivity.java]:[flag]:[2]:method_text:[ONDS)).isTrue();        synchronized (mStatusLock) {            return mStatus;        }    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[feature]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[feature]:[2]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiConfigurationTest.java]:[feature]:[1]:method_text:[tring());            }        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/nl80211/cts/PnoNetworkTest.java]:[feature]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[feature]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([2:/android/net/wifi/cts/ScanResultTest.java]:[feature]:[2]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[feature]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[feature]:[1]:method_text:[           }        }    }    /** Test that the copy constructor copies fields correctly. */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[feature]:[1]:method_text:[lTo(TEST_FREQUENCY);        assertThat(scanResult2.timestamp).isEqualTo(TEST_TIMESTAMP);    }   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[feature]:[1]:method_text:[sidQuoted);        assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());    }}])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), (""([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[feature]:[2]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([3:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[feature]:[3]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    /**     * Test wifi scanning when Wifi is off and location scanning is turned on.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[erify transition through states.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[able properties     * 2.DhcpInfo properties     * 3.wifi state     * 4.ConnectionInfo     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[7]:method_text:[urn getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[SignalLevel()}], and its value is monotonically increasing as     * the RSSI increases.     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[10]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[    }    /**     * Verify non DO apps cannot call removeNonCallerConfiguredNetworks.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[{        }    }    /**     * Test coverage for the constructor of AddNetworkResult.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[leged(WifiConfiguration)} throws a     * SecurityException when called by a normal app.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[NetworkPrivileged(WifiConfiguration)} throws an exception when     * null is the input.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ailure status code when adding an enterprise config with mandatory fields not filled in.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[3]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ intended to be granted to only those apps with direct user     * access and no others.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[The permission is intended to be granted to only the device managed     * provisioning.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[on#WIFI_SET_DEVICE_MOBILITY_STATE} permission     * is held by at most one application.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[sion#NETWORK_CARRIER_PROVISIONING} permission     * is held by at most one application.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[WIFI_UPDATE_USABILITY_STATS_SCORE}     * permission is held by at most one application.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[4]:method_text:[not turned off when the screen turns off while wifi is enabled.     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[4]:method_text:[e platform supports a reasonable number of suggestions per app.     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[9]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[3]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ect(WifiConfiguration, WifiManager.ActionListener)} to an     * existing saved network.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ation, WifiManager.ActionListener)} by marking     * an existing saved network metered.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ /** Test that PNO scans reconnects us when the device is disconnected and the screen is off. */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[pported();    }    /**     * Tests {@link WifiManager#isStaApConcurrencySupported().     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[r#setScanAlwaysAvailable(boolean)} &     * {@link WifiManager#isScanAlwaysAvailable()}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[tVerboseLoggingEnabled(boolean)} &     * {@link WifiManager#isVerboseLoggingEnabled()}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[;        }    }    /**     * Tests {@link WifiManager#setVerboseLoggingLevel(int)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[u add the     * networks back after reset, the ownership of saved networks will change.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ash.     * TODO(b/150891569): deprecate it in Android S, this API is not used anywhere.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[s clear to connect     * again.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ }    /**     * Test that the wifi country code is either null, or a length-2 string.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[kCallback} when connected to a Wifi network,     * and returns null when not connected.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[));    }    /**     * Tests {@link WifiManager#isWpa3SaeSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#isWpa3SuiteBSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[   }    /**     * Tests {@link WifiManager#isEnhancedOpenSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[pty());    }    /**     * Tests {@link WifiManager#disableEphemeralNetwork(String)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[cKeySupported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[eH2eSupported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ayR2Supported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[Supported()} returns true     * if this device supports it, otherwise, ensure no crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[ager.isP2pSupported();        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[alse     * are valid responses.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[he needed privileged permissions     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[d, no-op is also valid behavior.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ork configurations are rejected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[nabled)} and     * {@link WifiManager#isCarrierNetworkOffloadEnabled} work as expected.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[nnels(int, int))} does not crash     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[nels(int, int))} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[2]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[feature]:[1]:method_text:[ic void onUserApprovalStatusChange(int status) {            mBlocker.countDown();        }    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[flag]:[2]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([2:/android/net/wifi/cts/WifiMigrationTest.java]:[feature]:[2]:method_text:[     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiMigrationTest.java]:[feature]:[1]:method_text:[    /**     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiLockTest.java]:[feature]:[1]:method_text:[// releasing again after release: but ignored for non-referenced locks        wl.release();    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([12:/android/net/wifi/cts/ConcurrencyTest.java]:[feature]:[12]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([1:/android/net/wifi/cts/MulticastLockTest.java]:[feature]:[1]:method_text:[/ releasing again after release: but ignored for non-referenced locks        mcl.release();    }}])', 1), ('([1:/android/net/wifi/cts/SupplicantStateTest.java]:[feature]:[1]:method_text:[NINITIALIZED));        assertFalse(SupplicantState.isValidState(SupplicantState.INVALID));    }}])', 1), ('([2:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[feature]:[2]:method_text:[Instrumentation().getContext();        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/RadioChainInfoTest.java]:[feature]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[feature]:[2]:method_text:[} object can be serialized and deserialized,     *  while keeping its values unchanged.     */   ])', 1), ('([1:/com/android/cts/verifier/wifi/TestListActivity.java]:[feature]:[1]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([1:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[feature]:[1]:method_text:[            + ""SystemServiceRegistry!"");        } catch (IllegalStateException expected) {}    }}])', 1), ('([2:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[flag]:[2]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[l#Credential(Credential)} method.     * <p>     * Test the Credential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[edential)} method.     * <p>     * Test the Credential.UserCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[redential)} method.     * <p>     * Test the Credential.SimCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[   * <p>     * Test that getting a set client certificate chain produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[feature]:[1]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([5:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[feature]:[5]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([5:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[feature]:[5]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java]:[flag]:[1]:method_text:[TATUS_EXTRA, canRetrieveSsidFromTransportInfo(TAG, connectivityManager)));        finish();    }}])', 1), ('([3:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[feature]:[3]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1)]"	""	""	"[('feature', 166), ('passpoint', 57), ('flag', 6)]"	"[('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testConfiguratorInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeResponderUriGeneration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeDiscoverySuccess CtsWifiTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockHighPerf CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockLowLatency CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiMulticastLock CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WaitForResultActivity isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultTimeStamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultConstructors CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystemShouldFailNoPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystem CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConvertBetweenChannelFrequencyMhz CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSignal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetSupportedFeatures CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRemoveNonCallerConfiguredNetworksNotAllowed CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkResultCreation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedNotAllowedForNormalApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedBadInput CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedFailureBadEnterpriseConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkStackPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSetupWizardPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkManagedProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiSetDeviceMobilityStatePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkCarrierProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiDisabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithNetworkId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testForget CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetFactoryMacAddresses CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsApMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsConnectedMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPreferredNetworkOffloadSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsTdlsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTrafficStateCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAutoWakeUpEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLogging CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeNonUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFactoryReset CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiNetworkConnectionStatistics CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartAndStopRestrictingAutoJoinToSubscriptionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCountryCode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCurrentNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaeSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SuiteBSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsEnhancedOpenSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs5GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs6GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSuggestionBuilderNonPersistentRandomization CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetMatchingScanResults CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWapiSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaePublicKeySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaeH2eSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiDisplayR2Supported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsP2pSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnSOrNewer CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCoexMethodsShouldFailNoPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testListenOnCoexUnsafeChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsDecoratedIdentitySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetCarrierNetworkOffloadEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedUsableChannelsOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddRemoveSuggestionUserApprovalStatusListener CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLockTest testLowLatencyWifiLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MulticastLockTest testMulticastLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.SupplicantStateTest testIsValidState CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest testRegisterServiceWrappers_failsWhenCalledOutsideOfSystemServiceRegistry CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testHomeSpCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCertCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetCertificate CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialClientCertificateChain CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialSetGetClientPrivateKey CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveTransportInfoAndReturnStatusActivity finish None]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1)]"	""	""	""	""	""	""	""	""	""
