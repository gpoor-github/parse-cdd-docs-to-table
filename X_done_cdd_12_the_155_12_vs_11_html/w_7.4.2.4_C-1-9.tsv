"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-9"	"7.4.2.4/C-1-9"	"07040204.670109"	"""C-1-9] MUST keep Passpoint configurations persistent across reboots."""	""	"wifi"	""	"passpoint reboot config"	""	""	""	""	""	""	""	"android.net.wifi.p2p.cts.WifiP2pConfigTest"	"getContext"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 53), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 31), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 20), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pConfigTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/EasyConnectStatusCallbackTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/WifiConfigCreator/src/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1)]"	"[('(104,config,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(20,config,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(570,config,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(33,config,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(211,config,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(162,config,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,config,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(80,config,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(3,config,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(14,config,/android/net/wifi/cts/EasyConnectStatusCallbackTest.java)', 1), ('(71,config,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(61,config,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(25,config,/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java)', 1), ('(34,config,/android/net/wifi/cts/TestHelper.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(13,config,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(11,config,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(29,config,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(18,config,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(17,config,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(6,config,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(25,config,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(23,config,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(9,config,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(1,config,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(259,config,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(9,config,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(34,config,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([9:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[9]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 4), ('([14:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[14]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 4), (""([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[config]:[4]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 3), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 2), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[2]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([8:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[8]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([12:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[12]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[11]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([16:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[config]:[16]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([20:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[config]:[20]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([23:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[23]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[18]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[9]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[1]:method_text:[    }    /**     * Verify non DO apps cannot call removeNonCallerConfiguredNetworks.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[2]:method_text:[{        }    }    /**     * Test coverage for the constructor of AddNetworkResult.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[1]:method_text:[leged(WifiConfiguration)} throws a     * SecurityException when called by a normal app.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[3]:method_text:[NetworkPrivileged(WifiConfiguration)} throws an exception when     * null is the input.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[2]:method_text:[ailure status code when adding an enterprise config with mandatory fields not filled in.     */   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[13]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([65:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[65]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([74:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[74]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[17]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[13]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([23:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[23]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([57:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[57]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[13]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[18]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([38:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[38]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[18]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[1]:method_text:[ect(WifiConfiguration, WifiManager.ActionListener)} to an     * existing saved network.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[2]:method_text:[ation, WifiManager.ActionListener)} by marking     * an existing saved network metered.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[18]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[13]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[8]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[4]:method_text:[ash.     * TODO(b/150891569): deprecate it in Android S, this API is not used anywhere.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[12]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[20]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[18]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[2]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[4]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[3]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[3]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[5]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[9]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[11]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[1]:method_text:[ork configurations are rejected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([28:/android/net/wifi/cts/WifiManagerTest.java]:[config]:[28]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([9:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[config]:[9]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[config]:[12]:method_text:[fiedBy(specifier2)).isTrue();    }    /**     * Test WifiNetworkSpecifier redaction.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[4]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([51:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[51]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[7]:method_text:[tation.contains(identity));        assertFalse(stringRepresentation.contains(password));    }   ])', 1), ('([9:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[9]:method_text:[ases())                .isEqualTo(new String[]{CERTIFICATE_ALIAS1, CERTIFICATE_ALIAS2});    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[7]:method_text:[    config.setCaPath(CA_PATH);        assertThat(config.getCaPath()).isEqualTo(CA_PATH);    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[7]:method_text:[qualTo(CLIENT_CERTIFICATE_ALIAS);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[7]:method_text:[;        assertThat(config.getClientKeyPairAlias()).isEqualTo(CLIENT_CERTIFICATE_ALIAS);    }   ])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[13]:method_text:[ow an IllegalArgumentException!"");        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[7]:method_text:[PI_CERT_SUITE);        assertThat(config.getWapiCertSuite()).isEqualTo(WAPI_CERT_SUITE);    }   ])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[13]:method_text:[ase2Method(Phase2.NONE);        assertThat(config.isAuthenticationSimBased()).isFalse();    }   ])', 1), ('([14:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[14]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([27:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[27]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[2]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[2]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([35:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[35]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[config]:[6]:method_text:[;        assertEquals(TEST_DECORATED_IDENTITY_PREFIX, config.getDecoratedIdentityPrefix());    }}])', 1), ('([13:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[13]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[2]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([20:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[20]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[9]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[10]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[1]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([11:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[config]:[11]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[config]:[1]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([12:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[12]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[11]:method_text:[tring());            }        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([33:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[33]:method_text:[RT, configuration.getAuthType());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[7]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[10]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiConfigurationTest.java]:[config]:[7]:method_text:[ration.setDeletionPriority(1);        assertEquals(1, configuration.getDeletionPriority());    }}])', 1), ('([3:/android/net/wifi/cts/WifiLocationInfoTest.java]:[config]:[3]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([3:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[config]:[3]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([10:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[config]:[10]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([1:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[config]:[1]:method_text:[sion and expect a     * DPP URI     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[3]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([17:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[17]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([8:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[8]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([10:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[10]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([13:/android/net/wifi/cts/WifiHotspot2Test.java]:[config]:[13]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([8:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[8]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([10:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[10]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([8:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[8]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([11:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[11]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([8:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[8]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[4]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[4]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[4]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[config]:[4]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([25:/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java]:[config]:[25]:method_text:[pted while changing wifi settings"", ie);        } finally {            finish();        }    }}])', 1), ('([34:/android/net/wifi/cts/TestHelper.java]:[config]:[34]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiMigrationTest.java]:[config]:[4]:method_text:[eFile(int)} and     * {@link WifiMigration#removeUserConfigStoreFile(int, UserHandle)}.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiMigrationTest.java]:[config]:[9]:method_text:[Handle.of(ActivityManager.getCurrentUser()));        } catch (Exception ignore) {        }    }}])', 1), ('([11:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[config]:[11]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([16:/android/net/wifi/cts/ConfigParserTest.java]:[config]:[16]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([13:/android/net/wifi/cts/ConfigParserTest.java]:[config]:[13]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([18:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[config]:[18]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([5:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[5]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[tMode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_HIGH_PERF);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[ode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_LOW_LATENCY);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[ckStateChanged().getTag();            assertThat(tag).isEqualTo(EXPECTED_TAG);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([2:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[config]:[2]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[config]:[6]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), ('([25:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[config]:[25]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([16:/android/net/wifi/cts/PpsMoParserTest.java]:[config]:[16]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([7:/android/net/wifi/cts/PpsMoParserTest.java]:[config]:[7]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([3:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[config]:[3]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([6:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[config]:[6]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/TestBase.java]:[config]:[1]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), (""([22:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[22]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([10:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[10]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([160:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[160]:method_text:[ is deserialized correctly from AOSP     * legacy supplicant/ipconf backup data format.     */   ])', 1), ('([22:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[22]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.0 format.     */   ])', 1), ('([22:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[22]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.1 format.     */   ])', 1), ('([22:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[22]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.2 format.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[config]:[1]:method_text:[tions(),                () -> mWifiManager.restoreBackupData(loadResourceFile(V1_2_FILE)));    }}])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([9:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[config]:[9]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[config]:[3]:method_text:[T_OWNER_FREQ = 2447;    private static final String TEST_DEVICE_ADDRESS = ""aa:bb:cc:dd:ee:ff"";   ])', 1), ('([13:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[config]:[13]:method_text:[);        assertEquals(copiedConfig.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([9:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[config]:[9]:method_text:[R_BAND);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([9:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[config]:[9]:method_text:[OWNER_FREQ);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_TEMPORARY);    }}])', 1)]"	""	""	"[('config', 149), ('passpoint', 57)]"	"[('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 2), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 2), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 2), ('[com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase executeTest None]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetSupportedFeatures CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRemoveNonCallerConfiguredNetworksNotAllowed CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkResultCreation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedNotAllowedForNormalApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedBadInput CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedFailureBadEnterpriseConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithNetworkId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testForget CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFactoryReset CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSuggestionBuilderNonPersistentRandomization CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testListenOnCoexUnsafeChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise192bit CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testEnterpriseConfigDoesNotPrintPassword CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaCertificateAliases CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaPath CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientCertificateAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientKeyPairAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetOcsp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetWapiCertSuite CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsAuthenticationSimBased CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailurePsk8021X CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailure8021xEapSae CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testSetGetDeletionPriority CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testConfiguratorInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSendMessageFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathOpenOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPassphraseOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPmkOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[com.android.cts.deviceowner.wificonfigcreator.WifiConfigCreatorActivity finish None]', 1), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettings CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationConfigStore CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockHighPerf CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockLowLatency CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiMulticastLock CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromLegacyBackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_0BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_1BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_2BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForPersist CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForNonPersist CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
