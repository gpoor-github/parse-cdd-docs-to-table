"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"257:744346) 9.8.11  . Data blobs sharing"	"9.8.11"	"C-1-1"	""	"[('com.android.cts.blob.BlobStoreManagerTest', 56), ('com.android.cts.device.blob.DataCleanupTest', 8), ('com.android.cts.device.blob.DataPersistenceTest', 6), ('com.android.server.cts.device.statsd.AtomTests', 2)]"	""	"[('CtsBlobStoreTestCases', 56)]"	""	"9.8.11/C-1-1"	"""C-1-1] MUST NOT share data blobs belonging to apps beyond what they intended to allow (i.e. the scope of default access and the other access modes that can be specified using BlobStoreManager.session#allowPackageAccess(), BlobStoreManager.session#allowSameSignatureAccess(), or BlobStoreManager.session#allowPublicAccess() MUST NOT be modified). The AOSP reference implementation meets these requirements. """	"09081100.670101"	"BlobStoreManager.session allowPublicAccess() allowPackageAccess() allowSameSignatureAccess()"	""	""	""	"[('BlobStoreManager.session', 52), ('allowPublicAccess()', 10), ('allowSameSignatureAccess()', 8), ('allowPackageAccess()', 2)]"	""	"[('[com.android.cts.device.blob.DataCleanupTest testCommitBlob None]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSession_fromAnotherPkg CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess_abandonedSession CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess_abandonedSession CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 4), ('[com.android.cts.device.blob.DataPersistenceTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testOpenSessionAndWrite None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testCommitSession None]', 2), ('[com.android.cts.device.blob.DataCleanupTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataCleanupTest testOpenSession None]', 2), ('[com.android.server.cts.device.statsd.AtomTests testBlobStore None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenReadWriteSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSessionAndAbandon CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCloseSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_abandonedSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_largeBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleReadWrites CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitBlobAfterIdleMaintenance CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testExpiredSessionsDeleted_withPartialData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_countLimitExceeded CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType_fromMultiplePackages CtsBlobStoreTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 56), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataCleanupTest.java', 8), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataPersistenceTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 2)]"	"[('(3,BlobStoreManager.session,/com/android/cts/device/blob/DataPersistenceTest.java)', 2), ('(3,BlobStoreManager.session,/com/android/cts/device/blob/DataCleanupTest.java)', 2), ('(1,allowPublicAccess(),/com/android/cts/device/blob/DataCleanupTest.java)', 2), ('(1,BlobStoreManager.session,/com/android/server/cts/device/statsd/AtomTests.java)', 2), ('(27,BlobStoreManager.session,/com/android/cts/blob/BlobStoreManagerTest.java)', 2), ('(7,allowPublicAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 2), ('(1,allowPackageAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 2), ('(6,allowSameSignatureAccess(),/com/android/cts/blob/BlobStoreManagerTest.java)', 2)]"	"[('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 4), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 4), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rifyBlob(pfd);            }        } finally {            blobData.delete();        }    }   ])', 4), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[UT_WAIT_FOR_IDLE_MS),                Exception.class, android.Manifest.permission.DUMP);    }   ])', 2), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[BYTES,                    blobData.getFileSize() - PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 2), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[_COMMIT_CALLBACK_MS, TimeUnit.MILLISECONDS))                    .isEqualTo(0);        }    }   ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[ssion, 0, PARTIAL_FILE_LENGTH_BYTES);        }        addSessionIdToResults(sessionId);    }   ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[            assertThat(session.getSize()).isEqualTo(PARTIAL_FILE_LENGTH_BYTES);        }    }   ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowPublicAccess()]:[1]:method_text:[       .isEqualTo(0);        }        addBlobHandleToResults(blobData.getBlobHandle());    }   ])', 2), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[BlobStoreManager.session]:[1]:method_text:[   callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);        }    }}])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[BlobHandle());            }        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[kg(sessionId, HELPER_PKG2));        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ger.openSession(sessionId));        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ssion.close();            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[.getBytes()));            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rite(0L, 0L));            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[esults.add(result);            }        }        assertThat(invalidResults).isEmpty();    }   ])', 2), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[3]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                .isEqualTo(0L);    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ze());            commitSession(sessionId, session, blobData.getBlobHandle());        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[;        }, Pair.create(KEY_SESSION_EXPIRY_TIMEOUT_MS, String.valueOf(waitDurationMs)));    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[    }        }, Pair.create(KEY_MAX_BLOB_ACCESS_PERMITTED_PACKAGES, String.valueOf(1)));    }   ])', 2), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[4]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[kg(sessionId, HELPER_PKG2));        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPackageAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[essAllowed());            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[1.unbind();            connection2.unbind();            connection3.unbind();        }    }   ])', 2)]"	""	""	""	""	""
"257:744346) 9.8.11  . Data blobs sharing"	"9.8.11"	"C-1-2"	""	""	""	""	""	"9.8.11/C-1-2"	"""C-1-2] MUST NOT send off device or share with other apps the secure hashes of data blobs (which are used to control access). <h3 id="""	"09081100.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
