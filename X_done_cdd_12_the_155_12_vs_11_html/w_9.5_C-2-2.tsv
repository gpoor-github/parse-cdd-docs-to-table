"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"9.5  . Multi"	"9.5"	"C-2-2"	"9.5/C-2-2"	"09050000.670202"	"""C-2-2] MUST ensure that applications owned by and running on behalf of a given user cannot list, read, or write to the files owned by any other user, even if the data of both users are stored on the same volume or filesystem."	""	"appsecurity"	"users files applications filesystem. ensure data list stored 9.5/C-2-2 re_tag:(?<!/)C\-2\-2 user even cannot read volume behalf running 9.5 owned given both"	""	""	""	""	"[('android.appsecurity.cts.ExternalStorageHostTest', 88), ('com.android.cts.splitapp.SplitAppTest', 49), ('android.appsecurity.cts.EphemeralTest', 49), ('android.appsecurity.cts.ApplicationVisibilityTest', 47), ('android.appsecurity.cts.PkgInstallSignatureVerificationTest', 43), ('com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest', 41), ('com.android.cts.documentclient.DocumentsClientTest', 40), ('com.android.cts.appdataisolation.appa.AppATests', 38), ('com.android.cts.mediastorageapp.MediaStorageTest', 38), ('com.android.cts.writeexternalstorageapp.WriteExternalStorageTest', 35), ('android.appsecurity.cts.StorageHostTest', 29), ('android.appsecurity.cts.AppDataIsolationTests', 28), ('android.appsecurity.cts.ListeningPortsTest', 26), ('com.android.cts.storagestatsapp.StorageStatsTest', 25), ('android.appsecurity.cts.AdoptableHostTest', 24), ('android.appsecurity.cts.IsolatedSplitsTests', 24), ('com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest', 23), ('com.android.cts.ephemeralapp1.ClientTest', 21), ('com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest', 21), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 20), ('android.appsecurity.cts.AppSecurityTests', 19), ('com.android.cts.multiuserstorageapp.MultiUserStorageTest', 18), ('android.appsecurity.cts.InstantAppUserTest', 18), ('com.android.cts.usespermissiondiffcertapp.UriGrantsTest', 15), ('com.android.cts.storageapp.StorageTest', 15), ('android.appsecurity.cts.ReadableSettingsFieldsTest', 14), ('com.android.cts.encryptionapp.EncryptionAppTest', 13), ('android.appsecurity.cts.OverlayHostTest', 13), ('com.android.cts.appdataisolation.appb.AppBTests', 12), ('com.android.cts.normalapp.ClientTest', 11), ('com.android.cts.writeexternalstorageapp.WriteGiftTest', 11), ('com.android.cts.externalstorageapp.ExternalStorageTest', 11), ('com.android.cts.isolatedsplitapp.SplitAppTest', 10), ('com.android.cts.readexternalstorageapp.ReadExternalStorageTest', 10), ('com.android.cts.externalstorageapp.GiftTest', 10), ('com.android.cts.appwithdata.CreatePrivateDataTest', 9), ('com.android.cts.documentclient.ScopedDirectoryAccessClientTest', 8), ('com.android.cts.packageaccessapp.PackageAccessTest', 8), ('com.android.cts.externalstorageapp.CommonExternalStorageTest', 8), ('android.appsecurity.cts.v3rotationtests.V3RotationTest', 8), ('android.appsecurity.cts.ApexSignatureVerificationTest', 8), ('com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest', 7), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 7), ('android.appsecurity.cts.KeySetHostTest', 7), ('android.appsecurity.cts.SplitTests', 7), ('com.android.cts.readexternalstorageapp.ReadGiftTest', 6), ('android.appsecurity.cts.PackageVisibilityTest', 6), ('com.android.cts.userapptest.ClientTest', 5), ('android.appsecurity.cts.AppOpsTest', 5), ('com.android.cts.usespermissiondiffcertapp.UriGrantsServiceTest', 4), ('com.android.cts.usespermissiondiffcertapp.UriGrantsActivityTest', 4), ('com.android.cts.escalatepermission.PermissionEscalationTest', 4), ('android.appsecurity.cts.apkveritytestapp.InstalledFilesCheck', 4), ('android.os.cts.AccessSerialModernTest', 4), ('android.appsecurity.cts.SharedUserIdTest', 4), ('android.appsecurity.cts.PrivilegedUpdateTests', 4), ('android.appsecurity.cts.InstantCookieHostTest', 4), ('com.android.cts.usespermissiondiffcertapp.UriGrantsResultTest', 3), ('com.android.cts.authboundkey.AuthBoundKeyAppTest', 3), ('com.android.cts.privilegedupdate.PrivilegedUpdateTest', 3), ('com.android.cts.privilegedupdate.PrivilegedAppDisableTest', 3), ('com.android.cts.overlay.app.OverlayableTest', 3), ('com.android.cts.externalstorageapp.ReadDefaultUris', 3), ('android.appsecurity.cts.DirectBootHostTest', 3), ('android.appsecurity.cts.DeviceIdentifierTest', 3), ('android.appsecurity.cts.PermissionEscalationTest', 3), ('android.appsecurity.cts.StatsdAppSecurityAtomTest', 3), ('com.android.cts.instantupgradeapp.ClientTest', 2), ('com.android.cts.ephemeralapp1.WebViewTest', 2), ('com.android.cts.writeexternalstorageapp.ChangeDefaultUris', 2), ('android.appsecurity.cts.deviceids.DeviceIdentifierAppOpTest', 2), ('com.android.cts.readexternalstorageapp.ReadMultiViewTest', 2), ('android.appsecurity.cts.locationpolicy.LocationPolicyTest', 2), ('android.appsecurity.cts.CorruptApkTests', 2), ('android.appsecurity.cts.UseProcessTest', 2), ('test.instant.cookie.CookieTest', 1), ('com.android.cts.useprocess.AccessNetworkTest', 1), ('android.os.cts.AccessSerialLegacyTest', 1), ('com.android.cts.sessioninspector.SessionInspectorTest', 1), ('com.android.cts.shareduidinstall.SharedUidPackageTest', 1), ('android.appsecurity.cts.ApkVerityInstallTest', 1), ('android.appsecurity.cts.ScopedDirectoryAccessTest', 1), ('android.appsecurity.cts.MajorVersionTest', 1), ('android.appsecurity.cts.DocumentsTest', 1), ('android.appsecurity.cts.SessionReferrerUriTest', 1), ('android.appsecurity.cts.AccessSerialNumberTest', 1)]"	"[('getDevice', 187), ('setUp', 109), ('getContext', 59), ('tearDown', 59), ('getInstrumentation', 33), ('getTargetContext', 19), ('getBuild', 15), ('getExternalStorageDirectory', 13), ('getAbsolutePath', 13), ('getApplicationInfo', 10), ('setUpExternalStoragePaths', 10), ('getHost', 10), ('deleteOnExit', 8), ('uninstall_pruneInstantApp_shouldNotBeUserInitiated', 7), ('getName', 7), ('waitForVolumeReady', 7), ('delete', 6), ('retrieveInfo', 6), ('uninstallApks', 6), ('getCurrentUser', 6), ('clearAppCookieData', 6), ('ServiceConnection', 5), ('countDown', 5), ('getObbDir', 5), ('myUid', 5), ('mkdirs', 5), ('getAbi', 5), ('getRunFailureMessage', 5), ('setUpPackage', 5), ('createDeviceProtectedStorageContext', 4), ('getPackageManager', 4), ('clearDocumentsUi', 4), ('launchRoseActivity_withThemeRoseLt_roseLtApplied', 4), ('getConfiguration', 4), ('cleanUp', 4), ('wipePrimaryExternalStorage', 4), ('InstallMultiple', 4), ('run', 4), ('ErrorCollector', 4), ('size', 4), ('pullWellKnownSignatures', 4), ('length', 3), ('getPrimaryUserId', 3), ('Intent', 2), ('getResources', 2), ('notNullValue', 2), ('uninstall_userInstalledApp_shouldBeUserInitiated', 2), ('getSimpleName', 2), ('getPackage', 2), ('getContentResolver', 2), ('getUserId', 2), ('waitForIdle', 2), ('trim', 2), ('toLowerCase', 2), ('shouldLoadFeatureADefault', 1), ('shouldLoadFeatureBDefault', 1), ('createActivity', 1), ('waitForIdleSync', 1), ('clearResult', 1), ('destroyActivity', 1), ('waitForResult', 1), ('start', 1), ('getAssets', 1), ('getApkPaths', 1), ('uninstallPackage', 1), ('uninstallCompanionPackages', 1)]"	"[('CtsAppSecurityHostTestCases', 489)]"	""	"android.appsecurity.cts.UseProcessTest"	"getDevice"	"CtsAppSecurityHostTestCases"	"[('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 88), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 49), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 49), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java', 47), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java', 43), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApplicationVisibilityCrossUserApp/src/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java', 41), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/DocumentsClientTest.java', 40), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 38), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java', 38), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 35), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StorageHostTest.java', 29), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppDataIsolationTests.java', 28), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 26), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageStatsApp/src/com/android/cts/storagestatsapp/StorageStatsTest.java', 25), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AdoptableHostTest.java', 24), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/IsolatedSplitsTests.java', 24), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java', 23), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 21), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadSettingsFieldsApp/src/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java', 21), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 20), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppSecurityTests.java', 19), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MultiUserStorageApp/src/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java', 18), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantAppUserTest.java', 18), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java', 15), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 15), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ReadableSettingsFieldsTest.java', 14), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EncryptionApp/src/com/android/cts/encryptionapp/EncryptionAppTest.java', 13), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/OverlayHostTest.java', 13), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppB/src/com/android/cts/appdataisolation/appb/AppBTests.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 11), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteGiftTest.java', 11), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/ExternalStorageTest.java', 11), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/src/com/android/cts/isolatedsplitapp/SplitAppTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadExternalStorageApp/src/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/GiftTest.java', 10), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 9), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/PackageAccessApp/src/com/android/cts/packageaccessapp/PackageAccessTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/CommonExternalStorageTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/V3SigningSchemeRotation/src/android/appsecurity/cts/v3rotationtests/V3RotationTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApexSignatureVerificationTest.java', 8), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/SplitTests.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadExternalStorageApp/src/com/android/cts/readexternalstorageapp/ReadGiftTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PackageVisibilityTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/UserAppTest/src/com/android/cts/userapptest/ClientTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppOpsTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialModern/src/android/os/cts/AccessSerialModernTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/SharedUserIdTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsResultTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AuthBoundKeyApp/src/com/android/cts/authboundkey/AuthBoundKeyAppTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/PrivilegedUpdateApp/src/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/PrivilegedUpdateApp/src/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/rro/OverlayApp/src/com/android/cts/overlay/app/OverlayableTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/ReadDefaultUris.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PermissionEscalationTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/InstantUpgradeApp/src/com/android/cts/instantupgradeapp/ClientTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/WebViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/DeviceIdentifiers/src/android/appsecurity/cts/deviceids/DeviceIdentifierAppOpTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadExternalStorageApp/src/com/android/cts/readexternalstorageapp/ReadMultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/CorruptApkTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/UseProcessTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/InstantCookieApp/src/test/instant/cookie/CookieTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UseProcessSuccess/src/com/android/cts/useprocess/AccessNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialLegacy/src/android/os/cts/AccessSerialLegacyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SessionInspector/src/com/android/cts/sessioninspector/SessionInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SharedUidInstall/src/com/android/cts/shareduidinstall/SharedUidPackageTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ScopedDirectoryAccessTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/MajorVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DocumentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/SessionReferrerUriTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 1)]"	"[('(3,data,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(4,even,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(2,cannot,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(2,read,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(1,both,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(12,data,/com/android/cts/usespermissiondiffcertapp/UriGrantsResultTest.java)', 1), ('(11,data,/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java)', 1), ('(1,running,/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java)', 1), ('(43,data,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(2,even,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(96,read,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(1,running,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(2,both,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(11,data,/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java)', 1), ('(1,running,/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java)', 1), ('(1,ensure,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(11,data,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(7,read,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(6,even,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(7,cannot,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(32,read,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(1,ensure,/test/instant/cookie/CookieTest.java)', 1), ('(1,data,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(26,list,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(1,stored,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(3,user,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(1,both,/android/appsecurity/cts/listeningports/ListeningPortsTest.java)', 1), ('(5,read,/com/android/cts/instantupgradeapp/ClientTest.java)', 1), ('(4,ensure,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(4,cannot,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(2,read,/com/android/cts/useprocess/AccessNetworkTest.java)', 1), ('(2,files,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(3,data,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(1,list,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(17,user,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(7,even,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(1,both,/com/android/cts/encryptionapp/EncryptionAppTest.java)', 1), ('(1,applications,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,ensure,/com/android/cts/normalapp/ClientTest.java)', 1), ('(6,data,/com/android/cts/normalapp/ClientTest.java)', 1), ('(13,list,/com/android/cts/normalapp/ClientTest.java)', 1), ('(15,user,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,cannot,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,given,/com/android/cts/normalapp/ClientTest.java)', 1), ('(10,read,/com/android/cts/ephemeralapp1/WebViewTest.java)', 1), ('(2,applications,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(14,data,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(18,list,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(10,read,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(2,given,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(3,list,/com/android/cts/userapptest/ClientTest.java)', 1), ('(5,user,/com/android/cts/userapptest/ClientTest.java)', 1), ('(5,user,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(1,cannot,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(1,given,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(2,read,/android/os/cts/AccessSerialLegacyTest.java)', 1), ('(1,data,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(1,user,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(9,files,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(2,ensure,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(12,data,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(6,list,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(10,user,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(1,cannot,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(22,read,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(1,volume,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(1,both,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(19,list,/com/android/cts/writeexternalstorageapp/WriteGiftTest.java)', 1), ('(9,read,/com/android/cts/writeexternalstorageapp/WriteGiftTest.java)', 1), ('(6,files,/com/android/cts/appdataisolation/appb/AppBTests.java)', 1), ('(21,data,/com/android/cts/appdataisolation/appb/AppBTests.java)', 1), ('(8,user,/com/android/cts/appdataisolation/appb/AppBTests.java)', 1), ('(2,cannot,/com/android/cts/appdataisolation/appb/AppBTests.java)', 1), ('(12,files,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(93,data,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,stored,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(26,user,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(5,even,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(4,cannot,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,running,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(6,files,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(4,list,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(11,users,/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java)', 1), ('(10,applications,/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java)', 1), ('(41,list,/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java)', 1), ('(82,user,/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java)', 1), ('(3,files,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,applications,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,ensure,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(27,data,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(1,even,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(5,cannot,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(9,read,/com/android/cts/appaccessdata/AccessPrivateDataTest.java)', 1), ('(5,data,/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java)', 1), ('(2,list,/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java)', 1), ('(1,list,/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java)', 1), ('(2,user,/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java)', 1), ('(2,read,/android/appsecurity/cts/deviceids/DeviceIdentifierAppOpTest.java)', 1), ('(3,even,/android/os/cts/AccessSerialModernTest.java)', 1), ('(1,cannot,/android/os/cts/AccessSerialModernTest.java)', 1), ('(10,read,/android/os/cts/AccessSerialModernTest.java)', 1), ('(1,data,/com/android/cts/sessioninspector/SessionInspectorTest.java)', 1), ('(3,files,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(3,ensure,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(47,data,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(3,read,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(2,data,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(3,list,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(7,user,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(11,read,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(1,both,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(5,read,/com/android/cts/readexternalstorageapp/ReadMultiViewTest.java)', 1), ('(10,list,/com/android/cts/readexternalstorageapp/ReadGiftTest.java)', 1), ('(21,read,/com/android/cts/readexternalstorageapp/ReadGiftTest.java)', 1), ('(1,cannot,/com/android/cts/overlay/app/OverlayableTest.java)', 1), ('(9,read,/com/android/cts/overlay/app/OverlayableTest.java)', 1), ('(4,user,/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java)', 1), ('(16,files,/com/android/cts/storageapp/StorageTest.java)', 1), ('(15,data,/com/android/cts/storageapp/StorageTest.java)', 1), ('(8,list,/com/android/cts/storageapp/StorageTest.java)', 1), ('(7,user,/com/android/cts/storageapp/StorageTest.java)', 1), ('(1,read,/com/android/cts/storageapp/StorageTest.java)', 1), ('(6,files,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(1,ensure,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(28,data,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(30,list,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(8,stored,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(23,read,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(3,both,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(1,data,/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java)', 1), ('(3,list,/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java)', 1), ('(2,user,/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java)', 1), ('(36,volume,/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java)', 1), ('(3,user,/com/android/cts/shareduidinstall/SharedUidPackageTest.java)', 1), ('(6,files,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(4,data,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(21,list,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(19,user,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(1,even,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(23,read,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(3,volume,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(3,list,/com/android/cts/packageaccessapp/PackageAccessTest.java)', 1), ('(5,user,/com/android/cts/packageaccessapp/PackageAccessTest.java)', 1), ('(1,users,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(32,files,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(2,ensure,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(18,data,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(51,user,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(1,even,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(1,read,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(1,both,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(4,users,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(8,files,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(1,data,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(1,list,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(11,user,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(1,cannot,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(18,read,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(1,running,/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java)', 1), ('(3,users,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(10,files,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(1,ensure,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(25,data,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(25,list,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(5,user,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(4,even,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(3,cannot,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(13,read,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(3,volume,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(2,running,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(3,both,/com/android/cts/splitapp/SplitAppTest.java)', 1), ('(1,users,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(2,data,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(1,list,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(1,user,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(1,even,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(1,cannot,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(44,read,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(34,files,/com/android/cts/externalstorageapp/CommonExternalStorageTest.java)', 1), ('(8,data,/com/android/cts/externalstorageapp/CommonExternalStorageTest.java)', 1), ('(50,list,/com/android/cts/externalstorageapp/CommonExternalStorageTest.java)', 1), ('(27,read,/com/android/cts/externalstorageapp/CommonExternalStorageTest.java)', 1), ('(19,list,/com/android/cts/externalstorageapp/GiftTest.java)', 1), ('(14,read,/com/android/cts/externalstorageapp/GiftTest.java)', 1), ('(1,files,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(5,data,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(3,list,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(6,user,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(6,read,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(1,both,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(1,data,/com/android/cts/externalstorageapp/ReadDefaultUris.java)', 1), ('(5,read,/com/android/cts/externalstorageapp/ReadDefaultUris.java)', 1), ('(1,ensure,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1), ('(2,data,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1), ('(1,list,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1), ('(1,even,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1), ('(4,both,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1), ('(8,user,/android/appsecurity/cts/DirectBootHostTest.java)', 1), ('(2,read,/android/appsecurity/cts/DirectBootHostTest.java)', 1), ('(6,files,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(4,data,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(34,list,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(5,user,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(1,even,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(1,cannot,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(1,read,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(3,user,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(3,read,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,applications,/android/appsecurity/cts/SharedUserIdTest.java)', 1), ('(6,user,/android/appsecurity/cts/SharedUserIdTest.java)', 1), ('(1,cannot,/android/appsecurity/cts/SharedUserIdTest.java)', 1), ('(2,users,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(7,list,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(6,user,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(2,given,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(1,both,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(2,user,/android/appsecurity/cts/PermissionEscalationTest.java)', 1), ('(1,cannot,/android/appsecurity/cts/PermissionEscalationTest.java)', 1), ('(1,ensure,/android/appsecurity/cts/SplitTests.java)', 1), ('(7,list,/android/appsecurity/cts/SplitTests.java)', 1), ('(1,user,/android/appsecurity/cts/SplitTests.java)', 1), ('(8,even,/android/appsecurity/cts/SplitTests.java)', 1), ('(1,read,/android/appsecurity/cts/SplitTests.java)', 1), ('(1,both,/android/appsecurity/cts/SplitTests.java)', 1), ('(3,files,/android/appsecurity/cts/AppOpsTest.java)', 1), ('(2,data,/android/appsecurity/cts/AppOpsTest.java)', 1), ('(2,cannot,/android/appsecurity/cts/AppOpsTest.java)', 1), ('(7,files,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(2,volume,/android/appsecurity/cts/ScopedDirectoryAccessTest.java)', 1), ('(4,applications,/android/appsecurity/cts/EphemeralTest.java)', 1), ('(4,list,/android/appsecurity/cts/EphemeralTest.java)', 1), ('(53,user,/android/appsecurity/cts/EphemeralTest.java)', 1), ('(6,read,/android/appsecurity/cts/EphemeralTest.java)', 1), ('(16,users,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(5,data,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(55,user,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(2,even,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(2,read,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(2,running,/android/appsecurity/cts/StorageHostTest.java)', 1), ('(4,users,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(85,data,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(1,list,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(3,stored,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(55,user,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(9,cannot,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(4,read,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(1,running,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(1,user,/android/appsecurity/cts/MajorVersionTest.java)', 1), ('(1,applications,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(2,ensure,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(52,data,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(2,user,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(6,cannot,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(1,read,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(23,data,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(3,list,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(4,stored,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(3,user,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(5,even,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(6,cannot,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(6,read,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(10,both,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(3,users,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(1,applications,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(5,ensure,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(37,data,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(14,list,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(3,user,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(49,read,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(65,volume,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(1,both,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(73,users,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(7,files,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(1,data,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(15,list,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(265,user,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(1,cannot,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(80,read,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(1,given,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(2,both,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(3,applications,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(28,user,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(4,even,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(2,cannot,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(7,read,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(2,both,/android/appsecurity/cts/IsolatedSplitsTests.java)', 1), ('(2,cannot,/android/appsecurity/cts/CorruptApkTests.java)', 1), ('(2,read,/android/appsecurity/cts/CorruptApkTests.java)', 1), ('(1,applications,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(1,data,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(6,list,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(7,user,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(6,cannot,/android/appsecurity/cts/OverlayHostTest.java)', 1), ('(7,files,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(1,ensure,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(1,data,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(16,list,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(2,user,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(2,files,/android/appsecurity/cts/DocumentsTest.java)', 1), ('(3,user,/android/appsecurity/cts/SessionReferrerUriTest.java)', 1), ('(1,user,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(1,user,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(3,read,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(4,users,/android/appsecurity/cts/PackageVisibilityTest.java)', 1), ('(3,data,/android/appsecurity/cts/PackageVisibilityTest.java)', 1), ('(70,user,/android/appsecurity/cts/PackageVisibilityTest.java)', 1), ('(2,read,/android/appsecurity/cts/PackageVisibilityTest.java)', 1), ('(1,applications,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(3,user,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(3,data,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(1,user,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(1,read,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(10,users,/android/appsecurity/cts/ApplicationVisibilityTest.java)', 1), ('(11,applications,/android/appsecurity/cts/ApplicationVisibilityTest.java)', 1), ('(8,list,/android/appsecurity/cts/ApplicationVisibilityTest.java)', 1), ('(179,user,/android/appsecurity/cts/ApplicationVisibilityTest.java)', 1), ('(10,cannot,/android/appsecurity/cts/ApplicationVisibilityTest.java)', 1), ('(5,users,/android/appsecurity/cts/InstantAppUserTest.java)', 1), ('(150,user,/android/appsecurity/cts/InstantAppUserTest.java)', 1), ('(1,read,/android/appsecurity/cts/InstantAppUserTest.java)', 1), ('(40,read,/android/appsecurity/cts/ReadableSettingsFieldsTest.java)', 1), ('(2,user,/android/appsecurity/cts/UseProcessTest.java)', 1)]"	"[('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[read]:[1]:method_text:[ FEATURE_C_STRING,                TestTheme.THEME_FEATURE_B, TestTheme.THEME_FEATURE_C);    }   ])', 2), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[1]:method_text:[       fail(""activity started"");        } catch (ActivityNotFoundException expected) { }    }   ])', 2), (""([3:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[list]:[3]:method_text:[eadInt(none));        }    }    /**     * Verify we can't access gifts in obb dirs.     */   ])"", 2), (""([2:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[read]:[2]:method_text:[eadInt(none));        }    }    /**     * Verify we can't access gifts in obb dirs.     */   ])"", 2), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[1]:method_text:[();        } finally {            mContext.unbindService(mServiceConnection);        }    }   ])', 2), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[     // save button is enabled for dir2        assertTrue(findSaveButton().isEnabled());    }   ])', 2), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[ODE);        mDevice.waitForIdle();        assertTrue(findDocument(""FILE1"").exists());    }   ])', 2), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[user]:[1]:method_text:[ } catch (NameNotFoundException e) {            fail(""Package must be found"");        }    }   ])', 2), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[sReadable(Settings.Secure.class, publicSettingsKeys,                hiddenSettingsKeys);    }   ])', 2), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[sReadable(Settings.System.class, publicSettingsKeys,                hiddenSettingsKeys);    }   ])', 2), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[files]:[1]:method_text:[our socket.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[files]:[1]:method_text:[redentials.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[data]:[1]:method_text:[our socket.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[data]:[1]:method_text:[redentials.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[list]:[2]:method_text:[  * unauthorized access to computers systems without user knowledge or     * awareness.     */   ])', 2), ('([3:/android/appsecurity/cts/ListeningPortsTest.java]:[list]:[3]:method_text:[our socket.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([3:/android/appsecurity/cts/ListeningPortsTest.java]:[list]:[3]:method_text:[redentials.     *     * Please convert loopback IP connections to unix domain sockets.     */   ])', 2), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[user]:[1]:method_text:[  * unauthorized access to computers systems without user knowledge or     * awareness.     */   ])', 2), ('([1:/android/appsecurity/cts/AppDataIsolationTests.java]:[stored]:[1]:method_text:[;        runDeviceTests(APPA_PKG, APPA_CLASS, APPA_METHOD_CHECK_REF_PROFILE_ACCESSIBLE);    }   ])', 2), ('([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[even]:[1]:method_text:[  Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasPerm"");    }   ])', 2), ('([8:/android/appsecurity/cts/ExternalStorageHostTest.java]:[user]:[8]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ])', 2), ('([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[read]:[1]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ])', 2), ('([1:/android/appsecurity/cts/IsolatedSplitsTests.java]:[both]:[1]:method_text:[              APK_FEATURE_PROVIDER_B_WITH_EXTRACTING, APK_FEATURE_PROXY_WITH_EXTRACTING);    }   ])', 2), ('([3:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[data]:[3]:method_text:[.EXTRA_RETURN_RESULT);        assertThat(errorMessage, containsString(""dlopen failed""));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[even]:[1]:method_text:[BeSeven() throws Exception {        assertThat(Native.getNumberADirectly(), equalTo(7));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[even]:[1]:method_text:[BeSeven() throws Exception {        assertThat(Native.getNumberAViaProxy(), equalTo(7));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[even]:[1]:method_text:[Eleven() throws Exception {        assertThat(Native.getNumberBDirectly(), equalTo(11));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[even]:[1]:method_text:[Eleven() throws Exception {        assertThat(Native.getNumberBViaProxy(), equalTo(11));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[cannot]:[1]:method_text:[.EXTRA_RETURN_RESULT);        assertThat(errorMessage, containsString(""dlopen failed""));    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[cannot]:[1]:method_text:[  };        }        public Context getContext() {            return mContext;        }    }}])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[both]:[1]:method_text:[        assertResourcesDoNotExist(activity, FEATURE_C_STRING, TestTheme.THEME_FEATURE_C);    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsResultTest.java]:[data]:[1]:method_text:[;    }    public void destroyActivity() throws Exception {        mActivity.finish();    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsResultTest.java]:[data]:[5]:method_text:[tAccess(subClip, 0);        assertAccess(subUri, 0);        assertAccess(subSubUri, 0);    }   ])', 1), ('([6:/com/android/cts/usespermissiondiffcertapp/UriGrantsResultTest.java]:[data]:[6]:method_text:[EXTRA_TEXT, clip);        intent.putExtra(Intent.EXTRA_INDEX, mode);        return intent;    }}])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java]:[data]:[1]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java]:[data]:[5]:method_text:[cess(sub2Clip, 0);        assertAccess(sub2Uri, 0);        assertAccess(sub2SubUri, 0);    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java]:[data]:[5]:method_text:[ce"");        } catch (SecurityException e) {            // This is what we want.        }    }}])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsServiceTest.java]:[running]:[1]:method_text:[cess(sub2Clip, 0);        assertAccess(sub2Uri, 0);        assertAccess(sub2SubUri, 0);    }   ])', 1), ('([19:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[19]:method_text:[  return clip;    }    /**     * Validate behavior of persistable permission grants.     */   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[2]:method_text:[hCurInstanceSync();    }    /**     * Validate behavior of prefix permission grants.     */   ])', 1), ('([6:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[6]:method_text:[wCat, ""writing should have failed"");        ReceiveUriActivity.finishCurInstanceSync();    }   ])', 1), ('([4:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[4]:method_text:[    }    /**     * Validate behavior of directly granting/revoking permission grants.     */   ])', 1), ('([6:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[6]:method_text:[r of a direct permission grant, where the receiver of     * that permission revokes it.     */   ])', 1), ('([6:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[data]:[6]:method_text:[llowed(clipMeowCat, ""writing should have failed"");        assertNoPersistedUriPermission();    }}])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[even]:[2]:method_text:[hCurInstanceSync();    }    /**     * Validate behavior of prefix permission grants.     */   ])', 1), ('([3:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[3]:method_text:[  return clip;    }    /**     * Validate behavior of persistable permission grants.     */   ])', 1), ('([25:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[25]:method_text:[hCurInstanceSync();    }    /**     * Validate behavior of prefix permission grants.     */   ])', 1), ('([13:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[13]:method_text:[wCat, ""writing should have failed"");        ReceiveUriActivity.finishCurInstanceSync();    }   ])', 1), ('([13:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[13]:method_text:[    }    /**     * Validate behavior of directly granting/revoking permission grants.     */   ])', 1), ('([21:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[21]:method_text:[r of a direct permission grant, where the receiver of     * that permission revokes it.     */   ])', 1), ('([21:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[read]:[21]:method_text:[llowed(clipMeowCat, ""writing should have failed"");        assertNoPersistedUriPermission();    }}])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[running]:[1]:method_text:[hCurInstanceSync();    }    /**     * Validate behavior of prefix permission grants.     */   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[both]:[2]:method_text:[hCurInstanceSync();    }    /**     * Validate behavior of prefix permission grants.     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java]:[data]:[1]:method_text:[usually to clean up from failed tests        ReceiveUriActivity.finishCurInstanceSync();    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java]:[data]:[5]:method_text:[cess(sub2Clip, 0);        assertAccess(sub2Uri, 0);        assertAccess(sub2SubUri, 0);    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java]:[data]:[5]:method_text:[ty"");        } catch (SecurityException e) {            // This is what we want.        }    }}])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsActivityTest.java]:[running]:[1]:method_text:[cess(sub2Clip, 0);        assertAccess(sub2Uri, 0);        assertAccess(sub2SubUri, 0);    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[ensure]:[1]:method_text:[clipFromClipboard);            assertWritingClipNotAllowed(clipFromClipboard);        }    }   ])', 1), ('([3:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[data]:[3]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[data]:[5]:method_text:[clipFromClipboard);            assertWritingClipNotAllowed(clipFromClipboard);        }    }   ])', 1), ('([3:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[data]:[3]:method_text:[clip + "" on clipboard!"");            } catch (Exception expected) {            }        }    }}])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[read]:[2]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([4:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[read]:[4]:method_text:[clipFromClipboard);            assertWritingClipNotAllowed(clipFromClipboard);        }    }   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[read]:[1]:method_text:[clip + "" on clipboard!"");            } catch (Exception expected) {            }        }    }}])', 1), (""([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[even]:[1]:method_text:[riction aren't     * allowed, even though the {@code provider} requires no permissions.     */   ])"", 1), (""([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[even]:[1]:method_text:[access,     * even if the caller doesn't hold another matching {@code path-permission}.     */   ])"", 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[even]:[1]:method_text:[   assertEquals(getContext().getContentResolver().getType(PRIV_URI), EXPECTED_MIME_TYPE);    }   ])', 1), (""([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[even]:[2]:method_text:[that application didn't explicitly declare either     * exported=true or exported=false     */   ])"", 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[even]:[1]:method_text:[AMBIGUOUS,                getContext().getContentResolver().getType(AMBIGUOUS_URI_COMPAT));    }}])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[2]:method_text:[ignature content provider cannot be read,     * since this app lacks the required certs     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[1]:method_text:[ature content provider cannot be written,     * since this app lacks the required certs     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[1]:method_text:[eprovider content provider cannot be read,     * since it is not exported from its app.     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[1]:method_text:[vider content provider cannot be read,     * since it doesn\'t have an ""exported="" line.     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[1]:method_text:[ovider content provider cannot be written,     * since it is not exported from its app.     */   ])', 1), (""([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[cannot]:[1]:method_text:[ider content provider cannot be written,     * since it doesn't have an exported= line.     */   ])"", 1), ('([7:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[7]:method_text:[ignature content provider cannot be read,     * since this app lacks the required certs     */   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[ature content provider cannot be written,     * since this app lacks the required certs     */   ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[1]:method_text:[eprovider content provider cannot be read,     * since it is not exported from its app.     */   ])', 1), ('([4:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[4]:method_text:[vider content provider cannot be read,     * since it doesn\'t have an ""exported="" line.     */   ])', 1), (""([4:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[4]:method_text:[r     * API versions, because it didn't specify either exported=true or exported=false.     */   ])"", 1), (""([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[r     * API versions, because it didn't specify either exported=true or exported=false.     */   ])"", 1), (""([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[riction aren't     * allowed, even though the {@code provider} requires no permissions.     */   ])"", 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[   }    /**     * Test that shady {@link Uri} are blocked by {@code path-permission}.     */   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[    assertReadingContentUriAllowed(test2);        assertWritingContentUriAllowed(test2);    }   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[   assertEquals(getContext().getContentResolver().getType(PERM_URI), EXPECTED_MIME_TYPE);    }   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[   assertEquals(getContext().getContentResolver().getType(PRIV_URI), EXPECTED_MIME_TYPE);    }   ])', 1), (""([2:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[read]:[2]:method_text:[that application didn't explicitly declare either     * exported=true or exported=false     */   ])"", 1), ('([1:/test/instant/cookie/CookieTest.java]:[ensure]:[1]:method_text:[sure cookie not modified        assertEquals(""1"", new String(pm.getInstantAppCookie()));    }   ])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[data]:[1]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([9:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[list]:[9]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([17:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[list]:[17]:method_text:[2*i + 1), 16));            }            return InetAddress.getByAddress(retval);        }    }}])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[stored]:[1]:method_text:[2*i + 1), 16));            }            return InetAddress.getByAddress(retval);        }    }}])', 1), ('([2:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[user]:[2]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[user]:[1]:method_text:[2*i + 1), 16));            }            return InetAddress.getByAddress(retval);        }    }}])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[both]:[1]:method_text:[e file and the boolean     * values are received as parameters from the host side test.     */   ])', 1), ('([3:/com/android/cts/instantupgradeapp/ClientTest.java]:[read]:[3]:method_text:[references"", 0);        assertThat(prefReader.getString(""test"", ""default""), is(""value""));    }   ])', 1), ('([2:/com/android/cts/instantupgradeapp/ClientTest.java]:[read]:[2]:method_text:[0, count));            }            assertThat(buffer.toString(), is(""MyTest""));        }    }}])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[ensure]:[2]:method_text:[ission2.protectionLevel                        & PermissionInfo.PROTECTION_MASK_BASE));     }   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[ensure]:[2]:method_text:[ssion(Manifest.permission.STEAL_AUDIO2),                PackageManager.PERMISSION_DENIED);    } }])', 1), ('([3:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[cannot]:[3]:method_text:[ission2.protectionLevel                        & PermissionInfo.PROTECTION_MASK_BASE));     }   ])', 1), ('([1:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[cannot]:[1]:method_text:[ssion(Manifest.permission.STEAL_AUDIO2),                PackageManager.PERMISSION_DENIED);    } }])', 1), ('([2:/com/android/cts/useprocess/AccessNetworkTest.java]:[read]:[2]:method_text:[e name) {        }    }    /**     * Test that the main process has network access.     */   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[files]:[1]:method_text:[r.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[files]:[1]:method_text:[StrictMode.setVmPolicy(original);            StrictMode.setViolationLogger(null);        }    }}])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[data]:[1]:method_text:[r.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[data]:[1]:method_text:[1234"");        assertTrue(""set-pin failed. Output: "" + output, output.contains(""1234""));    }   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[data]:[1]:method_text:[StrictMode.setVmPolicy(original);            StrictMode.setViolationLogger(null);        }    }}])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[list]:[1]:method_text:[StrictMode.setVmPolicy(original);            StrictMode.setViolationLogger(null);        }    }}])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[user]:[1]:method_text:[r.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[user]:[1]:method_text:[1234"");        assertTrue(""set-pin failed. Output: "" + output, output.contains(""1234""));    }   ])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[user]:[1]:method_text:[       mDevice.executeShellCommand(""settings delete global require_password_to_decrypt"");    }   ])', 1), ('([14:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[user]:[14]:method_text:[StrictMode.setVmPolicy(original);            StrictMode.setViolationLogger(null);        }    }}])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[even]:[1]:method_text:[r.tearDown();        if (mActivity != null) {            mActivity.finish();        }    }   ])', 1), ('([6:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[even]:[6]:method_text:[StrictMode.setVmPolicy(original);            StrictMode.setViolationLogger(null);        }    }}])', 1), ('([1:/com/android/cts/encryptionapp/EncryptionAppTest.java]:[both]:[1]:method_text:[1234"");        assertTrue(""set-pin failed. Output: "" + output, output.contains(""1234""));    }   ])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[applications]:[1]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[ensure]:[1]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[data]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([3:/com/android/cts/normalapp/ClientTest.java]:[data]:[3]:method_text:[r, is(nullValue()));        }    }    /** Tests getting changed packages for instant app. */   ])', 1), ('([2:/com/android/cts/normalapp/ClientTest.java]:[data]:[2]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[list]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([12:/com/android/cts/normalapp/ClientTest.java]:[list]:[12]:method_text:[s(queryIntent, 0 /*flags*/);            assertThat(resolveInfo.size(), is(0));        }    }   ])', 1), ('([5:/com/android/cts/normalapp/ClientTest.java]:[user]:[5]:method_text:[        }, Manifest.permission.DELETE_PACKAGES, Manifest.permission.ACCESS_INSTANT_APPS);    }   ])', 1), ('([10:/com/android/cts/normalapp/ClientTest.java]:[user]:[10]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[cannot]:[1]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[given]:[1]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([9:/com/android/cts/ephemeralapp1/WebViewTest.java]:[read]:[9]:method_text:[            mOnUiThread.cleanUp();        }        super.tearDown();    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/ephemeralapp1/WebViewTest.java]:[read]:[1]:method_text:[  return getActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_WEBVIEW);    }}])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[applications]:[1]:method_text:[ts.normalapp"");        assertThat(installerPackageName, is(""com.android.cts.normalapp""));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[applications]:[1]:method_text:[class,                () -> pm.getInstallerPackageName(""com.android.cts.unexposedapp""));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([4:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[4]:method_text:[me,                    is(""com.android.cts.ephemeralapp1.EphemeralProvider""));        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[1]:method_text:[      null /*sortOrder*/);            assertThat(testCursor, is(nullValue()));        }    }   ])', 1), ('([3:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[3]:method_text:[1));            assertThat(testCursor.getString(1), is(""InstantAppProvider""));        }    }   ])', 1), ('([3:/com/android/cts/ephemeralapp1/ClientTest.java]:[data]:[3]:method_text:[        @Override        public void onServiceDisconnected(ComponentName name) {        }    }}])', 1), ('([4:/com/android/cts/ephemeralapp1/ClientTest.java]:[list]:[4]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([11:/com/android/cts/ephemeralapp1/ClientTest.java]:[list]:[11]:method_text:[me,                    is(""com.android.cts.ephemeralapp1.EphemeralProvider""));        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[list]:[1]:method_text:[sFlags[permissionIndex]                & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0;    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[list]:[1]:method_text:[ize() == 0) {            fail(""No activies found for Intent: "" + queryIntent);        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[list]:[1]:method_text:[ad.getLooper()));        assertThat(latch.await(1000, TimeUnit.MILLISECONDS), is(true));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[1]:method_text:[s Exception {        InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[1]:method_text:[phemeralapp1"");        assertThat(installerPackageName, is(""com.android.cts.normalapp""));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[1]:method_text:[ts.normalapp"");        assertThat(installerPackageName, is(""com.android.cts.normalapp""));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[1]:method_text:[class,                () -> pm.getInstallerPackageName(""com.android.cts.unexposedapp""));    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[1]:method_text:[    } catch (SecurityException e) {            fail(""Permission not granted"");        }    }   ])', 1), ('([5:/com/android/cts/ephemeralapp1/ClientTest.java]:[read]:[5]:method_text:[ad.getLooper()));        assertThat(latch.await(1000, TimeUnit.MILLISECONDS), is(true));    }   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[given]:[2]:method_text:[        @Override        public void onServiceDisconnected(ComponentName name) {        }    }}])', 1), ('([1:/com/android/cts/userapptest/ClientTest.java]:[list]:[1]:method_text:[ic final String ACTION_QUERY_ACTIVITY =            ""com.android.cts.instantappusertest.QUERY"";   ])', 1), ('([1:/com/android/cts/userapptest/ClientTest.java]:[list]:[1]:method_text:[!= null && resolveInfo.size() != 0) {            fail(""resolved intents"");        }    }       ])', 1), ('([1:/com/android/cts/userapptest/ClientTest.java]:[list]:[1]:method_text:[eInfo.get(0).activityInfo.name,                is(""com.android.cts.userapp.UserActivity""));    }}])', 1), ('([2:/com/android/cts/userapptest/ClientTest.java]:[user]:[2]:method_text:[ic final String ACTION_QUERY_ACTIVITY =            ""com.android.cts.instantappusertest.QUERY"";   ])', 1), ('([3:/com/android/cts/userapptest/ClientTest.java]:[user]:[3]:method_text:[eInfo.get(0).activityInfo.name,                is(""com.android.cts.userapp.UserActivity""));    }}])', 1), ('([5:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[user]:[5]:method_text:[    assertEquals(KeyProperties.AUTH_DEVICE_CREDENTIAL, info.getUserAuthenticationType());    }   ])', 1), ('([1:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[cannot]:[1]:method_text:[           return;        }        fail(""Expected an UnrecoverableKeyException or null"");    }}])', 1), ('([1:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[given]:[1]:method_text:[           return;        }        fail(""Expected an UnrecoverableKeyException or null"");    }}])', 1), ('([2:/android/os/cts/AccessSerialLegacyTest.java]:[read]:[2]:method_text:[E permission"");        } catch (SecurityException e) {            /* expected */        }    }}])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[data]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[user]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);            }        }        throw new TimeoutException();    }}])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[files]:[2]:method_text:[{        assertEquals(Environment.MEDIA_MOUNTED, Environment.getExternalStorageState());    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[files]:[1]:method_text:[gacy filesystem paths continue working, and that they all     * point to same location.     */   ])', 1), ('([4:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[files]:[4]:method_text:[ICAL_FILES) {                assertEquals(readInt(file), value);            }        }    }   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[files]:[2]:method_text:[ FileInputStream(new File(cur, name))) {            assertEquals(42, fis.read());        }    }}])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[ensure]:[2]:method_text:[ICAL_FILES) {                assertEquals(readInt(file), value);            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[1]:method_text:[ExternalStorageState(path));    }    /**     * Verify mount status for random paths.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[2]:method_text:[ and it still has read-write access above them (except     * /Android/[data|obb] dirs).     */   ])', 1), ('([4:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[4]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[2]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[2]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[data]:[1]:method_text:[ FileInputStream(new File(cur, name))) {            assertEquals(42, fis.read());        }    }}])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[{        assertEquals(Environment.MEDIA_MOUNTED, Environment.getExternalStorageState());    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[assertExternalStorageMounted();        Environment.getExternalStorageDirectory().list();    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[    }    }    /**     * Verify we have valid mount status until we leave the device.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[list]:[1]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[user]:[1]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([9:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[user]:[9]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[cannot]:[1]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[2]:method_text:[{        assertEquals(Environment.MEDIA_MOUNTED, Environment.getExternalStorageState());    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[assertExternalStorageMounted();        Environment.getExternalStorageDirectory().list();    }   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[2]:method_text:[ / 1000;        assertEquals(newTimeSeconds, Os.fstat(fd.getFileDescriptor()).st_mtime);    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[gacy filesystem paths continue working, and that they all     * point to same location.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[ICAL_FILES) {                assertEquals(readInt(file), value);            }        }    }   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[2]:method_text:[t above our package directories (on primary storage) we always     * have write access.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[2]:method_text:[    }    }    /**     * Verify we have valid mount status until we leave the device.     */   ])', 1), ('([3:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[3]:method_text:[ExternalStorageState(path));    }    /**     * Verify mount status for random paths.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[ and it still has read-write access above them (except     * /Android/[data|obb] dirs).     */   ])', 1), ('([3:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[3]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[2]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[read]:[1]:method_text:[ FileInputStream(new File(cur, name))) {            assertEquals(42, fis.read());        }    }}])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[volume]:[1]:method_text:[.trim().equals(""true"");    }    /**     * Verify that .nomedia is created correctly.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[both]:[1]:method_text:[              assertDirNoWriteAccess(userPath);                }            }        }    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[list]:[1]:method_text:[mport java.io.File;import java.util.List;public class WriteGiftTest extends AndroidTestCase {   ])', 1), (""([3:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[list]:[3]:method_text:[    /**     * Verify that we can't leave gifts in other package specific directories.     */   ])"", 1), ('([6:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[list]:[6]:method_text:[        }    }    /**     * Leave gifts for other packages in their obb directories.     */   ])', 1), ('([3:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[list]:[3]:method_text:[ assertFileNoAccess(none);            assertDirNoAccess(none.getParentFile());        }    }   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[read]:[2]:method_text:[mport java.io.File;import java.util.List;public class WriteGiftTest extends AndroidTestCase {   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[read]:[2]:method_text:[        }    }    /**     * Leave gifts for other packages in their obb directories.     */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteGiftTest.java]:[read]:[1]:method_text:[aths(getContext())) {            assertFalse(new File(dir, ""probe"").exists());        }    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appb/AppBTests.java]:[files]:[2]:method_text:[       + APPA_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appb/AppBTests.java]:[files]:[2]:method_text:[+ ""/primary.prof"");        assertDirIsAccessible(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appb/AppBTests.java]:[files]:[1]:method_text:[       assertDirDoesNotExist(appAExternalDir);        assertDirDoesNotExist(appAObbDir);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appb/AppBTests.java]:[files]:[1]:method_text:[thPackageA(String path) {        return path.replace(mContext.getPackageName(), APPA_PKG);    }}])', 1), ('([7:/com/android/cts/appdataisolation/appb/AppBTests.java]:[data]:[7]:method_text:[Exception {        mContext = InstrumentationRegistry.getInstrumentation().getContext();    }   ])', 1), ('([7:/com/android/cts/appdataisolation/appb/AppBTests.java]:[data]:[7]:method_text:[       + APPA_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([7:/com/android/cts/appdataisolation/appb/AppBTests.java]:[data]:[7]:method_text:[+ ""/primary.prof"");        assertDirIsAccessible(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([3:/com/android/cts/appdataisolation/appb/AppBTests.java]:[user]:[3]:method_text:[Exception {        mContext = InstrumentationRegistry.getInstrumentation().getContext();    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appb/AppBTests.java]:[user]:[1]:method_text:[       + APPA_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([4:/com/android/cts/appdataisolation/appb/AppBTests.java]:[user]:[4]:method_text:[+ ""/primary.prof"");        assertDirIsAccessible(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appb/AppBTests.java]:[cannot]:[1]:method_text:[       + APPA_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPA_PKG);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appb/AppBTests.java]:[cannot]:[1]:method_text:[       assertDirDoesNotExist(appAExternalDir);        assertDirDoesNotExist(appAObbDir);    }   ])', 1), ('([4:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[4]:method_text:[        if (obbDir != null) {            mObbPath = obbDir.getAbsolutePath();        }    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[  assertNull(mContext.getExternalFilesDir(""""));        assertNull(mContext.getObbDir());    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[sc/profiles/cur/""+ getCurrentUserId() + ""/""                + mContext.getPackageName());    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[tDirIsAccessible(""/data/misc/profiles/ref/""                + mContext.getPackageName());    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[2]:method_text:[ + ""/"" + APPB_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPB_PKG);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[       assertDirDoesNotExist(appBExternalDir);        assertDirDoesNotExist(appBObbDir);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[);        assertDirDoesNotExist(deDataRoot);        assertDirDoesNotExist(profileRoot);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[files]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([25:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[25]:method_text:[        if (obbDir != null) {            mObbPath = obbDir.getAbsolutePath();        }    }   ])', 1), ('([11:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[11]:method_text:[tExist(mDePath, CE_DATA_FILE_NAME);        assertFileExists(mDePath, DE_DATA_FILE_NAME);    }   ])', 1), ('([6:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[6]:method_text:[nalDataPath, EXTERNAL_DATA_FILE_NAME);        assertFileExists(mObbPath, OBB_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[ublic void testAppACeDataExists() {        assertFileExists(mCePath, CE_DATA_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[estAppACeDataDoesNotExist() {        assertFileDoesNotExist(mCePath, CE_DATA_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[ublic void testAppADeDataExists() {        assertFileExists(mDePath, DE_DATA_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[estAppADeDataDoesNotExist() {        assertFileDoesNotExist(mDePath, DE_DATA_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[nalDataPath, EXTERNAL_DATA_FILE_NAME);        assertFileExists(mObbPath, OBB_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[aPath, EXTERNAL_DATA_FILE_NAME);        assertFileDoesNotExist(mObbPath, OBB_FILE_NAME);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[sc/profiles/cur/""+ getCurrentUserId() + ""/""                + mContext.getPackageName());    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[2]:method_text:[tDirIsAccessible(""/data/misc/profiles/ref/""                + mContext.getPackageName());    }   ])', 1), ('([7:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[7]:method_text:[ + ""/"" + APPB_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPB_PKG);    }   ])', 1), ('([6:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[6]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([7:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[7]:method_text:[);        assertDirDoesNotExist(deDataRoot);        assertDirDoesNotExist(profileRoot);    }   ])', 1), ('([13:/com/android/cts/appdataisolation/appa/AppATests.java]:[data]:[13]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[stored]:[1]:method_text:[        if (obbDir != null) {            mObbPath = obbDir.getAbsolutePath();        }    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[2]:method_text:[        if (obbDir != null) {            mObbPath = obbDir.getAbsolutePath();        }    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[1]:method_text:[sc/profiles/cur/""+ getCurrentUserId() + ""/""                + mContext.getPackageName());    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[1]:method_text:[ + ""/"" + APPB_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPB_PKG);    }   ])', 1), ('([3:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[3]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([8:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[8]:method_text:[);        assertDirDoesNotExist(deDataRoot);        assertDirDoesNotExist(profileRoot);    }   ])', 1), ('([11:/com/android/cts/appdataisolation/appa/AppATests.java]:[user]:[11]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[even]:[1]:method_text:[        if (obbDir != null) {            mObbPath = obbDir.getAbsolutePath();        }    }   ])', 1), ('([4:/com/android/cts/appdataisolation/appa/AppATests.java]:[even]:[4]:method_text:[       assertDirDoesNotExist(appBExternalDir);        assertDirDoesNotExist(appBObbDir);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[cannot]:[1]:method_text:[ + ""/"" + APPB_PKG);        assertDirDoesNotExist(""/data/misc/profiles/ref/"" + APPB_PKG);    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[cannot]:[1]:method_text:[       assertDirDoesNotExist(appBExternalDir);        assertDirDoesNotExist(appBObbDir);    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[cannot]:[2]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[running]:[1]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([3:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[files]:[3]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([3:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[files]:[3]:method_text:[ested file "" + filename);            output.add(filename);        }        return output;    }}])', 1), ('([1:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[list]:[1]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([3:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[list]:[3]:method_text:[ested file "" + filename);            output.add(filename);        }        return output;    }}])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission granted */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission revoked */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[    /** Tests getting installed packages for another user, with cross user permission granted */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[Exception ignore) {}    }    /** Tests getting installed applications for the current user */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[   /** Tests getting installed applications for all users, with cross user permission granted */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[   /** Tests getting installed applications for all users, with cross user permission revoked */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[/** Tests getting installed applications for another user, with cross user permission granted */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[1]:method_text:[rityException ignore) {}    }    /** Tests getting installed packages for the current user */   ])', 1), ('([3:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[users]:[3]:method_text:[le());        } finally {            uiAutomation.dropShellPermissionIdentity();        }    }}])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[1]:method_text:[Exception ignore) {}    }    /** Tests getting installed applications for the current user */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[2]:method_text:[   /** Tests getting installed applications for all users, with cross user permission granted */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[2]:method_text:[   /** Tests getting installed applications for all users, with cross user permission revoked */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[2]:method_text:[/** Tests getting installed applications for another user, with cross user permission granted */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[2]:method_text:[/** Tests getting installed applications for another user, with cross user permission revoked */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[applications]:[1]:method_text:[rityException ignore) {}    }    /** Tests getting installed packages for the current user */   ])', 1), ('([1:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[1]:method_text:[onRegistry.getContext();    }    /** Tests getting installed packages for the current user */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission granted */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission revoked */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[2]:method_text:[    /** Tests getting installed packages for another user, with cross user permission granted */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[    /** Tests getting installed packages for another user, with cross user permission revoked */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[2]:method_text:[Exception ignore) {}    }    /** Tests getting installed applications for the current user */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[   /** Tests getting installed applications for all users, with cross user permission granted */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[   /** Tests getting installed applications for all users, with cross user permission revoked */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[2]:method_text:[/** Tests getting installed applications for another user, with cross user permission granted */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[4]:method_text:[/** Tests getting installed applications for another user, with cross user permission revoked */   ])', 1), ('([2:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[2]:method_text:[rityException ignore) {}    }    /** Tests getting installed packages for the current user */   ])', 1), ('([8:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[list]:[8]:method_text:[le());        } finally {            uiAutomation.dropShellPermissionIdentity();        }    }}])', 1), ('([3:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[3]:method_text:[onRegistry.getContext();    }    /** Tests getting installed packages for the current user */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission granted */   ])', 1), ('([6:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[6]:method_text:[}    /** Tests getting installed packages for all users, with cross user permission revoked */   ])', 1), ('([7:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[7]:method_text:[    /** Tests getting installed packages for another user, with cross user permission granted */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[    /** Tests getting installed packages for another user, with cross user permission revoked */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[Exception ignore) {}    }    /** Tests getting installed applications for the current user */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[   /** Tests getting installed applications for all users, with cross user permission granted */   ])', 1), ('([6:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[6]:method_text:[   /** Tests getting installed applications for all users, with cross user permission revoked */   ])', 1), ('([7:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[7]:method_text:[/** Tests getting installed applications for another user, with cross user permission granted */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[/** Tests getting installed applications for another user, with cross user permission revoked */   ])', 1), ('([5:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[5]:method_text:[rityException ignore) {}    }    /** Tests getting installed packages for the current user */   ])', 1), ('([9:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[9]:method_text:[    /** Tests getting installed packages for primary user, with cross user permission granted */   ])', 1), ('([4:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[4]:method_text:[    /** Tests getting installed packages for primary user, with cross user permission revoked */   ])', 1), ('([10:/com/android/cts/applicationvisibility/ApplicationVisibilityCrossUserTest.java]:[user]:[10]:method_text:[le());        } finally {            uiAutomation.dropShellPermissionIdentity();        }    }}])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[files]:[1]:method_text:[        }    }    /**     * Tests that another app's public file cannot be accessed     */   ])"", 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[files]:[1]:method_text:[  }    /**     * Tests that we can't even access another app's root private data dir.     */   ])"", 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[files]:[1]:method_text:[ot be able to read qtaguid profile"",            new File(QTAGUID_STATS_FILE).canRead());    }   ])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[applications]:[1]:method_text:[{            throw new IllegalStateException(""Expected package not found: "" + e);        }    }}])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[ensure]:[1]:method_text:[ot be able to read qtaguid profile"",            new File(QTAGUID_STATS_FILE).canRead());    }   ])', 1), (""([14:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[data]:[14]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), (""([4:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[data]:[4]:method_text:[        }    }    /**     * Tests that another app's public file cannot be accessed     */   ])"", 1), (""([4:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[data]:[4]:method_text:[  }    /**     * Tests that we can't even access another app's root private data dir.     */   ])"", 1), ('([4:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[data]:[4]:method_text:[expected) {            assertEquals(path, OsConstants.EACCES, expected.errno);        }    }   ])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[data]:[1]:method_text:[erAppUid));        assertEquals(UNSUPPORTED, TrafficStats.getUidTxPackets(otherAppUid));    }   ])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[even]:[1]:method_text:[  }    /**     * Tests that we can't even access another app's root private data dir.     */   ])"", 1), (""([2:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[cannot]:[2]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[cannot]:[1]:method_text:[        }    }    /**     * Tests that another app's public file cannot be accessed     */   ])"", 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[cannot]:[1]:method_text:[ot be able to read qtaguid profile"",            new File(QTAGUID_STATS_FILE).canRead());    }   ])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[cannot]:[1]:method_text:[{            throw new IllegalStateException(""Expected package not found: "" + e);        }    }}])', 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[read]:[1]:method_text:[ntext();    }    /**     * Tests that another app's private data cannot be accessed.     */   ])"", 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[read]:[1]:method_text:[        }    }    /**     * Tests that another app's public file cannot be accessed     */   ])"", 1), (""([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[read]:[1]:method_text:[  }    /**     * Tests that we can't even access another app's root private data dir.     */   ])"", 1), ('([5:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[read]:[5]:method_text:[ot be able to read qtaguid profile"",            new File(QTAGUID_STATS_FILE).canRead());    }   ])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[read]:[1]:method_text:[{            throw new IllegalStateException(""Expected package not found: "" + e);        }    }}])', 1), ('([5:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[data]:[5]:method_text:[        assertEquals(action + ""; wrong priority"", priority, foundInfo.filter.getPriority());    }}])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[list]:[1]:method_text:[ctly.     * <p>     * System packages can NOT obtain higher priorities for any action.     */   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedUpdateTest.java]:[list]:[1]:method_text:[        assertEquals(action + ""; wrong priority"", priority, foundInfo.filter.getPriority());    }}])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java]:[list]:[1]:method_text:[S shim */    private static final String PRIVILEGED_SHIM_PKG = ""com.android.cts.priv.ctsshim"";   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java]:[user]:[1]:method_text:[IVILEGED_SHIM_PKG,                PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);    }   ])', 1), ('([1:/com/android/cts/privilegedupdate/PrivilegedAppDisableTest.java]:[user]:[1]:method_text:[nager.COMPONENT_ENABLED_STATE_ENABLED;        }        assertEquals(expectedState, state);    }}])', 1), ('([1:/android/appsecurity/cts/deviceids/DeviceIdentifierAppOpTest.java]:[read]:[1]:method_text:[pp with the READ_DEVICE_IDENTIFIERS app op ""                    + ""granted when invoking %s."";   ])', 1), ('([1:/android/appsecurity/cts/deviceids/DeviceIdentifierAppOpTest.java]:[read]:[1]:method_text:[ device identifiers; caught SecurityException instead: ""                    + e);        }    }}])', 1), ('([1:/android/os/cts/AccessSerialModernTest.java]:[even]:[1]:method_text:[stricted from accessing persistent device identifiers. */public class AccessSerialModernTest {   ])', 1), ('([2:/android/os/cts/AccessSerialModernTest.java]:[even]:[2]:method_text:[etContext().getPackageName(),                android.Manifest.permission.READ_PHONE_STATE);    }}])', 1), ('([1:/android/os/cts/AccessSerialModernTest.java]:[cannot]:[1]:method_text:[stricted from accessing persistent device identifiers. */public class AccessSerialModernTest {   ])', 1), ('([10:/android/os/cts/AccessSerialModernTest.java]:[read]:[10]:method_text:[etContext().getPackageName(),                android.Manifest.permission.READ_PHONE_STATE);    }}])', 1), ('([1:/com/android/cts/sessioninspector/SessionInspectorTest.java]:[data]:[1]:method_text:[         throw (Exception) result.getSerializable(""error"");        }        return result;    }}])', 1), (""([2:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[files]:[2]:method_text:[ta does not exist.     * Used to check that uninstall of an app deletes the app's data.     */   ])"", 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[files]:[1]:method_text:[    db.execSQL(""DROP TABLE IF EXISTS "" + DB_TABLE_NAME);            onCreate(db);        }    }}])', 1), (""([2:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[ensure]:[2]:method_text:[ta does not exist.     * Used to check that uninstall of an app deletes the app's data.     */   ])"", 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[ensure]:[1]:method_text:[    db.execSQL(""DROP TABLE IF EXISTS "" + DB_TABLE_NAME);            onCreate(db);        }    }}])', 1), ('([15:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[data]:[15]:method_text:[d traffic stats.     * @throws IOException if any error occurred when creating the file     */   ])', 1), (""([18:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[data]:[18]:method_text:[ta does not exist.     * Used to check that uninstall of an app deletes the app's data.     */   ])"", 1), ('([14:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[data]:[14]:method_text:[    db.execSQL(""DROP TABLE IF EXISTS "" + DB_TABLE_NAME);            onCreate(db);        }    }}])', 1), ('([2:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[read]:[2]:method_text:[d traffic stats.     * @throws IOException if any error occurred when creating the file     */   ])', 1), (""([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[read]:[1]:method_text:[ta does not exist.     * Used to check that uninstall of an app deletes the app's data.     */   ])"", 1), (""([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[data]:[1]:method_text:[      }    }    /**     * Verify that we don't have write access to any mountpoints.     */   ])"", 1), ('([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[data]:[1]:method_text:[             assertDirNoWriteAccess(buildCommonChildDirs(userPath));            }        }    }}])', 1), ('([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[list]:[1]:method_text:[sion#READ_EXTERNAL_STORAGE}. */public class ReadExternalStorageTest extends AndroidTestCase {   ])', 1), (""([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[list]:[1]:method_text:[      }    }    /**     * Verify that we don't have write access to any mountpoints.     */   ])"", 1), ('([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[list]:[1]:method_text:[             assertDirNoWriteAccess(buildCommonChildDirs(userPath));            }        }    }}])', 1), ('([7:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[user]:[7]:method_text:[             assertDirNoWriteAccess(buildCommonChildDirs(userPath));            }        }    }}])', 1), ('([5:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[read]:[5]:method_text:[sion#READ_EXTERNAL_STORAGE}. */public class ReadExternalStorageTest extends AndroidTestCase {   ])', 1), ('([3:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[read]:[3]:method_text:[     * Verify that above our package directories we always have read only     * access.     */   ])', 1), (""([3:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[read]:[3]:method_text:[      }    }    /**     * Verify that we don't have write access to any mountpoints.     */   ])"", 1), ('([1:/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java]:[both]:[1]:method_text:[             assertDirNoWriteAccess(buildCommonChildDirs(userPath));            }        }    }}])', 1), (""([4:/com/android/cts/readexternalstorageapp/ReadMultiViewTest.java]:[read]:[4]:method_text:[ViewTest extends AndroidTestCase {    /**     * Create a file in PACKAGE_READ's cache.     */   ])"", 1), ('([1:/com/android/cts/readexternalstorageapp/ReadMultiViewTest.java]:[read]:[1]:method_text:[h()).st_uid);        assertEquals(Os.getuid(), Os.stat(testFile.getAbsolutePath()).st_uid);    }}])', 1), ('([1:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[list]:[1]:method_text:[import java.io.File;import java.util.List;public class ReadGiftTest extends AndroidTestCase {   ])', 1), ('([3:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[list]:[3]:method_text:[t(read, 101);        }    }    /**     * Verify we can read & write only our gifts.     */   ])', 1), ('([6:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[list]:[6]:method_text:[    assertFileReadWriteAccess(read);            assertEquals(101, readInt(read));        }    }}])', 1), ('([5:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[read]:[5]:method_text:[import java.io.File;import java.util.List;public class ReadGiftTest extends AndroidTestCase {   ])', 1), ('([8:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[read]:[8]:method_text:[t(read, 101);        }    }    /**     * Verify we can read & write only our gifts.     */   ])', 1), ('([8:/com/android/cts/readexternalstorageapp/ReadGiftTest.java]:[read]:[8]:method_text:[    assertFileReadWriteAccess(read);            assertEquals(101, readInt(read));        }    }}])', 1), ('([1:/com/android/cts/overlay/app/OverlayableTest.java]:[cannot]:[1]:method_text:[   output.append((char) c);        }        assertEquals(NOT_OVERLAID, output.toString());    }])', 1), ('([2:/com/android/cts/overlay/app/OverlayableTest.java]:[read]:[2]:method_text:[ertTrue(""Failed to load overlay "" + overlayPackage, task.get(TIMEOUT, TimeUnit.SECONDS));    }   ])', 1), ('([7:/com/android/cts/overlay/app/OverlayableTest.java]:[read]:[7]:method_text:[   output.append((char) c);        }        assertEquals(NOT_OVERLAID, output.toString());    }])', 1), ('([1:/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java]:[user]:[1]:method_text:[    private final Context mContext = InstrumentationRegistry.getInstrumentation().getContext();   ])', 1), (""([3:/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java]:[user]:[3]:method_text:[h (SecurityException ignore) {              // That's what we want!            }        }    }}])"", 1), ('([11:/com/android/cts/storageapp/StorageTest.java]:[files]:[11]:method_text:[), 1 * MB_IN_BYTES);        }        assertEquals(1 * MB_IN_BYTES, filesFile.length());    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[files]:[1]:method_text:[""cts"" probe files in every possible common storage location that     * we can think of.     */   ])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[files]:[3]:method_text:[ the ""cts"" probe files created above,     * since our storage should be fully isolated.     */   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[files]:[1]:method_text:[tory()) {                    traverse.push(f);                }            }        }    }   ])', 1), ('([2:/com/android/cts/storageapp/StorageTest.java]:[data]:[2]:method_text:[se {    private Context getContext() {        return getInstrumentation().getContext();    }   ])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[data]:[3]:method_text:[lse {            fail(""Skipping full disk test due to missing quota support"");        }    }   ])', 1), ('([5:/com/android/cts/storageapp/StorageTest.java]:[data]:[5]:method_text:[(new UiSelector().text(""OK"")).click();    }    /**     * Measure ourselves manually.     */   ])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[data]:[3]:method_text:[cheDir().getParentFile()));    }    /**     * Measure ourselves using platform APIs.     */   ])', 1), ('([2:/com/android/cts/storageapp/StorageTest.java]:[data]:[2]:method_text:[      fail(""Unexpected access"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[list]:[3]:method_text:[se {    private Context getContext() {        return getInstrumentation().getContext();    }   ])', 1), ('([2:/com/android/cts/storageapp/StorageTest.java]:[list]:[2]:method_text:[ the ""cts"" probe files created above,     * since our storage should be fully isolated.     */   ])', 1), ('([3:/com/android/cts/storageapp/StorageTest.java]:[list]:[3]:method_text:[tory()) {                    traverse.push(f);                }            }        }    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[user]:[1]:method_text:[se {    private Context getContext() {        return getInstrumentation().getContext();    }   ])', 1), ('([6:/com/android/cts/storageapp/StorageTest.java]:[user]:[6]:method_text:[      fail(""Unexpected access"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[read]:[1]:method_text:[tory()) {                    traverse.push(f);                }            }        }    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[files]:[1]:method_text:[ock.sleep(500);        MoreAsserts.assertEquals(""replaced!"".getBytes(), readFully(uri));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[files]:[1]:method_text:[(                ""Converted contents."".getBytes(), readTypedFully(uri, streamTypes[0]));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[files]:[1]:method_text:[w read document outside tree!"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[files]:[1]:method_text:[  assertTrue(textField.exists());        assertEquals(queryString, textField.getText());    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[files]:[2]:method_text:[ls(0, cursorDst.getCount());        } finally {            cursorDst.close();        }    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[ensure]:[1]:method_text:[ock.sleep(500);        MoreAsserts.assertEquals(""replaced!"".getBytes(), readFully(uri));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[1]:method_text:[id tearDown() throws Exception {        super.tearDown();        deleteTestDirectory();    }   ])', 1), ('([3:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[3]:method_text:[ock.sleep(500);        MoreAsserts.assertEquals(""replaced!"".getBytes(), readFully(uri));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[(                ""Converted contents."".getBytes(), readTypedFully(uri, streamTypes[0]));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[SPLAY_NAME));        assertEquals(MIME_TYPE, getColumn(uri, Document.COLUMN_MIME_TYPE));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[.data.getData();        MoreAsserts.assertEquals(""filetwo"".getBytes(), readFully(uri));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[w read document outside tree!"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[1]:method_text:[ result = mActivity.getResult();        assertEquals(""ReSuLt"", result.data.getAction());    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[ermission to read        MoreAsserts.assertEquals(""filetwo"".getBytes(), readFully(uri));    }   ])', 1), ('([3:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[3]:method_text:[ls(0, cursorDst.getCount());        } finally {            cursorDst.close();        }    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[docs.get(1));        assertEquals(DocumentsContract.getDocumentId(dirPic), docs.get(2));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[1]:method_text:[tent);        mDevice.waitForIdle();        assertTrue(findDocument(""DIR1"").exists());    }   ])', 1), ('([4:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[4]:method_text:[       assertEquals(""http://www.foobar.com/shared/SW33TCH3RR13S"", webLinkUri.toString());    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[1]:method_text:[ected"");        } catch(UiObjectNotFoundException e) {            // expected        }    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[data]:[2]:method_text:[NATION_DIRECTORY_PATH);        executeShellCommand(""rm -rf "" + TEST_SOURCE_DIRECTORY_PATH);    }}])', 1), ('([29:/com/android/cts/documentclient/DocumentsClientTest.java]:[list]:[29]:method_text:[id tearDown() throws Exception {        super.tearDown();        deleteTestDirectory();    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[list]:[1]:method_text:[docs.get(1));        assertEquals(DocumentsContract.getDocumentId(dirPic), docs.get(2));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[ODE);        mDevice.waitForIdle();        assertTrue(findDocument(""FILE4"").exists());    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[me());        // no Downloads root        assertFalse(findRoot(""Downloads"").exists());    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[tent);        mDevice.waitForIdle();        assertTrue(findDocument(""DIR1"").exists());    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[stored]:[1]:method_text:[NATION_DIRECTORY_PATH);        executeShellCommand(""rm -rf "" + TEST_SOURCE_DIRECTORY_PATH);    }}])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[2]:method_text:[id tearDown() throws Exception {        super.tearDown();        deleteTestDirectory();    }   ])', 1), ('([5:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[5]:method_text:[ock.sleep(500);        MoreAsserts.assertEquals(""replaced!"".getBytes(), readFully(uri));    }   ])', 1), ('([5:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[5]:method_text:[(                ""Converted contents."".getBytes(), readTypedFully(uri, streamTypes[0]));    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[1]:method_text:[.data.getData();        MoreAsserts.assertEquals(""filetwo"".getBytes(), readFully(uri));    }   ])', 1), ('([5:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[5]:method_text:[w read document outside tree!"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[2]:method_text:[ermission to read        MoreAsserts.assertEquals(""filetwo"".getBytes(), readFully(uri));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[2]:method_text:[ls(0, cursorDst.getCount());        } finally {            cursorDst.close();        }    }   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[read]:[1]:method_text:[NATION_DIRECTORY_PATH);        executeShellCommand(""rm -rf "" + TEST_SOURCE_DIRECTORY_PATH);    }}])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[both]:[1]:method_text:[ock.sleep(500);        MoreAsserts.assertEquals(""replaced!"".getBytes(), readFully(uri));    }   ])', 1), ('([2:/com/android/cts/documentclient/DocumentsClientTest.java]:[both]:[2]:method_text:[ result = mActivity.getResult();        assertEquals(""ReSuLt"", result.data.getAction());    }   ])', 1), ('([1:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[data]:[1]:method_text:[st, so we need to clear        // its data before each test.        clearDocumentsUi();    }   ])', 1), ('([1:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[list]:[1]:method_text:[st, so we need to clear        // its data before each test.        clearDocumentsUi();    }   ])', 1), ('([2:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[list]:[2]:method_text:[xt().getSystemService(Context.STORAGE_SERVICE);        return sm.getPrimaryStorageVolume();    }}])', 1), ('([1:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[user]:[1]:method_text:[st, so we need to clear        // its data before each test.        clearDocumentsUi();    }   ])', 1), ('([1:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[user]:[1]:method_text:[xt().getSystemService(Context.STORAGE_SERVICE);        return sm.getPrimaryStorageVolume();    }}])', 1), ('([1:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[volume]:[1]:method_text:[st, so we need to clear        // its data before each test.        clearDocumentsUi();    }   ])', 1), ('([8:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[volume]:[8]:method_text:[;        }        openExternalDirectoryInvalidPath(getPrimaryVolume(), DIRECTORY_ROOT);    }   ])', 1), ('([27:/com/android/cts/documentclient/ScopedDirectoryAccessClientTest.java]:[volume]:[27]:method_text:[xt().getSystemService(Context.STORAGE_SERVICE);        return sm.getPrimaryStorageVolume();    }}])', 1), ('([3:/com/android/cts/shareduidinstall/SharedUidPackageTest.java]:[user]:[3]:method_text:[agesForUid.length);        assertEquals(getContext().getPackageName(), packagesForUid[0]);    }}])', 1), ('([2:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[files]:[2]:method_text:[ntUris.parseId(jpgUri)));        assertTrue(seen.contains(ContentUris.parseId(pdfUri)));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[files]:[1]:method_text:[xists());        final File pdf = stageFile(TEST_PDF);        assertTrue(pdf.exists());    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[files]:[1]:method_text:[  TEST_PDF.delete();        assertNull(MediaStore.scanFile(mContentResolver, TEST_PDF));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[files]:[1]:method_text:[String(mode));            } catch (SecurityException expected) {            }        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[files]:[1]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[data]:[1]:method_text:[mContentResolver = mContext.getContentResolver();        mUserId = mContext.getUserId();    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[data]:[1]:method_text:[ }        }    }    /**     * Test prefix and non-prefix uri grant for all packages     */   ])', 1), ('([2:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[data]:[2]:method_text:[eFileAPISupport(File file) throws Exception {        assertThat(file.delete()).isTrue();    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[1]:method_text:[ntUris.parseId(jpgUri)));        assertTrue(seen.contains(ContentUris.parseId(pdfUri)));    }   ])', 1), ('([2:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[2]:method_text:[eFileAPISupport(File file) throws Exception {        assertThat(file.delete()).isTrue();    }   ])', 1), ('([3:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[3]:method_text:[ be blocked"");            } catch (SecurityException expected) {            }        }    }   ])', 1), ('([3:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[3]:method_text:[ected */);        assertEquals(""1"", queryForSingleColumn(red, MediaColumns.IS_TRASHED));    }   ])', 1), ('([4:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[4]:method_text:[         assertEquals(""0"", queryForSingleColumn(red, MediaColumns.IS_TRASHED));        }    }   ])', 1), ('([3:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[3]:method_text:[ false));        assertEquals(""0"", queryForSingleColumn(red, MediaColumns.IS_FAVORITE));    }   ])', 1), ('([5:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[list]:[5]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([3:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[3]:method_text:[mContentResolver = mContext.getContentResolver();        mUserId = mContext.getUserId();    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ }        }    }    /**     * Test prefix and non-prefix uri grant for all packages     */   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ocked"");        } catch (SecurityException | FileNotFoundException expected) {        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[   } catch (SecurityException | FileNotFoundException expected) {            }        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ry (ParcelFileDescriptor pfd = mContentResolver.openFileDescriptor(red, ""w"")) {        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[n(exception);        assertEquals(1, mContentResolver.update(red, values, null, null));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[scalation(exception);        assertEquals(1, mContentResolver.delete(red, null, null));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[eFileAPISupport(File file) throws Exception {        assertThat(file.delete()).isTrue();    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ be blocked"");            } catch (SecurityException expected) {            }        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ected */);        assertEquals(""1"", queryForSingleColumn(red, MediaColumns.IS_TRASHED));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[         assertEquals(""0"", queryForSingleColumn(red, MediaColumns.IS_TRASHED));        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[1]:method_text:[ false));        assertEquals(""0"", queryForSingleColumn(red, MediaColumns.IS_FAVORITE));    }   ])', 1), ('([5:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[user]:[5]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[even]:[1]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([3:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[3]:method_text:[ }        }    }    /**     * Test prefix and non-prefix uri grant for all packages     */   ])', 1), ('([6:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[6]:method_text:[String(mode));            } catch (SecurityException expected) {            }        }    }   ])', 1), ('([6:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[6]:method_text:[ocked"");        } catch (SecurityException | FileNotFoundException expected) {        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[1]:method_text:[   } catch (SecurityException | FileNotFoundException expected) {            }        }    }   ])', 1), ('([5:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[5]:method_text:[eFileAPISupport(File file) throws Exception {        assertThat(file.delete()).isTrue();    }   ])', 1), ('([2:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[read]:[2]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[volume]:[1]:method_text:[ntUris.parseId(jpgUri)));        assertTrue(seen.contains(ContentUris.parseId(pdfUri)));    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[volume]:[1]:method_text:[String(mode));            } catch (SecurityException expected) {            }        }    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[volume]:[1]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[list]:[1]:method_text:[{        mUiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());    }   ])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[list]:[1]:method_text:[kageName)) {                fail(TINY_PKG + "" visible in user"");            }        }    }   ])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[list]:[1]:method_text:[urn;            }        }        fail(TINY_PKG + "" not found in getInstalledPackages()"");    }])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[user]:[1]:method_text:[e null            assertNull(pi);         } catch (NameNotFoundException e) {        }    }   ])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[user]:[1]:method_text:[be null            assertNull(pi);        } catch (NameNotFoundException e) {        }    }   ])', 1), ('([1:/com/android/cts/packageaccessapp/PackageAccessTest.java]:[user]:[1]:method_text:[kageName)) {                fail(TINY_PKG + "" visible in user"");            }        }    }   ])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[users]:[1]:method_text:[external files of specific media types and ensure that     * they're tracked correctly.     */   ])"", 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[files]:[1]:method_text:[external files of specific media types and ensure that     * they're tracked correctly.     */   ])"", 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[files]:[1]:method_text:[ manually should always be consistent with     * whatever the stats APIs are returning.     */   ])', 1), ('([2:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[files]:[2]:method_text:[deltaAfter = statsSize - manualSize;        assertMostlyEquals(deltaBefore, deltaAfter);    }   ])', 1), ('([22:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[files]:[22]:method_text:[S);        assertMostlyEquals(targetA / 2, getCacheBytes(PKG_B, user), 2 * MB_IN_BYTES);    }   ])', 1), ('([6:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[files]:[6]:method_text:[t.call(pkg, pkg, args);            return res.getLong(UtilsReceiver.EXTRA_BYTES);        }    }}])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[ensure]:[1]:method_text:[external files of specific media types and ensure that     * they're tracked correctly.     */   ])"", 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[ensure]:[1]:method_text:[ manually should always be consistent with     * whatever the stats APIs are returning.     */   ])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[1]:method_text:[ test verifies that both kernel options and the fstab 'quota'     * option are enabled.     */   ])"", 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[1]:method_text:[f abusive apps."",                    stats.isReservedSupported(UUID_DEFAULT));        }    }   ])', 1), ('([2:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[2]:method_text:[ent.getDataDirectory().getUsableSpace();        assertAtLeast(expectedFree, actualFree);    }   ])', 1), ('([8:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[8]:method_text:[                afterUser.getExternalCacheBytes() - beforeUser.getExternalCacheBytes());    }   ])', 1), (""([4:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[4]:method_text:[external files of specific media types and ensure that     * they're tracked correctly.     */   ])"", 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[1]:method_text:[deltaAfter = statsSize - manualSize;        assertMostlyEquals(deltaBefore, deltaAfter);    }   ])', 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[data]:[1]:method_text:[S);        assertMostlyEquals(targetA / 2, getCacheBytes(PKG_B, user), 2 * MB_IN_BYTES);    }   ])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[1]:method_text:[ test verifies that both kernel options and the fstab 'quota'     * option are enabled.     */   ])"", 1), ('([18:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[18]:method_text:[                afterUser.getExternalCacheBytes() - beforeUser.getExternalCacheBytes());    }   ])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[1]:method_text:[external files of specific media types and ensure that     * they're tracked correctly.     */   ])"", 1), ('([10:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[10]:method_text:[ manually should always be consistent with     * whatever the stats APIs are returning.     */   ])', 1), ('([7:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[7]:method_text:[deltaAfter = statsSize - manualSize;        assertMostlyEquals(deltaBefore, deltaAfter);    }   ])', 1), ('([11:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[11]:method_text:[S);        assertMostlyEquals(targetA / 2, getCacheBytes(PKG_B, user), 2 * MB_IN_BYTES);    }   ])', 1), ('([3:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[user]:[3]:method_text:[t.call(pkg, pkg, args);            return res.getLong(UtilsReceiver.EXTRA_BYTES);        }    }}])', 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[even]:[1]:method_text:[S);        assertMostlyEquals(targetA / 2, getCacheBytes(PKG_B, user), 2 * MB_IN_BYTES);    }   ])', 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[read]:[1]:method_text:[deltaAfter = statsSize - manualSize;        assertMostlyEquals(deltaBefore, deltaAfter);    }   ])', 1), (""([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[both]:[1]:method_text:[ test verifies that both kernel options and the fstab 'quota'     * option are enabled.     */   ])"", 1), ('([3:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[users]:[3]:method_text:[     Log.d(TAG, ""Wiping "" + file);                file.delete();            }        }    }   ])', 1), (""([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[users]:[1]:method_text:[SINGLETON)));    }    /**     * Verify that we can't poke at storage of other users.     */   ])"", 1), ('([5:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[files]:[5]:method_text:[     Log.d(TAG, ""Wiping "" + file);                file.delete();            }        }    }   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[files]:[1]:method_text:[ge() throws Exception {        wipeTestFiles(Environment.getExternalStorageDirectory());    }   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[files]:[1]:method_text:[testCleanObbStorage() throws Exception {        wipeTestFiles(getContext().getObbDir());    }   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[files]:[1]:method_text:[    }    }    /**     * Verify that files cannot be accessed through media provider.     */   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[data]:[1]:method_text:[  private static File buildRawPath(String file) {        return new File(""/sdcard/"", file);    }}])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[list]:[1]:method_text:[     Log.d(TAG, ""Wiping "" + file);                file.delete();            }        }    }   ])', 1), ('([5:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[user]:[5]:method_text:[     Log.d(TAG, ""Wiping "" + file);                file.delete();            }        }    }   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[user]:[1]:method_text:[at "" + path, uid,                    readInt(new File(path, FILE_SINGLETON)));        }    }   ])', 1), (""([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[user]:[1]:method_text:[SINGLETON)));    }    /**     * Verify that we can't poke at storage of other users.     */   ])"", 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[user]:[1]:method_text:[    }    }    /**     * Verify that files cannot be accessed through media provider.     */   ])', 1), ('([3:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[user]:[3]:method_text:[  private static File buildRawPath(String file) {        return new File(""/sdcard/"", file);    }}])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[cannot]:[1]:method_text:[    }    }    /**     * Verify that files cannot be accessed through media provider.     */   ])', 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[read]:[1]:method_text:[     Log.d(TAG, ""Wiping "" + file);                file.delete();            }        }    }   ])', 1), ('([10:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[read]:[10]:method_text:[at "" + path, uid,                    readInt(new File(path, FILE_SINGLETON)));        }    }   ])', 1), (""([7:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[read]:[7]:method_text:[SINGLETON)));    }    /**     * Verify that we can't poke at storage of other users.     */   ])"", 1), ('([1:/com/android/cts/multiuserstorageapp/MultiUserStorageTest.java]:[running]:[1]:method_text:[at "" + path, uid,                    readInt(new File(path, FILE_SINGLETON)));        }    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[users]:[2]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[users]:[1]:method_text:[  + ""%s %b %s"", packageName, enabled, uriHostName);        SystemUtil.runShellCommand(cmd);    }}])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[ }    /**     * Verify that data written by {@link #testDataWrite()} is still intact.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[ose();        }    }    /**     * Verify that app is installed on internal storage.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[ual.st_dev);    }    /**     * Verify that app is not installed on internal storage.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[).getAbsolutePath());        MoreAsserts.assertNotEqual(internal.st_dev, actual.st_dev);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[;        writeString(new File(getContext().getExternalFilesDir(null), ""my_ext""), token);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[_ext"")));    }    /**     * Verify shared storage behavior when on internal storage.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[2]:method_text:[00) {            fail(""Expected primary storage to be on same volume as app"");        }    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[       assertTrue(new File(getContext().getCodeCacheDir(), ""cache.raw"").createNewFile());    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[files]:[1]:method_text:[());        assertFalse(new File(getContext().getCodeCacheDir(), ""cache.raw"").exists());    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[ensure]:[1]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 1), ('([5:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[5]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[1]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[1]:method_text:[that expect to remain intact over     * long periods of time, such as across app moves.     */   ])', 1), ('([5:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[5]:method_text:[ }    /**     * Verify that data written by {@link #testDataWrite()} is still intact.     */   ])', 1), ('([3:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[3]:method_text:[ose();        }    }    /**     * Verify that app is installed on internal storage.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[2]:method_text:[ual.st_dev);    }    /**     * Verify that app is not installed on internal storage.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[2]:method_text:[).getAbsolutePath());        MoreAsserts.assertNotEqual(internal.st_dev, actual.st_dev);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[1]:method_text:[;        writeString(new File(getContext().getExternalFilesDir(null), ""my_ext""), token);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[1]:method_text:[_ext"")));    }    /**     * Verify shared storage behavior when on internal storage.     */   ])', 1), ('([4:/com/android/cts/splitapp/SplitAppTest.java]:[data]:[4]:method_text:[  + ""%s %b %s"", packageName, enabled, uriHostName);        SystemUtil.runShellCommand(cmd);    }}])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[1]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[1]:method_text:[pected native code in base"");        } catch (UnsatisfiedLinkError expected) {        }    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[1]:method_text:[    assertEquals(""com.android.cts.splitapp.MyReceiver"", result.get(0).activityInfo.name);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[1]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[1]:method_text:[> result = pm.queryBroadcastReceivers(intent, 0);        assertEquals(0, result.size());    }   ])', 1), ('([4:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[4]:method_text:[  getContext().enforceCallingOrSelfPermission(android.Manifest.permission.VIBRATE, null);    }   ])', 1), ('([6:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[6]:method_text:[that expect to remain intact over     * long periods of time, such as across app moves.     */   ])', 1), ('([5:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[5]:method_text:[ntName(resolveInfo)                .equals(FEATURE_WARM_EMPTY_PROVIDER_NAME))).isTrue();    }   ])', 1), ('([5:/com/android/cts/splitapp/SplitAppTest.java]:[list]:[5]:method_text:[der.getDeclaredField(""sCreated"");        assertThat((boolean) field.get(null)).isTrue();    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[user]:[2]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([3:/com/android/cts/splitapp/SplitAppTest.java]:[user]:[3]:method_text:[  + ""%s %b %s"", packageName, enabled, uriHostName);        SystemUtil.runShellCommand(cmd);    }}])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[even]:[1]:method_text:[eSeven() throws Exception {        assertThat(Native.getNumberADirectly()).isEqualTo(7);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[even]:[1]:method_text:[eSeven() throws Exception {        assertThat(Native.getNumberAViaProxy()).isEqualTo(7);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[even]:[1]:method_text:[leven() throws Exception {        assertThat(Native.getNumberBDirectly()).isEqualTo(11);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[even]:[1]:method_text:[leven() throws Exception {        assertThat(Native.getNumberBViaProxy()).isEqualTo(11);    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[cannot]:[1]:method_text:[pected native code in base"");        } catch (UnsatisfiedLinkError expected) {        }    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[cannot]:[2]:method_text:[ntName(resolveInfo)                .equals(FEATURE_WARM_EMPTY_PROVIDER_NAME))).isTrue();    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[read]:[2]:method_text:[n(NORESTART_PKG, INSTANT_APP_NORESTART_URI.getHost(),                false /*enabled*/);    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[read]:[2]:method_text:[ose();        }    }    /**     * Verify that app is installed on internal storage.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[read]:[2]:method_text:[_ext"")));    }    /**     * Verify shared storage behavior when on internal storage.     */   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[read]:[1]:method_text:[());        assertFalse(new File(getContext().getCodeCacheDir(), ""cache.raw"").exists());    }   ])', 1), ('([6:/com/android/cts/splitapp/SplitAppTest.java]:[read]:[6]:method_text:[  + ""%s %b %s"", packageName, enabled, uriHostName);        SystemUtil.runShellCommand(cmd);    }}])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[volume]:[1]:method_text:[eState());    }    /**     * Verify that shared storage lives on same volume as app.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[volume]:[2]:method_text:[00) {            fail(""Expected primary storage to be on same volume as app"");        }    }   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[running]:[2]:method_text:[activity must be started. That is currently     * done in {@link #testBaseInstalled()}.     */   ])', 1), ('([2:/com/android/cts/splitapp/SplitAppTest.java]:[both]:[2]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 1), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[both]:[1]:method_text:[> result = pm.queryBroadcastReceivers(intent, 0);        assertEquals(0, result.size());    }   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[users]:[1]:method_text:[;            }        }    }    /** Test hidden keys are not readable without annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[data]:[1]:method_text:[eysWithMaxTargetSdk = {""mobile_data""};    /** Test public keys are readable with annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[data]:[1]:method_text:[    }    /** Test hidden keys are readable if the app is test only, even without annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[list]:[1]:method_text:[ated and no longer accessible"");    }    /** Test hidden keys are readable with annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[user]:[1]:method_text:[;            }        }    }    /** Test hidden keys are not readable without annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[even]:[1]:method_text:[    }    /** Test hidden keys are readable if the app is test only, even without annotation */   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[cannot]:[1]:method_text:[    }    /** Test hidden keys are readable if the app is test only, even without annotation */   ])', 1), ('([3:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[3]:method_text:[eysWithMaxTargetSdk = {""mobile_data""};    /** Test public keys are readable with annotation */   ])', 1), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[sKeysAreReadable() {        testNonHiddenSettingsKeysAreReadable(Settings.Secure.class);    }   ])', 1), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[sKeysAreReadable() {        testNonHiddenSettingsKeysAreReadable(Settings.System.class);    }   ])', 1), ('([7:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[7]:method_text:[ated and no longer accessible"");    }    /** Test hidden keys are readable with annotation */   ])', 1), ('([6:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[6]:method_text:[;            }        }    }    /** Test hidden keys are not readable without annotation */   ])', 1), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[nnotation(Settings.Secure.class,                publicSettingsKeys, hiddenSettingsKeys);    }   ])', 1), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[nnotation(Settings.System.class,                publicSettingsKeys, hiddenSettingsKeys);    }   ])', 1), ('([3:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[3]:method_text:[d with readable annotation but access should be    // protected by additional permission check.   ])', 1), ('([7:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[7]:method_text:[    }    /** Test hidden keys are readable if the app is test only, even without annotation */   ])', 1), ('([2:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[read]:[2]:method_text:[eysReadable(Settings.Global.class, publicSettingsKeys,                hiddenSettingsKeys);    }}])', 1), ('([3:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[files]:[3]:method_text:[ltiple);    }    /**     * Verify that single path is always first item in multiple.     */   ])', 1), ('([31:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[files]:[31]:method_text:[            total += c;            out.write(buffer, 0, c);        }        return total;    }}])', 1), ('([2:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[data]:[2]:method_text:[om.android.cts.writeexternalstorageapp"";    /**     * Dump helpful debugging details.     */   ])', 1), ('([6:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[data]:[6]:method_text:[            total += c;            out.write(buffer, 0, c);        }        return total;    }}])', 1), ('([2:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[list]:[2]:method_text:[om.android.cts.writeexternalstorageapp"";    /**     * Dump helpful debugging details.     */   ])', 1), ('([48:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[list]:[48]:method_text:[            total += c;            out.write(buffer, 0, c);        }        return total;    }}])', 1), ('([4:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[read]:[4]:method_text:[om.android.cts.writeexternalstorageapp"";    /**     * Dump helpful debugging details.     */   ])', 1), ('([23:/com/android/cts/externalstorageapp/CommonExternalStorageTest.java]:[read]:[23]:method_text:[            total += c;            out.write(buffer, 0, c);        }        return total;    }}])', 1), ('([1:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[1]:method_text:[e;import java.io.File;import java.util.List;public class GiftTest extends AndroidTestCase {   ])', 1), ('([3:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[3]:method_text:[t(none, 100);        }    }    /**     * Verify we can read & write only our gifts.     */   ])', 1), ('([6:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[6]:method_text:[eadInt(none));        }    }    /**     * Verify we can read our gifts in obb dirs.     */   ])', 1), ('([3:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[3]:method_text:[ assertFileReadWriteAccess(none);            assertEquals(100, readInt(none));        }    }   ])', 1), (""([3:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[3]:method_text:[none.delete();        }    }    /**     * Verify we can't access gifts in obb dirs.     */   ])"", 1), ('([3:/com/android/cts/externalstorageapp/GiftTest.java]:[list]:[3]:method_text:[ONE);        for (File none : noneList) {            assertFileNotPresent(none);        }    }}])', 1), ('([3:/com/android/cts/externalstorageapp/GiftTest.java]:[read]:[3]:method_text:[e;import java.io.File;import java.util.List;public class GiftTest extends AndroidTestCase {   ])', 1), ('([1:/com/android/cts/externalstorageapp/GiftTest.java]:[read]:[1]:method_text:[t(none, 100);        }    }    /**     * Verify we can read & write only our gifts.     */   ])', 1), ('([8:/com/android/cts/externalstorageapp/GiftTest.java]:[read]:[8]:method_text:[eadInt(none));        }    }    /**     * Verify we can read our gifts in obb dirs.     */   ])', 1), ('([2:/com/android/cts/externalstorageapp/GiftTest.java]:[read]:[2]:method_text:[ assertFileReadWriteAccess(none);            assertEquals(100, readInt(none));        }    }   ])', 1), ('([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[files]:[1]:method_text:[ {            if (cursor != null) {                cursor.close();            }        }    }}])', 1), ('([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[data]:[1]:method_text:[se {    /**     * Verify that above our package directories we always have no access.     */   ])', 1), (""([4:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[data]:[4]:method_text:[ }    }    /**     * Verify that we can't download things outside package directory.     */   ])"", 1), ('([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[list]:[1]:method_text:[se {    /**     * Verify that above our package directories we always have no access.     */   ])', 1), (""([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[list]:[1]:method_text:[    }    /**     * Verify that we don't have read access to any storage mountpoints.     */   ])"", 1), (""([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[list]:[1]:method_text:[ }    }    /**     * Verify that we can't download things outside package directory.     */   ])"", 1), (""([6:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[user]:[6]:method_text:[ }    }    /**     * Verify that we can't download things outside package directory.     */   ])"", 1), ('([3:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[read]:[3]:method_text:[se {    /**     * Verify that above our package directories we always have no access.     */   ])', 1), (""([2:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[read]:[2]:method_text:[    }    /**     * Verify that we don't have read access to any storage mountpoints.     */   ])"", 1), (""([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[read]:[1]:method_text:[ }    }    /**     * Verify that we can't download things outside package directory.     */   ])"", 1), (""([1:/com/android/cts/externalstorageapp/ExternalStorageTest.java]:[both]:[1]:method_text:[ }    }    /**     * Verify that we can't download things outside package directory.     */   ])"", 1), ('([1:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[data]:[1]:method_text:[(timeToPlayMs);        mp.stop();        mp.release();        Thread.sleep(timeToPlayMs);    }}])', 1), ('([3:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[read]:[3]:method_text:[        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);    }   ])', 1), ('([2:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[read]:[2]:method_text:[(timeToPlayMs);        mp.stop();        mp.release();        Thread.sleep(timeToPlayMs);    }}])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[ensure]:[1]:method_text:[Received an unexpected signature during the test: "" + reportedCert);            }        }    }}])', 1), ('([2:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[data]:[2]:method_text:[Received an unexpected signature during the test: "" + reportedCert);            }        }    }}])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[list]:[1]:method_text:[Received an unexpected signature during the test: "" + reportedCert);            }        }    }}])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[even]:[1]:method_text:[ signing certificate"",                pi.signatures[0].toCharsString(), FIRST_CERT_HEX);    }   ])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[both]:[1]:method_text:[     pm.hasSigningCertificate(PKG, secondCertBytes, PackageManager.CERT_INPUT_RAW_X509));    }   ])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[both]:[1]:method_text:[       pm.hasSigningCertificate(PKG, secondCertBytes, PackageManager.CERT_INPUT_SHA256));    }   ])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[both]:[1]:method_text:[     pm.hasSigningCertificate(uid, secondCertBytes, PackageManager.CERT_INPUT_RAW_X509));    }   ])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[both]:[1]:method_text:[Received an unexpected signature during the test: "" + reportedCert);            }        }    }}])', 1), ('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[user]:[1]:method_text:[allPackage(OTHER_PKG);    }    /**     * Automotive devices MUST support native FBE.     */   ])', 1), ('([7:/android/appsecurity/cts/DirectBootHostTest.java]:[user]:[7]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}])', 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[read]:[2]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}])', 1), ('([1:/android/appsecurity/cts/ListeningPortsTest.java]:[files]:[1]:method"	""	""	"[('user', 240), ('read', 199), ('data', 166), ('list', 124), ('files', 77), ('cannot', 68), ('users', 62), ('even', 35), ('both', 30), ('applications', 30), ('ensure', 20), ('stored', 17), ('volume', 16), ('running', 8), ('given', 5)]"	"[('[android.appsecurity.cts.AppDataIsolationTests testAppUnableToAccessOtherUserAppDataDirApi29 CtsAppSecurityHostTestCases]', 7), ('[android.appsecurity.cts.AdoptableHostTest isSupportedDevice CtsAppSecurityHostTestCases]', 7), ('[com.android.cts.normalapp.ClientTest isFalse None]', 6), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestDelete_notShowConfirmDialog None]', 6), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsTest testGrantPersistableUriPermission None]', 5), ('[com.android.cts.encryptionapp.EncryptionAppTest testVerifyLockedAndDismiss None]', 5), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryWalkingUpTreeReadWrite None]', 5), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryMountPoints None]', 5), ('[com.android.cts.documentclient.DocumentsClientTest testOpenSimple None]', 5), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerifyStatsMultiple None]', 5), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest listFiles None]', 5), ('[com.android.cts.externalstorageapp.ExternalStorageTest testMountPointsNotReadable None]', 5), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdp6Ports CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.KeySetHostTest isRunFailure CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.EphemeralTest isDeviceUnsupported CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.StorageHostTest testFullDisk CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ExternalStorageHostTest testMultiUserStorageIsolated CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageReadDefaultUris CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_withPermission_notShowConfirmDialog CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListCrossUserGrant CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListOtherUserCrossUserGrant CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListCrossUserGrant CtsAppSecurityHostTestCases]', 5), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListOtherUserCrossUserGrant CtsAppSecurityHostTestCases]', 5), ('[com.android.cts.encryptionapp.EncryptionAppTest finish None]', 4), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testVerifyNoMediaCreated None]', 4), ('[com.android.cts.appdataisolation.appb.AppBTests testCanNotAccessAppADataDir None]', 4), ('[com.android.cts.appdataisolation.appa.AppATests testCannotAccessAppBDataDir None]', 4), ('[com.android.cts.appdataisolation.appa.AppATests testAppAUnlockDeviceAndVerifyCeDeExternalDataExist None]', 4), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testPackageVisibility_otherUserNoGrant None]', 4), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testApplicationVisibility_currentUser None]', 4), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testApplicationVisibility_anyUserCrossUserGrant None]', 4), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testApplicationVisibility_anyUserCrossUserNoGrant None]', 4), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testApplicationVisibility_otherUserNoGrant None]', 4), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessPrivateData None]', 4), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessPublicData None]', 4), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessProcQtaguidTrafficStatsFailed None]', 4), ('[com.android.cts.appwithdata.CreatePrivateDataTest testCreatePrivateData None]', 4), ('[com.android.cts.readexternalstorageapp.ReadExternalStorageTest testMountPointsNotWritable None]', 4), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestWriteFilePathSupport None]', 4), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerifyStatsExternalConsistent None]', 4), ('[com.android.cts.storagestatsapp.StorageStatsTest testCacheClearing None]', 4), ('[com.android.cts.splitapp.SplitAppTest getDisplayMetrics None]', 4), ('[com.android.cts.splitapp.SplitAppTest testFeatureWarmBase None]', 4), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalHiddenSettingsKeyNotReadableWithoutPermissions None]', 4), ('[com.android.cts.externalstorageapp.CommonExternalStorageTest testAllPackageDirsWritable None]', 4), ('[android.appsecurity.cts.v3rotationtests.V3RotationTest testHasSigningCertificateByUidSha256 None]', 4), ('[android.appsecurity.cts.AppDataIsolationTests testDirectBootModeWorks CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.AppSecurityTests testUninstallRemovesData_instant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testV1SchemeSignatureCertNotReencoded CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testV2SchemeSignatureCertNotReencoded CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV4UpdateAfterRotation CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.AdoptableHostTest testFeatureConsistent CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.AdoptableHostTest testPrimaryStorage CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.AdoptableHostTest testEjected CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageUnsharedObb CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaLegacy29 CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApexSignatureVerificationTest getApexPackageList CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.PackageVisibilityTest testUninstalledPackageVisibility_instant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testGetPackagesForUidCrossUserGrant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testGetPackagesForUidCrossUserNoGrant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListCrossUserNoGrant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListOtherUserCrossUserNoGrant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListCrossUserNoGrant CtsAppSecurityHostTestCases]', 4), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListOtherUserCrossUserNoGrant CtsAppSecurityHostTestCases]', 4), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest testClipboardWithPermission None]', 3), ('[android.appsecurity.cts.listeningports.ListeningPortsTest testNoAccessibleListeningPorts None]', 3), ('[com.android.cts.encryptionapp.EncryptionAppTest testSetUp None]', 3), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest assertExternalStorageMounted None]', 3), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testLegacyPaths None]', 3), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testExternalStorageRename None]', 3), ('[com.android.cts.appdataisolation.appb.AppBTests testCanAccessAppADataDir None]', 3), ('[com.android.cts.appdataisolation.appa.AppATests testAppACurProfileDataAccessible None]', 3), ('[com.android.cts.appdataisolation.appa.AppATests testUnlockDevice None]', 3), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotPresent None]', 3), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 3), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testPackageVisibility_currentUser None]', 3), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testPackageVisibility_anyUserCrossUserGrant None]', 3), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testPackageVisibility_anyUserCrossUserNoGrant None]', 3), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testGetPackagesForUidVisibility_anotherUserCrossUserNoGrant None]', 3), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testApplicationVisibility_otherUserGrant None]', 3), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testTrafficStatsStatsUidSelf None]', 3), ('[com.android.cts.appwithdata.CreatePrivateDataTest testEnsurePrivateDataNotExist None]', 3), ('[com.android.cts.readexternalstorageapp.ReadExternalStorageTest testAllWalkingUpTreeReadOnly None]', 3), ('[com.android.cts.storageapp.StorageTest testExternalStorageIsolatedRead None]', 3), ('[com.android.cts.documentclient.DocumentsClientTest testOpenVirtual None]', 3), ('[com.android.cts.documentclient.DocumentsClientTest testTree None]', 3), ('[com.android.cts.documentclient.DocumentsClientTest testTransferDocument None]', 3), ('[com.android.cts.documentclient.DocumentsClientTest findRootListSelector None]', 3), ('[com.android.cts.documentclient.DocumentsClientTest testAfterMoveDocumentInStorage_revokeUriPermission None]', 3), ('[com.android.cts.documentclient.ScopedDirectoryAccessClientTest testActivityFailsForAllVolumesAndDirectories None]', 3), ('[com.android.cts.mediastorageapp.MediaStorageTest testLegacy None]', 3), ('[com.android.cts.mediastorageapp.MediaStorageTest testGrantUriPermission None]', 3), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaNone None]', 3), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerifyStatsExternal None]', 3), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testReadObbStorage None]', 3), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testUserIsolation None]', 3), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testReadIsolatedStorage None]', 3), ('[com.android.cts.splitapp.SplitAppTest testDataRead None]', 3), ('[com.android.cts.splitapp.SplitAppTest testPrimaryDataRead None]', 3), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalSomeHiddenSettingsKeysAreReadable None]', 3), ('[android.appsecurity.cts.ListeningPortsTest installDeviceTestPkg CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningUdp6Ports CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackTcpPorts CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackTcp6Ports CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdpPorts CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.AppOpsTest testBadConfigCannotCauseBootLoopDisabled CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.StorageHostTest testVerifyAppStats CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.StorageHostTest testCache CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.AppDataIsolationTests testAppUnableToAccessOtherUserAppDataDir CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.AdoptableHostTest testApps CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageNone29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageRead29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageWrite CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageNoGifts CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testCanAccessOtherObbDirs CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMultiViewMoveConsistency CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testSecondaryUsersInaccessible CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testGrantUriPermission29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaNone29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaRead29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaWrite29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation29 CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageClearing CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testIsExternalStorageLegacy CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testSystemGalleryExists CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation_RequestWriteFilePathSupport CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallOneFeatureSplit_full CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallDependentFeatureSplits_full CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallAllFeatureSplits_full CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.OverlayHostTest currentTimeMillis CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallTargetAndroidNotPlatformSigned CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallDifferentSignaturesNoName CtsAppSecurityHostTestCases]', 3), ('[android.appsecurity.cts.InstantAppUserTest uninstallTestPackages CtsAppSecurityHostTestCases]', 3), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNativeSplit_withoutExtractLibs_nativeLibraryCannotBeLoaded None]', 2), ('[com.android.cts.isolatedsplitapp.SplitAppTest assertThemeBaseValues None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsServiceTest testGrantableToService None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsTest testGrantPrefixUriPermission None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsTest testGrantPersistablePrefixUriPermission None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsTest testDirectGrantRevokeUriPermission None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsTest testDirectGrantReceiverRevokeUriPermission None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsActivityTest testGrantableToActivity None]', 2), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest testClipboardWithoutPermission None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderNoMatchingPath None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testGetMimeTypePrivate None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testGetMimeTypeAmbiguous None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testReadProviderWithDiff None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testWriteProviderWithDiff None]', 2), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testReadProviderWhenPrivate None]', 2), ('[com.android.cts.escalatepermission.PermissionEscalationTest testCannotEscalateNonRuntimePermissionsToRuntime None]', 2), ('[com.android.cts.escalatepermission.PermissionEscalationTest testRuntimePermissionsAreNotGranted None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testGetInstaller02 None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testGetInstaller03 None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testQuery None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testGetChangedPackages None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testCameraPermission None]', 2), ('[com.android.cts.userapptest.ClientTest testQueryFull None]', 2), ('[com.android.cts.authboundkey.AuthBoundKeyAppTest testUseKey None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testWriteExternalStorageDirs None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testMountStatusWalkingUpTree None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testMountStatus None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testReadExternalStorage None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testPrimaryWalkingUpTreeReadWrite None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testNoGifts None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testObbGifts None]', 2), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testAccessObbGifts None]', 2), ('[com.android.cts.appdataisolation.appb.AppBTests testCanNotAccessAppAExternalDirs None]', 2), ('[com.android.cts.appdataisolation.appa.AppATests testAppARefProfileDataAccessible None]', 2), ('[android.appsecurity.cts.apkveritytestapp.InstalledFilesCheck testFilesHaveFsverity None]', 2), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testPackageVisibility_otherUserGrant None]', 2), ('[com.android.cts.privilegedupdate.PrivilegedUpdateTest testPrivilegedAppUpgradePriorities None]', 2), ('[android.os.cts.AccessSerialModernTest testAccessSerialPermissionNeeded None]', 2), ('[com.android.cts.readexternalstorageapp.ReadGiftTest testStageNonGifts None]', 2), ('[com.android.cts.readexternalstorageapp.ReadGiftTest testNoGifts None]', 2), ('[com.android.cts.overlay.app.OverlayableTest testCannotOverlayAssets None]', 2), ('[com.android.cts.storageapp.StorageTest testExternalStorageIsolatedWrite None]', 2), ('[com.android.cts.storageapp.StorageTest testVerifySpaceApi None]', 2), ('[com.android.cts.documentclient.DocumentsClientTest testCreateExisting None]', 2), ('[com.android.cts.documentclient.DocumentsClientTest testGetContent_rootsShowing None]', 2), ('[com.android.cts.documentclient.DocumentsClientTest testGetContent_returnsResultToCallingActivity None]', 2), ('[com.android.cts.documentclient.DocumentsClientTest testFindDocumentPathInScopedAccess None]', 2), ('[com.android.cts.documentclient.DocumentsClientTest testOpenRootWithoutRootIdAtInitialLocation None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestWrite_notShowConfirmDialog None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalationWithDenied_RequestUnTrash None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestTrash_notShowConfirmDialog None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestFavorite None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaRead None]', 2), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaWrite None]', 2), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_getPackagesCantSeeTiny None]', 2), ('[com.android.cts.storagestatsapp.StorageStatsTest testCacheBehavior None]', 2), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerifyStats None]', 2), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testMediaProviderUserIsolation None]', 2), ('[com.android.cts.splitapp.SplitAppTest testDataWrite None]', 2), ('[com.android.cts.splitapp.SplitAppTest testDataInternal None]', 2), ('[com.android.cts.splitapp.SplitAppTest testDataNotInternal None]', 2), ('[com.android.cts.splitapp.SplitAppTest testPrimaryDataWrite None]', 2), ('[com.android.cts.splitapp.SplitAppTest testPrimaryOnSameVolume None]', 2), ('[com.android.cts.splitapp.SplitAppTest testCodeCacheRead None]', 2), ('[com.android.cts.splitapp.SplitAppTest testInheritUpdatedSplit_withRevisionA None]', 2), ('[com.android.cts.splitapp.SplitAppTest testSingleBase None]', 2), ('[com.android.cts.splitapp.SplitAppTest testFeatureWarmApi None]', 2), ('[com.android.cts.splitapp.SplitAppTest testComponentWithSplitName_singleBase None]', 2), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalNonHiddenSettingsKeysAreReadable None]', 2), ('[com.android.cts.externalstorageapp.GiftTest testStageNonGifts None]', 2), ('[com.android.cts.externalstorageapp.GiftTest testNoGifts None]', 2), ('[com.android.cts.externalstorageapp.GiftTest testObbGifts None]', 2), ('[com.android.cts.externalstorageapp.ExternalStorageTest testAllWalkingUpTreeNoAccess None]', 2), ('[com.android.cts.externalstorageapp.ReadDefaultUris testPlayDefaultUris None]', 2), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningTcpPorts CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningTcp6Ports CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ListeningPortsTest testNoRemotelyAccessibleListeningUdpPorts CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.DeviceIdentifierTest testDeviceIdentifierAccessWithAppOpGranted CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.SharedUserIdTest testSharedUidDifferentCerts CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.SplitTests testNativeSplitForEachSupportedAbi_instant CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppOpsTest testBadConfigCannotCauseBootLoopEnabled CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.EphemeralTest testCameraPermission CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.EphemeralTest testReadPhoneNumbersPermission CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.EphemeralTest testInstantAppUpgrade CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyAppQuota CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyAppAllocate CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifySummary CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyStats CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyStatsMultiple CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyStatsExternal CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyStatsExternalConsistent CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StorageHostTest testVerifyCategory CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppDataIsolationTests testAppAbleToAccessItsDataAfterForceStop CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppDataIsolationTests testAppAbleToAccessItsDataAfterReboot CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppDataIsolationTests testNormalProcessCannotAccessOtherAppDataDir CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppDataIsolationTests testNormalProcessCannotAccessOtherAppExternalDataDir CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppSecurityTests testPermissionDiffCert CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AppSecurityTests testAppUpgradeDifferentCerts_instant CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2ContentDigestMismatch CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3UpdateAfterRotation CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3SigPermDoubleDefSameNoCapSucceeds CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.AdoptableHostTest testPackageInstaller CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageRename CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_userDenied CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_noRESAndMES_showConfirmDialog CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_noMANAGEMEDIA_showConfirmDialog CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_withNoAML_showConfirmDialog CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallAllFeatureSplitsAndConfigSplits_instant CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.IsolatedSplitsTests testSplitsInheritInstall_instant CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_neitherBaseNorSplitExtracting_instant CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallPieOverlayNotPlatformSigned CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.ApexSignatureVerificationTest testApexPubKeyMatchPayloadImg CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.StatsdAppSecurityAtomTest testRoleHolder CtsAppSecurityHostTestCases]', 2), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi CtsAppSecurityHostTestCases]', 2), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNative_getNumberADirectly_shouldBeSeven None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNative_getNumberAViaProxy_shouldBeSeven None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNative_getNumberBDirectly_shouldBeEleven None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNative_getNumberBViaProxy_shouldBeEleven None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest testNative_cannotLoadSharedLibrary None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest shouldLoadFeatureADiffRevision None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsResultTest finish None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsResultTest testGrantableToResult None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsResultTest testNotGrantableToResult None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsServiceTest testNotGrantableToService None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsActivityTest finishCurInstanceSync None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsActivityTest testNotGrantableToActivity None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderMatchingShadyPaths None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testGetMimeTypeAmbiguousCompat None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testWriteProviderWhenAmbiguousCompat None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testWriteProviderWhenPrivate None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testReadProviderWhenAmbiguous None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testReadProviderWhenAmbiguousCompat None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderMatchingPathDenied None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderMultipleMatchingPath None]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testGetMimeTypePermission None]', 1), ('[test.instant.cookie.CookieTest testCookieUpdateAndRetrieval None]', 1), ('[com.android.cts.instantupgradeapp.ClientTest testFullApplicationReadPreferences None]', 1), ('[com.android.cts.instantupgradeapp.ClientTest testFullApplicationReadFile None]', 1), ('[com.android.cts.useprocess.AccessNetworkTest uptimeMillis None]', 1), ('[com.android.cts.encryptionapp.EncryptionAppTest testTearDown None]', 1), ('[com.android.cts.normalapp.ClientTest testStartEphemeral None]', 1), ('[com.android.cts.normalapp.ClientTest testQuery None]', 1), ('[com.android.cts.normalapp.ClientTest isTrue None]', 1), ('[com.android.cts.ephemeralapp1.WebViewTest WebViewTest None]', 1), ('[com.android.cts.ephemeralapp1.WebViewTest testWebViewLoads None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testStartNormal None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testStartExposed04 None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testStartExposed05 None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testStartEphemeral None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testInstallPermissionGrantedInPackageInfo None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testExposedActivity None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testGetInstaller01 None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testReadPhoneNumbersPermission None]', 1), ('[com.android.cts.userapptest.ClientTest testQueryInstant None]', 1), ('[com.android.cts.authboundkey.AuthBoundKeyAppTest testGenerateAuthBoundKey None]', 1), ('[android.os.cts.AccessSerialLegacyTest testAccessSerialNoPermissionNeeded None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testWriteExternalStorage None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testPrimaryReadWrite None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testStageNonGifts None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testCantAccessObbGifts None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteGiftTest testClearingRead None]', 1), ('[com.android.cts.appdataisolation.appb.AppBTests testCanAccessAppAExternalDirs None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAExternalDirsUnavailable None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testCreateCeDeAppData None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testCreateExternalDirs None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppACeDataExists None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppACeDataDoesNotExist None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppADeDataExists None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppADeDataDoesNotExist None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAExternalDirsDoExist None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAExternalDirsDoNotExist None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testIsolatedProcess None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppZygoteIsolatedProcess None]', 1), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testGetPackagesForUidVisibility_currentUser None]', 1), ('[com.android.cts.applicationvisibility.ApplicationVisibilityCrossUserTest testGetPackagesForUidVisibility_anotherUserCrossUserGrant None]', 1), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testStatPrivateDataDir None]', 1), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessPrivateTrafficStats None]', 1), ('[com.android.cts.privilegedupdate.PrivilegedAppDisableTest testPrivAppAndDisabled None]', 1), ('[com.android.cts.privilegedupdate.PrivilegedAppDisableTest testUpdatedPrivAppAndDisabled None]', 1), ('[android.appsecurity.cts.deviceids.DeviceIdentifierAppOpTest testAccessToDeviceIdentifiersWithAppOp None]', 1), ('[com.android.cts.sessioninspector.SessionInspectorTest testOnlyOwnerCanSee None]', 1), ('[com.android.cts.readexternalstorageapp.ReadExternalStorageTest testPrimaryReadOnly None]', 1), ('[com.android.cts.readexternalstorageapp.ReadMultiViewTest testRWAccess None]', 1), ('[android.appsecurity.cts.locationpolicy.LocationPolicyTest testLocationPolicyPermissions None]', 1), ('[com.android.cts.storageapp.StorageTest testVerifyAllocateApi None]', 1), ('[com.android.cts.storageapp.StorageTest testBehaviorTombstone None]', 1), ('[com.android.cts.storageapp.StorageTest testFullDisk None]', 1), ('[com.android.cts.storageapp.StorageTest testClearSpace None]', 1), ('[com.android.cts.storageapp.StorageTest testVerifySpaceManual None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testGetContentWithQuery_matchingFileShowing None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testCreateNew None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testCreateWebLink None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testEject None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testRestrictStorageAccessFrameworkEnabled_blockFromTree None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testRestrictStorageAccessFrameworkDisabled_notBlockFromTree None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testOpenDocumentAtInitialLocation None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testOpenDocumentTreeAtInitialLocation None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testOpenDocumentTreeWithScopedStorage None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testCreateDocumentAtInitialLocation None]', 1), ('[com.android.cts.documentclient.ScopedDirectoryAccessClientTest testInvalidPath None]', 1), ('[com.android.cts.shareduidinstall.SharedUidPackageTest testSelfIsOnlyMemberOfSharedUserIdPackages None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testStageFiles None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testClearFiles None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_Open None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_Update None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_Delete None]', 1), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_getPackagesCanSeeTiny None]', 1), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_inUser None]', 1), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_inUserUninstalled None]', 1), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_notInOtherUser None]', 1), ('[com.android.cts.packageaccessapp.PackageAccessTest testPackageAccess_notInOtherUserUninstalled None]', 1), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerify None]', 1), ('[com.android.cts.storagestatsapp.StorageStatsTest testVerifySummary None]', 1), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testCleanIsolatedStorage None]', 1), ('[com.android.cts.multiuserstorageapp.MultiUserStorageTest testCleanObbStorage None]', 1), ('[com.android.cts.splitapp.SplitAppTest testCodeCacheWrite None]', 1), ('[com.android.cts.splitapp.SplitAppTest testApi None]', 1), ('[com.android.cts.splitapp.SplitAppTest testInheritUpdatedBase_withRevisionA None]', 1), ('[com.android.cts.splitapp.SplitAppTest testComponentWithSplitName_featureWarmInstalled None]', 1), ('[com.android.cts.splitapp.SplitAppTest testNative_getNumberADirectly_shouldBeSeven None]', 1), ('[com.android.cts.splitapp.SplitAppTest testNative_getNumberAViaProxy_shouldBeSeven None]', 1), ('[com.android.cts.splitapp.SplitAppTest testNative_getNumberBDirectly_shouldBeEleven None]', 1), ('[com.android.cts.splitapp.SplitAppTest testNative_getNumberBViaProxy_shouldBeEleven None]', 1), ('[com.android.cts.splitapp.SplitAppTest testPrimaryUnmounted None]', 1), ('[com.android.cts.splitapp.SplitAppTest testBaseInstalled None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSecureNonHiddenSettingsKeysAreReadable None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSystemNonHiddenSettingsKeysAreReadable None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSecureSomeHiddenSettingsKeysAreReadable None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSystemSomeHiddenSettingsKeysAreReadable None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSecureHiddenSettingsKeysNotReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSystemHiddenSettingsKeysNotReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalHiddenSettingsKeysNotReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSecureHiddenSettingsKeysReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testSystemHiddenSettingsKeysReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalHiddenSettingsKeysReadableWithoutAnnotation None]', 1), ('[com.android.cts.externalstorageapp.CommonExternalStorageTest testMultipleFilesDirs None]', 1), ('[com.android.cts.externalstorageapp.GiftTest testRemoveObbGifts None]', 1), ('[com.android.cts.externalstorageapp.GiftTest testNoObbGifts None]', 1), ('[com.android.cts.externalstorageapp.ExternalStorageTest testDownloadManagerPackage None]', 1), ('[android.appsecurity.cts.v3rotationtests.V3RotationTest testGetSignaturesShowsOld None]', 1), ('[android.appsecurity.cts.v3rotationtests.V3RotationTest testHasSigningCertificate None]', 1), ('[android.appsecurity.cts.v3rotationtests.V3RotationTest testHasSigningCertificateSha256 None]', 1), ('[android.appsecurity.cts.v3rotationtests.V3RotationTest testHasSigningCertificateByUid None]', 1), ('[android.appsecurity.cts.KeySetHostTest testUpgradeDefinerSigPermLost CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testUpgradeSharedUser CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PermissionEscalationTest testNoPermissionEscalationAfterReboot CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PermissionEscalationTest testNoPermissionEscalation CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.SplitTests testFeatureWithoutRestart_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.SplitTests testNativeSingle_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.SplitTests testNativeAll_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.SplitTests testClearCodeCache_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseIncrementallyWithWrongIdSigAndFsvSig CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ScopedDirectoryAccessTest testActivityFailsForAllVolumesAndDirectories CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testNormalQuery CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testNormalStartNormal CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testNormalStartEphemeral CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralQuery CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartNormal CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed01 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed02 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed03 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed04 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed05 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed06 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed07 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed08 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed09 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed10 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartExposed11 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralStartEphemeral CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralGetInstaller01 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralGetInstaller02 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testEphemeralGetInstaller03 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testExposedSystemActivities CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testBuildSerialUnknown CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testPackageInfo CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testActivityInfo CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testWebViewLoads CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testInstallPermissionNotGranted CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testInstallPermissionGranted CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testInstallPermissionNotGrantedInPackageInfo CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testInstallPermissionGrantedInPackageInfo CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testStartForegroundService CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testRecordAudioPermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testAccessCoarseLocationPermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testInternetPermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testVibratePermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testWakeLockPermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testGetSearchableInfo CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.EphemeralTest testGetChangedPackages CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testAppNotAbleToAccessItsDataAfterReinstall CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testSharedAppAbleToAccessOtherAppDataDir CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testSharedAppAbleToAccessOtherAppExternalDataDir CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testAppFailAccessPrivateData_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testAppFailAccessPrivateData_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testUninstallRemovesData_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testAdbInstallFile_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testInstrumentationDiffCert_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests rebootWithDuplicatePermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppSecurityTests testCrossPackageDiffCertSetInstaller CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2SignatureDoesNotVerify CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testCorrectCertUsedFromPkcs7SignedDataCertsSet CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV4With128BytesAdditionalDataSucceeds CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV4With256BytesAdditionalDataFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV4With10MBytesAdditionalDataFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV4WithWithTrailingDataInMerkleTree CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2StrippedFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2RejectsSignerBlockWithNoCertificates CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallNoApkSignatureSchemeBlock CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest installDeviceTestPkg CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3TwoSharedUidAppsWithDivergedLineages CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3KeyRotationOlderSigPermNoCap CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3CommonSignerInLineageWithPermCap CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3KeyRotationToAncestor CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3KeyRotationSharedUidNoCap CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3KeyRotationOlderSharedUidNoCap CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3KeyRotationHasDuplicateSigningCertificateHistory CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3SigPermDoubleDefNewerSucceeds CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3SigPermDoubleDefOlderSucceeds CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3SigPermDoubleDefNewerNoCapFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3SigPermDoubleDefOlderNoCapFails CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallEphemeralRequiresV2Signature CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV3MultipleAppsOneUpdatedToDenyOldKeySharedUid CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2MultipleSignersGetApkContentsSigners CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallTargetSdk30WithV1V2Signers CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testGrantUriPermission CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaRead CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaRead28 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallBase_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallBaseAndConfigSplit_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallOneFeatureSplitAndConfigSplits_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testInstallDependentFeatureSplitsAndConfigSplits_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testSplitsRemoved_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_bothBaseAndSplitExtracting_full CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.IsolatedSplitsTests testAccessNativeSymbol_bothBaseAndSplitExtracting_instant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testSameSignatureNoOverlayableSucceeds CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotOverlayAssets CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest testApexPubKeyIsNotWellKnownKey CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest testApexIncludePubKey CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.DocumentsTest testGetContentWithQuery_matchingFileShowing CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.SessionReferrerUriTest testSessionReferrerUriVisibleToOwner CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableSystemApp CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed01 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed02 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed03 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed04 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed05 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed06 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed07 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed08 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed09 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testStartExposed10 CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testInstallInstant CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testInstallFull CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testInstallMultiple CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testUpgradeExisting CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.InstantAppUserTest testReplaceExisting CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSecureNonHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSystemNonHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalNonHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSecureSomeHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSystemSomeHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalSomeHiddenSettingsKeysAreReadable CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalHiddenSettingsKeyNotReadableWithoutPermissions CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSecureHiddenSettingsKeysNotReadableWithoutAnnotation CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSystemHiddenSettingsKeysNotReadableWithoutAnnotation CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalHiddenSettingsKeysNotReadableWithoutAnnotation CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSecureHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testSystemHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ReadableSettingsFieldsTest testGlobalHiddenSettingsKeysReadableWhenTestOnly CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.UseProcessTest testInstallUsePackageSuccess_instant CtsAppSecurityHostTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
