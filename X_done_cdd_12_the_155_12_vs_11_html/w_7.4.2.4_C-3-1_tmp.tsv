"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-3-1"	"7.4.2.4/C-3-1"	"07040204.670301"	"""C-3-1] MUST enable Passpoint by default. <h5 id=""7425_wi-fi_location_wi-fi_round_trip_time_-_rtt"" """	""	"wifi"	"enable default passpoint"	"passpoint enable default"	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 75), ('android.net.wifi.cts.WifiHotspot2Test', 19), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 16), ('android.net.wifi.passpoint.cts.PasspointConfigurationTest', 10), ('android.net.wifi.aware.cts.SingleDeviceTest', 7), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 7), ('android.net.wifi.cts.WifiEnterpriseConfigTest', 4), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 3), ('android.net.wifi.cts.WifiInfoTest', 3), ('android.net.wifi.p2p.cts.WifiP2pConfigTest', 3), ('android.net.wifi.p2p.cts.WifiP2pWfdInfoTest', 2), ('android.net.wifi.rtt.cts.WifiRttTest', 2), ('android.net.wifi.cts.ScanResultTest', 2), ('android.net.wifi.cts.ConcurrencyTest', 2), ('android.net.wifi.cts.ConfigParserTest', 2), ('android.net.wifi.cts.PpsMoParserTest', 2), ('android.net.wifi.p2p.cts.WifiP2pDeviceTest', 2), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('com.android.cts.verifier.wifi.BaseTestActivity', 1), ('android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test', 1), ('android.net.wifi.cts.WifiLocationInfoTest', 1), ('com.android.cts.verifier.wifi.TestUtils', 1), ('android.net.wifi.cts.WifiJUnit3TestBase', 1), ('com.android.cts.verifier.wifiaware.TestListActivity', 1), ('android.net.wifi.cts.WifiMigrationTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 1), ('com.android.cts.verifier.wifiaware.BaseTestActivity', 1), ('android.net.wifi.passpoint.cts.HomeSpTest', 1), ('com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase', 1), ('android.net.wifi.nl80211.cts.WifiNl80211ManagerTest', 1), ('com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase', 1), ('com.android.cts.verifier.wifi.CallbackUtils', 1), ('android.net.wifi.rtt.cts.TestBase', 1), ('com.android.cts.verifier.wifi.TestListActivity', 1), ('android.net.wifi.cts.WifiJUnit4TestBase', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1)]"	"[('setUp', 16), ('getContext', 16), ('countDown', 13), ('getInstrumentation', 8), ('Object', 8), ('getAction', 8), ('notifyAll', 8), ('notify', 7), ('BroadcastReceiver', 6), ('getBytes', 6), ('getPackageManager', 5), ('getScanResults', 4), ('tearDown', 4), ('waitForAnyCallback', 4), ('setUpClass', 3), ('toString', 3), ('start', 3), ('getLooper', 3), ('MySync', 3), ('getState', 2), ('Handler', 2), ('startScanAndWaitForResults', 2), ('getMeteredOverride', 2), ('waitForStateChange', 2), ('onAttachFailed', 2), ('getSession', 2), ('IntentFilter', 2), ('getClass', 2), ('getClassLoader', 2), ('StringBuilder', 2), ('readLine', 2), ('PasspointConfiguration', 2), ('HomeSp', 2), ('waitForCapabilitiesChanged', 2), ('onUnavailable', 2), ('printStackTrace', 1), ('startScan', 1), ('getConnectionInfo', 1), ('getSupplicantState', 1), ('getSSID', 1), ('getBSSID', 1), ('generateRandomPassphrase', 1), ('Random', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MyResponse', 1), ('generateConfigurationFromProfile', 1), ('Credential', 1), ('UserCredential', 1), ('CertificateCredential', 1), ('SimCredential', 1), ('build', 1), ('Builder', 1), ('executeAttach', 1), ('AttachCb', 1), ('NetworkCallback', 1), ('getNetwork', 1), ('getNetworkCapabilities', 1), ('waitForAvailable', 1), ('waitForUnavailable', 1), ('waitForLost', 1), ('generateConfigurationFromPPSMOTree', 1), ('getFriendlyName', 1), ('getFqdn', 1), ('enableLocationIfNotEnabled', 1)]"	"[('CtsWifiTestCases', 172), ('CtsWifiBroadcastsHostTestCases', 1)]"	""	"android.net.wifi.p2p.cts.WifiP2pConfigTest"	"getContext"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 75), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 19), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pConfigTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiJUnit3TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiJUnit4TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1)]"	"[('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(5,enable,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(269,enable,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(12,default,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(27,enable,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(15,enable,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(1,enable,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(2,default,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(28,enable,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(5,enable,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(4,enable,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(23,enable,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(1,default,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(7,enable,/android/net/wifi/cts/WifiJUnit3TestBase.java)', 1), ('(6,enable,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(7,default,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(18,enable,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(1,default,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(26,enable,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(6,enable,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(12,enable,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(8,enable,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(24,enable,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(26,enable,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(2,enable,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(1,default,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(2,enable,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(3,enable,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(2,default,/com/android/cts/verifier/wifi/CallbackUtils.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(19,enable,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(3,default,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(10,enable,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(2,default,/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java)', 1), ('(8,enable,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(17,enable,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(9,enable,/android/net/wifi/cts/WifiJUnit4TestBase.java)', 1), ('(26,enable,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(3,enable,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[10]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 3), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[enable]:[1]:method_text:[Instrumentation().getContext();        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[enable]:[4]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([35:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[35]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[3]:method_text:[able properties     * 2.DhcpInfo properties     * 3.wifi state     * 4.ConnectionInfo     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[2]:method_text:[urn getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[8]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[8]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[3]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[3]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[not turned off when the screen turns off while wifi is enabled.     * @throws Exception     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[e platform supports a reasonable number of suggestions per app.     * @throws Exception     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[21]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[6]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[6]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[2]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[8]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[8]:method_text:[tVerboseLoggingEnabled(boolean)} &     * {@link WifiManager#isVerboseLoggingEnabled()}.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[;        }    }    /**     * Tests {@link WifiManager#setVerboseLoggingLevel(int)}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[6]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[5]:method_text:[u add the     * networks back after reset, the ownership of saved networks will change.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[));    }    /**     * Tests {@link WifiManager#isWpa3SaeSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 1), ('([14:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[14]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[4]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[3]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[2]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[2]:method_text:[alse     * are valid responses.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[6]:method_text:[he needed privileged permissions     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[d, no-op is also valid behavior.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[2]:method_text:[nabled)} and     * {@link WifiManager#isCarrierNetworkOffloadEnabled} work as expected.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[6]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[enable]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[2]:method_text:[The permission is intended to be granted to only the device managed     * provisioning.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[d, no-op is also valid behavior.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[ork configurations are rejected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[1]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[default]:[2]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([23:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[enable]:[23]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[enable]:[2]:method_text:[the device (that     * can provide internet connectivity) when the request is released.     */   ])', 1), (""([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[enable]:[2]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 1), ('([4:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[enable]:[4]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[enable]:[2]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[enable]:[2]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[enable]:[7]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[enable]:[1]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[default]:[2]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([27:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[enable]:[27]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[enable]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[enable]:[5]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([4:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[enable]:[4]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([23:/android/net/wifi/cts/WifiLocationInfoTest.java]:[enable]:[23]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/com/android/cts/verifier/wifi/TestUtils.java]:[default]:[1]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([7:/android/net/wifi/cts/WifiJUnit3TestBase.java]:[enable]:[7]:method_text:[alse, UserHandle.getUserHandleForUid(Process.myUid()));        }        super.tearDown();    }}])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[enable]:[1]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[enable]:[3]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[enable]:[2]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[default]:[1]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([10:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[10]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([3:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[3]:method_text:[gitimate. When no resources are used, the value should equal to     *   the capability.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[2]:method_text:[reManager.isAvailable());    }    /**     * Validate that can attach to Wi-Fi Aware.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[1]:method_text:[spond to enable/disable and will not result in a new     * MAC address being generated.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[1]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[enable]:[1]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[default]:[1]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([26:/android/net/wifi/cts/ScanResultTest.java]:[enable]:[26]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([6:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[enable]:[6]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([11:/android/net/wifi/cts/WifiInfoTest.java]:[enable]:[11]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[enable]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiMigrationTest.java]:[enable]:[8]:method_text:[    /**     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.     */   ])', 1), ('([23:/android/net/wifi/cts/ConcurrencyTest.java]:[enable]:[23]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[enable]:[1]:method_text:[nse));        assertEquals(WifiP2pManager.WIFI_P2P_STATE_ENABLED, mMyResponse.p2pState);    }   ])', 1), ('([26:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[enable]:[26]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([2:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[enable]:[2]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([1:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[default]:[1]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[enable]:[2]:method_text:[ener));        manager.unregisterCountryCodeChangedListener(testCountryCodeChangeListener);    }}])', 1), ('([3:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[enable]:[3]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([2:/com/android/cts/verifier/wifi/CallbackUtils.java]:[default]:[2]:method_text:[ mOnCapabilitiesChangedBlocker.await(mCallbackTimeoutInMs, TimeUnit.MILLISECONDS);        }    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([13:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[enable]:[13]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[enable]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[enable]:[1]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[enable]:[2]:method_text:[* {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(WifiConnectedSessionInfo)}.     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[enable]:[2]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[default]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[default]:[1]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/rtt/cts/TestBase.java]:[enable]:[10]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[default]:[1]:method_text:[   assertFalse(dev.wpsDisplaySupported());        assertFalse(dev.wpsKeypadSupported());    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[default]:[1]:method_text:[iP2pDevice dev = new WifiP2pDevice();        assertFalse(dev.isServiceDiscoveryCapable());    }}])', 1), ('([8:/com/android/cts/verifier/wifi/TestListActivity.java]:[enable]:[8]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), (""([17:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[enable]:[17]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([9:/android/net/wifi/cts/WifiJUnit4TestBase.java]:[enable]:[9]:method_text:[User(                    false, UserHandle.getUserHandleForUid(Process.myUid()));        }    }}])', 1), ('([26:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[enable]:[26]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[enable]:[1]:method_text:[);        assertEquals(copiedConfig.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[enable]:[1]:method_text:[R_BAND);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[enable]:[1]:method_text:[OWNER_FREQ);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_TEMPORARY);    }}])', 1)]"	""	""	"[('enable', 98), ('passpoint', 57), ('default', 26)]"	"[('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testCoexMethodsShouldFailNoPermission CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystem CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConvertBetweenChannelFrequencyMhz CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiDisabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAutoWakeUpEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLogging CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeNonUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCurrentNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsEnhancedOpenSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs5GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs6GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnSOrNewer CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsDecoratedIdentitySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetCarrierNetworkOffloadEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSetupWizardPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetFactoryMacAddresses CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testListenOnCoexUnsafeChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testWifiBandInNetworkCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testEnsureAutoConnectToInternetConnectionOnRelease CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiJUnit3TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testCharacteristics CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAvailabilityStatusChange CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachNoIdentity CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testConcurrency CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testCountryCodeChangeListener CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 1), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiScoringEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pDeviceTest testDefaultWpsMethodSupportCheck CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pDeviceTest testDefaultDeviceCapabilityCheck CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiJUnit4TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForPersist CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForNonPersist CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
