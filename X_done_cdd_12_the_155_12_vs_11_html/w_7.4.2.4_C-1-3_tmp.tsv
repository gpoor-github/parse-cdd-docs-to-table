"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-3"	"7.4.2.4/C-1-3"	"07040204.670103"	"""C-1-3] MUST support IEEE 802.11u standard, specifically related to Network Discovery and Selection, such as Generic Advertisement Service (GAS) and Access Network Query Protocol (ANQP)."""	""	"wifi"	"discovery GAS ANQP passpoint IEEE select"	"passpoint discovery select"	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 22), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 14), ('android.net.wifi.aware.cts.SingleDeviceTest', 11), ('android.net.wifi.passpoint.cts.PasspointConfigurationTest', 10), ('android.net.wifi.cts.WifiHotspot2Test', 9), ('android.net.wifi.rtt.cts.WifiRttTest', 6), ('android.net.wifi.rtt.cts.TestBase', 2), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 2), ('android.net.wifi.cts.WifiConfigurationTest', 2), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 2), ('android.net.wifi.cts.PpsMoParserTest', 2), ('android.net.wifi.cts.ConcurrencyTest', 2), ('android.net.wifi.cts.ConfigParserTest', 2), ('android.net.wifi.cts.WifiInfoTest', 1), ('com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase', 1), ('android.net.wifi.cts.TestHelper', 1), ('com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase', 1), ('com.android.cts.verifier.wifiaware.DiscoveryRangingPublishTestActivity', 1), ('com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase', 1), ('android.net.wifi.cts.ScanResultTest', 1), ('android.net.wifi.cts.WifiBackupRestoreTest', 1), ('com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase', 1), ('android.net.wifi.p2p.cts.WifiP2pDeviceTest', 1), ('android.net.wifi.passpoint.cts.HomeSpTest', 1), ('com.android.cts.verifier.wifiaware.CallbackUtils', 1), ('com.android.cts.verifier.wifiaware.TestListActivity', 1)]"	"[('countDown', 13), ('getBytes', 9), ('Object', 7), ('getPackageManager', 6), ('setUp', 6), ('getContext', 6), ('notifyAll', 4), ('notify', 4), ('start', 3), ('getLooper', 3), ('getAction', 3), ('onAttachFailed', 2), ('waitForAnyCallback', 2), ('generateRandomPassphrase', 2), ('BroadcastReceiver', 2), ('getClass', 2), ('getClassLoader', 2), ('StringBuilder', 2), ('readLine', 2), ('toString', 2), ('PasspointConfiguration', 2), ('HomeSp', 2), ('tearDown', 2), ('waitForStateChange', 1), ('getSession', 1), ('turnScreenOn', 1), ('turnScreenOff', 1), ('onScanResultsAvailable', 1), ('setUpClass', 1), ('getInstrumentation', 1), ('Builder', 1), ('newSingleThreadScheduledExecutor', 1), ('getScanResults', 1), ('getState', 1), ('executeAttach', 1), ('AttachCb', 1), ('generateConfigurationFromPPSMOTree', 1), ('getFriendlyName', 1), ('getFqdn', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MySync', 1), ('MyResponse', 1), ('getMeteredOverride', 1), ('waitForAttach', 1), ('onIdentityChanged', 1), ('waitForMac', 1), ('onUnavailable', 1), ('waitForNetworkCapabilities', 1), ('waitForCallbacks', 1), ('await', 1), ('onSessionConfigUpdated', 1), ('onSessionConfigFailed', 1), ('onSessionTerminated', 1), ('waitForRangingResults', 1), ('generateConfigurationFromProfile', 1), ('Credential', 1), ('UserCredential', 1), ('CertificateCredential', 1), ('SimCredential', 1)]"	"[('CtsWifiTestCases', 92)]"	""	"com.android.cts.verifier.wifiaware.TestListActivity"	"getPackageManager"	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 22), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 1)]"	"[('(2,IEEE,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(1,select,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(20,discovery,/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java)', 1), ('(146,discovery,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(14,select,/android/net/wifi/cts/TestHelper.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,select,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(5,discovery,/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java)', 1), ('(10,select,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(85,discovery,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(2,IEEE,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(2,select,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(3,ANQP,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(4,IEEE,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(4,select,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(67,discovery,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(17,IEEE,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(28,discovery,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(1,discovery,/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(17,discovery,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(5,discovery,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([25:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[25]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 2), ('([1:/android/net/wifi/cts/WifiConfigurationTest.java]:[IEEE]:[1]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([2:/android/net/wifi/rtt/cts/TestBase.java]:[IEEE]:[2]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([1:/android/net/wifi/rtt/cts/TestBase.java]:[select]:[1]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([20:/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java]:[discovery]:[20]:method_text:[    + ""finish"");                return false;            }        }        return true;    }}])', 1), ('([27:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[27]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([3:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[3]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([17:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[17]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([16:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[16]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([13:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[13]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[6]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[6]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[6]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[discovery]:[2]:method_text:[iedBy(anotherNetworkSpecifier));    }    /**     * Test ParcelablePeerHandle parcel.     */   ])', 1), ('([14:/android/net/wifi/cts/TestHelper.java]:[select]:[14]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[select]:[1]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([5:/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java]:[discovery]:[5]:method_text:[iscovery_ranging_publish,                R.string.aware_discovery_ranging_publish_info, 0);    }}])', 1), ('([6:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[select]:[6]:method_text:[* {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(WifiConnectedSessionInfo)}.     */   ])', 1), ('([4:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[select]:[4]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([85:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[discovery]:[85]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[select]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific BSSID in the specifier.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[select]:[1]:method_text:[    /**     * Tests the entire connection flow using a BSSID pattern in the specifier.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANQP]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[ANQP]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[IEEE]:[2]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[IEEE]:[2]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[select]:[1]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[select]:[3]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([67:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[discovery]:[67]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[4]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[1]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([11:/android/net/wifi/cts/ConcurrencyTest.java]:[discovery]:[11]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([17:/android/net/wifi/cts/ConcurrencyTest.java]:[discovery]:[17]:method_text:[ponse.discoveryState);        mWifiP2pManager.stopPeerDiscovery(mWifiP2pChannel, null);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[discovery]:[1]:method_text:[iP2pDevice dev = new WifiP2pDevice();        assertFalse(dev.isServiceDiscoveryCapable());    }}])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([17:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[discovery]:[17]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([5:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[discovery]:[5]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1)]"	""	""	"[('passpoint', 57), ('discovery', 20), ('IEEE', 11), ('select', 9), ('ANQP', 2)]"	"[('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase executeTest None]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachDiscoveryAddressChanges CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSendMessageFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathOpenOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPassphraseOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPmkOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testWifiAwareNetworkSpecifier CtsWifiTestCases]', 1), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiScoringEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase executeTest None]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailurePsk8021X CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailure8021xEapSae CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithSsidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithBssidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithPeerHandle CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testRequestDiscoveryState CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pDeviceTest testDefaultDeviceCapabilityCheck CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1)]"	""	""	""	""	""	""	""	""	""
