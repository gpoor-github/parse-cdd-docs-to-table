"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.media.cts.AudioManagerTest"	"isMicrophoneMute"	"CtsMediaTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java"	""	"public void test/*  *.  */  package android.media.cts;  import static android.media.AudioManager.ADJUST_LOWER; import static android.media.AudioManager.ADJUST_RAISE; import static android.media.AudioManager.ADJUST_SAME; import static android.media.AudioManager.MODE_IN_CALL; import static android.media.AudioManager.MODE_IN_COMMUNICATION; import static android.media.AudioManager.MODE_NORMAL; import static android.media.AudioManager.MODE_RINGTONE; import static android.media.AudioManager.RINGER_MODE_NORMAL; import static android.media.AudioManager.RINGER_MODE_SILENT; import static android.media.AudioManager.RINGER_MODE_VIBRATE; import static android.media.AudioManager.STREAM_ACCESSIBILITY; import static android.media.AudioManager.STREAM_MUSIC; import static android.media.AudioManager.STREAM_RING; import static android.media.AudioManager.USE_DEFAULT_STREAM_TYPE; import static android.media.AudioManager.VIBRATE_SETTING_OFF; import static android.media.AudioManager.VIBRATE_SETTING_ON; import static android.media.AudioManager.VIBRATE_SETTING_ONLY_SILENT; import static android.media.AudioManager.VIBRATE_TYPE_NOTIFICATION; import static android.media.AudioManager.VIBRATE_TYPE_RINGER; import static android.provider.Settings.System.SOUND_EFFECTS_ENABLED;  import android.app.INotificationManager; import android.app.NotificationChannel; import android.app.NotificationManager; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.content.pm.PackageManager; import android.content.res.Resources; import android.media.AudioAttributes; import android.media.AudioDeviceInfo; import android.media.AudioManager; import android.media.MediaPlayer; import android.media.MicrophoneInfo; import android.os.ServiceManager; import android.os.Vibrator; import android.platform.test.annotations.AppModeFull; import android.provider.Settings; import android.provider.Settings.System; import android.test.InstrumentationTestCase; import android.text.TextUtils; import android.util.Log; import android.view.SoundEffectConstants;  import com.android.compatibility.common.util.CddTest; import com.android.compatibility.common.util.MediaUtils; import com.android.internal.annotations.GuardedBy;  import java.util.Arrays; import java.util.HashMap; import java.util.List; import java.util.Map;  @NonMediaMainlineTest public class AudioManagerTest extends InstrumentationTestCase {     private final static String TAG = ""AudioManagerTest"";      private final static long ASYNC_TIMING_TOLERANCE_MS = 50;     private final static int MP3_TO_PLAY = R.raw.testmp3;     private final static long TIME_TO_PLAY = 2000;     private final static String APPOPS_OP_STR = ""android:write_settings"";     private AudioManager mAudioManager;     private NotificationManager mNm;     private boolean mHasVibrator;     private boolean mUseFixedVolume;     private boolean mIsTelevision;     private boolean mIsSingleVolume;     private boolean mSkipRingerTests;     // From N onwards, ringer mode adjustments that toggle DND are not allowed unless     // package has DND access. Many tests in this package toggle DND access in order     // to get device out of the DND state for the test to proceed correctly.     // But DND access is disabled completely on low ram devices,     // so completely skip those tests here.     // These tests are migrated to CTS verifier tests to ensure test coverage.     private Context mContext;     private int mOriginalRingerMode;     private Map<Integer, Integer> mOriginalStreamVolumes = new HashMap<>();     private NotificationManager.Policy mOriginalNotificationPolicy;     private int mOriginalZen;     private boolean mDoNotCheckUnmute;     private boolean mAppsBypassingDnd;      @Override     protected void setUp() throws Exception {         super.setUp();         mContext = getInstrumentation().getContext();         Utils.enableAppOps(mContext.getPackageName(), APPOPS_OP_STR, getInstrumentation());         mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);         Vibrator vibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);         mNm = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);         mAppsBypassingDnd = NotificationManager.getService().areChannelsBypassingDnd();         mHasVibrator = (vibrator != null) && vibrator.hasVibrator();         mUseFixedVolume = mContext.getResources().getBoolean(                 Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android""));         PackageManager packageManager = mContext.getPackageManager();         mIsTelevision = packageManager != null                 && (packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)                         || packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION));         mIsSingleVolume = mContext.getResources().getBoolean(                 Resources.getSystem().getIdentifier(""config_single_volume"", ""bool"", ""android""));         mSkipRingerTests = mUseFixedVolume || mIsTelevision || mIsSingleVolume;          // Store the original volumes that that they can be recovered in tearDown().         final int[] streamTypes = {             AudioManager.STREAM_VOICE_CALL,             AudioManager.STREAM_SYSTEM,             AudioManager.STREAM_RING,             AudioManager.STREAM_MUSIC,             AudioManager.STREAM_ALARM,             AudioManager.STREAM_NOTIFICATION,             AudioManager.STREAM_DTMF,             AudioManager.STREAM_ACCESSIBILITY,         };         mOriginalRingerMode = mAudioManager.getRingerMode();         for (int streamType : streamTypes) {             mOriginalStreamVolumes.put(streamType, mAudioManager.getStreamVolume(streamType));         }          try {             Utils.toggleNotificationPolicyAccess(                     mContext.getPackageName(), getInstrumentation(), true);             mOriginalNotificationPolicy = mNm.getNotificationPolicy();             mOriginalZen = mNm.getCurrentInterruptionFilter();         } finally {             setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);             Utils.toggleNotificationPolicyAccess(                     mContext.getPackageName(), getInstrumentation(), false);         }          // Check original mirchrophone mute/unmute status         mDoNotCheckUnmute = false;         if (mAudioManager.isMicrophoneMute()) {             mAudioManager.setMicrophoneMute(false);             if (mAudioManager.isMicrophoneMute()) {                 Log.w(TAG, ""Mic seems muted by hardware! Please unmute and rerrun the test."");                 mDoNotCheckUnmute = true;             }         }     }      @Override     protected void tearDown() throws Exception {         try {             Utils.toggleNotificationPolicyAccess(                     mContext.getPackageName(), getInstrumentation(), true);             mNm.setNotificationPolicy(mOriginalNotificationPolicy);             setInterruptionFilter(mOriginalZen);              // Recover the volume and the ringer mode that the test may have overwritten.             for (Map.Entry<Integer, Integer> e : mOriginalStreamVolumes.entrySet()) {                 mAudioManager.setStreamVolume(e.getKey(), e.getValue(),                                               AudioManager.FLAG_ALLOW_RINGER_MODES);             }             mAudioManager.setRingerMode(mOriginalRingerMode);         } finally {             Utils.toggleNotificationPolicyAccess(                     mContext.getPackageName(), getInstrumentation(), false);         }     }      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.hardware.camera2.cts.OfflineSessionTest"	"testInvalidOutput"	"CtsCameraTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java"	""	"public void testInvalidOutput() throws Exception {         for (int i = 0; i < mCameraIdsUnderTest.length; i++) {             try {                 Log.i(TAG, ""Testing camera device "" + mCameraIdsUnderTest[i]);                  if (!mAllStaticInfo.get(mCameraIdsUnderTest[i]).isColorOutputSupported()) {                     Log.i(TAG, ""Camera "" + mCameraIdsUnderTest[i] +                             "" does not support color outputs, skipping"");                     continue;                 }                  if (!mAllStaticInfo.get(mCameraIdsUnderTest[i]).isOfflineProcessingSupported()) {                     Log.i(TAG, ""Camera "" + mCameraIdsUnderTest[i] +                             "" does not support offline processing, skipping"");                     continue;                 }                  openDevice(mCameraIdsUnderTest[i]);                  CaptureRequest.Builder previewRequest =                         mCamera.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);                 CaptureRequest.Builder stillCaptureRequest =                         mCamera.createCaptureRequest(CameraDevice.TEMPLATE_STILL_CAPTURE);                 Size previewSize = mOrderedPreviewSizes.get(0);                 Size stillSize = mOrderedStillSizes.get(0);                 SimpleCaptureCallback resultListener = new SimpleCaptureCallback();                 SimpleImageReaderListener imageListener = new SimpleImageReaderListener();                  startPreview(previewRequest, previewSize, resultListener);                  CaptureResult result = resultListener.getCaptureResult(WAIT_FOR_FRAMES_TIMEOUT_MS);                  Long timestamp = result.get(CaptureResult.SENSOR_TIMESTAMP);                 assertNotNull(""Can't read a capture result timestamp"", timestamp);                  CaptureResult result2 = resultListener.getCaptureResult(WAIT_FOR_FRAMES_TIMEOUT_MS);                  Long timestamp2 = result2.get(CaptureResult.SENSOR_TIMESTAMP);                 assertNotNull(""Can't read a capture result 2 timestamp"", timestamp2);                  assertTrue(""Bad timestamps"", timestamp2 > timestamp);                  createImageReader(stillSize, ImageFormat.JPEG, MAX_READER_IMAGES, imageListener);                  BlockingOfflineSessionCallback offlineCb = new BlockingOfflineSessionCallback();                  try {                     ArrayList<Surface> offlineSurfaces = new ArrayList<Surface>();                     offlineSurfaces.add(mReaderSurface);                     mSession.switchToOffline(offlineSurfaces, new HandlerExecutor(mHandler),                             offlineCb);                     fail(""Offline session switch accepts unregistered output surface"");                 } catch (IllegalArgumentException e) {                     //Expected                 }                  if (mSession.supportsOfflineProcessing(mPreviewSurface)) {                     ArrayList<Surface> offlineSurfaces = new ArrayList<Surface>();                     offlineSurfaces.add(mPreviewSurface);                     mSession.switchToOffline(offlineSurfaces, new HandlerExecutor(mHandler),                             offlineCb);                     // We only have a single repeating request, in this case the camera                     // implementation should fail to find any capture requests that can                     // be migrated to offline mode and notify the failure accordingly.                     offlineCb.waitForState(BlockingOfflineSessionCallback.STATE_SWITCH_FAILED,                             WAIT_FOR_STATE_TIMEOUT_MS);                 } else {                     stopPreview();                 }                  closeImageReader();             } finally {                 closeDevice();             }         }     }      /**      * Test camera callback sequence during and after offline session switch.      *      * <p>Camera clients must receive respective capture results or failures for all      * non-offline outputs after the offline switch call returns.      * In case the switch was successful clients must be notified about the      * remaining offline requests via the registered offline callback.</p>      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"com.android.cts.managedprofile.ProvisioningTest"	"PersistableBundle"	""	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"/*  *.  */ package com.android.cts.managedprofile;  import static android.app.admin.DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_SKIP_ENCRYPTION;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import android.accounts.Account; import android.accounts.AccountManager; import android.app.admin.DeviceAdminReceiver; import android.app.admin.DevicePolicyManager; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.SharedPreferences; import android.os.PersistableBundle; import android.util.Log;  import androidx.test.InstrumentationRegistry; import androidx.test.filters.SmallTest;  import com.android.compatibility.common.util.devicepolicy.provisioning.SilentProvisioningTestManager;  import org.junit.Before; import org.junit.Test;  @SmallTest public class ProvisioningTest {     private static final String TAG = ProvisioningTest.class.getSimpleName();      private static final String SHARED_PREFERENCE_FILE_NAME = ""shared-preferences-file-name"";      private static final PersistableBundle ADMIN_EXTRAS_BUNDLE = new PersistableBundle();     private static final String ADMIN_EXTRAS_BUNDLE_KEY_1 = ""KEY_1"";     private static final String ADMIN_EXTRAS_BUNDLE_VALUE_1 = ""VALUE_1"";     static {         ADMIN_EXTRAS_BUNDLE.putString(ADMIN_EXTRAS_BUNDLE_KEY_1, ADMIN_EXTRAS_BUNDLE_VALUE_1);     }      public static final String KEY_PROVISIONING_SUCCESSFUL_RECEIVED =             ""key-provisioning-successful-received"";      private static final ComponentName ADMIN_RECEIVER_COMPONENT = new ComponentName(             ProvisioningAdminReceiver.class.getPackage().getName(),             ProvisioningAdminReceiver.class.getName());      public static class ProvisioningAdminReceiver extends DeviceAdminReceiver {         @Override         public void onProfileProvisioningComplete(Context context, Intent intent) {             super.onProfileProvisioningComplete(context, intent);             // Enabled profile             getManager(context).setProfileName(ADMIN_RECEIVER_COMPONENT, ""Managed Profile"");             getManager(context).setProfileEnabled(ADMIN_RECEIVER_COMPONENT);             Log.i(TAG, ""onProfileProvisioningComplete"");              saveBundle(context, intent.getParcelableExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE));         }     }      private Context mContext;     private DevicePolicyManager mDpm;      @Before     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testAccountExist"	""	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testAccountExist() {         AccountManager am = AccountManager.get(mContext);         for (Account account : am.getAccountsByType(AccountAuthenticator.ACCOUNT_TYPE)) {             if (AccountAuthenticator.TEST_ACCOUNT.equals(account)) {                 return;             }         }         fail(""can't find migrated account"");     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testAccountNotExist"	""	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testAccountNotExist() {         AccountManager am = AccountManager.get(mContext);         assertTrue(""test account still exists after account migration"",                 am.getAccountsByType(AccountAuthenticator.ACCOUNT_TYPE).length == 0);     }      private Intent createBaseProvisioningIntent() {         return new Intent(ACTION_PROVISION_MANAGED_PROFILE)                 .putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME, ADMIN_RECEIVER_COMPONENT)                 .putExtra(EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)                 .putExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE, ADMIN_EXTRAS_BUNDLE)                 .putExtra(EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE, addAndGetTestAccount());     }      private void provisionManagedProfile(Intent intent) throws InterruptedException {         SilentProvisioningTestManager provisioningManager = new SilentProvisioningTestManager(mContext);         assertTrue(provisioningManager.startProvisioningAndWait(intent));         Log.i(TAG, ""managed profile provisioning successful"");     }      private Account addAndGetTestAccount() {         Account account = AccountAuthenticator.TEST_ACCOUNT;         AccountManager.get(mContext).addAccountExplicitly(account, null, null);         return account;     }      private static void saveBundle(Context context, PersistableBundle bundle) {         if (bundle == null) {             Log.e(TAG, ""null saveBundle"");             return;         }          getSharedPreferences(context).edit()                 .putString(ADMIN_EXTRAS_BUNDLE_KEY_1, bundle.getString(ADMIN_EXTRAS_BUNDLE_KEY_1))                 .commit();     }      private static PersistableBundle loadBundle(Context context) {         SharedPreferences pref = getSharedPreferences(context);         PersistableBundle bundle = new PersistableBundle();         bundle.putString(ADMIN_EXTRAS_BUNDLE_KEY_1,                 pref.getString(ADMIN_EXTRAS_BUNDLE_KEY_1, null));         return bundle;     }      public static SharedPreferences getSharedPreferences(Context context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.provider.cts.media.MediaStore_Audio_Genres_MembersTest"	"testStoreAudioGenresMembersExternal"	"CtsProviderTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Genres_MembersTest.java"	""	"@Ignore(""Genres cannot be directly modified"")     public void testStoreAudioGenresMembersExternal() {         ContentValues values = new ContentValues();         values.put(Genres.NAME, Audio1.GENRE);         Uri uri = mContentResolver.insert(Genres.getContentUri(mVolumeName), values);         Cursor c = mContentResolver.query(uri, null, null, null, null);         c.moveToFirst();          long genreId = c.getLong(c.getColumnIndex(Genres._ID));         long genre2Id = -1; // used later         c.close();          // verify that the Uri has the correct format and genre value         assertEquals(ContentUris.withAppendedId(Genres.getContentUri(mVolumeName), genreId),                 uri);          // insert audio as the member of the genre         values.clear();         values.put(Members.AUDIO_ID, mAudioIdOfJam);         Uri membersUri = Members.getContentUri(mVolumeName, genreId);         assertNotNull(mContentResolver.insert(membersUri, values));          try {             // query, slow path             c = mContentResolver.query(membersUri, null, null, null, null);              assertEquals(1, c.getCount());             c.moveToFirst();              assertEquals(mAudioIdOfJam, c.getLong(c.getColumnIndex(Members.AUDIO_ID)));             assertEquals(genreId, c.getLong(c.getColumnIndex(Members.GENRE_ID)));             assertEquals(mAudioIdOfJam, c.getLong(c.getColumnIndex(Members._ID)));             final String expected1 = Audio1.getInstance().getContentValues(mVolumeName)                     .getAsString(Members.DATA);             assertEquals(expected1, c.getString(c.getColumnIndex(Members.DATA)));             assertTrue(c.getLong(c.getColumnIndex(Members.DATE_ADDED)) > 0);             assertEquals(Audio1.DATE_MODIFIED, c.getLong(c.getColumnIndex(Members.DATE_MODIFIED)));             assertEquals(Audio1.DISPLAY_NAME, c.getString(c.getColumnIndex(Members.DISPLAY_NAME)));             assertEquals(Audio1.MIME_TYPE, c.getString(c.getColumnIndex(Members.MIME_TYPE)));             assertEquals(Audio1.SIZE, c.getInt(c.getColumnIndex(Members.SIZE)));             assertEquals(Audio1.TITLE, c.getString(c.getColumnIndex(Members.TITLE)));             assertEquals(Audio1.ALBUM, c.getString(c.getColumnIndex(Members.ALBUM)));             String albumKey = c.getString(c.getColumnIndex(Members.ALBUM_KEY));             assertNotNull(albumKey);             long albumId = c.getLong(c.getColumnIndex(Members.ALBUM_ID));             assertTrue(albumId > 0);             assertEquals(Audio1.ARTIST, c.getString(c.getColumnIndex(Members.ARTIST)));             String artistKey = c.getString(c.getColumnIndex(Members.ARTIST_KEY));             assertNotNull(artistKey);             long artistId = c.getLong(c.getColumnIndex(Members.ARTIST_ID));             assertTrue(artistId > 0);             assertEquals(Audio1.COMPOSER, c.getString(c.getColumnIndex(Members.COMPOSER)));             assertEquals(Audio1.DURATION, c.getLong(c.getColumnIndex(Members.DURATION)));             assertEquals(Audio1.IS_ALARM, c.getInt(c.getColumnIndex(Members.IS_ALARM)));             assertEquals(Audio1.IS_MUSIC, c.getInt(c.getColumnIndex(Members.IS_MUSIC)));             assertEquals(Audio1.IS_NOTIFICATION,                     c.getInt(c.getColumnIndex(Members.IS_NOTIFICATION)));             assertEquals(Audio1.IS_RINGTONE, c.getInt(c.getColumnIndex(Members.IS_RINGTONE)));             assertEquals(Audio1.TRACK, c.getInt(c.getColumnIndex(Members.TRACK)));             assertEquals(Audio1.YEAR, c.getInt(c.getColumnIndex(Members.YEAR)));             String titleKey = c.getString(c.getColumnIndex(Members.TITLE_KEY));             assertNotNull(titleKey);             c.close();              // query again, fast path             c = mContentResolver.query(membersUri,                     new String[] { Members.AUDIO_ID, Members.GENRE_ID},                     null, null, null);             assertEquals(1, c.getCount());             c.moveToFirst();             assertEquals(mAudioIdOfJam, c.getLong(c.getColumnIndex(Members.AUDIO_ID)));             assertEquals(genreId, c.getLong(c.getColumnIndex(Members.GENRE_ID)));             c.close();              // Query with a constraint on _id. Note that _id corresponds to the _id             // column in the audio table, not the one in the audio_genres_map table.             // We need to preserve this behavior for backward compatibility.             c = mContentResolver.query(membersUri, null,                     Members._ID + ""=?"", new String[] {Long.toString(mAudioIdOfJam)}, null);             assertEquals(1, c.getCount());             c.moveToFirst();             assertEquals(mAudioIdOfJam, c.getLong(c.getColumnIndex(Members._ID)));             c.close();              // Query members across all genres             // TODO: migrate this to using public API             Uri allMembersUri = MediaStore.Audio.Genres.getContentUri(mVolumeName).buildUpon()                     .appendPath(""all"").appendPath(""members"").build();             c = mContentResolver.query(allMembersUri, null, null, null, null);             int colidx = c.getColumnIndex(Members.AUDIO_ID);             int jamcnt = 0;             // The song should appear only once, for the genre we used when inserting it             while(c.moveToNext()) {                 if (c.getLong(colidx) == mAudioIdOfJam) {                     jamcnt++;                     assertEquals(genreId, c.getLong(c.getColumnIndex(Members.GENRE_ID)));                 }             }             assertEquals(1, jamcnt);             c.close();              // Query the same Uri, but add a where clause to restrict it to the one entry we added             c = mContentResolver.query(allMembersUri, null,                     Members.AUDIO_ID + ""=?"", new String[] {Long.toString(mAudioIdOfJam)}, null);             assertEquals(1, c.getCount());             c.moveToFirst();             assertEquals(genreId, c.getLong(c.getColumnIndex(Members.GENRE_ID)));             assertEquals(mAudioIdOfJam, c.getLong(c.getColumnIndex(Members.AUDIO_ID)));             c.close();              // create another genre             values.clear();             values.put(Genres.NAME, Audio1.GENRE + ""-2"");             uri = mContentResolver.insert(Genres.getContentUri(mVolumeName), values);             c = mContentResolver.query(uri, null, null, null, null);             c.moveToFirst();             genre2Id = c.getLong(c.getColumnIndex(Genres._ID));             c.close();              // insert the song into the second genre             values.clear();             values.put(Members.AUDIO_ID, mAudioIdOfJam);             Uri members2Uri = Members.getContentUri(mVolumeName, genre2Id);             assertNotNull(mContentResolver.insert(members2Uri, values));              // Query members across all genres again             c = mContentResolver.query(allMembersUri, null, null, null, null);             colidx = c.getColumnIndex(Members.AUDIO_ID);             int jamcnt1 = 0;             int jamcnt2 = 0;             // This time the song should appear twice, once for each genre             while(c.moveToNext()) {                 if (c.getLong(colidx) == mAudioIdOfJam) {                     long g = c.getLong(c.getColumnIndex(Members.GENRE_ID));                     if (g == genreId) {                         jamcnt1++;                     } else if (g == genre2Id) {                         jamcnt2++;                     } else {                         fail(""wrong genre found"");                     }                 }             }             assertEquals(1, jamcnt1);             assertEquals(1, jamcnt2);             c.close();              // Delete the members, note that this does not delete the genre itself             assertEquals(1, mContentResolver.delete(membersUri, null, null)); // check number of rows deleted              // verify the genre is now empty             c = mContentResolver.query(membersUri, null, null, null, null);             assertEquals(0, c.getCount());             c.close();              // same for 2nd genre             assertEquals(1, mContentResolver.delete(members2Uri, null, null));             c = mContentResolver.query(members2Uri, null, null, null, null);             assertEquals(0, c.getCount());             c.close();              // insert again, then verify that deleting the audio entry cleans up its genre member             // entry as well             values.put(Members.AUDIO_ID, mAudioIdOfJam);             membersUri = Members.getContentUri(mVolumeName, genreId);             assertNotNull(mContentResolver.insert(membersUri, values));             // Query members across all genres             c = mContentResolver.query(allMembersUri,                     new String[] { Members.AUDIO_ID, Members.GENRE_ID}, null, null, null);             colidx = c.getColumnIndex(Members.AUDIO_ID);             jamcnt = 0;             // The song should appear only once, for the genre we used when inserting it             while(c.moveToNext()) {                 if (c.getLong(colidx) == mAudioIdOfJam) {                     jamcnt++;                     assertEquals(genreId, c.getLong(c.getColumnIndex(Members.GENRE_ID)));                 }             }             assertEquals(1, jamcnt);             c.close();             mContentResolver.delete(Media.getContentUri(mVolumeName),                     Media._ID + ""="" + mAudioIdOfJam, null);             // Query members across all genres             c = mContentResolver.query(allMembersUri,                     new String[] { Members.AUDIO_ID, Members.GENRE_ID}, null, null, null);             colidx = c.getColumnIndex(Members.AUDIO_ID);             jamcnt = 0;             // The song should no longer appear in the genre             while(c.moveToNext()) {                 if (c.getLong(colidx) == mAudioIdOfJam) {                     jamcnt++;                 }             }             assertEquals(0, jamcnt);             c.close();         } finally {             // the members are deleted when deleting the genre which they belong to             mContentResolver.delete(Genres.getContentUri(mVolumeName),                     Genres._ID + ""="" + genreId, null);             if (genre2Id >= 0) {                 mContentResolver.delete(Genres.getContentUri(mVolumeName),                         Genres._ID + ""="" + genre2Id, null);             }             c = mContentResolver.query(membersUri, null, null, null, null);             assertEquals(0, c.getCount());             c.close();         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ImageCaptureUriExtraToClipDataTest"	"testUriExtraOutputMigratedToClipData_imageCaptureIntent"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ImageCaptureUriExtraToClipDataTest.java"	""	"public void testUriExtraOutputMigratedToClipData_imageCaptureIntent() {         startActivityWithAction(MediaStore.ACTION_IMAGE_CAPTURE);         waitForFileReady();         assertFileContents();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ImageCaptureUriExtraToClipDataTest"	"testUriExtraOutputMigratedToClipData_imageCaptureSecureIntent"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ImageCaptureUriExtraToClipDataTest.java"	""	"public void testUriExtraOutputMigratedToClipData_imageCaptureSecureIntent() {         startActivityWithAction(MediaStore.ACTION_IMAGE_CAPTURE_SECURE);         waitForFileReady();         assertFileContents();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ImageCaptureUriExtraToClipDataTest"	"testUriExtraOutputMigratedToClipData_videoCaptureIntent"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ImageCaptureUriExtraToClipDataTest.java"	""	"public void testUriExtraOutputMigratedToClipData_videoCaptureIntent() {         startActivityWithAction(MediaStore.ACTION_VIDEO_CAPTURE);         waitForFileReady();         assertFileContents();     }      private void startActivityWithAction(String action) {         Intent intent = new Intent(action);         intent.setComponent(new ComponentName(""android.content.cts"",                         ""android.content.cts.ImageCaptureActivity""));         intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(mTestFile));         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         getContext().startActivity(intent);     }      private void waitForFileReady() {         try {             assertTrue(mFileReadySemaphore.tryAcquire(5, TimeUnit.SECONDS));         } catch (InterruptedException e) {             fail(e.toString());         }     }      private void assertFileContents() {         char[] buffer = new char[TEST_INPUT.length()];         try {             FileReader reader = new FileReader(mTestFile);             reader.read(buffer);             reader.close();         } catch (IOException e) {             // Problem             fail(e.toString());         }         String fileContents = new String(buffer);         assertEquals(TEST_INPUT, fileContents);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ContextTest"	"testMoveSharedPreferencesFrom"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	"public void testMoveSharedPreferencesFrom() throws Exception {         final Context deviceContext = mContext.createDeviceProtectedStorageContext();          mContext.getSharedPreferences(""test"", Context.MODE_PRIVATE).edit().putInt(""answer"", 42)                 .commit();          // Verify that we can migrate         assertTrue(deviceContext.moveSharedPreferencesFrom(mContext, ""test""));         assertEquals(0, mContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));         assertEquals(42, deviceContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));          // Trying to migrate again when already done is a no-op         assertTrue(deviceContext.moveSharedPreferencesFrom(mContext, ""test""));         assertEquals(0, mContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));         assertEquals(42, deviceContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));          // Add a new value and verify that we can migrate back         deviceContext.getSharedPreferences(""test"", Context.MODE_PRIVATE).edit()                 .putInt(""question"", 24).commit();          assertTrue(mContext.moveSharedPreferencesFrom(deviceContext, ""test""));         assertEquals(42, mContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));         assertEquals(24, mContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""question"", 0));         assertEquals(0, deviceContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""answer"", 0));         assertEquals(0, deviceContext.getSharedPreferences(""test"", Context.MODE_PRIVATE)                 .getInt(""question"", 0));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ContextTest"	"testMoveDatabaseFrom"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java"	""	"public void testMoveDatabaseFrom() throws Exception {         final Context deviceContext = mContext.createDeviceProtectedStorageContext();          SQLiteDatabase db = mContext.openOrCreateDatabase(""test.db"",                 Context.MODE_PRIVATE | Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, null);         db.execSQL(""CREATE TABLE list(item TEXT);"");         db.execSQL(""INSERT INTO list VALUES ('cat')"");         db.execSQL(""INSERT INTO list VALUES ('dog')"");         db.close();          // Verify that we can migrate         assertTrue(deviceContext.moveDatabaseFrom(mContext, ""test.db""));         db = deviceContext.openOrCreateDatabase(""test.db"",                 Context.MODE_PRIVATE | Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, null);         Cursor c = db.query(""list"", null, null, null, null, null, null);         assertEquals(2, c.getCount());         assertTrue(c.moveToFirst());         assertEquals(""cat"", c.getString(0));         assertTrue(c.moveToNext());         assertEquals(""dog"", c.getString(0));         c.close();         db.execSQL(""INSERT INTO list VALUES ('mouse')"");         db.close();          // Trying to migrate again when already done is a no-op         assertTrue(deviceContext.moveDatabaseFrom(mContext, ""test.db""));          // Verify that we can migrate back         assertTrue(mContext.moveDatabaseFrom(deviceContext, ""test.db""));         db = mContext.openOrCreateDatabase(""test.db"",                 Context.MODE_PRIVATE | Context.MODE_ENABLE_WRITE_AHEAD_LOGGING, null);         c = db.query(""list"", null, null, null, null, null, null);         assertEquals(3, c.getCount());         assertTrue(c.moveToFirst());         assertEquals(""cat"", c.getString(0));         assertTrue(c.moveToNext());         assertEquals(""dog"", c.getString(0));         assertTrue(c.moveToNext());         assertEquals(""mouse"", c.getString(0));         c.close();         db.close();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ReadableUriExtraToClipDataTest"	"testUriExtraStreamMigratedToClipData_sendIntent"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ReadableUriExtraToClipDataTest.java"	""	"public void testUriExtraStreamMigratedToClipData_sendIntent() {         Intent intent = new Intent(Intent.ACTION_SEND);         intent.setComponent(new ComponentName(getContext(), ReadableFileReceiverActivity.class));         intent.putExtra(Intent.EXTRA_STREAM, mTestFileUris.get(0));         intent.setType(""*/*"");         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);          getContext().startActivity(intent);          waitForConfirmationReadSuccess();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.content.cts.ReadableUriExtraToClipDataTest"	"testUriExtraStreamMigratedToClipData_sendMultipleIntent"	"CtsContentTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ReadableUriExtraToClipDataTest.java"	""	"public void testUriExtraStreamMigratedToClipData_sendMultipleIntent() {         Intent intent = new Intent(Intent.ACTION_SEND_MULTIPLE);         intent.setComponent(new ComponentName(getContext(), ReadableFileReceiverActivity.class));         intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, mTestFileUris);         intent.setType(""*/*"");         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);          getContext().startActivity(intent);          waitForConfirmationReadSuccess();     }      private void writeTestInputToFile(File file) {         try {             FileWriter writer = new FileWriter(file);             writer.write(TEST_INPUT);             writer.flush();             writer.close();         } catch (IOException e) {             fail(e.toString());             return;         }     }      private void waitForConfirmationReadSuccess() {         try {             assertTrue(mReadSuccessSemaphore.tryAcquire(5, TimeUnit.SECONDS));         } catch (InterruptedException e) {             fail(e.toString());         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.cts.statsd.atom.UidAtomTests"	"testPictureInPictureState"	""	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/UidAtomTests.java"	""	"public void testPictureInPictureState() throws Exception {         String supported = getDevice().executeShellCommand(""am supports-multiwindow"");         if (!hasFeature(FEATURE_WATCH, false) ||                 !hasFeature(FEATURE_PICTURE_IN_PICTURE, true) ||                 !supported.contains(""true"")) {             LogUtil.CLog.d(""Skipping picture in picture atom test."");             return;         }          StatsdConfig.Builder conf = createConfigBuilder();         // PictureInPictureStateChanged atom is used prior to rvc-qpr         addAtomEvent(conf, Atom.PICTURE_IN_PICTURE_STATE_CHANGED_FIELD_NUMBER,                 /*useAttribution=*/false);         // Picture-in-picture logs' been migrated to UiEvent since rvc-qpr         FieldValueMatcher.Builder pkgMatcher = createFvm(UiEventReported.PACKAGE_NAME_FIELD_NUMBER)                 .setEqString(DEVICE_SIDE_TEST_PACKAGE);         addAtomEvent(conf, Atom.UI_EVENT_REPORTED_FIELD_NUMBER, Arrays.asList(pkgMatcher));         uploadConfig(conf);          LogUtil.CLog.d(""Playing video in Picture-in-Picture mode"");         runActivity(""VideoPlayerActivity"", ""action"", ""action.play_video_picture_in_picture_mode"");          // Sorted list of events in order in which they occurred.         List<EventMetricData> data = getEventMetricDataList();          // Filter out the PictureInPictureStateChanged and UiEventReported atom         List<EventMetricData> pictureInPictureStateChangedData = data.stream()                 .filter(e -> e.getAtom().hasPictureInPictureStateChanged())                 .collect(Collectors.toList());         List<EventMetricData> uiEventReportedData = data.stream()                 .filter(e -> e.getAtom().hasUiEventReported())                 .collect(Collectors.toList());          if (!pictureInPictureStateChangedData.isEmpty()) {             LogUtil.CLog.d(""Assert using PictureInPictureStateChanged"");             Set<Integer> entered = new HashSet<>(                     Arrays.asList(PictureInPictureStateChanged.State.ENTERED_VALUE));             List<Set<Integer>> stateSet = Arrays.asList(entered);             assertStatesOccurred(stateSet, data, WAIT_TIME_LONG,                     atom -> atom.getPictureInPictureStateChanged().getState().getNumber());         } else if (!uiEventReportedData.isEmpty()) {             LogUtil.CLog.d(""Assert using UiEventReported"");             // See PipUiEventEnum for definitions             final int enterPipEventId = 603;             // Assert that log for entering PiP happens exactly once, we do not use             // assertStateOccurred here since PiP may log something else when activity finishes.             List<EventMetricData> entered = uiEventReportedData.stream()                     .filter(e -> e.getAtom().getUiEventReported().getEventId() == enterPipEventId)                     .collect(Collectors.toList());             assertThat(entered).hasSize(1);         } else {             fail(""No logging event from PictureInPictureStateChanged nor UiEventReported"");         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	"android.app.cts.WallpaperManagerTest"	"invokeOnColorsChangedListenerTest_systemOnly"	"CtsAndroidAppTestCases"	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	""	"migrate"	""	""	""	"migrate"	""	""	""	"/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WallpaperManagerTest.java"	""	"public void invokeOnColorsChangedListenerTest_systemOnly() {         int both = WallpaperManager.FLAG_LOCK | WallpaperManager.FLAG_SYSTEM;         // Expect both since the first step is to migrate the current wallpaper         // to the lock screen.         verifyColorListenerInvoked(WallpaperManager.FLAG_SYSTEM, both);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferProfileOwnerOutgoingTest"	"testTransferWithPoliciesOutgoing"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java"	""	"public void testTransferWithPoliciesOutgoing() throws Throwable {         int passwordLength = 123;         int passwordExpirationTimeout = 456;         DevicePolicyManager parentDevicePolicyManager =                 mDevicePolicyManager.getParentProfileInstance(mOutgoingComponentName);         mDevicePolicyManager.setCameraDisabled(mOutgoingComponentName, true);         mDevicePolicyManager.setPasswordQuality(                 mOutgoingComponentName, DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);         mDevicePolicyManager.setPasswordMinimumLength(mOutgoingComponentName, passwordLength);         mDevicePolicyManager.setCrossProfileCallerIdDisabled(mOutgoingComponentName, true);         parentDevicePolicyManager.setPasswordExpirationTimeout(                 mOutgoingComponentName, passwordExpirationTimeout);          PersistableBundle b = new PersistableBundle();         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferProfileOwnerOutgoingTest"	"testTransferOwnership"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java"	""	"public void testTransferOwnership() throws Throwable {         PersistableBundle b = new PersistableBundle();         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);         assertTrue(mDevicePolicyManager.isAdminActive(INCOMING_COMPONENT_NAME));         assertTrue(mDevicePolicyManager.isProfileOwnerApp(INCOMING_COMPONENT_NAME.getPackageName()));         assertFalse(                 mDevicePolicyManager.isProfileOwnerApp(mOutgoingComponentName.getPackageName()));         assertFalse(mDevicePolicyManager.isAdminActive(mOutgoingComponentName));         assertThrows(SecurityException.class, () -> {             mDevicePolicyManager.setCrossProfileCallerIdDisabled(mOutgoingComponentName,                     false);         });     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferWithPoliciesOutgoing"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	"public void testTransferWithPoliciesOutgoing() throws Throwable {         int passwordLength = 123;         mDevicePolicyManager.setCameraDisabled(mOutgoingComponentName, true);         mDevicePolicyManager.setPasswordQuality(                 mOutgoingComponentName, DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);         mDevicePolicyManager.setPasswordMinimumLength(mOutgoingComponentName, passwordLength);         mDevicePolicyManager.setKeepUninstalledPackages(mOutgoingComponentName,                 Collections.singletonList(""test.package""));         mDevicePolicyManager.setSystemUpdatePolicy(mOutgoingComponentName,                 SystemUpdatePolicy.createPostponeInstallPolicy());         PersistableBundle b = new PersistableBundle();         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferOwnership"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	"public void testTransferOwnership() throws Throwable {         PersistableBundle b = new PersistableBundle();         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);         assertTrue(mDevicePolicyManager.isAdminActive(INCOMING_COMPONENT_NAME));         assertTrue(mDevicePolicyManager.isDeviceOwnerApp(INCOMING_COMPONENT_NAME.getPackageName()));         assertFalse(                 mDevicePolicyManager.isDeviceOwnerApp(mOutgoingComponentName.getPackageName()));         assertFalse(mDevicePolicyManager.isAdminActive(mOutgoingComponentName));         assertThrows(SecurityException.class, () -> {             mDevicePolicyManager.getSecondaryUsers(mOutgoingComponentName);         });     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferAffiliatedProfileOwnershipCompleteCallbackIsCalled"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	"public void testTransferAffiliatedProfileOwnershipCompleteCallbackIsCalled() {         assertTrue(getBooleanPref(mContext, KEY_TRANSFER_AFFILIATED_PROFILE_COMPLETED_CALLED));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java"	""	"public void test/*  *.  */ package com.android.cts.deviceandprofileowner.userrestrictions;  import android.os.Process; import android.os.UserHandle; import android.os.UserManager;  public class DeviceOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {     public static final String[] ALLOWED = new String[] {             // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.             UserManager.DISALLOW_MODIFY_ACCOUNTS,             UserManager.DISALLOW_INSTALL_APPS,             UserManager.DISALLOW_UNINSTALL_APPS,             // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.             // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.             UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,             UserManager.DISALLOW_CONFIG_BLUETOOTH,             UserManager.DISALLOW_USB_FILE_TRANSFER,             UserManager.DISALLOW_CONFIG_CREDENTIALS,             UserManager.DISALLOW_REMOVE_USER,             // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS             UserManager.DISALLOW_CONFIG_VPN,             UserManager.DISALLOW_CONFIG_TETHERING,             UserManager.DISALLOW_NETWORK_RESET,             UserManager.DISALLOW_FACTORY_RESET,             UserManager.DISALLOW_ADD_USER,             // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.             UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,             UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,             UserManager.DISALLOW_APPS_CONTROL,             UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,             UserManager.DISALLOW_UNMUTE_MICROPHONE,             UserManager.DISALLOW_ADJUST_VOLUME,             UserManager.DISALLOW_OUTGOING_CALLS,             UserManager.DISALLOW_SMS,             UserManager.DISALLOW_FUN,             UserManager.DISALLOW_CREATE_WINDOWS,             UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,             UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,             UserManager.DISALLOW_OUTGOING_BEAM,             UserManager.DISALLOW_SAFE_BOOT,             UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,             // UserManager.DISALLOW_DATA_ROAMING, // Has unrecoverable side effects.             UserManager.DISALLOW_SET_USER_ICON,             UserManager.DISALLOW_BLUETOOTH,             UserManager.DISALLOW_AUTOFILL,             UserManager.DISALLOW_CONTENT_CAPTURE,             UserManager.DISALLOW_CONTENT_SUGGESTIONS,             UserManager.DISALLOW_UNIFIED_PASSWORD,     };      public static final String[] DISALLOWED = new String[] {             // DO can set all public restrictions.     };      public static final String[] DEFAULT_ENABLED = new String[] {             // No restrictions set for DO by default.     };      @Override     protected String[] getAllowedRestrictions() {         return ALLOWED;     }      @Override     protected String[] getDisallowedRestrictions() {         return DISALLOWED;     }      @Override     protected String[] getDefaultEnabledRestrictions() { return DEFAULT_ENABLED; }      /**      * Picks a restriction that isn't applied by {@link UserManager} itself, applies it, and makes      * sure that {@link UserManager} understands that it is applied but not as a base restriction.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testRequestBugreport"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	"public void testRequestBugreport() throws Exception {         ActivityManager activityManager = mContext.getSystemService(ActivityManager.class);          // This test leaves a notification which will block future tests that request bug reports         // to fix this - we dismiss the bug report before returning         CountDownLatch notificationDismissedLatch = null;         if (!activityManager.isLowRamDevice()) {             // On low ram devices we should reboot the phone after the test             notificationDismissedLatch = initTestRequestBugreport();         }          Thread.sleep(1);         final long previousTimestamp = mDevicePolicyManager.getLastBugReportRequestTime();          final long timeBefore = System.currentTimeMillis();         mDevicePolicyManager.requestBugreport(getWho());         final long timeAfter = System.currentTimeMillis();          final long newTimestamp = mDevicePolicyManager.getLastBugReportRequestTime();         assertTrue(newTimestamp > previousTimestamp);         assertTrue(newTimestamp >= timeBefore);         assertTrue(newTimestamp <= timeAfter);          if (!activityManager.isLowRamDevice()) {             // On low ram devices we should reboot the phone after the test             cleanupTestRequestBugreport(notificationDismissedLatch);         }     }      private CountDownLatch initTestRequestBugreport() {         CountDownLatch notificationDismissedLatch = new CountDownLatch(1);         NotificationListener.getInstance().addListener((sbt) -> {             // The notification we are looking for is the one which confirms the bug report is             // ready and asks for consent to send it             if (sbt.getPackageName().equals(""android"") &&                     sbt.getTag().equals(""DevicePolicyManager"") &&                     sbt.getNotification().actions != null) {                 try {                     // The first action is to decline                     sbt.getNotification().actions[0].actionIntent.send();                     notificationDismissedLatch.countDown();                 } catch (PendingIntent.CanceledException e) {                     fail(""Could not dismiss bug report notification"");                 }             }         });         return notificationDismissedLatch;     }      private void cleanupTestRequestBugreport(CountDownLatch notificationDismissedLatch)             throws Exception {         notificationDismissedLatch.await();         NotificationListener.getInstance().clearListeners();     }      /**      * Test: Retrieving network logs should update the corresponding timestamp.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java"	""	"public void test/*  *.  */ package com.android.cts.deviceandprofileowner.userrestrictions;  import android.os.UserManager;  import java.util.Arrays; import java.util.HashSet;  public class SecondaryProfileOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {     public static final String[] ALLOWED = new String[] {             // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.             UserManager.DISALLOW_MODIFY_ACCOUNTS,             UserManager.DISALLOW_INSTALL_APPS,             UserManager.DISALLOW_UNINSTALL_APPS,             // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.             // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.             // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, // Same as above.             UserManager.DISALLOW_CONFIG_BLUETOOTH,             UserManager.DISALLOW_CONFIG_CREDENTIALS,             UserManager.DISALLOW_REMOVE_USER,             // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS             UserManager.DISALLOW_CONFIG_VPN,             // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.             UserManager.DISALLOW_APPS_CONTROL,             UserManager.DISALLOW_UNMUTE_MICROPHONE,             UserManager.DISALLOW_ADJUST_VOLUME,             UserManager.DISALLOW_OUTGOING_CALLS,             UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,             UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,             UserManager.DISALLOW_OUTGOING_BEAM,             UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,             UserManager.DISALLOW_SET_USER_ICON,             UserManager.DISALLOW_AUTOFILL,             UserManager.DISALLOW_CONTENT_CAPTURE,             UserManager.DISALLOW_CONTENT_SUGGESTIONS,             UserManager.DISALLOW_UNIFIED_PASSWORD,     };      public static final String[] DISALLOWED = new String[] {             UserManager.DISALLOW_USB_FILE_TRANSFER,             UserManager.DISALLOW_CONFIG_TETHERING,             UserManager.DISALLOW_NETWORK_RESET,             UserManager.DISALLOW_FACTORY_RESET,             UserManager.DISALLOW_ADD_USER,             UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,             UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,             UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,             UserManager.DISALLOW_SMS,             UserManager.DISALLOW_FUN,             UserManager.DISALLOW_SAFE_BOOT,             UserManager.DISALLOW_CREATE_WINDOWS,             UserManager.DISALLOW_DATA_ROAMING,             UserManager.DISALLOW_BLUETOOTH     };      public static final String[] ALLOWED_BUT_LEAKY = new String[] {         UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,     };      @Override     protected String[] getAllowedRestrictions() {         return ALLOWED;     }      @Override     protected String[] getDisallowedRestrictions() {         return DISALLOWED;     }      @Override     protected String[] getDefaultEnabledRestrictions() { return new String[0]; }      /**      * This is called after DO setting all DO restrictions. Global restrictions should be      * visible on other users.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest"	"testTransferCompleteCallbackIsCalled"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java"	""	"public void testTransferCompleteCallbackIsCalled() {         assertTrue(getBooleanPref(mContext, KEY_TRANSFER_COMPLETED_CALLED));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest"	"testTransferOwnershipBundleLoaded"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java"	""	"public void testTransferOwnershipBundleLoaded() throws Throwable {         PersistableBundle bundle = mDevicePolicyManager.getTransferOwnershipBundle();         assertNotNull(bundle);         assertTrue(bundle.getBoolean(ARE_PARAMETERS_SAVED));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest"	"testTransferOwnershipEmptyBundleLoaded"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java"	""	"public void testTransferOwnershipEmptyBundleLoaded() throws Throwable {         PersistableBundle bundle = mDevicePolicyManager.getTransferOwnershipBundle();         assertNotNull(bundle);         assertTrue(bundle.isEmpty());     }      private static SharedPreferences getPrefs(Context context) {         return context.getSharedPreferences(SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);     }      private static void putBooleanPref(Context context, String key, boolean value) {         getPrefs(context).edit().putBoolean(key, value).apply();     }      protected static boolean getBooleanPref(Context context, String key) {         return getPrefs(context).getBoolean(key, false);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"getDisallowedRestrictions"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	"public void test/*  *.  */ package com.android.cts.deviceandprofileowner.userrestrictions;  import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.os.Process; import android.os.UserHandle; import android.os.UserManager;  import com.android.compatibility.common.util.ShellIdentityUtils; import com.android.cts.deviceandprofileowner.BaseDeviceAdminTest;  import java.util.Arrays; import java.util.HashSet; import java.util.Set; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit;  public abstract class BaseUserRestrictionsTest extends BaseDeviceAdminTest {     protected static final String[] ALL_USER_RESTRICTIONS = new String[]{             UserManager.DISALLOW_CONFIG_WIFI,             UserManager.DISALLOW_MODIFY_ACCOUNTS,             UserManager.DISALLOW_INSTALL_APPS,             UserManager.DISALLOW_UNINSTALL_APPS,             UserManager.DISALLOW_SHARE_LOCATION,             UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES,             UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,             UserManager.DISALLOW_CONFIG_BLUETOOTH,             UserManager.DISALLOW_USB_FILE_TRANSFER,             UserManager.DISALLOW_CONFIG_CREDENTIALS,             UserManager.DISALLOW_REMOVE_USER,             UserManager.DISALLOW_DEBUGGING_FEATURES,             UserManager.DISALLOW_CONFIG_VPN,             UserManager.DISALLOW_CONFIG_TETHERING,             UserManager.DISALLOW_NETWORK_RESET,             UserManager.DISALLOW_FACTORY_RESET,             UserManager.DISALLOW_ADD_USER,             UserManager.ENSURE_VERIFY_APPS,             UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,             UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,             UserManager.DISALLOW_APPS_CONTROL,             UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,             UserManager.DISALLOW_UNMUTE_MICROPHONE,             UserManager.DISALLOW_ADJUST_VOLUME,             UserManager.DISALLOW_OUTGOING_CALLS,             UserManager.DISALLOW_SMS,             UserManager.DISALLOW_FUN,             UserManager.DISALLOW_CREATE_WINDOWS,             UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,             UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,             UserManager.DISALLOW_OUTGOING_BEAM,             UserManager.DISALLOW_SAFE_BOOT,             UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,             UserManager.DISALLOW_DATA_ROAMING,             UserManager.DISALLOW_SET_USER_ICON,             UserManager.DISALLOW_BLUETOOTH,             UserManager.DISALLOW_BLUETOOTH_SHARING     };      /**      * Restrictions that affect all users when DO sets.      */     protected static final String[] DO_GLOBAL_RESTRICTIONS = new String[] {             UserManager.DISALLOW_USB_FILE_TRANSFER,             UserManager.DISALLOW_CONFIG_TETHERING,             UserManager.DISALLOW_NETWORK_RESET,             UserManager.DISALLOW_FACTORY_RESET,             UserManager.DISALLOW_ADD_USER,             UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,             UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,             UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,             UserManager.DISALLOW_SMS,             UserManager.DISALLOW_FUN,             UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,             UserManager.DISALLOW_SAFE_BOOT,             UserManager.DISALLOW_CREATE_WINDOWS,             UserManager.DISALLOW_BLUETOOTH,             // UserManager.DISALLOW_DATA_ROAMING, // Not set during CTS              // PO can set them too, but when DO sets them, they're global.             UserManager.DISALLOW_ADJUST_VOLUME,             UserManager.DISALLOW_UNMUTE_MICROPHONE,             UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS     };      public static final String[] HIDDEN_AND_PROHIBITED = new String[] {             ""no_record_audio"",             ""no_wallpaper"",             ""no_oem_unlock""     };      protected void assertLayeredRestriction(String restriction, boolean expected) {         assertEquals(""Restriction "" + restriction + "": expected="" + expected,                 expected, mUserManager.hasUserRestriction(restriction));     }      protected void assertOwnerRestriction(String restriction, boolean expected) {         assertEquals(""Restriction "" + restriction + "": expected="" + expected,                 expected, mDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT)                         .getBoolean(restriction));     }      /** Returns whether {@link UserManager} itself has applied the given restriction to the user. */     protected boolean hasBaseUserRestriction(String restriction, UserHandle userHandle) {         return ShellIdentityUtils.invokeMethodWithShellPermissions(mUserManager,                 (um) -> um.hasBaseUserRestriction(restriction, userHandle));     }      /**      * Check that {@link UserManager#hasUserRestriction} gives the expected results for each      * restriction.      * @param expected the list of user restrictions that are expected to have been applied due      *                 to DO/PO      */     protected void assertRestrictions(Set<String> expected) {         final UserHandle userHandle = Process.myUserHandle();         for (String r : ALL_USER_RESTRICTIONS) {             assertLayeredRestriction(r,                     expected.contains(r) || hasBaseUserRestriction(r, userHandle));         }     }      /**      * Test that the given restriction can be set and cleared, then leave it set again.      */     protected void assertSetClearUserRestriction(String restriction) {         final boolean hadRestriction = mUserManager.hasUserRestriction(restriction);          assertOwnerRestriction(restriction, false);          // Set.  Shouldn't throw.         mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);          assertOwnerRestriction(restriction, true);         assertLayeredRestriction(restriction, true);          // Then clear.         assertClearUserRestriction(restriction);          assertLayeredRestriction(restriction, hadRestriction);          // Then set again.         mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);     }      /**      * Test that the given restriction can be cleared.  (and leave it cleared.)      */     protected void assertClearUserRestriction(String restriction) {         mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);          assertOwnerRestriction(restriction, false);     }      protected void assertClearDefaultRestrictions() {         for (String restriction : getDefaultEnabledRestrictions()) {             assertClearUserRestriction(restriction);         }     }      /**      * Test that the given restriction *cannot* be set (or clear).      */     protected void assertCannotSetUserRestriction(String restriction) {         final boolean hadRestriction = mUserManager.hasUserRestriction(restriction);          assertOwnerRestriction(restriction, false);          // Set should fail.         try {             mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);             fail(""Restriction="" + restriction);         } catch (SecurityException e) {             assertTrue(""Restriction="" + restriction + "" Message was: "" + e.getMessage(),                     e.getMessage().contains(""cannot set user restriction""));         }          // Shouldn't have changed.         assertOwnerRestriction(restriction, false);         assertLayeredRestriction(restriction, hadRestriction);          // Clear should fail too.         try {             mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);             fail(""Restriction="" + restriction);         } catch (SecurityException e) {             assertTrue(""Restriction="" + restriction + "" Message was: "" + e.getMessage(),                     e.getMessage().contains(""cannot set user restriction""));         }          // Shouldn't have changed.         assertOwnerRestriction(restriction, false);         assertLayeredRestriction(restriction, hadRestriction);     }      /** For {@link #testSetAllRestrictions} */     protected abstract String[] getAllowedRestrictions();      /** For {@link #testSetAllRestrictions} */     protected abstract String[] getDisallowedRestrictions();      /** For {@link #testDefaultRestrictions()} */     protected abstract String[] getDefaultEnabledRestrictions();      /**      * Test restrictions that should be enabled by default      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferProfileOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferProfileOwnerIncomingTest.java"	""	"public void testTransferPoliciesAreRetainedAfterTransfer() {         int passwordLength = 123;         int passwordExpirationTimeout = 456;         assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));         assertTrue(mDevicePolicyManager.isProfileOwnerApp(mIncomingComponentName.getPackageName()));         assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));         assertTrue(mDevicePolicyManager.getCrossProfileCallerIdDisabled(mIncomingComponentName));         assertEquals(                 DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,                 mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));         assertEquals(                 passwordLength,                 mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));           DevicePolicyManager targetParentProfileInstance =                 mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);         if (mHasSecureLockScreen) {             assertEquals(                     passwordExpirationTimeout,                     targetParentProfileInstance.getPasswordExpirationTimeout(mIncomingComponentName));         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testNoPersistentPreferredActivityYieldsResolverActivity"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	"public void testNoPersistentPreferredActivityYieldsResolverActivity() {         sendExampleIntent();         SystemClock.sleep(5000);          // Default behavior: intent results in resolver activity, since there are two potential         // receivers. No intent is received.         synchronized(this) {             assertFalse(mReceivedConfirmationFrom1);             assertFalse(mReceivedConfirmationFrom2);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testAddPersistentPreferredActivityYieldsReceptionAtTarget"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	"public void testAddPersistentPreferredActivityYieldsReceptionAtTarget() {         addPersistentPreferredActivity();         sendExampleIntent();         SystemClock.sleep(5000);          // Persistent preferred activity present: intent should be received by activity 2.         synchronized(this) {             assertFalse(mReceivedConfirmationFrom1);             assertTrue(mReceivedConfirmationFrom2);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	"public void testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity() {         addPersistentPreferredActivity();         mDevicePolicyManager.clearPackagePersistentPreferredActivities(ADMIN_RECEIVER_COMPONENT,                 PACKAGE_NAME);          sendExampleIntent();         SystemClock.sleep(5000);          // Default behavior: intent results in resolver activity, since there are two potential         // receivers. No intent is received.         synchronized(this) {             assertFalse(mReceivedConfirmationFrom1);             assertFalse(mReceivedConfirmationFrom2);         }     }      public class ConfirmReceiver extends BroadcastReceiver {         @Override         public void onReceive(Context context, Intent intent) {             if (intent.getAction().equals(ExampleIntentReceivingActivity1.CONFIRM_ACTION)) {                 synchronized (PersistentIntentResolvingTest.this) {                     mReceivedConfirmationFrom1 = true;                 }             } else if (intent.getAction().equals(ExampleIntentReceivingActivity2                             .CONFIRM_ACTION)) {                 synchronized (PersistentIntentResolvingTest.this) {                     mReceivedConfirmationFrom2 = true;                 }             }         }     }      private void sendExampleIntent() {         Intent exampleIntent = new Intent(EXAMPLE_ACTION);         exampleIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         mContext.startActivity(exampleIntent);     }      private void addPersistentPreferredActivity() {         IntentFilter filter = new IntentFilter();         filter.addAction(EXAMPLE_ACTION);         filter.addCategory(Intent.CATEGORY_DEFAULT);         ComponentName targetComponent = new ComponentName(PACKAGE_NAME,                 ExampleIntentReceivingActivity2.class.getName());         mDevicePolicyManager.addPersistentPreferredActivity(ADMIN_RECEIVER_COMPONENT, filter,                 targetComponent);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testCanSetModeDespiteUserRestriction"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	"public void testCanSetModeDespiteUserRestriction() {         // First set a specific host and assert that applied.         callSetGlobalPrivateDnsHostModeExpectingResult(                 VALID_PRIVATE_DNS_HOST,                 DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);         assertThat(                 mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(                 PRIVATE_DNS_MODE_PROVIDER_HOSTNAME);          // Set a user restriction         setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, true);          // Next, set the mode to automatic and confirm that has applied.         callSetGlobalPrivateDnsOpportunisticModeExpectingResult(                 DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);          assertThat(                 mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(                 PRIVATE_DNS_MODE_OPPORTUNISTIC);         assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testCanOpenCamera"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	"public void testCanOpenCamera() throws Exception {         checkCanOpenCamera(true);     }      private void checkCanOpenCamera(boolean canOpen) throws Exception {         // If the device does not support a camera it will return an empty camera ID list.         if (mCameraManager.getCameraIdList() == null                 || mCameraManager.getCameraIdList().length == 0) {             return;         }         int retries = 10;         boolean successToOpen = !canOpen;         while (successToOpen != canOpen && retries > 0) {             retries--;             Thread.sleep(500);             successToOpen = CameraUtils                     .blockUntilOpenCamera(mCameraManager, mBackgroundHandler);         }         assertEquals(String.format(""Timed out waiting the value to change to %b (actual=%b)"",                 canOpen, successToOpen), canOpen, successToOpen);     }      private static final Set<String> PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS =             ImmutableSet.of(                     UserManager.DISALLOW_BLUETOOTH,                     UserManager.DISALLOW_BLUETOOTH_SHARING,                     UserManager.DISALLOW_CONFIG_BLUETOOTH,                     UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,                     UserManager.DISALLOW_CONFIG_LOCATION,                     UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,                     UserManager.DISALLOW_CONFIG_TETHERING,                     UserManager.DISALLOW_CONFIG_WIFI,                     UserManager.DISALLOW_CONTENT_CAPTURE,                     UserManager.DISALLOW_CONTENT_SUGGESTIONS,                     UserManager.DISALLOW_DATA_ROAMING,                     UserManager.DISALLOW_SAFE_BOOT,                     UserManager.DISALLOW_SHARE_LOCATION,                     UserManager.DISALLOW_SMS,                     UserManager.DISALLOW_USB_FILE_TRANSFER,                     UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,                     UserManager.DISALLOW_OUTGOING_CALLS,                     UserManager.DISALLOW_UNMUTE_MICROPHONE                     // This restriction disables ADB, so is not used in test.                     // UserManager.DISALLOW_DEBUGGING_FEATURES             );"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnership"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferOwnership() throws Exception {         if (!mHasFeature) {             return;         }          final boolean hasManagedProfile = (mUserId != mPrimaryUserId);         final String expectedManagementType = hasManagedProfile ? ""profile-owner"" : ""device-owner"";         assertMetricsLogged(getDevice(), () -> {             runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG, mOutgoingTestClassName,                     ""testTransferOwnership"", mUserId);         }, new DevicePolicyEventWrapper.Builder(EventId.TRANSFER_OWNERSHIP_VALUE)                 .setAdminPackageName(TRANSFER_OWNER_OUTGOING_PKG)                 .setStrings(TRANSFER_OWNER_INCOMING_PKG, expectedManagementType)                 .build());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferSameAdmin"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferSameAdmin() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferSameAdmin"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferInvalidTarget"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferInvalidTarget() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(INVALID_TARGET_APK, mUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferInvalidTarget"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferPolicies"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferPolicies() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferWithPoliciesOutgoing"", mUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,                 mIncomingTestClassName,                 ""testTransferPoliciesAreRetainedAfterTransfer"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnershipChangedBroadcast"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferOwnershipChangedBroadcast() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferOwnershipChangedBroadcast"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferCompleteCallback"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferCompleteCallback() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferOwnership"", mUserId);          waitForBroadcastIdle();          runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,                 mIncomingTestClassName,                 ""testTransferCompleteCallbackIsCalled"", mUserId);     }      protected void setupTestParameters(int userId, String outgoingTestClassName,             String incomingTestClassName) {         mUserId = userId;         mOutgoingTestClassName = outgoingTestClassName;         mIncomingTestClassName = incomingTestClassName;     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnershipNoMetadata"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferOwnershipNoMetadata() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferOwnershipNoMetadata"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsTransferBundlePersisted"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testIsTransferBundlePersisted() throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferOwnershipBundleSaved"", mUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,                 mIncomingTestClassName,                 ""testTransferOwnershipBundleLoaded"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testGetTransferOwnershipBundleOnlyCalledFromAdmin"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testGetTransferOwnershipBundleOnlyCalledFromAdmin()             throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testGetTransferOwnershipBundleOnlyCalledFromAdmin"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testBundleEmptyAfterTransferWithNullBundle"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testBundleEmptyAfterTransferWithNullBundle() throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testTransferOwnershipNullBundle"", mUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,                 mIncomingTestClassName,                 ""testTransferOwnershipEmptyBundleLoaded"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsBundleNullNoTransfer"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testIsBundleNullNoTransfer() throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testIsBundleNullNoTransfer"", mUserId);     }      protected int setupManagedProfileOnDeviceOwner(String apkName, String adminReceiverClassName)             throws Exception {         return setupManagedProfile(apkName, adminReceiverClassName);     }      protected int setupManagedProfile(String apkName, String adminReceiverClassName)             throws Exception {         final int userId = createManagedProfile(mPrimaryUserId);         installAppAsUser(apkName, userId);         if (!setProfileOwner(adminReceiverClassName, userId, false)) {             removeAdmin(TRANSFER_OWNER_OUTGOING_TEST_RECEIVER, userId);             getDevice().uninstallPackage(TRANSFER_OWNER_OUTGOING_PKG);             fail(""Failed to set device owner"");             return -1;         }         startUserAndWait(userId);         return userId;     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTargetDeviceAdminServiceBound"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTargetDeviceAdminServiceBound() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             mOutgoingTestClassName,             ""testTransferOwnership"", mUserId);         assertServiceRunning(INCOMING_ADMIN_SERVICE_FULL_NAME);     }      private void assertServiceRunning(String serviceName) throws DeviceNotAvailableException {         final String result = getDevice().executeShellCommand(                 String.format(""dumpsys activity services %s"", serviceName));         assertThat(result).contains(""app=ProcessRecord"");     }      protected void setSameAffiliationId(int profileUserId, String testClassName)         throws Exception {         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             testClassName,             ""testSetAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             testClassName,             ""testSetAffiliationId1"", profileUserId);     }      protected void assertAffiliationIdsAreIntact(int profileUserId,         String testClassName) throws Exception {         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,             testClassName,             ""testIsAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,             testClassName,             ""testIsAffiliationId1"", profileUserId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferSameAdmin"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferSameAdmin() {         PersistableBundle b = new PersistableBundle();         assertThrows(                 IllegalArgumentException.class,                 () -> {                     mDevicePolicyManager.transferOwnership(                             mOutgoingComponentName, mOutgoingComponentName, b);                 });     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferInvalidTarget"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferInvalidTarget() {         PersistableBundle b = new PersistableBundle();         assertThrows(                 IllegalArgumentException.class,                 () -> {                     mDevicePolicyManager.transferOwnership(mOutgoingComponentName,                             INVALID_TARGET_COMPONENT, b);                 });     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferOwnershipChangedBroadcast"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferOwnershipChangedBroadcast() throws Throwable {         BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(mContext,                 mOwnerChangedBroadcastAction);         try {             receiver.register();             PersistableBundle b = new PersistableBundle();             mDevicePolicyManager.transferOwnership(mOutgoingComponentName,                     INCOMING_COMPONENT_NAME, b);             Intent intent = receiver.awaitForBroadcast();             assertNotNull(intent);         } finally {             receiver.unregisterQuietly();         }     }      abstract public void testTransferOwnership() throws Throwable;"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferOwnershipNullBundle"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferOwnershipNullBundle() throws Throwable {         mDevicePolicyManager.transferOwnership(mOutgoingComponentName,                 INCOMING_COMPONENT_NAME, null);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferOwnershipNoMetadata"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferOwnershipNoMetadata() throws Throwable {         PersistableBundle b = new PersistableBundle();         assertThrows(                 IllegalArgumentException.class,                 () -> {                     mDevicePolicyManager.transferOwnership(mOutgoingComponentName,                             INCOMING_NO_METADATA_COMPONENT_NAME, b);                 });     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testTransferOwnershipBundleSaved"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testTransferOwnershipBundleSaved() throws Throwable {         PersistableBundle b = new PersistableBundle();         b.putBoolean(ARE_PARAMETERS_SAVED, true);         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testGetTransferOwnershipBundleOnlyCalledFromAdmin"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testGetTransferOwnershipBundleOnlyCalledFromAdmin() throws Throwable {         PersistableBundle b = new PersistableBundle();         b.putBoolean(ARE_PARAMETERS_SAVED, true);         mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);         assertThrows(SecurityException.class, mDevicePolicyManager::getTransferOwnershipBundle);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testIsBundleNullNoTransfer"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	"public void testIsBundleNullNoTransfer() throws Throwable {         assertNull(mDevicePolicyManager.getTransferOwnershipBundle());     }      private void setUserRestriction(String restriction, boolean add) {         DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);         if (add) {             dpm.addUserRestriction(mOutgoingComponentName, restriction);         } else {             dpm.clearUserRestriction(mOutgoingComponentName, restriction);         }     }      private void setAffiliationId(String id) {         ComponentName admin = mOutgoingComponentName;         DevicePolicyManager dpm = (DevicePolicyManager)                 mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);         Set<String> ids = Collections.singleton(id);         dpm.setAffiliationIds(admin, ids);         assertEquals(ids, dpm.getAffiliationIds(admin));     }      private static SharedPreferences getPrefs(Context context) {         return context.getSharedPreferences(SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);     }      private static void putBooleanPref(Context context, String key, boolean value) {         getPrefs(context).edit().putBoolean(key, value).apply();     }      protected static boolean getBooleanPref(Context context, String key) {         return getPrefs(context).getBoolean(key, false);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.transferowner.TransferDeviceOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"transfer"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferDeviceOwnerIncomingTest.java"	""	"public void testTransferPoliciesAreRetainedAfterTransfer() {         assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));         assertTrue(mDevicePolicyManager.isDeviceOwnerApp(mIncomingComponentName.getPackageName()));         assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));         assertEquals(Collections.singletonList(""test.package""),                 mDevicePolicyManager.getKeepUninstalledPackages(mIncomingComponentName));         assertEquals(                 DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,                 mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));         assertEquals(123, mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));         assertSystemPoliciesEqual(SystemUpdatePolicy.createPostponeInstallPolicy(),                 mDevicePolicyManager.getSystemUpdatePolicy());         assertThrows(SecurityException.class, () -> {             mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);         });     }      private void assertSystemPoliciesEqual(SystemUpdatePolicy policy1, SystemUpdatePolicy policy2) {         assertTrue(policy1.getPolicyType() == policy2.getPolicyType()                 && policy1.getInstallWindowStart() == policy2.getInstallWindowStart()                 && policy1.getInstallWindowEnd() == policy2.getInstallWindowEnd());     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	"com.android.cts.deviceandprofileowner.LockTaskTest"	"testActivityOptions_nonWhitelisted"	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	""	"authentication securely confirm transfer"	""	""	""	"confirm"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/LockTaskTest.java"	""	"public void testActivityOptions_nonWhitelisted() throws Exception {         try {             startLockTaskWithOptions(UTILITY_ACTIVITY);             fail();         } catch (SecurityException e) {             // pass         }     }      /**      * Checks that lock task mode is active and fails the test if it isn't.      */     private void assertLockTaskModeActive() throws Exception {         Utils.tryWaitForSuccess(() -> ActivityManager.LOCK_TASK_MODE_LOCKED                         == mActivityManager.getLockTaskModeState(),                 Duration.ofSeconds(2).toMillis()         );         assertTrue(mActivityManager.isInLockTaskMode());         assertEquals(ActivityManager.LOCK_TASK_MODE_LOCKED,                 mActivityManager.getLockTaskModeState());     }      /**      * Checks that lock task mode is not active and fails the test if it is.      */     private void assertLockTaskModeInactive() throws Exception {         Utils.tryWaitForSuccess(() -> ActivityManager.LOCK_TASK_MODE_NONE                         == mActivityManager.getLockTaskModeState(),                 Duration.ofSeconds(2).toMillis()         );         assertFalse(mActivityManager.isInLockTaskMode());         assertEquals(ActivityManager.LOCK_TASK_MODE_NONE, mActivityManager.getLockTaskModeState());     }      /**      * Call stopLockTask and finish on the LockTaskUtilityActivity.      *      * Verify that the activity is no longer running.      *      * If activityManager is not null then verify that the ActivityManager      * is no longer in lock task mode.      */     private void stopAndFinish(String className) throws Exception {         stopLockTask(className);         finishAndWait(className);         assertLockTaskModeInactive();         assertFalse(mIsActivityRunning);     }      /**      * Call finish on the LockTaskUtilityActivity and wait for      * onDestroy to be called.      */     private void finishAndWait(String className) throws InterruptedException {         synchronized (mActivityRunningLock) {             finish(className);             if (mIsActivityRunning) {                 mActivityRunningLock.wait(ACTIVITY_DESTROYED_TIMEOUT_MILLIS);             }         }     }      /**      * Wait for onResume to be called on the LockTaskUtilityActivity.      */     private void waitForResume() throws InterruptedException {         // It may take a moment for the resume to come in.         synchronized (mActivityResumedLock) {             if (!mIsActivityResumed) {                 mActivityResumedLock.wait(ACTIVITY_RESUMED_TIMEOUT_MILLIS);             }         }     }      /**      * Calls startLockTask on the LockTaskUtilityActivity      */     private void startLockTask(String className) throws InterruptedException {         Intent intent = getLockTaskUtility(className);         intent.putExtra(LockTaskUtilityActivity.START_LOCK_TASK, true);         startAndWait(intent);     }      /**      * Starts LockTaskUtilityActivity with {@link ActivityOptions#setLockTaskEnabled(boolean)}      */     private void startLockTaskWithOptions(String className) throws InterruptedException {         Intent intent = getLockTaskUtility(className);         Bundle options = ActivityOptions.makeBasic().setLockTaskEnabled(true).toBundle();         startAndWait(intent, options);     }      /**      * Calls stopLockTask on the LockTaskUtilityActivity      */     private void stopLockTask(String className) throws InterruptedException {         Intent intent = getLockTaskUtility(className);         intent.putExtra(LockTaskUtilityActivity.STOP_LOCK_TASK, true);         startAndWait(intent);     }      /**      * Calls finish on the LockTaskUtilityActivity      */     private void finish(String className) throws InterruptedException {         Intent intent = getLockTaskUtility(className);         intent.putExtra(LockTaskUtilityActivity.FINISH, true);         startAndWait(intent);     }      /**      * Sends a command intent to the LockTaskUtilityActivity and waits      * to receive the broadcast back confirming it has finished processing      * the command.      */     private void startAndWait(Intent intent) throws InterruptedException {         startAndWait(intent, null);     }      /**      * Same as {@link #startAndWait(Intent)}, but with additional {@link ActivityOptions}.      */     private void startAndWait(Intent intent, Bundle options) throws InterruptedException {         mIntentHandled = false;         synchronized (this) {             mContext.startActivity(intent, options);             // Give 20 secs to finish.             wait(ACTIVITY_RUNNING_TIMEOUT_MILLIS);             assertTrue(mIntentHandled);         }     }      /**      * Get basic intent that points at the LockTaskUtilityActivity.      *      * This intent includes the flags to make it act as single top.      */     private Intent getLockTaskUtility(String className) {         Intent intent = new Intent();         intent.setClassName(PACKAGE_NAME, className);         intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);         return intent;     }      /** Create an intent to launch {@link #RECEIVER_ACTIVITY_NAME}. */     private Intent createReceiverActivityIntent(boolean newTask, boolean shouldWait) {         final Intent intent = new Intent();         intent.setComponent(                 new ComponentName(RECEIVER_ACTIVITY_PACKAGE_NAME, RECEIVER_ACTIVITY_NAME));         intent.setAction(shouldWait ? ACTION_CREATE_AND_WAIT : ACTION_JUST_CREATE);         intent.setFlags(newTask ? Intent.FLAG_ACTIVITY_NEW_TASK : 0);         return intent;     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_enabled"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	"public void testSetStorageEncryption_enabled() {         if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {             return;         }         assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, true))             .isEqualTo(mIsPrimaryUser ? ENCRYPTION_STATUS_ACTIVE : ENCRYPTION_STATUS_UNSUPPORTED);         assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT))                 .isEqualTo(mIsPrimaryUser);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_disabled"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	"public void testSetStorageEncryption_disabled() {         if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {             return;         }         assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, false))             .isEqualTo(mIsPrimaryUser ? ENCRYPTION_STATUS_INACTIVE                     : ENCRYPTION_STATUS_UNSUPPORTED);         assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT)).isFalse();     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java"	""	"/*  *.  */ package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest;  import org.junit.Test;  public class ManagedProfileProvisioningTest extends BaseDevicePolicyTest {     private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";     private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";      private int mProfileUserId;     private int mParentUserId;      @Override     public void setUp() throws Exception {         super.setUp();          // We need multi user to be supported in order to create a profile of the user owner.         mHasFeature = mHasFeature && hasDeviceFeature(                 ""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             mParentUserId = mPrimaryUserId;             installAppAsUser(MANAGED_PROFILE_APK, mParentUserId);             mProfileUserId = 0;         }     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             if (mProfileUserId != 0) {                 removeUser(mProfileUserId);             }             // Remove the test app account: also done by uninstallPackage             getDevice().uninstallPackage(MANAGED_PROFILE_PKG);         }         super.tearDown();     }     @FlakyTest(bugId = 141747631)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningTest"	"testAccountMigration"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java"	""	"public void testAccountMigration() throws Exception {         if (!mHasFeature) {             return;         }          provisionManagedProfile();          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ProvisioningTest"",                 ""testAccountExist"", mProfileUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ProvisioningTest"",                 ""testAccountNotExist"", mParentUserId);     }      @FlakyTest(bugId = 141747631)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testClearPasswordWithTokenBeforeUnlock"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testClearPasswordWithTokenBeforeUnlock() throws Exception {         if (!mHasFeature || !mSupportsFbe || !mHasSecureLockScreen) {             return;         }          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",                 ""testSetupWorkProfile"", mProfileUserId);         lockProfile();         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",                 ""testClearPasswordBeforeUnlock"", mProfileUserId);         // Make sure profile has no password         verifyUserCredential("""", mProfileUserId);     }      /**      * Test password reset token is still functional after the primary user clears and      * re-adds back its device lock. This is to detect a regression where the work profile      * undergoes an untrusted credential reset (causing synthetic password to change, invalidating      * existing password reset token) if it has unified work challenge and the primary user clears      * the device lock.      */     @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testUnlockWorkProfile_deviceWidePassword"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testUnlockWorkProfile_deviceWidePassword() throws Exception {         if (!mHasFeature || !mSupportsFbe || !mHasSecureLockScreen) {             return;         }         try {             // Add a device password after the work profile has been created.             changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);             // Lock the profile with key eviction.             lockProfile();             // Turn on work profile, by unlocking the profile with the device password.             verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);              // Verify profile user is running unlocked by running a sanity test on the work profile.             installAppAsUser(SIMPLE_APP_APK, mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SanityTest"", mProfileUserId);         } finally {             // Clean up             changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);         }     }      @FlakyTest     @LargeTest     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testRebootDevice_unifiedPassword"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testRebootDevice_unifiedPassword() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // Waiting before rebooting prevents flakiness.         waitForBroadcastIdle();         changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);         try {             rebootAndWaitUntilReady();             verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);             waitForUserUnlock(mProfileUserId);             installAppAsUser(SIMPLE_APP_APK, mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SanityTest"", mProfileUserId);         } finally {             changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);             // Work-around for http://b/113866275 - password prompt being erroneously shown at the             // end.             pressPowerButton();         }     }      @LargeTest     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testRebootDevice_separatePasswords"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testRebootDevice_separatePasswords() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // Waiting before rebooting prevents flakiness.         waitForBroadcastIdle();         final String profilePassword = ""profile"";         final String primaryPassword = TEST_PASSWORD;         int managedProfileUserId = getFirstManagedProfileUserId();         changeUserCredential(                 profilePassword, /* oldCredential= */ null, managedProfileUserId);         changeUserCredential(primaryPassword, /* oldCredential= */ null, mPrimaryUserId);         try {             rebootAndWaitUntilReady();             verifyUserCredential(profilePassword, managedProfileUserId);             verifyUserCredential(primaryPassword, mPrimaryUserId);             installAppAsUser(SIMPLE_APP_APK, mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SanityTest"", mProfileUserId);         } finally {             changeUserCredential(                     /* newCredential= */ null, profilePassword, managedProfileUserId);             changeUserCredential(/* newCredential= */ null, primaryPassword, mPrimaryUserId);             // Work-around for http://b/113866275 - password prompt being erroneously shown at the             // end.             pressPowerButton();         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest; import android.platform.test.annotations.LargeTest;  import com.android.cts.devicepolicy.annotations.PermissionsTest;  import org.junit.Test;  /**  * Set of tests for managed profile owner use cases that also apply to device owners.  * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTestApi25.  */ public class MixedManagedProfileOwnerTestApi25 extends DeviceAndProfileOwnerTestApi25 {      private int mParentUserId = -1;      @Override     public void setUp() throws Exception {         super.setUp();          // We need managed users to be supported in order to create a profile of the user owner.         mHasFeature &= hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             mParentUserId = mPrimaryUserId;             createManagedProfile();         }     }      private void createManagedProfile() throws Exception {         mUserId = createManagedProfile(mParentUserId);         switchUser(mParentUserId);         startUserAndWait(mUserId);          installAppAsUser(DEVICE_ADMIN_APK, mUserId);         setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);         startUserAndWait(mUserId);     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             removeUser(mUserId);         }         super.tearDown();     }      @Override     @PermissionsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileIntentFilters"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	"public void testCrossProfileIntentFilters() throws Exception {         if (!mHasFeature) {             return;         }         // Set up activities: ManagedProfileActivity will only be enabled in the managed profile and         // PrimaryUserActivity only in the primary one         disableActivityForUser(""ManagedProfileActivity"", mParentUserId);         disableActivityForUser(""PrimaryUserActivity"", mProfileUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                 MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"", mProfileUserId);          if (isStatsdEnabled(getDevice())) {             assertMetricsLogged(getDevice(), () -> {                 runDeviceTestsAsUser(                         MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"",                         ""testAddCrossProfileIntentFilter_all"", mProfileUserId);             }, new DevicePolicyEventWrapper.Builder(ADD_CROSS_PROFILE_INTENT_FILTER_VALUE)                     .setAdminPackageName(MANAGED_PROFILE_PKG)                     .setInt(1)                     .setStrings(""com.android.cts.managedprofile.ACTION_TEST_ALL_ACTIVITY"")                     .build());         }          // Set up filters from primary to managed profile         String command = ""am start -W --user "" + mProfileUserId + "" "" + MANAGED_PROFILE_PKG                 + ""/.PrimaryUserFilterSetterActivity"";         LogUtil.CLog.d(""Output for command "" + command + "": ""                 + getDevice().executeShellCommand(command));         runDeviceTestsAsUser(                 MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".PrimaryUserTest"", mParentUserId);         // TODO: Test with startActivity     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileWidgets"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	"public void testCrossProfileWidgets() throws Exception {         if (!mHasFeature) {             return;         }          try {             installAppAsUser(WIDGET_PROVIDER_APK, USER_ALL);             getDevice().executeShellCommand(""appwidget grantbind --user "" + mParentUserId                     + "" --package "" + WIDGET_PROVIDER_PKG);             setIdleWhitelist(WIDGET_PROVIDER_PKG, true);             startWidgetHostService();              String commandOutput = changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,                     ""add-cross-profile-widget"", mProfileUserId);             assertTrue(""Command was expected to succeed "" + commandOutput,                     commandOutput.contains(""Status: ok""));              runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileWidgetTest"",                     ""testCrossProfileWidgetProviderAdded"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                     "".CrossProfileWidgetPrimaryUserTest"",                     ""testHasCrossProfileWidgetProvider_true"", mParentUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                     "".CrossProfileWidgetPrimaryUserTest"",                     ""testHostReceivesWidgetUpdates_true"", mParentUserId);              commandOutput = changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,                     ""remove-cross-profile-widget"", mProfileUserId);             assertTrue(""Command was expected to succeed "" + commandOutput,                     commandOutput.contains(""Status: ok""));              runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileWidgetTest"",                     ""testCrossProfileWidgetProviderRemoved"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                     "".CrossProfileWidgetPrimaryUserTest"",                     ""testHasCrossProfileWidgetProvider_false"", mParentUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                     "".CrossProfileWidgetPrimaryUserTest"",                     ""testHostReceivesWidgetUpdates_false"", mParentUserId);         } finally {             changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG, ""remove-cross-profile-widget"",                     mProfileUserId);             getDevice().uninstallPackage(WIDGET_PROVIDER_PKG);         }     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testDisallowSharingIntoPersonalFromProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	"public void testDisallowSharingIntoPersonalFromProfile() throws Exception {         if (!mHasFeature) {             return;         }         // Set up activities: PrimaryUserActivity will only be enabled in the personal user         // This activity is used to find out the ground truth about the system's cross profile         // intent forwarding activity.         disableActivityForUser(""PrimaryUserActivity"", mProfileUserId);          // Tests from the profile side         runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                 "".DisallowSharingIntoProfileTest"", ""testSharingFromProfile"", mProfileUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ProvisioningTest"	"PersistableBundle"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"/*  *.  */ package com.android.cts.managedprofile;  import static android.app.admin.DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_SKIP_ENCRYPTION;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import android.accounts.Account; import android.accounts.AccountManager; import android.app.admin.DeviceAdminReceiver; import android.app.admin.DevicePolicyManager; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.SharedPreferences; import android.os.PersistableBundle; import android.util.Log;  import androidx.test.InstrumentationRegistry; import androidx.test.filters.SmallTest;  import com.android.compatibility.common.util.devicepolicy.provisioning.SilentProvisioningTestManager;  import org.junit.Before; import org.junit.Test;  @SmallTest public class ProvisioningTest {     private static final String TAG = ProvisioningTest.class.getSimpleName();      private static final String SHARED_PREFERENCE_FILE_NAME = ""shared-preferences-file-name"";      private static final PersistableBundle ADMIN_EXTRAS_BUNDLE = new PersistableBundle();     private static final String ADMIN_EXTRAS_BUNDLE_KEY_1 = ""KEY_1"";     private static final String ADMIN_EXTRAS_BUNDLE_VALUE_1 = ""VALUE_1"";     static {         ADMIN_EXTRAS_BUNDLE.putString(ADMIN_EXTRAS_BUNDLE_KEY_1, ADMIN_EXTRAS_BUNDLE_VALUE_1);     }      public static final String KEY_PROVISIONING_SUCCESSFUL_RECEIVED =             ""key-provisioning-successful-received"";      private static final ComponentName ADMIN_RECEIVER_COMPONENT = new ComponentName(             ProvisioningAdminReceiver.class.getPackage().getName(),             ProvisioningAdminReceiver.class.getName());      public static class ProvisioningAdminReceiver extends DeviceAdminReceiver {         @Override         public void onProfileProvisioningComplete(Context context, Intent intent) {             super.onProfileProvisioningComplete(context, intent);             // Enabled profile             getManager(context).setProfileName(ADMIN_RECEIVER_COMPONENT, ""Managed Profile"");             getManager(context).setProfileEnabled(ADMIN_RECEIVER_COMPONENT);             Log.i(TAG, ""onProfileProvisioningComplete"");              saveBundle(context, intent.getParcelableExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE));         }     }      private Context mContext;     private DevicePolicyManager mDpm;      @Before     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testProvisionManagedProfile_accountCopy"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testProvisionManagedProfile_accountCopy() throws InterruptedException {         provisionManagedProfile(createBaseProvisioningIntent()                 .putExtra(EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION, true));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testAccountNotExist"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testAccountNotExist() {         AccountManager am = AccountManager.get(mContext);         assertTrue(""test account still exists after account migration"",                 am.getAccountsByType(AccountAuthenticator.ACCOUNT_TYPE).length == 0);     }      private Intent createBaseProvisioningIntent() {         return new Intent(ACTION_PROVISION_MANAGED_PROFILE)                 .putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME, ADMIN_RECEIVER_COMPONENT)                 .putExtra(EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)                 .putExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE, ADMIN_EXTRAS_BUNDLE)                 .putExtra(EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE, addAndGetTestAccount());     }      private void provisionManagedProfile(Intent intent) throws InterruptedException {         SilentProvisioningTestManager provisioningManager = new SilentProvisioningTestManager(mContext);         assertTrue(provisioningManager.startProvisioningAndWait(intent));         Log.i(TAG, ""managed profile provisioning successful"");     }      private Account addAndGetTestAccount() {         Account account = AccountAuthenticator.TEST_ACCOUNT;         AccountManager.get(mContext).addAccountExplicitly(account, null, null);         return account;     }      private static void saveBundle(Context context, PersistableBundle bundle) {         if (bundle == null) {             Log.e(TAG, ""null saveBundle"");             return;         }          getSharedPreferences(context).edit()                 .putString(ADMIN_EXTRAS_BUNDLE_KEY_1, bundle.getString(ADMIN_EXTRAS_BUNDLE_KEY_1))                 .commit();     }      private static PersistableBundle loadBundle(Context context) {         SharedPreferences pref = getSharedPreferences(context);         PersistableBundle bundle = new PersistableBundle();         bundle.putString(ADMIN_EXTRAS_BUNDLE_KEY_1,                 pref.getString(ADMIN_EXTRAS_BUNDLE_KEY_1, null));         return bundle;     }      public static SharedPreferences getSharedPreferences(Context context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import org.junit.Test;  import java.util.Collections;  /**  * Set of tests for LauncherApps attempting to access a non-profiles  * apps.  */ public class LauncherAppsMultiUserTest extends BaseLauncherAppsTest {      private int mSecondaryUserId;     private String mSecondaryUserSerialNumber;      private boolean mMultiUserSupported;      @Override     public void setUp() throws Exception {         super.setUp();         // We need multi user to be supported in order to create a secondary user         // and api level 21 to support LauncherApps         mMultiUserSupported = getMaxNumberOfUsersSupported() > 1 && getDevice().getApiLevel() >= 21;          if (mMultiUserSupported) {             removeTestUsers();             uninstallTestApps();             installTestApps(mPrimaryUserId);             // Create a secondary user.             mSecondaryUserId = createUser();             mSecondaryUserSerialNumber = Integer.toString(getUserSerialNumber(mSecondaryUserId));             startUser(mSecondaryUserId);         }     }      @Override     public void tearDown() throws Exception {         if (mMultiUserSupported) {             removeUser(mSecondaryUserId);             uninstallTestApps();         }         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"testGetActivitiesForNonProfileFails"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	"public void testGetActivitiesForNonProfileFails() throws Exception {         if (!mMultiUserSupported) {             return;         }         installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS,                 ""testGetActivitiesForUserFails"",                 mPrimaryUserId,                 Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"testNoLauncherCallbackPackageAddedSecondaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	"public void testNoLauncherCallbackPackageAddedSecondaryUser() throws Exception {         if (!mMultiUserSupported) {             return;         }         startCallbackService(mPrimaryUserId);         installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS,                 ""testNoPackageAddedCallbackForUser"",                 mPrimaryUserId,                 Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest;  import com.android.tradefed.log.LogUtil.CLog;  import org.junit.Test;  import java.util.Collections;  /**  * Set of tests for LauncherApps with managed profiles.  */ public class LauncherAppsProfileTest extends BaseLauncherAppsTest {      private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";     private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";     private static final String ADMIN_RECEIVER_TEST_CLASS =             MANAGED_PROFILE_PKG + "".BaseManagedProfileTest$BasicAdminReceiver"";     private static final String LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK =             ""CtsHasLauncherActivityApp.apk"";      private int mProfileUserId;     private int mParentUserId;     private String mProfileSerialNumber;     private String mMainUserSerialNumber;      @Override     public void setUp() throws Exception {         super.setUp();         mHasFeature = mHasFeature && hasDeviceFeature(""android.software.managed_users"");         if (mHasFeature) {             removeTestUsers();             // Create a managed profile             mParentUserId = mPrimaryUserId;             mProfileUserId = createManagedProfile(mParentUserId);             installAppAsUser(MANAGED_PROFILE_APK, mProfileUserId);             setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                     mProfileUserId);             mProfileSerialNumber = Integer.toString(getUserSerialNumber(mProfileUserId));             mMainUserSerialNumber = Integer.toString(getUserSerialNumber(mParentUserId));             startUserAndWait(mProfileUserId);              // Install test APK on primary user and the managed profile.             installTestApps(USER_ALL);         }     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             removeUser(mProfileUserId);             uninstallTestApps();             getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);         }         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testGetActivitiesWithProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"public void testGetActivitiesWithProfile() throws Exception {         if (!mHasFeature) {             return;         }         // Install app for all users.         installAppAsUser(SIMPLE_APP_APK, mParentUserId);         installAppAsUser(SIMPLE_APP_APK, mProfileUserId);          // Run tests to check SimpleApp exists in both profile and main user.         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));          // Run the same test on the managed profile.  This still works.         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",                 mProfileUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));          // This tries to access main prorfile from work profiel, which is not allowed.         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testAccessPrimaryProfileFromManagedProfile"",                 mProfileUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));          // Test for getProfiles.         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testGetProfiles_fromMainProfile"",                 mParentUserId);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testGetProfiles_fromManagedProfile"",                 mProfileUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testProfileOwnerAppHiddenInPrimaryProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"public void testProfileOwnerAppHiddenInPrimaryProfile() throws Exception {         if (!mHasFeature) {             return;         }         String command = ""pm disable --user "" + mParentUserId + "" "" + MANAGED_PROFILE_PKG                 + ""/.PrimaryUserFilterSetterActivity"";         CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS, ""testProfileOwnerInjectedActivityNotFound"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageAddedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"public void testLauncherCallbackPackageAddedProfile() throws Exception {         if (!mHasFeature) {             return;         }         startCallbackService(mPrimaryUserId);         installAppAsUser(SIMPLE_APP_APK, mProfileUserId);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS,                 ""testPackageAddedCallbackForUser"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageRemovedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"public void testLauncherCallbackPackageRemovedProfile() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SIMPLE_APP_APK, mProfileUserId);         startCallbackService(mPrimaryUserId);         getDevice().uninstallPackage(SIMPLE_APP_PKG);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS,                 ""testPackageRemovedCallbackForUser"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageChangedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	"public void testLauncherCallbackPackageChangedProfile() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SIMPLE_APP_APK, mProfileUserId);         startCallbackService(mPrimaryUserId);         installAppAsUser(SIMPLE_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true,                 mProfileUserId);         runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,                 LAUNCHER_TESTS_CLASS,                 ""testPackageChangedCallbackForUser"",                 mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testOwnerChangedBroadcast"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	"public void testOwnerChangedBroadcast() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(DEVICE_OWNER_APK, mPrimaryUserId);         try {             installAppAsUser(INTENT_RECEIVER_APK, mPrimaryUserId);              String testClass = INTENT_RECEIVER_PKG + "".OwnerChangedBroadcastTest"";              // Running this test also gets the intent receiver app out of the stopped state, so it             // can receive broadcast intents.             runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,                     ""testOwnerChangedBroadcastNotReceived"", mPrimaryUserId);              // Setting the device owner should send the owner changed broadcast.             assertTrue(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId,                     /*expectFailure*/ false));              // Wait broadcast idle to ensure the owner changed broadcast has been sent.             waitForBroadcastIdle();              runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,                     ""testOwnerChangedBroadcastReceived"", mPrimaryUserId);         } finally {             getDevice().uninstallPackage(INTENT_RECEIVER_PKG);             assertTrue(""Failed to remove device owner."",                     removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId));         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenSecondaryUserPresent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	"public void testCannotSetDeviceOwnerWhenSecondaryUserPresent() throws Exception {         if (!mHasFeature || getMaxNumberOfUsersSupported() < 2) {             return;         }         int userId = -1;         installAppAsUser(DEVICE_OWNER_APK, mPrimaryUserId);         try {             userId = createUser();             assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId,                     /*expectFailure*/ true));         } finally {             removeUser(userId);             // make sure we clean up in case we succeeded in setting the device owner             removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId);         }     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenAccountPresent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	"public void testCannotSetDeviceOwnerWhenAccountPresent() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(ACCOUNT_MANAGEMENT_APK, mPrimaryUserId);         installAppAsUser(DEVICE_OWNER_APK, mPrimaryUserId);         try {             runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",                     ""testAddAccountExplicitly"", mPrimaryUserId);             assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId,                     /*expectFailure*/ true));         } finally {             // make sure we clean up in case we succeeded in setting the device owner             removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mPrimaryUserId);             runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",                     ""testRemoveAccountExplicitly"", mPrimaryUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testIsProvisioningAllowed"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	"public void testIsProvisioningAllowed() throws Exception {         // Must install the apk since the test runs in the DO apk.         installAppAsUser(DEVICE_OWNER_APK, mPrimaryUserId);         try {             // When CTS runs, setupwizard is complete. Expects it has to return false as DO can             // only be provisioned before setupwizard is completed.              runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PreDeviceOwnerTest"",                     ""testIsProvisioningAllowedFalse"", /* deviceOwnerUserId */ 0);         } finally {             getDevice().uninstallPackage(DEVICE_OWNER_PKG);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotAddManagedProfileWithDeviceOwner"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	"public void testCannotAddManagedProfileWithDeviceOwner() throws Exception {         if (!mHasFeature) {             return;         }          assertCannotCreateManagedProfile(mPrimaryUserId);     }      /**      * DISABLED: Test currently disabled because of a bug in managed provisioning.      * TODO: Re-enable once b/146048940 is fixed.      * Same as {@link #testCannotAddManagedProfileWithDeviceOwner} except      * creating managed profile through ManagedProvisioning like normal flow      */     @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testBindDeviceAdminServiceAsUser_secondaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	"public void testBindDeviceAdminServiceAsUser_secondaryUser() throws Exception {         if (!mHasFeature || !canCreateAdditionalUsers(1)) {             return;         }         int secondaryUserId = setupManagedSecondaryUser();          installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);         installAppAsUser(COMP_DPC_APK2, secondaryUserId);          // Shouldn't be possible to bind to each other, as they are not affiliated.         verifyBindDeviceAdminServiceAsUserFails(secondaryUserId);          // Set the same affiliation ids, and check that DO and PO can now bind to each other.         setSameAffiliationId(secondaryUserId);         verifyBindDeviceAdminServiceAsUser(secondaryUserId);     }      @FlakyTest(bugId = 141161038)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotAddProfileIfRestrictionSet"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	"public void testCannotAddProfileIfRestrictionSet() throws Exception {         if (!mHasFeature) {             return;         }         // by default, disallow add managed profile users restriction is set.         assertCannotCreateManagedProfile(mPrimaryUserId);     }      private void sendWipeProfileBroadcast(int userId) throws Exception {         final String cmd = ""am broadcast --receiver-foreground --user "" + userId                 + "" -a com.android.cts.comp.WIPE_DATA""                 + "" com.android.cts.comp/.WipeDataReceiver"";         getDevice().executeShellCommand(cmd);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testNetworkAndSecurityLoggingAvailableIfAffiliated"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	"public void testNetworkAndSecurityLoggingAvailableIfAffiliated() throws Exception {         if (!mHasFeature) {             return;         }          if (!canCreateAdditionalUsers(2)) {             return;         }         // If secondary users are allowed, create an affiliated one, to check that this still         // works if having both an affiliated user and an affiliated managed profile.         final int secondaryUserId = setupManagedSecondaryUser();          runDeviceTestsAsUser(                 COMP_DPC_PKG,                 DEVICE_WIDE_LOGGING_TEST,                 ""testEnablingNetworkAndSecurityLogging"",                 mPrimaryUserId);         try {             // No affiliation ids have been set on the profile, the features shouldn't be available.             runDeviceTestsAsUser(                     COMP_DPC_PKG,                     DEVICE_WIDE_LOGGING_TEST,                     ""testRetrievingLogsThrowsSecurityException"",                     mPrimaryUserId);              // Affiliate the DO and the secondary user.             setSameAffiliationId(secondaryUserId);             runDeviceTestsAsUser(                     COMP_DPC_PKG,                     DEVICE_WIDE_LOGGING_TEST,                     ""testRetrievingLogsDoesNotThrowException"",                     mPrimaryUserId);              setDifferentAffiliationId(secondaryUserId);             runDeviceTestsAsUser(                     COMP_DPC_PKG,                     DEVICE_WIDE_LOGGING_TEST,                     ""testRetrievingLogsThrowsSecurityException"",                     mPrimaryUserId);         } finally {             runDeviceTestsAsUser(                 COMP_DPC_PKG,                 DEVICE_WIDE_LOGGING_TEST,                 ""testDisablingNetworkAndSecurityLogging"",                 mPrimaryUserId);         }     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testRequestBugreportAvailableIfAffiliated"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	"public void testRequestBugreportAvailableIfAffiliated() throws Exception {         if (!mHasFeature) {             return;         }          if (!canCreateAdditionalUsers(2)) {             return;         }          final int secondaryUserId = setupManagedSecondaryUser();          // No affiliation ids have been set on the secondary user, the feature shouldn't be         // available.         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 DEVICE_WIDE_LOGGING_TEST,                 ""testRequestBugreportThrowsSecurityException"",                 mPrimaryUserId);          // Affiliate the DO and the secondary user.         setSameAffiliationId(secondaryUserId);         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 DEVICE_WIDE_LOGGING_TEST,                 ""testRequestBugreportDoesNotThrowException"",                 mPrimaryUserId);          setDifferentAffiliationId(secondaryUserId, COMP_DPC_PKG);         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 DEVICE_WIDE_LOGGING_TEST,                 ""testRequestBugreportThrowsSecurityException"",                 mPrimaryUserId);     }      private void verifyBindDeviceAdminServiceAsUser(int profileOwnerUserId) throws Exception {         // Installing a non managing app (neither device owner nor profile owner).         installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);         installAppAsUser(COMP_DPC_APK2, profileOwnerUserId);          // Testing device owner -> profile owner.         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,                 mPrimaryUserId);         // Testing profile owner -> device owner.         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,                 profileOwnerUserId);     }      private void verifyBindDeviceAdminServiceAsUserFails(int profileOwnerUserId) throws Exception {         // Installing a non managing app (neither device owner nor profile owner).         installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);         installAppAsUser(COMP_DPC_APK2, profileOwnerUserId);          // Testing device owner -> profile owner.         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 BIND_DEVICE_ADMIN_SERVICE_FAILS_TEST,                 mPrimaryUserId);         // Testing profile owner -> device owner.         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 BIND_DEVICE_ADMIN_SERVICE_FAILS_TEST,                 profileOwnerUserId);     }      private void setSameAffiliationId(             int profileOwnerUserId, String profileOwnerPackage) throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 AFFILIATION_TEST,                 ""testSetAffiliationId1"",                 mPrimaryUserId);         runDeviceTestsAsUser(                 profileOwnerPackage,                 AFFILIATION_TEST,                 ""testSetAffiliationId1"",                 profileOwnerUserId);     }      private void setSameAffiliationId(int profileOwnerUserId) throws Exception {         setSameAffiliationId(profileOwnerUserId, COMP_DPC_PKG);     }      private void setDifferentAffiliationId(             int profileOwnerUserId, String profileOwnerPackage) throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 AFFILIATION_TEST,                 ""testSetAffiliationId1"",                 mPrimaryUserId);         runDeviceTestsAsUser(                 profileOwnerPackage,                 AFFILIATION_TEST,                 ""testSetAffiliationId2"",                 profileOwnerUserId);     }      private void setDifferentAffiliationId(int profileOwnerUserId) throws Exception {         setDifferentAffiliationId(profileOwnerUserId, COMP_DPC_PKG);     }      private void assertProvisionManagedProfileNotAllowed(String packageName) throws Exception {         runDeviceTestsAsUser(                 packageName,                 MANAGEMENT_TEST,                 ""testProvisionManagedProfileNotAllowed"",                 mPrimaryUserId);     }      /** Returns the user id of the newly created managed profile */     private int setupManagedProfile(String apkName, String packageName,             String adminReceiverClassName) throws Exception {         final int userId = createManagedProfile(mPrimaryUserId);         installAppAsUser(apkName, userId);         setProfileOwnerOrFail(adminReceiverClassName, userId);         startUserAndWait(userId);         runDeviceTestsAsUser(                 packageName,                 MANAGEMENT_TEST,                 ""testIsManagedProfile"",                 userId);         return userId;     }      /** Returns the user id of the newly created secondary user */     private int setupManagedSecondaryUser() throws Exception {         assertTrue(canCreateAdditionalUsers(1));          runDeviceTestsAsUser(                 COMP_DPC_PKG,                 MANAGEMENT_TEST,                 ""testCreateSecondaryUser"",                 mPrimaryUserId);         List<Integer> newUsers = getUsersCreatedByTests();         assertEquals(1, newUsers.size());         int secondaryUserId = newUsers.get(0);         getDevice().startUser(secondaryUserId, /* waitFlag= */ true);         return secondaryUserId;     }      /** Returns the user id of the newly created secondary user */     private int provisionCorpOwnedManagedProfile() throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 MANAGED_PROFILE_PROVISIONING_TEST,                 ""testProvisioningCorpOwnedManagedProfile"",                 mPrimaryUserId);         return getFirstManagedProfileUserId();     }      /**      * Add {@link android.os.UserManager#DISALLOW_REMOVE_USER}.      */     private void addDisallowRemoveUserRestriction() throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 USER_RESTRICTION_TEST,                 ""testAddDisallowRemoveUserRestriction"",                 mPrimaryUserId);     }      /**      * Clear {@link android.os.UserManager#DISALLOW_REMOVE_USER}.      */     private void clearDisallowRemoveUserRestriction() throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 USER_RESTRICTION_TEST,                 ""testClearDisallowRemoveUserRestriction"",                 mPrimaryUserId);     }      private void assertOtherProfilesEqualsBindTargetUsers(int otherProfileUserId) throws Exception {         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 MANAGEMENT_TEST,                 ""testOtherProfilesEqualsBindTargetUsers"",                 mPrimaryUserId);         runDeviceTestsAsUser(                 COMP_DPC_PKG,                 MANAGEMENT_TEST,                 ""testOtherProfilesEqualsBindTargetUsers"",                 otherProfileUserId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ProfileOwnerTest"	"testBackupServiceEnabling"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTest.java"	""	"public void testBackupServiceEnabling() throws Exception {         final boolean hasBackupService = getDevice().hasFeature(FEATURE_BACKUP);         // The backup service cannot be enabled if the backup feature is not supported.         if (!mHasFeature || !hasBackupService) {             return;         }         executeProfileOwnerTest(""BackupServicePoliciesTest"");     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             assertTrue(""Failed to remove profile owner."",                     removeAdmin(PROFILE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId));             getDevice().uninstallPackage(PROFILE_OWNER_PKG);         }          super.tearDown();     }      private void executeProfileOwnerTest(String testClassName) throws Exception {         if (!mHasFeature) {             return;         }         String testClass = PROFILE_OWNER_PKG + ""."" + testClassName;         runDeviceTestsAsUser(PROFILE_OWNER_PKG, testClass, mPrimaryUserId);     }      protected void executeProfileOwnerTestMethod(String className, String testName)             throws Exception {         runDeviceTestsAsUser(PROFILE_OWNER_PKG, className, testName, mUserId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataWithReason"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	"public void testWipeDataWithReason() throws Exception {         if (!mHasFeature) {             return;         }         assertTrue(listUsers().contains(mProfileUserId));          // testWipeDataWithReason() removes the managed profile,         // so it needs to separated from other tests.         // Check and clear the notification is presented after work profile got removed, so profile         // user no longer exists, verification should be run in primary user.         // Both the profile wipe and notification verification are done on the device side test         // because notifications are checked using a NotificationListenerService         runDeviceTestsAsUser(                 MANAGED_PROFILE_PKG,                 "".WipeDataNotificationTest"",                 ""testWipeDataWithReasonVerification"",                 mParentUserId,                 mTestArgs);         // Note: the managed profile is removed by this test, which will make removeUserCommand in         // tearDown() to complain, but that should be OK since its result is not asserted.         waitUntilUserRemoved(mProfileUserId);     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataWithoutReason"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	"public void testWipeDataWithoutReason() throws Exception {         if (!mHasFeature) {             return;         }         assertTrue(listUsers().contains(mProfileUserId));          // testWipeDataWithoutReason() removes the managed profile,         // so it needs to separated from other tests.         // Check the notification is not presented after work profile got removed, so profile user         // no longer exists, verification should be run in primary user.         // Both the profile wipe and notification verification are done on the device side test         // because notifications are checked using a NotificationListenerService         runDeviceTestsAsUser(                 MANAGED_PROFILE_PKG,                 "".WipeDataNotificationTest"",                 ""testWipeDataWithoutReasonVerification"",                 mParentUserId,                 mTestArgs);          // Note: the managed profile is removed by this test, which will make removeUserCommand in         // tearDown() to complain, but that should be OK since its result is not asserted.         waitUntilUserRemoved(mProfileUserId);     }      /**      * wipeData() test removes the managed profile, so it needs to be separated from other tests.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"runCleanupTestOnlyOwnerAllowingFailure"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import android.platform.test.annotations.LargeTest;  import com.android.tradefed.log.LogUtil.CLog;  import java.util.regex.Matcher; import java.util.regex.Pattern;  import org.junit.Test;  public class AccountCheckHostSideTest extends BaseDevicePolicyTest {     private static final String APK_NON_TEST_ONLY = ""CtsAccountCheckNonTestOnlyOwnerApp.apk"";     private static final String APK_TEST_ONLY = ""CtsAccountCheckTestOnlyOwnerApp.apk"";     private static final String APK_TEST_ONLY_UPDATE = ""CtsAccountCheckTestOnlyOwnerUpdateApp.apk"";     private static final String APK_AUTH = ""CtsAccountCheckAuthApp.apk"";      private static final String PACKAGE_NON_TEST_ONLY =             ""com.android.cts.devicepolicy.accountcheck.nontestonly"";     private static final String PACKAGE_TEST_ONLY =             ""com.android.cts.devicepolicy.accountcheck.testonly"";     private static final String PACKAGE_AUTH = ""com.android.cts.devicepolicy.accountcheck.auth"";      private static final String OWNER_TEST_ONLY = PACKAGE_TEST_ONLY             + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";     private static final String OWNER_NON_TEST_ONLY = PACKAGE_NON_TEST_ONLY             + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";      private static final String TEST_CLASS =             ""com.android.cts.devicepolicy.accountcheck.AccountCheckTest"";      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             if (getDevice().getInstalledPackageNames().contains(PACKAGE_AUTH)) {                 runCleanupTestOnlyOwnerAllowingFailure();                 runCleanupNonTestOnlyOwnerAllowingFailure();                  // This shouldn't be needed since we're uninstalling the authenticator,                 // but sometimes the account manager fails to clean up?                 removeAllAccountsAllowingFailure();             }              getDevice().uninstallPackage(PACKAGE_AUTH);             getDevice().uninstallPackage(PACKAGE_TEST_ONLY);             getDevice().uninstallPackage(PACKAGE_NON_TEST_ONLY);         }         super.tearDown();     }      private void runTest(String method) throws Exception {         runDeviceTests(PACKAGE_AUTH, TEST_CLASS, method);     }      private void runCleanupTestOnlyOwner() throws Exception {         assertTrue(removeAdmin(OWNER_TEST_ONLY, mPrimaryUserId));     }      private void runCleanupTestOnlyOwnerAllowingFailure() throws Exception {         try {             runCleanupTestOnlyOwner();         } catch (AssertionError ignore) {         }     }      private void runCleanupNonTestOnlyOwner() throws Exception {         runTest(""testCleanUpNonTestOwner"");     }      private void runCleanupNonTestOnlyOwnerAllowingFailure() throws Exception {         try {             runCleanupNonTestOnlyOwner();         } catch (AssertionError ignore) {         }     }      private void removeAllAccounts() throws Exception {         runTest(""testRemoveAllAccounts"");     }      private void removeAllAccountsAllowingFailure() throws Exception {         try {             removeAllAccounts();         } catch (AssertionError ignore) {         }     }      private void assertTestOnlyInstallable() throws Exception {         setDeviceOwnerOrFail(OWNER_TEST_ONLY, mPrimaryUserId);         runCleanupTestOnlyOwner();          setProfileOwnerOrFail(OWNER_TEST_ONLY, mPrimaryUserId);         runCleanupTestOnlyOwner();     }      private void assertNonTestOnlyInstallable() throws Exception {         setDeviceOwnerOrFail(OWNER_NON_TEST_ONLY, mPrimaryUserId);         runCleanupNonTestOnlyOwner();          setProfileOwnerOrFail(OWNER_NON_TEST_ONLY, mPrimaryUserId);         runCleanupNonTestOnlyOwner();     }      private void assertTestOnlyNotInstallable() throws Exception {         setDeviceOwnerExpectingFailure(OWNER_TEST_ONLY, mPrimaryUserId);         runCleanupTestOnlyOwnerAllowingFailure();          setProfileOwnerExpectingFailure(OWNER_TEST_ONLY, mPrimaryUserId);         runCleanupTestOnlyOwnerAllowingFailure();     }      private void assertNonTestOnlyNotInstallable() throws Exception {         setDeviceOwnerExpectingFailure(OWNER_NON_TEST_ONLY, mPrimaryUserId);         runCleanupNonTestOnlyOwnerAllowingFailure();          setProfileOwnerExpectingFailure(OWNER_NON_TEST_ONLY, mPrimaryUserId);         runCleanupNonTestOnlyOwnerAllowingFailure();     }      private boolean hasAccounts() throws Exception {         final String accountDump = getDevice().executeShellCommand(""dumpsys account"");          final Pattern p = Pattern.compile(""^\\s*Accounts\\:\\s*(\\d+)"", Pattern.MULTILINE);         final Matcher m = p.matcher(accountDump);         if (!m.find()) {             fail(""Unable to obtain # of accounts"");             return true;         }         final String count = m.group(1);          CLog.i(""# of preconfigured accounts="" + count);          return Integer.parseInt(count) > 0;     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"testAccountCheck"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	"@LargeTest     public void testAccountCheck() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(APK_AUTH, mPrimaryUserId);         installAppAsUser(APK_NON_TEST_ONLY, mPrimaryUserId);         installAppAsUser(APK_TEST_ONLY, mPrimaryUserId);          runCleanupTestOnlyOwnerAllowingFailure();         runCleanupNonTestOnlyOwnerAllowingFailure();         removeAllAccountsAllowingFailure();         try { //            runTest(""testCheckPreconfiguredAccountFeatures""); // //            final boolean hasPreconfiguredAccounts = hasAccounts(); // //            // All pre-configured accounts must be ""compatible"", so the test-only owner can be //            // installed. //            assertTestOnlyInstallable(); // //            if (hasPreconfiguredAccounts) { //                assertNonTestOnlyNotInstallable(); //            } else { //                assertNonTestOnlyInstallable(); //            } //             // Incompatible, type A.             runTest(""testAddIncompatibleA"");              assertTestOnlyNotInstallable();             assertNonTestOnlyNotInstallable();              // Incompatible, type B.             removeAllAccounts();             runTest(""testAddIncompatibleB"");              assertTestOnlyNotInstallable();             assertNonTestOnlyNotInstallable();              // Incompatible, type C.             removeAllAccounts();             runTest(""testAddIncompatibleC"");              assertTestOnlyNotInstallable();             assertNonTestOnlyNotInstallable();              // Compatible.             removeAllAccounts();             runTest(""testAddCompatible"");              assertTestOnlyInstallable(); // Now test-only owner can be accepted.             assertNonTestOnlyNotInstallable();              // 2 compatible accounts.             removeAllAccounts();             runTest(""testAddCompatible"");             runTest(""testAddCompatible"");              assertTestOnlyInstallable(); // Now test-only owner can be accepted.              assertNonTestOnlyNotInstallable();              // 2 compatible accounts + 1 incompatible.             removeAllAccounts();             runTest(""testAddIncompatibleA"");             runTest(""testAddCompatible"");             runTest(""testAddCompatible"");              assertTestOnlyNotInstallable();             assertNonTestOnlyNotInstallable();              // 2 compatible accounts + 1 incompatible, different order.             removeAllAccounts();             runTest(""testAddCompatible"");             runTest(""testAddCompatible"");             runTest(""testAddIncompatibleB"");              assertTestOnlyNotInstallable();             assertNonTestOnlyNotInstallable();         } catch (Throwable th) {             CLog.w(""Tests failed; current accounts are:"");             CLog.w(getDevice().executeShellCommand(""dumpsys account""));              // Dump accounts             throw th;         }     }      /**      * Make sure even if the ""test-only"" flag changes when an app is updated, we still respect      * the original value.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"testInheritTestOnly"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	"public void testInheritTestOnly() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(APK_TEST_ONLY, mPrimaryUserId);          // Set as DO.         try {             setDeviceOwnerOrFail(OWNER_TEST_ONLY, mPrimaryUserId);         } catch (Throwable e) {             CLog.e(""Unable to install DO, can't continue the test. Skipping.  hasAccounts=""                     + hasAccounts());             return;         }         try {              // Override with a package that's not test-only.             installAppAsUser(APK_TEST_ONLY_UPDATE, mPrimaryUserId);              // But DPMS keeps the original test-only flag, so it's still removable.             runCleanupTestOnlyOwner();              return;         } catch (Throwable e) {             // If failed, re-install the APK with test-only=true.             try {                 installAppAsUser(APK_TEST_ONLY, mPrimaryUserId);                 runCleanupTestOnlyOwner();             } catch (Exception inner) {                 CLog.e(""Unable to clean up after a failure: "" + e.getMessage());             }              throw e;         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test02_createShortuctsOnPrimaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	"public void test02_createShortuctsOnPrimaryUser() {         assertTrue(getManager().setDynamicShortcuts(list(                 new ShortcutInfo.Builder(getContext(), ""s1"")                         .setShortLabel(""label1"")                         .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(                                 new ComponentName(getContext(), MainActivity.class))).build())));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test04_getAndLaunch_primary"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	"public void test04_getAndLaunch_primary() {         Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());          final UserHandle userCurrent = android.os.Process.myUserHandle();         final UserHandle userOther = getOtherUser();          final ShortcutQuery q = new ShortcutQuery()                 .setQueryFlags(ShortcutQuery.FLAG_MATCH_DYNAMIC)                 .setPackage(getContext().getPackageName())                 .setShortcutIds(list(""s1""));         assertWith(getLauncherApps().getShortcuts(q, userCurrent))                 .haveIds(""s1"")                 .areAllDynamic()                 .forShortcutWithId(""s1"", si -> {                     assertEquals(""label1"", si.getShortLabel());                     assertEquals(userCurrent, si.getUserHandle());                 });         assertWith(getLauncherApps().getShortcuts(q, userOther))                 .haveIds(""s1"")                 .areAllDynamic()                 .forShortcutWithId(""s1"", si -> {                     assertEquals(""label2"", si.getShortLabel());                     assertEquals(userOther, si.getUserHandle());                 });          // Just call start and make sure they don't throw.         getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,                 userCurrent);          // TODO Make sure the activity actually starts.         getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,                 userOther);     }      @Suppress // Having a launcher on managed profile is not supported, so don't run."	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.intent.sender.CopyPasteTest"	"finish"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/CopyPasteTest.java"	""	"public void test/*  *.  */  package com.android.cts.intent.sender;  import android.content.ClipboardManager; import android.content.ClipData; import android.content.Context; import android.content.Intent; import android.os.Bundle; import android.test.InstrumentationTestCase; import android.util.Log;  import java.util.concurrent.Semaphore; import java.util.concurrent.TimeUnit;  public class CopyPasteTest extends InstrumentationTestCase         implements ClipboardManager.OnPrimaryClipChangedListener {      private IntentSenderActivity mActivity;     private ClipboardManager mClipboard;     private Semaphore mNotified;      private static String ACTION_COPY_TO_CLIPBOARD = ""com.android.cts.action.COPY_TO_CLIPBOARD"";      private static String INITIAL_TEXT = ""initial text"";     private static String NEW_TEXT = ""sample text"";      @Override     protected void setUp() throws Exception {         super.setUp();         Context context = getInstrumentation().getTargetContext();         mActivity = launchActivity(context.getPackageName(), IntentSenderActivity.class, null);         mClipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);     }      @Override     public void tearDown() throws Exception {         mActivity.finish();         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.intent.sender.CopyPasteTest"	"testCanReadAcrossProfiles"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/CopyPasteTest.java"	""	"public void testCanReadAcrossProfiles() throws Exception {         ClipData clip = ClipData.newPlainText(""""/*label*/, INITIAL_TEXT);         mClipboard.setPrimaryClip(clip);         assertEquals(INITIAL_TEXT , getTextFromClipboard());          askCrossProfileReceiverToCopy(NEW_TEXT);          assertEquals(NEW_TEXT, getTextFromClipboard());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.intent.sender.CopyPasteTest"	"testCannotReadAcrossProfiles"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/CopyPasteTest.java"	""	"public void testCannotReadAcrossProfiles() throws Exception {         ClipData clip = ClipData.newPlainText(""""/*label*/, INITIAL_TEXT);         mClipboard.setPrimaryClip(clip);         assertEquals(INITIAL_TEXT , getTextFromClipboard());          askCrossProfileReceiverToCopy(NEW_TEXT);          String clipboardText = getTextFromClipboard();         assertTrue(""The clipboard text is "" + clipboardText + "" but should be <null> or ""                 + INITIAL_TEXT, clipboardText == null || clipboardText.equals(INITIAL_TEXT));     }      private void askCrossProfileReceiverToCopy(String text) throws Exception {         Intent intent = new Intent(ACTION_COPY_TO_CLIPBOARD);         intent.putExtra(""extra_text"", text);         mActivity.getCrossProfileResult(intent);     }      private String getTextFromClipboard() {         ClipData clip = mClipboard.getPrimaryClip();         if (clip == null) {             return null;         }         ClipData.Item item = clip.getItemAt(0);         if (item == null) {             return null;         }         CharSequence text = item.getText();         if (text == null) {             return null;         }         return text.toString();     }       @Override     public void onPrimaryClipChanged() {         mNotified.release();     }  }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CustomManagedProfileTest"	"testIsProvisioningAllowed"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomManagedProfileTest.java"	""	"public void testIsProvisioningAllowed() throws Exception {         final int primaryUserId = getPrimaryUser();         // Must install the apk since the test runs in the ManagedProfile apk.         installAppAsUser(MANAGED_PROFILE_APK, mPrimaryUserId);         try {             if (mHasFeature) {                 // Since we assume, in ManagedProfileTest, provisioning has to be successful,                 // DevicePolicyManager.isProvisioningAllowed must return true                 assertIsProvisioningAllowed(true, primaryUserId);             } else {                 // Test the case when feature flag is off                 assertIsProvisioningAllowed(false, primaryUserId);             }         } finally {             getDevice().uninstallPackage(MANAGED_PROFILE_PKG);         }     }      private void assertIsProvisioningAllowed(boolean expected, int userId)             throws DeviceNotAvailableException {         final String testName = expected ? ""testIsProvisioningAllowedTrue""                 : ""testIsProvisioningAllowedFalse"";         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PreManagedProfileTest"", testName, userId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedContactsPolicies"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	"public void testManagedContactsPolicies() throws Exception {         runManagedContactsTest(() -> {             ContactsTestSet contactsTestSet = new ContactsTestSet(ManagedProfileContactsTest.this,                     MANAGED_PROFILE_PKG, mParentUserId, mProfileUserId);             try {                 contactsTestSet.setCallerIdEnabled(true);                 contactsTestSet.setContactsSearchEnabled(false);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(true);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.setCallerIdEnabled(false);                 contactsTestSet.setContactsSearchEnabled(true);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(true);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.setCallerIdEnabled(false);                 contactsTestSet.setContactsSearchEnabled(false);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.checkIfNoEnterpriseDirectoryFound();                 if (isStatsdEnabled(getDevice())) {                     assertMetricsLogged(getDevice(), () -> {                         contactsTestSet.setCallerIdEnabled(true);                         contactsTestSet.setCallerIdEnabled(false);                     }, new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(false)                             .build(),                     new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(true)                             .build());                     assertMetricsLogged(getDevice(), () -> {                         contactsTestSet.setContactsSearchEnabled(true);                         contactsTestSet.setContactsSearchEnabled(false);                     }, new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(false)                             .build(),                     new DevicePolicyEventWrapper                             .Builder(                             EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(true)                             .build());                 }                 return null;             } finally {                 // reset policies                 contactsTestSet.setCallerIdEnabled(true);                 contactsTestSet.setContactsSearchEnabled(true);             }         });     }      private void setDirectoryPrefix(String directoryName, int userId)             throws DeviceNotAvailableException {         String command = ""content call --uri "" + DIRECTORY_PRIVOIDER_URI                 + "" --user "" + userId                 + "" --method "" + SET_CUSTOM_DIRECTORY_PREFIX_METHOD                 + "" --arg "" + directoryName;         LogUtil.CLog.d(""Output for command "" + command + "": ""                 + getDevice().executeShellCommand(command));     }      private void runManagedContactsTest(Callable<Void> callable) throws Exception {         if (!mHasFeature) {             return;         }          try {             // Allow cross profile contacts search.             // TODO test both on and off.             getDevice().executeShellCommand(                     ""settings put --user "" + mProfileUserId                     + "" secure managed_profile_contact_remote_search 1"");              // Wait for updating cache             waitForBroadcastIdle();              // Add test account             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testAddTestAccount"", mParentUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testAddTestAccount"", mProfileUserId);              // Install directory provider to both primary and managed profile             installAppAsUser(DIRECTORY_PROVIDER_APK, USER_ALL);             setDirectoryPrefix(PRIMARY_DIRECTORY_PREFIX, mParentUserId);             setDirectoryPrefix(MANAGED_DIRECTORY_PREFIX, mProfileUserId);              // Check enterprise directory API works             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testGetDirectoryListInPrimaryProfile"", mParentUserId);              // Insert Primary profile Contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testPrimaryProfilePhoneAndEmailLookup_insertedAndfound"", mParentUserId);             // Insert Managed profile Contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testManagedProfilePhoneAndEmailLookup_insertedAndfound"", mProfileUserId);             // Insert a primary contact with same phone & email as other             // enterprise contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testPrimaryProfileDuplicatedPhoneEmailContact_insertedAndfound"",                     mParentUserId);             // Insert a enterprise contact with same phone & email as other             // primary contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testManagedProfileDuplicatedPhoneEmailContact_insertedAndfound"",                     mProfileUserId);              callable.call();          } finally {             // Clean up in managed profile and primary profile             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testCurrentProfileContacts_removeContacts"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testCurrentProfileContacts_removeContacts"", mParentUserId);             getDevice().uninstallPackage(DIRECTORY_PROVIDER_PKG);         }     }      /*      * Container for running ContactsTest under multi-user environment      */     private static class ContactsTestSet {          private ManagedProfileContactsTest mManagedProfileContactsTest;         private String mManagedProfilePackage;         private int mParentUserId;         private int mProfileUserId;          public ContactsTestSet(ManagedProfileContactsTest managedProfileContactsTest,                 String managedProfilePackage, int parentUserId, int profileUserId) {             mManagedProfileContactsTest = managedProfileContactsTest;             mManagedProfilePackage = managedProfilePackage;             mParentUserId = parentUserId;             mProfileUserId = profileUserId;         }          private void runDeviceTestsAsUser(String pkgName, String testClassName,                 String testMethodName, Integer userId) throws DeviceNotAvailableException {             mManagedProfileContactsTest.runDeviceTestsAsUser(pkgName, testClassName, testMethodName,                     userId);         }          // Enable / Disable         public void setCallerIdEnabled(boolean enabled) throws DeviceNotAvailableException {             if (enabled) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileCallerIdDisabled_false"", mProfileUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileCallerIdDisabled_true"", mProfileUserId);             }         }          // Enable / Disable cross profile contacts search         public void setContactsSearchEnabled(boolean enabled) throws DeviceNotAvailableException {             if (enabled) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileContactsSearchDisabled_false"", mProfileUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileContactsSearchDisabled_true"", mProfileUserId);             }         }          public void checkIfCanLookupEnterpriseContacts(boolean expected)                 throws DeviceNotAvailableException {             // Primary user cannot use ordinary phone/email lookup api to access             // managed contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfilePhoneLookup_canNotAccessEnterpriseContact"", mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEmailLookup_canNotAccessEnterpriseContact"", mParentUserId);             // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryContact"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryContact"",                     mParentUserId);             // When there exist contacts with the same phone/email in primary &             // enterprise,             // primary user can use ENTERPRISE_CONTENT_FILTER_URI to access the             // primary contact.             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookupDuplicated_canAccessPrimaryContact"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookupDuplicated_canAccessPrimaryContact"",                     mParentUserId);              // Managed user cannot use ordinary phone/email lookup api to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfilePhoneLookup_canNotAccessPrimaryContact"", mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEmailLookup_canNotAccessPrimaryContact"", mProfileUserId);             // Managed user can use ENTERPRISE_CONTENT_FILTER_URI to access             // enterprise contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",                     mProfileUserId);             // Managed user cannot use ENTERPRISE_CONTENT_FILTER_URI to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookup_canNotAccessPrimaryContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookup_canNotAccessPrimaryContact"",                     mProfileUserId);             // When there exist contacts with the same phone/email in primary &             // enterprise,             // managed user can use ENTERPRISE_CONTENT_FILTER_URI to access the             // enterprise contact.             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookupDuplicated_canAccessEnterpriseContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookupDuplicated_canAccessEnterpriseContact"",                     mProfileUserId);              // Check if phone lookup can access primary directories             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories"",                     mParentUserId);              // Check if email lookup can access primary directories             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories"",                     mParentUserId);              if (expected) {                 // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access                 // managed profile contacts                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",                         mParentUserId);                  // Make sure SIP enterprise lookup works too.                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseSipLookup_canAccessEnterpriseContact"",                         mParentUserId);                  // Check if phone lookup can access enterprise directories                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories"",                         mParentUserId);                  // Check if email lookup can access enterprise directories                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories"",                         mParentUserId);             } else {                 // Primary user cannot use ENTERPRISE_CONTENT_FILTER_URI to                 // access managed contacts                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessEnterpriseContact"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",                         mParentUserId);                  runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",                         mParentUserId);             }         }          public void checkIfCanFilterSelfContacts() throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseCallableFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testEnterpriseProfileEnterpriseEmailFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseContactFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneFilter_canAccessManagedDirectories"",                     mProfileUserId);         }          public void checkIfCanFilterEnterpriseContacts(boolean expected)                 throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testFilterUriWhenDirectoryParamMissing"", mParentUserId);             if (expected) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories"",                         mParentUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories"",                         mParentUserId);             }         }          public void checkIfNoEnterpriseDirectoryFound() throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories"",                     mParentUserId);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"assertPhotoUrisReadable"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void test/*  *.  */  package com.android.cts.managedprofile;  import android.accounts.Account; import android.accounts.AccountManager; import android.annotation.TargetApi; import android.app.admin.DevicePolicyManager; import android.content.ContentProviderOperation; import android.content.ContentResolver; import android.content.Context; import android.content.OperationApplicationException; import android.content.res.Resources; import android.content.res.Resources.NotFoundException; import android.database.Cursor; import android.database.DatabaseUtils; import android.graphics.Rect; import android.net.Uri; import android.os.Build; import android.os.RemoteException; import android.provider.ContactsContract; import android.provider.ContactsContract.CommonDataKinds.Callable; import android.provider.ContactsContract.CommonDataKinds.Email; import android.provider.ContactsContract.CommonDataKinds.Phone; import android.provider.ContactsContract.CommonDataKinds.Photo; import android.provider.ContactsContract.Contacts; import android.provider.ContactsContract.Directory; import android.provider.ContactsContract.PhoneLookup; import android.provider.ContactsContract.RawContacts; import android.test.AndroidTestCase; import android.util.Log;  import java.io.ByteArrayOutputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.io.InputStream; import java.util.ArrayList; import java.util.Arrays;  public class ContactsTest extends AndroidTestCase {      private static final String TAG = ""ContactsTest"";      private static final String TEST_ACCOUNT_NAME = AccountAuthenticator.ACCOUNT_NAME;     private static final String TEST_ACCOUNT_TYPE = AccountAuthenticator.ACCOUNT_TYPE;     // details of a sample primary contact     private static final String PRIMARY_CONTACT_DISPLAY_NAME = ""Primary"";     private static final String PRIMARY_CONTACT_PHONE = ""00000001"";     private static final String PRIMARY_CONTACT_EMAIL = ""one@primary.com"";     private static final String PRIMARY_CONTACT_SIP = ""foo@sip"";      // details of a sample managed contact     private static final String MANAGED_CONTACT_DISPLAY_NAME = ""Managed"";     private static final String MANAGED_CONTACT_PHONE = ""6891999"";     private static final String MANAGED_CONTACT_EMAIL = ""one@managed.com"";     private static final String MANAGED_CONTACT_SIP = ""bar@sip"";      // details of a sample primary and a sample managed contact, with the same phone & email     private static final String PRIMARY_CONTACT_DISPLAY_NAME_2 = ""PrimaryShared"";     private static final String MANAGED_CONTACT_DISPLAY_NAME_2 = ""ManagedShared"";     private static final String SHARED_CONTACT_PHONE = ""00000002"";     private static final String SHARED_CONTACT_EMAIL = ""shared@shared.com"";     private static final String SHARED_CONTACT_SIP = ""baz@sip"";      // Directory display name     private static final String PRIMARY_DIRECTORY_NAME = ""PrimaryDirectory"";     private static final String MANAGED_DIRECTORY_NAME = ""ManagedDirectory"";     private static final String PRIMARY_DIRECTORY_CONTACT_NAME = ""PrimaryDirectoryContact"";     private static final String MANAGED_DIRECTORY_CONTACT_NAME = ""ManagedDirectoryContact"";      // Directory Authority     private static final String DIRECTORY_PROVIDER_AUTHORITY = ""com.android.cts.contact.directory.provider"";       // Retry directory query so we can make sure directory info in cp2 is updated     private static final int MAX_RETRY_DIRECTORY_QUERY = 10;     private static final int RETRY_DIRECTORY_QUERY_INTERVAL = 1000; // 1s      private DevicePolicyManager mDevicePolicyManager;     private ContentResolver mResolver;      private class ContactInfo { // Not static to access outer world.          String contactId;         String displayName;         String photoUri;         String photoThumbnailUri;         String photoId;          public ContactInfo(String contactId, String displayName, String photoUri,                 String photoThumbnailUri, String photoId) {             this.contactId = contactId;             this.displayName = displayName;             this.photoUri = photoUri;             this.photoThumbnailUri = photoThumbnailUri;             this.photoId = photoId;         }          private void assertNoPhotoUri() {             assertNull(photoUri);             assertNull(photoThumbnailUri);         }          private void assertPhotoUrisReadable() {             assertPhotoUriReadable(photoUri);             assertPhotoUriReadable(photoThumbnailUri);         }          private void assertThumbnailUri(int resId) {             Resources resources = mContext.getResources();             assertNotNull(this.photoThumbnailUri);             byte[] actualPhotoThumbnail = getByteFromStreamForTest(                     getInputStreamFromUriForTest(this.photoThumbnailUri));             byte[] expectedPhotoThumbnail = getByteFromStreamForTest(                     resources.openRawResource(resId));             assertTrue(Arrays.equals(expectedPhotoThumbnail, actualPhotoThumbnail));         }          private void assertPhotoUri(int resId) {             Resources resources = mContext.getResources();             assertNotNull(this.photoUri);             byte[] actualPhoto = getByteFromStreamForTest(                     getInputStreamFromUriForTest(this.photoUri));             byte[] expectedPhoto = getByteFromStreamForTest(                     resources.openRawResource(resId));             assertTrue(Arrays.equals(expectedPhoto, actualPhoto));         }          private boolean hasPhotoId() {             return photoId != null && Long.parseLong(photoId) > 0;         }     }      @Override     protected void setUp() throws Exception {         super.setUp();         mResolver = getContext().getContentResolver();         mDevicePolicyManager = (DevicePolicyManager) mContext                 .getSystemService(Context.DEVICE_POLICY_SERVICE);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfilePhoneAndEmailLookup_insertedAndfound"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfilePhoneAndEmailLookup_insertedAndfound() throws RemoteException,             OperationApplicationException, NotFoundException, IOException {         assertFalse(isManagedProfile());         // Do not insert to primary contact         insertContact(PRIMARY_CONTACT_DISPLAY_NAME, PRIMARY_CONTACT_PHONE,                 PRIMARY_CONTACT_EMAIL, PRIMARY_CONTACT_SIP, 0);          ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(false /*isEnterprise*/,                 PRIMARY_CONTACT_PHONE);         assertNotNull(contactInfo);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertNoPhotoUri();         assertFalse(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));          contactInfo = getContactInfoFromEmailLookupUri(false /*isEnterprise*/,                 PRIMARY_CONTACT_EMAIL);         assertNotNull(contactInfo);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertNoPhotoUri();         assertFalse(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));      }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileDuplicatedPhoneEmailContact_insertedAndfound"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileDuplicatedPhoneEmailContact_insertedAndfound() throws             RemoteException, OperationApplicationException, NotFoundException, IOException {         assertFalse(isManagedProfile());         insertContact(PRIMARY_CONTACT_DISPLAY_NAME_2,                 SHARED_CONTACT_PHONE,                 SHARED_CONTACT_EMAIL,                 SHARED_CONTACT_SIP,                 com.android.cts.managedprofile.R.raw.ic_contact_picture);          ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(false /*isEnterprise*/,                 SHARED_CONTACT_PHONE);         assertNotNull(contactInfo);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME_2, contactInfo.displayName);         contactInfo.assertPhotoUrisReadable();         assertTrue(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));          contactInfo = getContactInfoFromEmailLookupUri(false /*isEnterprise*/, SHARED_CONTACT_EMAIL);         assertNotNull(contactInfo);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME_2, contactInfo.displayName);         contactInfo.assertPhotoUrisReadable();         assertTrue(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessEnterpriseContact()             throws IOException {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(true /*isEnterprise*/,                 MANAGED_CONTACT_PHONE);         assertManagedLocalContact(contactInfo);         contactInfo.assertPhotoUrisReadable();         // Cannot get photo id in ENTERPRISE_CONTENT_FILTER_URI         assertFalse(contactInfo.hasPhotoId());         assertTrue(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseSipLookup_canAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseSipLookup_canAccessEnterpriseContact()             throws IOException {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEnterprisePhoneLookupUriWithSipAddress(                 true /*isEnterprise*/, MANAGED_CONTACT_SIP);         assertManagedLocalContact(contactInfo);         contactInfo.assertPhotoUrisReadable();         assertFalse(contactInfo.hasPhotoId());         assertTrue(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessEnterpriseContact()             throws IOException {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(true /*isEnterprise*/,                 MANAGED_CONTACT_EMAIL);         assertManagedLocalContact(contactInfo);         contactInfo.assertPhotoUrisReadable();         // Cannot get photo id in ENTERPRISE_CONTENT_FILTER_URI         assertFalse(contactInfo.hasPhotoId());         assertTrue(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookupDuplicated_canAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookupDuplicated_canAccessPrimaryContact()             throws IOException {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(true /*isEnterprise*/,                 SHARED_CONTACT_PHONE);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME_2, contactInfo.displayName);         contactInfo.assertPhotoUrisReadable();         assertTrue(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookupDuplicated_canAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookupDuplicated_canAccessPrimaryContact()             throws IOException {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(true /*isEnterprise*/,                 SHARED_CONTACT_EMAIL);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME_2, contactInfo.displayName);         contactInfo.assertPhotoUrisReadable();         assertTrue(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfilePhoneLookup_canNotAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfilePhoneLookup_canNotAccessEnterpriseContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(false /*isEnterprise*/,                 MANAGED_CONTACT_PHONE);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEmailLookup_canNotAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEmailLookup_canNotAccessEnterpriseContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(false /*isEnterprise*/,                 MANAGED_CONTACT_EMAIL);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(true /*isEnterprise*/,                 PRIMARY_CONTACT_PHONE);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertNoPhotoUri();         assertFalse(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(true /*isEnterprise*/,                 PRIMARY_CONTACT_EMAIL);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertNoPhotoUri();         assertFalse(contactInfo.hasPhotoId());         assertFalse(isEnterpriseContactId(contactInfo.contactId));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEnterprisePhoneLookup_canNotAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testManagedProfileEnterprisePhoneLookup_canNotAccessPrimaryContact() {         assertTrue(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(true /*isEnterprise*/,                 PRIMARY_CONTACT_PHONE);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEnterpriseEmailLookup_canNotAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testManagedProfileEnterpriseEmailLookup_canNotAccessPrimaryContact() {         assertTrue(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(true /*isEnterprise*/,                 PRIMARY_CONTACT_EMAIL);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfilePhoneLookup_canNotAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testManagedProfilePhoneLookup_canNotAccessPrimaryContact() {         assertTrue(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(false /*isEnterprise*/,                 PRIMARY_CONTACT_PHONE);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEmailLookup_canNotAccessPrimaryContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testManagedProfileEmailLookup_canNotAccessPrimaryContact() {         assertTrue(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(false /*isEnterprise */,                 PRIMARY_CONTACT_EMAIL);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canNotAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canNotAccessEnterpriseContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromEmailLookupUri(true /*isEnterprise*/,                 MANAGED_CONTACT_EMAIL);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canNotAccessEnterpriseContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canNotAccessEnterpriseContact() {         assertFalse(isManagedProfile());         ContactInfo contactInfo = getContactInfoFromPhoneLookupUri(true /*isEnterprise*/,                 MANAGED_CONTACT_PHONE);         assertNull(contactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo =                 getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,                         Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId != 0) { // if directoryId == 0, it means it can't access managed directory             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,                             directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo =                 getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,                         Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId != 0) { // if directoryId == 0, it means it can't access managed directory             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,                             directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testGetDirectoryListInPrimaryProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testGetDirectoryListInPrimaryProfile() {         assertFalse(isManagedProfile());         // As directory content in CP2 may not be updated, we will try 10 times to see if it's         // updated         for (int i = 0; i < MAX_RETRY_DIRECTORY_QUERY; i++) {             final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,                     new String[]{                             Directory._ID,                             Directory.DISPLAY_NAME                     }, null, null, null);              boolean hasPrimaryDefault = false;             boolean hasPrimaryInvisible = false;             boolean hasManagedDefault = false;             boolean hasManagedInvisible = false;             boolean hasPrimaryDirectory = false;             boolean hasManagedDirectory = false;              try {                 while(cursor.moveToNext()) {                     final long directoryId = cursor.getLong(0);                     if (directoryId == Directory.DEFAULT) {                         hasPrimaryDefault = true;                     } else if (directoryId == Directory.LOCAL_INVISIBLE) {                         hasPrimaryInvisible = true;                     } else if (directoryId == Directory.ENTERPRISE_DEFAULT) {                         hasManagedDefault = true;                     } else if (directoryId == Directory.ENTERPRISE_LOCAL_INVISIBLE) {                         hasManagedInvisible = true;                     } else {                         final String displayName = cursor.getString(1);                         if (Directory.isEnterpriseDirectoryId(directoryId)                                 && displayName.equals(MANAGED_DIRECTORY_NAME)) {                             hasManagedDirectory = true;                         }                         if (!Directory.isEnterpriseDirectoryId(directoryId)                                 && displayName.equals(PRIMARY_DIRECTORY_NAME)) {                             hasPrimaryDirectory = true;                         }                     }                 }                 if (i + 1 == MAX_RETRY_DIRECTORY_QUERY) {                     DatabaseUtils.dumpCursor(cursor);                     assertTrue(hasPrimaryDefault);                     assertTrue(hasPrimaryInvisible);                     assertTrue(hasManagedDefault);                     assertTrue(hasManagedInvisible);                     assertTrue(hasPrimaryDirectory);                     assertTrue(hasManagedDirectory);                 }             } finally {                 cursor.close();             }             if (hasPrimaryDefault && hasPrimaryInvisible && hasManagedDefault                     && hasManagedInvisible && hasPrimaryDirectory && hasManagedDirectory) {                 // Success                 return;             } else {                 // Failed, sleep and retry                 try {                     Log.i(TAG, ""Failed "" + (i+1) + "" times, retry"");                     Thread.sleep(RETRY_DIRECTORY_QUERY_INTERVAL);                 } catch (InterruptedException e) {}             }         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseEmailLookupUriInDirectory(PRIMARY_CONTACT_EMAIL,                 Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getPrimaryRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseEmailLookupUriInDirectory(PRIMARY_CONTACT_EMAIL,                 directoryId);         assertPrimaryDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,                 Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,                 directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterprisePhoneLookupUriInDirectory(PRIMARY_CONTACT_PHONE,                 Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getPrimaryRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterprisePhoneLookupUriInDirectory(PRIMARY_CONTACT_PHONE,                 directoryId);         assertPrimaryDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,                 Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,                 directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseCallableFilterUriInDirectory(                         PRIMARY_CONTACT_PHONE, Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseCallableFilterUriInDirectory(                         PRIMARY_CONTACT_PHONE, getPrimaryRemoteDirectoryId());         assertPrimaryDirectoryContact(directoryContactInfo);      }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseCallableFilterUriInDirectory(                         MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseCallableFilterUriInDirectory(                         MANAGED_CONTACT_PHONE, directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseCallableFilterUriInDirectory(                 MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId == 0L) {             // if no enterprise directory id is found, the test succeeds.             return;         } else {             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterpriseCallableFilterUriInDirectory(MANAGED_CONTACT_PHONE,                             directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseEmailFilterUriInDirectory(                         PRIMARY_CONTACT_EMAIL, Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseEmailFilterUriInDirectory(                         PRIMARY_CONTACT_EMAIL, getPrimaryRemoteDirectoryId());         assertPrimaryDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseEmailFilterUriInDirectory(                 MANAGED_CONTACT_EMAIL, Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseEmailFilterUriInDirectory(                 MANAGED_CONTACT_EMAIL, directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo =                 getContactInfoFromEnterpriseEmailFilterUriInDirectory(MANAGED_CONTACT_EMAIL,                         Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId == 0L) {             // if no enterprise directory id is found, the test succeeds.             return;         } else {             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterpriseEmailFilterUriInDirectory(MANAGED_CONTACT_EMAIL,                             directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseContactFilterUriInDirectory(                         PRIMARY_CONTACT_DISPLAY_NAME, Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseContactFilterUriInDirectory(                         PRIMARY_DIRECTORY_CONTACT_NAME, getPrimaryRemoteDirectoryId());         assertPrimaryDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseContactFilterUriInDirectory(                         MANAGED_CONTACT_DISPLAY_NAME, Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterpriseEmailFilterUriInDirectory(                         MANAGED_CONTACT_DISPLAY_NAME, directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterpriseContactFilterUriInDirectory(                         MANAGED_CONTACT_DISPLAY_NAME, Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId == 0L) {             // if no enterprise directory id is found, the test succeeds.             return;         } else {             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterpriseEmailFilterUriInDirectory(                             MANAGED_CONTACT_DISPLAY_NAME, directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories() {         assertFalse(isManagedProfile());         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterprisePhoneFilterUriInDirectory(                         PRIMARY_CONTACT_PHONE, Directory.DEFAULT);         assertPrimaryLocalContact(defaultContactInfo);          final ContactInfo directoryContactInfo                 = getContactInfoFromEnterprisePhoneFilterUriInDirectory(                         PRIMARY_CONTACT_PHONE, getPrimaryRemoteDirectoryId());         assertPrimaryDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterprisePhoneFilterUriInDirectory(                 MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);         assertManagedLocalContact(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryId();         final ContactInfo directoryContactInfo                 = getContactInfoFromEnterprisePhoneFilterUriInDirectory(                 MANAGED_CONTACT_PHONE, directoryId);         assertManagedDirectoryContact(directoryContactInfo);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          // local directory         final ContactInfo defaultContactInfo                 = getContactInfoFromEnterprisePhoneFilterUriInDirectory(                 MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);         assertNull(defaultContactInfo);          // remote directory         final long directoryId = getEnterpriseRemoteDirectoryIdSliently();         if (directoryId == 0L) {             // if no enterprise directory id is found, the test succeeds.             return;         } else {             final ContactInfo directoryContactInfo =                     getContactInfoFromEnterprisePhoneFilterUriInDirectory(                             MANAGED_CONTACT_PHONE, directoryId);             assertNull(directoryContactInfo);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories() {         assertFalse(isManagedProfile());          final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,                 new String[]{Directory._ID}, null, null, null);         try {             while (cursor.moveToNext()) {                 final long directoryId = cursor.getLong(0);                 if (Directory.isEnterpriseDirectoryId(directoryId)) {                     fail(""found enterprise directories"");                 }             }         } finally {             cursor.close();         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.ContactsTest"	"testQuickContact"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	"public void testQuickContact() throws Exception {         showQuickContactInternal(null);         showQuickContactInternal(Directory.ENTERPRISE_DEFAULT);         showQuickContactInternal(getEnterpriseRemoteDirectoryId());     }      private void showQuickContactInternal(Long directoryId) throws Exception {         final Uri phoneLookupUri =                 Uri.withAppendedPath(                         PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI, MANAGED_CONTACT_PHONE);         if (directoryId != null) {             phoneLookupUri.buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                     String.valueOf(directoryId)).build();         }         final Cursor cursor =                 getContext().getContentResolver().query(phoneLookupUri, null, null, null, null);         try {             assertTrue(cursor.moveToFirst());             final long contactId =                     cursor.getLong(cursor.getColumnIndex(ContactsContract.PhoneLookup._ID));             final String lookupKey =                     cursor.getString(                             cursor.getColumnIndex(ContactsContract.PhoneLookup.LOOKUP_KEY));             final Uri lookupUri = Contacts.getLookupUri(contactId, lookupKey);             // TODO: It is better to verify the uri received by quick contacts, but it is difficult             // to verify it as the quick contacts in managed profile is started. We now just make             // sure no exception is thrown due to invalid uri (eg: directory id is missing).             // Also, consider using UiAutomator to verify the activtiy is started.             ContactsContract.QuickContact.showQuickContact(getContext(), (Rect) null, lookupUri,                     ContactsContract.QuickContact.MODE_LARGE, null);         } finally {             if (cursor != null) {                 cursor.close();             }         }     }      private long getPrimaryRemoteDirectoryId() {         assertFalse(isManagedProfile());         return getRemoteDirectoryIdInternal();     }      private long getEnterpriseRemoteDirectoryIdInManagedProfile() {         assertTrue(isManagedProfile());         return getRemoteDirectoryIdInternal();     }      private long getRemoteDirectoryIdInternal() {         final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,                 new String[]{                         Directory._ID, Directory.DIRECTORY_AUTHORITY                 }, null, null, null);         try {             while (cursor.moveToNext()) {                 final long directoryId = cursor.getLong(0);                 final String directoryAuthority = cursor.getString(1);                 if (!Directory.isEnterpriseDirectoryId(directoryId)                         && Directory.isRemoteDirectoryId(directoryId)                         && DIRECTORY_PROVIDER_AUTHORITY.equals(directoryAuthority)) {                     return directoryId;                 }             }         } finally {             cursor.close();         }         fail(""Cannot find primary directory id"");         return 0;     }      private long getEnterpriseRemoteDirectoryId() {         final long enterpriseDirectoryId = getEnterpriseRemoteDirectoryIdSliently();         assertNotSame(""Cannot find enterprise directory id"", 0L, enterpriseDirectoryId);         return enterpriseDirectoryId;     }      private long getEnterpriseRemoteDirectoryIdSliently() {         assertFalse(isManagedProfile());         final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,                 new String[] {                     Directory._ID, Directory.DIRECTORY_AUTHORITY                 }, null, null, null);         try {             while (cursor.moveToNext()) {                 final long directoryId = cursor.getLong(0);                 final String directoryAuthority = cursor.getString(1);                 if (Directory.isEnterpriseDirectoryId(directoryId)                         && Directory.isRemoteDirectoryId(directoryId)                         && DIRECTORY_PROVIDER_AUTHORITY.equals(directoryAuthority)) {                     return directoryId;                 }             }         } finally {             cursor.close();         }         return 0;     }      private boolean isManagedProfile() {         String adminPackage = BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT.getPackageName();         return mDevicePolicyManager.isProfileOwnerApp(adminPackage);     }      private void insertContact(String displayName, String phoneNumber, String email,             String sipAddress, int photoResId)             throws RemoteException, OperationApplicationException, NotFoundException, IOException {         ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();         ops.add(ContentProviderOperation                 .newInsert(ContactsContract.RawContacts.CONTENT_URI)                 .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, TEST_ACCOUNT_TYPE)                 .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, TEST_ACCOUNT_NAME)                 .build());         ops.add(ContentProviderOperation                 .newInsert(ContactsContract.Data.CONTENT_URI)                 .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                 .withValue(                         ContactsContract.Data.MIMETYPE,                         ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)                 .withValue(                         ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,                         displayName)                 .build());         ops.add(ContentProviderOperation                 .newInsert(ContactsContract.Data.CONTENT_URI)                 .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                 .withValue(                         ContactsContract.Data.MIMETYPE,                         ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)                 .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER,                         phoneNumber)                 .withValue(ContactsContract.CommonDataKinds.Phone.TYPE,                         Phone.TYPE_MOBILE)                 .build());         ops.add(ContentProviderOperation                 .newInsert(ContactsContract.Data.CONTENT_URI)                 .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                 .withValue(                         ContactsContract.Data.MIMETYPE,                         ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)                 .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS,                         email)                 .withValue(ContactsContract.CommonDataKinds.Email.TYPE,                         Email.TYPE_WORK)                 .build());         ops.add(ContentProviderOperation                 .newInsert(ContactsContract.Data.CONTENT_URI)                 .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                 .withValue(                         ContactsContract.Data.MIMETYPE,                         ContactsContract.CommonDataKinds.SipAddress.CONTENT_ITEM_TYPE)                 .withValue(ContactsContract.CommonDataKinds.SipAddress.SIP_ADDRESS,                         sipAddress)                 .withValue(ContactsContract.CommonDataKinds.SipAddress.TYPE,                         ContactsContract.CommonDataKinds.SipAddress.TYPE_WORK)                 .build());          if (photoResId != 0) {             InputStream phoneInputStream = mContext.getResources().openRawResource(photoResId);             try {                 byte[] rawPhoto = getByteFromStream(phoneInputStream);                 ops.add(ContentProviderOperation                         .newInsert(ContactsContract.Data.CONTENT_URI)                         .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)                         .withValue(                                 ContactsContract.Data.MIMETYPE,                                 ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)                         .withValue(Photo.PHOTO, rawPhoto)                         .build());             } finally {                 phoneInputStream.close();             }         }          mResolver.applyBatch(ContactsContract.AUTHORITY, ops);     }      private void assertPrimaryLocalContact(ContactInfo contactInfo) {         assertNotNull(contactInfo);         assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertNoPhotoUri();         assertFalse(contactInfo.hasPhotoId());     }      private void assertManagedLocalContact(ContactInfo contactInfo) {         assertNotNull(contactInfo);         assertEquals(MANAGED_CONTACT_DISPLAY_NAME, contactInfo.displayName);         contactInfo.assertPhotoUrisReadable();     }      private void assertPrimaryDirectoryContact(ContactInfo contactInfo) {         assertNotNull(contactInfo);         assertEquals(PRIMARY_DIRECTORY_CONTACT_NAME, contactInfo.displayName);         contactInfo.assertThumbnailUri(R.raw.primary_thumbnail);         contactInfo.assertPhotoUri(R.raw.primary_photo);     }      private void assertManagedDirectoryContact(ContactInfo contactInfo) {         assertNotNull(contactInfo);         assertEquals(MANAGED_DIRECTORY_CONTACT_NAME, contactInfo.displayName);         contactInfo.assertThumbnailUri(R.raw.managed_thumbnail);         contactInfo.assertPhotoUri(R.raw.managed_photo);     }      private void assertContactInfoEquals(ContactInfo lhs, ContactInfo rhs) {         if (lhs == null) {             assertNull(rhs);         } else {             assertNotNull(rhs);             assertEquals(lhs.contactId, rhs.contactId);             assertEquals(lhs.displayName, rhs.displayName);             assertEquals(lhs.photoId, rhs.photoId);             assertEquals(lhs.photoThumbnailUri, rhs.photoThumbnailUri);             assertEquals(lhs.photoUri, rhs.photoUri);         }     }      private ContactInfo getContactInfoFromPhoneLookupUri(boolean isEnterprise, String phoneNumber) {         Uri baseUri = (isEnterprise) ? PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI                 : PhoneLookup.CONTENT_FILTER_URI;         Uri uri = baseUri.buildUpon().appendPath(phoneNumber).build();         ContactInfo contactInfo = getContactInfoFromUri(uri, PhoneLookup._ID,                 PhoneLookup.DISPLAY_NAME,                 PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);          ContactInfo contactInfo2 = getContactInfoFromUri(uri, PhoneLookup.CONTACT_ID,                 PhoneLookup.DISPLAY_NAME,                 PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);         assertContactInfoEquals(contactInfo, contactInfo2);         return contactInfo;     }      private ContactInfo getContactInfoFromEnterprisePhoneLookupUriWithSipAddress(             boolean isEnterprise, String sipAddress) {         Uri baseUri = (isEnterprise) ? PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI                 : PhoneLookup.CONTENT_FILTER_URI;         Uri uri = baseUri.buildUpon().appendPath(sipAddress)                 .appendQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS, ""1"").build();         return getContactInfoFromUri(uri, PhoneLookup.CONTACT_ID, PhoneLookup.DISPLAY_NAME,                 PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterprisePhoneLookupUriInDirectory(String phoneNumber,             long directoryId) {         Uri uri = PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI.buildUpon().appendPath(phoneNumber)                 .appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, PhoneLookup._ID, PhoneLookup.DISPLAY_NAME,                 PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);     }      private ContactInfo getContactInfoFromEmailLookupUri(boolean isEnterprise, String email) {         Uri baseUri = (isEnterprise) ? Email.ENTERPRISE_CONTENT_LOOKUP_URI                 : Email.CONTENT_LOOKUP_URI;         Uri uri = Uri.withAppendedPath(baseUri, email);         return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,                 Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterpriseEmailLookupUriInDirectory(String email,             long directoryId) {         Uri uri = Email.ENTERPRISE_CONTENT_LOOKUP_URI.buildUpon().appendPath(email)                 .appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,                 Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterpriseCallableFilterUriInDirectory(String filter,             long directoryId) {         final Uri uri = Uri.withAppendedPath(Callable.ENTERPRISE_CONTENT_FILTER_URI, filter)                 .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, Callable.CONTACT_ID, Callable.DISPLAY_NAME_PRIMARY,                 Callable.PHOTO_URI, Callable.PHOTO_THUMBNAIL_URI, Callable.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterpriseEmailFilterUriInDirectory(String filter,             long directoryId) {         final Uri uri = Uri.withAppendedPath(Email.ENTERPRISE_CONTENT_FILTER_URI, filter)                 .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,                 Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterpriseContactFilterUriInDirectory(String filter,             long directoryId) {         final Uri uri = Uri.withAppendedPath(Contacts.ENTERPRISE_CONTENT_FILTER_URI, filter)                 .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, Contacts._ID, Contacts.DISPLAY_NAME_PRIMARY,                 Contacts.PHOTO_URI, Contacts.PHOTO_THUMBNAIL_URI, Contacts.PHOTO_ID);     }      private ContactInfo getContactInfoFromEnterprisePhoneFilterUriInDirectory(String filter,             long directoryId) {         final Uri uri = Uri.withAppendedPath(Phone.ENTERPRISE_CONTENT_FILTER_URI, filter)                 .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,                         String.valueOf(directoryId)).build();         return getContactInfoFromUri(uri, Phone.CONTACT_ID, Phone.DISPLAY_NAME_PRIMARY,                 Phone.PHOTO_URI, Phone.PHOTO_THUMBNAIL_URI, Phone.PHOTO_ID);     }       private ContactInfo getContactInfoFromUri(Uri uri, String idColumn,             String displayNameColumn, String photoUriColumn, String photoThumbnailColumn,             String photoIdColumn) {         Cursor cursor = mResolver.query(uri,                 new String[] {                         idColumn,                         displayNameColumn,                         photoUriColumn,                         photoIdColumn,                         photoThumbnailColumn,                 }, null, null, null);         if (cursor == null) {             return null;         }         try {             if (cursor.moveToFirst()) {                 return new ContactInfo(                         cursor.getString(cursor.getColumnIndexOrThrow(idColumn)),                         cursor.getString(cursor.getColumnIndexOrThrow(displayNameColumn)),                         cursor.getString(cursor.getColumnIndexOrThrow(photoUriColumn)),                         cursor.getString(cursor.getColumnIndexOrThrow(photoThumbnailColumn)),                         cursor.getString(cursor.getColumnIndexOrThrow(photoIdColumn)));             }         } finally {             cursor.close();         }         return null;     }      private void removeAllTestContactsInProfile() {         ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();         ops.add(ContentProviderOperation.newDelete(RawContacts.CONTENT_URI)                 .withSelection(RawContacts.ACCOUNT_TYPE + ""=?"", new String[] {TEST_ACCOUNT_TYPE})                 .build());         try {             mResolver.applyBatch(ContactsContract.AUTHORITY, ops);         } catch (Exception e) {             // Catch all exceptions to let tearDown() run smoothly             e.printStackTrace();         }          Account account = new Account(TEST_ACCOUNT_NAME, TEST_ACCOUNT_TYPE);         AccountManager.get(getContext()).removeAccountExplicitly(account);     }      private InputStream getInputStreamFromUriForTest(String uriString) {         try {             return mResolver.openInputStream(Uri.parse(uriString));         } catch (FileNotFoundException e) {             fail(e.getMessage());             throw new RuntimeException(e);         }     }      private static byte[] getByteFromStreamForTest(InputStream is) {         assertNotNull(is);         try (InputStream in = is) {             return getByteFromStream(in);         } catch (IOException e) {             fail(e.getMessage());             throw new RuntimeException(e);         }     }      private static byte[] getByteFromStream(InputStream is) throws IOException {         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();         byte[] buf = new byte[1024 * 10];         int i = 0;         while ((i = is.read(buf, 0, buf.length)) > 0) {             outputStream.write(buf, 0, i);         }         return outputStream.toByteArray();     }      private boolean isEnterpriseContactId(String contactId) {         return ContactsContract.Contacts.isEnterpriseContactId(Long.valueOf(contactId));     }      private void assertPhotoUriReadable(String uri) {         assertNotNull(uri);         try (InputStream is = mResolver.openInputStream(Uri.parse(uri))) {             // Make sure it's readabe.  Don't have to read all content.             is.read();         } catch (IOException e) {             fail(e.getMessage());             throw new RuntimeException(e);         }     }      private void assertFailWhenDirectoryParamMissing(Uri uri) {         try {             mResolver.query(uri, null, null, null, null);             fail(""IllegalArgumentException is not thrown"");         } catch (IllegalArgumentException ex) {         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationRestrictions"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testApplicationRestrictions() throws Exception {         if (!mHasFeature) {             return;         }          installAppAsUser(DELEGATE_APP_APK, mUserId);         installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, mUserId);          try {             // Only the DPC can manage app restrictions by default.             executeDeviceTestClass("".ApplicationRestrictionsTest"");             executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");              // Letting the DELEGATE_APP_PKG manage app restrictions too.             changeApplicationRestrictionsManagingPackage(DELEGATE_APP_PKG);             executeAppRestrictionsManagingPackageTest(""testCanAccessApis"");             runDeviceTestsAsUser(DELEGATE_APP_PKG, "".GeneralDelegateTest"",                     ""testSettingAdminComponentNameThrowsException"", mUserId);              // The DPC should still be able to manage app restrictions normally.             executeDeviceTestClass("".ApplicationRestrictionsTest"");              // The app shouldn't be able to manage app restrictions for other users.             int parentUserId = getPrimaryUser();             if (parentUserId != mUserId) {                 installAppAsUser(DELEGATE_APP_APK, parentUserId);                 installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, parentUserId);                 runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsDelegateTest"",                         ""testCannotAccessApis"", parentUserId);             }              // Revoking the permission for DELEGAYE_APP_PKG to manage restrictions.             changeApplicationRestrictionsManagingPackage(null);             executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");              // The DPC should still be able to manage app restrictions normally.             executeDeviceTestClass("".ApplicationRestrictionsTest"");              if (isStatsdEnabled(getDevice())) {                 assertMetricsLogged(getDevice(), () -> {                     executeDeviceTestMethod("".ApplicationRestrictionsTest"",                             ""testSetApplicationRestrictions"");                 }, new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_RESTRICTIONS_VALUE)                         .setAdminPackageName(DEVICE_ADMIN_PKG)                         .setStrings(APP_RESTRICTIONS_TARGET_APP_PKG)                         .build());             }         } finally {             changeApplicationRestrictionsManagingPackage(null);         }     }      /**      * Returns a list of delegation tests that should run. Add delegations tests applicable to both      * device owner and profile owners to this method directly. DO or PO specific tests should be      * added to {@link #getAdditionalDelegationTests} in the subclass.      */     private Map<String, DevicePolicyEventWrapper[]> getDelegationTests() {         final Map<String, DevicePolicyEventWrapper[]> result = new HashMap<>();         result.put("".AppRestrictionsDelegateTest"", null);         result.put("".CertInstallDelegateTest"", null);         result.put("".BlockUninstallDelegateTest"", null);         result.put("".PermissionGrantDelegateTest"", null);         result.put("".PackageAccessDelegateTest"", null);         result.put("".EnableSystemAppDelegateTest"", null);         result.putAll(getAdditionalDelegationTests());         return result;     }      Map<String, DevicePolicyEventWrapper[]> getAdditionalDelegationTests() {         return Collections.<String, DevicePolicyEventWrapper[]>emptyMap();     }      /**      * Returns a list of delegation scopes that are needed to run delegation tests. Add scopes      * which are applicable to both device owner and profile owners to this method directly.      * DO or PO specific scopes should be added to {@link #getAdditionalDelegationScopes}      * in the subclass.      */     private List<String> getDelegationScopes() {         final List<String> result = new ArrayList<>(Arrays.asList(                 DELEGATION_APP_RESTRICTIONS,                 DELEGATION_CERT_INSTALL,                 DELEGATION_BLOCK_UNINSTALL,                 DELEGATION_PERMISSION_GRANT,                 DELEGATION_PACKAGE_ACCESS,                 DELEGATION_ENABLE_SYSTEM_APP,                 // CERT_SELECTION scope is in the list so it still participates GeneralDelegateTest.                 // But its main functionality test is driven by testDelegationCertSelection() and                 // hence missing from getDelegationTests() on purpose.                 DELEGATION_CERT_SELECTION                 ));         result.addAll(getAdditionalDelegationScopes());         return result;     }      List<String> getAdditionalDelegationScopes() {         return Collections.<String>emptyList();     }      /**      * General instructions to add a new delegation test:      * 1. Test primary delegation functionalitiy      *    Implment the delegate's positive/negate functionaility tests in a new test class      *    in CtsDelegateApp.apk. Main entry point are {@code testCanAccessApis} and      *    {@code testCannotAccessApis}. Once implemented, add the delegation scope and the test      *    class name to {@link #getDelegationScopes}, {@link #getDelegationTests} to make the test      *    run on DO/PO/PO on primary user.  If the test should only run on a subset of these      *    combinations, add them to the subclass's {@link #getAdditionalDelegationScopes} and      *    {@link #getDelegationScopes} intead.      *    <p>Alternatively, create a separate hostside method to drive the test, similar to      *    {@link #testDelegationCertSelection}. This is preferred if the delegated functionalities      *    already exist in another app.      * 2. Test access control of DO-only delegation      *    Add the delegation scope to      *    {@code DelegationTest#testDeviceOwnerOnlyDelegationsOnlyPossibleToBeSetByDeviceOwner} to      *    test that only DO can delegate this scope.      * 3. Test behaviour of exclusive delegation      *    Add the delegation scope to {@code DelegationTest#testExclusiveDelegations} to test that      *    the scope can only be delegatd to one app at a time.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testScreenCaptureDisabled_assist"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testScreenCaptureDisabled_assist() throws Exception {         if (!mHasFeature) {             return;         }         try {             // Install and enable assistant, notice that profile can't have assistant.             installAppAsUser(ASSIST_APP_APK, mPrimaryUserId);             waitForBroadcastIdle();             setVoiceInteractionService(ASSIST_INTERACTION_SERVICE);             setScreenCaptureDisabled_assist(mUserId, true /* disabled */);         } finally {             setScreenCaptureDisabled_assist(mUserId, false /* disabled */);             clearVoiceInteractionService();         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegatedCertInstaller"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testDelegatedCertInstaller() throws Exception {         if (!mHasFeature) {             return;         }          installAppAsUser(CERT_INSTALLER_APK, mUserId);          boolean isManagedProfile = (mPrimaryUserId != mUserId);           runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"", mUserId);         if (isStatsdEnabled(getDevice())) {             assertMetricsLogged(getDevice(), () -> {                 runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"",                         ""testInstallKeyPair"", mUserId);             }, new DevicePolicyEventWrapper.Builder(EventId.SET_CERT_INSTALLER_PACKAGE_VALUE)                     .setAdminPackageName(DEVICE_ADMIN_PKG)                     .setStrings(CERT_INSTALLER_PKG)                     .build());         }     }      public interface DelegatedCertInstallerTestAction {         void run() throws Exception;     }      protected void setUpDelegatedCertInstallerAndRunTests(DelegatedCertInstallerTestAction test)             throws Exception {         installAppAsUser(CERT_INSTALLER_APK, mUserId);          try {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",                     ""testManualSetCertInstallerDelegate"", mUserId);              test.run();         } finally {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",                     ""testManualClearCertInstallerDelegate"", mUserId);         }     }      // This test currently duplicates the testDelegatedCertInstaller, with one difference:     // The Delegated cert installer app is called directly rather than via intents from     // the DelegatedCertinstallerTest."	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testCannotRemoveUserIfRestrictionSet"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testCannotRemoveUserIfRestrictionSet() throws Exception {         // Outside of the primary user, setting DISALLOW_REMOVE_USER would not work.         if (!mHasFeature || !canCreateAdditionalUsers(1) || mUserId != getPrimaryUser()) {             return;         }         final int userId = createUser();         try {             changeUserRestrictionOrFail(DISALLOW_REMOVE_USER, true, mUserId);             assertFalse(getDevice().removeUser(userId));         } finally {             changeUserRestrictionOrFail(DISALLOW_REMOVE_USER, false, mUserId);             assertTrue(getDevice().removeUser(userId));         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testResetPasswordWithToken"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testResetPasswordWithToken() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // If ResetPasswordWithTokenTest for managed profile is executed before device owner and         // primary user profile owner tests, password reset token would have been disabled for         // the primary user, so executing ResetPasswordWithTokenTest on user 0 would fail. We allow         // this and do not fail the test in this case.         // This is the default test for MixedDeviceOwnerTest and MixedProfileOwnerTest,         // MixedManagedProfileOwnerTest overrides this method to execute the same test more strictly         // without allowing failures.         executeResetPasswordWithTokenTests(true);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetStorageEncryption"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testSetStorageEncryption() throws Exception {         if (!mHasFeature) {             return;         }         Map<String, String> params =                 ImmutableMap.of(IS_PRIMARY_USER_PARAM, String.valueOf(mUserId == mPrimaryUserId));         runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSecondaryLockscreen"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testSecondaryLockscreen() throws Exception {         if (!mHasFeature) {             return;         }         executeDeviceTestClass("".SecondaryLockscreenTest"");     }      private String getLaunchableSystemPackage() throws DeviceNotAvailableException {         final List<String> enabledSystemPackageNames = getEnabledSystemPackageNames();         for (String enabledSystemPackage : enabledSystemPackageNames) {             final String result = getDevice().executeShellCommand(                     String.format(RESOLVE_ACTIVITY_CMD, enabledSystemPackage));             if (!result.contains(""No activity found"")) {                 return enabledSystemPackage;             }         }         return null;     }      private List<String> getEnabledSystemPackageNames() throws DeviceNotAvailableException {         final String commandResult =                 getDevice().executeShellCommand(""pm list packages -e -s --user "" + mUserId);         final int prefixLength = ""package:"".length();         return new ArrayList<>(Arrays.asList(commandResult.split(""\n"")))                 .stream()                 .map(line -> line.substring(prefixLength))                 .collect(Collectors.toList());     }      /**      * Executes a test class on device. Prior to running, turn off background data usage      * restrictions, and restore the original restrictions after the test.      */     private void executeDeviceTestClassNoRestrictBackground(String className) throws Exception {         boolean originalRestriction = ensureRestrictBackgroundPolicyOff();         try {             executeDeviceTestClass(className);         } catch (Exception e) {             throw e;         } finally {             // if the test throws exception, still restore the policy             restoreRestrictBackgroundPolicyTo(originalRestriction);         }     }      protected void executeDeviceTestMethod(String className, String testName) throws Exception {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId);     }      protected void executeDeviceTestMethod(String className, String testName,             Map<String, String> params) throws Exception {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId, params);     }      protected void installAppPermissionAppAsUser()             throws FileNotFoundException, DeviceNotAvailableException {         installAppAsUser(PERMISSIONS_APP_APK, false, mUserId);     }      private void executeSuspendPackageTestMethod(String testName) throws Exception {         runDeviceTestsAsUser(INTENT_SENDER_PKG, "".SuspendPackageTest"",                 testName, mUserId);     }      private void executeAccountTest(String testName) throws DeviceNotAvailableException {         runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountManagementTest"",                 testName, mUserId);         // Send a home intent to dismiss an error dialog.         String command = ""am start -a android.intent.action.MAIN""                 + "" -c android.intent.category.HOME"";         CLog.i(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     }      private void executeAppRestrictionsManagingPackageTest(String testName) throws Exception {         runDeviceTestsAsUser(DELEGATE_APP_PKG,                 "".AppRestrictionsDelegateTest"", testName, mUserId);     }      private void executeDelegationTests(Map<String, DevicePolicyEventWrapper[]> delegationTests,             boolean positive)             throws Exception {         for (Map.Entry<String, DevicePolicyEventWrapper[]> entry : delegationTests.entrySet()) {             final String delegationTestClass = entry.getKey();             final DevicePolicyEventWrapper[] expectedMetrics = entry.getValue();             final DevicePolicyEventLogVerifier.Action testRun = () -> {                 runDeviceTestsAsUser(DELEGATE_APP_PKG, delegationTestClass,                         positive ? ""testCanAccessApis"" : ""testCannotAccessApis"", mUserId);             };             if (expectedMetrics != null && positive) {                 assertMetricsLogged(getDevice(), testRun, expectedMetrics);             } else {                 testRun.apply();             }         }     }      private void changeUserRestrictionOrFail(String key, boolean value, int userId)             throws DeviceNotAvailableException {         changeUserRestrictionOrFail(key, value, userId, DEVICE_ADMIN_PKG);     }      private void changeAccountManagement(String command, String accountType, int userId)             throws DeviceNotAvailableException {         changePolicyOrFail(command, ""--es extra-account-type "" + accountType, userId);     }      private void changeApplicationRestrictionsManagingPackage(String packageName)             throws DeviceNotAvailableException {         String packageNameExtra = (packageName != null)                 ? ""--es extra-package-name "" + packageName : """";         changePolicyOrFail(""set-app-restrictions-manager"", packageNameExtra, mUserId);     }      protected void setDelegatedScopes(String packageName, List<String> scopes)             throws DeviceNotAvailableException {         final String packageNameExtra = ""--es extra-package-name "" + packageName;         String scopesExtra = """";         if (scopes != null && scopes.size() > 0) {             scopesExtra = ""--esa extra-scopes-list "" + scopes.get(0);             for (int i = 1; i < scopes.size(); ++i) {                 scopesExtra += "","" + scopes.get(i);             }         }         final String extras = packageNameExtra + "" "" + scopesExtra;          changePolicyOrFail(""set-delegated-scopes"", extras, mUserId);     }      private void setInstallPackageAppOps(String packageName, boolean allowed, int userId)             throws DeviceNotAvailableException {         String command = ""appops set --user "" + userId + "" "" + packageName + "" "" +                 ""REQUEST_INSTALL_PACKAGES ""                 + (allowed ? ""allow"" : ""default"");         CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     }      private void changePolicyOrFail(String command, String extras, int userId)             throws DeviceNotAvailableException {         changePolicyOrFail(command, extras, userId, DEVICE_ADMIN_PKG);     }      /**      * Start SimpleActivity synchronously in a particular user.      */     protected void startSimpleActivityAsUser(int userId) throws Exception {         installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);         startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");     }      protected void setScreenCaptureDisabled(int userId, boolean disabled) throws Exception {         String testMethodName = disabled                 ? ""testSetScreenCaptureDisabled_true""                 : ""testSetScreenCaptureDisabled_false"";         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);          testMethodName = disabled                 ? ""testScreenCaptureImpossible""                 : ""testScreenCapturePossible"";          startSimpleActivityAsUser(userId);         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);         forceStopPackageForUser(TEST_APP_PKG, userId);     }      protected void setScreenCaptureDisabled_assist(int userId, boolean disabled) throws Exception {         // Set the policy.         String testMethodName = disabled                 ? ""testSetScreenCaptureDisabled_true""                 : ""testSetScreenCaptureDisabled_false"";         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);         testMethodName = disabled                 ? ""testScreenCaptureImpossible_assist""                 : ""testScreenCapturePossible_assist"";          // Check whether the VoiceInteractionService can retrieve the screenshot.         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);          if (userId == mPrimaryUserId) {             // If testing for user-0, also make sure the existing screen can't be captured.             runDeviceTestsAsUser(                     DEVICE_ADMIN_PKG,                     "".AssistScreenCaptureDisabledTest"",                     testMethodName,                     mPrimaryUserId);         }          // Make sure the foreground activity is from the target user.         startSimpleActivityAsUser(userId);          runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG,                 "".AssistScreenCaptureDisabledTest"",                 testMethodName,                 mPrimaryUserId);     }      /**      * Allows packageName to manage notification policy configuration, which      * includes toggling zen mode.      */     private void allowNotificationPolicyAccess(String packageName, int userId)             throws DeviceNotAvailableException {         List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);         if (!enabledPackages.contains(packageName)) {             enabledPackages.add(packageName);             setEnabledNotificationPolicyPackages(enabledPackages, userId);         }     }      /**      * Disallows packageName to manage notification policy configuration, which      * includes toggling zen mode.      */     private void disallowNotificationPolicyAccess(String packageName, int userId)             throws DeviceNotAvailableException {         List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);         if (enabledPackages.contains(packageName)) {             enabledPackages.remove(packageName);             setEnabledNotificationPolicyPackages(enabledPackages, userId);         }     }      private void setEnabledNotificationPolicyPackages(List<String> packages, int userId)             throws DeviceNotAvailableException {         getDevice().setSetting(userId, ""secure"", ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES,                 String.join("":"", packages));     }      private List<String> getEnabledNotificationPolicyPackages(int userId)             throws DeviceNotAvailableException {         String settingValue = getDevice().getSetting(userId, ""secure"",                 ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES);         if (settingValue == null) {             return new ArrayList<String>();         }         return new ArrayList<String>(Arrays.asList(settingValue.split("":|\n"")));     }      protected void setVoiceInteractionService(String componentName)             throws DeviceNotAvailableException {         getDevice().setSetting(                 mPrimaryUserId, ""secure"", ""voice_interaction_service"", componentName);         getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_structure_enabled"", ""1"");         getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_screenshot_enabled"", ""1"");     }      protected void clearVoiceInteractionService() throws DeviceNotAvailableException {         getDevice().executeShellCommand(""settings delete secure voice_interaction_service"");     }      /**      * Ensure that restrict background policy is off.      * Returns the original status of restrict background policy.      */     private boolean ensureRestrictBackgroundPolicyOff() throws Exception {         String restriction = getDevice().executeShellCommand(RESTRICT_BACKGROUND_GET_CMD);         if (restriction.contains(""enabled"")) {             getDevice().executeShellCommand(RESTRICT_BACKGROUND_OFF_CMD);             return true;         }         return false;     }      private void restoreRestrictBackgroundPolicyTo(boolean restricted) throws Exception {         getDevice().executeShellCommand(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_SkipSetupWizard"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testCreateAndManageUser_SkipSetupWizard() throws Exception {         runCrossUserVerification(DevicePolicyManager.SKIP_SETUP_WIZARD, ""assertSkipSetupWizard"");         PrimaryUserService.assertCrossUserCallArrived();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_Affiliated"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testCreateAndManageUser_Affiliated() throws Exception {         runCrossUserVerification(/* createAndManageUserFlags */ 0, ""assertAffiliatedUser"");         PrimaryUserService.assertCrossUserCallArrived();     }      @SuppressWarnings(""unused"")     private static void assertEphemeralUser(Context context,             DevicePolicyManager devicePolicyManager, ComponentName componentName) {         assertTrue(""not ephemeral user"", devicePolicyManager.isEphemeralUser(componentName));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_Ephemeral"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testCreateAndManageUser_Ephemeral() throws Exception {         runCrossUserVerification(DevicePolicyManager.MAKE_USER_EPHEMERAL, ""assertEphemeralUser"");         PrimaryUserService.assertCrossUserCallArrived();     }      @SuppressWarnings(""unused"")     private static void assertAllSystemAppsInstalled(Context context,             DevicePolicyManager devicePolicyManager, ComponentName componentName) {         PackageManager packageManager = context.getPackageManager();         // First get a set of installed package names         Set<String> installedPackageNames = packageManager                 .getInstalledApplications(/* flags */ 0)                 .stream()                 .map(applicationInfo -> applicationInfo.packageName)                 .collect(Collectors.toSet());         // Then filter all package names by those that are not installed         Set<String> uninstalledPackageNames = packageManager                 .getInstalledApplications(PackageManager.MATCH_UNINSTALLED_PACKAGES)                 .stream()                 .map(applicationInfo -> applicationInfo.packageName)                 .filter(((Predicate<String>) installedPackageNames::contains).negate())                 .collect(Collectors.toSet());         // Assert that all apps are installed         assertTrue(""system apps not installed: "" + uninstalledPackageNames,                 uninstalledPackageNames.isEmpty());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LeaveAllSystemApps"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testCreateAndManageUser_LeaveAllSystemApps() throws Exception {         runCrossUserVerification(                 DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED, ""assertAllSystemAppsInstalled"");         PrimaryUserService.assertCrossUserCallArrived();     }      private UserHandle runCrossUserVerification(int createAndManageUserFlags, String methodName) {         String testUserName = ""TestUser_"" + System.currentTimeMillis();          // Set affiliation id to allow communication.         mDevicePolicyManager.setAffiliationIds(getWho(), Collections.singleton(AFFILIATION_ID));          // Pack the affiliation id in a bundle so the secondary user can get it.         PersistableBundle bundle = new PersistableBundle();         bundle.putString(EXTRA_AFFILIATION_ID, AFFILIATION_ID);         bundle.putString(EXTRA_METHOD_NAME, methodName);          UserHandle userHandle = mDevicePolicyManager.createAndManageUser(                 getWho(),                 testUserName,                 SecondaryUserAdminReceiver.getComponentName(getContext()),                 bundle,                 createAndManageUserFlags);         Log.d(TAG, ""User create: "" + userHandle);         assertEquals(UserManager.USER_OPERATION_SUCCESS,                 mDevicePolicyManager.startUserInBackground(getWho(), userHandle));          return userHandle;     }      // createAndManageUser should circumvent the DISALLOW_ADD_USER restriction"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testUserAddedOrRemovedBroadcasts"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testUserAddedOrRemovedBroadcasts() throws InterruptedException {         LocalBroadcastReceiver receiver = new LocalBroadcastReceiver();         LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(                 getContext());         localBroadcastManager.registerReceiver(receiver,                 new IntentFilter(BasicAdminReceiver.ACTION_USER_ADDED));         UserHandle userHandle;         try {             userHandle = mDevicePolicyManager.createAndManageUser(getWho(), ""Test User"", getWho(),                     null, 0);             assertNotNull(userHandle);             assertEquals(userHandle, receiver.waitForBroadcastReceived());         } finally {             localBroadcastManager.unregisterReceiver(receiver);         }         localBroadcastManager.registerReceiver(receiver,                 new IntentFilter(BasicAdminReceiver.ACTION_USER_REMOVED));         try {             assertTrue(mDevicePolicyManager.removeUser(getWho(), userHandle));             assertEquals(userHandle, receiver.waitForBroadcastReceived());         } finally {             localBroadcastManager.unregisterReceiver(receiver);         }     }      static class LocalBroadcastReceiver extends BroadcastReceiver {         private LinkedBlockingQueue<UserHandle> mQueue = new LinkedBlockingQueue<>(1);          @Override         public void onReceive(Context context, Intent intent) {             UserHandle userHandle = intent.getParcelableExtra(BasicAdminReceiver.EXTRA_USER_HANDLE);             Log.d(TAG, ""broadcast receiver received "" + intent + "" with userHandle ""                     + userHandle);             mQueue.offer(userHandle);          }          UserHandle waitForBroadcastReceived() throws InterruptedException {             return mQueue.poll(BROADCAST_TIMEOUT, TimeUnit.MILLISECONDS);         }     }      public static final class PrimaryUserService extends Service {         private static final Semaphore sSemaphore = new Semaphore(0);         private static String sError = null;          private final ICrossUserService.Stub mBinder = new ICrossUserService.Stub() {             public void onEnabledCalled(String error) {                 Log.d(TAG, ""onEnabledCalled on primary user"");                 sError = error;                 sSemaphore.release();             }         };          @Override         public IBinder onBind(Intent intent) {             return mBinder;         }          static void assertCrossUserCallArrived() throws Exception {             assertTrue(sSemaphore.tryAcquire(ON_ENABLED_TIMEOUT_SECONDS, TimeUnit.SECONDS));             if (sError != null) {                 throw new Exception(sError);             }         }     }      public static final class SecondaryUserAdminReceiver extends DeviceAdminReceiver {         @Override         public void onEnabled(Context context, Intent intent) {             Log.d(TAG, ""onEnabled called"");             DevicePolicyManager dpm = context.getSystemService(DevicePolicyManager.class);             ComponentName who = getComponentName(context);              // Set affiliation ids             dpm.setAffiliationIds(                     who, Collections.singleton(intent.getStringExtra(EXTRA_AFFILIATION_ID)));              String error = null;             try {                 Method method = CreateAndManageUserTest.class.getDeclaredMethod(                         intent.getStringExtra(EXTRA_METHOD_NAME), Context.class,                         DevicePolicyManager.class, ComponentName.class);                 method.setAccessible(true);                 method.invoke(null, context, dpm, who);             } catch (NoSuchMethodException | IllegalAccessException e) {                 error = e.toString();             } catch (InvocationTargetException e) {                 error = e.getCause().toString();             }              // Call all affiliated users             final List<UserHandle> targetUsers = dpm.getBindDeviceAdminTargetUsers(who);             assertEquals(1, targetUsers.size());             pingTargetUser(context, dpm, targetUsers.get(0), error);         }          private void pingTargetUser(Context context, DevicePolicyManager dpm, UserHandle target,                 String error) {             Log.d(TAG, ""Pinging target: "" + target);             final ServiceConnection serviceConnection = new ServiceConnection() {                 @Override                 public void onServiceConnected(ComponentName name, IBinder service) {                     Log.d(TAG, ""onServiceConnected is called in "" + Thread.currentThread().getName());                     ICrossUserService crossUserService = ICrossUserService                             .Stub.asInterface(service);                     try {                         crossUserService.onEnabledCalled(error);                     } catch (RemoteException re) {                         Log.e(TAG, ""Error when calling primary user"", re);                         // Do nothing, primary user will time out                     }                 }                  @Override                 public void onServiceDisconnected(ComponentName name) {                     Log.d(TAG, ""onServiceDisconnected is called"");                 }             };             final Intent serviceIntent = new Intent(context, PrimaryUserService.class);             assertTrue(dpm.bindDeviceAdminServiceAsUser(                     getComponentName(context),                     serviceIntent,                     serviceConnection,                     Context.BIND_AUTO_CREATE,                     target));         }          public static ComponentName getComponentName(Context context) {             return new ComponentName(context, SecondaryUserAdminReceiver.class);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_packageNotWhitelisted_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_packageNotWhitelisted_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         mProfileId = createManagedProfile(mPrimaryUserId);         getDevice().startUser(mProfileId, /*waitFlag= */true);         installAppAsUser(MANAGED_PROFILE_APK, mProfileId);         setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                 mProfileId);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse()             throws Exception {         installAppAsUser(TEST_WITH_NO_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_NO_REQUESTED_PERMISSION_APK);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_NO_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         mProfileId = createManagedProfile(mPrimaryUserId);         getDevice().startUser(mProfileId, /* waitFlag= */ true);         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mProfileId);         final String receiverComponentName =                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE + ""/""                         + TEST_WITH_REQUESTED_PERMISSION_RECEIVER_TEST_CLASS;         setProfileOwnerOrFail(receiverComponentName, mProfileId);         runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testSetCrossProfilePackages_noAsserts"",                 mProfileId,                 createCrossProfilePackageParam(TEST_WITH_REQUESTED_PERMISSION_PACKAGE));          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanRequestInteractAcrossProfiles_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);         addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);         addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"",                 mProfileId,                 Collections.EMPTY_MAP);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	"public void testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException()             throws Exception {         installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);          runDeviceTestsAsUser(                 TEST_WITH_REQUESTED_PERMISSION_PACKAGE,                 TEST_WITH_REQUESTED_PERMISSION_CLASS,                 ""testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"",                 mProfileId,                 Collections.EMPTY_MAP);     }      private void addManagedProfileAndInstallRequiredPackages(String testPackage) throws Exception {         mProfileId = createManagedProfile(mPrimaryUserId);         getDevice().startUser(mProfileId, /*waitFlag= */true);          installAppAsUser(testPackage, mProfileId);          installAppAsUser(MANAGED_PROFILE_APK, mProfileId);         setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                 mProfileId);     }      private void addDefaultCrossProfilePackage(int userId, String packageName)             throws Exception {         runDeviceTestsAsUser(                 MANAGED_PROFILE_PKG,                 "".CrossProfileUtils"",                 ""testSetCrossProfilePackages"",                 userId,                 createCrossProfilePackageParam(packageName));     }      private Map<String, String> createCrossProfilePackageParam(String packageName) {         return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	"/*  *.  */ package com.android.cts.devicepolicy;  import static org.junit.Assert.assertTrue;  import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Test;  import javax.annotation.Nonnull; import javax.annotation.Nullable;  public class UserRestrictionsTest extends BaseDevicePolicyTest {     private static final String DEVICE_ADMIN_PKG = ""com.android.cts.deviceandprofileowner"";     private static final String DEVICE_ADMIN_APK = ""CtsDeviceAndProfileOwnerApp.apk"";     private static final String ADMIN_RECEIVER_TEST_CLASS             = "".BaseDeviceAdminTest$BasicAdminReceiver"";      private static final String GLOBAL_RESTRICTIONS_TEST_CLASS =             ""userrestrictions.ProfileGlobalRestrictionsTest"";     private static final String SET_GLOBAL_RESTRICTIONS_TEST =             ""testSetProfileGlobalRestrictions"";     private static final String CLEAR_GLOBAL_RESTRICTIONS_TEST =             ""testClearProfileGlobalRestrictions"";     private static final String ENSURE_GLOBAL_RESTRICTIONS_TEST =             ""testProfileGlobalRestrictionsEnforced"";     private static final String ENSURE_NO_GLOBAL_RESTRICTIONS_TEST =             ""testProfileGlobalRestrictionsNotEnforced"";      private boolean mRemoveOwnerInTearDown;     private int mDeviceOwnerUserId;      @Override     public void setUp() throws Exception {         super.setUp();          mRemoveOwnerInTearDown = false;         mDeviceOwnerUserId = mPrimaryUserId;     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             if (mRemoveOwnerInTearDown) {                 assertTrue(""Failed to clear owner"",                         removeAdmin(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                                 mDeviceOwnerUserId));                 runTests(""userrestrictions.CheckNoOwnerRestrictionsTest"", mDeviceOwnerUserId);             }              // DO/PO might have set DISALLOW_REMOVE_USER, so it needs to be done after removing             // them.             removeTestUsers();             getDevice().uninstallPackage(DEVICE_ADMIN_PKG);         }         super.tearDown();     }      private void runTests(@Nonnull String className,             @Nullable String method, int userId) throws DeviceNotAvailableException {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, ""."" + className, method, userId);     }      private void runTests(@Nonnull String className, int userId)             throws DeviceNotAvailableException {         runTests(className, null, userId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_primaryProfileOwnerOnly"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	"public void testUserRestrictions_primaryProfileOwnerOnly() throws Exception {         if (!mHasFeature) {             return;         }         if (hasUserSplit()) {             // Can't set PO on user-0 in this mode.             return;         }          setPoAsUser(mDeviceOwnerUserId);          runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",                 ""testDefaultRestrictions"", mDeviceOwnerUserId);         runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",                 ""testSetAllRestrictions"", mDeviceOwnerUserId);         runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",                 ""testBroadcast"", mDeviceOwnerUserId);     }      // Checks restrictions for managed user (NOT managed profile)."	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_layering_profileOwnerNoLeaking"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	"public void testUserRestrictions_layering_profileOwnerNoLeaking() throws Exception {         if (!mHasFeature || !mSupportsMultiUser) {             return;         }         if (hasUserSplit()) {             // Can't set PO on user-0 in this mode.             return;         }         // Set PO on user 0         setPoAsUser(mDeviceOwnerUserId);          // Create another user and set PO.         final int secondaryUserId = createUser();         setPoAsUser(secondaryUserId);          // Let user-0 PO sets all restrictions.         runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",                 ""testSetAllRestrictions"", mDeviceOwnerUserId);          // Secondary users shouldn't see any of them. Leaky user restrictions are excluded.         runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",                 ""testDefaultAndLeakyRestrictions"", secondaryUserId);     }      /**      * DO sets profile global restrictions (only ENSURE_VERIFY_APPS), should affect all      * users (not a particularly special case but to be sure).      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_ProfileGlobalRestrictionsAsPo"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	"public void testUserRestrictions_ProfileGlobalRestrictionsAsPo() throws Exception {         if (!mHasFeature || !mSupportsMultiUser || !mHasManagedUserFeature) {             return;         }         // Set PO on user 0         setPoAsUser(mDeviceOwnerUserId);          // Create another user with PO.         final int secondaryUserId = createManagedProfile(mDeviceOwnerUserId /* parentUserId */);         setPoAsUser(secondaryUserId);          final int[] usersToCheck = {mDeviceOwnerUserId, secondaryUserId};          // Check the case when primary user's PO sets the restriction.         setAndCheckProfileGlobalRestriction(mDeviceOwnerUserId, usersToCheck);          // Check the case when managed profile owner sets the restriction.         setAndCheckProfileGlobalRestriction(secondaryUserId, usersToCheck);     }      /** Installs admin package and makes it a profile owner for a given user. */     private void setPoAsUser(int userId) throws Exception {         installAppAsUser(DEVICE_ADMIN_APK, /* grantPermssions= */true,                 /* dontKillApp= */ true, userId);         assertTrue(""Failed to set profile owner"",                 setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                         userId, /* expectFailure */ false));         // If PO is not in primary user, it will be removed with the user.         if (userId == mDeviceOwnerUserId) {             mRemoveOwnerInTearDown = true;         }     }      /** Installs admin package and makes it a device owner. */     private void setDo() throws Exception {         installAppAsUser(DEVICE_ADMIN_APK, mDeviceOwnerUserId);         assertTrue(""Failed to set device owner"",                 setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                         mDeviceOwnerUserId, /*expectFailure*/ false));         mRemoveOwnerInTearDown = true;     }      /**      * Sets user restriction and checks that it applies to all users.      * @param enforcingUserId user who should set/clear the restriction, should be either      *        primary or secondary user id and should have device or profile owner active.      * @param usersToCheck users that should have this restriction enforced.      */     private void setAndCheckProfileGlobalRestriction(int enforcingUserId, int usersToCheck[])             throws Exception {         // Always try to clear the restriction to avoid undesirable side effects.         try {             // Set the restriction.             runGlobalRestrictionsTest(SET_GLOBAL_RESTRICTIONS_TEST, enforcingUserId);             // Check that the restriction is in power.             for (int userId : usersToCheck) {                 runGlobalRestrictionsTest(ENSURE_GLOBAL_RESTRICTIONS_TEST, userId);             }         } finally {             // Clear the restriction.             runGlobalRestrictionsTest(CLEAR_GLOBAL_RESTRICTIONS_TEST, enforcingUserId);             // Check that the restriction is not in power anymore.             for (int userId : usersToCheck) {                 runGlobalRestrictionsTest(ENSURE_NO_GLOBAL_RESTRICTIONS_TEST, userId);             }         }     }      /** Convenience method to run global user restrictions tests. */     private void runGlobalRestrictionsTest(String testMethodName, int userId) throws Exception {         runTests(GLOBAL_RESTRICTIONS_TEST_CLASS, testMethodName, userId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest; import android.platform.test.annotations.LargeTest;  import com.android.cts.devicepolicy.annotations.LockSettingsTest; import com.android.cts.devicepolicy.annotations.PermissionsTest; import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Test;  /**  * Set of tests for managed profile owner use cases that also apply to device owners.  * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.  */ public class MixedManagedProfileOwnerTest extends DeviceAndProfileOwnerTest {      private static final String CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS =             DEVICE_ADMIN_PKG + "".ClearProfileOwnerNegativeTest"";     private static final String FEATURE_WIFI = ""android.hardware.wifi"";      private int mParentUserId = -1;      @Override     public void setUp() throws Exception {         super.setUp();          // We need managed users to be supported in order to create a profile of the user owner.         mHasFeature &= hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             mParentUserId = mPrimaryUserId;             createManagedProfile();         }     }      private void createManagedProfile() throws Exception {         mUserId = createManagedProfile(mParentUserId);         switchUser(mParentUserId);         startUserAndWait(mUserId);          installAppAsUser(DEVICE_ADMIN_APK, mUserId);         setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);         startUserAndWait(mUserId);     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             removeUser(mUserId);         }         super.tearDown();     }      // Most tests for this class are defined in DeviceAndProfileOwnerTest      /**      * Verify that screenshots are still possible for activities in the primary user when the policy      * is set on the profile owner.      */     @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_allowedPrimaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testScreenCaptureDisabled_allowedPrimaryUser() throws Exception {         if (!mHasFeature) {             return;         }         // disable screen capture in profile         setScreenCaptureDisabled(mUserId, true);          // start the ScreenCaptureDisabledActivity in the parent         installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);         startSimpleActivityAsUser(mParentUserId);         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testScreenCapturePossible"");     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_assist_allowedPrimaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testScreenCaptureDisabled_assist_allowedPrimaryUser() throws Exception {         if (!mHasFeature) {             return;         }         // disable screen capture in profile         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testSetScreenCaptureDisabled_true"");         try {             // Install and enable assistant in personal side.             installAppAsUser(ASSIST_APP_APK, mParentUserId);             waitForBroadcastIdle();             setVoiceInteractionService(ASSIST_INTERACTION_SERVICE);              // Start an activity in parent user.             installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);             waitForBroadcastIdle();             startSimpleActivityAsUser(mParentUserId);              // Verify assistant app can't take a screenshot.             runDeviceTestsAsUser(                     DEVICE_ADMIN_PKG,                     "".AssistScreenCaptureDisabledTest"",                     ""testScreenCapturePossible_assist"",                     mPrimaryUserId);         } finally {             // enable screen capture in profile             executeDeviceTestMethod(                     "".ScreenCaptureDisabledTest"",                     ""testSetScreenCaptureDisabled_false"");             clearVoiceInteractionService();         }     }      @Override"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testAudioRestriction"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testAudioRestriction() throws Exception {         // DISALLOW_UNMUTE_MICROPHONE and DISALLOW_ADJUST_VOLUME can only be set by device owners         // and profile owners on the primary user.     }      /** VPN tests don't require physical device for managed profile, thus overriding. */     @FlakyTest     @Override"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.intent.sender.AppLinkTest"	"testReceivedByAppLinkActivityInPrimary"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/AppLinkTest.java"	""	"public void testReceivedByAppLinkActivityInPrimary() throws Exception {         checkHttpIntentResult(APP_LINK_ACTIVITY, false);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	"/*  *  */ package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest;  import org.junit.Test;  /**  * This class tests the provisioning flow with an APK that declares a single receiver with  * BIND_DEVICE_ADMIN permissions, which was a requirement for the app sending the  * ACTION_PROVISION_MANAGED_PROFILE intent before Android M.  */ public class ManagedProfileProvisioningSingleAdminTest extends BaseDevicePolicyTest {      private static final String SINGLE_ADMIN_PKG = ""com.android.cts.devicepolicy.singleadmin"";     private static final String SINGLE_ADMIN_APP_APK = ""CtsDevicePolicySingleAdminTestApp.apk"";      private int mProfileUserId;      @Override     public void setUp() throws Exception {         super.setUp();          // We need multi user to be supported in order to create a profile of the user owner.         mHasFeature = mHasFeature && hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             installAppAsUser(SINGLE_ADMIN_APP_APK, mPrimaryUserId);             mProfileUserId = 0;         }     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             if (mProfileUserId != 0) {                 removeUser(mProfileUserId);             }             getDevice().uninstallPackage(SINGLE_ADMIN_PKG);         }         super.tearDown();     }      @FlakyTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	"public void testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME() throws Exception {         if (!mHasFeature) {             return;         }          runDeviceTestsAsUser(SINGLE_ADMIN_PKG, "".ProvisioningSingleAdminTest"",                 ""testManagedProfileProvisioning"", mPrimaryUserId);          mProfileUserId = getFirstManagedProfileUserId();     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"CrossProfileIntentFilterTest"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	"public void test/*  *.  */ package com.android.cts.managedprofile;  import static com.android.cts.managedprofile.BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT; import static com.google.common.truth.Truth.assertThat;  import android.app.admin.DevicePolicyManager; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.content.pm.PackageManager; import android.content.pm.ResolveInfo; import android.test.ActivityInstrumentationTestCase2;  import androidx.test.InstrumentationRegistry;  import java.util.List;  /**  * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API.  *  * <p>Note that it expects that there is an activity responding to {@code PrimaryUserActivity  * .ACTION} in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary  * profile, and one to {@code AllUsersActivity.ACTION} in both profiles.  */ public class CrossProfileIntentFilterTest extends ActivityInstrumentationTestCase2<TestActivity> {      private PackageManager mPackageManager;     private DevicePolicyManager mDevicePolicyManager;      public CrossProfileIntentFilterTest() {         super(TestActivity.class);     }      @Override     protected void setUp() throws Exception {         super.setUp();         // As the way to access Instrumentation is changed in the new runner, we need to inject it         // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will         // be marked as deprecated and replaced with ActivityTestRule.         injectInstrumentation(InstrumentationRegistry.getInstrumentation());         mPackageManager = getActivity().getPackageManager();         mDevicePolicyManager = (DevicePolicyManager)                 getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);     }      @Override     protected void tearDown() throws Exception {         mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testClearCrossProfileIntentFilters"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	"public void testClearCrossProfileIntentFilters() {         IntentFilter testIntentFilter = new IntentFilter();         testIntentFilter.addAction(PrimaryUserActivity.ACTION);         mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,                 testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);         final List<ResolveInfo> activities =                 mPackageManager.queryIntentActivities(                         new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);         assertThat(activities).hasSize(1);         assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();          mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);          assertTrue(mPackageManager.queryIntentActivities(                 new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).isEmpty());         getActivity().startActivity(ManagedProfileActivity.ACTION);         assertTrue(getActivity().checkActivityStarted());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_primary"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	"public void testAddCrossProfileIntentFilter_primary() {         assertEquals(0, mPackageManager.queryIntentActivities(                 new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).size());          IntentFilter testIntentFilter = new IntentFilter();         testIntentFilter.addAction(PrimaryUserActivity.ACTION);         mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,                 testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);          final List<ResolveInfo> activities =                 mPackageManager.queryIntentActivities(                         new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);         assertThat(activities).hasSize(1);         assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();         getActivity().startActivity(PrimaryUserActivity.ACTION);         assertTrue(getActivity().checkActivityStarted());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnership"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTransferOwnership() throws Exception {         if (!mHasFeature) {             return;         }          final boolean hasManagedProfile = (mUserId != mPrimaryUserId);         final String expectedManagementType = hasManagedProfile ? ""profile-owner"" : ""device-owner"";         assertMetricsLogged(getDevice(), () -> {             runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG, mOutgoingTestClassName,                     ""testTransferOwnership"", mUserId);         }, new DevicePolicyEventWrapper.Builder(EventId.TRANSFER_OWNERSHIP_VALUE)                 .setAdminPackageName(TRANSFER_OWNER_OUTGOING_PKG)                 .setStrings(TRANSFER_OWNER_INCOMING_PKG, expectedManagementType)                 .build());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsBundleNullNoTransfer"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testIsBundleNullNoTransfer() throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,                 mOutgoingTestClassName,                 ""testIsBundleNullNoTransfer"", mUserId);     }      protected int setupManagedProfileOnDeviceOwner(String apkName, String adminReceiverClassName)             throws Exception {         return setupManagedProfile(apkName, adminReceiverClassName);     }      protected int setupManagedProfile(String apkName, String adminReceiverClassName)             throws Exception {         final int userId = createManagedProfile(mPrimaryUserId);         installAppAsUser(apkName, userId);         if (!setProfileOwner(adminReceiverClassName, userId, false)) {             removeAdmin(TRANSFER_OWNER_OUTGOING_TEST_RECEIVER, userId);             getDevice().uninstallPackage(TRANSFER_OWNER_OUTGOING_PKG);             fail(""Failed to set device owner"");             return -1;         }         startUserAndWait(userId);         return userId;     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTargetDeviceAdminServiceBound"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	"public void testTargetDeviceAdminServiceBound() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             mOutgoingTestClassName,             ""testTransferOwnership"", mUserId);         assertServiceRunning(INCOMING_ADMIN_SERVICE_FULL_NAME);     }      private void assertServiceRunning(String serviceName) throws DeviceNotAvailableException {         final String result = getDevice().executeShellCommand(                 String.format(""dumpsys activity services %s"", serviceName));         assertThat(result).contains(""app=ProcessRecord"");     }      protected void setSameAffiliationId(int profileUserId, String testClassName)         throws Exception {         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             testClassName,             ""testSetAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,             testClassName,             ""testSetAffiliationId1"", profileUserId);     }      protected void assertAffiliationIdsAreIntact(int profileUserId,         String testClassName) throws Exception {         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,             testClassName,             ""testIsAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,             testClassName,             ""testIsAffiliationId1"", profileUserId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"wakeupAndDismissKeyguard"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"package com.android.cts.devicepolicy;  import static com.google.common.truth.Truth.assertThat;  import android.platform.test.annotations.LargeTest;  import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Test;  import java.io.FileNotFoundException; import java.util.HashMap; import java.util.Map;  /**  * CTS to verify toggling quiet mode in work profile by using  * {@link android.os.UserManager#requestQuietModeEnabled(boolean, android.os.UserHandle)}.  */ public class QuietModeHostsideTest extends BaseDevicePolicyTest {     private static final String TEST_PACKAGE = ""com.android.cts.launchertests"";     private static final String TEST_CLASS = "".QuietModeTest"";     private static final String PARAM_TARGET_USER = ""TARGET_USER"";     private static final String PARAM_ORIGINAL_DEFAULT_LAUNCHER = ""ORIGINAL_DEFAULT_LAUNCHER"";     private static final String TEST_APK = ""CtsLauncherAppsTests.apk"";      private static final String TEST_LAUNCHER_PACKAGE = ""com.android.cts.launchertests.support"";     private static final String TEST_LAUNCHER_APK = ""CtsLauncherAppsTestsSupport.apk"";     private static final String ENABLED_TEST_APK = ""CtsCrossProfileEnabledApp.apk"";     private static final String USER_ENABLED_TEST_APK = ""CtsCrossProfileUserEnabledApp.apk"";     private static final String ENABLED_NO_PERMS_TEST_APK = ""CtsCrossProfileEnabledNoPermsApp.apk"";     private static final String QUIET_MODE_ENABLED_TEST_APK = ""CtsModifyQuietModeEnabledApp.apk"";     private static final String NOT_ENABLED_TEST_APK = ""CtsCrossProfileNotEnabledApp.apk"";     private static final String ENABLED_TEST_PACKAGE = ""com.android.cts.crossprofileenabledapp"";     private static final String USER_ENABLED_TEST_PACKAGE =             ""com.android.cts.crossprofileuserenabledapp"";     private static final String ENABLED_NO_PERMS_TEST_PACKAGE =             ""com.android.cts.crossprofileenablednopermsapp"";     private static final String NOT_ENABLED_TEST_PACKAGE =             ""com.android.cts.crossprofilenotenabledapp"";     private static final String QUIET_MODE_ENABLED_TEST_PACKAGE =             ""com.android.cts.modifyquietmodeenabledapp"";      private int mProfileId;     private String mOriginalLauncher;      @Override     public void setUp() throws Exception {         super.setUp();          mHasFeature = mHasFeature & hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             mOriginalLauncher = getDefaultLauncher();              installAppAsUser(TEST_APK, mPrimaryUserId);             installAppAsUser(TEST_LAUNCHER_APK, mPrimaryUserId);              waitForBroadcastIdle();              createAndStartManagedProfile();             installAppAsUser(TEST_APK, mProfileId);              waitForBroadcastIdle();             wakeupAndDismissKeyguard();         }     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             uninstallRequiredApps();             getDevice().uninstallPackage(TEST_LAUNCHER_PACKAGE);         }         super.tearDown();     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_defaultForegroundLauncher"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"public void testQuietMode_defaultForegroundLauncher() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // Add a lockscreen to test the case that profile with unified challenge can still         // be turned on without asking the user to enter the lockscreen password.         changeUserCredential(/* newCredential= */ TEST_PASSWORD, /* oldCredential= */ null,                 mPrimaryUserId);         try {             runDeviceTestsAsUser(                     TEST_PACKAGE,                     TEST_CLASS,                     ""testTryEnableQuietMode_defaultForegroundLauncher"",                     mPrimaryUserId,                     createParams(mProfileId));         } finally {             changeUserCredential(/* newCredential= */ null, /* oldCredential= */ TEST_PASSWORD,                     mPrimaryUserId);         }     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_notForegroundLauncher"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"public void testQuietMode_notForegroundLauncher() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(                 TEST_PACKAGE,                 TEST_CLASS,                 ""testTryEnableQuietMode_notForegroundLauncher"",                 mPrimaryUserId,                 createParams(mProfileId));     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_notDefaultLauncher"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"public void testQuietMode_notDefaultLauncher() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(                 TEST_PACKAGE,                 TEST_CLASS,                 ""testTryEnableQuietMode_notDefaultLauncher"",                 mPrimaryUserId,                 createParams(mProfileId));     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testBroadcastManagedProfileAvailable_withCrossProfileAppsOp"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"public void testBroadcastManagedProfileAvailable_withCrossProfileAppsOp() throws Exception {         checkBroadcastManagedProfileAvailable(/* withCrossProfileAppOps= */ true);     }      private void checkBroadcastManagedProfileAvailable(boolean withCrossProfileAppOps)             throws Exception {         if (!mHasFeature) {             return;         }         installCrossProfileApps();         if (withCrossProfileAppOps) {             enableCrossProfileAppsOp();         }         clearLogcat();         runDeviceTestsAsUser(                 TEST_PACKAGE,                 TEST_CLASS,                 ""testTryEnableQuietMode"",                 mPrimaryUserId,                 createParams(mProfileId));         waitForBroadcastIdle();         verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_UNAVAILABLE"",                 /* needPermissions= */ !withCrossProfileAppOps);          clearLogcat();         runDeviceTestsAsUser(                 TEST_PACKAGE,                 TEST_CLASS,                 ""testTryDisableQuietMode"",                 mPrimaryUserId,                 createParams(mProfileId));         waitForBroadcastIdle();         verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_AVAILABLE"",                 /* needPermissions= */ !withCrossProfileAppOps);          clearLogcat();         removeUser(mProfileId);         waitForBroadcastIdle();         verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_REMOVED"",                 /* needPermissions= */ false);     }      private void clearLogcat() throws DeviceNotAvailableException {         getDevice().executeAdbCommand(""logcat"", ""-c"");     }      private void verifyBroadcastSent(String actionName, boolean needPermissions)             throws DeviceNotAvailableException {         final String result = getDevice().executeAdbCommand(""logcat"", ""-d"");         assertThat(result).contains(                 buildReceivedBroadcastRegex(actionName, ""CrossProfileEnabledAppReceiver""));         assertThat(result).contains(                 buildReceivedBroadcastRegex(actionName, ""CrossProfileUserEnabledAppReceiver""));         String noPermsString = buildReceivedBroadcastRegex(actionName,                 ""CrossProfileEnabledNoPermsAppReceiver"");         if (needPermissions) {             assertThat(result).doesNotContain(noPermsString);         } else {             assertThat(result).contains(noPermsString);         }         assertThat(result).doesNotContain(                 buildReceivedBroadcastRegex(actionName,                         ""CrossProfileNotEnabledAppReceiver""));         assertThat(result).contains(                 buildReceivedBroadcastRegex(actionName, ""ModifyQuietModeEnabledAppReceiver""));     }      private String buildReceivedBroadcastRegex(String actionName, String className) {         return String.format(""%s: onReceive(%s)"", className, actionName);     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_noCredentialRequest"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	"public void testQuietMode_noCredentialRequest() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // Set a separate work challenge so turning on the profile requires entering the         // separate challenge.         changeUserCredential(/* newCredential= */ TEST_PASSWORD, /* oldCredential= */ null,                 mProfileId);         runDeviceTestsAsUser(                 TEST_PACKAGE,                 TEST_CLASS,                 ""testTryEnableQuietMode_noCredentialRequest"",                 mPrimaryUserId,                 createParams(mProfileId));     }      private void createAndStartManagedProfile() throws Exception {         mProfileId = createManagedProfile(mPrimaryUserId);         switchUser(mPrimaryUserId);         startUser(mProfileId);     }      private void uninstallRequiredApps()             throws DeviceNotAvailableException {         getDevice().uninstallPackage(TEST_PACKAGE);         getDevice().uninstallPackage(ENABLED_TEST_PACKAGE);         getDevice().uninstallPackage(USER_ENABLED_TEST_PACKAGE);         getDevice().uninstallPackage(ENABLED_NO_PERMS_TEST_PACKAGE);         getDevice().uninstallPackage(NOT_ENABLED_TEST_PACKAGE);         getDevice().uninstallPackage(QUIET_MODE_ENABLED_TEST_PACKAGE);     }      private void installCrossProfileApps()             throws FileNotFoundException, DeviceNotAvailableException {         installCrossProfileApp(ENABLED_TEST_APK, /* grantPermissions= */ true);         installCrossProfileApp(USER_ENABLED_TEST_APK, /* grantPermissions= */ true);         installCrossProfileApp(NOT_ENABLED_TEST_APK, /* grantPermissions= */ true);         installCrossProfileApp(ENABLED_NO_PERMS_TEST_APK, /* grantPermissions= */  false);         installCrossProfileApp(QUIET_MODE_ENABLED_TEST_APK, /* grantPermissions= */  true);     }      private void enableCrossProfileAppsOp() throws DeviceNotAvailableException {         enableCrossProfileAppsOp(ENABLED_NO_PERMS_TEST_PACKAGE, mPrimaryUserId);     }      private void installCrossProfileApp(String apkName, boolean grantPermissions)             throws FileNotFoundException, DeviceNotAvailableException {         installAppAsUser(apkName, grantPermissions, mPrimaryUserId);         installAppAsUser(apkName, grantPermissions, mProfileId);     }      private void enableCrossProfileAppsOp(String packageName, int userId)             throws DeviceNotAvailableException {         getDevice().executeShellCommand(                 String.format(""appops set --user %s %s android:interact_across_profiles 0"",                         userId, packageName));         assertThat(getDevice().executeShellCommand(                 String.format(""appops get --user %s %s android:interact_across_profiles"",                         userId, packageName))).contains(""INTERACT_ACROSS_PROFILES: allow"");     }      private Map<String, String> createParams(int targetUserId) throws Exception {         Map<String, String> params = new HashMap<>();         params.put(PARAM_TARGET_USER, Integer.toString(getUserSerialNumber(targetUserId)));         params.put(PARAM_ORIGINAL_DEFAULT_LAUNCHER, mOriginalLauncher);         return params;     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged; import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.isStatsdEnabled;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue; import static org.junit.Assume.assumeFalse; import static org.junit.Assert.fail;  import android.platform.test.annotations.FlakyTest; import android.platform.test.annotations.LargeTest; import android.stats.devicepolicy.EventId;  import com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper; import com.android.compatibility.common.util.LocationModeSetter; import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper; import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Ignore; import org.junit.Test;  import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.util.Collections; import java.util.List; import java.util.Map;  /**  * Set of tests for Device Owner use cases.  */ public class DeviceOwnerTest extends BaseDevicePolicyTest {      private static final String DEVICE_OWNER_PKG = ""com.android.cts.deviceowner"";     private static final String DEVICE_OWNER_APK = ""CtsDeviceOwnerApp.apk"";      private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";     private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";     private static final String MANAGED_PROFILE_ADMIN =             MANAGED_PROFILE_PKG + "".BaseManagedProfileTest$BasicAdminReceiver"";      private static final String FEATURE_BACKUP = ""android.software.backup"";      private static final String INTENT_RECEIVER_PKG = ""com.android.cts.intent.receiver"";     private static final String INTENT_RECEIVER_APK = ""CtsIntentReceiverApp.apk"";      private static final String SIMPLE_APP_APK =""CtsSimpleApp.apk"";     private static final String SIMPLE_APP_PKG = ""com.android.cts.launcherapps.simpleapp"";     private static final String SIMPLE_APP_ACTIVITY = SIMPLE_APP_PKG + "".SimpleActivity"";      private static final String SIMPLE_SMS_APP_PKG = ""android.telephony.cts.sms.simplesmsapp"";     private static final String SIMPLE_SMS_APP_APK = ""SimpleSmsApp.apk"";      private static final String WIFI_CONFIG_CREATOR_PKG =             ""com.android.cts.deviceowner.wificonfigcreator"";     private static final String WIFI_CONFIG_CREATOR_APK = ""CtsWifiConfigCreator.apk"";      private static final String ADMIN_RECEIVER_TEST_CLASS =             DEVICE_OWNER_PKG + "".BasicAdminReceiver"";     private static final String DEVICE_OWNER_COMPONENT = DEVICE_OWNER_PKG + ""/""             + ADMIN_RECEIVER_TEST_CLASS;      private static final String TEST_APP_APK = ""CtsEmptyTestApp.apk"";     private static final String TEST_APP_PKG = ""android.packageinstaller.emptytestapp.cts"";     private static final String TEST_APP_LOCATION = ""/data/local/tmp/cts/packageinstaller/"";      private static final String ARG_NETWORK_LOGGING_BATCH_COUNT = ""batchCount"";      private static final String LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK =             ""CtsHasLauncherActivityApp.apk"";      private static final int TYPE_NONE = 0;      /**      * Copied from {@link android.app.admin.SystemUpdatePolicy}      */     private static final int TYPE_INSTALL_AUTOMATIC = 1;     private static final int TYPE_INSTALL_WINDOWED = 2;     private static final int TYPE_POSTPONE = 3;      /** CreateAndManageUser is available and an additional user can be created. */     private boolean mHasCreateAndManageUserFeature;      /**      * Copied from {@link android.app.admin.DevicePolicyManager}      */     private static final String GLOBAL_SETTING_AUTO_TIME = ""auto_time"";     private static final String GLOBAL_SETTING_AUTO_TIME_ZONE = ""auto_time_zone"";     private static final String GLOBAL_SETTING_DATA_ROAMING = ""data_roaming"";     private static final String GLOBAL_SETTING_USB_MASS_STORAGE_ENABLED =             ""usb_mass_storage_enabled"";      @Override     public void setUp() throws Exception {         super.setUp();         if (mHasFeature) {             installAppAsUser(DEVICE_OWNER_APK, mPrimaryUserId);             if (!setDeviceOwner(DEVICE_OWNER_COMPONENT, mPrimaryUserId,                     /*expectFailure*/ false)) {                 removeAdmin(DEVICE_OWNER_COMPONENT, mPrimaryUserId);                 getDevice().uninstallPackage(DEVICE_OWNER_PKG);                 fail(""Failed to set device owner"");             }              // Enable the notification listener             getDevice().executeShellCommand(""cmd notification allow_listener com.android.cts.deviceowner/com.android.cts.deviceowner.NotificationListener"");         }         mHasCreateAndManageUserFeature = mHasFeature && canCreateAdditionalUsers(1)                 && hasDeviceFeature(""android.software.managed_users"");     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             assertTrue(""Failed to remove device owner."",                     removeAdmin(DEVICE_OWNER_COMPONENT, mPrimaryUserId));             getDevice().uninstallPackage(DEVICE_OWNER_PKG);             switchUser(USER_SYSTEM);             removeTestUsers();         }          super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_MaxUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testCreateAndManageUser_MaxUsers() throws Exception {         if (!mHasCreateAndManageUserFeature) {             return;         }          int maxUsers = getDevice().getMaxNumberOfUsersSupported();         // Primary user is already there, so we can create up to maxUsers -1.         for (int i = 0; i < maxUsers - 1; i++) {             executeDeviceTestMethod("".CreateAndManageUserTest"",                     ""testCreateAndManageUser"");         }         // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.         executeDeviceTestMethod("".CreateAndManageUserTest"",                 ""testCreateAndManageUser_MaxUsers"");     }      /**      * Test creating an user using the DevicePolicyManager's createAndManageUser.      * {@link android.app.admin.DevicePolicyManager#getSecondaryUsers} is tested.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StartInBackground_MaxRunningUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testCreateAndManageUser_StartInBackground_MaxRunningUsers() throws Exception {         if (!mHasCreateAndManageUserFeature) {             return;         }          int maxUsers = getDevice().getMaxNumberOfUsersSupported();         int maxRunningUsers = getDevice().getMaxNumberOfRunningUsersSupported();          // Primary user is already running, so we can create and start up to minimum of above - 1.         int usersToCreateAndStart = Math.min(maxUsers, maxRunningUsers) - 1;         for (int i = 0; i < usersToCreateAndStart; i++) {             executeDeviceTestMethod("".CreateAndManageUserTest"",                     ""testCreateAndManageUser_StartInBackground"");         }          if (maxUsers > maxRunningUsers) {             // The next startUserInBackground should return USER_OPERATION_ERROR_MAX_RUNNING_USERS.             executeDeviceTestMethod("".CreateAndManageUserTest"",                     ""testCreateAndManageUser_StartInBackground_MaxRunningUsers"");         } else {             // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.             executeDeviceTestMethod("".CreateAndManageUserTest"", ""testCreateAndManageUser_MaxUsers"");         }     }      /**      * Test creating an user using the DevicePolicyManager's createAndManageUser method and start      * the user in background to test APIs on that user.      * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testWifiConfigLockdown"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testWifiConfigLockdown() throws Exception {         final boolean hasWifi = hasDeviceFeature(""android.hardware.wifi"");         if (hasWifi && mHasFeature) {             try (LocationModeSetter locationModeSetter = new LocationModeSetter(getDevice())) {                 installAppAsUser(WIFI_CONFIG_CREATOR_APK, mPrimaryUserId);                 locationModeSetter.setLocationEnabled(true);                 executeDeviceOwnerTest(""WifiConfigLockdownTest"");             } finally {                 getDevice().uninstallPackage(WIFI_CONFIG_CREATOR_PKG);             }         }     }      /**      * Execute WifiSetHttpProxyTest as device owner.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCannotSetDeviceOwnerAgain"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testCannotSetDeviceOwnerAgain() throws Exception {         if (!mHasFeature) {             return;         }         // verify that we can't set the same admin receiver as device owner again         assertFalse(setDeviceOwner(                 DEVICE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,                 /*expectFailure*/ true));          // verify that we can't set a different admin receiver as device owner         try {             installAppAsUser(MANAGED_PROFILE_APK, mPrimaryUserId);             assertFalse(setDeviceOwner(                     MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId,                     /*expectFailure*/ true));         } finally {             // Remove the device owner in case the test fails.             removeAdmin(MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId);             getDevice().uninstallPackage(MANAGED_PROFILE_PKG);         }     }      // Execute HardwarePropertiesManagerTest as a device owner."	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testDisallowFactoryReset"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testDisallowFactoryReset() throws Exception {         if (!mHasFeature) {             return;         }         int adminVersion = 24;         changeUserRestrictionOrFail(""no_factory_reset"", true, mPrimaryUserId,                 DEVICE_OWNER_PKG);         try {             installAppAsUser(DeviceAdminHelper.getDeviceAdminApkFileName(adminVersion),                     mPrimaryUserId);             setDeviceAdmin(DeviceAdminHelper.getAdminReceiverComponent(adminVersion),                     mPrimaryUserId);             runDeviceTestsAsUser(                     DeviceAdminHelper.getDeviceAdminApkPackage(adminVersion),                     DeviceAdminHelper.getDeviceAdminJavaPackage() + "".WipeDataTest"",                     ""testWipeDataThrowsSecurityException"", mPrimaryUserId);         } finally {             removeAdmin(DeviceAdminHelper.getAdminReceiverComponent(adminVersion), mPrimaryUserId);             getDevice().uninstallPackage(DeviceAdminHelper.getDeviceAdminApkPackage(adminVersion));         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testPackageInstallCache"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testPackageInstallCache() throws Exception {         if (!mHasFeature) {             return;         }         CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(getBuild());         final File apk = buildHelper.getTestFile(TEST_APP_APK);         try {             getDevice().uninstallPackage(TEST_APP_PKG);             assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));              // Install the package in primary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageInstall"", mPrimaryUserId);              assertMetricsLogged(getDevice(), () -> {                 runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                         ""testKeepPackageCache"", mPrimaryUserId);             }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEEP_UNINSTALLED_PACKAGES_VALUE)                     .setAdminPackageName(DEVICE_OWNER_PKG)                     .setBoolean(false)                     .setStrings(TEST_APP_PKG)                     .build());              // Remove the package in primary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageUninstall"", mPrimaryUserId);              assertMetricsLogged(getDevice(), () -> {                 // Should be able to enable the cached package in primary user                 runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                         ""testInstallExistingPackage"", mPrimaryUserId);             }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_EXISTING_PACKAGE_VALUE)                     .setAdminPackageName(DEVICE_OWNER_PKG)                     .setBoolean(false)                     .setStrings(TEST_APP_PKG)                     .build());         } finally {             String command = ""rm "" + TEST_APP_LOCATION + apk.getName();             getDevice().executeShellCommand(command);             getDevice().uninstallPackage(TEST_APP_PKG);         }     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testPackageInstallCache_multiUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testPackageInstallCache_multiUser() throws Exception {         if (!mHasFeature || !canCreateAdditionalUsers(1)) {             return;         }         final int userId = createAffiliatedSecondaryUser();         CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(getBuild());         final File apk = buildHelper.getTestFile(TEST_APP_APK);         try {             getDevice().uninstallPackage(TEST_APP_PKG);             assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));              // Install the package in primary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageInstall"", mPrimaryUserId);              // Should be able to enable the package in secondary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testInstallExistingPackage"", userId);              // Remove the package in both user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageUninstall"", mPrimaryUserId);             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageUninstall"", userId);              // Install the package in secondary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageInstall"", userId);              // Should be able to enable the package in primary user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testInstallExistingPackage"", mPrimaryUserId);              // Keep the package in cache             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testKeepPackageCache"", mPrimaryUserId);              // Remove the package in both user             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageUninstall"", mPrimaryUserId);             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testPackageUninstall"", userId);              // Should be able to enable the cached package in both users             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testInstallExistingPackage"", userId);             runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",                     ""testInstallExistingPackage"", mPrimaryUserId);         } finally {             String command = ""rm "" + TEST_APP_LOCATION + apk.getName();             getDevice().executeShellCommand(command);             getDevice().uninstallPackage(TEST_APP_PKG);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testDefaultSmsApplication"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testDefaultSmsApplication() throws Exception {         if (!mHasFeature || !mHasTelephony) {             return;         }          installAppAsUser(SIMPLE_SMS_APP_APK, mPrimaryUserId);          executeDeviceTestMethod("".DefaultSmsApplicationTest"", ""testSetDefaultSmsApplication"");          getDevice().uninstallPackage(SIMPLE_SMS_APP_PKG);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testNoHiddenActivityFoundTest"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testNoHiddenActivityFoundTest() throws Exception {         if (!mHasFeature) {             return;         }         try {             // Install app to primary user             installAppAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_APK, mPrimaryUserId);             installAppAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_SUPPORT_APK, mPrimaryUserId);             installAppAsUser(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK, mPrimaryUserId);              // Run test to check if launcher api shows hidden app             String mSerialNumber = Integer.toString(getUserSerialNumber(USER_SYSTEM));             runDeviceTestsAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_PKG,                     BaseLauncherAppsTest.LAUNCHER_TESTS_CLASS,                     ""testDoPoNoTestAppInjectedActivityFound"",                     mPrimaryUserId, Collections.singletonMap(BaseLauncherAppsTest.PARAM_TEST_USER,                             mSerialNumber));         } finally {             getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);             getDevice().uninstallPackage(BaseLauncherAppsTest.LAUNCHER_TESTS_SUPPORT_APK);             getDevice().uninstallPackage(BaseLauncherAppsTest.LAUNCHER_TESTS_APK);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testSetUserControlDisabledPackages() throws Exception {         if (!mHasFeature) {             return;         }         try {             installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);             // launch the app once before starting the test.             startActivityAsUser(mPrimaryUserId, SIMPLE_APP_PKG, SIMPLE_APP_ACTIVITY);             assertMetricsLogged(getDevice(),                     () -> executeDeviceTestMethod("".UserControlDisabledPackagesTest"",                             ""testSetUserControlDisabledPackages""),                     new DevicePolicyEventWrapper.Builder(                             EventId.SET_USER_CONTROL_DISABLED_PACKAGES_VALUE)                             .setAdminPackageName(DEVICE_OWNER_PKG)                             .setStrings(new String[] {SIMPLE_APP_PKG})                             .build());             forceStopPackageForUser(SIMPLE_APP_PKG, mPrimaryUserId);             executeDeviceTestMethod("".UserControlDisabledPackagesTest"",                     ""testForceStopWithUserControlDisabled"");             // Reboot and verify protected packages are persisted             rebootAndWaitUntilReady();             // The simple app package seems to be set into stopped state on reboot.             // Launch the activity again to get it out of stopped state.             startActivityAsUser(mPrimaryUserId, SIMPLE_APP_PKG, SIMPLE_APP_ACTIVITY);             forceStopPackageForUser(SIMPLE_APP_PKG, mPrimaryUserId);             executeDeviceTestMethod("".UserControlDisabledPackagesTest"",                     ""testForceStopWithUserControlDisabled"");             executeDeviceTestMethod("".UserControlDisabledPackagesTest"",                     ""testClearSetUserControlDisabledPackages"");             forceStopPackageForUser(SIMPLE_APP_PKG, mPrimaryUserId);             executeDeviceTestMethod("".UserControlDisabledPackagesTest"",                     ""testForceStopWithUserControlEnabled"");         } finally {             getDevice().uninstallPackage(SIMPLE_APP_APK);         }     }      private void executeDeviceOwnerTest(String testClassName) throws Exception {         if (!mHasFeature) {             return;         }         String testClass = DEVICE_OWNER_PKG + ""."" + testClassName;         runDeviceTestsAsUser(DEVICE_OWNER_PKG, testClass, mPrimaryUserId);     }      private void executeDeviceTestMethod(String className, String testName) throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(DEVICE_OWNER_PKG, className, testName,                 /* deviceOwnerUserId */ mPrimaryUserId);     }      private int createAffiliatedSecondaryUser() throws Exception {         final int userId = createUser();         installAppAsUser(INTENT_RECEIVER_APK, userId);         installAppAsUser(DEVICE_OWNER_APK, userId);         setProfileOwnerOrFail(DEVICE_OWNER_COMPONENT, userId);          switchUser(userId);         waitForBroadcastIdle();         wakeupAndDismissKeyguard();          // Setting the same affiliation ids on both users         runDeviceTestsAsUser(                 DEVICE_OWNER_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(                 DEVICE_OWNER_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", userId);         return userId;     }      private void executeDeviceTestMethod(String className, String testName,             Map<String, String> params) throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(DEVICE_OWNER_PKG, className, testName,                 /* deviceOwnerUserId */ mPrimaryUserId, params);     }      private void assertNewUserStopped() throws Exception {         List<Integer> newUsers = getUsersCreatedByTests();         assertEquals(1, newUsers.size());         int newUserId = newUsers.get(0);          assertFalse(getDevice().isUserRunning(newUserId));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbDeviceOwnerLogged"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	"public void testAdbDeviceOwnerLogged() throws Exception {         if (!mHasFeature || !isStatsdEnabled(getDevice())) {             return;         }         assertMetricsLogged(getDevice(), () -> {             setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,                     /* expectFailure */ false);         }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)                     .setAdminPackageName(DEVICE_ADMIN_PKG)                     .setBoolean(false)                     .setStrings(""device-owner"")                     .build());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbProfileOwnerLogged"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	"public void testAdbProfileOwnerLogged() throws Exception {         if (!mHasFeature || !isStatsdEnabled(getDevice())) {             return;         }         assertMetricsLogged(getDevice(), () -> {             setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,                     /* expectFailure */ false);         }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)                 .setAdminPackageName(DEVICE_ADMIN_PKG)                 .setBoolean(false)                 .setStrings(""profile-owner"")                 .build());     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.BluetoothTest"	"isEnabled"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/BluetoothTest.java"	""	"public void test/*  *.  */  package com.android.cts.managedprofile;  import android.bluetooth.BluetoothAdapter; import android.bluetooth.BluetoothDevice; import android.bluetooth.BluetoothServerSocket; import android.test.AndroidTestCase;  import java.io.IOException; import java.util.Set; import java.util.UUID;  /**  * Test that the basic bluetooth API is callable in managed profiles.  * These tests should only be executed if the device supports bluetooth,  * i.e. if it has the {@link android.content.pm.PackageManager#FEATURE_BLUETOOTH} feature.  *  * This includes tests for the {@link BluetoothAdapter}.  * The corresponding CTS tests in the primary profile are in  * {@link android.bluetooth.cts.BasicAdapterTest}.  * TODO: Merge the primary and managed profile tests into one.  */ public class BluetoothTest extends AndroidTestCase {     private static final int DISABLE_TIMEOUT_MS = 8000;     private static final int ENABLE_TIMEOUT_MS = 10000;     private static final int POLL_TIME_MS = 400;     private static final int CHECK_WAIT_TIME_MS = 1000;      private BluetoothAdapter mAdapter;     private boolean mBtWasEnabled;      public void setUp() throws Exception {         super.setUp();         mAdapter = BluetoothAdapter.getDefaultAdapter();         assertNotNull(mAdapter);         mBtWasEnabled = mAdapter.isEnabled();     }      public void tearDown() throws Exception {         if (mBtWasEnabled != mAdapter.isEnabled()) {             if (mBtWasEnabled) {                 enable();             } else {                 disable();             }         }         super.tearDown();     }      /**      * Checks enable(), disable(), getState(), isEnabled()      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.UserManagerTest"	"testIsProfileReturnsFalse_runAsPrimary"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	"public void testIsProfileReturnsFalse_runAsPrimary() {         mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");         assertThat(mUserManager.isProfile()).isFalse();     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToPrimaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testPrimaryUserToPrimaryUser() throws Exception {         verifyCrossProfileAppsApi(mPrimaryUserId, mPrimaryUserId, NON_TARGET_USER_TEST_CLASS);     }      @FlakyTest     @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToManagedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testPrimaryUserToManagedProfile() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         verifyCrossProfileAppsApi(mPrimaryUserId, mProfileId, TARGET_USER_TEST_CLASS);     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testManagedProfileToPrimaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testManagedProfileToPrimaryUser() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, TARGET_USER_TEST_CLASS);     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityComponent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartActivityComponent() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByComponent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNonMainActivityByComponent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartNotExportedActivityByComponent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityInOtherPackageByComponent"");     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartActivityIntent() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityWithImplicitIntent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByIntent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByIntent_withOptionsBundle"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNonMainActivityByIntent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNotExportedActivityByIntent"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityInOtherPackageByIntent"");     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntentPermissions"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartActivityIntentPermissions() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityByIntentWithNoPermissions"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossProfilesPermission"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossUsersPermission"");         verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossUsersFullPermission"");     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent_isLogged"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartActivityIntent_isLogged() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         assertMetricsLogged(                 getDevice(),                 () -> verifyCrossProfileAppsApi(                         mProfileId,                         mPrimaryUserId,                         START_ACTIVITY_TEST_CLASS,                         ""testStartActivityByIntent_noAsserts""),                 new DevicePolicyEventWrapper                         .Builder(START_ACTIVITY_BY_INTENT_VALUE)                         .setStrings(TEST_PACKAGE)                         .setBoolean(true) // from work profile                         .build());     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent_sameTaskByDefault"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartActivityIntent_sameTaskByDefault() throws Exception {         if (!mHasManagedUserFeature) {             return;         }         getDevice().clearLogcat();         verifyCrossProfileAppsApi(                 mProfileId,                 mPrimaryUserId,                 START_ACTIVITY_TEST_CLASS,                 ""testStartActivityIntent_sameTaskByDefault"");         assertThat(findTaskId(""CrossProfileSameTaskLauncherActivity""))                 .isEqualTo(findTaskId(""NonMainActivity""));     }      private int findTaskId(String className) throws Exception {         final Matcher matcher =                 Pattern.compile(className + ""#taskId#"" + ""(.*?)"" + ""#"").matcher(readLogcat());         boolean isFound = matcher.find();         if (!isFound) {             fail(""Task not found for "" + className);             return -1;         }         return Integer.parseInt(matcher.group(1));     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToSecondaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testPrimaryUserToSecondaryUser() throws Exception {         if (!mCanTestMultiUser) {             return;         }         verifyCrossProfileAppsApi(mPrimaryUserId, mSecondaryUserId, NON_TARGET_USER_TEST_CLASS);     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartMainActivity_logged"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testStartMainActivity_logged() throws Exception {         if (!mHasManagedUserFeature || !isStatsdEnabled(getDevice())) {             return;         }         assertMetricsLogged(                 getDevice(),                 () -> {                     runDeviceTest(                             mProfileId,                             mPrimaryUserId,                             TARGET_USER_TEST_CLASS,                             ""testStartMainActivity_noAsserts"");                 },                 new DevicePolicyEventWrapper                         .Builder(CROSS_PROFILE_APPS_START_ACTIVITY_AS_USER_VALUE)                         .setStrings(new String[] {""com.android.cts.crossprofileappstest""})                         .build());     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testGetTargetUserProfiles_logged"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	"public void testGetTargetUserProfiles_logged() throws Exception {         if (!mHasManagedUserFeature || !isStatsdEnabled(getDevice())) {             return;         }         assertMetricsLogged(                 getDevice(),                 () -> {                     runDeviceTest(                             mProfileId,                             mPrimaryUserId,                             TARGET_USER_TEST_CLASS,                             ""testGetTargetUserProfiles_noAsserts"");                 },                 new DevicePolicyEventWrapper                         .Builder(CROSS_PROFILE_APPS_GET_TARGET_USER_PROFILES_VALUE)                         .setStrings(new String[] {""com.android.cts.crossprofileappstest""})                         .build());     }      private void verifyCrossProfileAppsApi(int fromUserId, int targetUserId, String testClass)             throws Exception {         verifyCrossProfileAppsApi(fromUserId, targetUserId, testClass, /* testMethod= */ null);     }      private void verifyCrossProfileAppsApi(int fromUserId, int targetUserId, String testClass, String testMethod)             throws Exception {         runDeviceTest(fromUserId, targetUserId, testClass, testMethod);     }      private void runDeviceTest(             int fromUserId, int targetUserId, String testClass, @Nullable String testMethod)             throws Exception {         runDeviceTestsAsUser(                 TEST_PACKAGE,                 testClass,                 testMethod,                 fromUserId,                 createTargetUserParam(targetUserId));     }      private void createAndStartManagedProfile() throws Exception {         mProfileId = createManagedProfile(mPrimaryUserId);         switchUser(mPrimaryUserId);         startUser(mProfileId);     }      private Map<String, String> createTargetUserParam(int targetUserId) throws Exception {         return Collections.singletonMap(PARAM_TARGET_USER,                 Integer.toString(getUserSerialNumber(targetUserId)));     }      private String readLogcat() throws Exception {         getDevice().stopLogcat();         final String logcat;         try (InputStreamSource logcatStream = getDevice().getLogcat()) {             logcat = StreamUtil.getStringFromSource(logcatStream);         }         getDevice().startLogcat();         return logcat;     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.PrimaryUserAdminHelper"	"testClearDeviceAdmin"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserAdminHelper.java"	""	"public void testClearDeviceAdmin() throws Exception {         ComponentName cn = PrimaryUserDeviceAdmin.ADMIN_RECEIVER_COMPONENT;         if (mDpm.isAdminActive(cn)) {             mDpm.removeActiveAdmin(cn);             // Wait until device admin is not active (with 2 minutes timeout).             for (int i = 0; i < 2 * 60 && mDpm.isAdminActive(cn); i++) {                 Thread.sleep(1000);  // 1 second.             }         }         assertFalse(""Clear device admin failed"", mDpm.isAdminActive(cn));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLockTask_unaffiliatedUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	"public void testLockTask_unaffiliatedUser() throws Exception {         if (!mHasFeature || !canCreateAdditionalUsers(1)) {             return;         }          final int userId = createSecondaryUserAsProfileOwner();         runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG,                 "".AffiliationTest"",                 ""testLockTaskMethodsThrowExceptionIfUnaffiliated"",                 userId);          setUserAsAffiliatedUserToPrimary(userId);         runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG,                 "".AffiliationTest"",                 ""testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"",                 userId);     }      @FlakyTest(bugId = 127270520)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLockTask_affiliatedSecondaryUser"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	"public void testLockTask_affiliatedSecondaryUser() throws Exception {         if (!mHasFeature || !canCreateAdditionalUsers(1)) {             return;         }         final int userId = createSecondaryUserAsProfileOwner();         switchToUser(userId);         setUserAsAffiliatedUserToPrimary(userId);         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockTaskTest"", userId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testAdminConfiguredNetworks"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	"public void testAdminConfiguredNetworks() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AdminConfiguredNetworksTest"", mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLocationPermissionGrantNotifies"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	"public void testLocationPermissionGrantNotifies() throws Exception {         if (!mHasFeature) {             return;         }         installAppPermissionAppAsUser();         configureNotificationListener();         executeDeviceTestMethod("".PermissionsTest"", ""testUserNotifiedOfLocationPermissionGrant"");     }      private void configureNotificationListener() throws DeviceNotAvailableException {         getDevice().executeShellCommand(""cmd notification allow_listener ""                 + ""com.android.cts.deviceandprofileowner/.NotificationListener"");     }      private void generateDummySecurityLogs() throws Exception {         // Trigger security events of type TAG_ADB_SHELL_CMD.         for (int i = 0; i < SECURITY_EVENTS_BATCH_SIZE; i++) {             getDevice().executeShellCommand(""echo just_testing_"" + i);         }     }     private int createSecondaryUserAsProfileOwner() throws Exception {         final int userId = createUserAndWaitStart();         installAppAsUser(INTENT_RECEIVER_APK, userId);         installAppAsUser(DEVICE_ADMIN_APK, userId);         setProfileOwnerOrFail(DEVICE_ADMIN_COMPONENT_FLATTENED, userId);         return userId;     }      private void switchToUser(int userId) throws Exception {         switchUser(userId);         waitForBroadcastIdle();         wakeupAndDismissKeyguard();     }      private void setUserAsAffiliatedUserToPrimary(int userId) throws Exception {         // Setting the same affiliation ids on both users         runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", mPrimaryUserId);         runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", userId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutBackground"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	"public void testWorkProfileTimeoutBackground() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         setUpWorkProfileTimeout();          startDummyActivity(mPrimaryUserId, true);         simulateUserInteraction(PROFILE_TIMEOUT_DELAY_MS);          verifyOnlyProfileLocked(true);     }      /** Profile should get locked if it is in foreground but with no user activity. */     @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutKeepScreenOnWindow"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	"public void testWorkProfileTimeoutKeepScreenOnWindow() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         setUpWorkProfileTimeout();          startDummyActivity(mProfileUserId, true);         Thread.sleep(PROFILE_TIMEOUT_DELAY_MS);          verifyOnlyProfileLocked(false);     }      private void setUpWorkProfileTimeout() throws DeviceNotAvailableException {         // Set separate challenge.         changeUserCredential(TEST_PASSWORD, null, mProfileUserId);          // Make sure the profile is not prematurely locked.         verifyUserCredential(TEST_PASSWORD, mProfileUserId);         verifyOnlyProfileLocked(false);         // Set profile timeout to 5 seconds.         runProfileTimeoutTest(""testSetWorkProfileTimeout"", mProfileUserId);     }      private void verifyOnlyProfileLocked(boolean locked) throws DeviceNotAvailableException {         final String expectedResultTest = locked ? ""testDeviceLocked"" : ""testDeviceNotLocked"";         runProfileTimeoutTest(expectedResultTest, mProfileUserId);         // Primary profile shouldn't be locked.         runProfileTimeoutTest(""testDeviceNotLocked"", mPrimaryUserId);     }      private void simulateUserInteraction(int timeMs) throws Exception {         final long endTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(timeMs);         final UserActivityEmulator helper = new UserActivityEmulator(getDevice());         while (System.nanoTime() < endTime) {             helper.tapScreenCenter();             // Just in case to prevent busy loop.             Thread.sleep(100);         }     }      private void runProfileTimeoutTest(String method, int userId)             throws DeviceNotAvailableException {         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".ProfileTimeoutTestHelper"",                 method, userId);     }      private void startDummyActivity(int profileUserId, boolean keepScreenOn) throws Exception {         getDevice().executeShellCommand(String.format(                 ""am start-activity -W --user %d --ez keep_screen_on %s %s/.TimeoutActivity"",                 profileUserId, keepScreenOn, MANAGED_PROFILE_PKG));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testAppLinks_verificationStatus"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testAppLinks_verificationStatus() throws Exception {         if (!mHasFeature) {             return;         }         // Disable all pre-existing browsers in the managed profile so they don't interfere with         // intents resolution.         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",                 ""testDisableAllBrowsers"", mProfileUserId);         installAppAsUser(INTENT_RECEIVER_APK, USER_ALL);         installAppAsUser(INTENT_SENDER_APK, USER_ALL);          changeVerificationStatus(mParentUserId, INTENT_RECEIVER_PKG, ""ask"");         changeVerificationStatus(mProfileUserId, INTENT_RECEIVER_PKG, ""ask"");         // We should have two receivers: IntentReceiverActivity and BrowserActivity in the         // managed profile         assertAppLinkResult(""testTwoReceivers"");          changeUserRestrictionOrFail(""allow_parent_profile_app_linking"", true, mProfileUserId);         // Now we should also have one receiver in the primary user, so three receivers in total.         assertAppLinkResult(""testThreeReceivers"");          changeVerificationStatus(mParentUserId, INTENT_RECEIVER_PKG, ""never"");         // The primary user one has been set to never: we should only have the managed profile ones.         assertAppLinkResult(""testTwoReceivers"");          changeVerificationStatus(mProfileUserId, INTENT_RECEIVER_PKG, ""never"");         // Now there's only the browser in the managed profile left         assertAppLinkResult(""testReceivedByBrowserActivityInManaged"");          changeVerificationStatus(mProfileUserId, INTENT_RECEIVER_PKG, ""always"");         changeVerificationStatus(mParentUserId, INTENT_RECEIVER_PKG, ""always"");         // We have one always in the primary user and one always in the managed profile: the managed         // profile one should have precedence.         assertAppLinkResult(""testReceivedByAppLinkActivityInManaged"");     }      @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCameraPolicy"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testCameraPolicy() throws Exception {         boolean hasCamera = hasDeviceFeature(FEATURE_CAMERA);         if (!mHasFeature || !hasCamera) {             return;         }         try {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",                     ""testDisableCameraInManagedProfile"",                     mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",                     ""testEnableCameraInManagedProfile"",                     mProfileUserId);         } finally {             final String adminHelperClass = "".PrimaryUserAdminHelper"";             runDeviceTestsAsUser(MANAGED_PROFILE_PKG,                     adminHelperClass, ""testClearDeviceAdmin"", mParentUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBluetoothSharingRestriction"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testBluetoothSharingRestriction() throws Exception {         final boolean hasBluetooth = hasDeviceFeature(FEATURE_BLUETOOTH);         if (!mHasFeature || !hasBluetooth) {             return;         }          // Primary profile should be able to use bluetooth sharing.         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothSharingRestrictionPrimaryProfileTest"",                 ""testBluetoothSharingAvailable"", mPrimaryUserId);          // Managed profile owner should be able to control it via DISALLOW_BLUETOOTH_SHARING.         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothSharingRestrictionTest"",                 ""testOppDisabledWhenRestrictionSet"", mProfileUserId);     }      //TODO(b/130844684): Re-enable once profile owner on personal device can no longer access     //identifiers.     @Ignore"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"userManagerIsManagedProfileReturnsCorrectValues"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void userManagerIsManagedProfileReturnsCorrectValues() throws Exception {         if (!mHasFeature) {             return ;         }          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testIsManagedProfileReturnsTrue"", mProfileUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testIsManagedProfileReturnsFalse"", mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetWorkShortcutIconDrawableFromPersonalProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testCanGetWorkShortcutIconDrawableFromPersonalProfile()             throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                 ""addDynamicShortcuts"", mProfileUserId);         try {             Map<String, String> params = new HashMap<>();             params.put(""otherProfileUserId"", String.valueOf(mProfileUserId));             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                     ""shortcutIconDrawable_currentToOtherProfile_withUsersFullPermission_isNotNull"",                     mPrimaryUserId, params);         } finally {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                     ""removeAllDynamicShortcuts"", mProfileUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetPersonalShortcutIconDrawableFromWorkProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testCanGetPersonalShortcutIconDrawableFromWorkProfile()             throws DeviceNotAvailableException {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                 ""addDynamicShortcuts"", mPrimaryUserId);         try {             Map<String, String> params = new HashMap<>();             params.put(""otherProfileUserId"", String.valueOf(mPrimaryUserId));             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                     ""shortcutIconDrawable_currentToOtherProfile_withUsersFullPermission_isNotNull"",                     mProfileUserId, params);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                     ""shortcutIconDrawable_currentToOtherProfile_withoutUsersFullPermission_isNull"",                     mProfileUserId, params);         } finally {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",                     ""removeAllDynamicShortcuts"", mPrimaryUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetProfiles"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testCanGetProfiles() throws Exception {         if (!mHasFeature) {             return;         }          // getAllProfiles should contain both the primary and profile         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testGetAllProfiles"", mPrimaryUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testGetAllProfiles"", mProfileUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testIsProfileReturnsFalse_runAsPrimary"", mPrimaryUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testIsProfileReturnsTrue_runAsProfile"", mProfileUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanCreateProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testCanCreateProfile() throws Exception {         if (!mHasFeature) {             return;         }          // remove pre-created profile         removeUser(mProfileUserId);          // create profile from installed app         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",                 ""testCreateProfile_managedProfile"", mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testResolverActivityLaunchedFromPersonalProfileWithSelectedWorkTab"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testResolverActivityLaunchedFromPersonalProfileWithSelectedWorkTab()             throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_1_APK, mProfileUserId);         installAppAsUser(SHARING_APP_2_APK, mProfileUserId);         try {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""addCrossProfileIntents"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""startSwitchToOtherProfileIntent"", mPrimaryUserId);             assertResolverActivityInForeground(mPrimaryUserId);         } finally {             pressHome();             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""clearCrossProfileIntents"", mProfileUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testResolverActivityLaunchedFromWorkProfileWithSelectedPersonalTab"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testResolverActivityLaunchedFromWorkProfileWithSelectedPersonalTab()             throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_1_APK, mProfileUserId);         installAppAsUser(SHARING_APP_2_APK, mProfileUserId);         try {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""addCrossProfileIntents"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""startSwitchToOtherProfileIntent"", mProfileUserId);             assertResolverActivityInForeground(mProfileUserId);         } finally {             pressHome();             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""clearCrossProfileIntents"", mProfileUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testChooserActivityLaunchedFromPersonalProfileWithSelectedWorkTab"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testChooserActivityLaunchedFromPersonalProfileWithSelectedWorkTab()             throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_1_APK, mProfileUserId);         installAppAsUser(SHARING_APP_2_APK, mProfileUserId);         try {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""addCrossProfileIntents"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""startSwitchToOtherProfileIntent_chooser"", mPrimaryUserId);             assertChooserActivityInForeground(mPrimaryUserId);         } finally {             pressHome();             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""clearCrossProfileIntents"", mProfileUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testChooserActivityLaunchedFromWorkProfileWithSelectedPersonalTab"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testChooserActivityLaunchedFromWorkProfileWithSelectedPersonalTab()             throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);         installAppAsUser(SHARING_APP_1_APK, mProfileUserId);         installAppAsUser(SHARING_APP_2_APK, mProfileUserId);         try {             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""addCrossProfileIntents"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""startSwitchToOtherProfileIntent_chooser"", mProfileUserId);             assertChooserActivityInForeground(mProfileUserId);         } finally {             pressHome();             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",                     ""clearCrossProfileIntents"", mProfileUserId);         }     }      private void pressHome() throws Exception {         executeShellCommand(""input keyevent KEYCODE_HOME"");     }      private void assertChooserActivityInForeground(int userId)             throws DeviceNotAvailableException {         assertActivityInForeground(""android/com.android.internal.app.ChooserActivity"", userId);     }      private void assertResolverActivityInForeground(int userId)             throws DeviceNotAvailableException {         assertActivityInForeground(""android/com.android.internal.app.ResolverActivity"", userId);     }      private void assertActivityInForeground(String fullActivityName, int userId)             throws DeviceNotAvailableException {         String commandOutput =                 getDevice().executeShellCommand(""dumpsys activity activities | grep Resumed:"");         assertThat(commandOutput).contains(""u"" + userId + "" "" + fullActivityName);     }      private void changeUserRestrictionOrFail(String key, boolean value, int userId)             throws DeviceNotAvailableException {         changeUserRestrictionOrFail(key, value, userId, MANAGED_PROFILE_PKG);     }      private String changeUserRestriction(String key, boolean value, int userId)             throws DeviceNotAvailableException {         return changeUserRestriction(key, value, userId, MANAGED_PROFILE_PKG);     }      // status should be one of never, undefined, ask, always     private void changeVerificationStatus(int userId, String packageName, String status)             throws DeviceNotAvailableException {         String command = ""pm set-app-link --user "" + userId + "" "" + packageName + "" "" + status;         CLog.d(""Output for command "" + command + "": ""                 + getDevice().executeShellCommand(command));     }      private void assertAppLinkResult(String methodName) throws DeviceNotAvailableException {         runDeviceTestsAsUser(INTENT_SENDER_PKG, "".AppLinkTest"", methodName,                 mProfileUserId);     }      private boolean shouldRunTelecomTest() throws DeviceNotAvailableException {         return hasDeviceFeature(FEATURE_TELEPHONY) && hasDeviceFeature(FEATURE_CONNECTION_SERVICE);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.launchertests.LauncherAppsTests"	"testAccessPrimaryProfileFromManagedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	"public void testAccessPrimaryProfileFromManagedProfile() throws Exception {         assertTrue(mLauncherApps.getActivityList(null, mUser).isEmpty());          expectNameNotFoundException(                 () -> mLauncherApps.getApplicationInfo(SIMPLE_APP_PACKAGE, /* flags= */ 0, mUser),                 ""get applicationInfo failed to throw name not found exception"");         assertFalse(mLauncherApps.isPackageEnabled(SIMPLE_APP_PACKAGE, mUser));          final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://www.android.com/""));         assertNull(mLauncherApps.resolveActivity(intent, mUser));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"removeTestUsers"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import static com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.DEVICE_ADMIN_COMPONENT_FLATTENED; import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged; import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.isStatsdEnabled;  import static com.google.common.truth.Truth.assertThat;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertTrue;  import android.platform.test.annotations.FlakyTest; import android.platform.test.annotations.LargeTest; import android.stats.devicepolicy.EventId;  import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper; import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Ignore; import org.junit.Test;  /**  * Tests for organization-owned Profile Owner.  */ public class OrgOwnedProfileOwnerTest extends BaseDevicePolicyTest {     private static final String DEVICE_ADMIN_PKG = DeviceAndProfileOwnerTest.DEVICE_ADMIN_PKG;     private static final String DEVICE_ADMIN_APK = DeviceAndProfileOwnerTest.DEVICE_ADMIN_APK;     private static final String CERT_INSTALLER_PKG = DeviceAndProfileOwnerTest.CERT_INSTALLER_PKG;     private static final String CERT_INSTALLER_APK = DeviceAndProfileOwnerTest.CERT_INSTALLER_APK;      private static final String ADMIN_RECEIVER_TEST_CLASS =             DeviceAndProfileOwnerTest.ADMIN_RECEIVER_TEST_CLASS;     private static final String ACTION_WIPE_DATA =             ""com.android.cts.deviceandprofileowner.WIPE_DATA"";      private static final String TEST_APP_APK = ""CtsSimpleApp.apk"";     private static final String TEST_APP_PKG = ""com.android.cts.launcherapps.simpleapp"";     private static final String DUMMY_IME_APK = ""DummyIme.apk"";     private static final String DUMMY_IME_PKG = ""com.android.cts.dummyime"";     private static final String DUMMY_IME_COMPONENT = DUMMY_IME_PKG + ""/.DummyIme"";     private static final String SIMPLE_SMS_APP_PKG = ""android.telephony.cts.sms.simplesmsapp"";     private static final String SIMPLE_SMS_APP_APK = ""SimpleSmsApp.apk"";     private static final String DUMMY_LAUNCHER_APK = ""DummyLauncher.apk"";     private static final String DUMMY_LAUNCHER_COMPONENT =             ""com.android.cts.dummylauncher/android.app.Activity"";     private static final String QUIET_MODE_TOGGLE_ACTIVITY =             ""com.android.cts.dummylauncher/.QuietModeToggleActivity"";     private static final String EXTRA_QUIET_MODE_STATE =             ""com.android.cts.dummyactivity.QUIET_MODE_STATE"";     public static final String SUSPENSION_CHECKER_CLASS =             ""com.android.cts.suspensionchecker.ActivityLaunchTest"";      protected int mUserId;     private static final String DISALLOW_CONFIG_LOCATION = ""no_config_location"";     private static final String CALLED_FROM_PARENT = ""calledFromParent"";      @Override     public void setUp() throws Exception {         super.setUp();          // We need managed users to be supported in order to create a profile of the user owner.         mHasFeature &= hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             createManagedProfile();         }     }      private void createManagedProfile() throws Exception {         mUserId = createManagedProfile(mPrimaryUserId);         switchUser(mPrimaryUserId);         startUserAndWait(mUserId);          installAppAsUser(DEVICE_ADMIN_APK, mUserId);         setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);         startUserAndWait(mUserId);         restrictManagedProfileRemoval();     }      @Override     public void tearDown() throws Exception {         // Managed profile and other test users will be removed by BaseDevicePolicyTest.tearDown()         super.tearDown();     }      private void restrictManagedProfileRemoval() throws DeviceNotAvailableException {             getDevice().executeShellCommand(                     String.format(""dpm mark-profile-owner-on-organization-owned-device --user %d '%s'"",                             mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRelinquishControlOverDevice"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testCanRelinquishControlOverDevice() throws Exception {         if (!mHasFeature) {             return;         }         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testSetAndGetLockInfo"",                 mUserId);          removeOrgOwnedProfile();         assertHasNoUser(mUserId);          try {             installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);             assertTrue(setDeviceOwner(DEVICE_ADMIN_COMPONENT_FLATTENED,                     mPrimaryUserId, /*expectFailure*/false));             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testLockInfoIsNull"",                     mPrimaryUserId);         } finally {             removeAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED, mPrimaryUserId);             getDevice().uninstallPackage(DEVICE_ADMIN_PKG);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testUserRestrictionsSetOnParentAreNotPersisted"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testUserRestrictionsSetOnParentAreNotPersisted() throws Exception {         if (!mHasFeature || !canCreateAdditionalUsers(1)) {             return;         }         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                 ""testAddUserRestrictionDisallowConfigDateTime_onParent"", mUserId);         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                 ""testHasUserRestrictionDisallowConfigDateTime"", mPrimaryUserId);         removeOrgOwnedProfile();         assertHasNoUser(mUserId);          // User restrictions are not persist after organization-owned profile owner is removed         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                 ""testUserRestrictionDisallowConfigDateTimeIsNotPersisted"", mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCameraDisabledOnParentIsEnforced"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testCameraDisabledOnParentIsEnforced() throws Exception {         if (!mHasFeature) {             return;         }          installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         try {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                     ""testAddUserRestrictionCameraDisabled_onParent"", mUserId);             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                     ""testCannotOpenCamera"", mPrimaryUserId);         } finally {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                     ""testRemoveUserRestrictionCameraEnabled_onParent"", mUserId);             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",                     ""testCanOpenCamera"", mPrimaryUserId);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testIsDeviceOrganizationOwnedWithManagedProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testIsDeviceOrganizationOwnedWithManagedProfile() throws Exception {         if (!mHasFeature) {             return;         }          runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",                 ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",                 mUserId);          installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",                 ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",                 mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionNormalApp"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testPersonalAppsSuspensionNormalApp() throws Exception {         if (!mHasFeature) {             return;         }          installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         // Initially the app should be launchable.         assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);         setPersonalAppsSuspended(true);         // Now the app should be suspended and not launchable         assertCanStartPersonalApp(DEVICE_ADMIN_PKG, false);         setPersonalAppsSuspended(false);         // Should be launchable again.         assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionInstalledApp"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testPersonalAppsSuspensionInstalledApp() throws Exception {         if (!mHasFeature) {             return;         }          setPersonalAppsSuspended(true);          installAppAsUser(DUMMY_IME_APK, mPrimaryUserId);          // Wait until package install broadcast is processed         waitForBroadcastIdle();          assertCanStartPersonalApp(DUMMY_IME_PKG, false);         setPersonalAppsSuspended(false);     }      private void setPersonalAppsSuspended(boolean suspended) throws DeviceNotAvailableException {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",                 suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionSms"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testPersonalAppsSuspensionSms() throws Exception {         if (!mHasFeature || !mHasTelephony) {             return;         }          // Install an SMS app and make it the default.         installAppAsUser(SIMPLE_SMS_APP_APK, mPrimaryUserId);         addSmsRole(SIMPLE_SMS_APP_PKG, mPrimaryUserId);         try {             setPersonalAppsSuspended(true);             // Default sms app should not be suspended.             assertCanStartPersonalApp(SIMPLE_SMS_APP_PKG, true);             setPersonalAppsSuspended(false);         } finally {             removeSmsRole(SIMPLE_SMS_APP_PKG, mPrimaryUserId);         }     }      private void addSmsRole(String app, int userId) throws Exception {         executeShellCommand(String.format(                 ""cmd role add-role-holder --user %d android.app.role.SMS %s"", userId, app));     }      private void removeSmsRole(String app, int userId) throws Exception {         executeShellCommand(String.format(                 ""cmd role remove-role-holder --user %d android.app.role.SMS %s"", userId, app));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionIme"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testPersonalAppsSuspensionIme() throws Exception {         if (!mHasFeature) {             return;         }          installAppAsUser(DUMMY_IME_APK, mPrimaryUserId);         setupIme(DUMMY_IME_COMPONENT, mPrimaryUserId);         setPersonalAppsSuspended(true);         // Active IME should not be suspended.         assertCanStartPersonalApp(DUMMY_IME_PKG, true);         setPersonalAppsSuspended(false);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRestrictAccountManagementOnParentProfile"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testCanRestrictAccountManagementOnParentProfile() throws Exception {         if (!mHasFeature) {             return;         }          runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",                 ""testSetAccountManagementDisabledOnParent"", mUserId);         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         try {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",                     ""testAccountManagementDisabled"", mPrimaryUserId);         } finally {             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",                     ""testEnableAccountManagement"", mUserId);         }     }      private void setupIme(String imeComponent, int userId) throws Exception {         // Wait until IMS service is registered by the system.         waitForOutput(""Failed waiting for IME to become available"",                 String.format(""ime list --user %d -s -a"", userId),                 s -> s.contains(imeComponent), 10 /* seconds */);          executeShellCommand(""ime enable "" + imeComponent);         executeShellCommand(""ime set "" + imeComponent);     }      private void assertCanStartPersonalApp(String packageName, boolean canStart)             throws DeviceNotAvailableException {         runDeviceTestsAsUser(packageName, ""com.android.cts.suspensionchecker.ActivityLaunchTest"",                 canStart ? ""testCanStartActivity"" : ""testCannotStartActivity"", mPrimaryUserId);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testScreenCaptureDisabled"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testScreenCaptureDisabled() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         setPoAsUser(mPrimaryUserId);          try {             setScreenCaptureDisabled(true);         } finally {             setScreenCaptureDisabled(false);         }     }      private void takeScreenCaptureAsUser(int userId, String testMethodName) throws Exception {         installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);         startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",                 testMethodName, userId);         forceStopPackageForUser(TEST_APP_PKG, userId);     }      private void setScreenCaptureDisabled(boolean disabled) throws Exception {         String testMethodName = disabled                 ? ""testSetScreenCaptureDisabledOnParent_true""                 : ""testSetScreenCaptureDisabledOnParent_false"";         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",                 testMethodName, mUserId);          testMethodName = disabled                 ? ""testScreenCaptureImpossible""                 : ""testScreenCapturePossible"";          // Test personal profile         takeScreenCaptureAsUser(mPrimaryUserId, testMethodName);          // Test managed profile. This should not be disabled when screen capture is disabled on         // the parent by the profile owner of an organization-owned device.         takeScreenCaptureAsUser(mUserId, ""testScreenCapturePossible"");     }      private void assertHasNoUser(int userId) throws DeviceNotAvailableException {         int numWaits = 0;         final int MAX_NUM_WAITS = 15;         while (listUsers().contains(userId) && (numWaits < MAX_NUM_WAITS)) {             try {                 Thread.sleep(1000);                 numWaits += 1;             } catch (InterruptedException e) {                 Thread.currentThread().interrupt();             }         }          assertThat(listUsers()).doesNotContain(userId);     }      private void setPoAsUser(int userId) throws Exception {         installAppAsUser(DEVICE_ADMIN_APK, true, true, userId);         assertTrue(""Failed to set profile owner"",                 setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,                         userId, /* expectFailure */ false));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testWorkProfileMaximumTimeOff() throws Exception {         if (!mHasFeature) {             return;         }         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",                 ""testSetManagedProfileMaximumTimeOff1Sec"", mUserId);          final String defaultLauncher = getDefaultLauncher();         try {             installAppAsUser(DUMMY_LAUNCHER_APK, true, true, mPrimaryUserId);             setAndStartLauncher(DUMMY_LAUNCHER_COMPONENT);             toggleQuietMode(true);             // Verify that at some point personal app becomes impossible to launch.             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, SUSPENSION_CHECKER_CLASS,                     ""testWaitForActivityNotLaunchable"", mPrimaryUserId);             toggleQuietMode(false);             // Ensure the profile is properly started before wipe broadcast is sent in teardown.             waitForUserUnlock(mUserId);             runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",                     ""testPersonalAppsSuspendedByTimeout"", mUserId);         } finally {             setAndStartLauncher(defaultLauncher);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDeviceIdAttestationForProfileOwner"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	"public void testDeviceIdAttestationForProfileOwner() throws Exception {         if (!mHasFeature) {             return;         }         // Test that Device ID attestation works for org-owned profile owner.         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdAttestationTest"",                 ""testSucceedsWithProfileOwnerIdsGrant"", mUserId);      }      private void toggleQuietMode(boolean quietModeEnable) throws Exception {         final String str;         // TV launcher uses intent filter priority to prevent 3p launchers replacing it         // this causes the activity that toggles quiet mode to be suspended         // and the profile would never start         if (hasDeviceFeature(""android.software.leanback"")) {             str = quietModeEnable ? String.format(""am stop-user -f %d"", mUserId)                     : String.format(""am start-user %d"", mUserId);         } else {             str = String.format(""am start-activity -n %s --ez %s %s"",                     QUIET_MODE_TOGGLE_ACTIVITY, EXTRA_QUIET_MODE_STATE, quietModeEnable);         }         executeShellCommand(str);     }      private void setAndStartLauncher(String component) throws Exception {         String output = getDevice().executeShellCommand(String.format(                 ""cmd package set-home-activity --user %d %s"", mPrimaryUserId, component));         assertTrue(""failed to set home activity"", output.contains(""Success""));         output = getDevice().executeShellCommand(                 String.format(""cmd shortcut clear-default-launcher --user %d"", mPrimaryUserId));         assertTrue(""failed to clear default launcher"", output.contains(""Success""));         executeShellCommand(""am start -W -n "" + component);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.PrimaryUserTest"	"PrimaryUserTest"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	"public void test/*  *.  */  package com.android.cts.managedprofile;  import android.app.admin.DevicePolicyManager; import android.content.Intent; import android.content.pm.PackageManager; import android.test.ActivityInstrumentationTestCase2;  import androidx.test.InstrumentationRegistry;  /**  * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API, for  * {@code DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT}.  *  * Note that it expects that there is an activity responding to {@code PrimaryUserActivity.ACTION}  * in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary profile,  * and one to {@code AllUsersActivity.ACTION} in both profiles.  *  * Note that the {code DevicePolicyManager#clearCrossProfileIntentFilters} as well as more complex  * test scenarios can be found in {@link ManagedProfileTest}.  */ public class PrimaryUserTest extends ActivityInstrumentationTestCase2<TestActivity> {      private PackageManager mPackageManager;      public PrimaryUserTest() {         super(TestActivity.class);     }      @Override     protected void setUp() throws Exception {         super.setUp();         // As the way to access Instrumentation is changed in the new runner, we need to inject it         // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will         // be marked as deprecated and replaced with ActivityTestRule.         injectInstrumentation(InstrumentationRegistry.getInstrumentation());         mPackageManager = getActivity().getPackageManager();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	"com.android.cts.managedprofile.PrimaryUserTest"	"testAddCrossProfileIntentFilter_primary"	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	""	"authentication primary migration"	""	""	""	"primary"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	"public void testAddCrossProfileIntentFilter_primary() {         assertEquals(1, mPackageManager.queryIntentActivities(                 new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).size());         getActivity().startActivity(PrimaryUserActivity.ACTION);         assertTrue(getActivity().checkActivityStarted());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningTest"	"testAccountMigration"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java"	""	"public void testAccountMigration() throws Exception {         if (!mHasFeature) {             return;         }          provisionManagedProfile();          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ProvisioningTest"",                 ""testAccountExist"", mProfileUserId);          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ProvisioningTest"",                 ""testAccountNotExist"", mParentUserId);     }      @FlakyTest(bugId = 141747631)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testResetPasswordTokenUsableAfterClearingLock"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testResetPasswordTokenUsableAfterClearingLock() throws Exception {         if (!mHasFeature || !mSupportsFbe || !mHasSecureLockScreen) {             return;         }         final String devicePassword = TEST_PASSWORD;          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",                 ""testSetResetPasswordToken"", mProfileUserId);         try {             changeUserCredential(devicePassword, null, mParentUserId);             changeUserCredential(null, devicePassword, mParentUserId);             changeUserCredential(devicePassword, null, mParentUserId);             lockProfile();             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",                     ""testResetPasswordBeforeUnlock"", mProfileUserId);             verifyUserCredential(RESET_PASSWORD_TEST_DEFAULT_PASSWORD, mProfileUserId);         } finally {             changeUserCredential(null, devicePassword, mParentUserId);             // Cycle the device screen to flush stale password information from keyguard,             // otherwise it will still ask for the non-existent password.             // return screen to be on for cts test runs             executeShellCommand(""input keyevent KEYCODE_WAKEUP"");             executeShellCommand(""input keyevent KEYCODE_SLEEP"");             executeShellCommand(""input keyevent KEYCODE_WAKEUP"");         }     }      @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testIsUsingUnifiedPassword"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testIsUsingUnifiedPassword() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }          // Freshly created profile has no separate challenge.         verifyUnifiedPassword(true);          // Set separate challenge and verify that the API reports it correctly.         changeUserCredential(                 TEST_PASSWORD /* newCredential */, null /* oldCredential */, mProfileUserId);         verifyUnifiedPassword(false);     }      @FlakyTest     @LargeTest     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testUnlockWorkProfile_deviceWidePassword"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testUnlockWorkProfile_deviceWidePassword() throws Exception {         if (!mHasFeature || !mSupportsFbe || !mHasSecureLockScreen) {             return;         }         try {             // Add a device password after the work profile has been created.             changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);             // Lock the profile with key eviction.             lockProfile();             // Turn on work profile, by unlocking the profile with the device password.             verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);              // Verify profile user is running unlocked by running a sanity test on the work profile.             installAppAsUser(SIMPLE_APP_APK, mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SanityTest"", mProfileUserId);         } finally {             // Clean up             changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);         }     }      @FlakyTest     @LargeTest     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testRebootDevice_unifiedPassword"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	"public void testRebootDevice_unifiedPassword() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         // Waiting before rebooting prevents flakiness.         waitForBroadcastIdle();         changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);         try {             rebootAndWaitUntilReady();             verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);             waitForUserUnlock(mProfileUserId);             installAppAsUser(SIMPLE_APP_APK, mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SanityTest"", mProfileUserId);         } finally {             changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);             // Work-around for http://b/113866275 - password prompt being erroneously shown at the             // end.             pressPowerButton();         }     }      @LargeTest     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testIsDefaultInputMethodSet"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	"public void testIsDefaultInputMethodSet() throws Exception {         final String setting = Settings.Secure.DEFAULT_INPUT_METHOD;         final ContentResolver resolver = getContext().getContentResolver();         final String ime = Settings.Secure.getString(resolver, setting);          Settings.Secure.putString(resolver, setting, ""com.test.1"");         Thread.sleep(500);         assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());          mDevicePolicyManager.setSecureSetting(getWho(), setting, ""com.test.2"");         Thread.sleep(500);         assertTrue(mDevicePolicyManager.isCurrentInputMethodSetByOwner());          Settings.Secure.putString(resolver, setting, ime);         Thread.sleep(500);         assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());     }      /**      * Test: It should be recored whether the Device Owner or the user installed a CA cert.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"SettingsIntentsTest"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void test/*  *.  */ package com.android.cts.managedprofile;  import android.content.Intent; import android.content.pm.PackageManager; import android.test.ActivityInstrumentationTestCase2; import android.provider.Settings;   /**  * Tests that make sure that some core application intents as described in Compatibility Definition  * Document are handled within a managed profile.  * Note that OEMs can replace the Settings apps, so we we can at most check if the intent resolves.  */ public class SettingsIntentsTest extends ActivityInstrumentationTestCase2<TestActivity> {      private PackageManager mPackageManager;      public SettingsIntentsTest() {         super(TestActivity.class);     }      @Override     protected void setUp() throws Exception {         super.setUp();         mPackageManager = getActivity().getPackageManager();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testSettings"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testSettings() {         assertNotNull(mPackageManager.resolveActivity(                 new Intent(Settings.ACTION_SETTINGS), 0 /* flags */));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testAccounts"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testAccounts() {         assertNotNull(mPackageManager.resolveActivity(                 new Intent(Settings.ACTION_SYNC_SETTINGS), 0 /* flags */));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testApps"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testApps() {         assertNotNull(mPackageManager.resolveActivity(                 new Intent(Settings.ACTION_APPLICATION_SETTINGS), 0 /* flags */));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testSecurity"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testSecurity() {         // This leads to device administrators, screenlock etc.         assertNotNull(mPackageManager.resolveActivity(                 new Intent(Settings.ACTION_SECURITY_SETTINGS), 0 /* flags */));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testNfc"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testNfc() {         if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_NFC)) {             assertNotNull(mPackageManager.resolveActivity(                     new Intent(Settings.ACTION_NFC_SETTINGS), 0 /* flags */));         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testLocation"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	"public void testLocation() {         assertNotNull(mPackageManager.resolveActivity(                 new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS), 0 /* flags */));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"disableWorkPolicyInfoActivity"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	"public void test/*  *.  */ package com.google.android.cts.deviceowner;  import static android.server.wm.WindowManagerState.STATE_RESUMED;  import android.app.admin.DeviceAdminReceiver; import android.app.admin.DevicePolicyManager; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.pm.PackageManager; import android.os.RemoteException; import android.provider.Settings; import android.server.wm.WindowManagerStateHelper; import android.support.test.uiautomator.By; import android.support.test.uiautomator.UiDevice; import android.support.test.uiautomator.Until; import android.test.InstrumentationTestCase; import androidx.test.InstrumentationRegistry;  /**  * Class for device-owner based tests.  *  * <p>This class handles making sure that the test is the device owner and that it has an active  * admin registered if necessary. The admin component can be accessed through {@link #getWho()}.  */ public class DeviceOwnerTest extends InstrumentationTestCase {      public static final int TIMEOUT = 2000;      protected Context mContext;     protected UiDevice mDevice;      /** Device Admin receiver for DO. */     public static class BasicAdminReceiver extends DeviceAdminReceiver {         /* empty */     }      static final String PACKAGE_NAME = DeviceOwnerTest.class.getPackage().getName();     static final ComponentName RECEIVER_COMPONENT =             new ComponentName(PACKAGE_NAME, BasicAdminReceiver.class.getName());      protected DevicePolicyManager mDevicePolicyManager;     protected PackageManager mPackageManager;     protected boolean mIsDeviceOwner;      @Override     protected void setUp() throws Exception {         super.setUp();         mContext = getInstrumentation().getContext();         mDevice = UiDevice.getInstance(getInstrumentation());         mPackageManager = mContext.getPackageManager();         mDevicePolicyManager =                 (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);          mIsDeviceOwner = mDevicePolicyManager.isDeviceOwnerApp(PACKAGE_NAME);         if (mIsDeviceOwner) {             assertTrue(mDevicePolicyManager.isAdminActive(RECEIVER_COMPONENT));              // Note DPM.getDeviceOwner() now always returns null on non-DO users as of NYC.             assertEquals(PACKAGE_NAME, mDevicePolicyManager.getDeviceOwner());         }          try {             mDevice.setOrientationNatural();         } catch (RemoteException e) {             throw new RuntimeException(""failed to freeze device orientation"", e);         }         wakeupDeviceAndPressHome();     }      private void wakeupDeviceAndPressHome() throws Exception {         mDevice.wakeUp();         mDevice.pressMenu();         mDevice.pressHome();     }      @Override     protected void tearDown() throws Exception {         mDevice.pressBack();         mDevice.pressHome();         mDevice.waitForIdle(TIMEOUT); // give UI time to finish animating     }      private boolean launchPrivacyAndCheckWorkPolicyInfo() throws Exception {         // Launch Settings         launchSettingsPage(InstrumentationRegistry.getContext(), Settings.ACTION_PRIVACY_SETTINGS);          // Wait for loading permission usage data.         mDevice.waitForIdle(TIMEOUT);          return (null != mDevice.wait(Until.findObject(By.text(""Your work policy info"")), TIMEOUT));     }      private void launchSettingsPage(Context ctx, String pageName) throws Exception {         Intent intent = new Intent(pageName);         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);          ComponentName componentName =                 ctx.getPackageManager()                         .resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY)                         .getComponentInfo()                         .getComponentName();         ctx.startActivity(intent);          new WindowManagerStateHelper().waitForActivityState(componentName, STATE_RESUMED);     }      private void disableWorkPolicyInfoActivity() {         mContext.getPackageManager()                 .setComponentEnabledSetting(                         new ComponentName(mContext, WorkPolicyInfoActivity.class),                         PackageManager.COMPONENT_ENABLED_STATE_DISABLED,                         PackageManager.DONT_KILL_APP);     }      /**      * If the app is the active device owner and has work policy info, then we should have a Privacy      * entry for it.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"testDeviceOwnerWithInfo"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	"public void testDeviceOwnerWithInfo() throws Exception {         assertTrue(mIsDeviceOwner);         assertTrue(                 ""Couldn't find work policy info settings entry"",                 launchPrivacyAndCheckWorkPolicyInfo());     }      /**      * If the app is the active device owner, but doesn't have work policy info, then we shouldn't      * have a Privacy entry for it.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"testDeviceOwnerWithoutInfo"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	"public void testDeviceOwnerWithoutInfo() throws Exception {         assertTrue(mIsDeviceOwner);         disableWorkPolicyInfoActivity();         assertFalse(                 ""Work policy info settings entry shouldn't be present"",                 launchPrivacyAndCheckWorkPolicyInfo());     }      /**      * If the app is NOT the active device owner, then we should not have a Privacy entry for work      * policy info.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"testNonDeviceOwnerWithInfo"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	"public void testNonDeviceOwnerWithInfo() throws Exception {         assertFalse(mIsDeviceOwner);         assertFalse(                 ""Work policy info settings entry shouldn't be present"",                 launchPrivacyAndCheckWorkPolicyInfo());     }      /**      * If the app is NOT the active device owner, and doesn't have work policy info, then we should      * not have a Privacy entry for work policy info.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"testNonDeviceOwnerWithoutInfo"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	"public void testNonDeviceOwnerWithoutInfo() throws Exception {         assertFalse(mIsDeviceOwner);         disableWorkPolicyInfoActivity();         assertFalse(                 ""Work policy info settings entry shouldn't be present"",                 launchPrivacyAndCheckWorkPolicyInfo());     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.ProvisioningTest"	"PersistableBundle"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"/*  *.  */ package com.android.cts.managedprofile;  import static android.app.admin.DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION; import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_SKIP_ENCRYPTION;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.assertTrue; import static org.junit.Assert.fail;  import android.accounts.Account; import android.accounts.AccountManager; import android.app.admin.DeviceAdminReceiver; import android.app.admin.DevicePolicyManager; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.SharedPreferences; import android.os.PersistableBundle; import android.util.Log;  import androidx.test.InstrumentationRegistry; import androidx.test.filters.SmallTest;  import com.android.compatibility.common.util.devicepolicy.provisioning.SilentProvisioningTestManager;  import org.junit.Before; import org.junit.Test;  @SmallTest public class ProvisioningTest {     private static final String TAG = ProvisioningTest.class.getSimpleName();      private static final String SHARED_PREFERENCE_FILE_NAME = ""shared-preferences-file-name"";      private static final PersistableBundle ADMIN_EXTRAS_BUNDLE = new PersistableBundle();     private static final String ADMIN_EXTRAS_BUNDLE_KEY_1 = ""KEY_1"";     private static final String ADMIN_EXTRAS_BUNDLE_VALUE_1 = ""VALUE_1"";     static {         ADMIN_EXTRAS_BUNDLE.putString(ADMIN_EXTRAS_BUNDLE_KEY_1, ADMIN_EXTRAS_BUNDLE_VALUE_1);     }      public static final String KEY_PROVISIONING_SUCCESSFUL_RECEIVED =             ""key-provisioning-successful-received"";      private static final ComponentName ADMIN_RECEIVER_COMPONENT = new ComponentName(             ProvisioningAdminReceiver.class.getPackage().getName(),             ProvisioningAdminReceiver.class.getName());      public static class ProvisioningAdminReceiver extends DeviceAdminReceiver {         @Override         public void onProfileProvisioningComplete(Context context, Intent intent) {             super.onProfileProvisioningComplete(context, intent);             // Enabled profile             getManager(context).setProfileName(ADMIN_RECEIVER_COMPONENT, ""Managed Profile"");             getManager(context).setProfileEnabled(ADMIN_RECEIVER_COMPONENT);             Log.i(TAG, ""onProfileProvisioningComplete"");              saveBundle(context, intent.getParcelableExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE));         }     }      private Context mContext;     private DevicePolicyManager mDpm;      @Before     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testProvisionManagedProfile_accountCopy"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testProvisionManagedProfile_accountCopy() throws InterruptedException {         provisionManagedProfile(createBaseProvisioningIntent()                 .putExtra(EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION, true));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.ProvisioningTest"	"testAccountNotExist"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"migration"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java"	""	"public void testAccountNotExist() {         AccountManager am = AccountManager.get(mContext);         assertTrue(""test account still exists after account migration"",                 am.getAccountsByType(AccountAuthenticator.ACCOUNT_TYPE).length == 0);     }      private Intent createBaseProvisioningIntent() {         return new Intent(ACTION_PROVISION_MANAGED_PROFILE)                 .putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME, ADMIN_RECEIVER_COMPONENT)                 .putExtra(EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)                 .putExtra(EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE, ADMIN_EXTRAS_BUNDLE)                 .putExtra(EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE, addAndGetTestAccount());     }      private void provisionManagedProfile(Intent intent) throws InterruptedException {         SilentProvisioningTestManager provisioningManager = new SilentProvisioningTestManager(mContext);         assertTrue(provisioningManager.startProvisioningAndWait(intent));         Log.i(TAG, ""managed profile provisioning successful"");     }      private Account addAndGetTestAccount() {         Account account = AccountAuthenticator.TEST_ACCOUNT;         AccountManager.get(mContext).addAccountExplicitly(account, null, null);         return account;     }      private static void saveBundle(Context context, PersistableBundle bundle) {         if (bundle == null) {             Log.e(TAG, ""null saveBundle"");             return;         }          getSharedPreferences(context).edit()                 .putString(ADMIN_EXTRAS_BUNDLE_KEY_1, bundle.getString(ADMIN_EXTRAS_BUNDLE_KEY_1))                 .commit();     }      private static PersistableBundle loadBundle(Context context) {         SharedPreferences pref = getSharedPreferences(context);         PersistableBundle bundle = new PersistableBundle();         bundle.putString(ADMIN_EXTRAS_BUNDLE_KEY_1,                 pref.getString(ADMIN_EXTRAS_BUNDLE_KEY_1, null));         return bundle;     }      public static SharedPreferences getSharedPreferences(Context context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeTurnedOffWhenRestrictionSet"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	"public void testAirplaneModeTurnedOffWhenRestrictionSet() throws Exception {         final CountDownLatch latch = new CountDownLatch(1);         // Using array so that it can be modified in broadcast receiver.         boolean value[] = new boolean[1];         BroadcastReceiver receiver = new BroadcastReceiver() {             @Override             public void onReceive(Context context, Intent intent) {                 value[0] = intent.getBooleanExtra(""state"", true);                 latch.countDown();             }         };         mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));          try {             Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);             mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);             assertTrue(latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));             assertFalse(value[0]);             assertEquals(0, Settings.Global.getInt(                     mContext.getContentResolver(), Settings.Global.AIRPLANE_MODE_ON));         } finally {             mContext.unregisterReceiver(receiver);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeCannotBeTurnedOnWithRestrictionOn"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	"public void testAirplaneModeCannotBeTurnedOnWithRestrictionOn()             throws Exception {         mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);         Thread.sleep(SLEEP_MS);         Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);         assertEquals(0, Settings.Global.getInt(                 mContext.getContentResolver(), AIRPLANE_MODE_ON));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeCanBeTurnedOnWithRestrictionOff"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	"public void testAirplaneModeCanBeTurnedOnWithRestrictionOff() throws SettingNotFoundException {         Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);         assertEquals(1, Settings.Global.getInt(                 mContext.getContentResolver(), AIRPLANE_MODE_ON));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.packageinstaller.ManualPackageInstallTest"	"testManualInstallBlocked"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java"	""	"public void testManualInstallBlocked() throws Exception {         synchronized (mPackageInstallerTimeoutLock) {             mCallbackReceived = false;             mCallbackStatus = PACKAGE_INSTALLER_STATUS_UNDEFINED;         }         // Calls the original installPackage which does not click through the install button.         super.installPackage(TEST_APP_LOCATION);         synchronized (mPackageInstallerTimeoutLock) {             try {                 mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);             } catch (InterruptedException e) {             }             assertTrue(mCallbackReceived);             assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);         }          mCallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         mContext.startActivity(mCallbackIntent);          automateDismissInstallBlockedDialog();          // Assuming installation is not synchronous, we should wait a while before checking.         Thread.sleep(INSTALL_WAIT_TIME);         assertFalse(isPackageInstalled(TEST_APP_PKG));     }      @Override     protected void installPackage(String packageLocation) throws Exception {         super.installPackage(packageLocation);          synchronized (mPackageInstallerTimeoutLock) {             try {                 mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);             } catch (InterruptedException e) {             }             assertTrue(mCallbackReceived);             assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);         }          // Use a receiver to listen for package install.         synchronized (mPackageInstallerTimeoutLock) {             mCallbackReceived = false;             mCallbackStatus = PACKAGE_INSTALLER_STATUS_UNDEFINED;         }          mCallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         mContext.startActivity(mCallbackIntent);          automateInstallClick();     }      private void automateInstallClick() {         mDevice.wait(Until.hasObject(INSTALL_BUTTON_SELECTOR), AUTOMATOR_WAIT_TIMEOUT);         UiObject2 button = mDevice.findObject(INSTALL_BUTTON_SELECTOR);         assertNotNull(""Install button not found"", button);         button.click();     }      private void automateDismissInstallBlockedDialog() {         mDevice.wait(Until.hasObject(getPopUpImageSelector()), AUTOMATOR_WAIT_TIMEOUT);         UiObject2 icon = mDevice.findObject(getPopUpImageSelector());         assertNotNull(""Policy transparency dialog icon not found"", icon);         // ""OK"" button only present in the dialog if it is blocked by policy.         UiObject2 button = mDevice.findObject(getPopUpButtonSelector());         assertNotNull(""OK button not found"", button);         button.click();     }      private String getSettingsPackageName() {         String settingsPackageName = ""com.android.settings"";         try {             mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");             ResolveInfo resolveInfo = mPackageManager.resolveActivityAsUser(                     new Intent(Settings.ACTION_SETTINGS), PackageManager.MATCH_SYSTEM_ONLY,                     UserHandle.USER_SYSTEM);             if (resolveInfo != null && resolveInfo.activityInfo != null) {                 settingsPackageName = resolveInfo.activityInfo.packageName;             }         } finally {             mUiAutomation.dropShellPermissionIdentity();         }         return settingsPackageName;     }      private BySelector getPopUpButtonSelector() {         return By.clazz(android.widget.Button.class.getName())                 .res(""android:id/button1"")                 .pkg(getSettingsPackageName());     }      private BySelector getPopUpImageSelector() {         final String settingsPackageName = getSettingsPackageName();         return By.clazz(android.widget.ImageView.class.getName())                 .res(settingsPackageName + "":id/admin_support_icon"")                 .pkg(settingsPackageName);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testWriteValidationFailedExceptionToParcel"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	"public void testWriteValidationFailedExceptionToParcel() {         final List<FreezePeriod> freezePeriods =             ImmutableList.of(new FreezePeriod(MonthDay.of(1, 10), MonthDay.of(1, 9)));         try {             SystemUpdatePolicy.createAutomaticInstallPolicy().setFreezePeriods(freezePeriods);             fail(""ValidationFailedException not thrown for invalid freeze period."");         } catch (ValidationFailedException e) {             final Parcel parcel = Parcel.obtain();             e.writeToParcel(parcel, 0);             parcel.setDataPosition(0);              final ValidationFailedException copy =                 ValidationFailedException.CREATOR.createFromParcel(parcel);              assertThat(copy).isNotNull();             assertThat(e.getErrorCode()).isEqualTo(copy.getErrorCode());             assertThat(e.getMessage()).isEqualTo(copy.getMessage());         }     }      private void assertSystemUpdatePoliciesEqual(SystemUpdatePolicy policy,             SystemUpdatePolicy copy) {         assertThat(policy.getInstallWindowStart()).isEqualTo(copy.getInstallWindowStart());         assertThat(policy.getInstallWindowEnd()).isEqualTo(copy.getInstallWindowEnd());         assertFreezePeriodListsEqual(policy.getFreezePeriods(), copy.getFreezePeriods());         assertThat(policy.getPolicyType()).isEqualTo(copy.getPolicyType());     }      private void assertFreezePeriodListsEqual(List<FreezePeriod> original,             List<FreezePeriod> copy) {         assertThat(original).isNotNull();         assertThat(copy).isNotNull();         assertThat(original.size()).isEqualTo(copy.size());         for (FreezePeriod period1 : original) {             assertThat(period1).isNotNull();             assertFreezePeriodListContains(copy, period1);         }         for (FreezePeriod period1 : copy) {             assertThat(period1).isNotNull();             assertFreezePeriodListContains(original, period1);         }     }      private void assertFreezePeriodListContains(List<FreezePeriod> list, FreezePeriod period) {         for (FreezePeriod other : list) {             assertThat(other).isNotNull();             if (areFreezePeriodsEqual(period, other)) {                 return;             }         }         final List<String> printablePeriods = new ArrayList<>();         for (FreezePeriod printablePeriod : list) {             printablePeriods.add(printablePeriod.toString());         }         fail(String.format(""FreezePeriod list [%s] does not contain the specified period %s."",             String.join("", "", printablePeriods), period));     }      private boolean areFreezePeriodsEqual(FreezePeriod period1, FreezePeriod period2) {         return period1 != null && period2 != null             && Objects.equals(period1.getStart(), period2.getStart())             && Objects.equals(period1.getEnd(), period2.getEnd());     }      private void testPolicy(SystemUpdatePolicy policy) {         mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, policy);         waitForPolicyChangedBroadcast();         SystemUpdatePolicy newPolicy = mDevicePolicyManager.getSystemUpdatePolicy();         if (policy == null) {             assertNull(newPolicy);         } else {             assertNotNull(newPolicy);             assertEquals(policy.toString(), newPolicy.toString());             assertEquals(policy.getPolicyType(), newPolicy.getPolicyType());             if (policy.getPolicyType() == SystemUpdatePolicy.TYPE_INSTALL_WINDOWED) {                 assertEquals(policy.getInstallWindowStart(), newPolicy.getInstallWindowStart());                 assertEquals(policy.getInstallWindowEnd(), newPolicy.getInstallWindowEnd());             }         }     }      private void setPolicyWithFreezePeriod(String...dates) {         SystemUpdatePolicy policy = SystemUpdatePolicy.createPostponeInstallPolicy();         setFreezePeriods(policy, dates);         mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, policy);          List<FreezePeriod> loadedFreezePeriods = mDevicePolicyManager                 .getSystemUpdatePolicy().getFreezePeriods();         assertEquals(dates.length / 2, loadedFreezePeriods.size());         for (int i = 0; i < dates.length; i += 2) {             assertEquals(parseMonthDay(dates[i]), loadedFreezePeriods.get(i / 2).getStart());             assertEquals(parseMonthDay(dates[i + 1]), loadedFreezePeriods.get(i / 2).getEnd());         }     }      private void validateFreezePeriodsSucceeds(String...dates)  {         SystemUpdatePolicy p = SystemUpdatePolicy.createPostponeInstallPolicy();         setFreezePeriods(p, dates);     }      private void validateFreezePeriodsFails(int errorCode, String... dates)  {         SystemUpdatePolicy p = SystemUpdatePolicy.createPostponeInstallPolicy();         try {             setFreezePeriods(p, dates);             fail(""Exception not thrown for dates: "" + String.join("" "", dates));         } catch (SystemUpdatePolicy.ValidationFailedException e) {             assertEquals(""Exception not expected: "" + e.getMessage(),                     errorCode,e.getErrorCode());         }     }      private void validateFreezePeriodsFailsOverlap(String... dates)  {         validateFreezePeriodsFails(ValidationFailedException.ERROR_DUPLICATE_OR_OVERLAP, dates);     }      private void validateFreezePeriodsFailsTooLong(String... dates)  {         validateFreezePeriodsFails(ValidationFailedException.ERROR_NEW_FREEZE_PERIOD_TOO_LONG,                 dates);     }      private void validateFreezePeriodsFailsTooClose(String... dates)  {         validateFreezePeriodsFails(ValidationFailedException.ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE,                 dates);     }      //dates are in MM-DD format     private void setFreezePeriods(SystemUpdatePolicy policy, String... dates) {         List<FreezePeriod> periods = new ArrayList<>();         for (int i = 0; i < dates.length; i+= 2) {             periods.add(new FreezePeriod(parseMonthDay(dates[i]), parseMonthDay(dates[i + 1])));         }         policy.setFreezePeriods(periods);     }      private MonthDay parseMonthDay(String date) {         return MonthDay.of(Integer.parseInt(date.substring(0, 2)),                 Integer.parseInt(date.substring(3, 5)));     }      private void clearFreezeRecord() throws Exception {         runShellCommand(""dpm"", ""clear-freeze-period-record"");     }      private void setSystemDate(LocalDate date) throws Exception {         mRestoreDate = true;         Calendar c = Calendar.getInstance();         c.set(Calendar.YEAR, date.getYear());         c.set(Calendar.MONTH, date.getMonthValue() - 1);         c.set(Calendar.DAY_OF_MONTH, date.getDayOfMonth());         mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, c.getTimeInMillis());         waitForTimeChangedBroadcast();     }      private void waitForPolicyChangedBroadcast() {         if (!isDeviceOwner()) {             // ACTION_SYSTEM_UPDATE_POLICY_CHANGED is always sent to system user, skip             // waiting for it if we are inside a managed profile.             return;         }         try {             assertTrue(""Timeout while waiting for broadcast."",                     mPolicyChangedSemaphore.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));         } catch (InterruptedException e) {             fail(""Interrupted while waiting for broadcast."");         }     }      private void waitForTimeChangedBroadcast() {         try {             assertTrue(""Timeout while waiting for broadcast."",                     mTimeChangedSemaphore.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));         } catch (InterruptedException e) {             fail(""Interrupted while waiting for broadcast."");         }     }      private int getAirplaneMode() {         int airplaneMode;         try {             airplaneMode = Settings.Global.getInt(mContext.getContentResolver(),                 Settings.Global.AIRPLANE_MODE_ON);         } catch (Settings.SettingNotFoundException e) {             airplaneMode = 0xFF;             // if the mode is not supported, return a non zero value.             Log.i(TAG, ""Airplane mode is not found in Settings. Skipping AirplaneMode update"");         }         return airplaneMode;     }      private boolean setAirplaneModeAndWaitBroadcast (int state) throws Exception {         Log.i(TAG, ""setAirplaneModeAndWaitBroadcast setting state(0=disable, 1=enable): "" + state);          final CountDownLatch latch = new CountDownLatch(1);         BroadcastReceiver receiver = new BroadcastReceiver() {             @Override             public void onReceive(Context context, Intent intent) {                 Log.i(TAG, ""Received broadcast for AirplaneModeUpdate"");                 latch.countDown();             }         };         mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));         try {             Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, state);             if (!latch.await(TIMEOUT_SEC, TimeUnit.SECONDS)) {                 Log.d(TAG, ""Failed to receive broadcast in "" + TIMEOUT_SEC + ""sec"");                 return false;             }         } finally {             mContext.unregisterReceiver(receiver);         }         return true;     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.SetTimeTest"	"currentTimeMillis"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	"public void test/*  *.  */ package com.android.cts.deviceowner;  import android.app.admin.DevicePolicyManager; import android.content.BroadcastReceiver; import android.content.Context; import android.content.Intent; import android.content.IntentFilter; import android.provider.Settings;  import java.util.Calendar; import java.util.TimeZone; import java.util.concurrent.CountDownLatch; import java.util.concurrent.TimeUnit;  /**  * Test {@link DevicePolicyManager#setTime} and @link {DevicePolicyManager#setTimeZone}  */ public class SetTimeTest extends BaseDeviceOwnerTest {      private static final long TEST_TIME_1 = 10000000;     private static final long TEST_TIME_2 = 100000000;     private static final String TEST_TIME_ZONE_1 = ""America/New_York"";     private static final String TEST_TIME_ZONE_2 = ""America/Los_Angeles"";     private static final long TIMEOUT_SEC = 60;      // Real world time to restore after the test.     private long mStartTimeWallClockMillis;     // Elapsed time to measure time taken by the test.     private long mStartTimeElapsedNanos;      @Override     protected void setUp() throws Exception {         super.setUp();         saveTime();     }      @Override     protected void tearDown() throws Exception {         restoreTime();         super.tearDown();     }      private void testSetTimeWithValue(long testTime) throws Exception {         final CountDownLatch latch = new CountDownLatch(1);         BroadcastReceiver receiver = new BroadcastReceiver() {             @Override             public void onReceive(Context context, Intent intent) {                 latch.countDown();             }         };         mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_TIME_CHANGED));          try {             assertTrue(""failed to set time"", mDevicePolicyManager.setTime(getWho(), testTime));             assertTrue(""timed out waiting for time change broadcast"",                 latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));             assertTrue(""time is different from what was set"",                 System.currentTimeMillis() <= testTime + (TIMEOUT_SEC + 1) * 1000);         } finally {             mContext.unregisterReceiver(receiver);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.SetTimeTest"	"testSetTime"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	"public void testSetTime() throws Exception {         mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""0"");         testSetTimeWithValue(TEST_TIME_1);         testSetTimeWithValue(TEST_TIME_2);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.SetTimeTest"	"testSetTimeFailWithAutoTimeOn"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	"public void testSetTimeFailWithAutoTimeOn() {         mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""1"");         assertFalse(mDevicePolicyManager.setTime(getWho(), TEST_TIME_1));     }      private void testSetTimeZoneWithValue(String testTimeZone) throws Exception {         final CountDownLatch latch = new CountDownLatch(1);         final BroadcastReceiver receiver = new BroadcastReceiver() {             @Override             public void onReceive(Context context, Intent intent) {                 if (testTimeZone.equals(intent.getStringExtra(Intent.EXTRA_TIMEZONE))) {                     latch.countDown();                 }             }         };         mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED));          try {             assertTrue(""failed to set timezone"",                 mDevicePolicyManager.setTimeZone(getWho(), testTimeZone));             assertTrue(""timed out waiting for timezone change broadcast"",                 latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));              // There might be a delay in timezone setting propagation, so we retry for 5 seconds.             int retries = 0;             while (!testTimeZone.equals(TimeZone.getDefault().getID())) {                 if (retries++ > 5) {                     fail(""timezone wasn't updated"");                 }                 Thread.sleep(1000);             }         } finally {             mContext.unregisterReceiver(receiver);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.SetTimeTest"	"testSetTimeZone"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	"public void testSetTimeZone() throws Exception {         mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""0"");          try {             // If we are already in test time zone, use another one first.             if (TEST_TIME_ZONE_1.equals(TimeZone.getDefault().getID())) {                 testSetTimeZoneWithValue(TEST_TIME_ZONE_2);                 testSetTimeZoneWithValue(TEST_TIME_ZONE_1);             } else {                 testSetTimeZoneWithValue(TEST_TIME_ZONE_1);                 testSetTimeZoneWithValue(TEST_TIME_ZONE_2);             }         } finally {             mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""1"");         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.SetTimeTest"	"testSetTimeZoneFailWithAutoTimezoneOn"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	"public void testSetTimeZoneFailWithAutoTimezoneOn() {         mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""1"");         assertFalse(mDevicePolicyManager.setTimeZone(getWho(), TEST_TIME_ZONE_1));     }      private void saveTime() {         mStartTimeWallClockMillis = System.currentTimeMillis();         mStartTimeElapsedNanos = System.nanoTime();     }      private void restoreTime() {         mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""0"");          final long estimatedNow = mStartTimeWallClockMillis +                 TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);         mDevicePolicyManager.setTime(getWho(), estimatedNow);          mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""1"");      } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.server.cts.device.statsd.AtomTests"	"testBleScanOpportunistic"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java"	""	"public void testBleScanOpportunistic() {         ScanSettings scanSettings = new ScanSettings.Builder()                 .setScanMode(ScanSettings.SCAN_MODE_OPPORTUNISTIC).build();         performBleScan(scanSettings, null,false);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.server.cts.device.statsd.AtomTests"	"testBleScanUnoptimized"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java"	""	"public void testBleScanUnoptimized() {         ScanSettings scanSettings = new ScanSettings.Builder()                 .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();         performBleScan(scanSettings, null, false);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.server.cts.device.statsd.AtomTests"	"testBleScanResult"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java"	""	"public void testBleScanResult() {         ScanSettings scanSettings = new ScanSettings.Builder()                 .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();         ScanFilter.Builder scanFilter = new ScanFilter.Builder();         performBleScan(scanSettings, Arrays.asList(scanFilter.build()), true);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.server.cts.device.statsd.AtomTests"	"testBleScanInterrupted"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java"	""	"public void testBleScanInterrupted() throws Exception {         performBleAction((bluetoothAdapter, bleScanner) -> {             ScanSettings scanSettings = new ScanSettings.Builder()                     .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY).build();             ScanCallback scanCallback = new ScanCallback() {                 @Override                 public void onScanResult(int callbackType, ScanResult result) {                     Log.v(TAG, ""called onScanResult"");                 }                 @Override                 public void onScanFailed(int errorCode) {                     Log.v(TAG, ""called onScanFailed"");                 }                 @Override                 public void onBatchScanResults(List<ScanResult> results) {                     Log.v(TAG, ""called onBatchScanResults"");                 }             };              int uid = Process.myUid();             int whatAtomId = 9_999;              // Get the current setting for bluetooth background scanning.             // Set to 0 if the setting is not found or an error occurs.             int initialBleScanGlobalSetting = Settings.Global.getInt(                     InstrumentationRegistry.getTargetContext().getContentResolver(),                     Settings.Global.BLE_SCAN_ALWAYS_AVAILABLE, 0);              // Turn off bluetooth background scanning.             Settings.Global.putInt(InstrumentationRegistry.getTargetContext().getContentResolver(),                     Settings.Global.BLE_SCAN_ALWAYS_AVAILABLE, 0);              // Change state to State.ON.             bleScanner.startScan(null, scanSettings, scanCallback);             sleep(6_000);             writeSliceByBleScanStateChangedAtom(whatAtomId, uid, false, false, false);             writeSliceByBleScanStateChangedAtom(whatAtomId, uid, false, false, false);              bluetoothAdapter.disable();             sleep(6_000);              // Trigger State.RESET so that new state is State.OFF.             if (!bluetoothAdapter.enable()) {                 Log.e(TAG, ""Could not enable bluetooth to trigger state reset"");                 return;             }             sleep(6_000); // Wait for Bluetooth to fully turn on.             writeSliceByBleScanStateChangedAtom(whatAtomId, uid, false, false, false);             writeSliceByBleScanStateChangedAtom(whatAtomId, uid, false, false, false);             writeSliceByBleScanStateChangedAtom(whatAtomId, uid, false, false, false);              // Set bluetooth background scanning to original setting.             Settings.Global.putInt(InstrumentationRegistry.getTargetContext().getContentResolver(),                     Settings.Global.BLE_SCAN_ALWAYS_AVAILABLE, initialBleScanGlobalSetting);         });     }      private static void writeSliceByBleScanStateChangedAtom(int atomId, int firstUid,                                                             boolean field2, boolean field3,                                                             boolean field4) {         final StatsEvent.Builder builder = StatsEvent.newBuilder()                 .setAtomId(atomId)                 .writeAttributionChain(new int[] {firstUid}, new String[] {""tag1""})                 .writeBoolean(field2)                 .writeBoolean(field3)                 .writeBoolean(field4)                 .usePooledBuffer();          StatsLog.write(builder.build());     }      /**      * Set up BluetoothLeScanner and perform the action in the callback.      * Restore Bluetooth to original state afterwards.      **/     private static void performBleAction(BiConsumer<BluetoothAdapter, BluetoothLeScanner> actions) {         BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();         if (bluetoothAdapter == null) {             Log.e(TAG, ""Device does not support Bluetooth"");             return;         }         boolean bluetoothEnabledByTest = false;         if (!bluetoothAdapter.isEnabled()) {             if (!bluetoothAdapter.enable()) {                 Log.e(TAG, ""Bluetooth is not enabled"");                 return;             }             sleep(2_000); // Wait for Bluetooth to fully turn on.             bluetoothEnabledByTest = true;         }         BluetoothLeScanner bleScanner = bluetoothAdapter.getBluetoothLeScanner();         if (bleScanner == null) {             Log.e(TAG, ""Cannot access BLE scanner"");             return;         }          actions.accept(bluetoothAdapter, bleScanner);          // Restore adapter state         if (bluetoothEnabledByTest) {             bluetoothAdapter.disable();         }     }       private static void performBleScan(ScanSettings scanSettings, List<ScanFilter> scanFilters, boolean waitForResult) {         performBleAction((bluetoothAdapter, bleScanner) -> {             CountDownLatch resultsLatch = new CountDownLatch(1);             ScanCallback scanCallback = new ScanCallback() {                 @Override                 public void onScanResult(int callbackType, ScanResult result) {                     Log.v(TAG, ""called onScanResult"");                     resultsLatch.countDown();                 }                 @Override                 public void onScanFailed(int errorCode) {                     Log.v(TAG, ""called onScanFailed"");                 }                 @Override                 public void onBatchScanResults(List<ScanResult> results) {                     Log.v(TAG, ""called onBatchScanResults"");                     resultsLatch.countDown();                 }             };              bleScanner.startScan(scanFilters, scanSettings, scanCallback);             if (waitForResult) {                 waitForReceiver(InstrumentationRegistry.getContext(), 59_000, resultsLatch, null);             } else {                 sleep(2_000);             }             bleScanner.stopScan(scanCallback);         });     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.server.cts.device.statsd.AtomTests"	"testBlobStore"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java"	""	"public void testBlobStore() throws Exception {         Context context = InstrumentationRegistry.getContext();         int uid = context.getPackageManager().getApplicationInfo(context.getPackageName(), 0).uid;          BlobStoreManager bsm = context.getSystemService(BlobStoreManager.class);         final long leaseExpiryMs = System.currentTimeMillis() + BLOB_LEASE_EXPIRY_DURATION_MS;          final DummyBlobData blobData = new DummyBlobData.Builder(context).setExpiryDurationMs(                 BLOB_EXPIRY_DURATION_MS).setFileSize(BLOB_FILE_SIZE_BYTES).build();          blobData.prepare();         try {             // Commit the Blob, should result in BLOB_COMMITTED atom event             commitBlob(context, bsm, blobData);              // Lease the Blob, should result in BLOB_LEASED atom event             bsm.acquireLease(blobData.getBlobHandle(), """", leaseExpiryMs);              // Open the Blob, should result in BLOB_OPENED atom event             bsm.openBlob(blobData.getBlobHandle());          } finally {             blobData.delete();         }     }      // ------- Helper methods      /** Puts the current thread to sleep. */     static void sleep(int millis) {         try {             Thread.sleep(millis);         } catch (InterruptedException e) {             Log.e(TAG, ""Interrupted exception while sleeping"", e);         }     }      /** Register receiver to determine when given action is complete. */     private static BroadcastReceiver registerReceiver(             Context ctx, CountDownLatch onReceiveLatch, IntentFilter intentFilter) {         BroadcastReceiver receiver = new BroadcastReceiver() {             @Override             public void onReceive(Context context, Intent intent) {                 Log.d(TAG, ""Received broadcast."");                 onReceiveLatch.countDown();             }         };         // Run Broadcast receiver in a different thread since the main thread will wait.         HandlerThread handlerThread = new HandlerThread(""br_handler_thread"");         handlerThread.start();         Looper looper = handlerThread.getLooper();         Handler handler = new Handler(looper);         ctx.registerReceiver(receiver, intentFilter, null, handler);         return receiver;     }      /**      * Uses the receiver to wait until the action is complete. ctx and receiver may be null if no      * receiver is needed to be unregistered.      */     private static void waitForReceiver(Context ctx,             int maxWaitTimeMs, CountDownLatch latch, BroadcastReceiver receiver) {         try {             boolean didFinish = latch.await(maxWaitTimeMs, TimeUnit.MILLISECONDS);             if (didFinish) {                 Log.v(TAG, ""Finished performing action"");             } else {                 // This is not necessarily a problem. If we just want to make sure a count was                 // recorded for the request, it doesn't matter if the action actually finished.                 Log.w(TAG, ""Did not finish in specified time."");             }         } catch (InterruptedException e) {             Log.e(TAG, ""Interrupted exception while awaiting action to finish"", e);         }         if (ctx != null && receiver != null) {             ctx.unregisterReceiver(receiver);         }     }      private static void setScreenBrightness(int brightness) {         runShellCommand(""settings put system screen_brightness "" + brightness);     }       private void commitBlob(Context context, BlobStoreManager bsm, DummyBlobData blobData)             throws Exception {;         final long sessionId = bsm.createSession(blobData.getBlobHandle());         try (BlobStoreManager.Session session = bsm.openSession(sessionId)) {             blobData.writeToSession(session);             session.allowPackageAccess(""fake.package.name"", FAKE_PKG_CERT_SHA256);              final CompletableFuture<Integer> callback = new CompletableFuture<>();             session.commit(context.getMainExecutor(), callback::complete);             assertWithMessage(""Session failed to commit within timeout"").that(                     callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_charging_aboveThreshold_passesBatteryCheck"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	"public void testInstallUpdate_charging_aboveThreshold_passesBatteryCheck() throws Exception {         if (!isDeviceAB()) {             return;         }         try {             setChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);             setChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD);             // Positive CTS tests aren't possible, so we verify that we get the file-related error             // rather than the battery one.             assertUpdateError(""wrongSize.zip"", UPDATE_ERROR_UPDATE_FILE_INVALID);         } finally {             resetBatteryState();             resetDevicePolicyConstants();         }     }      private void assertUpdateError(String fileName, int expectedErrorCode) {         AtomicInteger errorCode = new AtomicInteger();         // Poll until the error code matches our expectation to deal with delays in propagation         PollingCheck.waitFor(() -> {             try {                 errorCode.set(getUpdateError(fileName));             } catch (InterruptedException e) {                 throw new IllegalStateException(e);             }             return errorCode.get() == expectedErrorCode; });         assertEquals(expectedErrorCode, errorCode.get());     }      private int getUpdateError(String fileName) throws InterruptedException {         CountDownLatch latch = new CountDownLatch(1);         Uri uri = Uri.fromFile(new File(TEST_SYSTEM_UPDATES_DIR, fileName));         mDevicePolicyManager.installSystemUpdate(ADMIN_RECEIVER_COMPONENT, uri,                 Runnable::run, new InstallSystemUpdateCallback() {                     @Override                     public void onInstallUpdateError(int errorCode, String errorMessage) {                         callbackErrorCode = errorCode;                         latch.countDown();                     }                 });         assertTrue(latch.await(TIMEOUT, TimeUnit.MINUTES));         return callbackErrorCode;     }      private void setNonChargingBatteryThreshold(int threshold) {         runShellCommand(                 ""settings put global device_policy_constants battery_threshold_not_charging=""                         + threshold);     }      private void setNonChargingBatteryLevelAndWait(int level) throws Exception {         setBatteryStateAndWait(/* plugged= */ false, level);     }      private void setChargingBatteryThreshold(int threshold) {         runShellCommand(                 ""settings put global device_policy_constants battery_threshold_charging=""                         + threshold);     }      private void setChargingBatteryLevelAndWait(int level) throws Exception {         setBatteryStateAndWait(/* plugged= */ true, level);     }      /** Should be paired with {@link #resetBatteryState()} in a {@code finally} block. */     private void setBatteryStateAndWait(boolean plugged, int level) throws Exception {         runShellCommand(plugged ? ""cmd battery set ac 1"" : ""cmd battery unplug"");         runShellCommand(""cmd battery set -f level "" + level);         long startTime = SystemClock.elapsedRealtime();         while (!isBatteryState(plugged, level)                 && SystemClock.elapsedRealtime() <= startTime + BATTERY_STATE_CHANGE_TIMEOUT_MS) {             Thread.sleep(BATTERY_STATE_CHANGE_SLEEP_PER_CHECK_MS);         }         assertTrue(""Battery state update timeout"", isBatteryState(plugged, level));     }      private boolean isBatteryState(boolean plugged, int level) {         final Intent batteryStatus =                 mContext.registerReceiver(/* receiver= */ null, BATTERY_CHANGED_FILTER);         return isPluggedIn(batteryStatus) == plugged                 && calculateBatteryPercentage(batteryStatus) == level;     }      private boolean isPluggedIn(Intent batteryStatus) {         return batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, /* defaultValue= */ -1) > 0;     }      private float calculateBatteryPercentage(Intent batteryStatus) {         int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, /* defaultValue= */ -1);         int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, /* defaultValue= */ -1);         return 100 * level / (float) scale;     }      private void resetBatteryState() {         runShellCommand(""dumpsys battery reset"");     }      private void resetDevicePolicyConstants() {         runShellCommand(""settings delete global device_policy_constants"");     }      private boolean isDeviceAB() {         return ""true"".equalsIgnoreCase(SystemProperties.get(AB_DEVICE_KEY, """"));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedContactsPolicies"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	"public void testManagedContactsPolicies() throws Exception {         runManagedContactsTest(() -> {             ContactsTestSet contactsTestSet = new ContactsTestSet(ManagedProfileContactsTest.this,                     MANAGED_PROFILE_PKG, mParentUserId, mProfileUserId);             try {                 contactsTestSet.setCallerIdEnabled(true);                 contactsTestSet.setContactsSearchEnabled(false);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(true);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.setCallerIdEnabled(false);                 contactsTestSet.setContactsSearchEnabled(true);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(true);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.setCallerIdEnabled(false);                 contactsTestSet.setContactsSearchEnabled(false);                 contactsTestSet.checkIfCanLookupEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterEnterpriseContacts(false);                 contactsTestSet.checkIfCanFilterSelfContacts();                 contactsTestSet.checkIfNoEnterpriseDirectoryFound();                 if (isStatsdEnabled(getDevice())) {                     assertMetricsLogged(getDevice(), () -> {                         contactsTestSet.setCallerIdEnabled(true);                         contactsTestSet.setCallerIdEnabled(false);                     }, new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(false)                             .build(),                     new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(true)                             .build());                     assertMetricsLogged(getDevice(), () -> {                         contactsTestSet.setContactsSearchEnabled(true);                         contactsTestSet.setContactsSearchEnabled(false);                     }, new DevicePolicyEventWrapper                             .Builder(EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(false)                             .build(),                     new DevicePolicyEventWrapper                             .Builder(                             EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)                             .setAdminPackageName(MANAGED_PROFILE_PKG)                             .setBoolean(true)                             .build());                 }                 return null;             } finally {                 // reset policies                 contactsTestSet.setCallerIdEnabled(true);                 contactsTestSet.setContactsSearchEnabled(true);             }         });     }      private void setDirectoryPrefix(String directoryName, int userId)             throws DeviceNotAvailableException {         String command = ""content call --uri "" + DIRECTORY_PRIVOIDER_URI                 + "" --user "" + userId                 + "" --method "" + SET_CUSTOM_DIRECTORY_PREFIX_METHOD                 + "" --arg "" + directoryName;         LogUtil.CLog.d(""Output for command "" + command + "": ""                 + getDevice().executeShellCommand(command));     }      private void runManagedContactsTest(Callable<Void> callable) throws Exception {         if (!mHasFeature) {             return;         }          try {             // Allow cross profile contacts search.             // TODO test both on and off.             getDevice().executeShellCommand(                     ""settings put --user "" + mProfileUserId                     + "" secure managed_profile_contact_remote_search 1"");              // Wait for updating cache             waitForBroadcastIdle();              // Add test account             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testAddTestAccount"", mParentUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testAddTestAccount"", mProfileUserId);              // Install directory provider to both primary and managed profile             installAppAsUser(DIRECTORY_PROVIDER_APK, USER_ALL);             setDirectoryPrefix(PRIMARY_DIRECTORY_PREFIX, mParentUserId);             setDirectoryPrefix(MANAGED_DIRECTORY_PREFIX, mProfileUserId);              // Check enterprise directory API works             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testGetDirectoryListInPrimaryProfile"", mParentUserId);              // Insert Primary profile Contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testPrimaryProfilePhoneAndEmailLookup_insertedAndfound"", mParentUserId);             // Insert Managed profile Contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testManagedProfilePhoneAndEmailLookup_insertedAndfound"", mProfileUserId);             // Insert a primary contact with same phone & email as other             // enterprise contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testPrimaryProfileDuplicatedPhoneEmailContact_insertedAndfound"",                     mParentUserId);             // Insert a enterprise contact with same phone & email as other             // primary contacts             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testManagedProfileDuplicatedPhoneEmailContact_insertedAndfound"",                     mProfileUserId);              callable.call();          } finally {             // Clean up in managed profile and primary profile             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testCurrentProfileContacts_removeContacts"", mProfileUserId);             runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",                     ""testCurrentProfileContacts_removeContacts"", mParentUserId);             getDevice().uninstallPackage(DIRECTORY_PROVIDER_PKG);         }     }      /*      * Container for running ContactsTest under multi-user environment      */     private static class ContactsTestSet {          private ManagedProfileContactsTest mManagedProfileContactsTest;         private String mManagedProfilePackage;         private int mParentUserId;         private int mProfileUserId;          public ContactsTestSet(ManagedProfileContactsTest managedProfileContactsTest,                 String managedProfilePackage, int parentUserId, int profileUserId) {             mManagedProfileContactsTest = managedProfileContactsTest;             mManagedProfilePackage = managedProfilePackage;             mParentUserId = parentUserId;             mProfileUserId = profileUserId;         }          private void runDeviceTestsAsUser(String pkgName, String testClassName,                 String testMethodName, Integer userId) throws DeviceNotAvailableException {             mManagedProfileContactsTest.runDeviceTestsAsUser(pkgName, testClassName, testMethodName,                     userId);         }          // Enable / Disable         public void setCallerIdEnabled(boolean enabled) throws DeviceNotAvailableException {             if (enabled) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileCallerIdDisabled_false"", mProfileUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileCallerIdDisabled_true"", mProfileUserId);             }         }          // Enable / Disable cross profile contacts search         public void setContactsSearchEnabled(boolean enabled) throws DeviceNotAvailableException {             if (enabled) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileContactsSearchDisabled_false"", mProfileUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testSetCrossProfileContactsSearchDisabled_true"", mProfileUserId);             }         }          public void checkIfCanLookupEnterpriseContacts(boolean expected)                 throws DeviceNotAvailableException {             // Primary user cannot use ordinary phone/email lookup api to access             // managed contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfilePhoneLookup_canNotAccessEnterpriseContact"", mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEmailLookup_canNotAccessEnterpriseContact"", mParentUserId);             // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryContact"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryContact"",                     mParentUserId);             // When there exist contacts with the same phone/email in primary &             // enterprise,             // primary user can use ENTERPRISE_CONTENT_FILTER_URI to access the             // primary contact.             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookupDuplicated_canAccessPrimaryContact"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookupDuplicated_canAccessPrimaryContact"",                     mParentUserId);              // Managed user cannot use ordinary phone/email lookup api to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfilePhoneLookup_canNotAccessPrimaryContact"", mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEmailLookup_canNotAccessPrimaryContact"", mProfileUserId);             // Managed user can use ENTERPRISE_CONTENT_FILTER_URI to access             // enterprise contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",                     mProfileUserId);             // Managed user cannot use ENTERPRISE_CONTENT_FILTER_URI to access             // primary contacts             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookup_canNotAccessPrimaryContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookup_canNotAccessPrimaryContact"",                     mProfileUserId);             // When there exist contacts with the same phone/email in primary &             // enterprise,             // managed user can use ENTERPRISE_CONTENT_FILTER_URI to access the             // enterprise contact.             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseEmailLookupDuplicated_canAccessEnterpriseContact"",                     mProfileUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneLookupDuplicated_canAccessEnterpriseContact"",                     mProfileUserId);              // Check if phone lookup can access primary directories             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories"",                     mParentUserId);              // Check if email lookup can access primary directories             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories"",                     mParentUserId);              if (expected) {                 // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access                 // managed profile contacts                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",                         mParentUserId);                  // Make sure SIP enterprise lookup works too.                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseSipLookup_canAccessEnterpriseContact"",                         mParentUserId);                  // Check if phone lookup can access enterprise directories                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories"",                         mParentUserId);                  // Check if email lookup can access enterprise directories                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories"",                         mParentUserId);             } else {                 // Primary user cannot use ENTERPRISE_CONTENT_FILTER_URI to                 // access managed contacts                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessEnterpriseContact"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",                         mParentUserId);                  runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",                         mParentUserId);             }         }          public void checkIfCanFilterSelfContacts() throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseCallableFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testEnterpriseProfileEnterpriseEmailFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterpriseContactFilter_canAccessManagedDirectories"",                     mProfileUserId);              runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories"",                     mParentUserId);             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testManagedProfileEnterprisePhoneFilter_canAccessManagedDirectories"",                     mProfileUserId);         }          public void checkIfCanFilterEnterpriseContacts(boolean expected)                 throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testFilterUriWhenDirectoryParamMissing"", mParentUserId);             if (expected) {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories"",                         mParentUserId);             } else {                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories"",                         mParentUserId);                 runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                         ""testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories"",                         mParentUserId);             }         }          public void checkIfNoEnterpriseDirectoryFound() throws DeviceNotAvailableException {             runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",                     ""testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories"",                     mParentUserId);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testAddGetAndClearUserRestriction_onParent"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	"public void testAddGetAndClearUserRestriction_onParent() {         int locationMode = 1;         try {             locationMode = runWithShellPermissionIdentity(                     () -> Settings.Secure.getIntForUser(mContentResolver,                             Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM));              for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS) {                 testAddGetAndClearUserRestriction_onParent(restriction);             }             for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {                 testAddGetAndClearUserRestriction_onParent(restriction);             }         } finally {             // Restore the location mode setting after adding and removing the             // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user             // restriction causes the location mode setting to be turned off.             final int finalLocationMode = locationMode;             runWithShellPermissionIdentity(() -> Settings.Secure.putIntForUser(mContentResolver,                     Settings.Secure.LOCATION_MODE, finalLocationMode, UserHandle.USER_SYSTEM));         }     }      private void testAddGetAndClearUserRestriction_onParent(String restriction) {         mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);          Bundle restrictions = mParentDevicePolicyManager.getUserRestrictions(                 ADMIN_RECEIVER_COMPONENT);         assertThat(restrictions.get(restriction)).isNotNull();          mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);          restrictions = mParentDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT);         assertThat(restrictions.get(restriction)).isNull();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetSecureSettingLogged"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	"public void testSetSecureSettingLogged()             throws InterruptedException {         final ContentResolver contentResolver = mContext.getContentResolver();         final int skipFirstUseHintsInitial =                 Settings.Secure.getInt(contentResolver, SKIP_FIRST_USE_HINTS, 0);         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 SKIP_FIRST_USE_HINTS, ""1"");         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 SKIP_FIRST_USE_HINTS, ""0"");         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 SKIP_FIRST_USE_HINTS, String.valueOf(skipFirstUseHintsInitial));          final String defaultInputMethodInitial =                 Settings.Secure.getString(contentResolver, DEFAULT_INPUT_METHOD);         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 DEFAULT_INPUT_METHOD, ""com.example.input"");         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 DEFAULT_INPUT_METHOD, null);         mDevicePolicyManager.setSecureSetting(ADMIN_RECEIVER_COMPONENT,                 DEFAULT_INPUT_METHOD, defaultInputMethodInitial);     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedProfileOwnerTest"	"testLockTaskAfterReboot_tryOpeningSettings"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java"	""	"public void testLockTaskAfterReboot_tryOpeningSettings() throws Exception {         super.testLockTaskAfterReboot_tryOpeningSettings();     }      @Override     @FlakyTest(bugId = 140932104)"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testLockTaskAfterReboot_tryOpeningSettings"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testLockTaskAfterReboot_tryOpeningSettings() throws Exception {         if (!mHasFeature) {             return;         }          try {             // Just start kiosk mode             executeDeviceTestMethod(                     "".LockTaskHostDrivenTest"", ""testStartLockTask_noAsserts"");              // Reboot while in kiosk mode and then unlock the device             rebootAndWaitUntilReady();              // Wait for the LockTask starting             waitForBroadcastIdle();              // Try to open settings via adb             executeShellCommand(""am start -a android.settings.SETTINGS"");              // Check again             executeDeviceTestMethod("".LockTaskHostDrivenTest"",                     ""testLockTaskIsActiveAndCantBeInterrupted"");         } finally {             Thread.sleep(10000);             executeDeviceTestMethod("".LockTaskHostDrivenTest"", ""testCleanupLockTask_noAsserts"");         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testResetPasswordDeprecated"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testResetPasswordDeprecated() throws Exception {         if (!mHasFeature || !mHasSecureLockScreen) {             return;         }         executeDeviceTestMethod("".ResetPasswordTest"", ""testResetPasswordDeprecated"");     }      @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testIsDeviceOrganizationOwnedWithManagedProfile"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testIsDeviceOrganizationOwnedWithManagedProfile() throws Exception {         if (!mHasFeature) {             return;         }          executeDeviceTestMethod("".DeviceOwnershipTest"",                 ""testCallingIsOrganizationOwnedWithManagedProfileExpectingFalse"");     }      @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSecondaryLockscreen"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	"public void testSecondaryLockscreen() throws Exception {         if (!mHasFeature) {             return;         }         executeDeviceTestClass("".SecondaryLockscreenTest"");     }      private String getLaunchableSystemPackage() throws DeviceNotAvailableException {         final List<String> enabledSystemPackageNames = getEnabledSystemPackageNames();         for (String enabledSystemPackage : enabledSystemPackageNames) {             final String result = getDevice().executeShellCommand(                     String.format(RESOLVE_ACTIVITY_CMD, enabledSystemPackage));             if (!result.contains(""No activity found"")) {                 return enabledSystemPackage;             }         }         return null;     }      private List<String> getEnabledSystemPackageNames() throws DeviceNotAvailableException {         final String commandResult =                 getDevice().executeShellCommand(""pm list packages -e -s --user "" + mUserId);         final int prefixLength = ""package:"".length();         return new ArrayList<>(Arrays.asList(commandResult.split(""\n"")))                 .stream()                 .map(line -> line.substring(prefixLength))                 .collect(Collectors.toList());     }      /**      * Executes a test class on device. Prior to running, turn off background data usage      * restrictions, and restore the original restrictions after the test.      */     private void executeDeviceTestClassNoRestrictBackground(String className) throws Exception {         boolean originalRestriction = ensureRestrictBackgroundPolicyOff();         try {             executeDeviceTestClass(className);         } catch (Exception e) {             throw e;         } finally {             // if the test throws exception, still restore the policy             restoreRestrictBackgroundPolicyTo(originalRestriction);         }     }      protected void executeDeviceTestMethod(String className, String testName) throws Exception {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId);     }      protected void executeDeviceTestMethod(String className, String testName,             Map<String, String> params) throws Exception {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId, params);     }      protected void installAppPermissionAppAsUser()             throws FileNotFoundException, DeviceNotAvailableException {         installAppAsUser(PERMISSIONS_APP_APK, false, mUserId);     }      private void executeSuspendPackageTestMethod(String testName) throws Exception {         runDeviceTestsAsUser(INTENT_SENDER_PKG, "".SuspendPackageTest"",                 testName, mUserId);     }      private void executeAccountTest(String testName) throws DeviceNotAvailableException {         runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountManagementTest"",                 testName, mUserId);         // Send a home intent to dismiss an error dialog.         String command = ""am start -a android.intent.action.MAIN""                 + "" -c android.intent.category.HOME"";         CLog.i(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     }      private void executeAppRestrictionsManagingPackageTest(String testName) throws Exception {         runDeviceTestsAsUser(DELEGATE_APP_PKG,                 "".AppRestrictionsDelegateTest"", testName, mUserId);     }      private void executeDelegationTests(Map<String, DevicePolicyEventWrapper[]> delegationTests,             boolean positive)             throws Exception {         for (Map.Entry<String, DevicePolicyEventWrapper[]> entry : delegationTests.entrySet()) {             final String delegationTestClass = entry.getKey();             final DevicePolicyEventWrapper[] expectedMetrics = entry.getValue();             final DevicePolicyEventLogVerifier.Action testRun = () -> {                 runDeviceTestsAsUser(DELEGATE_APP_PKG, delegationTestClass,                         positive ? ""testCanAccessApis"" : ""testCannotAccessApis"", mUserId);             };             if (expectedMetrics != null && positive) {                 assertMetricsLogged(getDevice(), testRun, expectedMetrics);             } else {                 testRun.apply();             }         }     }      private void changeUserRestrictionOrFail(String key, boolean value, int userId)             throws DeviceNotAvailableException {         changeUserRestrictionOrFail(key, value, userId, DEVICE_ADMIN_PKG);     }      private void changeAccountManagement(String command, String accountType, int userId)             throws DeviceNotAvailableException {         changePolicyOrFail(command, ""--es extra-account-type "" + accountType, userId);     }      private void changeApplicationRestrictionsManagingPackage(String packageName)             throws DeviceNotAvailableException {         String packageNameExtra = (packageName != null)                 ? ""--es extra-package-name "" + packageName : """";         changePolicyOrFail(""set-app-restrictions-manager"", packageNameExtra, mUserId);     }      protected void setDelegatedScopes(String packageName, List<String> scopes)             throws DeviceNotAvailableException {         final String packageNameExtra = ""--es extra-package-name "" + packageName;         String scopesExtra = """";         if (scopes != null && scopes.size() > 0) {             scopesExtra = ""--esa extra-scopes-list "" + scopes.get(0);             for (int i = 1; i < scopes.size(); ++i) {                 scopesExtra += "","" + scopes.get(i);             }         }         final String extras = packageNameExtra + "" "" + scopesExtra;          changePolicyOrFail(""set-delegated-scopes"", extras, mUserId);     }      private void setInstallPackageAppOps(String packageName, boolean allowed, int userId)             throws DeviceNotAvailableException {         String command = ""appops set --user "" + userId + "" "" + packageName + "" "" +                 ""REQUEST_INSTALL_PACKAGES ""                 + (allowed ? ""allow"" : ""default"");         CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     }      private void changePolicyOrFail(String command, String extras, int userId)             throws DeviceNotAvailableException {         changePolicyOrFail(command, extras, userId, DEVICE_ADMIN_PKG);     }      /**      * Start SimpleActivity synchronously in a particular user.      */     protected void startSimpleActivityAsUser(int userId) throws Exception {         installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);         startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");     }      protected void setScreenCaptureDisabled(int userId, boolean disabled) throws Exception {         String testMethodName = disabled                 ? ""testSetScreenCaptureDisabled_true""                 : ""testSetScreenCaptureDisabled_false"";         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);          testMethodName = disabled                 ? ""testScreenCaptureImpossible""                 : ""testScreenCapturePossible"";          startSimpleActivityAsUser(userId);         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);         forceStopPackageForUser(TEST_APP_PKG, userId);     }      protected void setScreenCaptureDisabled_assist(int userId, boolean disabled) throws Exception {         // Set the policy.         String testMethodName = disabled                 ? ""testSetScreenCaptureDisabled_true""                 : ""testSetScreenCaptureDisabled_false"";         executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);         testMethodName = disabled                 ? ""testScreenCaptureImpossible_assist""                 : ""testScreenCapturePossible_assist"";          // Check whether the VoiceInteractionService can retrieve the screenshot.         installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);          if (userId == mPrimaryUserId) {             // If testing for user-0, also make sure the existing screen can't be captured.             runDeviceTestsAsUser(                     DEVICE_ADMIN_PKG,                     "".AssistScreenCaptureDisabledTest"",                     testMethodName,                     mPrimaryUserId);         }          // Make sure the foreground activity is from the target user.         startSimpleActivityAsUser(userId);          runDeviceTestsAsUser(                 DEVICE_ADMIN_PKG,                 "".AssistScreenCaptureDisabledTest"",                 testMethodName,                 mPrimaryUserId);     }      /**      * Allows packageName to manage notification policy configuration, which      * includes toggling zen mode.      */     private void allowNotificationPolicyAccess(String packageName, int userId)             throws DeviceNotAvailableException {         List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);         if (!enabledPackages.contains(packageName)) {             enabledPackages.add(packageName);             setEnabledNotificationPolicyPackages(enabledPackages, userId);         }     }      /**      * Disallows packageName to manage notification policy configuration, which      * includes toggling zen mode.      */     private void disallowNotificationPolicyAccess(String packageName, int userId)             throws DeviceNotAvailableException {         List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);         if (enabledPackages.contains(packageName)) {             enabledPackages.remove(packageName);             setEnabledNotificationPolicyPackages(enabledPackages, userId);         }     }      private void setEnabledNotificationPolicyPackages(List<String> packages, int userId)             throws DeviceNotAvailableException {         getDevice().setSetting(userId, ""secure"", ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES,                 String.join("":"", packages));     }      private List<String> getEnabledNotificationPolicyPackages(int userId)             throws DeviceNotAvailableException {         String settingValue = getDevice().getSetting(userId, ""secure"",                 ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES);         if (settingValue == null) {             return new ArrayList<String>();         }         return new ArrayList<String>(Arrays.asList(settingValue.split("":|\n"")));     }      protected void setVoiceInteractionService(String componentName)             throws DeviceNotAvailableException {         getDevice().setSetting(                 mPrimaryUserId, ""secure"", ""voice_interaction_service"", componentName);         getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_structure_enabled"", ""1"");         getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_screenshot_enabled"", ""1"");     }      protected void clearVoiceInteractionService() throws DeviceNotAvailableException {         getDevice().executeShellCommand(""settings delete secure voice_interaction_service"");     }      /**      * Ensure that restrict background policy is off.      * Returns the original status of restrict background policy.      */     private boolean ensureRestrictBackgroundPolicyOff() throws Exception {         String restriction = getDevice().executeShellCommand(RESTRICT_BACKGROUND_GET_CMD);         if (restriction.contains(""enabled"")) {             getDevice().executeShellCommand(RESTRICT_BACKGROUND_OFF_CMD);             return true;         }         return false;     }      private void restoreRestrictBackgroundPolicyTo(boolean restricted) throws Exception {         getDevice().executeShellCommand(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_MaxUsers"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	"public void testCreateAndManageUser_MaxUsers() {         String testUserName = ""TestUser_"" + System.currentTimeMillis();          try {             mDevicePolicyManager.createAndManageUser(                     getWho(),                     testUserName,                     getWho(),                     null,                 /* flags */ 0);             fail(""createAndManageUser should throw UserOperationException"");         } catch (UserManager.UserOperationException e) {             assertEquals(UserManager.USER_OPERATION_ERROR_MAX_USERS, e.getUserOperationResult());         }     }      @SuppressWarnings(""unused"")     private static void assertSkipSetupWizard(Context context,             DevicePolicyManager devicePolicyManager, ComponentName componentName) throws Exception {         assertEquals(""user setup not completed"", 1,                 Settings.Secure.getInt(context.getContentResolver(),                         Settings.Secure.USER_SETUP_COMPLETE));     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"isFullVolumeDevice"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	"public void test/*  *.  */  package com.android.cts.deviceandprofileowner;  import android.content.Context; import android.content.pm.PackageManager; import android.content.res.Resources; import android.media.AudioManager; import android.media.MediaPlayer; import android.net.Uri; import android.provider.Settings; import android.os.SystemClock; import android.os.UserManager; import android.util.Log;  import java.util.Objects; import java.util.concurrent.Callable; import java.util.regex.Pattern;  public class AudioRestrictionTest extends BaseDeviceAdminTest {     private static final String TAG = AudioRestrictionTest.class.getSimpleName();     private AudioManager mAudioManager;     private PackageManager mPackageManager;     private boolean mUseFixedVolume;     private boolean mUseFullVolume;     private final Callable<Boolean> mCheckIfMasterVolumeMuted = new Callable<Boolean>() {         @Override         public Boolean call() throws Exception {             return mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);         }     };      @Override     protected void setUp() throws Exception {         super.setUp();         mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);         mPackageManager = mContext.getPackageManager();         mUseFixedVolume = mContext.getResources().getBoolean(                 Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android""));         mUseFullVolume = isFullVolumeDevice();     }      // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume."	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"removeTestUsers"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"/*  *.  */  package com.android.cts.devicepolicy;  import android.platform.test.annotations.FlakyTest; import android.platform.test.annotations.LargeTest;  import com.android.cts.devicepolicy.annotations.LockSettingsTest; import com.android.cts.devicepolicy.annotations.PermissionsTest; import com.android.tradefed.device.DeviceNotAvailableException;  import org.junit.Test;  /**  * Set of tests for managed profile owner use cases that also apply to device owners.  * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.  */ public class MixedManagedProfileOwnerTest extends DeviceAndProfileOwnerTest {      private static final String CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS =             DEVICE_ADMIN_PKG + "".ClearProfileOwnerNegativeTest"";     private static final String FEATURE_WIFI = ""android.hardware.wifi"";      private int mParentUserId = -1;      @Override     public void setUp() throws Exception {         super.setUp();          // We need managed users to be supported in order to create a profile of the user owner.         mHasFeature &= hasDeviceFeature(""android.software.managed_users"");          if (mHasFeature) {             removeTestUsers();             mParentUserId = mPrimaryUserId;             createManagedProfile();         }     }      private void createManagedProfile() throws Exception {         mUserId = createManagedProfile(mParentUserId);         switchUser(mParentUserId);         startUserAndWait(mUserId);          installAppAsUser(DEVICE_ADMIN_APK, mUserId);         setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);         startUserAndWait(mUserId);     }      @Override     public void tearDown() throws Exception {         if (mHasFeature) {             removeUser(mUserId);         }         super.tearDown();     }      // Most tests for this class are defined in DeviceAndProfileOwnerTest      /**      * Verify that screenshots are still possible for activities in the primary user when the policy      * is set on the profile owner.      */     @LargeTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testAlwaysOnVpnUnsupportedPackageReplaced"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testAlwaysOnVpnUnsupportedPackageReplaced() throws Exception {         super.testAlwaysOnVpnUnsupportedPackageReplaced();     }      @Override     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testSetSystemSetting"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testSetSystemSetting() {         // Managed profile owner cannot set currently whitelisted system settings.     }      @Override"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testLockTaskAfterReboot_tryOpeningSettings"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testLockTaskAfterReboot_tryOpeningSettings() {         // Managed profiles are not allowed to use lock task     }      @Override"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testProfileOwnerCanGetDeviceIdentifiers"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	"public void testProfileOwnerCanGetDeviceIdentifiers() throws Exception {         if (!mHasFeature) {             return;         }          runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdentifiersTest"",                 ""testProfileOwnerCanGetDeviceIdentifiersWithPermission"", mUserId);     }      @Override     @LockSettingsTest"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSync"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	"public void testRingtoneSync() throws Exception {         if (!mHasFeature) {             return;         }         givePackageWriteSettingsPermission(mProfileUserId);         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",                 ""testRingtoneSync"", mProfileUserId);     }      // Test if setting RINGTONE disables sync"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableRingtone"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	"public void testRingtoneSyncAutoDisableRingtone() throws Exception {         if (!mHasFeature) {             return;         }         givePackageWriteSettingsPermission(mProfileUserId);         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",                 ""testRingtoneDisableSync"", mProfileUserId);     }      // Test if setting NOTIFICATION disables sync"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableNotification"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	"public void testRingtoneSyncAutoDisableNotification() throws Exception {         if (!mHasFeature) {             return;         }         givePackageWriteSettingsPermission(mProfileUserId);         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",                 ""testNotificationDisableSync"", mProfileUserId);     }      // Test if setting ALARM disables sync"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableAlarm"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	"public void testRingtoneSyncAutoDisableAlarm() throws Exception {         if (!mHasFeature) {             return;         }         givePackageWriteSettingsPermission(mProfileUserId);         runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",                 ""testAlarmDisableSync"", mProfileUserId);     }      private void givePackageWriteSettingsPermission(int userId) throws DeviceNotAvailableException {         // Allow app to write to settings (for RingtoneManager.setActualDefaultUri to work)         String command = ""appops set --user "" + userId + "" "" + MANAGED_PROFILE_PKG                 + "" android:write_settings allow"";         CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.managedprofile.RingtoneSyncTest"	"testRingtoneSync"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/RingtoneSyncTest.java"	""	"public void testRingtoneSync() throws Exception {         String defaultRingtone = Settings.System.getString(mContentResolver,                 Settings.System.RINGTONE);         String defaultNotification = Settings.System.getString(mContentResolver,                 Settings.System.NOTIFICATION_SOUND);         String defaultAlarm = Settings.System.getString(mContentResolver,                 Settings.System.ALARM_ALERT);          // RingtoneManager API should retrieve the same ringtones         validateRingtoneManagerGetRingtone(defaultRingtone, RingtoneManager.TYPE_RINGTONE);         validateRingtoneManagerGetRingtone(defaultNotification, RingtoneManager.TYPE_NOTIFICATION);         validateRingtoneManagerGetRingtone(defaultAlarm, RingtoneManager.TYPE_ALARM);     }      private void validateRingtoneManagerGetRingtone(String expected, int type) {         Uri expectedUri = (expected == null ? null : Utils.getUriWithoutUserId(                 Uri.parse(expected)));         Uri actualRingtoneUri = Utils.getUriWithoutUserId(                 RingtoneManager.getActualDefaultRingtoneUri(mContext, type));         assertEquals(expectedUri, actualRingtoneUri);     }      /*      * Tests that setting a work ringtone disables Settings.Secure.SYNC_PARENT_SOUNDS.      */     private void testSoundDisableSync(int ringtoneType) throws Exception {         Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);          Uri originalUri = RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType);          // Make sure we have the rights we need to set a new ringtone.         assertTrue(Settings.System.canWrite(mContext));          // Explicitly set a work sound, to stop syncing ringtones between profiles.         assertEquals(1, Settings.Secure.getInt(mContentResolver, SYNC_PARENT_SOUNDS));         try {             RingtoneManager.setActualDefaultRingtoneUri(mContext, ringtoneType, null);             assertEquals(0, Settings.Secure.getInt(mContentResolver, SYNC_PARENT_SOUNDS));             validateRingtoneManagerGetRingtone(null, ringtoneType);         } finally {             // Reset the setting we just changed.             Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);         }          // After re-unifying, the uri should be the same as the parent's uri.         Uri postSyncUri = RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType);         assertEquals(originalUri, postSyncUri);          // Manually disabling sync again, without changing settings, should put the ringtone uri         // back to its earlier value of null.         try {             Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 0);             assertNull(RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType));         } finally {             Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.intent.sender.SuspendPackageTest"	"finish"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java"	""	"public void testpackage com.android.cts.intent.sender;  import android.app.UiAutomation; import android.content.Context; import android.content.Intent; import android.content.pm.PackageManager; import android.content.pm.ResolveInfo; import android.content.res.Configuration; import android.os.UserHandle; import android.provider.Settings; import android.support.test.uiautomator.By; import android.support.test.uiautomator.BySelector; import android.support.test.uiautomator.Direction; import android.support.test.uiautomator.UiDevice; import android.support.test.uiautomator.UiObject2; import android.support.test.uiautomator.Until; import android.test.InstrumentationTestCase;  public class SuspendPackageTest extends InstrumentationTestCase {     private static final int WAIT_DIALOG_TIMEOUT_IN_MS = 5000;     private static final BySelector POPUP_TITLE_WATCH_SELECTOR = By             .clazz(android.widget.TextView.class.getName())             .res(""android:id/alertTitle"")             .pkg(""com.google.android.apps.wearable.settings"");      private static final BySelector SUSPEND_BUTTON_SELECTOR = By             .clazz(android.widget.Button.class.getName())             .res(""android:id/button1"");      private IntentSenderActivity mActivity;     private Context mContext;     private PackageManager mPackageManager;     private UiAutomation mUiAutomation;      private static final String INTENT_RECEIVER_PKG = ""com.android.cts.intent.receiver"";     private static final String TARGET_ACTIVITY_NAME             = ""com.android.cts.intent.receiver.SimpleIntentReceiverActivity"";      @Override     protected void setUp() throws Exception {         super.setUp();         mContext = getInstrumentation().getTargetContext();         mActivity = launchActivity(mContext.getPackageName(), IntentSenderActivity.class, null);         mPackageManager = mContext.getPackageManager();         mUiAutomation = getInstrumentation().getUiAutomation();     }      @Override     public void tearDown() throws Exception {         mActivity.finish();         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.intent.sender.SuspendPackageTest"	"testPackageSuspendedWithPackageManager"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java"	""	"public void testPackageSuspendedWithPackageManager() throws Exception {         assertPackageSuspended(true, true);     }      /**      * Verify that the package is suspended by trying to start the activity inside it. If the      * package is not suspended, the target activity will return the result.      */     private void assertPackageSuspended(boolean suspended, boolean customDialog) throws Exception {         Intent intent = new Intent();         intent.setClassName(INTENT_RECEIVER_PKG, TARGET_ACTIVITY_NAME);         Intent result = mActivity.getResult(intent);         if (suspended) {             if (customDialog) {                 dismissCustomDialog();             } else {                 dismissPolicyTransparencyDialog();             }             assertNull(result);         } else {             assertNotNull(result);         }         // No matter if it is suspended or not, we should be able to resolve the activity.         assertNotNull(mPackageManager.resolveActivity(intent, 0));     }      /**      * Wait for the policy transparency dialog and dismiss it.      */     private void dismissPolicyTransparencyDialog() {         final UiDevice device = UiDevice.getInstance(getInstrumentation());         if (isWatch()) {             device.wait(Until.hasObject(POPUP_TITLE_WATCH_SELECTOR), WAIT_DIALOG_TIMEOUT_IN_MS);             final UiObject2 title = device.findObject(POPUP_TITLE_WATCH_SELECTOR);             assertNotNull(""Policy transparency dialog title not found"", title);             title.swipe(Direction.RIGHT, 1.0f);         } else {             device.wait(Until.hasObject(getPopUpImageSelector()), WAIT_DIALOG_TIMEOUT_IN_MS);             final UiObject2 icon = device.findObject(getPopUpImageSelector());             assertNotNull(""Policy transparency dialog icon not found"", icon);             // ""OK"" button only present in the dialog if it is blocked by policy.             final UiObject2 button = device.findObject(getPopUpButtonSelector());             assertNotNull(""OK button not found"", button);             button.click();         }     }      private void dismissCustomDialog() {         final UiDevice device = UiDevice.getInstance(getInstrumentation());         device.wait(Until.hasObject(SUSPEND_BUTTON_SELECTOR), WAIT_DIALOG_TIMEOUT_IN_MS);          final UiObject2 button = device.findObject(SUSPEND_BUTTON_SELECTOR);         assertNotNull(""OK button not found"", button);     }      private boolean isWatch() {         return (getInstrumentation().getContext().getResources().getConfiguration().uiMode                 & Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_WATCH;     }      private String getSettingsPackageName() {         String settingsPackageName = ""com.android.settings"";         try {             mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");             ResolveInfo resolveInfo = mPackageManager.resolveActivityAsUser(                     new Intent(Settings.ACTION_SETTINGS), PackageManager.MATCH_SYSTEM_ONLY,                     UserHandle.USER_SYSTEM);             if (resolveInfo != null && resolveInfo.activityInfo != null) {                 settingsPackageName = resolveInfo.activityInfo.packageName;             }         } finally {             mUiAutomation.dropShellPermissionIdentity();         }         return settingsPackageName;     }      private BySelector getPopUpButtonSelector() {         return By.clazz(android.widget.Button.class.getName())                 .res(""android:id/button1"")                 .pkg(getSettingsPackageName());     }      private BySelector getPopUpImageSelector() {         final String settingsPackageName = getSettingsPackageName();         return By.clazz(android.widget.ImageView.class.getName())                 .res(settingsPackageName + "":id/admin_support_icon"")                 .pkg(settingsPackageName);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"android.deviceconfig.cts.DeviceConfigApiTests"	"isSupported"	"CtsDeviceConfigTestCases"	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiTests.java"	""	"/*  *  */  package android.deviceconfig.cts;  import static android.provider.Settings.RESET_MODE_PACKAGE_DEFAULTS;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNull; import static org.junit.Assert.fail;  import android.os.SystemClock; import android.provider.DeviceConfig; import android.provider.DeviceConfig.OnPropertiesChangedListener; import android.provider.DeviceConfig.Properties;  import androidx.test.InstrumentationRegistry;  import org.junit.After; import org.junit.AfterClass; import org.junit.BeforeClass; import org.junit.Test; import org.junit.runner.RunWith;  import java.util.ArrayList; import java.util.List; import java.util.concurrent.Executor; import java.util.concurrent.TimeUnit;  public final class DeviceConfigApiTests extends AbstractDeviceConfigTestCase {     private static final String NAMESPACE1 = ""namespace1"";     private static final String NAMESPACE2 = ""namespace2"";     private static final String EMPTY_NAMESPACE = ""empty_namespace"";     private static final String KEY1 = ""key1"";     private static final String KEY2 = ""key2"";     private static final String VALUE1 = ""value1"";     private static final String VALUE2 = ""value2"";     private static final String DEFAULT_VALUE = ""default_value"";      private static final boolean DEFAULT_BOOLEAN_TRUE = true;     private static final boolean DEFAULT_BOOLEAN_FALSE = false;     private static final boolean BOOLEAN_TRUE = true;     private static final boolean BOOLEAN_FALSE = false;     private static final String INVALID_BOOLEAN = ""TR_UE"";      private static final int DEFAULT_INT = 999;     private static final int VALID_INT = 123;     private static final String INVALID_INT = ""12E"";      private static final long DEFAULT_LONG = 123456;     private static final long VALID_LONG = 278724287;     private static final String INVALID_LONG = ""23232R42"";      private static final float DEFAULT_FLOAT = 123.456f;     private static final float VALID_FLOAT = 456.789f;     private static final String INVALID_FLOAT = ""34343et"";      private static final long WAIT_FOR_PROPERTY_CHANGE_TIMEOUT_MILLIS = 2000; // 2 sec     private final Object mLock = new Object();      /**      * Get necessary permissions to access and modify properties through DeviceConfig API.      */     @BeforeClass     public static void setUp() throws Exception {         if (!isSupported()) return;          InstrumentationRegistry.getInstrumentation().getUiAutomation().adoptShellPermissionIdentity(                 WRITE_DEVICE_CONFIG_PERMISSION, READ_DEVICE_CONFIG_PERMISSION);     }      /**      * Nullify properties in DeviceConfig API after completion of every test.      */     @After     public void cleanUp() throws Exception {         if (!isSupported()) return;          // first wait to make sure callbacks for SetProperties/SetProperty         // invoked in the test methods got emitted. So that the callbacks         // won't interfere with setPropertiesAndAssertSuccessfulChange invoked         // in nullifyProperty.         TimeUnit.MILLISECONDS.sleep(WAIT_FOR_PROPERTY_CHANGE_TIMEOUT_MILLIS);         nullifyProperty(NAMESPACE1, KEY1);         nullifyProperty(NAMESPACE2, KEY1);         nullifyProperty(NAMESPACE1, KEY2);         nullifyProperty(NAMESPACE2, KEY2);     }      /**      * Delete properties in DeviceConfig API after completion of all tests and drop shell      * permissions.      */     @AfterClass     public static void cleanUpAfterAllTests() {         if (!isSupported()) return;          deletePropertyThrowShell(NAMESPACE1, KEY1);         deletePropertyThrowShell(NAMESPACE2, KEY1);         deletePropertyThrowShell(NAMESPACE1, KEY2);         deletePropertyThrowShell(NAMESPACE2, KEY2);         InstrumentationRegistry.getInstrumentation().getUiAutomation()                 .dropShellPermissionIdentity();     }      /**      * Checks that getting property which does not exist returns null.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"dropShellPermissionIdentity"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	"public void test/*  *.  */  package com.android.cts.deviceandprofileowner;  import static com.android.cts.deviceandprofileowner.BaseDeviceAdminTest.ADMIN_RECEIVER_COMPONENT;  import static com.google.common.truth.Truth.assertThat;  import android.app.UiAutomation; import android.app.admin.DevicePolicyManager; import android.content.ContentResolver; import android.content.Context; import android.hardware.camera2.CameraManager; import android.os.Bundle; import android.os.Handler; import android.os.HandlerThread; import android.os.UserHandle; import android.os.UserManager; import android.provider.Settings; import android.test.InstrumentationTestCase; import android.util.Log;  import com.google.common.collect.ImmutableSet;  import java.util.concurrent.TimeUnit; import java.util.Set; import java.util.concurrent.TimeUnit;  public class UserRestrictionsParentTest extends InstrumentationTestCase {      private static final String TAG = ""UserRestrictionsParentTest"";      protected Context mContext;     private ContentResolver mContentResolver;     private UiAutomation mUiAutomation;     private DevicePolicyManager mDevicePolicyManager;     private UserManager mUserManager;      private CameraManager mCameraManager;      private HandlerThread mBackgroundThread;     private static final long GET_UIAUTOMATION_TIMEOUT_NS = TimeUnit.SECONDS.toNanos(60);      /**      * A {@link Handler} for running tasks in the background.      */     private Handler mBackgroundHandler;      @Override     protected void setUp() throws Exception {         super.setUp();         mContext = getInstrumentation().getContext();         mContentResolver = mContext.getContentResolver();         mUiAutomation = getUiAutomation();          mDevicePolicyManager = (DevicePolicyManager)                 mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);         assertNotNull(mDevicePolicyManager);          mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);         assertNotNull(mCameraManager);          mUserManager = mContext.getSystemService(UserManager.class);         assertNotNull(mUserManager);          startBackgroundThread();     }      @Override     protected void tearDown() throws Exception {         mUiAutomation.dropShellPermissionIdentity();         stopBackgroundThread();         super.tearDown();     }      private UiAutomation getUiAutomation() throws InterruptedException {         final long deadline = System.nanoTime() + GET_UIAUTOMATION_TIMEOUT_NS;         while (System.nanoTime() < deadline) {             UiAutomation ui = getInstrumentation().getUiAutomation();             if (ui != null) {                  return ui;             }             Thread.sleep(1000);         }         throw new AssertionError(""Failed to get UiAutomation"");     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testPerProfileUserRestriction_onParent"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	"public void testPerProfileUserRestriction_onParent() throws Settings.SettingNotFoundException {         mUiAutomation.adoptShellPermissionIdentity(                 ""android.permission.INTERACT_ACROSS_USERS_FULL"",                 ""android.permission.CREATE_USERS"");          DevicePolicyManager parentDevicePolicyManager =                 mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);         assertNotNull(parentDevicePolicyManager);          int locationMode = Settings.Secure.getIntForUser(mContentResolver,                 Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM);          for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {             try {                 boolean hasRestrictionOnManagedProfile = mUserManager.hasUserRestriction(                         restriction);                  parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);                 // Assert user restriction on personal profile has been added                 assertThat(hasUserRestriction(restriction)).isTrue();                 // Assert user restriction on managed profile has not changed                 assertThat(mUserManager.hasUserRestriction(restriction)).isEqualTo(                         hasRestrictionOnManagedProfile);             } finally {                 parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,                         restriction);                 assertThat(hasUserRestriction(restriction)).isFalse();             }         }          // Restore the location mode setting after adding and removing the         // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user         // restriction causes the location mode setting to be turned off.         Settings.Secure.putIntForUser(mContentResolver, Settings.Secure.LOCATION_MODE, locationMode,                 UserHandle.USER_SYSTEM);     }      private static final Set<String> PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS =             ImmutableSet.of(                     UserManager.DISALLOW_CONFIG_PRIVATE_DNS,                     UserManager.DISALLOW_CONFIG_DATE_TIME,                     UserManager.DISALLOW_AIRPLANE_MODE             );"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.profileowner.AdminActionBookkeepingTest"	"testIsDefaultInputMethodSet"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java"	""	"public void testIsDefaultInputMethodSet() throws Exception {         final String setting = Settings.Secure.DEFAULT_INPUT_METHOD;         final ContentResolver resolver = getContext().getContentResolver();         final String ime = Settings.Secure.getString(resolver, setting);          Settings.Secure.putString(resolver, setting, ""com.test.1"");         Thread.sleep(500);         assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());          mDevicePolicyManager.setSecureSetting(getWho(), setting, ""com.test.2"");         Thread.sleep(500);         assertTrue(mDevicePolicyManager.isCurrentInputMethodSetByOwner());          Settings.Secure.putString(resolver, setting, ime);         Thread.sleep(500);         assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());     }      /**      * Test: It should be recored whether the Profile Owner or the user installed a CA cert.      */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_LowStorage"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	"public void testCreateAndManageUser_LowStorage() throws Exception {         if (!mHasCreateAndManageUserFeature) {             return;         }          try {             // Force low storage             getDevice().setSetting(""global"", ""sys_storage_threshold_percentage"", ""100"");             getDevice().setSetting(""global"", ""sys_storage_threshold_max_bytes"",                     String.valueOf(Long.MAX_VALUE));              // The next createAndManageUser should return USER_OPERATION_ERROR_LOW_STORAGE.             executeDeviceTestMethod("".CreateAndManageUserTest"",                     ""testCreateAndManageUser_LowStorage"");         } finally {             getDevice().executeShellCommand(                     ""settings delete global sys_storage_threshold_percentage"");             getDevice().executeShellCommand(                     ""settings delete global sys_storage_threshold_max_bytes"");         }     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"disableService"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	"public void test/*  *.  */  package com.android.cts.deviceandprofileowner;  import static android.os.UserManager.DISALLOW_AUTOFILL; import static android.provider.Settings.Secure.AUTOFILL_SERVICE; import static android.provider.Settings.Secure.USER_SETUP_COMPLETE;  import android.content.Intent;  public class AutofillRestrictionsTest extends BaseDeviceAdminTest {      private static final String SERVICE_NAME =             ""com.android.cts.devicepolicy.autofillapp/.SimpleAutofillService"";     private static final String AUTOFILL_PACKAGE_NAME = ""com.android.cts.devicepolicy.autofillapp"";     private static final String AUTOFILL_ACTIVITY_NAME = AUTOFILL_PACKAGE_NAME + "".SimpleActivity"";      // Before, autofill_service was a cloned service, so it was only set in the default user,     // and we were using a guard to decide how to set it.     // Autofill_service has been changed now to be a per-user service so we are currently     // setting this to false.     private final boolean USES_CLONED_SETTINGS = false;      int mUserId;      @Override     protected void setUp() throws Exception {         super.setUp();          mUserId = getInstrumentation().getContext().getUserId();     }      @Override     protected void tearDown() throws Exception {         try {             disableService();         } finally {             mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);         }         super.tearDown();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"testDisallowAutofill_allowed"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	"public void testDisallowAutofill_allowed() throws Exception {         enableService();          final boolean enabledBefore = launchActivityAndGetEnabled();         assertTrue(enabledBefore);          mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);          // Must try a couple times because it will be disabled asynchronously.         for (int i = 1; i <= 15; i++) {             final boolean disabledAfter = !launchActivityAndGetEnabled();             if (disabledAfter) {                 return;             }             Thread.sleep(100);         }         fail(""Not disabled after a period of time"");     }      private boolean launchActivityAndGetEnabled() throws Exception {         final Intent launchIntent = new Intent();         launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         launchIntent.setClassName(AUTOFILL_PACKAGE_NAME, AUTOFILL_ACTIVITY_NAME);         final AutofillActivity activity = launchActivity(""com.android.cts.deviceandprofileowner"",                 AutofillActivity.class, null);         return activity.isAutofillEnabled();     }      private void enableService() throws Exception {         runShellCommand(""settings put secure --user %d %s %d default"",                 mUserId, USER_SETUP_COMPLETE, 1);          if (USES_CLONED_SETTINGS) {             runShellCommand(""settings put secure %s %s default"", AUTOFILL_SERVICE, SERVICE_NAME);         } else {             runShellCommand(""settings put --user %d secure %s %s default"",                     mUserId, AUTOFILL_SERVICE, SERVICE_NAME);         }         waitForServiceSettingSaved(SERVICE_NAME);     }      private void disableService() {         if (USES_CLONED_SETTINGS) {             runShellCommand(""settings delete secure %s"", AUTOFILL_SERVICE);         } else {             runShellCommand(""settings delete --user %d secure %s"", mUserId, AUTOFILL_SERVICE);         }     }      private void waitForServiceSettingSaved(String expected) throws Exception {         String actual = null;         // Wait up to 0.5 seconds until setting is saved.         for (int i = 0; i < 5; i++) {             if (USES_CLONED_SETTINGS) {                 actual = runShellCommand(""settings get secure %s"", AUTOFILL_SERVICE);             } else {                 actual = runShellCommand(""settings get --user %d secure %s"", mUserId,                         AUTOFILL_SERVICE);             }             if (expected.equals(actual)) {                 return;             }             Thread.sleep(100);         }         fail(""Expected service status for user "" + mUserId + "": "" + expected                 + ""; actual: "" + actual + "" after 0.5 seconds"");     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetBrightness"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	"public void testSetBrightness() {     final int mode = Settings.System.getInt(mContext.getContentResolver(),         Settings.System.SCREEN_BRIGHTNESS_MODE, SCREEN_BRIGHTNESS_MODE_AUTOMATIC);     if(mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {          mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,           Settings.System.SCREEN_BRIGHTNESS_MODE, ""0"");          testSetBrightnessWithValue(TEST_BRIGHTNESS_1);         testSetBrightnessWithValue(TEST_BRIGHTNESS_2);         mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,             Settings.System.SCREEN_BRIGHTNESS_MODE,               mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC? ""1"" : ""0"");     }     else {        testSetBrightnessWithValue(TEST_BRIGHTNESS_1);        testSetBrightnessWithValue(TEST_BRIGHTNESS_2);     }   }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetSystemSettingsFailsForNonWhitelistedSettings"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	"public void testSetSystemSettingsFailsForNonWhitelistedSettings() throws Exception {     try {       mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,           Settings.System.TEXT_AUTO_REPLACE, ""0"");       fail(""Didn't throw security exception."");     } catch (SecurityException e) {       // Should throw SecurityException.     }   } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.DevicePolicyLoggingTest"	"testSetGlobalSettingLogged"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicyLoggingTest.java"	""	"public void testSetGlobalSettingLogged() {         final String autoTimeOriginalValue =                 Settings.Global.getString(mContext.getContentResolver(), AUTO_TIME);         final String autoTimeZoneOriginalValue =                 Settings.Global.getString(mContext.getContentResolver(), AUTO_TIME_ZONE);         final String dataRoamingOriginalValue =                 Settings.Global.getString(mContext.getContentResolver(), DATA_ROAMING);         final String usbMassStorageOriginalValue =                 Settings.Global.getString(mContext.getContentResolver(), USB_MASS_STORAGE_ENABLED);          try {             mDevicePolicyManager.setGlobalSetting(getWho(), AUTO_TIME, ""1"");             mDevicePolicyManager.setGlobalSetting(getWho(), AUTO_TIME_ZONE, ""1"");             mDevicePolicyManager.setGlobalSetting(getWho(), DATA_ROAMING, ""1"");             mDevicePolicyManager.setGlobalSetting(getWho(), USB_MASS_STORAGE_ENABLED, ""1"");         } finally {             mDevicePolicyManager.setGlobalSetting(getWho(), AUTO_TIME, autoTimeOriginalValue);             mDevicePolicyManager.setGlobalSetting(                     getWho(), AUTO_TIME_ZONE, autoTimeZoneOriginalValue);             mDevicePolicyManager.setGlobalSetting(getWho(), DATA_ROAMING, dataRoamingOriginalValue);             mDevicePolicyManager.setGlobalSetting(                     getWho(), USB_MASS_STORAGE_ENABLED, usbMassStorageOriginalValue);         }     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testBroadcast"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	"public void testBroadcast() throws Exception {     mPacServer.setPacFile(DIRECT_PAC);     setPacURLAndWaitForDownload();      assertNotNull(""Broadcast must contain proxy"", mProxy);     assertEquals(""Proxy must contain PAC URL"", mPacServer.getPacURL(),         mProxy.getPacFileUrl().toString());   }    /**    * Make sure that we also get a broadcast after we clear the    * PAC proxy settings.    */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testClearBroadcast"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	"public void testClearBroadcast() throws Exception {     testBroadcast();     assertTrue(""No broadcast after clearing proxy."", clearProxyAndWaitForBroadcast());     assertTrue(isProxyEmpty());   }    /**    * Verify that the locally-hosted android backup proxy is up and    * running.    * Android hosts a proxy server that provides legacy support for apps that    * don't use the apache HTTP stack, but still read the static proxy    * settings.  The static settings point to a server that will handle    * the PAC parsing for them.    */"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest"	"disableService"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java"	""	"API to get max duration constant from ContentCaptureManager     private static final int MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET= 120000;      private static final int SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS = 100;      private static final String SERVICE_NAME =             ""com.android.cts.devicepolicy.contentcaptureservice/.SimpleContentCaptureService"";      int mUserId;      @Override     protected void setUp() throws Exception {         super.setUp();          mUserId = getInstrumentation().getContext().getUserId();     }      @Override     protected void tearDown() throws Exception {         try {             disableService();         } finally {             mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,                     DISALLOW_CONTENT_CAPTURE);         }         super.tearDown();     }      public void testDisallowContentCapture_allowed() throws Exception {         enableService();          final Intent launchIntent = new Intent();         launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         launchIntent.setClassName(CONTENT_CAPTURE_PACKAGE_NAME, CONTENT_CAPTURE_ACTIVITY_NAME);         final ContentCaptureActivity activity = launchActivity(                 ""com.android.cts.deviceandprofileowner"", ContentCaptureActivity.class, null);          activity.waitContentCaptureEnabled(true);          mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_CONTENT_CAPTURE);          activity.waitContentCaptureEnabled(false);     }      private void enableService() throws Exception {         runShellCommand(""settings put secure --user %d %s %d default"",                 mUserId, USER_SETUP_COMPLETE, 1);          runShellCommand(""cmd content_capture set temporary-service %d %s %d"", mUserId,                 SERVICE_NAME, MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET);         // TODO: ideally it should wait until the service's onConnected() is called, but that         // would be too complicated         Thread.sleep(SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS);     }      private void disableService() {         runShellCommand(""cmd content_capture set temporary-service %d"", mUserId);     } }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest"	"dropShellPermissionIdentity"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java"	""	"/*  *.  */  package com.android.cts.crossprofileappstest;  import static com.google.common.truth.Truth.assertThat;  import static org.junit.Assert.fail;  import android.app.AppOpsManager; import android.app.admin.DevicePolicyManager; import android.content.ComponentName; import android.content.Context; import android.content.Intent; import android.content.pm.CrossProfileApps; import android.os.Binder; import android.os.Bundle; import android.provider.Settings;  import androidx.test.InstrumentationRegistry; import androidx.test.runner.AndroidJUnit4;  import org.junit.After; import org.junit.Test; import org.junit.runner.RunWith;  import java.util.Collections;  @RunWith(AndroidJUnit4.class) public class CrossProfileAppsPermissionToInteractTest {     public static final String MANAGE_APP_OPS_MODES_PERMISSION =             ""android.permission.MANAGE_APP_OPS_MODES"";     public static final String INTERACT_ACROSS_PROFILES_PERMISSION =             ""android.permission.INTERACT_ACROSS_PROFILES"";     public static final String INTERACT_ACROSS_USERS_PERMISSION =             ""android.permission.INTERACT_ACROSS_USERS"";     public static final String INTERACT_ACROSS_USERS_FULL_PERMISSION =             ""android.permission.INTERACT_ACROSS_USERS_FULL"";      private static final ComponentName ADMIN_RECEIVER_COMPONENT =             new ComponentName(                     AdminReceiver.class.getPackage().getName(), AdminReceiver.class.getName());     private static final String PARAM_CROSS_PROFILE_PACKAGE = ""crossProfilePackage"";      private final Context mContext = InstrumentationRegistry.getContext();     private final CrossProfileApps mCrossProfileApps =             mContext.getSystemService(CrossProfileApps.class);     private final AppOpsManager mAppOpsManager = mContext.getSystemService(AppOpsManager.class);      @After     public void tearDown() {         InstrumentationRegistry.getInstrumentation().getUiAutomation()                 .dropShellPermissionIdentity();     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest"	"testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java"	""	"public void testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent() {         Intent intent = mCrossProfileApps.createRequestInteractAcrossProfilesIntent();          assertThat(intent).isNotNull();         assertThat(intent.getAction()).isEqualTo(Settings.ACTION_MANAGE_CROSS_PROFILE_ACCESS);         assertThat(intent.getData()).isNotNull();         assertThat(intent.getData().getSchemeSpecificPart()).isEqualTo(mContext.getPackageName());     }"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testSettingsIntents"	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	""	"migration settings"	""	""	""	"settings"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	"public void testSettingsIntents() throws Exception {         if (!mHasFeature) {             return;         }          runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SettingsIntentsTest"",                 mProfileUserId);     }      /** Tests for the API helper class. */"	""	""	""	""	""
