"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
""	"7.1.4.6"	"H-0-1"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-0-1"	""">7.1.4.6/H-0-1] MUST report whether the device supports the GPU profiling capability via a system property graphics.gpu.profiler.support. If Handheld device implementations declare support via a system property graphics.gpu.profiler.support, they: [<a href=""#7_1_display_and_graphics"""""	""	"profiler graphics.gpu.profiler.support"	""	""	""	"profiler"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-0-1"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-0-1"	""">7.1.4.6/H-0-1] MUST report whether the device supports the GPU profiling capability via a system property graphics.gpu.profiler.support. If Handheld device implementations declare support via a system property graphics.gpu.profiler.support, they: [<a href=""#7_1_display_and_graphics"""""	""	"profiler graphics.gpu.profiler.support"	""	""	""	"graphics.gpu.profiler.support"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-1"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-1"	""">7.1.4.6/H-1-1] MUST report as output a protobuf trace that complies with the schema for GPU counters and GPU renderstages defined in the Perfetto documentation. [<a href=""#7_1_display_and_graphics"""""	""	"renderstages protobuf"	""	""	""	"renderstages"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-2"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-2"	""">7.1.4.6/H-1-2] MUST report conformant values for the device’s GPU counters following the gpu counter trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"counters proto packet"	""	""	""	"counters"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-2"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"testProfilingDataProducersAvailable"	""	""	"7.1.4.6/H-1-2"	""">7.1.4.6/H-1-2] MUST report conformant values for the device’s GPU counters following the gpu counter trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"counters proto packet"	""	""	""	"counters"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"public void testProfilingDataProducersAvailable() throws Exception {         String profilingSupport = getDevice().getProperty(PROFILING_PROPERTY);          if (profilingSupport != null && profilingSupport.equals(""true"")) {             // Spin up a new thread to avoid blocking the main thread while the native process waits to be killed.             ShellThread shellThread = new ShellThread(DEVICE_BIN_PATH);             shellThread.start();             CommandResult activityStatus = getDevice().executeShellV2Command(""am start -n "" + APP + ""/."" + ACTIVITY);             boolean countersSourceFound = false;             boolean stagesSourceFound = false;             for(int i = 0; i < MAX_RETRIES; i++) {                 CommandResult queryStatus = getDevice().executeShellV2Command(""perfetto --query-raw | base64"");                 Assert.assertEquals(CommandStatus.SUCCESS, queryStatus.getStatus());                 byte[] decodedBytes = Base64.getMimeDecoder().decode(queryStatus.getStdout());                 TracingServiceState state = TracingServiceState.parseFrom(decodedBytes);                 int count = state.getDataSourcesCount();                 Assert.assertTrue(""No sources found"", count > 0);                 for (int j = 0; j < count; j++) {                     DataSource source = state.getDataSources(j);                     DataSourceDescriptor descriptor = source.getDsDescriptor();                     if (descriptor != null) {                         if (descriptor.getName().equals(COUNTERS_SOURCE_NAME)) {                             countersSourceFound = true;                         }                         if (descriptor.getName().equals(STAGES_SOURCE_NAME)) {                             stagesSourceFound = true;                         }                         if (countersSourceFound && stagesSourceFound) {                             break;                         }                     }                 }                 if (countersSourceFound && stagesSourceFound) {                     break;                 }                 Thread.sleep(1000);             }              Assert.assertTrue(""Producer "" + STAGES_SOURCE_NAME + "" not found"", stagesSourceFound);             Assert.assertTrue(""Producer "" + COUNTERS_SOURCE_NAME + "" not found"", countersSourceFound);         }     } }"	""	""	""	""	""
""	"7.1.4.6"	"H-1-2"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-2"	""">7.1.4.6/H-1-2] MUST report conformant values for the device’s GPU counters following the gpu counter trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"counters proto packet"	""	""	""	"proto"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-3"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-3"	""">7.1.4.6/H-1-3] MUST report conformant values for the device’s GPU RenderStages following the render stage trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"trace RenderStages"	""	""	""	"trace"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-3"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-3"	""">7.1.4.6/H-1-3] MUST report conformant values for the device’s GPU RenderStages following the render stage trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"trace RenderStages"	""	""	""	"RenderStages"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
""	"7.1.4.6"	"H-1-3"	""	"android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest"	"testFrameTracerProducerAvailable"	""	""	"7.1.4.6/H-1-3"	""">7.1.4.6/H-1-3] MUST report conformant values for the device’s GPU RenderStages following the render stage trace packet proto. [<a href=""#7_1_display_and_graphics"""""	""	"trace RenderStages"	""	""	""	"trace"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java"	""	"public void testFrameTracerProducerAvailable() throws Exception {         CommandResult queryResult = getDevice().executeShellV2Command(""perfetto --query-raw | base64"");         Assert.assertEquals(CommandStatus.SUCCESS, queryResult.getStatus());         byte[] decodedBytes = Base64.getMimeDecoder().decode(queryResult.getStdout());         TracingServiceState state = TracingServiceState.parseFrom(decodedBytes);         int dataSourcesCount = state.getDataSourcesCount();         Assert.assertTrue(""No sources found"", dataSourcesCount > 0);         boolean sourceFound = false;         for (int i = 0; i < dataSourcesCount; i++) {             DataSourceDescriptor descriptor = state.getDataSources(i).getDsDescriptor();             if (descriptor != null) {                 if (descriptor.getName().equals(FRAME_TRACER_SOURCE_NAME)) {                     sourceFound = true;                     break;                 }             }         }         Assert.assertTrue(""Producer "" + FRAME_TRACER_SOURCE_NAME + "" not found"", sourceFound);     } }"	""	""	""	""	""
""	"7.1.4.6"	"H-1-4"	""	"android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest"	"isEmpty"	""	""	"7.1.4.6/H-1-4"	""">7.1.4.6/H-1-4] MUST report a GPU Frequency tracepoint as specified by the format: power/gpu_frequency. Handheld device implementations: [<a href=""#7_1_display_and_graphics"""""	""	"Frequency tracepoint"	""	""	""	"Frequency"	""	""	""	"/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java"	""	"/*  *.  */  package android.graphics.gpuprofiling.cts;  import com.android.tradefed.device.ITestDevice; import com.android.tradefed.log.LogUtil.CLog; import com.android.tradefed.testtype.DeviceJUnit4ClassRunner; import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test; import com.android.tradefed.util.CommandResult; import com.android.tradefed.util.CommandStatus;  import perfetto.protos.PerfettoConfig.TracingServiceState; import perfetto.protos.PerfettoConfig.TracingServiceState.DataSource; import perfetto.protos.PerfettoConfig.DataSourceDescriptor;  import java.util.Base64;  import org.junit.After; import org.junit.Before; import org.junit.Assert; import org.junit.Test; import org.junit.runner.RunWith;  /**  * Tests that ensure Perfetto producers exist for GPU profiling when the device claims to support profilng.  */ @RunWith(DeviceJUnit4ClassRunner.class) public class CtsGpuProfilingDataTest extends BaseHostJUnit4Test {     public static final String TAG = ""GpuProfilingDataDeviceActivity"";      // This test ensures that if a device reports ro.hardware.gpu.profiler.support if reports the correct perfetto producers     //     // Positive tests     // - Ensure the perfetto producers for render stages, counters, and ftrace gpu frequency are available      private static final String BIN_NAME = ""ctsgraphicsgpucountersinit"";     private static final String DEVICE_BIN_PATH = ""/data/local/tmp/"" + BIN_NAME;     private static final String APP = ""android.graphics.gpuprofiling.app"";     private static final String APK = ""CtsGraphicsProfilingDataApp.apk"";     private static final String ACTIVITY = ""GpuRenderStagesDeviceActivity"";     private static final String COUNTERS_SOURCE_NAME = ""gpu.counters"";     private static final String STAGES_SOURCE_NAME = ""gpu.renderstages"";     private static final String PROFILING_PROPERTY = ""graphics.gpu.profiler.support"";     private static final String LAYER_PACKAGE_PROPERTY = ""graphics.gpu.profiler.vulkan_layer_apk"";     private static final String LAYER_NAME = ""VkRenderStagesProducer"";     private static int MAX_RETRIES = 5;      private class ShellThread extends Thread {          private String mCmd;          public ShellThread(String cmd) throws Exception {             super(""ShellThread"");             mCmd = cmd;         }          @Override         public void run() {             try {                 getDevice().executeShellV2Command(mCmd);             } catch (Exception e) {                 CLog.e(""Failed to start counters producer"" + e.getMessage());             }         }     }      /**      * Kill the native process and remove the layer related settings after each test      */     @After     public void cleanup() throws Exception {         getDevice().executeShellV2Command(""killall "" + BIN_NAME);         getDevice().executeShellV2Command(""am force-stop "" + APP);         getDevice().executeShellV2Command(""settings delete global gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global enable_gpu_debug_layers"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_app"");         getDevice().executeShellV2Command(""settings delete global gpu_debug_layer_app"");     }      /**      * Clean up before starting any tests. Apply the necessary layer settings if we need them      */     @Before     public void init() throws Exception {         cleanup();         String layerApp = getDevice().getProperty(LAYER_PACKAGE_PROPERTY);         if (layerApp != null && !layerApp.isEmpty()) {             getDevice().executeShellV2Command(""settings put global enable_gpu_debug_layers 1"");             getDevice().executeShellV2Command(""settings put global gpu_debug_app "" + APP);             getDevice().executeShellV2Command(""settings put global gpu_debug_layer_app "" + layerApp);             getDevice().executeShellV2Command(""settings put global gpu_debug_layers "" + LAYER_NAME);         }         installPackage(APK);     }      /**      * This is the primary test of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */"	""	""	""	""	""
