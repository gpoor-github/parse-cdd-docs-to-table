"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"40:217198) 3  . Software"	"3"	"A-1-1"	""	""	""	""	""	"3/A-1-1"	""">3/A-1-1] MUST NOT attach special privileges to system application's use of these properties, or prevent third-party applications from using these properties. [<a href=""#3_0_intro"""""	"03000000.650101"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"40:217198) 3  . Software"	"3"	"A-1-2"	""	""	""	""	""	"3/A-1-2"	""">3/A-1-2] MUST NOT replicate a vehicle property that already exists in the SDK. Automotive device implementations: [<a href=""#3_2_soft_api_compatibility"""""	"03000000.650102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"42:222291) 3.1.1  . Android Extensions"	"3.1.1"	"C-0-3"	""	""	""	""	""	"3.1.1/C-0-3"	"""C-0-3] MUST support all the APIs defined by the extension versions returned by android.os.ext.SdkExtensions.getExtensionVersion(int apiLevel) in the same manner as other managed APIs are supported, following the requirements in section 3.1. <h4 id="""	"03010100.670003"	"android.os.ext.SdkExtensions.getExtensionVersion"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"42:222291) 3.1.1  . Android Extensions"	"3.1.1"	"C-0-2"	""	""	""	""	""	"3.1.1/C-0-2"	"""C-0-2] MUST only return valid extension version number that have been defined by the AOSP. """	"03010100.670002"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"48:237585) 3.2.3.1  . Common Application Intents"	"3.2.3.1"	"A-0-1"	""	""	""	""	""	"3.2.3.1/A-0-1"	""">3.2.3.1/A-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here. [<a href=""#3_4_web_compatibility"""""	"03020301.650001"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"48:237585) 3.2.3.1  . Common Application Intents"	"3.2.3.1"	"Tab-0-1"	""	""	""	""	""	"3.2.3.1/Tab-0-1"	""">3.2.3.1/Tab-0-1] MUST preload one or more applications or service components with an intent handler, for all the public intent filter patterns defined by the following application intents listed here. <h2 id="""	"03020301.980001"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-6-1"	""	"[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.telecom.cts.CarModeInCallServiceTest', 6), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('android.systemintents.cts.TestSystemIntents', 1), ('android.app.cts.UiModeManagerTest', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('android.ndef.cts.NdefTest', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1)]"	"[('setUp', 16), ('getInstrumentation', 14), ('tearDown', 13), ('of', 8), ('getId', 7), ('getPackageName', 7), ('getContext', 7), ('build', 6), ('toString', 5), ('getActiveNotifications', 5), ('getPackageManager', 5), ('getWho', 4), ('getBytes', 4), ('getContentResolver', 4), ('getMessage', 4), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getRingerMode', 2), ('getResources', 2), ('getSystem', 2), ('getUiAutomation', 2), ('reset', 2), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getUserId', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1), ('create', 1), ('getCurrentModeType', 1)]"	"[('CtsAndroidAppTestCases', 13), ('CtsMediaTestCases', 9), ('CtsLegacyNotification27TestCases', 6), ('CtsTelecomTestCases', 6), ('CtsAccessibilityServiceTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1), ('CtsCameraTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsLegacyNotification20TestCases', 1), ('CtsSystemIntentTestCases', 1), ('CtsNdefTestCases', 1)]"	""	"3.2.3.5/C-6-1"	"""C-6-1] MUST implement an activity that would respond to the intent ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS, which for implementations with UI_MODE_TYPE_NORMAL it MUST be an activity where the user can grant or deny the app access to DND policy configurations. If device implementations allow users to use third-party input methods on the device, they: """	"03020305.670601"	"DND MODE_TYPE_NORMAL ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS"	""	""	""	"[('DND', 42), ('MODE_TYPE_NORMAL', 7), ('ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS', 1)]"	""	"[('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent CtsAccessibilityServiceTestCases]', 1), ('[android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testMethodsExistAndDoNotThrow CtsLegacyNotification27TestCases]', 1), ('[android.app.cts.NotificationChannelTest testConstructor CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationChannelTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicy CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicyMultiRules CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateChannel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testTotalSilenceOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testAlarmsOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_turnOff CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_deletedRule CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_multipleRules CtsAndroidAppTestCases]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStreamDndOn None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStream None]', 1), ('[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndAffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndUnaffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testAdjustVolumeInPriorityOnly CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMuteAll CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMediaAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyAlarmsAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyChannelsCanBypassDnd CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerWithDnD CtsCameraTestCases]', 1), ('[android.app.notification.legacy.cts.LegacyNotificationManagerTest testSetNotificationPolicy_preP_setOldNewFields CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationManager29Test isNotificationPolicyAccessGranted CtsLegacyNotification29TestCases]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications CtsLegacyNotification20TestCases]', 1), ('[android.app.cts.UiModeManagerTest testEnterCarModePrioritized CtsAndroidAppTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest dropShellPermissionIdentity CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSetCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testStartCallInCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarModeAndBack CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarModeMultiple CtsTelecomTestCases]', 1), ('[android.ndef.cts.NdefTest testInvalidParsing CtsNdefTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CarModeInCallServiceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 5), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 1)]"	"[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/telecom/cts/CarModeInCallServiceTest.java', 7), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/android/systemintents/cts/TestSystemIntents.java', 2), ('/android/app/cts/UiModeManagerTest.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 3), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 2), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                     results.get(resultKey));         }     }     ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");         } catch (Exception e) {             // pass         }     }     ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {             Log.d(TAG, service.getName() + "" has a correct bind state"");         }     } }])', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.      */    ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);         assertEquals(channel, channel1);     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);         assertFalse(createdChannel.canBypassDnd());     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);          assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);         assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());         tests.add(new TestSetRingerModePolicyAccess());         // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);             testStreamMuting(stream);         }     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                     mAudioManager.isStreamMute(stream));         }     }     ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);         }     }  }])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {       return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);     } }])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {         mDpm.uninstallCaCert(null, TEST_CA.getBytes());         super.tearDown();     }     ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                 mContext, 0, new Intent(mContext, this.getClass()), 0);     }      ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);         super.tearDown();     }     ])', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                 // pass             }         }         return n;     } }])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ar mode API when the caller does not hold the correct      * permission to use that API.      */    ])', 1), ('([2:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[2]:method_text:[  * Verifies that a car mode InCallService can enter and exit car mode using a priority.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[mode InCallService when a call is started when the device is      * already in car mode.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ies that the lower priority app is bound      * and receives information about the call.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[milar to {@link #testSwitchToCarMode}, except exits car mode before the call terminates.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ters car mode after the call starts.  Also      * uses multiple car mode InCallServices.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ -- bind error"");         }         return queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);     } }])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));             } catch (FormatException e) { }         }     }     ])', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**      * Test: Retrieving security logs should update the corresponding timestamp.      */    ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-5-2"	""	"[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('android.ndef.cts.NdefTest', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1)]"	"[('setUp', 13), ('tearDown', 11), ('getInstrumentation', 11), ('of', 8), ('getId', 7), ('getPackageName', 7), ('build', 6), ('getContext', 6), ('toString', 5), ('getActiveNotifications', 5), ('getWho', 4), ('getBytes', 4), ('getContentResolver', 4), ('getMessage', 4), ('cancelAll', 2), ('getPackageManager', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getRingerMode', 2), ('getResources', 2), ('getSystem', 2), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getUserId', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1)]"	"[('CtsAndroidAppTestCases', 12), ('CtsMediaTestCases', 9), ('CtsLegacyNotification27TestCases', 6), ('CtsAccessibilityServiceTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1), ('CtsCameraTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsLegacyNotification20TestCases', 1), ('CtsNdefTestCases', 1)]"	""	"3.2.3.5/C-5-2"	"""C-5-2] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_DISCOVERABLE’ intent and show a system activity that requests discoverable mode. If device implementations support the DND feature, they: """	"03020305.670502"	"android.bluetooth.adapter.action.REQUEST REQUEST_DISCOVERABLE DND"	""	""	""	"[('DND', 42)]"	""	"[('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent CtsAccessibilityServiceTestCases]', 1), ('[android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testMethodsExistAndDoNotThrow CtsLegacyNotification27TestCases]', 1), ('[android.app.cts.NotificationChannelTest testConstructor CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationChannelTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicy CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicyMultiRules CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateChannel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testTotalSilenceOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testAlarmsOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_turnOff CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_deletedRule CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_multipleRules CtsAndroidAppTestCases]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStreamDndOn None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStream None]', 1), ('[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndAffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndUnaffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testAdjustVolumeInPriorityOnly CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMuteAll CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMediaAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyAlarmsAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyChannelsCanBypassDnd CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerWithDnD CtsCameraTestCases]', 1), ('[android.app.notification.legacy.cts.LegacyNotificationManagerTest testSetNotificationPolicy_preP_setOldNewFields CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationManager29Test isNotificationPolicyAccessGranted CtsLegacyNotification29TestCases]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications CtsLegacyNotification20TestCases]', 1), ('[android.ndef.cts.NdefTest testInvalidParsing CtsNdefTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 5), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 1)]"	"[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 3), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 2), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                     results.get(resultKey));         }     }     ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");         } catch (Exception e) {             // pass         }     }     ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {             Log.d(TAG, service.getName() + "" has a correct bind state"");         }     } }])', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.      */    ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);         assertEquals(channel, channel1);     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);         assertFalse(createdChannel.canBypassDnd());     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);          assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);         assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());         tests.add(new TestSetRingerModePolicyAccess());         // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);             testStreamMuting(stream);         }     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                     mAudioManager.isStreamMute(stream));         }     }     ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);         }     }  }])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {       return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);     } }])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {         mDpm.uninstallCaCert(null, TEST_CA.getBytes());         super.tearDown();     }     ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                 mContext, 0, new Intent(mContext, this.getClass()), 0);     }      ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);         super.tearDown();     }     ])', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                 // pass             }         }         return n;     } }])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));             } catch (FormatException e) { }         }     }     ])', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**      * Test: Retrieving security logs should update the corresponding timestamp.      */    ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-2-6"	""	"[('android.view.cts.ViewTest', 231), ('android.content.res.cts.ConfigurationTest', 11), ('android.media.tv.cts.TvViewTest', 10), ('android.webkit.cts.PostMessageTest', 10), ('android.autofillservice.cts.FillEventHistoryCommonTestCase', 7), ('android.widget.cts.AbsSeekBarTest', 7), ('android.widget.cts.TextViewIsHorizontallyScrollableTest', 7), ('android.widget.cts.ResourceCursorAdapterTest', 5), ('android.widget.cts.GridLayoutTest', 5), ('android.telephony.cts.PhoneStateListenerTest', 5), ('android.autofillservice.cts.LoginActivityCommonTestCase', 4), ('android.server.wm.WindowInsetsLayoutTests', 4), ('android.server.wm.WindowInsetsAnimationImeTests', 3), ('android.view.cts.ActionModeCallback2Test', 3), ('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 3), ('android.widget.cts.AbsoluteLayoutTest', 3), ('android.telephonyprovider.cts.ThreadsTest', 3), ('android.uirendering.cts.testclasses.VectorDrawableScaleTest', 2), ('android.view.cts.TextureViewSnapshotTest', 2), ('android.view.cts.TextureViewCameraTest', 2), ('android.contentcaptureservice.cts.ResizingEditActivityTest', 2), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 2), ('android.opengl.cts.OpenGlEsVersionTest', 2), ('android.app.cts.WearableExtenderTest', 1), ('com.android.cts.verifier.sensors.base.SensorCtsTestActivity', 1), ('android.view.accessibility.cts.AccessibilityNodeInfo_RangeInfoTest', 1), ('android.server.wm.ActivityTransitionTests', 1), ('android.widget.cts.ImageButtonTest', 1), ('android.contentcaptureservice.cts.CanaryTest', 1), ('com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest', 1)]"	"[('setup', 10), ('setUp', 7), ('getInstrumentation', 7), ('getContext', 6), ('getActivity', 6), ('getTargetContext', 4), ('getMessage', 4), ('getTop', 3), ('Object', 2), ('AccessibilityDumpOnFailureRule', 2), ('getResources', 2), ('ensureDefaultSmsApp', 2), ('getLeft', 2), ('getRight', 2), ('getBottom', 2), ('Configuration', 2), ('makeConfiguration', 2), ('run', 2), ('awakenScrollBars', 2), ('MockCallback', 1), ('booleanValue', 1), ('resetCount', 1), ('getConnectionFailedCount', 1), ('activitySetUp', 1), ('getPackageManager', 1), ('getWindow', 1), ('getDecorView', 1), ('getUiAutomation', 1), ('getFloatingImeSettings', 1), ('Builder', 1), ('getAttributeSet', 1), ('getNumberOfCameras', 1), ('cleanup', 1), ('getContentResolver', 1), ('getWidth', 1), ('getBaseline', 1), ('getHeight', 1), ('setToDefaults', 1), ('getDefault', 1), ('enableService', 1), ('getSimpleName', 1), ('Executor', 1), ('start', 1), ('getLooper', 1), ('tearDown', 1), ('quitSafely', 1), ('myUserHandle', 1), ('assertClearDefaultRestrictions', 1), ('getDefaultEnabledRestrictions', 1), ('getAllowedRestrictions', 1), ('hasWindowFocus', 1), ('onHoverEvent_horizontalCantScroll_awakenScrollBarsNotCalled', 1), ('computeVerticalScrollExtent', 1), ('computeVerticalScrollRange', 1), ('computeHorizontalScrollExtent', 1), ('computeHorizontalScrollRange', 1), ('recycle', 1), ('never', 1), ('setSetLayoutParamsNull', 1), ('getLayoutParams', 1)]"	"[('CtsViewTestCases', 238), ('CtsWidgetTestCases', 28), ('CtsAutoFillServiceTestCases', 11), ('CtsContentTestCases', 11), ('CtsTvTestCases', 10), ('CtsWebkitTestCases', 10), ('CtsWindowManagerDeviceTestCases', 8), ('CtsTelephonyTestCases', 5), ('CtsInputMethodTestCases', 3), ('CtsContentCaptureServiceTestCases', 3), ('CtsTelephonyProviderTestCases', 3), ('CtsUiRenderingTestCases', 2), ('CtsAccessibilityServiceTestCases', 2), ('CtsOpenGLTestCases', 2), ('CtsAndroidAppTestCases', 1), ('CtsAccessibilityTestCases', 1)]"	""	"3.2.3.5/C-2-6"	"""C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages. """	"03020305.670206"	"SENDTO android.intent.action.SENDTO VIEW android.intent.action.VIEW SMS"	""	""	""	"[('VIEW', 331), ('SMS', 9)]"	""	"[('[android.media.tv.cts.TvViewTest getDisconnectedCount CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testConstructor CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSimpleTuneWithBundle CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testTrackChange CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testOnUnhandledInputEventListener CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testConnectionFailed CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testDisconnected CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderMediaOverlay CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderOnTop CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testUnhandledInputEvent CtsTvTestCases]', 1), ('[com.android.cts.verifier.sensors.base.SensorCtsTestActivity getTestLogger None]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase LoginActivityCommonTestCase CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testAutoFillNoDatasets_multipleFields_alwaysNull CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testAutofill_twoDatasets_selectSecondDataset CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testClearFocusBeforeRespond CtsAutoFillServiceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testZeroInsetsImeAnimates CtsWindowManagerDeviceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase FillEventHistoryCommonTestCase CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testDatasetSelected_twoResponses CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsNullResponse CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsFailure CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceTimesout CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testEventsFromPreviousSessionIsDiscarded CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testContextCommitted_withoutFlagOnLastResponse CtsAutoFillServiceTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessKeyProgressIncrement CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testThumbTint CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testThumbTintBlendMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testTickMarkTint CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testTickMarkTintBlendMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessSplitTrack CtsWidgetTestCases]', 1), ('[android.uirendering.cts.testclasses.VectorDrawableScaleTest testVectorDrawableInImageView CtsUiRenderingTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingDefaultIsFalse CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingSameAsGiven CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingTrueToFalse CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingSetInXML CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingSetInXML_returnTrueWhenSingleLineIsTrue CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewIsHorizontallyScrollableTest testIsHorizontallyScrollingSetInXML_returnGivenValueWhenSingleLineIsFalse CtsWidgetTestCases]', 1), ('[android.view.cts.ActionModeCallback2Test testCallbackOnGetContentRectDefaultWithView CtsViewTestCases]', 1), ('[android.view.cts.ActionModeCallback2Test testCallbackOnGetContentRectDefaultWithoutView CtsViewTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testSetViewResource CtsWidgetTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testSetDropDownViewResource CtsWidgetTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testNewDropDownView CtsWidgetTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testNewView CtsWidgetTestCases]', 1), ('[android.view.cts.TextureViewSnapshotTest TextureViewSnapshotTest CtsViewTestCases]', 1), ('[android.view.cts.TextureViewSnapshotTest testTextureViewGrabSnapshot CtsViewTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testCheckLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testGenerateDefaultLayoutParams CtsWidgetTestCases]', 1), ('[android.view.cts.TextureViewCameraTest testTextureViewActivity CtsViewTestCases]', 1), ('[android.contentcaptureservice.cts.ResizingEditActivityTest ResizingEditActivityTest CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ResizingEditActivityTest testInsetsChangedOnImeAction CtsContentCaptureServiceTestCases]', 1), ('[android.telephonyprovider.cts.ThreadsTest setupTestEnvironment CtsTelephonyProviderTestCases]', 1), ('[android.telephonyprovider.cts.ThreadsTest testThreadDeletion_doNotReuseThreadIdsFromEmptyThreads CtsTelephonyProviderTestCases]', 1), ('[android.telephonyprovider.cts.ThreadsTest testMultipleSmsInsertDate_returnsLatestDateFromThread CtsTelephonyProviderTestCases]', 1), ('[android.widget.cts.GridLayoutTest testCheckLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testGenerateDefaultLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testGenerateLayoutParamsFromMarginParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testAlignment CtsWidgetTestCases]', 1), ('[android.webkit.cts.PostMessageTest PostMessageTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testSimpleMessageToMainFrame CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testWildcardOriginMatchesAnything CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testEmptyStringOriginMatchesAnything CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testMultipleMessagesToMainFrame CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testMessageChannel CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testClose CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testReceiveMessagePort CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testWebMessageHandler CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testWebMessageDefaultHandler CtsWebkitTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocale CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetGetLayoutDirection CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_null CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_emptyList CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_oneLtr CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_oneRtl CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_twoLocales CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_overridesLocale CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocales_overridesSetLocale CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocale_overridesSetLocales CtsContentTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityMagnificationTest testA11yNodeInfoVisibility_whenOutOfMagnifiedArea_shouldVisible CtsAccessibilityServiceTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnAlwaysReportedSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnSignalStrengthsChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnOutgoingSmsEmergencyNumberChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnBarringInfoChanged CtsTelephonyTestCases]', 1), ('[android.server.wm.WindowInsetsLayoutTests testSetFitInsetsTypes CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsLayoutTests testSetFitInsetsSides CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsLayoutTests testSetFitInsetsIgnoringVisibility CtsWindowManagerDeviceTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensionsForVrHighPerformance CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForWideColorDisplay CtsOpenGLTestCases]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[android.view.cts.ViewTest testConstructor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testConstructorNullContext1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testConstructorNullContext2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testConstructor2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetContext CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetResources CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testClearAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartAnimationNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFindViewById CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewById CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdNoId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdInvalid CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdNotFound CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessTouchDelegate CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMouseEventCallsGetPointerIcon CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessPointerIcon CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPointerIconOverlap CtsViewTestCases]', 1), ('[android.view.cts.ViewTest onResolvePointerIcon_horizontalCantScroll_pointerIsProperty CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessTag CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnSizeChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHitRectNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHitRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testForceLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsLayoutRequested CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBaseline CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessBackground CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetBackgroundResource CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheBackgroundColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetBackgroundColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testVerifyDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFocusedRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRectPoint CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testComputeHorizontalScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testComputeVerticalScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLeftFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRightFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBottomFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTopFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testResolveSize CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDefaultSize CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessLongClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessContextClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetContextMenuInfo CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnCreateContextMenuListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCreateContextMenu CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCreateContextMenuNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFocusables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusablesWithoutTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusablesInTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddKeyboardNavigationClusters CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyboardNavigationClusterSearch CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRootView CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSolidColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetMinimumWidth CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSuggestedMinimumWidth CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetMinimumHeight CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSuggestedMinimumHeight CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessWillNotCacheDrawing CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingCache CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBuildAndDestroyDrawingCache CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessWillNotDraw CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheQuality CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchSetSelected CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSelected CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchSetPressed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessPressed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSoundEffectsEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessKeepScreenOn CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDuplicateParentStateEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSaveEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenu CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuXYNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuXY CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFitSystemWindows CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnGenericMotionListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXYNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY_WithListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnLongClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformContextClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnContextClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessOnFocusChangeListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusUpId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusDownId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusLeftId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusRightId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessMeasuredDimension CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMeasure CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessLayoutParams CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsShown CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingTime CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScheduleDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUnscheduleDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowVisibility CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowToken CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testHasWindowFocus CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHandler CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRemoveCallbacks CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCancelLongPress CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetViewTreeObserver CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowAttachCount CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnAttachedToAndDetachedFromWindow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindowNullArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindowSmallArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreen CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreenNullArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreenSmallArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddTouchables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTouchables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInflate CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsInTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsInEditMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidate1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidate2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidateDelayed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPost CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostDelayed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPlaySoundEffect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyShortcut CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyMultiple CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyShortcutEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyShortcutEventNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTrackballEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchTrackballMoveEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchUnhandledMove CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUnhandledKeys CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testWindowVisibilityChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocalVisibleRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMergeDrawableStates CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSaveAndRestoreHierarchyState CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyDownOrUp CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddRemoveAffectsWrapContentLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchTouchEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate3 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidateDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnFocusChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRestoreDefaultFocus CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDrawableState CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testWindowFocusChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDraw CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestFocusFromTouch CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen5 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreenWithScale CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchEventTap CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchEventScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBringToFront CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetApplicationWindowToken CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBottomPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLeftPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRightPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTopPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsPaddingOffsetRequired CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPadding CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowVisibleDisplayFrame CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetScrollContainer CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollbarStyle CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollFading CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrolling CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInitializeScrollbarsAndFadingEdge CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollbarSize CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnStartAndFinishTemporaryDetach CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyPreIme CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testHapticFeedback CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInputConnection CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFilterTouchesWhenObscured CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBackgroundTint CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeWithParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeWithoutParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeTypedWithParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeTypedWithoutParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testVisibilityAggregated CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOverlappingRendering CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTranslationSetter CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testXYZ CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnHoverEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleXNaN CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleXPositiveInfinity CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleXNegativeInfinity CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleYNaN CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleYPositiveInfinity CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScaleYNegativeInfinity CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTransitionAlpha CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetGetOutlineShadowColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTransformMatrixToGlobal CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTransformMatrixToLocal CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPivot CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetLeftTopRightBottom CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetUniqueDrawingId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetVerticalScrollbarTrack CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetVerticalScrollbarThumb CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetHorizontalScrollbarTrack CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetHorizontalScrollbarThumb CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetTransitionVisibility CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsShowingLayoutBounds CtsViewTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 231), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/PostMessageTest.java', 10), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsSeekBarTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewIsHorizontallyScrollableTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ResourceCursorAdapterTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/GridLayoutTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivityCommonTestCase.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsLayoutTests.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeCallback2Test.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsoluteLayoutTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/ThreadsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/VectorDrawableScaleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/TextureViewSnapshotTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/TextureViewCameraTest.java', 2), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/ResizingEditActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityTransitionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ImageButtonTest.java', 1), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/CanaryTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 1)]"	"[('/android/view/cts/ViewTest.java', 232), ('/android/content/res/cts/ConfigurationTest.java', 12), ('/android/media/tv/cts/TvViewTest.java', 11), ('/android/webkit/cts/PostMessageTest.java', 11), ('/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 8), ('/android/widget/cts/AbsSeekBarTest.java', 8), ('/android/widget/cts/TextViewIsHorizontallyScrollableTest.java', 8), ('/android/widget/cts/ResourceCursorAdapterTest.java', 6), ('/android/widget/cts/GridLayoutTest.java', 6), ('/android/telephony/cts/PhoneStateListenerTest.java', 6), ('/android/autofillservice/cts/LoginActivityCommonTestCase.java', 5), ('/android/server/wm/WindowInsetsLayoutTests.java', 5), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 4), ('/android/view/cts/ActionModeCallback2Test.java', 4), ('/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 4), ('/android/widget/cts/AbsoluteLayoutTest.java', 4), ('/android/telephonyprovider/cts/ThreadsTest.java', 4), ('/android/uirendering/cts/testclasses/VectorDrawableScaleTest.java', 3), ('/android/view/cts/TextureViewSnapshotTest.java', 3), ('/android/view/cts/TextureViewCameraTest.java', 3), ('/android/contentcaptureservice/cts/ResizingEditActivityTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 3), ('/android/opengl/cts/OpenGlEsVersionTest.java', 3), ('/android/app/cts/WearableExtenderTest.java', 2), ('/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 2), ('/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java', 2), ('/android/server/wm/ActivityTransitionTests.java', 2), ('/android/widget/cts/ImageButtonTest.java', 2), ('/android/contentcaptureservice/cts/CanaryTest.java', 2), ('/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 2)]"	"[('([1:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[1]:method_text:[Locales());         assertEquals(View.LAYOUT_DIRECTION_RTL, config.getLayoutDirection());     }     ])', 4), ('([10:/android/widget/cts/AbsSeekBarTest.java]:[VIEW]:[10]:method_text:[))                 .setTintList(TestUtils.colorStateListOf(Color.RED));     }      @UiThreadTest    ])', 3), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 3), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[1]:method_text:[waitUntilDisconnected();          InstrumentedAutoFillService.assertNoFillEventHistory();     }     ])', 2), ('([1:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[1]:method_text:[isEmpty());         assertEquals(View.LAYOUT_DIRECTION_LTR, config.getLayoutDirection());     }     ])', 2), ('([4:/android/server/wm/WindowInsetsLayoutTests.java]:[VIEW]:[4]:method_text:[[1] - childWindowRoot.getHeight());             activity.removeChildWindow();         });     }     ])', 2), ('([22:/android/view/cts/ViewTest.java]:[VIEW]:[22]:method_text:[);         assertEquals(1, viewList.size());         assertEquals(view, viewList.get(0));     }     ])', 2), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[ocation[0]);         assertEquals(layoutLocation[1] + mockView.getHeight(), location[1]);     }     ])', 2), ('([1:/android/app/cts/WearableExtenderTest.java]:[VIEW]:[1]:method_text:[d void setUp() throws Exception {         super.setUp();         mContext = getContext();     }     ])', 1), ('([23:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[23]:method_text:[}         mInstrumentation.waitForIdleSync();         super.tearDown();     }      @UiThreadTest    ])', 1), ('([5:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[5]:method_text:[) {                     runOnEachChannel.run();                 }             }         }     }     ])', 1), ('([4:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[4]:method_text:[                   fail(""Unrecognized type: "" + track.getType());             }         }     }     ])', 1), ('([2:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[2]:method_text:[yEvent.getAction());         assertEquals(unhandled.getKeyCode(), keyEvent.getKeyCode());     }     ])', 1), ('([6:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[6]:method_text:[verifyKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_GUIDE), unhandledEvent);     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[1]:method_text:[          return mCallback.getConnectionFailedCount() > 0;             }         }.run();     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[1]:method_text:[              return mCallback.getDisconnectedCount() > 0;             }         }.run();     }     ])', 1), ('([2:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[2]:method_text:[        mTvView.setZOrderMediaOverlay(false);         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([2:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[2]:method_text:[View.setZOrderOnTop(false);         mInstrumentation.waitForIdleSync();     }      @UiThreadTest    ])', 1), ('([5:/android/media/tv/cts/TvViewTest.java]:[VIEW]:[5]:method_text:[ public boolean onUnhandledInputEvent(InputEvent event) {             return true;         }     } }])', 1), ('([1:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[VIEW]:[1]:method_text:[sorRunListener extends RunListener {         private volatile boolean mCurrentTestReported;         ])', 1), ('([2:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[VIEW]:[2]:method_text:[   protected LoginActivityCommonTestCase(UiBot inlineUiBot) {         super(inlineUiBot);     }     ])', 1), ('([3:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[VIEW]:[3]:method_text:[        mActivity.onPassword(View::requestFocus);         mUiBot.assertNoDatasetsEver();     }      ])', 1), ('([2:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[VIEW]:[2]:method_text:[             findNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();     }     ])', 1), ('([1:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[VIEW]:[1]:method_text:[llRequest();          // Confirm no datasets shown         mUiBot.assertNoDatasetsEver();     }     ])', 1), ('([7:/android/server/wm/WindowInsetsAnimationImeTests.java]:[VIEW]:[7]:method_text:[ViewHeight(KEYBOARD_HEIGHT)                                 .setDrawsBehindNavBar(true));     }     ])', 1), ('([4:/android/server/wm/WindowInsetsAnimationImeTests.java]:[VIEW]:[4]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[VIEW]:[2]:method_text:[// to ensure it.         builder.setNavigationBarColor(Color.BLACK);         return builder;     } }])', 1), ('([2:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[2]:method_text:[undle bundle = new Bundle();         bundle.putString(key, value);         return bundle;     }     ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[1]:method_text:[vents.get(3), NULL_DATASET_ID,                     ""clientStateKey"", ""Value2"");         }     }     ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[1]:method_text:[y A - at this point, service should have stats of      *        activity A.      * </ol>      */    ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[1]:method_text:[own(finalSelection.getEvents().get(0), NULL_DATASET_ID, ""activity"",                 ""A"");     }     ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[VIEW]:[1]:method_text:[ents.get(0));             assertFillEventForDatasetSelected(events.get(1), ""id2"");         }     } }])', 1), ('([3:/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java]:[VIEW]:[3]:method_text:[ilureRule mDumpOnFailureRule =             new AccessibilityDumpOnFailureRule();      @SmallTest    ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[VIEW]:[1]:method_text:[umentationRegistry.getInstrumentation();         mActivity = mActivityRule.getActivity();     }     ])', 1), ('([3:/android/widget/cts/AbsSeekBarTest.java]:[VIEW]:[3]:method_text:[yEvent);         assertEquals(oldProgress - keyProgressIncrement, seekBar.getProgress());     }     ])', 1), ('([10:/android/widget/cts/AbsSeekBarTest.java]:[VIEW]:[10]:method_text:[kTickMark, times(1))                 .setTintList(TestUtils.colorStateListOf(Color.RED));     }     ])', 1), ('([8:/android/widget/cts/AbsSeekBarTest.java]:[VIEW]:[8]:method_text:[olean verifyDrawable(Drawable who) {             return super.verifyDrawable(who);         }     } }])', 1), ('([3:/android/uirendering/cts/testclasses/VectorDrawableScaleTest.java]:[VIEW]:[3]:method_text:[ort org.junit.Test;  @MediumTest public class VectorDrawableScaleTest extends ActivityTestBase {    ])', 1), ('([23:/android/uirendering/cts/testclasses/VectorDrawableScaleTest.java]:[VIEW]:[23]:method_text:[iewById(R.id.imageview2);         imageView.setImageResource(R.drawable.vector_icon_create);     } }])', 1), ('([11:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[11]:method_text:[nflater.inflate(R.layout.textview_isHorizontallyScrollable_layout,                 null);     }     ])', 1), ('([6:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[6]:method_text:[w_scrollHorizontally_default);          assertFalse(textView.isHorizontallyScrollable());     }     ])', 1), ('([7:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[7]:method_text:[.setHorizontallyScrolling(true);         assertTrue(textView.isHorizontallyScrollable());     }     ])', 1), ('([9:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[9]:method_text:[etHorizontallyScrolling(false);         assertFalse(textView.isHorizontallyScrollable());     }     ])', 1), ('([12:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[12]:method_text:[scrollHorizontally_false);         assertFalse(textViewFalse.isHorizontallyScrollable());     }     ])', 1), ('([18:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[18]:method_text:[lly_false_singleLine_true);         assertTrue(textViewFalse.isHorizontallyScrollable());     }     ])', 1), ('([18:/android/widget/cts/TextViewIsHorizontallyScrollableTest.java]:[VIEW]:[18]:method_text:[ally_false_singleLine_false);         assertFalse(textViewFalse.isHorizontallyScrollable());     } }])', 1), ('([8:/android/view/cts/ActionModeCallback2Test.java]:[VIEW]:[8]:method_text:[     public void setup() {         mContext = InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([13:/android/view/cts/ActionModeCallback2Test.java]:[VIEW]:[13]:method_text:[sertEquals(VIEW_HEIGHT, outRect.bottom);         assertEquals(VIEW_WIDTH, outRect.right);     }     ])', 1), ('([1:/android/view/cts/ActionModeCallback2Test.java]:[VIEW]:[1]:method_text:[e;         }          @Override         public void onDestroyActionMode(ActionMode mode) {}     }  }])', 1), ('([7:/android/widget/cts/ResourceCursorAdapterTest.java]:[VIEW]:[7]:method_text:[ut.cursoradapter_host, null);         mCursor = createTestCursor(3, 3);     }      @UiThreadTest    ])', 1), ('([6:/android/widget/cts/ResourceCursorAdapterTest.java]:[VIEW]:[6]:method_text:[esult);         assertEquals(R.id.cursorAdapter_item1, result.getId());     }      @UiThreadTest    ])', 1), ('([7:/android/widget/cts/ResourceCursorAdapterTest.java]:[VIEW]:[7]:method_text:[d());     }      // parameters Context and Cursor are never read in the method     @UiThreadTest    ])', 1), ('([4:/android/widget/cts/ResourceCursorAdapterTest.java]:[VIEW]:[4]:method_text:[;     }      // The parameters Context and Cursor are never read in the method     @UiThreadTest    ])', 1), ('([7:/android/widget/cts/ResourceCursorAdapterTest.java]:[VIEW]:[7]:method_text:[      }          public boolean isAutoRequery() {             return mAutoRequery;         }     } }])', 1), ('([5:/android/view/cts/TextureViewSnapshotTest.java]:[VIEW]:[5]:method_text:[ public TextureViewSnapshotTest() {         super(TextureViewSnapshotTestActivity.class);     }     ])', 1), ('([2:/android/view/cts/TextureViewSnapshotTest.java]:[VIEW]:[2]:method_text:[vity().waitForCompletion()) {             fail(""Did not complete complete test."");         }     } }])', 1), ('([15:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[VIEW]:[15]:method_text:[ new UnlockScreenRule();      private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);     ])', 1), ('([3:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[VIEW]:[3]:method_text:[able window hosted by a different process      * temporarily becomes the focused window.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[VIEW]:[1]:method_text:[Matcher() {         return event -> TextUtils.equals(""onFinishInput"", event.getEventName());     } }])', 1), ('([1:/android/server/wm/ActivityTransitionTests.java]:[VIEW]:[1]:method_text:[itionTests  */ @Presubmit public class ActivityTransitionTests extends ActivityManagerTestBase {    ])', 1), ('([6:/android/widget/cts/AbsoluteLayoutTest.java]:[VIEW]:[6]:method_text:[stUtils.beginDocument(parser, ""LinearLayout"");         return Xml.asAttributeSet(parser);     }     ])', 1), ('([2:/android/widget/cts/AbsoluteLayoutTest.java]:[VIEW]:[2]:method_text:[rams));         assertFalse(mMyAbsoluteLayout.checkLayoutParams(null));     }      @UiThreadTest    ])', 1), ('([4:/android/widget/cts/AbsoluteLayoutTest.java]:[VIEW]:[4]:method_text:[rams(ViewGroup.LayoutParams p) {             return super.generateLayoutParams(p);         }     } }])', 1), ('([5:/android/view/cts/TextureViewCameraTest.java]:[VIEW]:[5]:method_text:[ty = mActivityRule.getActivity();         mNumberOfCameras = Camera.getNumberOfCameras();     }     ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[VIEW]:[1]:method_text:[    return;         }         assertTrue(mActivity.waitForCompletion(WAIT_TIMEOUT_IN_SECS));     } }])', 1), ('([1:/android/widget/cts/ImageButtonTest.java]:[VIEW]:[1]:method_text:[tivity();         mImageButton = (ImageButton) mActivity.findViewById(R.id.image_button);     }     ])', 1), ('([4:/android/contentcaptureservice/cts/ResizingEditActivityTest.java]:[VIEW]:[4]:method_text:[  public void resetActivityStaticState() {         ResizingEditActivity.onRootView(null);     }     ])', 1), ('([1:/android/contentcaptureservice/cts/ResizingEditActivityTest.java]:[VIEW]:[1]:method_text:[ContentCaptureEvent> events = session.getEvents();          assertViewInsetsChanged(events);     } }])', 1), ('([5:/android/telephonyprovider/cts/ThreadsTest.java]:[SMS]:[5]:method_text:[Instrumentation().getContext();         mContentResolver = mContext.getContentResolver();     }     ])', 1), ('([1:/android/telephonyprovider/cts/ThreadsTest.java]:[SMS]:[1]:method_text:[   }      // This purpose of this test case is to return latest date inserted as sms from thread    ])', 1), ('([13:/android/telephonyprovider/cts/ThreadsTest.java]:[SMS]:[13]:method_text:[return mContext.getContentResolver().insert(Telephony.Sms.Inbox.CONTENT_URI, contentValues);     } }])', 1), ('([17:/android/widget/cts/GridLayoutTest.java]:[VIEW]:[17]:method_text:[etActivity();         mGridLayout = (GridLayout) mActivity.findViewById(R.id.gridlayout);     }     ])', 1), ('([4:/android/widget/cts/GridLayoutTest.java]:[VIEW]:[4]:method_text:[  new GridLayout.LayoutParams(GridLayout.spec(0), GridLayout.spec(0)));     }      @UiThreadTest    ])', 1), ('([3:/android/widget/cts/GridLayoutTest.java]:[VIEW]:[3]:method_text:[CONTENT, lp.width);         assertEquals(ViewGroup.LayoutParams.WRAP_CONTENT, lp.height);     }     ])', 1), ('([24:/android/widget/cts/GridLayoutTest.java]:[VIEW]:[24]:method_text:[w, col, alignment, v0, table[row][col], ""row"");             }         }     }      @UiThreadTest    ])', 1), ('([2:/android/widget/cts/GridLayoutTest.java]:[VIEW]:[2]:method_text:[rams(ViewGroup.LayoutParams p) {             return super.generateLayoutParams(p);         }     } }])', 1), ('([16:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[16]:method_text:[ng-webview-cts.      */     // Post a string message to main frame and make sure it is received.    ])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[1]:method_text:[view-cts.      */     // Post a string message to main frame passing a wildcard as target origin    ])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[1]:method_text:[cts.      */     // Post a string message to main frame passing an empty string as target origin    ])', 1), ('([5:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[5]:method_text:[// Post multiple messages to main frame and make sure they are received in     // correct order.    ])', 1), ('([3:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[3]:method_text:[   */     // Create a message channel and make sure it can be used for data transfer to/from js.    ])', 1), ('([6:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[6]:method_text:[ebview-cts.      */     // Test that a message port that is closed cannot used to send a message    ])', 1), ('([5:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[5]:method_text:[      */     // Test a message port created in JS can be received and used for message transfer.    ])', 1), ('([4:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[4]:method_text:[/go/modifying-webview-cts.      */     // Ensure the callback is invoked on the correct Handler.    ])', 1), ('([5:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[5]:method_text:[difying-webview-cts.      */     // Ensure the callback is invoked on the MainLooper by default.    ])', 1), ('([4:/android/webkit/cts/PostMessageTest.java]:[VIEW]:[4]:method_text:[be on the main thread"",                 WebkitUtils.waitForFuture(messageMainLooperFuture));     } }])', 1), ('([2:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[2]:method_text:[ation.NAVIGATION_NONAV;         mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;     }     ])', 1), ('([6:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[6]:method_text:[Locales());         assertEquals(View.LAYOUT_DIRECTION_RTL, config.getLayoutDirection());     }     ])', 1), ('([6:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[6]:method_text:[rPKLocale);         assertEquals(View.LAYOUT_DIRECTION_RTL, config.getLayoutDirection());     }     ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[1]:method_text:[Locales());         assertEquals(View.LAYOUT_DIRECTION_LTR, config.getLayoutDirection());     }     ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[VIEW]:[1]:method_text:[ assertEquals(config, readConf);         } finally {             parcel.recycle();         }     } }])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[VIEW]:[5]:method_text:[to disable it.         mService = mMagnificationAccessibilityServiceRule.enableService();     }     ])', 1), ('([39:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[VIEW]:[39]:method_text:[ayoutParams));         // Waiting for UI refresh         mInstrumentation.waitForIdleSync();     } }])', 1), ('([1:/android/contentcaptureservice/cts/CanaryTest.java]:[VIEW]:[1]:method_text:[lic class CanaryTest {      private static final String TAG = CanaryTest.class.getSimpleName();     ])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[SMS]:[2]:method_text:[         if (mHandlerThread != null) {             mHandlerThread.quitSafely();         }     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[SMS]:[1]:method_text:[EPORTED_SIGNAL_STRENGTH without LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH      * permission.      *    ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[SMS]:[1]:method_text:[GsmSignalStrength();         mSignalStrength.isGsm();         mSignalStrength.getLevel();     }     ])', 1), ('([11:/android/telephony/cts/PhoneStateListenerTest.java]:[SMS]:[11]:method_text:[   assertEquals(mOnOutgoingSmsEmergencyNumberChanged.getNumber(), TEST_EMERGENCY_NUMBER);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[SMS]:[1]:method_text:[   // be not barred.         assertNotEquals(hasBarringTypeUnknown, hasBarringTypeKnown);     }     ])', 1), ('([12:/android/server/wm/WindowInsetsLayoutTests.java]:[VIEW]:[12]:method_text:[ extends WindowManagerTestBase {      private final static long TIMEOUT = 1000; // milliseconds     ])', 1), ('([15:/android/server/wm/WindowInsetsLayoutTests.java]:[VIEW]:[15]:method_text:[      assertEquals(locationOnScreen[1] /* expected y */, windowMetricsBounds.top);         }     } }])', 1), ('([3:/android/opengl/cts/OpenGlEsVersionTest.java]:[VIEW]:[3]:method_text:[ns, requiredExtension));             }         }     }     @CddTest(requirement=""7.1.4.1/C-6-1"")    ])', 1), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[VIEW]:[1]:method_text:[ption e) {             Log.e(TAG, ""Caught exception: "" + e);         }         return false;     } }])', 1), ('([2:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[SMS]:[2]:method_text:[abledRestrictions();      /**      * Test restrictions that should be enabled by default      */    ])', 1), ('([50:/android/view/cts/ViewTest.java]:[VIEW]:[50]:method_text:[ND_IN_MILLIS, mActivity::hasWindowFocus);         assertTrue(mActivity.hasWindowFocus());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[ty, null);          new View(mActivity, attrs, 0);          new View(mActivity, null, 1);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[VIEW]:[2]:method_text:[    final AttributeSet attrs = Xml.asAttributeSet(parser);         new View(null, attrs);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[VIEW]:[2]:method_text:[per. Necessary for async inflation     private Pair<Class<?>, Throwable> sCtorException = null;     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[VIEW]:[1]:method_text:[""                     + sCtorException.first.getName(), sCtorException.second);         }     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[       View view = new View(mActivity);         assertSame(mActivity, view.getContext());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[    View view = new View(mActivity);         assertSame(mResources, view.getResources());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[getAnimation());          view.clearAnimation();         assertNull(view.getAnimation());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[nitialized());          view.setAnimation(null);         assertNull(view.getAnimation());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[.getAnimation());         view.clearAnimation();         assertNull(view.getAnimation());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ationNull() {         View view = new View(mActivity);         view.startAnimation(null);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[imation);         assertEquals(Animation.START_ON_FIRST_FRAME, animation.getStartTime());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[LTA,                 () -> view.hasCalledOnSetAlpha() && view.hasCalledOnAnimationEnd());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[ctivity.findViewById(R.id.viewlayout_root);         assertSame(parent, view.getParent());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[NDICATOR_LEFT | View.SCROLL_INDICATOR_RIGHT,                 view.getScrollIndicators());     }     ])', 1), ('([21:/android/view/cts/ViewTest.java]:[VIEW]:[21]:method_text:[tors(0, view.getScrollIndicators());         assertEquals(0, view.getScrollIndicators());     }     ])', 1), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[view = parent.findViewById(R.id.mock_view);         assertTrue(view instanceof MockView);     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[ssertSame(foundView, requiredView);         assertTrue(requiredView instanceof MockView);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[Activity.findViewById(R.id.viewlayout_root);         parent.requireViewById(View.NO_ID);     }      ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[parent = mActivity.findViewById(R.id.viewlayout_root);         parent.requireViewById(0);     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[layout_root);         parent.requireViewById(R.id.view); // id not present in view_layout     }     ])', 1), ('([21:/android/view/cts/ViewTest.java]:[VIEW]:[21]:method_text:[gate);          view.setTouchDelegate(null);         assertNull(view.getTouchDelegate());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[lBars();         } else {             verify(view, never()).awakenScrollBars();         }     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[ndViewById(R.id.scroll_view);         assertFalse(view2.hasCalledOnResolvePointerIcon());     }     ])', 1), ('([15:/android/view/cts/ViewTest.java]:[VIEW]:[15]:method_text:[EXT),                      view.onResolvePointerIcon(event, 0));         event.recycle();     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[ssertEquals(iconParent, parent.onResolvePointerIcon(event, 0));          event.recycle();     }     ])', 1), ('([15:/android/view/cts/ViewTest.java]:[VIEW]:[15]:method_text:[;         } else {             assertEquals(expectedPointerIcon, actualResult);         }     }     ])', 1), ('([47:/android/view/cts/ViewTest.java]:[VIEW]:[47]:method_text:[thTag(viewGroup));          mockView.setTag(null);         assertNull(mockView.getTag());     }     ])', 1), ('([31:/android/view/cts/ViewTest.java]:[VIEW]:[31]:method_text:[, view.getOldWOnSizeChanged());         assertEquals(oldh, view.getOldHOnSizeChanged());     }      ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[tNull() {         MockView view = new MockView(mActivity);         view.getHitRect(null);     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[w.getWidth(), outRect.right);         assertEquals(mockView.getHeight(), outRect.bottom);     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[tRequested());          view.forceLayout();         assertTrue(view.isLayoutRequested());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[sted());          view.layout(0, 0, 0, 0);         assertFalse(view.isLayoutRequested());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[assertTrue(view.isLayoutRequested());         assertTrue(mMockParent.hasRequestLayout());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[        mInstrumentation.waitForIdleSync();         assertTrue(view.hasCalledOnLayout());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[{         View view = new View(mActivity);          assertEquals(-1, view.getBaseline());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[());          view.setBackgroundDrawable(null);         assertNull(view.getBackground());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[und());          view.setBackgroundResource(0);         assertNull(view.getBackground());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[acheBackgroundColor(-1);         assertEquals(-1, view.getDrawingCacheBackgroundColor());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[         assertNotNull(colorDrawable);         assertEquals(0, colorDrawable.getAlpha());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[       assertTrue(view.verifyDrawable(d1));         assertFalse(view.verifyDrawable(d2));     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[w.getWidth(), outRect.right);         assertEquals(mockView.getHeight(), outRect.bottom);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[top);         assertEquals(10, outRect.right);         assertEquals(100, outRect.bottom);     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[m);         assertEquals(ptParent.x, point.x);         assertEquals(ptParent.y, point.y);     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[.left + halfWidth, rect.right);         assertEquals(rect.top + halfHeight, rect.bottom);     }     ])', 1), ('([29:/android/view/cts/ViewTest.java]:[VIEW]:[29]:method_text:[ollRange());         assertEquals(view.getWidth(), view.computeHorizontalScrollExtent());     }     ])', 1), ('([29:/android/view/cts/ViewTest.java]:[VIEW]:[29]:method_text:[rollRange());         assertEquals(view.getHeight(), view.computeVerticalScrollExtent());     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[dgeStrength(), 0.0f);         assertEquals(1f, view.getBottomFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[ view.scrollTo(1, 0);         assertEquals(1.0f, view.getLeftFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[iew.scrollTo(-1, 0);         assertEquals(1.0f, view.getRightFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[ew.scrollTo(0, -2);         assertEquals(1.0f, view.getBottomFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[  view.scrollTo(0, 2);         assertEquals(1.0f, view.getTopFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[T_MOST));          assertEquals(20, View.resolveSize(20, 30 | View.MeasureSpec.AT_MOST));     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[OST));          assertEquals(30, View.getDefaultSize(20, 30 | View.MeasureSpec.AT_MOST));     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[etId());          view.setId(0xFFFFFFFF);         assertEquals(0xFFFFFFFF, view.getId());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[e());          view.setLongClickable(false);         assertFalse(view.isLongClickable());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[Clickable());          view.setClickable(false);         assertFalse(view.isClickable());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[         view.setContextClickable(false);         assertFalse(view.isContextClickable());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ MockView view = new MockView(mActivity);          assertNull(view.getContextMenuInfo());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[ock(View.OnCreateContextMenuListener.class));         assertTrue(view.isLongClickable());     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[, times(1)).onCreateContextMenu(                     any(), eq(view), any());         });     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ {         MockView view = new MockView(mActivity);         view.createContextMenu(null);     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[st.get(0));          // null array should be ignored         view.addFocusables(null, 0);     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[alse(""test sanity"", view.isInTouchMode());         focusableInTouchModeTest(view, false);     }     ])', 1), ('([69:/android/view/cts/ViewTest.java]:[VIEW]:[69]:method_text:[RWARD, View.FOCUSABLES_TOUCH_MODE);         assertEquals(Collections.emptyList(), views);     }     ])', 1), ('([34:/android/view/cts/ViewTest.java]:[VIEW]:[34]:method_text:[als(decorView, v2.keyboardNavigationClusterSearch(null, View.FOCUS_FORWARD));         });     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[      view.setParent(mMockParent);         assertEquals(mMockParent, view.getRootView());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[         View view = new View(mActivity);          assertEquals(0, view.getSolidColor());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[ view.setMinimumWidth(-100);         assertEquals(-100, view.getSuggestedMinimumWidth());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[ + 10);         assertEquals(drawableMinimumWidth + 10, view.getSuggestedMinimumWidth());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[iew.setMinimumHeight(-100);         assertEquals(-100, view.getSuggestedMinimumHeight());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[ 10);         assertEquals(drawableMinimumHeight + 10, view.getSuggestedMinimumHeight());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[       view.setWillNotCacheDrawing(true);         assertTrue(view.willNotCacheDrawing());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[     view.setDrawingCacheEnabled(true);         assertTrue(view.isDrawingCacheEnabled());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[        Bitmap bitmap2 = view.getDrawingCache();         assertNotSame(bitmap1, bitmap2);     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[ight());          view.destroyDrawingCache();         assertNull(view.getDrawingCache());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[llNotDraw());          view.setWillNotDraw(true);         assertTrue(view.willNotDraw());     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[AWING_CACHE_QUALITY_MASK         assertEquals(0x00180000, view.getDrawingCacheQuality());     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[        assertFalse(mockView1.isSelected());         assertFalse(mockView2.isSelected());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[ew.isSelected());          view.setSelected(true);         assertTrue(view.isSelected());     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[;         assertFalse(mockView1.isPressed());         assertFalse(mockView2.isPressed());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[(view.isPressed());          view.setPressed(true);         assertTrue(view.isPressed());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[   view.setSoundEffectsEnabled(false);         assertFalse(view.isSoundEffectsEnabled());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[enOn());          view.setKeepScreenOn(true);         assertTrue(view.getKeepScreenOn());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[licateParentStateEnabled(true);         assertTrue(view.isDuplicateParentStateEnabled());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[iew.isEnabled());          view.setEnabled(false);         assertFalse(view.isEnabled());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[VIEW]:[6]:method_text:[abled());          view.setSaveEnabled(false);         assertFalse(view.isSaveEnabled());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[ckView(mActivity);          assertNull(view.getParent());         view.showContextMenu();     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[se(view.showContextMenu());         assertTrue(mMockParent.hasShowContextMenuForChild());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[ew(mActivity);          assertNull(view.getParent());         view.showContextMenu(0, 0);     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[e(view.showContextMenu(0, 0));         assertTrue(parent.hasShowContextMenuForChildXY());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[rtFalse(view.fitSystemWindows(insets));         assertFalse(view.fitSystemWindows(null));     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[(view);          view.setOnClickListener(null);         assertFalse(view.performClick());     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[class));         assertTrue(view.performClick());         assertTrue(view.isClickable());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[          assertFalse(view.dispatchGenericMotionEvent(event3));         event3.recycle();     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ent() {         MockView view = new MockView(mActivity);         view.performLongClick();     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[rent.hasShowContextMenuForChild());         verify(listener, times(1)).onLongClick(view);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[) {         MockView view = new MockView(mActivity);         view.performLongClick(0, 0);     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[(view.performLongClick(0, 0));         assertTrue(parent.hasShowContextMenuForChildXY());     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[False(parent.hasShowContextMenuForChildXY());         verify(listener).onLongClick(view);     }     ])', 1), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[         assertTrue(view.performLongClick());         assertTrue(view.isLongClickable());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[rue(view.performContextClick());         verify(listener, times(1)).onContextClick(view);     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[   assertTrue(view.performContextClick());         assertTrue(view.isContextClickable());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[sChangeListener(listener);         assertSame(listener, view.getOnFocusChangeListener());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[pId(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusUpId());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[d(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusDownId());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[d(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusLeftId());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusRightId());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[tEquals(20, view.getMeasuredWidth());         assertEquals(30, view.getMeasuredHeight());     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[s(size2, view.getMeasuredWidth());         assertEquals(size1, view.getMeasuredHeight());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[tivity);         assertNull(view.getLayoutParams());          view.setLayoutParams(null);     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[assertSame(params, view.getLayoutParams());         assertTrue(view.isLayoutRequested());     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[        // mMockParent is not a instance of ViewRoot         assertFalse(view.isShown());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[_windows);         assertEquals(SystemClock.uptimeMillis(), view.getDrawingTime(), 1000);     }     ])', 1), ('([15:/android/view/cts/ViewTest.java]:[VIEW]:[15]:method_text:[eDrawable(view.getBackground(), what);          view.scheduleDrawable(null, null, -1000);     }     ])', 1), ('([17:/android/view/cts/ViewTest.java]:[VIEW]:[17]:method_text:[at);          view.unscheduleDrawable(null);         view.unscheduleDrawable(null, null);     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[ewById(R.id.fit_windows);         assertEquals(View.VISIBLE, view.getWindowVisibility());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[= mActivity.findViewById(R.id.fit_windows);         assertNotNull(view.getWindowToken());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[dow has been focused.         PollingCheck.waitFor(TIMEOUT_DELTA, view2::hasWindowFocus);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ockView(mActivity);         // mAttachInfo is null         assertNull(view.getHandler());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[runner, delay));         Thread.sleep(delay * 2);         verify(runner, times(1)).run();     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[         view = mActivity.findViewById(R.id.fit_windows);         view.cancelLongPress();     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[tivity.findViewById(R.id.fit_windows);         assertNotNull(view.getViewTreeObserver());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ttachInfo is null         assertEquals(0, view.getWindowAttachCount());     }      @UiThreadTest    ])', 1), ('([23:/android/view/cts/ViewTest.java]:[VIEW]:[23]:method_text:[View(R.layout.view_layout);         assertTrue(mockView.hasCalledOnDetachedFromWindow());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[ew = mActivity.findViewById(R.id.mock_view);          mockView.getLocationInWindow(null);     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[ity.findViewById(R.id.mock_view);          mockView.getLocationInWindow(new int[] { 0 });     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[ mActivity.findViewById(R.id.scroll_view);          scrollView.getLocationOnScreen(null);     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[findViewById(R.id.scroll_view);          scrollView.getLocationOnScreen(new int[] { 0 });     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[Clickable());         view.addTouchables(result);         assertEquals(0, result.size());     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[ckable());         result = view.getTouchables();         assertEquals(0, result.size());     }     ])', 1), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[        assertNotNull(mockView);         assertTrue(mockView.hasCalledOnFinishInflate());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[ew = mActivity.findViewById(R.id.fit_windows);         assertFalse(view.isInTouchMode());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[de() {         View view = new View(mActivity);         assertFalse(view.isInEditMode());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[l         view = mActivity.findViewById(R.id.fit_windows);         view.postInvalidate();     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[      view.postInvalidate(10, 20, 30, 40);         view.postInvalidate(0, -20, -30, -40);     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[ view.postInvalidateDelayed(500, 0, 0, 100, 200);         view.postInvalidateDelayed(-1);     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[fit_windows);         assertTrue(view.post(action));         assertTrue(view.post(null));     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[tDelayed(action, 1000));         assertTrue(view.postDelayed(null, 0));     }      @UiThreadTest    ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[stants.NAVIGATION_DOWN);          // no way to assert the soundConstant be really played.     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[  mInstrumentation.sendKeySync(event);         assertTrue(view.hasCalledOnKeyShortcut());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[ent.KEYCODE_ENTER));         assertTrue(view.hasCalledOnKeyMultiple());     }      @UiThreadTest    ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[hortcutEvent(event);         assertTrue(view.hasCalledOnKeyShortcut());     }      @UiThreadTest    ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[ock_view);         view.setFocusable(true);          view.dispatchKeyShortcutEvent(null);     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[aitForIdleSync();         assertTrue(view.hasCalledOnTrackballEvent());     }      @UiThreadTest    ])', 1), ('([29:/android/view/cts/ViewTest.java]:[VIEW]:[29]:method_text:[.hasCalledOnTrackballEvent());         assertTrue(mockView2.hasCalledOnTrackballEvent());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[mentation.sendKeySync(event);          assertTrue(view.hasCalledDispatchUnhandledMove());     }     ])', 1), ('([41:/android/view/cts/ViewTest.java]:[VIEW]:[41]:method_text:[istener.fired()); // checks that both up and down were received         listener.reset();     }     ])', 1), ('([23:/android/view/cts/ViewTest.java]:[VIEW]:[23]:method_text:[ion.waitForIdleSync();         assertTrue(mockView.hasCalledOnWindowVisibilityChanged());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 1), ('([24:/android/view/cts/ViewTest.java]:[VIEW]:[24]:method_text:[Exception"");         } catch (NullPointerException e) {             // expected         }     }     ])', 1), ('([49:/android/view/cts/ViewTest.java]:[VIEW]:[49]:method_text:[r().removeOnPreDrawListener(this);                 return true;             }         });     }     ])', 1), ('([25:/android/view/cts/ViewTest.java]:[VIEW]:[25]:method_text:[         });         countDownLatch3.await(500, TimeUnit.MILLISECONDS);     }      @UiThreadTest    ])', 1), ('([57:/android/view/cts/ViewTest.java]:[VIEW]:[57]:method_text:[getValue().getKeyCode());         assertFalse(view.hasCalledOnKeyUp());     }      @UiThreadTest    ])', 1), ('([40:/android/view/cts/ViewTest.java]:[VIEW]:[40]:method_text:[ventTime(), 20 /*delta*/);         }          event1.recycle();         event2.recycle();     }     ])', 1), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[pareAndRecycleMotionEvents(upEvent, events.poll());         assertTrue(events.isEmpty());     }     ])', 1), ('([14:/android/view/cts/ViewTest.java]:[VIEW]:[14]:method_text:[         mInstrumentation.waitForIdleSync();         assertFalse(view.hasCalledOnDraw());     }     ])', 1), ('([21:/android/view/cts/ViewTest.java]:[VIEW]:[21]:method_text:[         mInstrumentation.waitForIdleSync();         assertFalse(view.hasCalledOnDraw());     }     ])', 1), ('([20:/android/view/cts/ViewTest.java]:[VIEW]:[20]:method_text:[         mInstrumentation.waitForIdleSync();         assertFalse(view.hasCalledOnDraw());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[ointerException"");         } catch (NullPointerException e) {         }     }      @UiThreadTest    ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[ view.clearFocus();         assertTrue(view.hasCalledOnFocusChanged());     }      @UiThreadTest    ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[y);         view.restoreDefaultFocus();         assertTrue(view.hasCalledRequestFocus());     }     ])', 1), ('([27:/android/view/cts/ViewTest.java]:[VIEW]:[27]:method_text:[(), view.getDrawableState()));         assertTrue(view.hasCalledOnCreateDrawableState());     }     ])', 1), ('([15:/android/view/cts/ViewTest.java]:[VIEW]:[15]:method_text:[      assertTrue(view.hasCalledDispatchWindowFocusChanged());          activity.finish();     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[    assertTrue(view.hasCalledOnDraw());         assertTrue(view.hasCalledDispatchDraw());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[sFocused());          view.requestFocusFromTouch();         assertTrue(view.isFocused());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[   assertEquals(new Rect(9, 8, 11, 11), grandParent.getLastRequestedChildRectOnScreen());     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[) interrupted! Test may fail!"", e);         }         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[Instrumentation, mActivityRule, view);         assertTrue(view.hasCalledOnTouchEvent());     }      ])', 1), ('([44:/android/view/cts/ViewTest.java]:[VIEW]:[44]:method_text:[vent());         assertFalse(view.isPressed());         verifyZeroInteractions(listener);     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[);         view.bringToFront();         assertTrue(mMockParent.hasBroughtChildToFront());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[.findViewById(R.id.fit_windows);         assertNotNull(view.getApplicationWindowToken());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[w view = new MockView(mActivity);         assertEquals(0, view.getBottomPaddingOffset());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[iew view = new MockView(mActivity);         assertEquals(0, view.getLeftPaddingOffset());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ew view = new MockView(mActivity);         assertEquals(0, view.getRightPaddingOffset());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[View view = new MockView(mActivity);         assertEquals(0, view.getTopPaddingOffset());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ckView(mActivity);         assertFalse(view.isPaddingOffsetRequired());     }      @UiThreadTest    ])', 1), ('([62:/android/view/cts/ViewTest.java]:[VIEW]:[62]:method_text:[ssertEquals(8, view.getPaddingRight());         assertEquals(0, view.getPaddingBottom());     }     ])', 1), (""([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[        // it's implementation detail         view.getWindowVisibleDisplayFrame(outRect);     }     ])"", 1), ('([22:/android/view/cts/ViewTest.java]:[VIEW]:[22]:method_text:[omInputMethod(mockView.getWindowToken(), 0));         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([43:/android/view/cts/ViewTest.java]:[VIEW]:[43]:method_text:[PointerSync(event);         assertTrue(fitWindowsView.isInTouchMode());     }      @UiThreadTest    ])', 1), ('([32:/android/view/cts/ViewTest.java]:[VIEW]:[32]:method_text:[to get the position of the Scrollbar to assert it is inside or outside.     }      @UiThreadTest    ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[        assertEquals(fadingLength, view.getVerticalFadingEdgeLength());     }      @UiThreadTest    ])', 1), ('([33:/android/view/cts/ViewTest.java]:[VIEW]:[33]:method_text:[assertEquals(-2, view.getScrollY());         assertTrue(view.hasCalledOnScrollChanged());     }     ])', 1), ('([19:/android/view/cts/ViewTest.java]:[VIEW]:[19]:method_text:[    assertEquals(fadingEdgeLength, view.getVerticalFadingEdgeLength());     }      @UiThreadTest    ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[ICATOR_START | View.SCROLL_INDICATOR_RIGHT,                 view.getScrollIndicators());      }     ])', 1), ('([63:/android/view/cts/ViewTest.java]:[VIEW]:[63]:method_text:[idth());         assertEquals(customScrollbarSize, view6.getHorizontalScrollbarHeight());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[artTemporaryDetach.get());         assertTrue(exitedDispatchFinishTemporaryDetach.get());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[view.hasCalledDispatchKeyEventPreIme());         assertTrue(view.hasCalledOnKeyPreIme());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[tor, view.performHapticFeedback(LONG_PRESS,                 FLAG_IGNORE_GLOBAL_SETTING));     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[view);             assertTrue(editText.hasCalledCheckInputConnectionProxy());         });     }     ])', 1), ('([22:/android/view/cts/ViewTest.java]:[VIEW]:[22]:method_text:[rify(touchListener, times(1)).onTouch(view, obscuredTouch);         reset(touchListener);     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[BackgroundTints() called before setBackground()"",                 bg.hasCalledSetTint());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[lled);         assertEquals(ActionMode.TYPE_PRIMARY, parent.startActionModeForChildType);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[ivity);          ActionMode mode = view.startActionMode(null);          assertNull(mode);     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[led);         assertEquals(ActionMode.TYPE_FLOATING, parent.startActionModeForChildType);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[e mode = view.startActionMode(null, ActionMode.TYPE_FLOATING);          assertNull(mode);     }     ])', 1), ('([22:/android/view/cts/ViewTest.java]:[VIEW]:[22]:method_text:[rent.setVisibility(View.VISIBLE));          assertTrue(mv.getLastAggregatedVisibility());     }     ])', 1), ('([40:/android/view/cts/ViewTest.java]:[VIEW]:[40]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());         return shadowBuilder;     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[n so that it does not affect other tests.             view.cancelDragAndDrop();         }     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[VIEW]:[10]:method_text:[n so that it does not affect other tests.             view.cancelDragAndDrop();         }     }     ])', 1), ('([22:/android/view/cts/ViewTest.java]:[VIEW]:[22]:method_text:[uInflater getMenuInflater() {                     return null;                 }             };     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[), 0.0f);         assertEquals(""Incorrect elevation"", offset, view.getElevation(), 0.0f);     }     ])', 1), ('([12:/android/view/cts/ViewTest.java]:[VIEW]:[12]:method_text:[Y(), 0.0f);         assertEquals(""Incorrect Z value"", offset + start, view.getZ(), 0.0f);     }     ])', 1), ('([23:/android/view/cts/ViewTest.java]:[VIEW]:[23]:method_text:[view.onHoverEvent(event);         assertFalse(view.isHovered());         event.recycle();     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[tScaleXNaN() {         View view = new View(mContext);         view.setScaleX(Float.NaN);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[         View view = new View(mContext);         view.setScaleX(Float.POSITIVE_INFINITY);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[         View view = new View(mContext);         view.setScaleX(Float.NEGATIVE_INFINITY);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[tScaleYNaN() {         View view = new View(mContext);         view.setScaleY(Float.NaN);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[         View view = new View(mContext);         view.setScaleY(Float.POSITIVE_INFINITY);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[VIEW]:[4]:method_text:[         View view = new View(mContext);         view.setScaleY(Float.NEGATIVE_INFINITY);     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[iew.getAlpha(), 0.0001f);         assertEquals(0.5f, view.getTransitionAlpha(), 0.0001f);     }     ])', 1), ('([11:/android/view/cts/ViewTest.java]:[VIEW]:[11]:method_text:[wColor());         assertEquals(Color.GREEN, greenShadow.getOutlineAmbientShadowColor());     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[VIEW]:[7]:method_text:[ix should reflect position on screen"",                 location[1], newValues[5], 0.001);     }     ])', 1), ('([13:/android/view/cts/ViewTest.java]:[VIEW]:[13]:method_text:[ view should be 10px above the second view"",                 -10, localValues[5], 0.001);     }     ])', 1), ('([27:/android/view/cts/ViewTest.java]:[VIEW]:[27]:method_text:[       assertEquals(100, view.getPivotY(), 0.0f);         assertFalse(view.isPivotSet());     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[VIEW]:[8]:method_text:[());         assertEquals(3, view.getRight());         assertEquals(4, view.getBottom());     }     ])', 1), ('([9:/android/view/cts/ViewTest.java]:[VIEW]:[9]:method_text:[) {             assertTrue(idSet.add(new View(mContext).getUniqueDrawingId()));         }     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[e);         assertEquals(Color.CYAN, ((ColorDrawable) verticalTrackDrawable).getColor());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[e);         assertEquals(Color.CYAN, ((ColorDrawable) verticalThumbDrawable).getColor());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[;         assertEquals(Color.CYAN, ((ColorDrawable) horizontalTrackDrawable).getColor());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[VIEW]:[5]:method_text:[;         assertEquals(Color.CYAN, ((ColorDrawable) horizontalThumbDrawable).getColor());     }     ])', 1), ('([16:/android/view/cts/ViewTest.java]:[VIEW]:[16]:method_text:[w.getVisibility());         assertTrue(mMockParent.hasRequestLayout());     }      @UiThreadTest    ])', 1), ('([106:/android/view/cts/ViewTest.java]:[VIEW]:[106]:method_text:[.class,         android.widget.ZoomButton.class,         android.widget.ZoomControls.class,     }; }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-14-1"	""	"[('android.content.cts.AvailableIntentsTest', 2), ('android.autofillservice.cts.SettingsIntentTest', 2)]"	""	"[('CtsContentTestCases', 2), ('CtsAutoFillServiceTestCases', 2)]"	""	"3.2.3.5/C-14-1"	"""C-14-1] MUST fully implement the AutofillService and AutofillManager APIs and honor the android.settings.REQUEST_SET_AUTOFILL_SERVICE intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user. If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics, they: """	"03020305.671401"	"REQUEST_SET_AUTOFILL_SERVICE android.settings.REQUEST"	""	""	""	"[('REQUEST_SET_AUTOFILL_SERVICE', 4)]"	""	"[('[android.content.cts.AvailableIntentsTest testRequestSetAutofillServiceIntent CtsContentTestCases]', 2), ('[android.autofillservice.cts.SettingsIntentTest testWarningShown_userRejectsByTappingBack CtsAutoFillServiceTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/SettingsIntentTest.java', 2)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/autofillservice/cts/SettingsIntentTest.java', 4)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));         assertCanBeHandled(intent);     }     ])', 2), ('([1:/android/autofillservice/cts/SettingsIntentTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                 .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));     } }])', 2)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-11-1"	""	"[('android.webkit.cts.WebSettingsTest', 52), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 6), ('android.webkit.cts.WebViewClientTest', 6), ('android.hardware.camera2.cts.CameraDeviceTest', 6), ('com.android.cts.deviceowner.SetTimeTest', 5), ('android.graphics.cts.TypefaceTest', 5), ('android.media.cts.MediaRoute2ProviderServiceTest', 4), ('android.admin.cts.DevicePolicyManagerTest', 4), ('android.database.cts.AbstractCursorTest', 4), ('android.server.wm.WindowInsetsAnimationImeTests', 3), ('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 3), ('com.android.cts.deviceandprofileowner.SetSystemSettingTest', 3), ('android.provider.cts.settings.Settings_SecureTest', 3), ('android.os.cts.WorkSourceTest', 2), ('android.hdmicec.cts.playback.HdmiCecDeviceOsdNameTest', 2), ('android.graphics.drawable.cts.VectorDrawableTest', 1), ('android.webkit.cts.PostMessageTest', 1), ('android.provider.cts.contacts.VoicemailContractTest', 1), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 1), ('android.contentcaptureservice.cts.CanaryTest', 1), ('android.appsecurity.cts.ApplicationVisibilityTest', 1), ('com.android.cts.devicepolicy.MixedDeviceOwnerTest', 1), ('android.cts.statsd.atom.HostAtomTests', 1), ('android.alarmmanager.cts.UidCapTests', 1), ('android.appsecurity.cts.AuthBoundKeyTest', 1), ('android.media.cts.EqualizerTest', 1), ('android.keystore.cts.KeyPairGeneratorTest', 1), ('android.content.res.cts.ResourcesTest', 1)]"	"[('getDevice', 37), ('setUp', 12), ('tearDown', 9), ('getInstrumentation', 4), ('getTargetContext', 3), ('getContext', 3), ('run', 3), ('close', 3), ('updateTitle', 3), ('setup', 2), ('getPackageManager', 2), ('getContentResolver', 2), ('never', 2), ('getResources', 1), ('getWindow', 1), ('getDecorView', 1), ('getUiAutomation', 1), ('getFloatingImeSettings', 1), ('Builder', 1), ('AccessibilityDumpOnFailureRule', 1), ('enableService', 1), ('assertHasService', 1), ('get', 1), ('setUpPackage', 1), ('myUserId', 1), ('saveTime', 1), ('restoreTime', 1), ('BroadcastReceiver', 1), ('countDown', 1), ('getWho', 1), ('getCacheDir', 1), ('toString', 1), ('BlockingStateCallback', 1), ('anyInt', 1), ('RouteCallback', 1), ('newSingleThreadExecutor', 1), ('build', 1), ('check', 1), ('getInstance', 1), ('alarmsCannotExceedLimit', 1), ('cancelAlarms', 1), ('clear', 1), ('deleteAlarmManagerConstants', 1), ('getSimpleName', 1), ('getReceiverComponent', 1), ('useInvalidatedAuthBoundKey', 1), ('InstallMultiple', 1), ('Object', 1), ('setupDatabase', 1), ('getNetworkImageHtml', 1)]"	"[('CtsWebkitTestCases', 59), ('CtsGraphicsTestCases', 6), ('CtsCameraTestCases', 6), ('CtsMediaTestCases', 5), ('CtsProviderTestCases', 4), ('CtsAdminTestCases', 4), ('CtsDatabaseTestCases', 4), ('CtsWindowManagerDeviceTestCases', 3), ('CtsInputMethodTestCases', 3), ('CtsOsHostTestCases', 2), ('CtsAccessibilityServiceTestCases', 1), ('CtsContentCaptureServiceTestCases', 1), ('CtsAlarmManagerTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsContentTestCases', 1)]"	""	"3.2.3.5/C-11-1"	"""C-11-1] MUST have an activity that handles the Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS intent but MAY implement it as a no-op. If device implementations declare the support for camera via android.hardware.camera.any they: """	"03020305.671101"	"TINGS android.hardware.camera.any Settings.ACTION ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET"	""	""	""	"[('TINGS', 121)]"	""	"[('[android.os.cts.WorkSourceTest testAddWsUnordered CtsOsHostTestCases]', 1), ('[android.os.cts.WorkSourceTest testCombineMultiSomeSameUidsNames CtsOsHostTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testZeroInsetsImeAnimates CtsWindowManagerDeviceTestCases]', 1), ('[android.hdmicec.cts.playback.HdmiCecDeviceOsdNameTest cect_11_2_11_1a_GiveOsdNameTest None]', 1), ('[android.hdmicec.cts.playback.HdmiCecDeviceOsdNameTest cect_11_2_11_1b_UpdateAndGiveOsdNameTest None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testResetPasswordDeprecated None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testIsDeviceOrganizationOwnedWithManagedProfile None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[android.webkit.cts.PostMessageTest PostMessageTest CtsWebkitTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testStatusTable CtsProviderTestCases]', 1), ('[android.contentcaptureservice.cts.CanaryTest isTrue CtsContentCaptureServiceTestCases]', 1), ('[com.android.cts.deviceandprofileowner.SetSystemSettingTest testSetBrightness None]', 1), ('[com.android.cts.deviceandprofileowner.SetSystemSettingTest testSetSystemSettingsFailsForNonWhitelistedSettings None]', 1), ('[android.provider.cts.settings.Settings_SecureTest assertSettingsForTests CtsProviderTestCases]', 1), ('[android.provider.cts.settings.Settings_SecureTest testUnknownSourcesOnByDefault CtsProviderTestCases]', 1), ('[android.provider.cts.settings.Settings_SecureTest testBluetoothAddressNotAvailable CtsProviderTestCases]', 1), ('[android.webkit.cts.WebViewClientTest WebViewClientTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testShouldOverrideUrlLoading CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testShouldOverrideUrlLoadingOnCreateWindow CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testOnFormResubmission CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testShouldInterceptRequestResponse CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testOnSafeBrowsingHitBackToSafety CtsWebkitTestCases]', 1), ('[com.android.cts.devicepolicy.MixedDeviceOwnerTest testDelegatedCertInstallerDeviceIdAttestation None]', 1), ('[com.android.cts.deviceowner.SetTimeTest currentTimeMillis None]', 1), ('[com.android.cts.deviceowner.SetTimeTest testSetTime None]', 1), ('[com.android.cts.deviceowner.SetTimeTest testSetTimeFailWithAutoTimeOn None]', 1), ('[com.android.cts.deviceowner.SetTimeTest testSetTimeZone None]', 1), ('[com.android.cts.deviceowner.SetTimeTest testSetTimeZoneFailWithAutoTimezoneOn None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDevicePreviewTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRecordingTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceZSLTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice CtsCameraTestCases]', 1), ('[android.media.cts.MediaRoute2ProviderServiceTest finishActivity CtsMediaTestCases]', 1), ('[android.media.cts.MediaRoute2ProviderServiceTest testGetSessionInfoAndGetAllSessionInfo CtsMediaTestCases]', 1), ('[android.media.cts.MediaRoute2ProviderServiceTest testSessionRelatedCallbacks CtsMediaTestCases]', 1), ('[android.media.cts.MediaRoute2ProviderServiceTest testNotifySessionReleased CtsMediaTestCases]', 1), ('[android.cts.statsd.atom.HostAtomTests testWifiActivityInfo None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetGlobalSetting_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failForInstallNonMarketApps CtsAdminTestCases]', 1), ('[android.media.cts.EqualizerTest test1_3Properties CtsMediaTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[android.graphics.cts.TypefaceTest testTypefaceBuilder_AssetSource CtsGraphicsTestCases]', 1), ('[android.graphics.cts.TypefaceTest testTypefaceBuilder_FileSource CtsGraphicsTestCases]', 1), ('[android.graphics.cts.TypefaceTest testFontVariationSettings CtsGraphicsTestCases]', 1), ('[android.graphics.cts.TypefaceTest testFontVariationSettings_UnsupportedAxes CtsGraphicsTestCases]', 1), ('[android.graphics.cts.TypefaceTest testFontVariationSettings_OutOfRangeValue CtsGraphicsTestCases]', 1), ('[android.database.cts.AbstractCursorTest exists CtsDatabaseTestCases]', 1), ('[android.database.cts.AbstractCursorTest testSetNotificationUri CtsDatabaseTestCases]', 1), ('[android.database.cts.AbstractCursorTest testSetNotificationUris_selfNotify CtsDatabaseTestCases]', 1), ('[android.database.cts.AbstractCursorTest testGetNotificationUris CtsDatabaseTestCases]', 1), ('[android.content.res.cts.ResourcesTest testGetFont_xmlFileWithVariationSettings CtsContentTestCases]', 1), ('[android.webkit.cts.WebSettingsTest WebSettingsTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testUserAgentString_default CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessUserAgentString CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessAllowFileAccess CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_defaultValue CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_cacheElseNetwork CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_noCache CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_cacheOnly CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCursiveFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessFantasyFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessFixedFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessSansSerifFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessSerifFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessStandardFontFamily CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessDefaultFontSize CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessDefaultFixedFontSize CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessDefaultTextEncodingName CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessJavaScriptCanOpenWindowsAutomatically CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessJavaScriptEnabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessLayoutAlgorithm CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessMinimumFontSize CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessMinimumLogicalFontSize CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessPluginsEnabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testOffscreenPreRaster CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessPluginsPath CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessTextSize CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessUseDoubleTree CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessUseWideViewPort CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testSetNeedInitialFocus CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testSetRenderPriority CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessSupportMultipleWindows CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessSupportZoom CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessBuiltInZoomControls CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAppCacheDisabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAppCacheEnabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testDatabaseDisabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testDisabledActionModeMenuItems CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_default CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_httpImagesLoaded CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_dataUriImagesLoaded CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_blockLoadingImages CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_loadImagesWithoutReload CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testBlockNetworkImage CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testBlockNetworkLoads CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testLocalImageLoads CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testIframesWhenAccessFromFileURLsEnabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testIframesWhenAccessFromFileURLsDisabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testXHRWhenAccessFromFileURLsDisabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAllowMixedMode CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testEnableSafeBrowsing CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testForceDark_default CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testForceDark_rendersDark CtsWebkitTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 52), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewClientTest.java', 6), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/TypefaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRoute2ProviderServiceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/AbstractCursorTest.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_SecureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/WorkSourceTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/VectorDrawableTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/PostMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/contacts/VoicemailContractTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/CanaryTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/HostAtomTests.java', 1), ('/home/gpoor/cts-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/UidCapTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AuthBoundKeyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EqualizerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 1)]"	"[('/android/webkit/cts/WebSettingsTest.java', 53), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 7), ('/android/webkit/cts/WebViewClientTest.java', 7), ('/android/hardware/camera2/cts/CameraDeviceTest.java', 7), ('/com/android/cts/deviceowner/SetTimeTest.java', 6), ('/android/graphics/cts/TypefaceTest.java', 6), ('/android/media/cts/MediaRoute2ProviderServiceTest.java', 5), ('/android/admin/cts/DevicePolicyManagerTest.java', 5), ('/android/database/cts/AbstractCursorTest.java', 5), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 4), ('/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 4), ('/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java', 4), ('/android/provider/cts/settings/Settings_SecureTest.java', 4), ('/android/os/cts/WorkSourceTest.java', 3), ('/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java', 3), ('/android/graphics/drawable/cts/VectorDrawableTest.java', 2), ('/android/webkit/cts/PostMessageTest.java', 2), ('/android/provider/cts/contacts/VoicemailContractTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/android/contentcaptureservice/cts/CanaryTest.java', 2), ('/android/appsecurity/cts/ApplicationVisibilityTest.java', 2), ('/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 2), ('/android/cts/statsd/atom/HostAtomTests.java', 2), ('/android/alarmmanager/cts/UidCapTests.java', 2), ('/android/appsecurity/cts/AuthBoundKeyTest.java', 2), ('/android/media/cts/EqualizerTest.java', 2), ('/android/keystore/cts/KeyPairGeneratorTest.java', 2), ('/android/content/res/cts/ResourcesTest.java', 2)]"	"[('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[that javascript cross-domain request permissions matches file domain settings     // for iframes    ])', 2), ('([6:/android/os/cts/WorkSourceTest.java]:[TINGS]:[6]:method_text:[              makeStringArray(expected), makeStringArray(newbs), makeStringArray(gones));     }     ])', 1), ('([3:/android/os/cts/WorkSourceTest.java]:[TINGS]:[3]:method_text:[keStringArray(lhs), makeStringArray(rhs),                 makeStringArray(result), diff);     }     ])', 1), ('([2:/android/graphics/drawable/cts/VectorDrawableTest.java]:[TINGS]:[2]:method_text:[InstrumentationRegistry.getTargetContext();         mResources = mContext.getResources();     }     ])', 1), ('([4:/android/server/wm/WindowInsetsAnimationImeTests.java]:[TINGS]:[4]:method_text:[ViewHeight(KEYBOARD_HEIGHT)                                 .setDrawsBehindNavBar(true));     }     ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[TINGS]:[1]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([4:/android/server/wm/WindowInsetsAnimationImeTests.java]:[TINGS]:[4]:method_text:[// to ensure it.         builder.setNavigationBarColor(Color.BLACK);         return builder;     } }])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java]:[TINGS]:[1]:method_text:[GIVE_OSD_NAME> with a <SET_OSD_NAME> that has the updated device name in the parameters.      */    ])', 1), ('([3:/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java]:[TINGS]:[3]:method_text:[Tests that the device does not respond to a <GIVE_OSD_NAME> from an unregistered device.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[ new UnlockScreenRule();      private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);     ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[able window hosted by a different process      * temporarily becomes the focused window.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[Matcher() {         return event -> TextUtils.equals(""onFinishInput"", event.getEventName());     } }])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[n app, that tries to set wallpaper.     // Non-admin apps must not violate any user restriction.    ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[4]:method_text:[teDeviceTestMethod("".LockTaskHostDrivenTest"", ""testCleanupLockTask_noAsserts"");         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[iceTestMethod("".ResetPasswordTest"", ""testResetPasswordDeprecated"");     }      @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ ""testCallingIsOrganizationOwnedWithManagedProfileExpectingFalse"");     }      @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[and(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[TINGS]:[1]:method_text:[ng-webview-cts.      */     // Post a string message to main frame and make sure it is received.    ])', 1), ('([14:/android/provider/cts/contacts/VoicemailContractTest.java]:[TINGS]:[14]:method_text:[d, null, null, null);         assertEquals(0, cursor.getCount());         cursor.close();     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[TINGS]:[1]:method_text:[to disable it.         mService = mMagnificationAccessibilityServiceRule.enableService();     }     ])', 1), ('([5:/android/contentcaptureservice/cts/CanaryTest.java]:[TINGS]:[5]:method_text:[ty (settings=\'%s\')"",                 serviceName, enableSettings).that(hasService).isTrue();     } }])', 1), ('([3:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[TINGS]:[3]:method_text:[mand(""settings put global package_verifier_enable ""                 + mOldVerifierValue);     }     ])', 1), ('([5:/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java]:[TINGS]:[5]:method_text:[ext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS,         UserHandle.myUserId()));   }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java]:[TINGS]:[4]:method_text:[nessWithValue(TEST_BRIGHTNESS_1);        testSetBrightnessWithValue(TEST_BRIGHTNESS_2);     }   }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java]:[TINGS]:[3]:method_text:[ception."");     } catch (SecurityException e) {       // Should throw SecurityException.     }   } }])', 1), ('([8:/android/provider/cts/settings/Settings_SecureTest.java]:[TINGS]:[8]:method_text:[\'s value for later tests."");         } catch (NumberFormatException expected) {         }     }     ])', 1), ('([2:/android/provider/cts/settings/Settings_SecureTest.java]:[TINGS]:[2]:method_text:[privileged apps, such as the CTS test app in the context of which this test      * runs.      */    ])', 1), ('([6:/android/provider/cts/settings/Settings_SecureTest.java]:[TINGS]:[6]:method_text:[   fail(""Settings.Secure contains "" + name + "": "" + c.getString(2));             }         }     } }])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[1]:method_text:[difying-webview-cts.      */     // Verify that the shouldoverrideurlloading is false by default    ])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[1]:method_text:[oading called on webview called via onCreateWindow     // TODO(sgurun) upstream this test to Aw.    ])', 1), ('([4:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[4]:method_text:["" +                         ""console.log(\'element with id ["" + linkId + ""] clicked\');""));     }     ])', 1), ('([4:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[4]:method_text:[       return webViewClient.hasOnFormResubmissionCalled();             }         }.run();     }     ])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[1]:method_text:[ver.shutdown();         }     }      // Verify that OnRenderProcessGone returns false by default    ])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[TINGS]:[1]:method_text:[ould be reflected in that test as necessary. See      * http://go/modifying-webview-cts.      */    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[TINGS]:[1]:method_text:[eKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId));     }      @FlakyTest     @Override    ])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:[* 1000);         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:["");         testSetTimeWithValue(TEST_TIME_1);         testSetTimeWithValue(TEST_TIME_2);     }     ])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:[       }         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([2:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[2]:method_text:[ePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""1"");         }     }     ])', 1), ('([3:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[3]:method_text:[;          mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""1"");      } }])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[ure the stable frame rate is guaranteed for the given      * settings.</li>      * </ul>      */    ])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[takes priority to the stable      * frame rate for the given settings.</li>      * </ul>      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[1]:method_text:[ettings should maximize image quality      * without compromising stable frame rate.</p>      */    ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[2]:method_text:[posure, sensitivity, and so on) are      * set to reasonable defaults.</li>      * </ul>      */    ])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[     /**      * Verify audio restrictions are set properly for single CameraDevice usage      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                 cam1Cb = null;             }         }     }     ])', 1), ('([1:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[1]:method_text:[(mService != null) {             mService.clear();             mService = null;         }     }     ])', 1), ('([4:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[4]:method_text:[e.getAllSessionInfo().size());         assertNull(mService.getSessionInfo(SESSION_ID_2));     }     ])', 1), ('([11:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[11]:method_text:[HintsListener(null);             releaseControllers(mRouter2.getControllers());         }     }     ])', 1), ('([2:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[TINGS]:[2]:method_text:[(transferCallback);             releaseControllers(mRouter2.getControllers());         }     }      ])', 1), ('([1:/android/cts/statsd/atom/HostAtomTests.java]:[TINGS]:[1]:method_text:[assertThat(atom.getWifiActivityInfo().getControllerEnergyUsed()).isAtLeast(0L);         }     }     ])', 1), ('([2:/android/alarmmanager/cts/UidCapTests.java]:[TINGS]:[2]:method_text:[ts() {         SystemUtil.runShellCommand(""settings delete global alarm_manager_constants"");     } }])', 1), ('([2:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[2]:method_text:[             mPackageManager.hasSystemFeature(PackageManager.FEATURE_SECURE_LOCK_SCREEN);     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[h (SecurityException e) {             assertDeviceOwnerMessage(e.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[ (SecurityException e) {             assertProfileOwnerMessage(e.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[h (UnsupportedOperationException exc) {             // Supposed to throw. Pass.         }     }     ])', 1), ('([5:/android/appsecurity/cts/AuthBoundKeyTest.java]:[TINGS]:[5]:method_text:[           getDevice().executeShellCommand(""cmd lock_settings clear --old 12345"");         }     } }])', 1), ('([13:/android/media/cts/EqualizerTest.java]:[TINGS]:[13]:method_text:[izer();         }     }      //Test case 1.4: test setBandLevel() throws exception after release    ])', 1), ('([2:/android/keystore/cts/KeyPairGeneratorTest.java]:[TINGS]:[2]:method_text:[ mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");         mKeyStore.load(null, null);     }     ])', 1), ('([2:/android/graphics/cts/TypefaceTest.java]:[TINGS]:[2]:method_text:[e5, typeface6);          // TODO: Add ttc index case. Need TTC file for CTS. (b/36731640)     }     ])', 1), ('([1:/android/graphics/cts/TypefaceTest.java]:[TINGS]:[1]:method_text:[S.         } catch (IOException e) {             throw new RuntimeException(e);         }     }     ])', 1), ('([5:/android/graphics/cts/TypefaceTest.java]:[TINGS]:[5]:method_text:[ttings(""\'wght\' 550"").build());         assertEquals(55.0f, paint.measureText(""a""), 0.0f);     }     ])', 1), ('([3:/android/graphics/cts/TypefaceTest.java]:[TINGS]:[3]:method_text:[th\' 10, \'wght\' 300"").build());         assertEquals(30.0f, paint.measureText(""a""), 0.0f);     }     ])', 1), ('([3:/android/graphics/cts/TypefaceTest.java]:[TINGS]:[3]:method_text:[ings(""\'wght\' 1300"").build());         assertEquals(100.0f, paint.measureText(""a""), 0.0f);     }     ])', 1), ('([1:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[1]:method_text:[eFile.exists()) {             mDatabaseFile.delete();         }         super.tearDown();     }     ])', 1), ('([2:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[2]:method_text:[tionUri(getInstrumentation().getContext().getContentResolver(),                 testUri);     }     ])', 1), ('([5:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[5]:method_text:[testUri2, null);         observer.waitForOnChange(ON_CHANGE_TIMEOUT_MS);     }      @AppModeFull    ])', 1), ('([4:/android/database/cts/AbstractCursorTest.java]:[TINGS]:[4]:method_text:[  Assert.assertArrayEquals(notificationUris, actualNotificationUris.toArray(new Uri[0]));     }     ])', 1), ('([4:/android/content/res/cts/ResourcesTest.java]:[TINGS]:[4]:method_text:[ypeface2);         assertEquals(getLargerTypeface(""-"", typeface1, typeface2), typeface2);     }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[>.<minor>      * Chrome/<major>.<minor>.<branch>.<build>[ Mobile] Safari/<major>.<minor>      */    ])', 1), (""([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[erifies that the useragent testing regex is actually correct, because it's very complex.      */    ])"", 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[AndWaitForCompletion(url);         assertEquals(customUserAgent, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[with file access disabled"",                 dataDirTitle.equals(mOnUiThread.getTitle()));     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[Sync();         Thread.sleep(100); // Wait for open to be received on the icon db thread.     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[hing resource"",                 requestCountAfterSecondLoad, requestCountAfterFirstLoad);     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d of caching"",                 requestCountAfterSecondLoad > requestCountAfterFirstLoad);     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[ of fetching resource"",                 requestCountAfterFirstLoad, initialRequestCount);     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewCusiveFamily);         assertEquals(newCusiveFamily, mSettings.getCursiveFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[FantasyFamily);         assertEquals(newFantasyFamily, mSettings.getFantasyFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newFixedFamily);         assertEquals(newFixedFamily, mSettings.getFixedFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewFixedFamily);         assertEquals(newFixedFamily, mSettings.getSansSerifFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newSerifFamily);         assertEquals(newSerifFamily, mSettings.getSerifFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ndardFamily);         assertEquals(newStandardFamily, mSettings.getStandardFontFamily());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setDefaultFontSize(10);         assertEquals(10, mSettings.getDefaultFontSize());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[tDefaultFixedFontSize(10);         assertEquals(10, mSettings.getDefaultFixedFontSize());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[dingName);         assertEquals(newEncodingName, mSettings.getDefaultTextEncodingName());     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[Url(TestHtmlConstants.POPUP_URL));         WebkitUtils.waitForFuture(createWindowFuture);     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[  return ""javascript off"".equals(mOnUiThread.getTitle());             }         }.run();      }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ assertEquals(WebSettings.LayoutAlgorithm.SINGLE_COLUMN, mSettings.getLayoutAlgorithm());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setMinimumFontSize(10);         assertEquals(10, mSettings.getMinimumFontSize());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[imumLogicalFontSize(10);         assertEquals(10, mSettings.getMinimumLogicalFontSize());     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[tings.setOffscreenPreRaster(true);         assertTrue(mSettings.getOffscreenPreRaster());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[nPath);         assertEquals(""Plugin path always empty"", """", mSettings.getPluginsPath());     }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ize(TextSize.SMALLEST);         assertEquals(TextSize.SMALLEST, mSettings.getTextSize());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[         assertFalse(""setUseDoubleTree should be a no-op"", mSettings.getUseDoubleTree());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[  mSettings.setUseWideViewPort(true);         assertTrue(mSettings.getUseWideViewPort());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[      mSettings.setNeedInitialFocus(false);          mSettings.setNeedInitialFocus(true);     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[erPriority.LOW);          mSettings.setRenderPriority(WebSettings.RenderPriority.NORMAL);     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[.setSupportMultipleWindows(true);         assertTrue(mSettings.supportMultipleWindows());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[;          mSettings.setSupportZoom(false);         assertFalse(mSettings.supportZoom());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ngs.setBuiltInZoomControls(true);         assertTrue(mSettings.getBuiltInZoomControls());     }     ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[ccur.         Thread.sleep(1000);         assertEquals(""Loaded"", mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[res creating a     // webChromeClient and listening to Quota callbacks, which is not documented.    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([9:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[9]:method_text:[ms(i);             assertEquals(i, mSettings.getDisabledActionModeMenuItems());         }     }     ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[           return;         }         assertTrue(mSettings.getLoadsImagesAutomatically());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[, ""text/html"", null);         assertEquals(NETWORK_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ ""text/html"", null);         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ML, ""text/html"", null);         assertEquals(EMPTY_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[tForNonEmptyImage();         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ ""text/html"", null);         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d.getTitle());     }      // Verify that an image in local file system can be loaded by an asset    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[     // Verify that enabling file access from file URLs enable XmlHttpRequest (XHR) across files    ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[ename, Context.MODE_PRIVATE);         fos.write(content.getBytes());         fos.close();     }     ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ram.put(pixel, histogram.getOrDefault(pixel, 0) + 1);         }         return histogram;     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[          params.width = width;             webView.setLayoutParams(params);         });      }     ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[e assertions.             WebkitUtils.waitForNextQueueElement(mReceivedIconQueue);         }     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-7-1"	""	"[('android.systemintents.cts.TestSystemIntents', 1)]"	"[('create', 1), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('getPackageManager', 1)]"	"[('CtsSystemIntentTestCases', 1)]"	""	"3.2.3.5/C-7-1"	"""C-7-1] MUST provide a user-accessible mechanism to add and configure third-party input methods in response to the android.settings.INPUT_METHOD_SETTINGS intent. If device implementations support third-party accessibility services, they: """	"03020305.670701"	"android.settings.INPUT INPUT_METHOD_SETTINGS"	""	""	""	"[('INPUT_METHOD_SETTINGS', 1)]"	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1)]"	"[('/android/systemintents/cts/TestSystemIntents.java', 2)]"	"[('([1:/android/systemintents/cts/TestSystemIntents.java]:[INPUT_METHOD_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-13-2"	""	"[('com.android.cts.managedprofile.ProvisioningTest', 4), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 2), ('com.android.cts.managedprofile.PreManagedProfileTest', 2), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 2), ('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 2), ('com.android.cts.deviceowner.DeviceOwnerProvisioningTest', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 1), ('com.android.cts.profileowner.ManagementTest', 1), ('com.android.cts.comp.ManagementTest', 1)]"	"[('setUp', 5), ('getName', 2), ('getContext', 2), ('getSimpleName', 2), ('getPackage', 1), ('getTargetContext', 1), ('getPackageManager', 1)]"	""	""	"3.2.3.5/C-13-2"	"""C-13-2] MUST honor the intents android.app.action.ADMIN_POLICY_COMPLIANCE, android.app.action.GET_PROVISIONING_MODE, android.app.action.PROVISIONING_SUCCESSFUL, android.app.action.PROVISION_MANAGED_DEVICE, android.app.action.PROVISION_MANAGED_PROFILE, android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD, android.app.action.SET_NEW_PASSWORD & android.app.action.START_ENCRYPTION and have an activity to provide fulfillment for these intents as described in SDK here. If device implementations declare the android.software.autofill feature flag, they: """	"03020305.671302"	"android.app.action.ADMIN GET_PROVISIONING_MODE SET_NEW_PASSWORD START_ENCRYPTION android.app.action.START android.app.action.PROVISIONING PROVISION_MANAGED_PROFILE android.app.action.SET PROVISIONING_SUCCESSFUL PROVISION_MANAGED_DEVICE android.software.autofill android.app.action.PROVISION android.app.action.GET ADMIN_POLICY_COMPLIANCE SET_NEW_PARENT_PROFILE_PASSWORD"	""	""	""	"[('PROVISION_MANAGED_PROFILE', 13), ('PROVISION_MANAGED_DEVICE', 3), ('PROVISIONING_SUCCESSFUL', 2), ('android.software.autofill', 1)]"	""	"[('[com.android.cts.managedprofile.ProvisioningTest PersistableBundle None]', 2), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None]', 1), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testCannotAddManagedProfileViaManagedProvisioning None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedTrue None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.profileowner.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[com.android.cts.comp.provisioning.ManagedProfileProvisioningTest testProvisioningCorpOwnedManagedProfile None]', 1), ('[com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest testManagedProfileProvisioning None]', 1), ('[com.android.cts.comp.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[com.android.cts.deviceowner.DeviceOwnerProvisioningTest getSystemPackageNameList None]', 1), ('[com.android.cts.deviceowner.DeviceOwnerProvisioningTest testProvisionDeviceOwner_withAllSystemAppsEnabled None]', 1), ('[com.android.cts.managedprofile.ProvisioningTest testAccountNotExist None]', 1), ('[com.android.cts.managedprofile.ProvisioningTest testVerifySuccessfulIntentWasReceived None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java', 1)]"	"[('/com/android/cts/managedprofile/ProvisioningTest.java', 6), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 4), ('/com/android/cts/managedprofile/PreManagedProfileTest.java', 3), ('/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 3), ('/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 3), ('/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 3), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2), ('/com/android/cts/profileowner/ManagementTest.java', 2), ('/com/android/cts/comp/ManagementTest.java', 2)]"	"[('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[olicyManager.isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                 ""testDisallowAutofill_allowed"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[().uninstallPackage(SINGLE_ADMIN_PKG);         }         super.tearDown();     }      @FlakyTest    ])', 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with      * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.      */    ])"", 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     } }])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {     private static final String TAG = ""ManagedProfileProvisioningTest"";     ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {         return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);     } }])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);         assertTrue(provisioningMgr.startProvisioningAndWait(intent));     } }])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[d tearDown() throws Exception {         enableUninstalledApp();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[pInfo) -> appInfo.packageName)                 .sorted()                 .collect(toList());     } }])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ext context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[ences(mContext).getBoolean(KEY_PROVISIONING_SUCCESSFUL_RECEIVED,                 false));     }     ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-12-1"	""	"[('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.content.cts.AvailableIntentsTest', 1)]"	"[('setUp', 4), ('getInstrumentation', 2), ('getContext', 2)]"	"[('CtsContentTestCases', 1)]"	""	"3.2.3.5/C-12-1"	"""C-12-1] MUST honor the android.media.action.STILL_IMAGE_CAMERA and android.media.action.STILL_IMAGE_CAMERA_SECURE intent and launch the camera in still image mode as described in the SDK. """	"03020305.671201"	"STILL_IMAGE_CAMERA STILL_IMAGE_CAMERA_SECURE android.media.action.STILL"	""	""	""	"[('STILL_IMAGE_CAMERA', 2), ('STILL_IMAGE_CAMERA_SECURE', 1)]"	""	"[('[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1)]"	"[('/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we      * fix targets that are out of compliance.      */    ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-15-1"	""	"[('android.content.cts.AvailableIntentsTest', 2), ('android.cts.statsd.atom.AtomTestCase', 1), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1)]"	"[('setUp', 2), ('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('hashCode', 1), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]"	"[('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-15-1"	"""C-15-1] MUST still have an activity that handles the android.settings.ACTION_USAGE_ACCESS_SETTINGS intent pattern but MUST implement it as a no-op, that is to have an equivalent behavior as when the user is declined for access. If device implementations report the feature android.hardware.audio.output, they: """	"03020305.671501"	"android.hardware.audio.output android.settings.ACTION ACTION_USAGE_ACCESS_SETTINGS"	""	""	""	"[('ACTION_USAGE_ACCESS_SETTINGS', 2), ('android.hardware.audio.output', 1), ('android.settings.ACTION', 1)]"	""	"[('[android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases]', 2), ('[android.cts.statsd.atom.AtomTestCase getReportList None]', 1), ('[com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/AtomTestCase.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 1)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/cts/statsd/atom/AtomTestCase.java', 2), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_USAGE_ACCESS_SETTINGS]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));         }     }     ])', 2), ('([1:/android/cts/statsd/atom/AtomTestCase.java]:[android.hardware.audio.output]:[1]:method_text:[estamp is not truncated"")                 .that(timestampNs % fiveMinutesInNs).isEqualTo(0);     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACTION]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-3-2"	""	"[('android.content.cts.AvailableIntentsTest', 4), ('com.android.cts.devicepolicy.BaseManagedProfileTest', 1), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1)]"	"[('setUp', 2), ('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]"	"[('CtsContentTestCases', 4)]"	""	"3.2.3.5/C-3-2"	"""C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK. If device implementations report android.hardware.nfc, they: """	"03020305.670302"	"android.hardware.nfc ACTION_CHANGE_DEFAULT android.nfc.cardemulation.action.ACTION"	""	""	""	"[('ACTION_CHANGE_DEFAULT', 5), ('android.hardware.nfc', 1)]"	""	"[('[android.content.cts.AvailableIntentsTest testChangeDefaultSmsApplication CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testChangeDefaultDialer CtsContentTestCases]', 2), ('[com.android.cts.devicepolicy.BaseManagedProfileTest removeTestUsers None]', 1), ('[com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseManagedProfileTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 1)]"	"[('/android/content/cts/AvailableIntentsTest.java', 6), ('/com/android/cts/devicepolicy/BaseManagedProfileTest.java', 2), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT));         }     }     ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(TelecomManager.ACTION_CHANGE_DEFAULT_DIALER));         }     }     ])', 2), ('([1:/com/android/cts/devicepolicy/BaseManagedProfileTest.java]:[android.hardware.nfc]:[1]:method_text:[ for command "" + command + "": ""                 + getDevice().executeShellCommand(command));     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-5-1"	""	"[('android.content.cts.AvailableIntentsTest', 2)]"	""	"[('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-5-1"	"""C-5-1] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_ENABLE’ intent and show a system activity to allow the user to turn on Bluetooth. """	"03020305.670501"	"android.bluetooth.adapter.action.REQUEST REQUEST_ENABLE"	""	""	""	"[('REQUEST_ENABLE', 2)]"	""	"[('[android.content.cts.AvailableIntentsTest testRequestEnableContentCaptureIntent CtsContentTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_ENABLE]:[1]:method_text:[tent(Settings.ACTION_REQUEST_ENABLE_CONTENT_CAPTURE);         assertCanBeHandled(intent);     }     ])', 2)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-8-1"	""	"[('android.content.cts.AvailableIntentsTest', 4), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 2), ('com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity', 1)]"	"[('addIntentsThatDependOnDeviceConfigs', 4), ('addIntentsThatDependOnDeviceFeatures', 4), ('getPackageManager', 4), ('checkIntentForwardingFromPrimary', 4), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 4), ('supportsMultipleUsers', 2), ('getExternalStorageState', 2), ('checkIntentForwardingFromManaged', 2)]"	"[('CtsContentTestCases', 4), ('CtsAccessibilityServiceTestCases', 2)]"	""	"3.2.3.5/C-8-1"	"""C-8-1] MUST honor the android.settings.ACCESSIBILITY_SETTINGS intent to provide a user-accessible mechanism to enable and disable the third-party accessibility services alongside the preloaded accessibility services. If device implementations include support for Wi-Fi Easy Connect and expose the functionality to third-party apps, they: """	"03020305.670801"	"ACCESSIBILITY_SETTINGS android.settings.ACCESSIBILITY"	""	""	""	"[('ACCESSIBILITY_SETTINGS', 8), ('android.settings.ACCESSIBILITY', 1)]"	""	"[('[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testChangePhoneAccounts CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testShowCallAccessibilitySettings CtsContentTestCases]', 2), ('[com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None]', 2), ('[com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity setPassFailButtonClickListeners None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 1)]"	"[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 4), ('/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 2)]"	"[('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESSIBILITY_SETTINGS]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";         assertTrue(message, !resolvedActivities.isEmpty());     } } ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ON_SHOW_CALL_ACCESSIBILITY_SETTINGS, it will display the call accessibility preferences.      */    ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ }      /**      * Test ACTION_SHOW_CALL_SETTINGS, it will display the call preferences.      */    ])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[tExtra(PolicyTransparencyTestListActivity.EXTRA_MODE, mMode);         startActivity(intent);     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACCESSIBILITY]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-13-1"	""	"[('android.admin.cts.DeviceAdminActivationTest', 2)]"	"[('getSimpleName', 1)]"	"[('CtsAdminTestCases', 2)]"	""	"3.2.3.5/C-13-1"	"""C-13-1] MUST honor the intent android.app.action.ADD_DEVICE_ADMIN to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it). """	"03020305.671301"	"android.app.action.ADD ADD_DEVICE_ADMIN"	""	""	""	"[('ADD_DEVICE_ADMIN', 2)]"	""	"[('[android.admin.cts.DeviceAdminActivationTest DeviceAdminActivationTest CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails CtsAdminTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 2)]"	"[('/android/admin/cts/DeviceAdminActivationTest.java', 3)]"	"[('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();         } finally {             super.tearDown();         }     }     ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-9-1"	""	"[('android.content.cts.AvailableIntentsTest', 2)]"	""	"[('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-9-1"	"""C-9-1] MUST implement the Settings#ACTION_PROCESS_WIFI_EASY_CONNECT_URI Intent APIs as described in the SDK documentation. If device implementations provide the data saver mode, they: *"""	"03020305.670901"	"ACTION_PROCESS_WIFI_EASY_CONNECT_URI"	""	""	""	"[('ACTION_PROCESS_WIFI_EASY_CONNECT_URI', 2)]"	""	"[('[android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_PROCESS_WIFI_EASY_CONNECT_URI]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));             assertCanBeHandled(intent);         }     }     ])', 2)]"	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-1"	""	""	""	""	""	"3.8.16/H-1-1"	""">3.8.16/H-1-1] MUST declare the feature flag android.software.controls and set it to true. [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720101"	"android.software.controls"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-2"	""	""	""	""	""	"3.8.16/H-1-2"	""">3.8.16/H-1-2] MUST provide a user affordance with the ability to add, edit, select, and operate the user’s favorite device controls from the controls registered by the third-party applications through the ControlsProviderService and the Control APIs. [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-3"	""	""	""	""	""	"3.8.16/H-1-3"	""">3.8.16/H-1-3] MUST provide access to this user affordance within three interactions from a default Launcher. [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720103"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-4"	""	""	""	""	""	"3.8.16/H-1-4"	""">3.8.16/H-1-4] MUST accurately render in this user affordance the name and icon of each third-party app that provides controls via the ControlsProviderService API as well as any specified fields provided by the Control APIs. Conversely, If Handheld device implementations do not implement such controls, they: [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720104"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-2-1"	""	""	""	""	""	"3.8.16/H-2-1"	""">3.8.16/H-2-1] MUST report null for the ControlsProviderService and the Control APIs. [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720201"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-2-2"	""	""	""	""	""	"3.8.16/H-2-2"	""">3.8.16/H-2-2] MUST declare the feature flag android.software.controls and set it to false. Handheld device implementations: [<a href=""#3_10_accessibility"""""	"03081600.720202"	"android.software.controls"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.9.2"	"3.9.2"	"C-2-1"	""	"[('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 5), ('com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest', 3), ('android.telephony.embms.cts.MbmsDownloadCallbackTest', 3), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 2), ('com.android.cts.managedprofile.PreManagedProfileTest', 2), ('com.android.cts.deviceandprofileowner.SuspendPackageTest', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('android.media.cts.DecoderTest', 1), ('com.android.cts.certinstaller.CertSelectionDelegateTest', 1), ('com.android.cts.comp.BindDeviceAdminServiceFailsTest', 1), ('com.android.cts.profileowner.ManagementTest', 1), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 1), ('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 1), ('com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest', 1), ('android.net.ipsec.ike.cts.IkeSessionParamsTest', 1), ('android.media.mediaparser.cts.MediaParserTest', 1), ('com.android.cts.comp.ManagementTest', 1), ('com.android.cts.deviceowner.DeviceOwnerProvisioningTest', 1), ('com.android.cts.deviceandprofileowner.KeyManagementTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest', 1), ('android.media.tv.tuner.cts.TunerFrontendTest', 1), ('com.android.cts.transferowner.TransferProfileOwnerOutgoingTest', 1), ('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 1), ('com.android.cts.deviceandprofileowner.AlwaysOnVpnTest', 1), ('android.admin.cts.DeviceAdminActivationTest', 1), ('com.android.cts.managedprofile.ProvisioningTest', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceandprofileowner.ResetPasswordTest', 1)]"	"[('setUp', 15), ('tearDown', 6), ('getDevice', 4), ('getContext', 3), ('getName', 2), ('obtain', 2), ('release', 2), ('clearFreezeRecord', 2), ('ServiceConnection', 1), ('getPackageName', 1), ('size', 1), ('build', 1), ('getPackage', 1), ('getTargetContext', 1), ('getPackageManager', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('IntentFilter', 1), ('getContentResolver', 1), ('now', 1), ('getAirplaneMode', 1), ('setSystemDate', 1), ('getSimpleName', 1), ('getInstrumentation', 1)]"	"[('CtsTelephonyTestCases', 3), ('CtsMediaTestCases', 1), ('CtsIkeTestCases', 1), ('CtsMediaParserTestCases', 1), ('CtsTvTestCases', 1), ('CtsAdminTestCases', 1)]"	""	"3.9.2/C-2-1"	"""C-2-1] MUST support the ability to specify a separate lock screen meeting the following requirements to grant access to apps running in a managed profile only. Device implementations MUST honor the DevicePolicyManager.ACTION_SET_NEW_PASSWORD intent and show an interface to configure a separate lock screen credential for the managed profile. The lock screen credentials of the managed profile MUST use the same credential storage and management mechanisms as the parent profile, as documented on the Android Open Source Project Site. The DPC password policies MUST apply to only the managed profile's lock screen credentials unless called upon the DevicePolicyManager instance returned by getParentProfileInstance. When contacts from the managed profile are displayed in the preinstalled call log, in-call UI, in-progress and missed-call notifications, contacts and messaging apps they SHOULD be badged with the same badge used to indicate managed profile applications. <h4 id="""	"03090200.670201"	"DPC DevicePolicyManager.ACTION ACTION_SET_NEW_PASSWORD"	""	""	""	"[('DPC', 26), ('DevicePolicyManager.ACTION', 15)]"	""	"[('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[android.media.cts.DecoderTest testTrackSelectionMkv CtsMediaTestCases]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCannotBind_unprotectedCrossUserService None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCheckCannotBind_nonManagingPackage None]', 1), ('[com.android.cts.certinstaller.CertSelectionDelegateTest testNotChosenAnyAlias None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testProvisioningNotAllowedWithDeviceOwner None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testBindDeviceAdminServiceAsUser_secondaryUser None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testNetworkAndSecurityLoggingAvailableIfAffiliated None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testRequestBugreportAvailableIfAffiliated None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceFailsTest testCannotBind None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedTrue None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.profileowner.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionParamsTest testSetPcscfConfigRequests CtsIkeTestCases]', 1), ('[android.media.mediaparser.cts.MediaParserTest testWavWithImaAdpcm CtsMediaParserTestCases]', 1), ('[com.android.cts.comp.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[com.android.cts.deviceowner.DeviceOwnerProvisioningTest getSystemPackageNameList None]', 1), ('[com.android.cts.deviceandprofileowner.SuspendPackageTest testSetPackagesNotSuspended None]', 1), ('[com.android.cts.deviceandprofileowner.SuspendPackageTest testSuspendNotSuspendablePackages None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCertChain None]', 1), ('[android.telephony.embms.cts.MbmsDownloadCallbackTest testFullCallback CtsTelephonyTestCases]', 1), ('[android.telephony.embms.cts.MbmsDownloadCallbackTest testDeregistration CtsTelephonyTestCases]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testInstallKeyPair None]', 1), ('[android.media.tv.tuner.cts.TunerFrontendTest testAtsc3FrontendSettings CtsTvTestCases]', 1), ('[com.android.cts.managedprofile.DisallowSharingIntoProfileTest testDisableSharingIntoProfile None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testSetNonVpnAlwaysOn None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails CtsAdminTestCases]', 1), ('[com.android.cts.managedprofile.ProvisioningTest PersistableBundle None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadCallbackTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SuspendPackageTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionParamsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/tuner/cts/TunerFrontendTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordTest.java', 1)]"	"[('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 6), ('/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 4), ('/android/telephony/embms/cts/MbmsDownloadCallbackTest.java', 4), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 3), ('/com/android/cts/managedprofile/PreManagedProfileTest.java', 3), ('/com/android/cts/deviceandprofileowner/SuspendPackageTest.java', 3), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/android/media/cts/DecoderTest.java', 2), ('/com/android/cts/certinstaller/CertSelectionDelegateTest.java', 2), ('/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java', 2), ('/com/android/cts/profileowner/ManagementTest.java', 2), ('/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 2), ('/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 2), ('/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionParamsTest.java', 2), ('/android/media/mediaparser/cts/MediaParserTest.java', 2), ('/com/android/cts/comp/ManagementTest.java', 2), ('/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 2), ('/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java', 2), ('/android/media/tv/tuner/cts/TunerFrontendTest.java', 2), ('/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java', 2), ('/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 2), ('/android/admin/cts/DeviceAdminActivationTest.java', 2), ('/com/android/cts/managedprofile/ProvisioningTest.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceandprofileowner/ResetPasswordTest.java', 2)]"	"[('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[olicyManager.isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));     }     ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DPC]:[3]:method_text:[Delegations} to test that      *    the scope can only be delegatd to one app at a time.      */    ])', 1), ('([4:/android/media/cts/DecoderTest.java]:[DPC]:[4]:method_text:[testTrackSelection(R.raw.mkv_avc_mp2);         Log.d(TAG, ""mkv_avc_mp2 finished!!!!!! "");     }     ])', 1), ('([2:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[2]:method_text:[entName(mContext));         assertTrue(""No target users found"", mTargetUsers.size() > 0);     }     ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[1]:method_text:[ }      /**      * Talk to a DPC package that is neither device owner nor profile owner.      */    ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[1]:method_text:[   }     }      /**      * Talk to the same DPC in same user, that is talking to itself.      */    ])', 1), ('([1:/com/android/cts/certinstaller/CertSelectionDelegateTest.java]:[DPC]:[1]:method_text:[y.getInstance(""X.509"").generateCertificate(                 new ByteArrayInputStream(cert));     } }])', 1), ('([16:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[DPC]:[16]:method_text:[th device owner and profile are the same package ({@link #COMP_DPC_PKG}).      */     @LargeTest    ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[DPC]:[2]:method_text:[package ({@link #COMP_DPC_PKG}), as setup      * by createAndManagedUser.      */     @FlakyTest    ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[DPC]:[2]:method_text:[   verifyBindDeviceAdminServiceAsUser(secondaryUserId);     }      @FlakyTest(bugId = 141161038)    ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[DPC]:[5]:method_text:[lingNetworkAndSecurityLogging"",                 mPrimaryUserId);         }     }      @FlakyTest    ])', 1), ('([22:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[DPC]:[22]:method_text:[              ""testOtherProfilesEqualsBindTargetUsers"",                 otherProfileUserId);     } }])', 1), ('([2:/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java]:[DPC]:[2]:method_text:[t),                 serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE, userHandle);     } }])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[ProvisioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     } }])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[tends AndroidTestCase {     private static final String TAG = ""ManagedProfileProvisioningTest"";     ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([1:/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[er.setUp();         setupTestParameters(DevicePolicyManager.ACTION_DEVICE_OWNER_CHANGED);     }     ])', 1), ('([6:/android/net/ipsec/ike/cts/IkeSessionParamsTest.java]:[DPC]:[6]:method_text:[);             }         }         assertEquals(EXPECTED_PCSCF_SERVERS, resultAddresses);     }     ])', 1), ('([2:/android/media/mediaparser/cts/MediaParserTest.java]:[DPC]:[2]:method_text:[hImaAdpcm() throws IOException {         testAssetExtraction(""wav/sample_ima_adpcm.wav"");     }     ])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[visioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[d tearDown() throws Exception {         enableUninstalledApp();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/deviceandprofileowner/SuspendPackageTest.java]:[DPC]:[1]:method_text:[(isSuspended);     }      /**      * Verify that we cannot suspend launcher and dpc app.      */    ])', 1), ('([2:/com/android/cts/deviceandprofileowner/SuspendPackageTest.java]:[DPC]:[2]:method_text:[      assertTrue(new HashSet(Arrays.asList(a)).containsAll(new HashSet(Arrays.asList(b))));     }  }])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[DPC]:[1]:method_text:[ationSupported() {         return mDevicePolicyManager.isUniqueDeviceAttestationSupported();     } }])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[DPC]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[1]:method_text:[  } catch (InterruptedException e) {                 return null;             }         }     }     ])', 1), ('([2:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[2]:method_text:[oadService.FILE_INFO_1, stateArgs.arg2);         assertEquals(sampleInt, stateArgs.arg3);     }     ])', 1), ('([2:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[2]:method_text:[ull, 0, 0, 0, 0);         assertNull(progressCallback.waitOnProgressUpdated(SHORT_TIMEOUT));     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DPC]:[1]:method_text:[N+, @{link IllegalArgumentException } should be thrown if the package      * is missing.      */    ])', 1), ('([2:/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java]:[DevicePolicyManager.ACTION]:[2]:method_text:[alue.             setAirplaneModeAndWaitBroadcast(0);         }         super.tearDown();     }     ])', 1), ('([4:/android/media/tv/tuner/cts/TunerFrontendTest.java]:[DPC]:[4]:method_text:[tCodeRate());         assertEquals(Atsc3FrontendSettings.FEC_LDPC_16K, plps[1].getFec());     }     ])', 1), ('([1:/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[r.setUp();         setupTestParameters(DevicePolicyManager.ACTION_PROFILE_OWNER_CHANGED);     }     ])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[vityInfo.name)) {                 return true;             }         }         return false;     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[DPC]:[1]:method_text:[    fail(""Connectivity isn\'t available while expected: "" + message);             }         }     } }])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));     } }])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[DevicePolicyManager.ACTION]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([2:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DPC]:[2]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([2:/com/android/cts/deviceandprofileowner/ResetPasswordTest.java]:[DPC]:[2]:method_text:[s these two negative cases.  *  */ public class ResetPasswordTest extends BaseDeviceAdminTest {     ])', 1)]"	""	""	""	""	""
"99:375923) 4  . Application Packaging Compatibility"	"4"	"C-0-8"	""	""	""	""	""	"4/C-0-8"	"""C-0-8] MUST implement support for Incremental File System as documented here.  | C-0-8] and"""	"04000000.670008"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"99:375923) 4  . Application Packaging Compatibility"	"4"	"C-0-9"	""	"[('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 35), ('com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest', 18), ('android.appsecurity.cts.OverlayHostTest', 13), ('android.appsecurity.cts.ApplicationVisibilityTest', 9), ('android.appsecurity.cts.UseEmbeddedDexTest', 7), ('android.jvmti.cts.JvmtiAttachingHostTest', 6), ('android.appsecurity.cts.PackageResolutionHostTest', 4), ('android.extractnativelibs.cts.CtsExtractNativeLibsHostTestIncremental', 3), ('com.android.cts.devicepolicy.BaseDeviceAdminHostSideTest', 3), ('android.appsecurity.cts.DirectBootHostTest', 2), ('android.dynamicmime.testapp.update.ChangedGroupsTest', 2), ('com.android.server.cts.NotificationIncidentTest', 2), ('com.android.cts.devicepolicy.MixedDeviceOwnerTest', 2), ('android.appsecurity.cts.AuthBoundKeyTest', 2), ('android.telecom.cts.ThirdPartyCallScreeningServiceTest', 1), ('com.android.cts.rollback.host.app2.HostTestHelper', 1), ('com.android.cts.writeexternalstorageapp.ChangeDefaultUris', 1), ('android.content.pm.cts.InstantAppTest', 1), ('android.view.animation.cts.AnimationUtilsTest', 1), ('com.android.cts.net.HostsideNetworkCallbackTests', 1), ('android.admin.cts.DevicePolicyManagerTest', 1), ('android.telephonyprovider.cts.TelephonyProviderHostTest', 1), ('android.app.cts.InstrumentationTest', 1)]"	"[('getDevice', 54), ('setUp', 18), ('tearDown', 14), ('getTargetApiVersion', 5), ('getAdminReceiverComponent', 3), ('InstallMultiple', 2), ('run', 2), ('getCurrentUser', 2), ('getDeviceAdminApkFileName', 2), ('getDeviceAdminApkPackage', 2), ('getAbi', 1), ('getBuild', 1), ('setUpPackage', 1), ('canRequestInteractAcrossProfiles', 1), ('canInteractAcrossProfiles', 1), ('createRequestInteractAcrossProfilesIntent', 1), ('getSimpleName', 1), ('getReceiverComponent', 1), ('getPackageManager', 1), ('useInvalidatedAuthBoundKey', 1), ('getInstrumentation', 1), ('getTargetContext', 1), ('getUnprotectedAdminReceiverComponent', 1), ('getDeviceAdminJavaPackage', 1)]"	"[('CtsTelecomTestCases', 1), ('CtsContentTestCases', 1), ('CtsViewTestCases', 1), ('CtsAdminTestCases', 1), ('CtsAndroidAppTestCases', 1)]"	""	"4/C-0-9"	"""C-0-9] MUST support verifying .apk files using the APK Signature Scheme v4. If device implementations are already launched on an earlier Android version and cannot meet the requirements | C-0-9] through a system software update, they MAY be exempted from these requirements. <h2 id="""	"04000000.670009"	"APK"	""	""	""	"[('APK', 117)]"	""	"[('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone None]', 1), ('[android.appsecurity.cts.OverlayHostTest currentTimeMillis None]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallTargetAndroidNotPlatformSigned None]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallPieOverlayNotPlatformSigned None]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallDifferentSignaturesNoName None]', 1), ('[android.appsecurity.cts.OverlayHostTest testFailIdmapDifferentSignaturesNoName None]', 1), ('[android.appsecurity.cts.OverlayHostTest testSameSignatureNoOverlayableSucceeds None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyAll None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyAllNoNameFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyProductFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicySystemFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyVendorFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyDifferentSignatureFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotOverlayAssets None]', 1), ('[android.telecom.cts.ThirdPartyCallScreeningServiceTest testNoPostCallActivityForIncomingEmergencyCall CtsTelecomTestCases]', 1), ('[android.appsecurity.cts.PackageResolutionHostTest testResolveOrderedActivity_instant None]', 1), ('[android.appsecurity.cts.PackageResolutionHostTest testResolveOrderedService_instant None]', 1), ('[android.appsecurity.cts.PackageResolutionHostTest testResolveOrderedReceiver_instant None]', 1), ('[com.android.cts.rollback.host.app2.HostTestHelper testApkRollbackByAnotherInstaller_Phase2 None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegationCertSelection None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpn None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnLockDown None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrantPreMApp None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_deviceAndProfileOwnerAlwaysAllowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegatedCertInstaller None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetWallpaper_disallowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTask None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackageWithPackageManager None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testClearApplicationData_testPkg None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPrintingPolicy None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUninstallBlockedLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[android.dynamicmime.testapp.update.ChangedGroupsTest testUpdateRemoveNonEmptyGroup None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListCrossUserGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListCrossUserNoGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListOtherUserCrossUserGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testPackageListOtherUserCrossUserNoGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListCrossUserGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListCrossUserNoGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListOtherUserCrossUserGrant None]', 1), ('[android.appsecurity.cts.ApplicationVisibilityTest testApplicationListOtherUserCrossUserNoGrant None]', 1), ('[android.content.pm.cts.InstantAppTest testInstantAppInstallerQuery CtsContentTestCases]', 1), ('[com.android.server.cts.NotificationIncidentTest testNotificationRecords None]', 1), ('[com.android.cts.devicepolicy.MixedDeviceOwnerTest testLocationPermissionGrantNotifies None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testCanonicalInstall None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testBadInstallWithCompressedDex None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testCanonicalInstallWithSplit None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testBadInstallWithDexCompressedSplit None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testCanonicalInstallWithBaseThenSplit None]', 1), ('[android.appsecurity.cts.UseEmbeddedDexTest testBadInstallWithBaseThenDexCompressedSplit None]', 1), ('[android.view.animation.cts.AnimationUtilsTest testLoad CtsViewTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotWhitelisted_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException None]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAttachDuringBind None]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAttachEarly None]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAgentStartupAgents None]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAgentAppInternal None]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAgentAppExternal None]', 1), ('[android.app.cts.InstrumentationTest finish CtsAndroidAppTestCases]', 1), ('[android.extractnativelibs.cts.CtsExtractNativeLibsHostTestIncremental testNoExtractNativeLibsIncremental None]', 1), ('[android.extractnativelibs.cts.CtsExtractNativeLibsHostTestIncremental testExtractNativeLibsIncremental None]', 1), ('[android.extractnativelibs.cts.CtsExtractNativeLibsHostTestIncremental testExtractNativeLibsIncrementalFails None]', 1), ('[com.android.cts.devicepolicy.BaseDeviceAdminHostSideTest testRunDeviceAdminTest None]', 1), ('[com.android.cts.devicepolicy.BaseDeviceAdminHostSideTest testResetPasswordDeprecated None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 35), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 18), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/OverlayHostTest.java', 13), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java', 9), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/UseEmbeddedDexTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PackageResolutionHostTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/packagemanager/extractnativelibs/src/android/extractnativelibs/cts/CtsExtractNativeLibsHostTestIncremental.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/update/ChangedGroupsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/NotificationIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AuthBoundKeyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/ThirdPartyCallScreeningServiceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app2/src/com/android/cts/rollback/host/app2/HostTestHelper.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/InstantAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/animation/cts/AnimationUtilsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideNetworkCallbackTests.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/telephonyprovider/src/android/telephonyprovider/cts/TelephonyProviderHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/InstrumentationTest.java', 1)]"	"[('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 36), ('/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 19), ('/android/appsecurity/cts/OverlayHostTest.java', 14), ('/android/appsecurity/cts/ApplicationVisibilityTest.java', 10), ('/android/appsecurity/cts/UseEmbeddedDexTest.java', 8), ('/android/jvmti/cts/JvmtiAttachingHostTest.java', 7), ('/android/appsecurity/cts/PackageResolutionHostTest.java', 5), ('/android/extractnativelibs/cts/CtsExtractNativeLibsHostTestIncremental.java', 4), ('/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java', 4), ('/android/appsecurity/cts/DirectBootHostTest.java', 3), ('/android/dynamicmime/testapp/update/ChangedGroupsTest.java', 3), ('/com/android/server/cts/NotificationIncidentTest.java', 3), ('/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 3), ('/android/appsecurity/cts/AuthBoundKeyTest.java', 3), ('/android/telecom/cts/ThirdPartyCallScreeningServiceTest.java', 2), ('/com/android/cts/rollback/host/app2/HostTestHelper.java', 2), ('/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/android/content/pm/cts/InstantAppTest.java', 2), ('/android/view/animation/cts/AnimationUtilsTest.java', 2), ('/com/android/cts/net/HostsideNetworkCallbackTests.java', 2), ('/android/admin/cts/DevicePolicyManagerTest.java', 2), ('/android/telephonyprovider/cts/TelephonyProviderHostTest.java', 2), ('/android/app/cts/InstrumentationTest.java', 2)]"	"[('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");         }     }      @RequiresDevice    ])', 3), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[les_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 3), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ion_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 3), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ed_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 2), ('([4:/android/appsecurity/cts/DirectBootHostTest.java]:[APK]:[4]:method_text:[allPackage(OTHER_PKG);     }      /**      * Automotive devices MUST support native FBE.      */    ])', 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[APK]:[2]:method_text:[super(getDevice(), getBuild(), getAbi());             addArg(""--force-queryable"");         }     } }])', 1), ('([32:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[32]:method_text:[nd are not signed with the platform signature must not be      * installed successfully.      */    ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[Q sdk and that are not signed with the platform signature must not      * be installed.      **/    ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[      * not signed with the same signature as the target package must not be installed.      **/    ])', 1), ('([2:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[2]:method_text:[dmap if the      * overlay is not signed with the same signature as the target package.      **/    ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[an idmap if the      * overlay is signed with the same signature as the target package.      **/    ])', 1), ('([2:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[2]:method_text:[* and signature policies if the overlay is signed with the same signature as the target.      */    ])', 1), ('([2:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[2]:method_text:[ARGET_OVERLAYABLE_APK, OVERLAY_ALL_APK, OVERLAY_ALL_PACKAGE,                 testMethod);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[eption {         assertFailToGenerateIdmap(OVERLAY_ALL_NO_NAME_APK, OVERLAY_ALL_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[eption {         assertFailToGenerateIdmap(OVERLAY_PRODUCT_APK, OVERLAY_PRODUCT_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[xception {         assertFailToGenerateIdmap(OVERLAY_SYSTEM_APK, OVERLAY_SYSTEM_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[xception {         assertFailToGenerateIdmap(OVERLAY_VENDOR_APK, OVERLAY_VENDOR_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[1]:method_text:[ap(OVERLAY_DIFFERENT_SIGNATURE_APK,                 OVERLAY_DIFFERENT_SIGNATURE_PACKAGE);     }     ])', 1), ('([2:/android/appsecurity/cts/OverlayHostTest.java]:[APK]:[2]:method_text:[t(TARGET_OVERLAYABLE_APK, OVERLAY_ALL_APK, OVERLAY_ALL_PACKAGE,                 testMethod);     } }])', 1), ('([2:/android/telecom/cts/ThirdPartyCallScreeningServiceTest.java]:[APK]:[2]:method_text:[D_CONTACTS, TEST_APP_PACKAGE)                         == PackageManager.PERMISSION_GRANTED);     } }])', 1), ('([2:/android/appsecurity/cts/PackageResolutionHostTest.java]:[APK]:[2]:method_text:[public void tearDown() throws Exception {         getDevice().uninstallPackage(TINY_PKG);     }     ])', 1), ('([1:/android/appsecurity/cts/PackageResolutionHostTest.java]:[APK]:[1]:method_text:[getDevice(), TINY_PKG,                 "".PackageResolutionTest"", ""queryActivityOrdered"");     }     ])', 1), ('([1:/android/appsecurity/cts/PackageResolutionHostTest.java]:[APK]:[1]:method_text:[(getDevice(), TINY_PKG,                 "".PackageResolutionTest"", ""queryServiceOrdered"");     }     ])', 1), ('([1:/android/appsecurity/cts/PackageResolutionHostTest.java]:[APK]:[1]:method_text:[ts(getDevice(), TINY_PKG,                 "".PackageResolutionTest"", ""queryReceiverOrdered"");     } }])', 1), ('([1:/com/android/cts/rollback/host/app2/HostTestHelper.java]:[APK]:[1]:method_text:[ installer.         // assertThat(InstallUtils.getInstalledVersion(TestApp.A)).isEqualTo(2);     } }])', 1), ('([49:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[49]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[elper"",             ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);     }     ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[Delegations} to test that      *    the scope can only be delegatd to one app at a time.      */    ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[ remaining delegations.             setDelegatedScopes(DELEGATE_APP_PKG, null);         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                 .setBoolean(true)                 .build());     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[      executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");     }      @RequiresDevice    ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");         }     }      @RequiresDevice    ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");         }     }      @RequiresDevice    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[          .setBoolean(true)                     .setInt(0)                     .build());     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[;         executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStatePreMApp"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ist(mUserId, false /* disabled */);             clearVoiceInteractionService();         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[S_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                     .build());         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ANAGEMENT_APK, mUserId);         executeDeviceTestClass("".AllowedAccountManagementTest"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNTS, false, mUserId);         }         executeAccountTest(""testAddAccount_allowed"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[UNTS, false, mUserId);         }         executeAccountTest(""testRemoveAccount_allowed"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);         }         executeAccountTest(""testAddAccount_allowed"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNT_TYPE, mUserId);         }         executeAccountTest(""testRemoveAccount_allowed"");     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[aller app is called directly rather than via intents from     // the DelegatedCertinstallerTest.    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[n app, that tries to set wallpaper.     // Non-admin apps must not violate any user restriction.    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[     // inside. But these restrictions must have no effect on the device/profile owner behavior.    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                 ""testDisallowAutofill_allowed"");     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[;         } finally {             setDefaultContentCaptureServiceEnabled(true);         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[abled(true);             executeDeviceTestClass("".MeteredDataRestrictionTest"");         }     }     ])', 1), ('([11:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[11]:method_text:[TEST_APP_PKG);             getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[{             getDevice().uninstallPackage(INTENT_RECEIVER_PKG);         }     }      @LargeTest    ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");     }      @FlakyTest(bugId = 141314026)    ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[that the app launches         executeSuspendPackageTestMethod(""testPackageNotSuspended"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[G + "".ClearApplicationDataTest"",                 ""testSharedPreferenceCleared"", mUserId);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[e) throws Exception {         runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[oolean(false)                 .setStrings(PERMISSIONS_APP_PKG)                 .build());     }     ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[and(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }])', 1), ('([2:/android/dynamicmime/testapp/update/ChangedGroupsTest.java]:[APK]:[2]:method_text:[hanges  */ @RunWith(AndroidJUnit4.class) public class ChangedGroupsTest extends BaseUpdateTest {    ])', 1), ('([4:/android/dynamicmime/testapp/update/ChangedGroupsTest.java]:[APK]:[4]:method_text:[ST_GROUP;     }      @Override     String updateApkPath() {         return APK_SECOND_GROUP;     } }])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[APK]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);             }         }         throw new TimeoutException();     } }])', 1), ('([4:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[4]:method_text:[mand(""settings put global package_verifier_enable ""                 + mOldVerifierValue);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[              ""testPackageVisibility_anyUserCrossUserGrant"",                 testUserId);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[            ""testPackageVisibility_anyUserCrossUserNoGrant"",                 testUserId);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[PackageVisibility_otherUserGrant"",                 testUserId,                 testArgs);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[ckageVisibility_otherUserNoGrant"",                 testUserId,                 testArgs);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[          ""testApplicationVisibility_anyUserCrossUserGrant"",                 testUserId);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[        ""testApplicationVisibility_anyUserCrossUserNoGrant"",                 testUserId);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[icationVisibility_otherUserGrant"",                 testUserId,                 testArgs);     }     ])', 1), ('([2:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[APK]:[2]:method_text:[        return mUsers[0];     }      private int getTestUserId() {         return mUsers[1];     } }])', 1), ('([1:/android/content/pm/cts/InstantAppTest.java]:[APK]:[1]:method_text:[ctivities(intent, resolveFlags);         assertTrue(matches == null || matches.size() <= 1);     } }])', 1), ('([2:/com/android/server/cts/NotificationIncidentTest.java]:[APK]:[2]:method_text:[Tests that at least one notification is posted, and verify its properties are plausible.      */    ])', 1), ('([1:/com/android/server/cts/NotificationIncidentTest.java]:[APK]:[1]:method_text:[E_TEST_PKG);             }         }     }      /** Test valid values from the RankingHelper. */    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[APK]:[1]:method_text:[oveAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED, mUserId));         }         super.tearDown();     }     ])', 1), ('([2:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[APK]:[2]:method_text:[ser(                 DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", userId);     } }])', 1), ('([8:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[8]:method_text:[al String APK_SPLIT_COMPRESSED_DEX =             ""CtsUseEmbeddedDexAppSplit_CompressedDex.apk"";     ])', 1), ('([1:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[1]:method_text:[lInstall() throws Exception {         new InstallMultiple().addFile(APK_CANONICAL).run();     }     ])', 1), ('([1:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[1]:method_text:[eption {         new InstallMultiple().addFile(APK_DEX_COMPRESSED).runExpectingFailure();     }     ])', 1), ('([2:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[2]:method_text:[         new InstallMultiple().addFile(APK_CANONICAL).addFile(APK_SPLIT_CANONICAL).run();     }     ])', 1), ('([2:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[2]:method_text:[(APK_CANONICAL).addFile(APK_SPLIT_COMPRESSED_DEX)                 .runExpectingFailure();     }     ])', 1), ('([2:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[2]:method_text:[      new InstallMultiple().inheritFrom(PACKAGE_NAME).addFile(APK_SPLIT_CANONICAL).run();     }     ])', 1), ('([2:/android/appsecurity/cts/UseEmbeddedDexTest.java]:[APK]:[2]:method_text:[From(PACKAGE_NAME).addFile(APK_SPLIT_COMPRESSED_DEX)                 .runExpectingFailure();     } }])', 1), ('([2:/android/view/animation/cts/AnimationUtilsTest.java]:[APK]:[2]:method_text:[getAnimation().getDuration());         assertEquals(0.1f, controller.getDelay(), 0.001f);     }     ])', 1), ('([1:/com/android/cts/net/HostsideNetworkCallbackTests.java]:[APK]:[1]:method_text:[rows Exception {         super.tearDown();         uninstallPackage(TEST_APP2_PKG, true);     }     ])', 1), ('([6:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[6]:method_text:[         super.setUp();         assumeTrue(mSupportsMultiUser && mHasManagedUserFeature);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[rofiles_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[1]:method_text:[es_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[es_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[led_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[Enabled_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[1]:method_text:[le_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[n_returnsIntent"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[ction_returnsIntent"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[APK]:[2]:method_text:[geName) {         return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);     } }])', 1), ('([2:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[2]:method_text:[cted void setUp() throws Exception {         mCurrentUser = getDevice().getCurrentUser();     }     ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[1]:method_text:[   throw new RuntimeException(""Failed bind-time attaching"", e);             }         });     }     ])', 1), ('([3:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[3]:method_text:[    throw new RuntimeException(""Failed pre-bind attaching"", e);             }         });     }     ])', 1), ('([2:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[2]:method_text:[tion(""Failed to clean up "" + startup_dir, e);                 }             }         });     }     ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[1]:method_text:[   throw new RuntimeException(""Failed agent-app attaching"", e);             }         });     }     ])', 1), ('([11:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[APK]:[11]:method_text:[   CLog.e(""Failed cleaning up library on device"");                 }             }         }     } }])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[APK]:[1]:method_text:[             mPackageManager.hasSystemFeature(PackageManager.FEATURE_SECURE_LOCK_SCREEN);     }     ])', 1), ('([3:/android/telephonyprovider/cts/TelephonyProviderHostTest.java]:[APK]:[3]:method_text:[ATURE_TELEPHONY)) {             return;         }         installPackage(TEST_APK, true);     }     ])', 1), ('([2:/android/appsecurity/cts/AuthBoundKeyTest.java]:[APK]:[2]:method_text:[     public void tearDown() throws Exception {         getDevice().uninstallPackage(PKG);     }     ])', 1), ('([1:/android/appsecurity/cts/AuthBoundKeyTest.java]:[APK]:[1]:method_text:[           getDevice().executeShellCommand(""cmd lock_settings clear --old 12345"");         }     } }])', 1), ('([1:/android/app/cts/InstrumentationTest.java]:[APK]:[1]:method_text:[    mActivity.finish();             mActivity = null;         }         super.tearDown();     }     ])', 1), ('([1:/android/extractnativelibs/cts/CtsExtractNativeLibsHostTestIncremental.java]:[APK]:[1]:method_text:[));     }      /** Test with a app that has extractNativeLibs=true using Incremental install. */    ])', 1), ('([1:/android/extractnativelibs/cts/CtsExtractNativeLibsHostTestIncremental.java]:[APK]:[1]:method_text:[as extractNativeLibs=false but with mis-aligned lib files,      *  using Incremental install. */    ])', 1), ('([19:/android/extractnativelibs/cts/CtsExtractNativeLibsHostTestIncremental.java]:[APK]:[19]:method_text:[ IDSIG_SUFFIX);         return installPackageIncrementalFromFiles(apkFile, v4SignatureFile);     } }])', 1), ('([10:/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java]:[APK]:[10]:method_text:[e, null);     }      /**      * Run all tests in DeviceAdminTest.java (as device admin).      */    ])', 1), ('([1:/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java]:[APK]:[1]:method_text:[       return;         }         runTests(getDeviceAdminApkPackage(), ""DeviceAdminTest"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/BaseDeviceAdminHostSideTest.java]:[APK]:[1]:method_text:[ackage(), ""DeviceAdminPasswordTest"",                         ""testResetPasswordDeprecated"");     } }])', 1)]"	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-3-2"	""	""	""	""	""	"6.1/C-3-2"	"""C-3-2] MUST provide drivers for Windows 7, 8 and 10, allowing developers to connect to the device using the adb protocol. If device implementations support adb connections to a host machine via Wi-Fi, they: """	"06010000.670302"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-4-1"	""	"[('android.adbmanager.cts.AdbManagerHostDeviceTest', 2)]"	""	""	""	"6.1/C-4-1"	"""C-4-1] MUST have the AdbManager#isAdbWifiSupported() method return true. If device implementations support adb connections to a host machine via Wi-Fi and includes at least one camera, they: """	"06010000.670401"	"isAdbWifiSupported()"	""	""	""	"[('isAdbWifiSupported()', 2)]"	""	"[('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported None]', 2)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 2)]"	"[('/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 4)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[isAdbWifiSupported()]:[1]:method_text:[;         Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));     }     ])', 2)]"	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-0-11"	""	""	""	""	""	"6.1/C-0-11"	"""C-0-11] MUST support the shell command cmd testharness. Upgrading device implementations from an earlier Android version without a persistent data block MAY be exempted from C-0-11. """	"06010000.670011"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-3-1"	""	""	""	""	""	"6.1/C-3-1"	"""C-3-1] MUST implement adb via local-area network (such as Ethernet or Wi-Fi). """	"06010000.670301"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-5-1"	""	"[('android.adbmanager.cts.AdbManagerHostDeviceTest', 2)]"	""	""	""	"6.1/C-5-1"	"""C-5-1] MUST have the AdbManager#isAdbWifiQrSupported() method return true. Dalvik Debug Monitor Service (ddms) """	"06010000.670501"	"isAdbWifiQrSupported()"	""	""	""	"[('isAdbWifiQrSupported()', 2)]"	""	"[('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported None]', 2)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 2)]"	"[('/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 4)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[isAdbWifiQrSupported()]:[1]:method_text:[)));         Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));     } }])', 2)]"	""	""	""	""	""
"146:486059) 6.1  . Developer Tools"	"6.1"	"C-0-10"	""	"[('android.cts.statsd.atom.UidAtomTests', 2)]"	""	""	""	"6.1/C-0-10"	"""C-0-10] MUST record, without omission, and make the following events accessible and available to the cmd stats shell command and the StatsManager System API class. ActivityForegroundStateChanged AnomalyDetected AppBreadcrumbReported AppCrashOccurred AppStartOccurred BatteryLevelChanged BatterySaverModeStateChanged BleScanResultReceived BleScanStateChanged ChargingStateChanged DeviceIdleModeStateChanged ForegroundServiceStateChanged GpsScanStateChanged JobStateChanged PluggedStateChanged ScheduledJobStateChanged ScreenStateChanged SyncStateChanged SystemElapsedRealtime UidProcessStateChanged WakelockStateChanged WakeupAlarmOccurred WifiLockStateChanged WifiMulticastLockStateChanged WifiScanStateChanged  | C-0-10] MUST write a LMK_KILL_OCCURRED_FIELD_NUMBER Atom to the statsd log when an app is terminated by the Low Memory Killer. Test Harness Mode If device implementations support the shell command cmd testharness and run cmd testharness enable, they: """	"06010000.670010"	"LMK_KILL_OCCURRED_FIELD_NUMBER"	""	""	""	"[('LMK_KILL_OCCURRED_FIELD_NUMBER', 2)]"	""	"[('[android.cts.statsd.atom.UidAtomTests testLmkKillOccurred None]', 2)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/UidAtomTests.java', 2)]"	"[('/android/cts/statsd/atom/UidAtomTests.java', 4)]"	"[('([1:/android/cts/statsd/atom/UidAtomTests.java]:[LMK_KILL_OCCURRED_FIELD_NUMBER]:[1]:method_text:[ven if running multiple processes, LMK is not worked.         fail(""LMK is not worked."");     }     ])', 2)]"	""	""	""	""	""
"151:495871) 7.1.1.1  . Screen Size and Shape"	"7.1.1.1"	"C-3-1"	""	""	""	""	""	"7.1.1.1/C-3-1"	"""C-3-1] MUST report the position, bounds and state of hinge or fold through extensions or sidecar APIs to the application. For details on correctly implementing the sidecar or extension APIs refer to the public documentation of Window Manager Jetpack. <h5 id="""	"07010101.670301"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"151:495871) 7.1.1.1  . Screen Size and Shape"	"7.1.1.1"	"C-2-1"	""	"[('android.server.wm.MultiDisplayTestBase', 1)]"	"[('setUp', 2), ('getInstrumentation', 1), ('getTargetContext', 1)]"	"[('CtsWindowManagerDeviceTestCases', 1)]"	""	"7.1.1.1/C-2-1"	"""C-2-1] MUST implement the latest available stable version of the extensions API or the stable version of sidecar API to be used by Window Manager Jetpack library. If device implementations include an Android-compatible display(s) that is foldable, or includes a folding hinge between multiple display panels and if the hinge or fold crosses a fullscreen application window, they: """	"07010101.670201"	"display(s)"	""	""	""	"[('display(s)', 1)]"	""	"[('[android.server.wm.MultiDisplayTestBase getDisplaysStates CtsWindowManagerDeviceTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayTestBase.java', 1)]"	"[('/android/server/wm/MultiDisplayTestBase.java', 2)]"	"[('([4:/android/server/wm/MultiDisplayTestBase.java]:[display(s)]:[4]:method_text:[            }             VirtualDisplayHelper.waitForDefaultDisplayState(wantOn);         }     } }])', 1)]"	""	""	""	""	""
"151:495871) 7.1.1.1  . Screen Size and Shape"	"7.1.1.1"	"H-1-1"	""	""	""	""	""	"7.1.1.1/H-1-1"	""">7.1.1.1/H-1-1]* MUST make the logical screen that is made available for third party applications be at least 2 inches on the short edge(s) and 2.7 inches on the long edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement. If Handheld device implementations do not support software screen rotation, they: [<a href=""#7_1_display_and_graphics"""""	"07010101.720101"	"edge(s)"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"151:495871) 7.1.1.1  . Screen Size and Shape"	"7.1.1.1"	"H-2-1"	""	"[('android.content.res.cts.ConfigurationTest', 2), ('android.opengl.cts.OpenGlEsVersionTest', 2)]"	""	"[('CtsContentTestCases', 2), ('CtsOpenGLTestCases', 2)]"	""	"7.1.1.1/H-2-1"	""">7.1.1.1/H-2-1]* MUST make the logical screen that is made available for third party applications be at least 2.7 inches on the short edge(s). Devices which launched on an API level earlier than that of this document are exempted from this requirement. If Handheld device implementations claim support for high dynamic range displays through Configuration.isScreenHdr() , they: [<a href=""#7_1_display-and-graphics"""""	"07010101.720201"	"Configuration.isScreenHdr isScreenHdr() edge(s)"	""	""	""	"[('isScreenHdr()', 4)]"	""	"[('[android.content.res.cts.ConfigurationTest testIsScreenHdr CtsContentTestCases]', 2), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForHdrCapableDisplay CtsOpenGLTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 2)]"	"[('/android/content/res/cts/ConfigurationTest.java', 4), ('/android/opengl/cts/OpenGlEsVersionTest.java', 4)]"	"[('([3:/android/content/res/cts/ConfigurationTest.java]:[isScreenHdr()]:[3]:method_text:[.colorMode |= Configuration.COLOR_MODE_HDR_YES;         assertTrue(config.isScreenHdr());     }     ])', 2), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[isScreenHdr()]:[1]:method_text:[g.e(TAG, ""Couldn\'t initialize EGL."");         }     }      @CddTest(requirement=""7.1.4.5/C-1-4"")    ])', 2)]"	""	""	""	""	""
"158:512795) 7.1.4.2  . These are in the Android source tree at"	"7.1.4.2"	"C-1-10"	""	"[('android.graphics.cts.VulkanDeqpLevelTest', 3), ('android.net.ipsec.ike.cts.IkeSessionDigitalSignatureTest', 1), ('android.net.ipsec.ike.cts.IkeSessionPskTest', 1), ('android.hardware.camera2.cts.HeifWriterTest', 1)]"	"[('getSimpleName', 2), ('setup', 2), ('getTargetContext', 2), ('getPackageManager', 2), ('getSystemAvailableFeatures', 2)]"	"[('CtsGraphicsTestCases', 3), ('CtsIkeTestCases', 2), ('CtsCameraTestCases', 1)]"	""	"7.1.4.2/C-1-10"	"""C-1-10] MUST pass all Vulkan dEQP Tests in the test lists between version 132317953 and the version specified in the android.software.vulkan.deqp.level feature flag. """	"07010402.670110"	"EQP android.software.vulkan.deqp.level"	""	""	""	"[('EQP', 5), ('android.software.vulkan.deqp.level', 1)]"	""	"[('[android.graphics.cts.VulkanDeqpLevelTest testVulkanDeqpLevel CtsGraphicsTestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionDigitalSignatureTest testIkeSessionSetupAndChildSessionSetupWithTransportMode CtsIkeTestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 CtsIkeTestCases]', 1), ('[android.hardware.camera2.cts.HeifWriterTest testHeif CtsCameraTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1)]"	"[('/android/graphics/cts/VulkanDeqpLevelTest.java', 5), ('/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 2), ('/android/hardware/camera2/cts/HeifWriterTest.java', 2)]"	"[('([4:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[4]:method_text:[              }             }         }     }      @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")    ])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[ATURE_VULKAN_DEQP_LEVEL,                             MINIMUM_VULKAN_DEQP_LEVEL));         }     }  }])', 1), ('([1:/android/graphics/cts/VulkanDeqpLevelTest.java]:[android.software.vulkan.deqp.level]:[1]:method_text:[              }             }         }     }      @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")    ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[EQP]:[1]:method_text:[RESP);         verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);     } }])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[EQP]:[1]:method_text:[p);         verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);     }     ])', 1), ('([3:/android/hardware/camera2/cts/HeifWriterTest.java]:[EQP]:[3]:method_text:[           }             // TODO: add more key validations.         }         return result;     } }])', 1)]"	""	""	""	""	""
""	"7.1.4.6"	"H-0-1"	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 2), ('com.android.server.cts.GraphicsStatsValidationTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.cts.SyncTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.hardware.cts.HardwareBufferTest', 1)]"	"[('getDevice', 24), ('cleanup', 4), ('getWidth', 3), ('getHeight', 2), ('run', 2), ('getMessage', 2), ('init', 2), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('setUp', 1), ('getOverrideConfig', 1), ('trim', 1), ('getTime', 1), ('LogScanResult', 1), ('data', 1)]"	"[('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 4), ('CtsShortcutManagerTestCases', 3), ('CtsMediaTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsViewTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.1.4.6/H-0-1"	""">7.1.4.6/H-0-1] MUST report whether the device supports the GPU profiling capability via a system property graphics.gpu.profiler.support. If Handheld device implementations declare support via a system property graphics.gpu.profiler.support, they: [<a href=""#7_1_display_and_graphics"""""	"07010406.720001"	"GPU graphics.gpu.profiler.support"	""	""	""	"[('GPU', 48), ('graphics.gpu.profiler.support', 1)]"	""	"[('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 2), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1)]"	"[('/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 17), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 4), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 3), ('/android/graphics/cts/BitmapTest.java', 3), ('/android/graphics/cts/CameraGpuTest.java', 3), ('/android/security/cts/Poc17_01.java', 3), ('/android/graphics/cts/SyncTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 2), ('/android/graphics/cts/MediaVulkanGpuTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 2), ('/android/view/cts/ASurfaceControlTest.java', 2), ('/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 2), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/android/renderscript/cts/refocus/RefocusTest.java', 2), ('/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/com/android/cts/deviceowner/VrTemperatureTest.java', 2), ('/android/appsecurity/cts/KeySetHostTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/graphics/cts/BasicVulkanGpuTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 2), ('/android/hardware/cts/HardwareBufferTest.java', 2)]"	"[('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er     public void teardown() throws Throwable {         EGL14.eglTerminate(mEglDisplay);     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());             assertEquals(flags, buffer.getUsage());         }     } }])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                          bitmap.getHeight());         return framePixels;     }     ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                 FEATURE_WATCH, FEATURE_TELEVISION);     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                     }                 });     }     ])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([1:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[graphics.gpu.profiler.support]:[1]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";             orgiRefreshRate[1] = """";         }         return orgiRefreshRate;     }     ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                 latest = proto;             }         }         return latest;     } }])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);              oldFanSpeeds = fanSpeeds;             oldCpuUsages = cpuUsages;         }     } }])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                     });         });     }     ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap      * from the first TextureView is identical to the second TextureView.      */    ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[     }      /*      * Verify behavior of sharing surfaces within one OutputConfiguration      */    ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                 context.getResources().getResourceEntryName(resID));         return path;     }  }])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                 + ""icon_format=PNG,""                 + ""icon_quality=100"";     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                 () -> runWithCaller(callerContext, () -> r.run())         );     } }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));         }     }     ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();         options.inPreferredConfig = Config.HARDWARE;         return options;     } }])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are      * loaded in the correct order.      */    ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[      * This test ensures we can still use properties if no layer specified via Settings      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     /**      * This test ensures system properties are ignored if Settings load a layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**      * This test ensures a debuggable app can load layers from an external package      */    ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures we can still use properties if no GLES layers are specified      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures system properties are ignored if Settings load a GLES layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**      * This test ensures that external GLES layers can be loaded by a debuggable app      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);         Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);     } }])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                 skinVrThrottlingThresholds);     } }])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =             new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);     ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);         activity.waitToFinishRendering();         activity.finish();     } }])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.      */    ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are      * present and advertised accordingly.      */    ])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;      public BasicVulkanGpuTest(String name, int format) {         mFormat = format;     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {         violations.append(message).append("": "").append(e).append(""\\n"");     } }])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));     } }])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);         }     }      /**      *  b/31799885      */    ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);         }     }      /**      *  b/31993456      */    ])', 1)]"	""	""	""	""	""
""	"7.1.4.6"	"H-1-1"	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.cts.SyncTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.hardware.cts.HardwareBufferTest', 1)]"	"[('getDevice', 16), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('setUp', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getOverrideConfig', 1), ('trim', 1), ('getTime', 1), ('LogScanResult', 1), ('data', 1)]"	"[('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 4), ('CtsShortcutManagerTestCases', 3), ('CtsMediaTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsViewTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.1.4.6/H-1-1"	""">7.1.4.6/H-1-1] MUST report as output a protobuf trace that complies with the schema for GPU counters and GPU renderstages defined in the Perfetto documentation. [<a href=""#7_1_display_and_graphics"""""	"07010406.720101"	"GPU"	""	""	""	"[('GPU', 48)]"	""	"[('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1)]"	"[('/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 17), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 3), ('/android/graphics/cts/BitmapTest.java', 3), ('/android/graphics/cts/CameraGpuTest.java', 3), ('/android/security/cts/Poc17_01.java', 3), ('/android/graphics/cts/SyncTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 2), ('/android/graphics/cts/MediaVulkanGpuTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 2), ('/android/view/cts/ASurfaceControlTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 2), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/android/renderscript/cts/refocus/RefocusTest.java', 2), ('/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/com/android/cts/deviceowner/VrTemperatureTest.java', 2), ('/android/appsecurity/cts/KeySetHostTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/graphics/cts/BasicVulkanGpuTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 2), ('/android/hardware/cts/HardwareBufferTest.java', 2)]"	"[('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er     public void teardown() throws Throwable {         EGL14.eglTerminate(mEglDisplay);     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());             assertEquals(flags, buffer.getUsage());         }     } }])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                          bitmap.getHeight());         return framePixels;     }     ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                 FEATURE_WATCH, FEATURE_TELEVISION);     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                     }                 });     }     ])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";             orgiRefreshRate[1] = """";         }         return orgiRefreshRate;     }     ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                 latest = proto;             }         }         return latest;     } }])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);              oldFanSpeeds = fanSpeeds;             oldCpuUsages = cpuUsages;         }     } }])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                     });         });     }     ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap      * from the first TextureView is identical to the second TextureView.      */    ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[     }      /*      * Verify behavior of sharing surfaces within one OutputConfiguration      */    ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                 context.getResources().getResourceEntryName(resID));         return path;     }  }])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                 + ""icon_format=PNG,""                 + ""icon_quality=100"";     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                 () -> runWithCaller(callerContext, () -> r.run())         );     } }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));         }     }     ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();         options.inPreferredConfig = Config.HARDWARE;         return options;     } }])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are      * loaded in the correct order.      */    ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[      * This test ensures we can still use properties if no layer specified via Settings      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     /**      * This test ensures system properties are ignored if Settings load a layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**      * This test ensures a debuggable app can load layers from an external package      */    ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures we can still use properties if no GLES layers are specified      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures system properties are ignored if Settings load a GLES layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**      * This test ensures that external GLES layers can be loaded by a debuggable app      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);         Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);     } }])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                 skinVrThrottlingThresholds);     } }])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =             new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);     ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);         activity.waitToFinishRendering();         activity.finish();     } }])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.      */    ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are      * present and advertised accordingly.      */    ])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;      public BasicVulkanGpuTest(String name, int format) {         mFormat = format;     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {         violations.append(message).append("": "").append(e).append(""\\n"");     } }])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));     } }])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);         }     }      /**      *  b/31799885      */    ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);         }     }      /**      *  b/31993456      */    ])', 1)]"	""	""	""	""	""
""	"7.1.4.6"	"H-1-2"	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.cts.SyncTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.hardware.cts.HardwareBufferTest', 1)]"	"[('getDevice', 16), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('setUp', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getOverrideConfig', 1), ('trim', 1), ('getTime', 1), ('LogScanResult', 1), ('data', 1)]"	"[('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 4), ('CtsShortcutManagerTestCases', 3), ('CtsMediaTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsViewTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.1.4.6/H-1-2"	""">7.1.4.6/H-1-2] MUST report conformant values for the device’s GPU counters following the gpu counter trace packet proto. [<a href=""#7_1_display_and_graphics"""""	"07010406.720102"	"GPU"	""	""	""	"[('GPU', 48)]"	""	"[('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1)]"	"[('/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 17), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 3), ('/android/graphics/cts/BitmapTest.java', 3), ('/android/graphics/cts/CameraGpuTest.java', 3), ('/android/security/cts/Poc17_01.java', 3), ('/android/graphics/cts/SyncTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 2), ('/android/graphics/cts/MediaVulkanGpuTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 2), ('/android/view/cts/ASurfaceControlTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 2), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/android/renderscript/cts/refocus/RefocusTest.java', 2), ('/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/com/android/cts/deviceowner/VrTemperatureTest.java', 2), ('/android/appsecurity/cts/KeySetHostTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/graphics/cts/BasicVulkanGpuTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 2), ('/android/hardware/cts/HardwareBufferTest.java', 2)]"	"[('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er     public void teardown() throws Throwable {         EGL14.eglTerminate(mEglDisplay);     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());             assertEquals(flags, buffer.getUsage());         }     } }])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                          bitmap.getHeight());         return framePixels;     }     ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                 FEATURE_WATCH, FEATURE_TELEVISION);     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                     }                 });     }     ])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";             orgiRefreshRate[1] = """";         }         return orgiRefreshRate;     }     ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                 latest = proto;             }         }         return latest;     } }])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);              oldFanSpeeds = fanSpeeds;             oldCpuUsages = cpuUsages;         }     } }])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                     });         });     }     ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap      * from the first TextureView is identical to the second TextureView.      */    ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[     }      /*      * Verify behavior of sharing surfaces within one OutputConfiguration      */    ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                 context.getResources().getResourceEntryName(resID));         return path;     }  }])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                 + ""icon_format=PNG,""                 + ""icon_quality=100"";     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                 () -> runWithCaller(callerContext, () -> r.run())         );     } }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));         }     }     ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();         options.inPreferredConfig = Config.HARDWARE;         return options;     } }])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are      * loaded in the correct order.      */    ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[      * This test ensures we can still use properties if no layer specified via Settings      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     /**      * This test ensures system properties are ignored if Settings load a layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**      * This test ensures a debuggable app can load layers from an external package      */    ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures we can still use properties if no GLES layers are specified      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures system properties are ignored if Settings load a GLES layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**      * This test ensures that external GLES layers can be loaded by a debuggable app      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);         Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);     } }])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                 skinVrThrottlingThresholds);     } }])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =             new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);     ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);         activity.waitToFinishRendering();         activity.finish();     } }])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.      */    ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are      * present and advertised accordingly.      */    ])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;      public BasicVulkanGpuTest(String name, int format) {         mFormat = format;     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {         violations.append(message).append("": "").append(e).append(""\\n"");     } }])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));     } }])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);         }     }      /**      *  b/31799885      */    ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);         }     }      /**      *  b/31993456      */    ])', 1)]"	""	""	""	""	""
""	"7.1.4.6"	"H-1-3"	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.cts.SyncTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.hardware.cts.HardwareBufferTest', 1)]"	"[('getDevice', 16), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('setUp', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getOverrideConfig', 1), ('trim', 1), ('getTime', 1), ('LogScanResult', 1), ('data', 1)]"	"[('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 4), ('CtsShortcutManagerTestCases', 3), ('CtsMediaTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsViewTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.1.4.6/H-1-3"	""">7.1.4.6/H-1-3] MUST report conformant values for the device’s GPU RenderStages following the render stage trace packet proto. [<a href=""#7_1_display_and_graphics"""""	"07010406.720103"	"GPU"	""	""	""	"[('GPU', 48)]"	""	"[('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1)]"	"[('/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 17), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 3), ('/android/graphics/cts/BitmapTest.java', 3), ('/android/graphics/cts/CameraGpuTest.java', 3), ('/android/security/cts/Poc17_01.java', 3), ('/android/graphics/cts/SyncTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 2), ('/android/graphics/cts/MediaVulkanGpuTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 2), ('/android/view/cts/ASurfaceControlTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 2), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/android/renderscript/cts/refocus/RefocusTest.java', 2), ('/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/com/android/cts/deviceowner/VrTemperatureTest.java', 2), ('/android/appsecurity/cts/KeySetHostTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/graphics/cts/BasicVulkanGpuTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 2), ('/android/hardware/cts/HardwareBufferTest.java', 2)]"	"[('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er     public void teardown() throws Throwable {         EGL14.eglTerminate(mEglDisplay);     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());             assertEquals(flags, buffer.getUsage());         }     } }])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                          bitmap.getHeight());         return framePixels;     }     ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                 FEATURE_WATCH, FEATURE_TELEVISION);     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                     }                 });     }     ])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";             orgiRefreshRate[1] = """";         }         return orgiRefreshRate;     }     ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                 latest = proto;             }         }         return latest;     } }])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);              oldFanSpeeds = fanSpeeds;             oldCpuUsages = cpuUsages;         }     } }])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                     });         });     }     ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap      * from the first TextureView is identical to the second TextureView.      */    ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[     }      /*      * Verify behavior of sharing surfaces within one OutputConfiguration      */    ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                 context.getResources().getResourceEntryName(resID));         return path;     }  }])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                 + ""icon_format=PNG,""                 + ""icon_quality=100"";     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                 () -> runWithCaller(callerContext, () -> r.run())         );     } }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));         }     }     ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();         options.inPreferredConfig = Config.HARDWARE;         return options;     } }])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are      * loaded in the correct order.      */    ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[      * This test ensures we can still use properties if no layer specified via Settings      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     /**      * This test ensures system properties are ignored if Settings load a layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**      * This test ensures a debuggable app can load layers from an external package      */    ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures we can still use properties if no GLES layers are specified      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures system properties are ignored if Settings load a GLES layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**      * This test ensures that external GLES layers can be loaded by a debuggable app      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);         Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);     } }])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                 skinVrThrottlingThresholds);     } }])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =             new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);     ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);         activity.waitToFinishRendering();         activity.finish();     } }])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.      */    ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are      * present and advertised accordingly.      */    ])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;      public BasicVulkanGpuTest(String name, int format) {         mFormat = format;     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {         violations.append(message).append("": "").append(e).append(""\\n"");     } }])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));     } }])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);         }     }      /**      *  b/31799885      */    ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);         }     }      /**      *  b/31993456      */    ])', 1)]"	""	""	""	""	""
""	"7.1.4.6"	"H-1-4"	""	"[('android.gputools.cts.CtsRootlessGpuDebugHostTest', 16), ('com.android.server.cts.GraphicsStatsValidationTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('android.graphics.cts.SyncTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.hardware.camera2.cts.ImageReaderTest', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('android.hardware.cts.HardwareBufferTest', 1)]"	"[('getDevice', 16), ('getWidth', 3), ('getHeight', 2), ('cleanup', 2), ('getSimpleName', 1), ('setup', 1), ('teardown', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('setUp', 1), ('run', 1), ('getMessage', 1), ('init', 1), ('getOverrideConfig', 1), ('trim', 1), ('getTime', 1), ('LogScanResult', 1), ('data', 1)]"	"[('CtsGraphicsTestCases', 8), ('CtsCameraTestCases', 4), ('CtsShortcutManagerTestCases', 3), ('CtsMediaTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsViewTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsSensorTestCases', 1), ('CtsDeviceConfigTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.1.4.6/H-1-4"	""">7.1.4.6/H-1-4] MUST report a GPU Frequency tracepoint as specified by the format: power/gpu_frequency. Handheld device implementations: [<a href=""#7_1_display_and_graphics"""""	"07010406.720104"	"GPU"	""	""	""	"[('GPU', 48)]"	""	"[('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation CtsCameraTestCases]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 1), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1)]"	"[('/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 17), ('/com/android/server/cts/GraphicsStatsValidationTest.java', 3), ('/android/hardware/camera2/cts/MultiViewTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 3), ('/android/graphics/cts/BitmapTest.java', 3), ('/android/graphics/cts/CameraGpuTest.java', 3), ('/android/security/cts/Poc17_01.java', 3), ('/android/graphics/cts/SyncTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 2), ('/android/graphics/cts/MediaVulkanGpuTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 2), ('/android/view/cts/ASurfaceControlTest.java', 2), ('/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 2), ('/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 2), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 2), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/android/renderscript/cts/refocus/RefocusTest.java', 2), ('/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/com/android/cts/deviceowner/VrTemperatureTest.java', 2), ('/android/appsecurity/cts/KeySetHostTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/graphics/cts/BasicVulkanGpuTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 2), ('/android/hardware/cts/HardwareBufferTest.java', 2)]"	"[('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er     public void teardown() throws Throwable {         EGL14.eglTerminate(mEglDisplay);     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());             assertEquals(flags, buffer.getUsage());         }     } }])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                          bitmap.getHeight());         return framePixels;     }     ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                 FEATURE_WATCH, FEATURE_TELEVISION);     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                     }                 });     }     ])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.      */    ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";             orgiRefreshRate[1] = """";         }         return orgiRefreshRate;     }     ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                 latest = proto;             }         }         return latest;     } }])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);              oldFanSpeeds = fanSpeeds;             oldCpuUsages = cpuUsages;         }     } }])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                     });         });     }     ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap      * from the first TextureView is identical to the second TextureView.      */    ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[     }      /*      * Verify behavior of sharing surfaces within one OutputConfiguration      */    ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                 context.getResources().getResourceEntryName(resID));         return path;     }  }])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                 + ""icon_format=PNG,""                 + ""icon_quality=100"";     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                 () -> runWithCaller(callerContext, () -> r.run())         );     } }])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));         }     }     ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();         options.inPreferredConfig = Config.HARDWARE;         return options;     } }])', 1), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are      * loaded in the correct order.      */    ])', 1), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[      * This test ensures we can still use properties if no layer specified via Settings      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     /**      * This test ensures system properties are ignored if Settings load a layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**      * This test ensures a debuggable app can load layers from an external package      */    ])', 1), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.      */    ])"", 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base      * directory if enable_gpu_debug_layers is not enabled.      */    ])', 1), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_app does not match.      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base      * directory if gpu_debug_layers are not set.      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures we can still use properties if no GLES layers are specified      */    ])', 1), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**      * This test ensures system properties are ignored if Settings load a GLES layer      */    ])', 1), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**      * This test ensures that external GLES layers can be loaded by a debuggable app      */    ])', 1), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);         Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);     } }])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                 skinVrThrottlingThresholds);     } }])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =             new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);     ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);         activity.waitToFinishRendering();         activity.finish();     } }])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.      */    ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are      * present and advertised accordingly.      */    ])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;      public BasicVulkanGpuTest(String name, int format) {         mFormat = format;     }     ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {         violations.append(message).append("": "").append(e).append(""\\n"");     } }])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));     } }])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);         }     }      /**      *  b/31799885      */    ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);         }     }      /**      *  b/31993456      */    ])', 1)]"	""	""	""	""	""
"168:530476) 7.2.3  . Navigation Keys"	"7.2.3"	"C-3-1"	""	""	""	""	""	"7.2.3/C-3-1"	"""C-3-1] MUST make the Menu function available to applications when targetSdkVersion is less than 10, either by a physical button, a software key, or gestures. This Menu function should be accessible unless hidden together with other navigation functions. If device implementations provide the Assist function, they: """	"07020300.670301"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"169:533444) 7.2.4  . Touchscreen Input"	"7.2.4"	"C-3-3"	""	"[('android.content.res.cts.ConfigTest', 8), ('android.content.res.cts.ConfigurationTest', 5), ('android.app.cts.SystemFeaturesTest', 4), ('android.server.wm.ActivityManagerGetConfigTests', 1)]"	"[('setUp', 5), ('Configuration', 5), ('makeConfiguration', 4), ('size', 3), ('setToDefaults', 2), ('getDefault', 2), ('getInstrumentation', 2), ('toLanguageTag', 2), ('newTheme', 1), ('recycle', 1), ('TotalConfig', 1), ('getTargetContext', 1), ('getPackageManager', 1), ('getUiAutomation', 1), ('ByteArrayOutputStream', 1), ('close', 1), ('toByteArray', 1), ('getGlExtensionsFromDriver', 1), ('getEGL', 1), ('getConfigs', 1), ('addExtensionsForConfig', 1), ('getLocales', 1), ('getTotalRam', 1)]"	"[('CtsContentTestCases', 13), ('CtsAndroidAppTestCases', 4), ('CtsWindowManagerDeviceTestCases', 1)]"	""	"7.2.4/C-3-3"	"""C-3-3] MUST report TOUCHSCREEN_NOTOUCH for the Configuration.touchscreen API field. <h4 id="""	"07020400.670303"	"Configuration.touchscreen TOUCHSCREEN_NOTOUCH"	""	""	""	"[('Configuration.touchscreen', 12), ('TOUCHSCREEN_NOTOUCH', 6)]"	""	"[('[android.content.res.cts.ConfigTest testAllEmptyConfigs CtsContentTestCases]', 2), ('[android.content.res.cts.ConfigTest testAllClassicConfigs CtsContentTestCases]', 2), ('[android.content.res.cts.ConfigTest testPrecedence CtsContentTestCases]', 2), ('[android.app.cts.SystemFeaturesTest testTouchScreenFeatures CtsAndroidAppTestCases]', 2), ('[android.app.cts.SystemFeaturesTest testFakeTouchFeatures CtsAndroidAppTestCases]', 2), ('[android.content.res.cts.ConfigurationTest testSetToDefaults CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testUnset CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocale_overridesSetLocales CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigTest DisplayMetrics CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigTest testCombinations CtsContentTestCases]', 1), ('[android.server.wm.ActivityManagerGetConfigTests isLowRamDevice CtsWindowManagerDeviceTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityManagerGetConfigTests.java', 1)]"	"[('/android/content/res/cts/ConfigTest.java', 10), ('/android/content/res/cts/ConfigurationTest.java', 7), ('/android/app/cts/SystemFeaturesTest.java', 6), ('/android/server/wm/ActivityManagerGetConfigTests.java', 2)]"	"[('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[.densityDpi);         assertEquals(Configuration.COLOR_MODE_UNDEFINED, config.colorMode);     }     ])', 2), ('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[ation.NAVIGATION_NONAV;         mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;     }     ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[Configuration.touchscreen]:[1]:method_text:[ assertEquals(config, readConf);         } finally {             parcel.recycle();         }     } }])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[ation.NAVIGATION_NONAV;         mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;     }     ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[1]:method_text:[{             fail(""Should be able to find application info for this package"");         }     }     ])', 1), ('([2:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[2]:method_text:[, R.configVarying.bag,                 R.styleable.TestConfig, new String[]{""bag h670""});     }     ])', 1), ('([2:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[2]:method_text:[configVarying.bag,                 R.styleable.TestConfig, new String[]{""bag h670""});     }         ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[1]:method_text:[gVarying.bag,                 R.styleable.TestConfig, new String[]{""bag mcc111 mnc222""});     }     ])', 1), ('([3:/android/content/res/cts/ConfigTest.java]:[Configuration.touchscreen]:[3]:method_text:[nfigVarying.bag,                 R.styleable.TestConfig, new String[]{""bag dpad 63x57""});     }     ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[, R.configVarying.bag,                 R.styleable.TestConfig, new String[]{""bag h670""});     }     ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[configVarying.bag,                 R.styleable.TestConfig, new String[]{""bag h670""});     }         ])', 1), ('([1:/android/content/res/cts/ConfigTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[gVarying.bag,                 R.styleable.TestConfig, new String[]{""bag mcc111 mnc222""});     }     ])', 1), ('([2:/android/app/cts/SystemFeaturesTest.java]:[Configuration.touchscreen]:[2]:method_text:[RE_TOUCHSCREEN);             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 1), ('([3:/android/app/cts/SystemFeaturesTest.java]:[Configuration.touchscreen]:[3]:method_text:[UCH_JAZZHAND)) {             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[TOUCHSCREEN_NOTOUCH]:[1]:method_text:[RE_TOUCHSCREEN);             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 1), ('([2:/android/app/cts/SystemFeaturesTest.java]:[TOUCHSCREEN_NOTOUCH]:[2]:method_text:[UCH_JAZZHAND)) {             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 1), ('([1:/android/server/wm/ActivityManagerGetConfigTests.java]:[Configuration.touchscreen]:[1]:method_text:[""Expected features does not match"",                 featureNames, deviceConfig.features);     }     ])', 1)]"	""	""	""	""	""
"169:533444) 7.2.4  . Touchscreen Input"	"7.2.4"	"C-3-2"	""	"[('android.app.cts.SystemFeaturesTest', 4)]"	""	"[('CtsAndroidAppTestCases', 4)]"	""	"7.2.4/C-3-2"	"""C-3-2] MUST report only android.hardware.faketouch. """	"07020400.670302"	"android.hardware.faketouch"	""	""	""	"[('android.hardware.faketouch', 4)]"	""	"[('[android.app.cts.SystemFeaturesTest testTouchScreenFeatures CtsAndroidAppTestCases]', 2), ('[android.app.cts.SystemFeaturesTest testFakeTouchFeatures CtsAndroidAppTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 4)]"	"[('/android/app/cts/SystemFeaturesTest.java', 6)]"	"[('([1:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.faketouch]:[1]:method_text:[RE_TOUCHSCREEN);             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 2), ('([5:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.faketouch]:[5]:method_text:[UCH_JAZZHAND)) {             assertAvailable(PackageManager.FEATURE_FAKETOUCH);         }     }     ])', 2)]"	""	""	""	""	""
"172:544587) 7.2.6.1  . Button Mappings"	"7.2.6.1"	"C-2-1"	""	"[('android.widget.cts.ToastTest', 18), ('android.inputmethodservice.cts.hostside.ShellCommandFromAppTest', 11), ('android.scopedstorage.cts.ScopedStorageTest', 10), ('android.app.cts.DialogTest', 9), ('android.fragment.cts.FragmentReorderingTest', 7), ('android.content.res.cts.ConfigurationTest', 6), ('android.server.wm.DecorInsetSdk29Tests', 4), ('android.server.wm.WindowInsetsAnimationImeTests', 3), ('android.content.res.cts.ResourcesTest', 3), ('com.android.cts.delegate.PackageAccessDelegateTest', 3), ('android.app.cts.WearableExtenderTest', 2), ('android.telephony.cts.PhoneStateListenerTest', 2), ('com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest', 2), ('android.view.cts.ViewTest', 2), ('android.admin.cts.DevicePolicyManagerTest', 2), ('android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest', 2), ('android.fragment.cts.FragmentTransitionTest', 2), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 2), ('android.accessibilityservice.cts.AccessibilityViewTreeReportingTest', 2), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 2), ('android.view.cts.ASurfaceControlTest', 2), ('android.os.cts.HwBinderTest', 1), ('android.autofillservice.cts.LoginActivityCommonTestCase', 1), ('android.preference.cts.PreferenceWithHeadersTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('android.server.wm.WindowInsetsLayoutTests', 1), ('android.car.cts.CarBluetoothTest', 1), ('android.jvmti.cts.JvmtiAttachingHostTest', 1), ('android.autofillservice.cts.inline.InlineLoginActivityTest', 1), ('android.security.cts.NetdTest', 1), ('android.dumpsys.cts.BatteryStatsDumpsysTest', 1), ('android.renderscript.cts.ElementTest', 1), ('android.view.cts.PointerCaptureTest', 1), ('android.view.cts.MenuInflaterTest', 1), ('android.hdmicec.cts.playback.HdmiCecSystemStandbyTest', 1), ('com.android.cts.devicepolicy.LimitAppIconHidingTest', 1), ('android.autofillservice.cts.LoginActivity', 1), ('android.widget.cts.TextViewTest', 1), ('android.server.wm.AlertWindowsTests', 1), ('android.widget.cts.ActionMenuViewTest', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.hdmicec.cts.playback.HdmiCecPowerStatusTest', 1), ('android.widget.cts.MediaControllerTest', 1), ('android.mediav2.cts.MuxerUnitTest', 1), ('android.graphics.cts.FrameRateCtsActivity', 1), ('android.hardware.input.cts.tests.SonyDualshock4ProUsbTest', 1)]"	"[('beginTransaction', 30), ('commit', 30), ('setUp', 8), ('CountCallsFragment', 8), ('Runnable', 8), ('run', 8), ('executePendingTransactions', 8), ('getDevice', 6), ('getTargets', 6), ('size', 6), ('getEpicenterCallback', 6), ('getMessage', 4), ('getInstrumentation', 4), ('trim', 3), ('getUiAutomation', 3), ('Configuration', 2), ('makeConfiguration', 2), ('lock', 2), ('tearDown', 2), ('getTargetContext', 2), ('setupInitialFragment', 2), ('TransitionFragment', 2), ('waitForTransition', 2), ('getPackageName', 2), ('getPackageManager', 2), ('notify', 2), ('getName', 1), ('setToDefaults', 1), ('getDefault', 1), ('myUserHandle', 1), ('assertClearDefaultRestrictions', 1), ('getDefaultEnabledRestrictions', 1), ('getAllowedRestrictions', 1), ('getAction', 1), ('signal', 1), ('unlock', 1), ('waitForAdapterOn', 1), ('waitForAdapterOff', 1), ('enable', 1), ('middlePop', 1), ('popBackStack', 1), ('removeRedundantRemove', 1), ('removeRedundantAdd', 1), ('removeRedundantAttach', 1), ('removeRedundantDetach', 1), ('removeRedundantHide', 1), ('removeRedundantShow', 1), ('getDeviceType', 1), ('setup', 1), ('getApiLevel', 1), ('getCurrentUser', 1), ('getCurrentActivity', 1), ('getContentView', 1), ('login', 1), ('save', 1), ('getAutofillManager', 1), ('cancel', 1), ('transitionsEndUnchanged', 1), ('showHideTransition', 1), ('findBlue', 1), ('findGreen', 1), ('getView', 1), ('getSimpleName', 1), ('init', 1), ('meetsResolutionRequirements', 1), ('createMatchingIntent', 1), ('stream', 1), ('toSet', 1), ('wakeUp', 1), ('getContext', 1), ('cect_11_2_14_2_PowerStatusWhenOff', 1), ('AccessibilityDumpOnFailureRule', 1), ('oneTimeSetup', 1), ('getMainLooper', 1), ('Object', 1), ('Callback', 1), ('getSurface', 1)]"	"[('CtsWidgetTestCases', 21), ('CtsAndroidAppTestCases', 11), ('CtsContentTestCases', 9), ('CtsFragmentTestCases', 9), ('CtsViewTestCases', 6), ('CtsWindowManagerDeviceTestCases', 5), ('CtsAccessibilityServiceTestCases', 4), ('CtsWindowManagerSdk29TestCases', 4), ('CtsAutoFillServiceTestCases', 3), ('CtsTelephonyTestCases', 2), ('CtsAdminTestCases', 2), ('CtsShortcutManagerTestCases', 2), ('CtsSharesheetTestCases', 2), ('CtsOsHostTestCases', 1), ('CtsPreferenceTestCases', 1), ('CtsCarTestCases', 1), ('CtsSecurityTestCases', 1), ('CtsRenderscriptTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsMediaTestCases', 1), ('CtsGraphicsTestCases', 1), ('CtsHardwareTestCases', 1)]"	""	"7.2.6.1/C-2-1"	"""C-2-1] MUST declare the feature flag android.hardware.gamepad Button HID Usage2 Android Button A1 0x09 0x0001 KEYCODE_BUTTON_A (96) B1 0x09 0x0002 KEYCODE_BUTTON_B (97) X1 0x09 0x0004 KEYCODE_BUTTON_X (99) Y1 0x09 0x0005 KEYCODE_BUTTON_Y (100) D-pad up1 D-pad down1 0x01 0x00393 AXIS_HAT_Y4 D-pad left1 D-pad right1 0x01 0x00393 AXIS_HAT_X4 Left shoulder button1 0x09 0x0007 KEYCODE_BUTTON_L1 (102) Right shoulder button1 0x09 0x0008 KEYCODE_BUTTON_R1 (103) Left stick click1 0x09 0x000E KEYCODE_BUTTON_THUMBL (106) Right stick click1 0x09 0x000F KEYCODE_BUTTON_THUMBR (107) Home1 0x0c 0x0223 KEYCODE_HOME (3) Back1 0x0c 0x0224 KEYCODE_BACK (4) 1 KeyEvent 2 The above HID usages must be declared within a Game pad CA (0x01 0x0005). 3 This usage must have a Logical Minimum of 0, a Logical Maximum of 7, a Physical Minimum of 0, a Physical Maximum of 315, Units in Degrees, and a Report Size of 4. The logical value is defined to be the clockwise rotation away from the vertical axis; for example, a logical value of 0 represents no rotation and the up button being pressed, while a logical value of 1 represents a rotation of 45 degrees and both the up and left keys being pressed. 4 MotionEvent Analog Controls1 HID Usage Android Button Left Trigger 0x02 0x00C5 AXIS_LTRIGGER Right Trigger 0x02 0x00C4 AXIS_RTRIGGER Left Joystick 0x01 0x0030 0x01 0x0031 AXIS_X AXIS_Y Right Joystick 0x01 0x0032 0x01 0x0035 AXIS_Z AXIS_RZ 1 MotionEvent <h4 id="""	"07020601.670201"	"android.hardware.gamepad KEYCODE_HOME KEYCODE_BUTTON_X AXIS_Y KEYCODE_BUTTON_B AXIS_Z KEYCODE_BUTTON_R1 KEYCODE_BUTTON_Y KEYCODE_BUTTON_THUMBL AXIS_HAT_X4 AXIS_RTRIGGER KEYCODE_BUTTON_A KEYCODE_BUTTON_L1 AXIS_HAT_Y4 AXIS_LTRIGGER AXIS_X AXIS_RZ KEYCODE_BUTTON_THUMBR HID KEYCODE_BACK"	""	""	""	"[('HID', 107), ('KEYCODE_BACK', 10), ('KEYCODE_HOME', 4)]"	""	"[('[android.app.cts.WearableExtenderTest testWearableExtender CtsAndroidAppTestCases]', 1), ('[android.app.cts.WearableExtenderTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testAutofill_twoDatasets_selectSecondDataset CtsAutoFillServiceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testImeAnimationCallbacksShowAndHide CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testZeroInsetsImeAnimates CtsWindowManagerDeviceTestCases]', 1), ('[android.preference.cts.PreferenceWithHeadersTest testOnIsHidingHeaders CtsPreferenceTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden None]', 1), ('[android.content.res.cts.ConfigurationTest testCompareTo CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testDiff CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetToDefaults CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testUnset CtsContentTestCases]', 1), ('[android.content.res.cts.ConfigurationTest testSetLocale_overridesSetLocales CtsContentTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnAlwaysReportedSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.server.wm.WindowInsetsLayoutTests testSetFitInsetsIgnoringVisibility CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest testSetAllRestrictions None]', 1), ('[android.view.cts.ViewTest testSetScrollContainer CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyPreIme CtsViewTestCases]', 1), ('[android.car.cts.CarBluetoothTest disable CtsCarTestCases]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAgentAppExternal None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetApplicationHidden_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsApplicationHidden_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.autofillservice.cts.inline.InlineLoginActivityTest testAutofill_selectDatasetThenHideInlineSuggestion CtsAutoFillServiceTestCases]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeListFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeListInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandDumpFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandDumpInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandHelpFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandHelpInstant None]', 1), ('[android.security.cts.NetdTest testThrottleSanitization CtsSecurityTestCases]', 1), ('[android.content.res.cts.ResourcesTest testResources CtsContentTestCases]', 1), ('[android.content.res.cts.ResourcesTest testObtainTypedArray CtsContentTestCases]', 1), ('[android.content.res.cts.ResourcesTest testGetValueWithID CtsContentTestCases]', 1), ('[android.dumpsys.cts.BatteryStatsDumpsysTest testBatterystatsOutput None]', 1), ('[android.fragment.cts.FragmentReorderingTest isDetached CtsFragmentTestCases]', 1), ('[android.renderscript.cts.ElementTest testDataType CtsRenderscriptTestCases]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture CtsViewTestCases]', 1), ('[android.view.cts.MenuInflaterTest testInflateAlphabeticShortcutFromXml CtsViewTestCases]', 1), ('[android.widget.cts.ToastTest testConstructorNullContext CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testShow_whenCustomToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testShow_whenTextToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessView_whenCustomToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessMargin_whenCustomToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessGravity_whenCustomToast CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testRemovedCallbackIsNotCalled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testCallback_whenTextToast_isCalled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testCallback_whenCustomToast_isCalled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testTextToastAllowed_whenInTheForeground CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testCustomToastAllowed_whenInTheForeground CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testTextToastAllowed_whenInTheBackground CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testShow_whenCustomToast_sendsAccessibilityEvent CtsWidgetTestCases]', 1), ('[com.android.cts.devicepolicy.LimitAppIconHidingTest uninstallTestApps None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut CtsShortcutManagerTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerRequestPinTest testRequestPinShortcut_multiLaunchers_withDynamic CtsShortcutManagerTestCases]', 1), ('[android.autofillservice.cts.LoginActivity finish CtsAutoFillServiceTestCases]', 1), ('[android.fragment.cts.FragmentTransitionTest getVisibility CtsFragmentTestCases]', 1), ('[android.widget.cts.TextViewTest testUndo_imeEmptyBatch CtsWidgetTestCases]', 1), ('[android.sharesheet.cts.CtsSharesheetDeviceTest contentPreviewTest CtsSharesheetTestCases]', 1), ('[com.android.cts.delegate.PackageAccessDelegateTest testCannotAccessApis None]', 1), ('[com.android.cts.delegate.PackageAccessDelegateTest testCanAccessApis None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testHideView_receiveSubtreeEvent CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testUnhideView_receiveSubtreeEvent CtsAccessibilityServiceTestCases]', 1), ('[android.server.wm.DecorInsetSdk29Tests testDecorView_consumesAllInsets_byDefault CtsWindowManagerSdk29TestCases]', 1), ('[android.server.wm.DecorInsetSdk29Tests testDecorView_consumesNavBar_ifLayoutHideNavIsNotSet CtsWindowManagerSdk29TestCases]', 1), ('[android.server.wm.DecorInsetSdk29Tests testDecorView_doesntConsumeNavBar_ifLayoutHideNavIsSet CtsWindowManagerSdk29TestCases]', 1), ('[android.server.wm.DecorInsetSdk29Tests testDecorView_doesntConsumeNavBar_ifDecorDoesntFitSystemWindows CtsWindowManagerSdk29TestCases]', 1), ('[android.server.wm.AlertWindowsTests testAlertWindowDisallowedSdk25 CtsWindowManagerDeviceTestCases]', 1), ('[android.widget.cts.ActionMenuViewTest testMenuOverflowShowHide CtsWidgetTestCases]', 1), ('[android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility CtsAccessibilityServiceTestCases]', 1), ('[android.widget.cts.MediaControllerTest testShow CtsWidgetTestCases]', 1), ('[android.mediav2.cts.MuxerUnitTest TestName CtsMediaTestCases]', 1), ('[android.graphics.cts.FrameRateCtsActivity DisplayListener CtsGraphicsTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setVisibility_hide CtsViewTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setColorAndBuffer_hide CtsViewTestCases]', 1), ('[android.hardware.input.cts.tests.SonyDualshock4ProUsbTest SonyDualshock4ProUsbTest CtsHardwareTestCases]', 1), ('[android.app.cts.DialogTest testShow CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedCancellable CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testConstructor_protectedNotCancellable CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testOnStartCreateStop CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testOnKeyDownKeyUp CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testContextMenu CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellable_true CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancellable_false CtsAndroidAppTestCases]', 1), ('[android.app.cts.DialogTest testSetCancelMessage CtsAndroidAppTestCases]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testCanCreateHiddenFile None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testCanRenameHiddenFile None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testHiddenDirectory None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testHiddenDirectory_nomedia None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testListHiddenFile None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testManageExternalStorageQueryOtherAppsFile None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testQueryOtherAppsFiles None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testSystemGalleryQueryOtherAppsFiles None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testNoIsolatedStorageQueryOtherAppsFile None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 18), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java', 11), ('/home/gpoor/cts-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 10), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DialogTest.java', 9), ('/home/gpoor/cts-source/cts/tests/fragment/src/android/fragment/cts/FragmentReorderingTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 6), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/testsdk29/src/android/server/wm/DecorInsetSdk29Tests.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PackageAccessDelegateTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 2), ('/home/gpoor/cts-source/cts/tests/fragment/src/android/fragment/cts/FragmentTransitionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivityCommonTestCase.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceWithHeadersTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsLayoutTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarBluetoothTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineLoginActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/NetdTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ElementTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/MenuInflaterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecSystemStandbyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivity.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AlertWindowsTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ActionMenuViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecPowerStatusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/MediaControllerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerUnitTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/FrameRateCtsActivity.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/input/cts/tests/SonyDualshock4ProUsbTest.java', 1)]"	"[('/android/widget/cts/ToastTest.java', 19), ('/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java', 12), ('/android/app/cts/DialogTest.java', 11), ('/android/scopedstorage/cts/ScopedStorageTest.java', 11), ('/android/fragment/cts/FragmentReorderingTest.java', 8), ('/android/content/res/cts/ConfigurationTest.java', 7), ('/android/server/wm/DecorInsetSdk29Tests.java', 5), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 4), ('/android/view/cts/ViewTest.java', 4), ('/android/content/res/cts/ResourcesTest.java', 4), ('/com/android/cts/delegate/PackageAccessDelegateTest.java', 4), ('/android/app/cts/WearableExtenderTest.java', 3), ('/android/telephony/cts/PhoneStateListenerTest.java', 3), ('/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 3), ('/android/admin/cts/DevicePolicyManagerTest.java', 3), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 3), ('/android/fragment/cts/FragmentTransitionTest.java', 3), ('/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 3), ('/android/view/cts/ASurfaceControlTest.java', 3), ('/android/os/cts/HwBinderTest.java', 2), ('/android/autofillservice/cts/LoginActivityCommonTestCase.java', 2), ('/android/preference/cts/PreferenceWithHeadersTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/android/server/wm/WindowInsetsLayoutTests.java', 2), ('/android/car/cts/CarBluetoothTest.java', 2), ('/android/jvmti/cts/JvmtiAttachingHostTest.java', 2), ('/android/autofillservice/cts/inline/InlineLoginActivityTest.java', 2), ('/android/security/cts/NetdTest.java', 2), ('/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 2), ('/android/renderscript/cts/ElementTest.java', 2), ('/android/view/cts/PointerCaptureTest.java', 2), ('/android/view/cts/MenuInflaterTest.java', 2), ('/android/hdmicec/cts/playback/HdmiCecSystemStandbyTest.java', 2), ('/com/android/cts/devicepolicy/LimitAppIconHidingTest.java', 2), ('/android/autofillservice/cts/LoginActivity.java', 2), ('/android/widget/cts/TextViewTest.java', 2), ('/android/server/wm/AlertWindowsTests.java', 2), ('/android/widget/cts/ActionMenuViewTest.java', 2), ('/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 2), ('/android/hdmicec/cts/playback/HdmiCecPowerStatusTest.java', 2), ('/android/widget/cts/MediaControllerTest.java', 2), ('/android/mediav2/cts/MuxerUnitTest.java', 2), ('/android/graphics/cts/FrameRateCtsActivity.java', 2), ('/android/hardware/input/cts/tests/SonyDualshock4ProUsbTest.java', 2)]"	"[('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[1]:method_text:[ceiver)} returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 3), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[1]:method_text:[    * receiver)} returns {@link SecurityException} for instant apps.      */     @AppModeInstant    ])', 3), ('([5:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[5]:method_text:[rAppMusic, otherAppPdf, otherHiddenFile);             uninstallApp(TEST_APP_A);         }     }     ])', 3), ('([6:/android/content/res/cts/ConfigurationTest.java]:[HID]:[6]:method_text:[.densityDpi);         assertEquals(Configuration.COLOR_MODE_UNDEFINED, config.colorMode);     }     ])', 2), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[HID]:[3]:method_text:[ (SecurityException e) {             assertProfileOwnerMessage(e.getMessage());         }     }     ])', 2), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[1]:method_text:[eceiver)}      * returns {@link SecurityException} for instant apps.      */     @AppModeInstant    ])', 2), ('([2:/android/widget/cts/ToastTest.java]:[HID]:[2]:method_text:[ = SystemClock.uptimeMillis() - start;          assertTrue(longDuration > shortDuration);     }     ])', 2), ('([3:/android/widget/cts/ToastTest.java]:[HID]:[3]:method_text:[ assertTrue(toastShown.block(TIME_OUT));         assertTrue(toastHidden.block(TIME_OUT));     }     ])', 2), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[;          mActivityRule.runOnUiThread(mToast::show);          assertShowAndHide(mToast);     }     ])', 2), ('([2:/android/app/cts/WearableExtenderTest.java]:[HID]:[2]:method_text:[(1, extender.getPages().size());         assertEquals(page2, extender.getPages().get(0));     }     ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[HID]:[2]:method_text:[ion.Builder(0, ""title"", null);     }      /** Notification.Action.WearableExtender functions */     ])', 1), ('([3:/android/os/cts/HwBinderTest.java]:[HID]:[3]:method_text:[fset), 0.0);             assertEquals(2.0, blob.getDouble(offset + 8), 0.0);         }),     };     ])', 1), ('([1:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[HID]:[1]:method_text:[             findNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();     }     ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[HID]:[2]:method_text:[ows Exception {         initActivity(false /* useFloating */);         testShowAndHide();     }     ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[HID]:[1]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([3:/android/server/wm/WindowInsetsAnimationImeTests.java]:[HID]:[3]:method_text:[// to ensure it.         builder.setNavigationBarColor(Color.BLACK);         return builder;     } }])', 1), ('([2:/android/preference/cts/PreferenceWithHeadersTest.java]:[HID]:[2]:method_text:[public void testOnIsHidingHeaders() {         assertFalse(mActivity.onIsHidingHeaders());     } } ])', 1), ('([8:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[HID]:[8]:method_text:[S_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                     .build());         }     }     ])', 1), ('([2:/android/content/res/cts/ConfigurationTest.java]:[HID]:[2]:method_text:[ation.NAVIGATION_NONAV;         mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;     }     ])', 1), ('([4:/android/content/res/cts/ConfigurationTest.java]:[HID]:[4]:method_text:[fontScale = 3;         cfg2.fontScale = 2;         assertEquals(1, cfg1.compareTo(cfg2));     }     ])', 1), ('([13:/android/content/res/cts/ConfigurationTest.java]:[HID]:[13]:method_text:[FIG_FONT_SCALE                 | ActivityInfo.CONFIG_COLOR_MODE, mConfigDefault, config);     }     ])', 1), ('([6:/android/content/res/cts/ConfigurationTest.java]:[HID]:[6]:method_text:[ assertEquals(config, readConf);         } finally {             parcel.recycle();         }     } }])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[HID]:[1]:method_text:[will be public in S, this test      * is commented and will be un-commented in Android S.      *    ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[HID]:[1]:method_text:[EPORTED_SIGNAL_STRENGTH without LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH      * permission.      *    ])', 1), ('([1:/android/server/wm/WindowInsetsLayoutTests.java]:[HID]:[1]:method_text:[      assertEquals(locationOnScreen[1] /* expected y */, windowMetricsBounds.top);         }     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[HID]:[1]:method_text:[abledRestrictions();      /**      * Test restrictions that should be enabled by default      */    ])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[HID]:[1]:method_text:[otSetUserRestriction(r);         }     }      /**      * Clear all allowed restrictions.      */    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[HID]:[1]:method_text:[omInputMethod(mockView.getWindowToken(), 0));         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[KEYCODE_BACK]:[1]:method_text:[view.hasCalledDispatchKeyEventPreIme());         assertTrue(view.hasCalledOnKeyPreIme());     }     ])', 1), ('([2:/android/car/cts/CarBluetoothTest.java]:[HID]:[2]:method_text:[ented), or for the     // configured timeout. If all required profiles connect, the test passes.    ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[KEYCODE_HOME]:[1]:method_text:[   CLog.e(""Failed cleaning up library on device"");                 }             }         }     } }])', 1), ('([1:/android/autofillservice/cts/inline/InlineLoginActivityTest.java]:[HID]:[1]:method_text:[             findNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();     }     ])', 1), ('([3:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[3]:method_text:[}      * returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[1]:method_text:[}      * returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[HID]:[1]:method_text:[runDeviceTestMethodWithoutHiddenApiCheck(DeviceTestConstants.TEST_SHELL_COMMAND_HELP, true);     } }])', 1), ('([3:/android/security/cts/NetdTest.java]:[HID]:[3]:method_text:[eration. */             return;         }          /* should not reach here if vulnerable */     } }])', 1), ('([2:/android/content/res/cts/ResourcesTest.java]:[HID]:[2]:method_text:[r.getConfiguration();         assertEquals(Configuration.KEYBOARDHIDDEN_YES, c.keyboard);     }     ])', 1), ('([3:/android/content/res/cts/ResourcesTest.java]:[HID]:[3]:method_text:[\' from resource 0x"" + Integer.toHexString(resId),                 expectedValue, actual);     }     ])', 1), ('([1:/android/content/res/cts/ResourcesTest.java]:[HID]:[1]:method_text:[  + "": in resource 0x"" + Integer.toHexString(resid),                 expected, v.string);     }     ])', 1), ('([5:/android/dumpsys/cts/BatteryStatsDumpsysTest.java]:[HID]:[5]:method_text:[     * Tests the output of ""dumpsys gfxinfo framestats"".      *      * @throws Exception      */    ])', 1), ('([1:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[1]:method_text:[a view after adding it is optimized into no     // View being created. Hide still gets notified.    ])', 1), ('([3:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[3]:method_text:[ttachCount);     }      // Ensure that removing and adding the same view results in no operation    ])', 1), ('([1:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[1]:method_text:[teViewCount);     }      // detaching, then attaching results in on change. Hide still functions    ])', 1), (""([3:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[3]:method_text:[onDetachCount);     }      // attaching, then detaching shouldn't result in a View being created    ])"", 1), ('([7:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[7]:method_text:[t);         assertFalse(fragment1.isHidden());     }      // show, then hide should optimize out    ])', 1), ('([17:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[17]:method_text:[ls(1, fragment1.onHideCount);     }      // hiding and showing the same view should optimize out    ])', 1), ('([5:/android/fragment/cts/FragmentReorderingTest.java]:[HID]:[5]:method_text:[ized to not remove/add should be in its correct position after     // the transaction completes.    ])', 1), ('([1:/android/renderscript/cts/ElementTest.java]:[HID]:[1]:method_text:[ption e) {                 }                 break;             }             }         }     }     ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[KEYCODE_BACK]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());         assertFalse(mActivity.hasPointerCapture());     }     ])', 1), (""([6:/android/view/cts/MenuInflaterTest.java]:[HID]:[6]:method_text:[als('c', mMenu.findItem(R.id.hidden_by_group).getAlphabeticShortcut());     }      @UiThreadTest    ])"", 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemStandbyTest.java]:[KEYCODE_HOME]:[1]:method_text:[-2      * Tests that the device goes into standby when a <STANDBY> message is broadcast.      */    ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[.getUiAutomation();         mLayoutListener = () -> mLayoutDone = true;     }      @UiThreadTest    ])', 1), ('([5:/android/widget/cts/ToastTest.java]:[HID]:[5]:method_text:[USTOM_TOAST_TEXT);                     mToast.setView(view);                 }         );     }     ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[rtEquals(View.VISIBLE, view.getVisibility());         assertShowAndHideCustomToast(view);     }     ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[tyRule.runOnUiThread(mToast::show);          assertShowAndHide(mToast);     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[assertSame(imageView, mToast.getView());         assertShowAndHideCustomToast(imageView);     }     ])', 1), ('([2:/android/widget/cts/ToastTest.java]:[HID]:[2]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);         }     }     ])', 1), ('([2:/android/widget/cts/ToastTest.java]:[HID]:[2]:method_text:[("" "")                 .append(value);         SystemUtil.runShellCommand(cmd.toString());     }     ])', 1), ('([2:/android/widget/cts/ToastTest.java]:[HID]:[2]:method_text:[          assertTrue(xy1[0] > xy2[0]);             assertTrue(xy1[1] < xy2[1]);         }     }     ])', 1), ('([3:/android/widget/cts/ToastTest.java]:[HID]:[3]:method_text:[XY[0]);         assertEquals(bottomXY[1] - yOffset, bottomOffsetXY[1]);     }      @UiThreadTest    ])', 1), ('([7:/android/widget/cts/ToastTest.java]:[HID]:[7]:method_text:[st);         assertFalse(toastShown.isDone());         assertFalse(toastHidden.isDone());     }     ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[HID]:[1]:method_text:[  mActivityRule.runOnUiThread(mToast::show);          assertShowAndHideCustomToast(view);     }     ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[HID]:[6]:method_text:[  @Override         public void onToastHidden() {             mToastHidden.open();         }     } }])', 1), ('([2:/com/android/cts/devicepolicy/LimitAppIconHidingTest.java]:[HID]:[2]:method_text:[ITY_APK);         getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[HID]:[1]:method_text:[()                     ;         });          Log.i(TAG, ""Done testing with launcher1."");     }     ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[HID]:[1]:method_text:[ame as {@link ShortcutManager#requestPinShortcut} except the app has no main activities.      */    ])', 1), ('([1:/android/autofillservice/cts/LoginActivity.java]:[HID]:[1]:method_text:[re checking autofill      * behavior.      * <pre>      * An example usage is:      * <code>      * ])', 1), ('([1:/android/fragment/cts/FragmentTransitionTest.java]:[HID]:[1]:method_text:[rCallback());     }      // Ensure that transitions are done when a fragment is shown and hidden    ])', 1), ('([2:/android/fragment/cts/FragmentTransitionTest.java]:[HID]:[2]:method_text:[gment2);     }      // Ensure that transitions are done when a fragment is attached and detached    ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[HID]:[1]:method_text:[uItem(android.R.id.redo);         assertEquals(""flower"", mTextView.getText().toString());     }     ])', 1), ('([1:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[HID]:[1]:method_text:[    * total run time low, jam as many tests are possible into each visible test portion.      */    ])', 1), ('([3:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[HID]:[3]:method_text:[indObject(By.textContains(containsText)),                 WAIT_AND_ASSERT_FOUND_TIMEOUT_MS);     } }])', 1), ('([1:/com/android/cts/delegate/PackageAccessDelegateTest.java]:[HID]:[1]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([5:/com/android/cts/delegate/PackageAccessDelegateTest.java]:[HID]:[5]:method_text:[agesSuspended(null, new String[] {TEST_APP_PKG}, true /* suspend */);                 });     }     ])', 1), ('([9:/com/android/cts/delegate/PackageAccessDelegateTest.java]:[HID]:[9]:method_text:[legatedScopes(null, packageName);         return scopes.contains(DELEGATION_PACKAGE_ACCESS);     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[HID]:[1]:method_text:[ge;                         }, TIMEOUT_ASYNC_PROCESSING);         awaitedEvent.recycle();     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[HID]:[2]:method_text:[hildDrawingOrder(int childCount, int i) {             return childDrawingOrder[i];         }     } }])', 1), ('([1:/android/server/wm/DecorInsetSdk29Tests.java]:[HID]:[1]:method_text:[insets"", activity.mLastContentInsets);          assertContentViewLocationMatchesInsets();     }     ])', 1), ('([2:/android/server/wm/DecorInsetSdk29Tests.java]:[HID]:[2]:method_text:[ndowInsets.Type.systemBars()).bottom);          assertContentViewLocationMatchesInsets();     }     ])', 1), ('([2:/android/server/wm/DecorInsetSdk29Tests.java]:[HID]:[2]:method_text:[ontentInsets.getSystemWindowInsets());          assertContentViewLocationMatchesInsets();     }     ])', 1), ('([1:/android/server/wm/DecorInsetSdk29Tests.java]:[HID]:[1]:method_text:[stContentInsets.getSystemWindowInsets());          assertContentViewLocationMatchesInsets();     } }])', 1), ('([4:/android/server/wm/AlertWindowsTests.java]:[HID]:[4]:method_text:[      AppOpsUtils.setOpMode(activityName.getPackageName(), OPSTR_SYSTEM_ALERT_WINDOW, mode);     } }])', 1), ('([3:/android/widget/cts/ActionMenuViewTest.java]:[HID]:[3]:method_text:[enuView::hideOverflowMenu);         assertFalse(mActionMenuView.isOverflowMenuShowing());     }     ])', 1), ('([1:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[KEYCODE_HOME]:[1]:method_text:[ /**      * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecPowerStatusTest.java]:[KEYCODE_HOME]:[1]:method_text:[device */             device.executeShellCommand(""input keyevent KEYCODE_WAKEUP"");         }     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[HID]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);     }      @MediumTest     @Presubmit    ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[HID]:[3]:method_text:[List())));         assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));     }      @MediumTest    ])', 1), ('([1:/android/widget/cts/MediaControllerTest.java]:[HID]:[1]:method_text:[());         }          return mActivity.getFileStreamPath(VIDEO_NAME).getAbsolutePath();     }     ])', 1), ('([1:/android/mediav2/cts/MuxerUnitTest.java]:[HID]:[1]:method_text:[taInfo.flags = 0;             muxer.writeSampleData(trackID, metaBuff, metaInfo);         }         ])', 1), ('([1:/android/graphics/cts/FrameRateCtsActivity.java]:[HID]:[1]:method_text:[        if (surface != null) {                 surface.release();             }         }     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[HID]:[1]:method_text:[return pixelCount > 9000 && pixelCount < 11000;                     }                 });     }     ])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[HID]:[1]:method_text:[        return pixelCount > 9000 && pixelCount < 11000;                 }             });     }     ])', 1), ('([1:/android/hardware/input/cts/tests/SonyDualshock4ProUsbTest.java]:[HID]:[1]:method_text:[getKernelVersion();         return compareMajorMinorVersion(kVersionString, ""3.18"") >= 0;     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[HID]:[1]:method_text:[ assertTrue(d.isShowing());         dialogDismiss(d);         assertFalse(d.isShowing());     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[vent.KEYCODE_BACK);         PollingCheck.waitFor(() -> mActivity.onCancelListenerCalled);     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[  sendKeys(KeyEvent.KEYCODE_BACK);         assertFalse(mActivity.onCancelListenerCalled);     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[CODE_BACK);         PollingCheck.waitFor(() -> {             return d.isOnStopCalled; });     }     ])', 1), ('([2:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[2]:method_text:[ssertEquals(KeyEvent.KEYCODE_BACK, d.keyDownCode);         assertTrue(d.onKeyDownReturn);     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[lled should be true, see bug 1716918.         assertFalse(d.isOnContextMenuClosedCalled);     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[     sendKeys(KeyEvent.KEYCODE_BACK);         PollingCheck.waitFor(() -> !d.isShowing());     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[isShowing());         sendKeys(KeyEvent.KEYCODE_BACK);         assertTrue(d.isShowing());     }     ])', 1), ('([1:/android/app/cts/DialogTest.java]:[KEYCODE_BACK]:[1]:method_text:[    * 2. set onDismissListener to null, it will not changed flag after dialog dismissed.      */    ])', 1), ('([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[1]:method_text:[ts()).isFalse();     }      /**      * Test that apps can create and delete hidden file.      */    ])', 1), ('([15:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[15]:method_text:[eFile.delete();         }     }      /**      * Test that apps can rename a hidden file.      */    ])', 1), ('([21:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[21]:method_text:[   }      /**      * Test that files in hidden directory have MEDIA_TYPE=MEDIA_TYPE_NONE      */    ])', 1), ('([24:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[24]:method_text:[    /**      * Test that files in directory with nomedia have MEDIA_TYPE=MEDIA_TYPE_NONE      */    ])', 1), ('([6:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[6]:method_text:[/**      * Test that only file manager and app that created the hidden file can list it.      */    ])', 1), ('([15:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[15]:method_text:[         hiddenImageFile.delete();             uninstallAppNoThrow(TEST_APP_A);         }     }     ])', 1), (""([6:/android/scopedstorage/cts/ScopedStorageTest.java]:[HID]:[6]:method_text:[hey contain other apps' contents that      * System Gallery doesn't have read access to.      */    ])"", 1)]"	""	""	""	""	""
"174:551285) 7.3  . Sensors"	"7.3"	"C-1-6"	""	"[('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 2), ('android.media.cts.AudioRecordTest', 2), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 2), ('android.hardware.cts.SensorTest', 2), ('android.telephony.cts.SmsManagerTest', 2), ('android.view.inputmethod.cts.InputMethodServiceTest', 2), ('android.print.cts.PrinterCapabilitiesTest', 1), ('android.server.wm.ActivityViewTest', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.view.inputmethod.cts.KeyboardVisibilityControlTest', 1), ('android.server.wm.KeyguardLockedTests', 1), ('android.inputmethodservice.cts.devicetest.MultiUserDeviceTest', 1), ('android.server.wm.MultiDisplaySystemDecorationTests', 1), ('android.view.inputmethod.cts.FocusHandlingTest', 1), ('android.print.cts.PrintJobTest', 1), ('android.print.cts.InterfaceForAppsTest', 1), ('android.view.inputmethod.cts.ImeInsetsVisibilityTest', 1), ('android.hardware.consumerir.cts.ConsumerIrTest', 1), ('android.print.cts.PrintAttributesTest', 1), ('android.webkit.cts.GeolocationTest', 1), ('android.net.cts.DnsTest', 1), ('android.hardware.camera2.cts.CaptureResultTest', 1), ('android.server.wm.WindowInsetsControllerTests', 1), ('android.location.cts.coarse.LocationManagerCoarseTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.hardware.camera2.cts.DngCreatorTest', 1), ('android.view.inputmethod.cts.PackageVisibilityTest', 1)]"	"[('size', 4), ('getDefaults', 4), ('build', 3), ('UnlockScreenRule', 3), ('getMock', 2), ('getSession', 2), ('toString', 2), ('getMediaSizes', 2), ('getResolutions', 2), ('hasWindowFocus', 2), ('initiate_getCurrentPosition', 2), ('sanePrinterCapabilityInfos', 1), ('getService', 1), ('getCapabilities', 1), ('getMediaSize', 1), ('getResolution', 1), ('getColorModes', 1), ('getColorMode', 1), ('getDuplexModes', 1), ('getDuplexMode', 1), ('getMinMargins', 1), ('requestFocus', 1), ('get', 1), ('getViewTreeObserver', 1), ('advancedOption', 1), ('getValidTimestamp', 1), ('elapsedRealtimeNanos', 1), ('getInvalidTimestamp', 1), ('changedPrintJobInfo', 1), ('Builder', 1), ('getPrinters', 1), ('gotLocation', 1), ('errorDenied', 1), ('errorUnavailable', 1), ('errorTimeout', 1)]"	"[('CtsInputMethodTestCases', 9), ('CtsSensorTestCases', 5), ('CtsPrintTestCases', 4), ('CtsWindowManagerDeviceTestCases', 4), ('CtsMediaTestCases', 2), ('CtsTelephonyTestCases', 2), ('CtsCameraTestCases', 2), ('CtsHardwareTestCases', 1), ('CtsWebkitTestCases', 1), ('CtsLocationCoarseTestCases', 1)]"	""	"7.3/C-1-6"	"""C-1-6] MUST report the event time in nanoseconds as defined in the Android SDK documentation, representing the time the event happened and synchronized with the SystemClock.elapsedRealtimeNano() clock.  | C-1-6] MUST set a non-zero resolution for all sensors, and report the value via the Sensor.getResolution() API method. Some sensor types are composite, meaning they can be derived from data provided by one or more other sensors. (Examples include the orientation sensor and the linear acceleration sensor.) Device implementations: SHOULD implement these sensor types, when they include the prerequisite physical sensors as described in sensor types. If device implementations include a composite sensor, they: """	"07030000.670106"	"elapsedRealtimeNano() getResolution() Sensor.getResolution SystemClock.elapsedRealtimeNano"	""	""	""	"[('SystemClock.elapsedRealtimeNano', 27), ('getResolution()', 5), ('Sensor.getResolution', 1)]"	""	"[('[android.hardware.cts.SensorTest testBatchAndFlushWithMultipleSensors CtsSensorTestCases]', 2), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[android.media.cts.AudioRecordTest testTimestamp CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration CtsMediaTestCases]', 1), ('[android.print.cts.PrinterCapabilitiesTest onPrinterDiscoverySessionCreateCalled CtsPrintTestCases]', 1), ('[android.server.wm.ActivityViewTest testInputMethod CtsWindowManagerDeviceTestCases]', 1), ('[android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.server.wm.KeyguardLockedTests testImeShowsAfterLockScreenOnEditorTap CtsWindowManagerDeviceTestCases]', 1), ('[android.inputmethodservice.cts.devicetest.MultiUserDeviceTest testConnectingToTheSameUserIme None]', 1), ('[android.server.wm.MultiDisplaySystemDecorationTests testImeWindowCanShownWhenActivityMovedToDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.print.cts.PrintJobTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest uptimeMillis CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.print.cts.InterfaceForAppsTest currentTimeMillis CtsPrintTestCases]', 1), ('[android.view.inputmethod.cts.ImeInsetsVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.telephony.cts.SmsManagerTest testSmsRetriever CtsTelephonyTestCases]', 1), ('[android.telephony.cts.SmsManagerTest testSmsBlocking CtsTelephonyTestCases]', 1), ('[android.hardware.consumerir.cts.ConsumerIrTest test_timing CtsHardwareTestCases]', 1), ('[android.print.cts.PrintAttributesTest isEmpty CtsPrintTestCases]', 1), ('[android.webkit.cts.GeolocationTest GeolocationTest CtsWebkitTestCases]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 1), ('[android.server.wm.WindowInsetsControllerTests testWindowInsetsController_availableAfterAddView CtsWindowManagerDeviceTestCases]', 1), ('[android.location.cts.coarse.LocationManagerCoarseTest testGnssProvidedClock CtsLocationCoarseTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail CtsCameraTestCases]', 1), ('[android.view.inputmethod.cts.PackageVisibilityTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testSendDownUpKeyEvents CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testOnUpdateCursorAnchorInfo CtsInputMethodTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SmsManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/print/src/android/print/cts/PrinterCapabilitiesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardLockedTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySystemDecorationTests.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/print/src/android/print/cts/PrintJobTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/print/src/android/print/cts/InterfaceForAppsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/consumerir/cts/ConsumerIrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/GeolocationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsControllerTests.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_coarse/src/android/location/cts/coarse/LocationManagerCoarseTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/PackageVisibilityTest.java', 1)]"	"[('/android/hardware/cts/SensorTest.java', 4), ('/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/android/media/cts/AudioRecordTest.java', 3), ('/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 3), ('/android/telephony/cts/SmsManagerTest.java', 3), ('/android/view/inputmethod/cts/InputMethodServiceTest.java', 3), ('/android/print/cts/PrinterCapabilitiesTest.java', 2), ('/android/server/wm/ActivityViewTest.java', 2), ('/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 2), ('/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 2), ('/android/server/wm/KeyguardLockedTests.java', 2), ('/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java', 2), ('/android/server/wm/MultiDisplaySystemDecorationTests.java', 2), ('/android/view/inputmethod/cts/FocusHandlingTest.java', 2), ('/android/print/cts/PrintJobTest.java', 2), ('/android/print/cts/InterfaceForAppsTest.java', 2), ('/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java', 2), ('/android/hardware/consumerir/cts/ConsumerIrTest.java', 2), ('/android/print/cts/PrintAttributesTest.java', 2), ('/android/webkit/cts/GeolocationTest.java', 2), ('/android/net/cts/DnsTest.java', 2), ('/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/android/server/wm/WindowInsetsControllerTests.java', 2), ('/android/location/cts/coarse/LocationManagerCoarseTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/hardware/camera2/cts/DngCreatorTest.java', 2), ('/android/view/inputmethod/cts/PackageVisibilityTest.java', 2)]"	"[('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[able window hosted by a different process      * temporarily becomes the focused window.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[Matcher() {         return event -> TextUtils.equals(""onFinishInput"", event.getEventName());     } }])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[                 record.release();                 record = null;             }         }     }     ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[nstrumentation().getTargetContext();     }      /*      * Microphone Direction API tests      */    ])', 1), ('([1:/android/print/cts/PrinterCapabilitiesTest.java]:[getResolution()]:[1]:method_text:[      * of historical reasons.      *      * @throws Exception If anything is unexpected      */    ])', 1), ('([1:/android/server/wm/ActivityViewTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[     }          ActivityView getActivityView() {             return mActivityView;         }     } }])', 1), ('([1:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[ /**      * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.      */    ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[onNull String marker) {         return launchTestActivity(marker, getTestMarker()).first;     }     ])', 1), ('([1:/android/server/wm/KeyguardLockedTests.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[_PINNED)                 .setActivityType(ACTIVITY_TYPE_STANDARD)                 .build());     } }])', 1), ('([1:/android/inputmethodservice/cts/devicetest/MultiUserDeviceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[EOUT_MILLISEC, TimeUnit.MILLISECONDS);         assertEquals(Process.myUserHandle(), result);     } }])', 1), ('([3:/android/server/wm/MultiDisplaySystemDecorationTests.java]:[SystemClock.elapsedRealtimeNano]:[3]:method_text:[e);         assertEquals(""Display bounds not the same"", displayBounds, displayBoundsForIme);     } }])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[KER_PREFIX + ""/""  + SystemClock.elapsedRealtimeNanos();     }      @FlakyTest(bugId = 149246840)    ])', 1), ('([1:/android/print/cts/PrintJobTest.java]:[getResolution()]:[1]:method_text:[     if (!testSuccess[0]) {             throw new Exception(""Did not succeed"");         }     }     ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[ }       /**      * Test that the verification passes when there are not missing events.      */    ])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[tion(expectedUs);         verification.addSensorEvents(events);         return verification;     } }])', 1), ('([1:/android/print/cts/InterfaceForAppsTest.java]:[getResolution()]:[1]:method_text:[etCreationTime());         assertTrue(job.getInfo().getCreationTime() <= afterStart + 5000);     } }])', 1), ('([8:/android/hardware/cts/SensorTest.java]:[getResolution()]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);         }     }      @SuppressWarnings(""deprecation"")    ])', 1), ('([8:/android/hardware/cts/SensorTest.java]:[Sensor.getResolution]:[8]:method_text:[ sensor.getFifoReservedEventCount() == 0);         }     }      @SuppressWarnings(""deprecation"")    ])', 1), ('([1:/android/view/inputmethod/cts/ImeInsetsVisibilityTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[     }      @Rule     public final UnlockScreenRule mUnlockScreenRule = new UnlockScreenRule();     ])', 1), (""([2:/android/telephony/cts/SmsManagerTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[network doesn't support Data(binary) SMS message.             // Skip the test.         }     }     ])"", 1), (""([1:/android/telephony/cts/SmsManagerTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[SM network doesn't support Multipart SMS message.             // Skip the test.         }     }     ])"", 1), ('([4:/android/hardware/consumerir/cts/ConsumerIrTest.java]:[SystemClock.elapsedRealtimeNano]:[4]:method_text:[ assertTrue(msg, newTime - currentTime <= totalXmitTimeNanos * (1.0 + margin));         }     }     ])', 1), ('([2:/android/print/cts/PrintAttributesTest.java]:[getResolution()]:[2]:method_text:[ibutes to the first selection.      *      * @throws Exception If anything is unexpected      */    ])', 1), ('([1:/android/webkit/cts/GeolocationTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[ept, mRetain);         }     }      // Test loading a page and accepting the domain for one load    ])', 1), ('([4:/android/net/cts/DnsTest.java]:[SystemClock.elapsedRealtimeNano]:[4]:method_text:[ECONDS));         } finally {             mCm.unregisterNetworkCallback(callback);         }     } }])', 1), ('([2:/android/hardware/camera2/cts/CaptureResultTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[* End generated code      *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/ }])', 1), ('([1:/android/server/wm/WindowInsetsControllerTests.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[ck(ANIMATION_CALLBACK);             getWindow().getInsetsController().show(ime());         }     } }])', 1), ('([2:/android/location/cts/coarse/LocationManagerCoarseTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[  return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LOCATION_GPS);     } }])', 1), ('([5:/android/hardware/cts/SensorDirectReportTest.java]:[SystemClock.elapsedRealtimeNano]:[5]:method_text:[der.nativeOrder());          return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned     } }])', 1), ('([2:/android/hardware/camera2/cts/DngCreatorTest.java]:[SystemClock.elapsedRealtimeNano]:[2]:method_text:[s test      * using:      * adb shell setprop log.tag.DngCreatorTest VERBOSE      * </p>      */    ])', 1), ('([1:/android/view/inputmethod/cts/PackageVisibilityTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[il.hasObject(By.pkg(TEST_ACTIVITY.getPackageName()).depth(0)), timeout);     }      @AppModeFull    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[putMethodService#onUpdateCursorAnchorInfo(CursorAnchorInfo)}      * will be called back.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[SystemClock.elapsedRealtimeNano]:[1]:method_text:[fo);             assertEquals(receivedCursorAnchorInfo, originalCursorAnchorInfo);         }     } }])', 1)]"	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-3-4"	""	"[('android.admin.cts.DevicePolicyManagerTest', 69), ('android.telephony.cts.PhoneStateListenerTest', 27), ('android.hardware.camera2.cts.CameraDeviceTest', 10), ('android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest', 7), ('android.appsecurity.cts.DirectBootHostTest', 5), ('android.provider.cts.contacts.ContactsContract_PinnedPositionsTest', 5), ('android.provider.cts.contacts.VoicemailContractTest', 5), ('android.os.cts.SeccompTest', 4), ('android.telephony.embms.cts.MbmsDownloadReceiverTest', 4), ('android.app.usage.cts.UsageReportingTest', 4), ('android.view.cts.ViewTest', 3), ('android.app.cts.WearableExtenderTest', 2), ('android.security.cts.AslrTest', 2), ('android.media.cts.AudioRecordingConfigurationTest', 2), ('android.media.cts.DecoderTest', 2), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 1), ('android.app.cts.BadProviderTest', 1), ('android.server.wm.WindowInsetsAnimationImeTests', 1), ('android.location.cts.gnss.GnssNavigationMessageRegistrationTest', 1), ('android.content.pm.cts.InstantAppTest', 1), ('android.content.pm.cts.shortcut.backup.launcher1.ShortcutManagerPostBackupTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.media.cts.VisualizerTest', 1), ('android.bootstats.cts.BootStatsHostTest', 1), ('android.jvmti.cts.JvmtiAttachingHostTest', 1)]"	"[('setUp', 7), ('tearDown', 6), ('getDevice', 5), ('ContentValues', 3), ('getInstrumentation', 2), ('getContentResolver', 2), ('getAbi', 1), ('getBuild', 1), ('getTargetContext', 1), ('cleanup', 1), ('getUiAutomation', 1), ('readLine', 1), ('matches', 1), ('size', 1), ('getContext', 1), ('BroadcastReceiver', 1), ('getIntent', 1), ('build', 1), ('MbmsDownloadReceiver', 1), ('IntentFilter', 1), ('getFilesDir', 1), ('mkdir', 1), ('getCanonicalPath', 1)]"	"[('CtsAdminTestCases', 69), ('CtsTelephonyTestCases', 31), ('CtsCameraTestCases', 10), ('CtsContactsProviderTestCases', 6), ('CtsMediaTestCases', 6), ('CtsProviderTestCases', 5), ('CtsOsHostTestCases', 4), ('CtsUsageStatsTestCases', 4), ('CtsAndroidAppTestCases', 3), ('CtsViewTestCases', 3), ('CtsSecurityTestCases', 2), ('CtsWindowManagerDeviceTestCases', 1), ('CtsLocationGnssTestCases', 1), ('CtsContentTestCases', 1)]"	""	"7.3.10/C-3-4"	"""C-3-4] MUST challenge the user for the recommended primary authentication (e.g. PIN, pattern, password) once every 72 hours or less. <h4 id="""	"07031000.670304"	"PIN"	""	""	""	"[('PIN', 161)]"	""	"[('[android.app.cts.WearableExtenderTest testWearableExtender CtsAndroidAppTestCases]', 1), ('[android.app.cts.WearableExtenderTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[android.appsecurity.cts.DirectBootHostTest testAutomotiveNativeFbe None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNative None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootEmulated None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone None]', 1), ('[android.app.cts.BadProviderTest testExitOnCreate CtsAndroidAppTestCases]', 1), ('[android.security.cts.AslrTest testRandomization CtsSecurityTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testAudioManagerGetActiveRecordConfigurations CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testCallbackHandler CtsMediaTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsUpdate CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsAfterJoinAndSplit CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsDemoteIllegalArguments CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsAfterDemoteAndUndemote CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_dirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_retainDirty_notDirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_explicitNotDirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_null_dirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_NotNormalized_normalized CtsProviderTestCases]', 1), ('[android.location.cts.gnss.GnssNavigationMessageRegistrationTest testGnssNavigationMessageRegistration CtsLocationGnssTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testPhoneStateListener CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnServiceStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnUnRegisterFollowedByRegister CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnAlwaysReportedSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnAlwaysReportedSignalStrengthChangedWithoutPermission CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnSignalStrengthsChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnMessageWaitingIndicatorChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnPreciseCallStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCallDisconnectCauseChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnImsCallDisconnectCauseChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnPhoneStateListenerExecutorWithSrvccChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnRadioPowerStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnVoiceActivationStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnPreciseDataConnectionStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnDisplayInfoChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCallForwardingIndicatorChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCellLocationChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCallStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnDataConnectionStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnDataActivity CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCellInfoChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnUserMobileDataStateChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnOutgoingSmsEmergencyNumberChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnActiveDataSubscriptionIdChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnBarringInfoChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnRegistrationFailed CtsTelephonyTestCases]', 1), ('[android.view.cts.ViewTest testOverlappingRendering CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsShowingLayoutBounds CtsViewTestCases]', 1), ('[android.content.pm.cts.InstantAppTest testInstantAppInstallerQuery CtsContentTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.launcher1.ShortcutManagerPostBackupTest testWithUninstall_afterAppRestore None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testChainedOperation CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testPrepare CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testPrepareForSharedSurfaces CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateCustomSession CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testSessionConfiguration CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testSessionParametersStateLeak CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionMultipleDevices CtsCameraTestCases]', 1), ('[android.os.cts.SeccompTest testKernelBasicTests CtsOsHostTestCases]', 1), ('[android.os.cts.SeccompTest testKernelTSYNCTests CtsOsHostTestCases]', 1), ('[android.os.cts.SeccompTest testIsolatedServicePolicy CtsOsHostTestCases]', 1), ('[android.os.cts.SeccompTest testViolateIsolatedServicePolicy CtsOsHostTestCases]', 1), ('[android.media.cts.DecoderTest testDecodeAacEldM4a CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testCodecResetsM4a CtsMediaTestCases]', 1), ('[android.telephony.embms.cts.MbmsDownloadReceiverTest testMalformedIntents CtsTelephonyTestCases]', 1), ('[android.telephony.embms.cts.MbmsDownloadReceiverTest testBadTempFileDirectory CtsTelephonyTestCases]', 1), ('[android.telephony.embms.cts.MbmsDownloadReceiverTest testDownloadFailureIntent CtsTelephonyTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.media.cts.VisualizerTest test4_1MeasurePeakRms CtsMediaTestCases]', 1), ('[android.bootstats.cts.BootStatsHostTest testBootStats None]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenUsageReporting CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameToken CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenOneMissedStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenTwoMissedStop CtsUsageStatsTestCases]', 1), ('[android.jvmti.cts.JvmtiAttachingHostTest testJvmtiAgentAppInternal None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testRestoredOnOldVersion None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testRestoredOnNewVersion None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testBackupDisabled None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testRestoreWrongKey None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testRestoreNoManifestOnOldVersion None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testRestoreNoManifestOnNewVersion None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest testInvisibleIgnored None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGetActiveAdmins CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testKeyguardDisabledFeatures CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testRequestRemoteBugreport_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsSecurityLoggingEnabled_failIfNotOrganizationOwnedProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testRetrieveSecurityLogs_failIfNotOrganizationOwnedProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testRetrievePreRebootSecurityLogs_failIfNotOrganizationOwnedProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetNetworkLoggingEnabled_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsNetworkLoggingEnabled_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testRetrieveNetworkLogs_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testRemoveUser_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetApplicationHidden_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsApplicationHidden_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetLocationEnabled_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetGlobalSetting_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failForInstallNonMarketApps CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetMasterVolumeMuted_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsMasterVolumeMuted_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetLockTaskPackages_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testClearDeviceOwnerApp_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSwitchUser_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testCreateAndManageUser_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testInstallCaCert_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testInstallCaCert_failIfNotCertInstaller CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testUninstallCaCert_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testUninstallCaCert_failIfNotCertInstaller CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGetInstalledCaCerts_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGetInstalledCaCerts_failIfNotCertInstaller CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testHasCaCertInstalled_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testHasCaCertInstalled_failIfNotCertInstaller CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testUninstallAllUserCaCerts_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testUninstallAllUserCaCerts_failIfNotCertInstaller CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetScreenCaptureDisabled_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetAutoTimeRequired_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testAddPersistentPreferredActivity_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testClearPackagePersistentPreferredActivities_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetApplicationRestrictions_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testAddUserRestriction_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetAccountManagementDisabled_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRestrictionsProvider_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetUninstallBlocked_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetPermittedAccessibilityServices_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetCrossProfileContactsSearchDisabled_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetBluetoothContactSharingDisabled_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetPermittedInputMethods_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testLauncherVersionAtLeastL CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetDelegatedCertInstaller_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGetDelegatedCertInstaller_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSystemUpdatePolicy_failIfNotOrganizationOwnedProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testReboot_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetBackupServiceEnabled_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsBackupServiceEnabled_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetDefaultSmsApplication_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testCreateAdminSupportIntent_returnNullIfRestrictionIsNotSet CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetResetPasswordToken_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testClearResetPasswordToken_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsResetPasswordTokenActive_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testResetPasswordWithToken_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testIsUsingUnifiedPassword_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGenerateKeyPair_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetKeyPairCertificate_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testNotificationPolicyAccess CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetInterruptionFilter CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetStorageEncryption_noAdmin CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testCrossProfileCalendar_failIfNotProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetUserControlDisabledPackages_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testGetUserControlDisabledPackages_failIfNotDeviceOwner CtsAdminTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 69), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 27), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 10), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher4old/src/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/contacts/VoicemailContractTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/SeccompTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadReceiverTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/AslrTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordingConfigurationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/InstantAppTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher1/src/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/bootstats/src/android/bootstats/cts/BootStatsHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1)]"	"[('/android/admin/cts/DevicePolicyManagerTest.java', 70), ('/android/telephony/cts/PhoneStateListenerTest.java', 28), ('/android/hardware/camera2/cts/CameraDeviceTest.java', 11), ('/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java', 8), ('/android/appsecurity/cts/DirectBootHostTest.java', 6), ('/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java', 6), ('/android/provider/cts/contacts/VoicemailContractTest.java', 6), ('/android/os/cts/SeccompTest.java', 5), ('/android/telephony/embms/cts/MbmsDownloadReceiverTest.java', 5), ('/android/app/usage/cts/UsageReportingTest.java', 5), ('/android/view/cts/ViewTest.java', 4), ('/android/app/cts/WearableExtenderTest.java', 3), ('/android/security/cts/AslrTest.java', 3), ('/android/media/cts/AudioRecordingConfigurationTest.java', 3), ('/android/media/cts/DecoderTest.java', 3), ('/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 2), ('/android/app/cts/BadProviderTest.java', 2), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 2), ('/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java', 2), ('/android/content/pm/cts/InstantAppTest.java', 2), ('/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/media/cts/VisualizerTest.java', 2), ('/android/bootstats/cts/BootStatsHostTest.java', 2), ('/android/jvmti/cts/JvmtiAttachingHostTest.java', 2)]"	"[('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ (SecurityException e) {             assertProfileOwnerMessage(e.getMessage());         }     }     ])', 34), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[h (SecurityException e) {             assertDeviceOwnerMessage(e.getMessage());         }     }     ])', 11), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ow expected SecurityException"");         } catch (SecurityException expected) {         }     }     ])', 5), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[on e) {             assertOrganizationOwnedProfileOwnerMessage(e.getMessage());         }     }     ])', 4), ('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();             assertEquals(1, cursor.getInt(0));         }     }     ])', 3), ('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();             assertEquals(0, cursor.getInt(0));         }     }     ])', 2), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[it(WAIT_TIME);             }         }          assertTrue(mOnServiceStateChangedCalled);     }     ])', 2), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[(1, extender.getPages().size());         assertEquals(page2, extender.getPages().get(0));     }     ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[ion.Builder(0, ""title"", null);     }      /** Notification.Action.WearableExtender functions */     ])', 1), ('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[1]:method_text:[allPackage(OTHER_PKG);     }      /**      * Automotive devices MUST support native FBE.      */    ])', 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[equals(getFbeMode()));     }      /**      * If device has native FBE, verify lifecycle.      */    ])', 1), (""([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[    /**      * If device doesn't have native FBE, enable emulation and verify lifecycle.      */    ])"", 1), (""([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[ATED);     }      /**      * If device doesn't have native FBE, verify normal lifecycle.      */    ])"", 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[super(getDevice(), getBuild(), getAbi());             addArg(""--force-queryable"");         }     } }])', 1), (""([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[PIN]:[2]:method_text:[      * no contacts if there are no starred or frequent contacts in the user's contacts.      */    ])"", 1), ('([3:/android/app/cts/BadProviderTest.java]:[PIN]:[3]:method_text:[               uidWatcher.finish();             }             worker.quitSafely();         }     } }])', 1), ('([14:/android/security/cts/AslrTest.java]:[PIN]:[14]:method_text:[ts, >= "" + aslrMinEntropyBits + "" required)"",             entropy >= aslrMinEntropyBits);     }     ])', 1), ('([2:/android/security/cts/AslrTest.java]:[PIN]:[2]:method_text:[py(""/system/bin/"");     }      @AppModeFull // /system/bin/cat is not accessible to instant apps    ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[PIN]:[1]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([1:/android/media/cts/AudioRecordingConfigurationTest.java]:[PIN]:[1]:method_text:[(""Unexpected number of recording configs after stop"",                 configs.size(), 0);     }     ])', 1), ('([1:/android/media/cts/AudioRecordingConfigurationTest.java]:[PIN]:[1]:method_text:[{                 h.getLooper().quit();             }         }     }      @NonMediaMainlineTest    ])', 1), (""([8:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[8]:method_text:[at the      * values are correctly propogated to the contact's constituent raw contacts.      */    ])"", 1), ('([49:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[49]:method_text:[ correctly handled after the ContactsProvider aggregates      * and splits raw contacts.      */    ])', 1), ('([63:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[63]:method_text:[TE_METHOD} with an illegal argument correctly      * throws an IllegalArgumentException.      */    ])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[6]:method_text:[positions are correctly handled for contacts that have been demoted      * or undemoted.      */    ])', 1), ('([27:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[27]:method_text:[ {             Log.wtf(TAG, ""Remote exception when performing batch operation."");         }     } } ])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageRegistrationTest.java]:[PIN]:[1]:method_text:[ were not received without registering for location"" +                         "" updates."");     } }])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[           return;         }          Looper.prepare();         new PhoneStateListener();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[will be public in S, this test      * is commented and will be un-commented in Android S.      *    ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[EPORTED_SIGNAL_STRENGTH without LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH      * permission.      *    ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[t(mSecurityExceptionThrown).isTrue();         assertTrue(mSignalStrength == null);     }     */     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[GsmSignalStrength();         mSignalStrength.isGsm();         mSignalStrength.getLevel();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[E);             }         }          assertTrue(mOnMessageWaitingIndicatorChangedCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[E);         assertThat(mPreciseCallState.getRingingCallState()).isIn(PRECISE_CALL_STATE);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[           }         }          assertThat(mOnCallDisconnectCauseChangedCalled).isTrue();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[        }         }          assertThat(mOnImsCallDisconnectCauseChangedCalled).isTrue();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[stenerExecutorWithSrvccChanged"");          assertThat(mSrvccStateChangedCalled).isTrue();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[          assertThat(mTelephonyManager.getRadioPowerState()).isEqualTo(mRadioPowerState);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[m) -> tm.getVoiceActivationState());          assertEquals(state, mVoiceActivationState);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[taConnectionApnTypeBitMask();         mPreciseDataConnectionState.getDataConnectionApn();     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[t(WAIT_TIME);             }         }         assertTrue(mOnTelephonyDisplayInfoChanged);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[E);             }         }          assertTrue(mOnCallForwardingIndicatorChangedCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[it(WAIT_TIME);             }         }          assertTrue(mOnCellLocationChangedCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[.wait(WAIT_TIME);             }         }          assertTrue(mOnCallStateChangedCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[teChangedCalled);         assertTrue(mOnDataConnectionStateChangedWithNetworkTypeCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[Lock.wait(WAIT_TIME);             }         }          assertTrue(mOnDataActivityCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[k.wait(WAIT_TIME);             }         }          assertTrue(mOnCellInfoChangedCalled);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[t(WAIT_TIME);             }         }          assertTrue(mOnUserMobileDataStateChanged);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[   assertEquals(mOnOutgoingSmsEmergencyNumberChanged.getNumber(), TEST_EMERGENCY_NUMBER);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[T_TIME);             }         }          assertTrue(mOnActiveDataSubscriptionIdChanged);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[   // be not barred.         assertNotEquals(hasBarringTypeUnknown, hasBarringTypeKnown);     }     ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[PIN]:[1]:method_text:[ this one is not called upon registration.         assertFalse(mOnRegistrationFailedCalled);     } }])', 1), ('([41:/android/view/cts/ViewTest.java]:[PIN]:[41]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());         return shadowBuilder;     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[PIN]:[3]:method_text:[uInflater getMenuInflater() {                     return null;                 }             };     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[PIN]:[1]:method_text:[.class,         android.widget.ZoomButton.class,         android.widget.ZoomControls.class,     }; }])', 1), ('([1:/android/content/pm/cts/InstantAppTest.java]:[PIN]:[1]:method_text:[ctivities(intent, resolveFlags);         assertTrue(matches == null || matches.size() <= 1);     } }])', 1), ('([6:/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java]:[PIN]:[6]:method_text:[reAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_BACKUP_NOT_SUPPORTED)                 ;     } }])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[      /**      * Verify basic semantics and error conditions of the prepare call.      *      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[    }      /**      * Verify prepare call behaves properly when sharing surfaces.      *      */    ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[2]:method_text:[r);             }         }     }      /**      * Verify creating sessions back to back.      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[istener);             }         }     }      /**      * Verify creating a custom session      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[           mSession.close();         }     }      /**      * Test session configuration.      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[    }     }      /**      * Check for any state leakage in case of internal re-configure      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[);         }     }      /**      * Verify creating a session with additional parameters.      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[     /**      * Verify audio restrictions are set properly for single CameraDevice usage      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                 cam1Cb = null;             }         }     }     ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[PIN]:[1]:method_text:[cesAudioRestriction(mCameraIdsUnderTest[i], mCameraIdsUnderTest[j]);             }         }     } }])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[al.ERRNO_capped"", // presently fails */         };         runKernelUnitTestSuite(tests);     }     ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[ious operations in an isolated process under a      * fairly restrictive seccomp policy.      */    ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[rocess, where the      * process then violates the policy and gets killed by the kernel.      */    ])', 1), ('([1:/android/os/cts/SeccompTest.java]:[PIN]:[1]:method_text:[policy specified by installTestFilter().      */     private native static int getClockBootTime(); }])', 1), ('([6:/android/media/cts/DecoderTest.java]:[PIN]:[6]:method_text:[*/,                         MediaCodec.BUFFER_FLAG_CODEC_CONFIG);             }         }     }     ])', 1), ('([2:/android/media/cts/DecoderTest.java]:[PIN]:[2]:method_text:[checkFlags & CHECKFLAG_RETURN_OUTPUTFRAMES) != 0 ? numframes :                         0;     }     ])', 1), ('([7:/android/telephony/embms/cts/MbmsDownloadReceiverTest.java]:[PIN]:[7]:method_text:[cursiveDelete(tempFileRootDir);         tempFileRootDir = null;         super.tearDown();     }     ])', 1), ('([2:/android/telephony/embms/cts/MbmsDownloadReceiverTest.java]:[PIN]:[2]:method_text:[AndValidate(cleanupIntent,                 MbmsDownloadReceiver.RESULT_MALFORMED_INTENT);     }     ])', 1), ('([5:/android/telephony/embms/cts/MbmsDownloadReceiverTest.java]:[PIN]:[5]:method_text:[dValidate(cleanupIntent,                 MbmsDownloadReceiver.RESULT_BAD_TEMP_FILE_ROOT);     }     ])', 1), ('([2:/android/telephony/embms/cts/MbmsDownloadReceiverTest.java]:[PIN]:[2]:method_text:[     receivedIntent.getParcelableExtra(MbmsDownloadSession.EXTRA_MBMS_DOWNLOAD_REQUEST));     }     ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[PIN]:[3]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[PIN]:[1]:method_text:[seVisualizer();         }     }      //Test case 4.2: test measurement of peak / RMS in Long MP3    ])', 1), ('([1:/android/bootstats/cts/BootStatsHostTest.java]:[PIN]:[1]:method_text:[ = device;     }      @Override     public ITestDevice getDevice() {         return mDevice;     } }])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[sertAppOrTokenUsed(mFullToken0, false);         assertAppOrTokenUsed(mFullToken1, false);     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[er.reportUsageStop(activity1, TOKEN_0);         assertAppOrTokenUsed(mFullToken0, false);     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[      Thread.sleep(1000);             assertAppOrTokenUsed(mFullToken0, false);         }     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[PIN]:[1]:method_text:[    break;                 }             }             return found == expected;         });     } }])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[PIN]:[1]:method_text:[   throw new RuntimeException(""Failed agent-app attaching"", e);             }         });     }     ])', 1), ('([3:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[3]:method_text:[   .haveIds(""ms1"", ""ms2"", ""s1"") // s2 not in the list.                 .areAllEnabled();      }     ])', 1), ('([4:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[4]:method_text:[             assertEquals(""shortlabel2_updated"", si.getShortLabel());                 });     }     ])', 1), ('([4:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[4]:method_text:[shortcut is gone now.                     assertNull(si.getExtras());                 });     }     ])', 1), (""([4:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[4]:method_text:[ this case, the publisher wouldn't see the manifest shortcuts, and they're overwritable.      */    ])"", 1), ('([5:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[5]:method_text:[e the manifest shortcuts (as immutable pinned),      * and they *cannot* be overwritten.      */    ])', 1), ('([2:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[2]:method_text:[hortcuts()).isEmpty();         assertWith(getManager().getManifestShortcuts()).isEmpty();     }     ])', 1), ('([7:/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java]:[PIN]:[7]:method_text:[t.                     assertTrue(TextUtils.isEmpty(si.getLongLabel()));                 });     } }])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ontains(mComponent));         assertTrue(mDevicePolicyManager.isAdminActive(mComponent));     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[   mDevicePolicyManager.setKeyguardDisabledFeatures(mComponent, originalValue);         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ception e) {             assertDeviceOwnerOrManageUsersMessage(e.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ch (SecurityException e) {             assertDeviceOwnerMessage(e.getMessage());         }     }    ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[h (UnsupportedOperationException exc) {             // Supposed to throw. Pass.         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[his is no longer testable.  We do a positive test     // for clearDeviceOwnerApp()     @Suppress    ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[pre-installed launcher is at least L. This is needed for      * managed profile support.      */    ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[3]:method_text:[ed provisioning is pre-installed if the device declares the device admin      * feature.      */    ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[EM) != 0;         } catch (NameNotFoundException e) {             return false;         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[createAdminSupportIntent(UserManager.DISALLOW_ADJUST_VOLUME);         assertNull(intent);     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[Filter);         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ion tolerated) {             assertProfileOwnerMessage(tolerated.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ion.class,             () -> mDevicePolicyManager.setStorageEncryption(notAdmin, false));     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[ not throw expected SecurityException"");         } catch(SecurityException e) {         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[PIN]:[1]:method_text:[did not throw expected SecurityException"");         } catch(SecurityException e) {         }     } }])', 1)]"	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-6-2"	""	"[('android.keystore.cts.KeyGenParameterSpecTest', 4), ('android.keystore.cts.KeyProtectionTest', 4), ('android.hardware.biometrics.cts.BiometricPromptTest', 2)]"	""	"[('CtsKeystoreTestCases', 8), ('CtsHardwareTestCases', 2)]"	""	"7.3.10/C-6-2"	"""C-6-2] MUST present only Class 3 biometrics when the authentication requires BIOMETRIC_STRONG, or the authentication is invoked with a CryptoObject. If device implementations wish to treat a biometric sensor as Class 1 (formerly Convenience), they: """	"07031000.670602"	"BIOMETRIC_STRONG"	""	""	""	"[('BIOMETRIC_STRONG', 10)]"	""	"[('[android.keystore.cts.KeyGenParameterSpecTest testDefaults CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGenParameterSpecTest testSettersReflectedInGetters CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyProtectionTest testDefaults CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyProtectionTest testSettersReflectedInGetters CtsKeystoreTestCases]', 2), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withoutDeviceCredential CtsHardwareTestCases]', 1), ('[android.hardware.biometrics.cts.BiometricPromptTest test_setAllowedAuthenticators_withDeviceCredential CtsHardwareTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGenParameterSpecTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyProtectionTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/biometrics/cts/BiometricPromptTest.java', 2)]"	"[('/android/keystore/cts/KeyGenParameterSpecTest.java', 6), ('/android/keystore/cts/KeyProtectionTest.java', 6), ('/android/hardware/biometrics/cts/BiometricPromptTest.java', 3)]"	"[('([1:/android/keystore/cts/KeyGenParameterSpecTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[ spec.getUserAuthenticationType());         assertFalse(spec.isUnlockedDeviceRequired());     }     ])', 2), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[BIOMETRIC_STRONG]:[2]:method_text:[  spec.getUserAuthenticationType());         assertTrue(spec.isUnlockedDeviceRequired());     }     ])', 2), ('([1:/android/keystore/cts/KeyProtectionTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[.getBoundToSpecificSecureUserId());         assertFalse(spec.isUnlockedDeviceRequired());     }     ])', 2), ('([2:/android/keystore/cts/KeyProtectionTest.java]:[BIOMETRIC_STRONG]:[2]:method_text:[c.getBoundToSpecificSecureUserId());         assertTrue(spec.isUnlockedDeviceRequired());     }     ])', 2), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[assertEquals(authenticators, prompt.getAllowedAuthenticators());         }     }      @Presubmit    ])', 1), ('([1:/android/hardware/biometrics/cts/BiometricPromptTest.java]:[BIOMETRIC_STRONG]:[1]:method_text:[ld();             assertEquals(authenticators, prompt.getAllowedAuthenticators());         }     } }])', 1)]"	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-4-2"	""	""	""	""	""	"7.3.10/C-4-2"	"""C-4-2] MUST recognize and honor each parameter name defined as a constant in the Authenticators class and any combinations thereof. Conversely, MUST NOT honor or recognize integer constants passed to the canAuthenticate(int) and setAllowedAuthenticators(int) methods other than those documented as public constants in Authenticators and any combinations thereof. """	"07031000.670402"	"setAllowedAuthenticators(int) canAuthenticate(int)"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-4-3"	""	""	""	""	""	"7.3.10/C-4-3"	"""C-4-3] MUST implement the ACTION_BIOMETRIC_ENROLL action on devices that have either Class 3 or Class 2 biometrics. This action MUST only present the enrollment entry points for Class 3 or Class 2 biometrics. If device implementations support passive biometrics, they: """	"07031000.670403"	"ACTION_BIOMETRIC_ENROLL"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-5-1"	""	""	""	""	""	"7.3.10/C-5-1"	"""C-5-1] MUST by default require an additional confirmation step (e.g. a button press). """	"07031000.670501"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-5-2"	""	""	""	""	""	"7.3.10/C-5-2"	"""C-5-2] MUST additionally implement an implicit authentication flow (without confirmation step) corresponding to setConfirmationRequired(boolean), which applications can set to utilize for sign-in flows. If device implementations have multiple biometric sensors, they: """	"07031000.670502"	"setConfirmationRequired(boolean)"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-4-1"	""	""	""	""	""	"7.3.10/C-4-1"	"""C-4-1] MUST meet the requirements for Class 3 or Class 2 biometric as defined in this document. """	"07031000.670401"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"184:592822) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-6-1"	""	""	""	""	""	"7.3.10/C-6-1"	"""C-6-1] MUST meet the requirements for Class 3 as defined in this section below. """	"07031000.670601"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-2"	""	""	""	""	""	"7.3.13/C-1-2"	"""C-1-2] MUST support at least two readings between 0 and 360 degrees (inclusive i.e including 0 and 360 degrees). """	"07031300.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-1"	""	""	""	""	""	"7.3.13/C-1-1"	"""C-1-1] MUST implement and report TYPE_HINGLE_ANGLE. """	"07031300.670101"	"TYPE_HINGLE_ANGLE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"186:594441) 7.3.13  . Hinge Angle Sensor"	"7.3.13"	"C-1-3"	""	""	""	""	""	"7.3.13/C-1-3"	"""C-1-3] MUST return a wakeup sensor for getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE). <h3 id="""	"07031300.670103"	"getDefaultSensor(SENSOR_TYPE_HINGE_ANGLE) SENSOR_TYPE_HINGE_ANGLE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"180:566614) 7.3.6  . Thermometer"	"7.3.6"	"C-2-1"	""	""	""	""	""	"7.3.6/C-2-1"	"""C-2-1] MUST NOT define SENSOR_TYPE_AMBIENT_TEMPERATURE for the temperature sensor. <h4 id="""	"07030600.670201"	"SENSOR_TYPE_AMBIENT_TEMPERATURE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"203:629423) 7.4.5.2  . IPv6"	"7.4.5.2"	"C-4-1"	""	""	""	""	""	"7.4.5.2/C-4-1"	"""C-4-1] MUST simultaneously meet the above requirements on each network when the device is simultaneously connected to more than one network type. <h5 id="""	"07040502.670401"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-2"	""	""	""	""	""	"7.4.5.3/C-1-2"	"""C-1-2] MUST perform detection of captive portals and support login through the captive portal application when the device is connected to any network type, including cellular/mobile network, WiFi, Ethernet or Bluetooth. """	"07040503.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-1"	""	"[('android.net.wifi.cts.WifiManagerTest', 2)]"	""	"[('CtsWifiTestCases', 2)]"	""	"7.4.5.3/C-1-1"	"""C-1-1] MUST provide a captive portal application to handle the intent ACTION_CAPTIVE_PORTAL_SIGN_IN and display the captive portal login page, by sending that intent, on call to the System API ConnectivityManager#startCaptivePortalApp(Network, Bundle). """	"07040503.670101"	"ACTION_CAPTIVE_PORTAL_SIGN_IN"	""	""	""	"[('ACTION_CAPTIVE_PORTAL_SIGN_IN', 2)]"	""	"[('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 2)]"	"[('/android/net/wifi/cts/WifiManagerTest.java', 4)]"	"[('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ACTION_CAPTIVE_PORTAL_SIGN_IN]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.      */    ])', 2)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-3"	""	"[('android.security.SELinuxTargetSdkTest', 10), ('android.net.cts.DnsResolverTest', 9), ('com.android.cts.deviceowner.PrivateDnsPolicyTest', 7), ('android.telephony.cts.DataCallResponseTest', 5), ('android.net.cts.MultinetworkApiTest', 3), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('android.net.cts.IpSecManagerTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.net.cts.DnsTest', 2), ('android.net.cts.ConnectivityDiagnosticsManagerTest', 2), ('android.net.ipsec.ike.cts.ChildSessionParamsTest', 2), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.cts.helpers.sensorverification.JitterVerificationTest', 1), ('android.appsecurity.cts.ListeningPortsTest', 1), ('android.net.cts.legacy.api22.ConnectivityManagerLegacyTest', 1), ('android.net.wifi.cts.NsdManagerTest', 1), ('android.net.cts.IpConfigurationTest', 1), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1), ('android.net.ipsec.ike.cts.IkeSessionPskTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('android.hardware.camera2.cts.CaptureRequestTest', 1), ('com.android.cts.net.hostside.VpnTest', 1), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 1), ('com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest', 1)]"	"[('setUp', 14), ('getContext', 11), ('tearDown', 9), ('getInstrumentation', 5), ('getWho', 4), ('Builder', 3), ('build', 3), ('getContentResolver', 3), ('getPackageName', 3), ('getSoftLifetimeSeconds', 3), ('run', 2), ('storePrivateDnsSetting', 2), ('restorePrivateDnsSetting', 2), ('getPackageManager', 2), ('Object', 2), ('getSaProposals', 2), ('getHardLifetimeSeconds', 2), ('getInboundTrafficSelectors', 2), ('getOutboundTrafficSelectors', 2), ('getInstance', 1), ('getMainLooper', 1), ('getSimpleName', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('countDown', 1), ('Binder', 1), ('supportedHardware', 1), ('getTargetContext', 1), ('bind', 1), ('waitForIdle', 1), ('unbind', 1), ('stopVpn', 1), ('buildChildSaProposalWithCombinedModeCipher', 1)]"	"[('CtsTelephonyTestCases', 5), ('CtsWifiTestCases', 3), ('CtsIkeTestCases', 3), ('CtsSelinuxTargetSdk27TestCases', 2), ('CtsSelinuxTargetSdkCurrentTestCases', 2), ('CtsSelinuxTargetSdk29TestCases', 2), ('CtsSensorTestCases', 2), ('CtsSelinuxTargetSdk25TestCases', 2), ('CtsSelinuxTargetSdk28TestCases', 2), ('CtsMediaTestCases', 1), ('CtsNetTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsCameraTestCases', 1)]"	""	"7.4.5.3/C-1-3"	"""C-1-3] MUST support logging in to captive portals using cleartext DNS when the device is configured to use private DNS strict mode. """	"07040503.670103"	"DNS"	""	""	""	"[('DNS', 60)]"	""	"[('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk27TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdkCurrentTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk29TestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.JitterVerificationTest testCalculateDelta CtsSensorTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdp6Ports None]', 1), ('[android.net.cts.legacy.api22.ConnectivityManagerLegacyTest testStartUsingNetworkFeature_enableHipri CtsNetTestCases]', 1), ('[android.net.wifi.cts.NsdManagerTest testNDSManager CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainInlineWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryCancel None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryBlobCancel None]', 1), ('[android.net.cts.DnsResolverTest testCancelBeforeQuery None]', 1), ('[android.net.cts.DnsResolverTest testContinuousQueriesInline None]', 1), ('[android.net.cts.DnsResolverTest testQueryCancelForInetAddress None]', 1), ('[android.net.cts.DnsResolverTest testPrivateDnsBypass None]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.net.cts.IpSecManagerTest testAllocSpi None]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testSecurityExceptionFromDns CtsPermissionTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testNotEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testParcel CtsTelephonyTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testCanExecuteFromHomeDir CtsSelinuxTargetSdk25TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk25TestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 CtsIkeTestCases]', 1), ('[android.net.cts.MultinetworkApiTest getTestableNetworks None]', 1), ('[android.net.cts.MultinetworkApiTest testResNApi None]', 1), ('[android.net.cts.MultinetworkApiTest testResNApiNXDomainPrivateDns None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testClearDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetOpportunisticMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetSpecificHostMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetModeWithIncorrectHost None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testCanSetModeDespiteUserRestriction None]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk28TestCases]', 1), ('[android.net.cts.DnsTest testNativeDns None]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest TestNetworkCallback None]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest testOnDataStallSuspected_DnsEvents None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testPrivateDnsPolicy None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.net.ipsec.ike.cts.ChildSessionParamsTest testBuildChildSessionParamsWithConfigReq CtsIkeTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 9), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/DataCallResponseTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/MultinetworkApiTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk27/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdkCurrent/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk29/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk25/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk28/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/NsdManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 1)]"	"[('/android/security/SELinuxTargetSdkTest.java', 15), ('/android/net/cts/DnsResolverTest.java', 10), ('/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 8), ('/android/telephony/cts/DataCallResponseTest.java', 6), ('/android/net/cts/MultinetworkApiTest.java', 4), ('/android/net/wifi/cts/WifiBackupRestoreTest.java', 3), ('/android/net/cts/IpSecManagerTest.java', 3), ('/com/android/cts/deviceowner/NetworkLoggingTest.java', 3), ('/android/net/cts/DnsTest.java', 3), ('/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 3), ('/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 3), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 2), ('/android/appsecurity/cts/ListeningPortsTest.java', 2), ('/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 2), ('/android/net/wifi/cts/NsdManagerTest.java', 2), ('/android/net/cts/IpConfigurationTest.java', 2), ('/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 2), ('/android/permission/cts/NoNetworkStatePermissionTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/com/android/cts/net/hostside/VpnTest.java', 2), ('/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 2), ('/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 2)]"	"[('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[SELinuxTargetSdkTestBase {     /**      * Verify that net.dns properties may not be read      */    ])', 4), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[public void testNoDns() throws IOException {         noDns();     }      ])', 2), ('([2:/android/net/cts/DnsResolverTest.java]:[DNS]:[2]:method_text:[  latch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));             } while (retry);         }     }     ])', 2), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[ify that selinux context is the expected domain based on      * targetSdkVersion = 26-27      */    ])', 1), ('([8:/android/media/cts/PresentationSyncTest.java]:[DNS]:[8]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([4:/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java]:[DNS]:[4]:method_text:[Double) stats.getValue(SensorStats.JITTER_95_PERCENTILE_PERCENT_KEY),                 0.01);     } }])', 1), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[DNS]:[2]:method_text:[);             }         }         contents.append(""\'"");         return contents.toString();     } }])', 1), ('([2:/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java]:[DNS]:[2]:method_text:[led && isWifiConnected()) {                 disconnectFromWifi();             }         }     }     ])', 1), ('([3:/android/net/wifi/cts/NsdManagerTest.java]:[DNS]:[3]:method_text:[l);         }         catch (InterruptedException ex) {             return false;         }     } } ])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.      */    ])"", 1), ('([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[2]:method_text:[ is deserialized correctly from AOSP      * legacy supplicant/ipconf backup data format.      */    ])', 1), ('([9:/android/net/cts/IpConfigurationTest.java]:[DNS]:[9]:method_text:[NS)                 .build();          mProxy = ProxyInfo.buildDirectProxy(""test"", 8888);     }     ])', 1), ('([43:/android/net/cts/DnsResolverTest.java]:[DNS]:[43]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[DNS]:[2]:method_text:[hPrivateDns() throws Exception {         doTestRawQueryNXDomainWithPrivateDns(mExecutor);     }     ])', 1), ('([22:/android/net/cts/DnsResolverTest.java]:[DNS]:[22]:method_text:[              callback.waitForAnswer());             callback.assertNXDomain();         }     }     ])', 1), ('([4:/android/net/cts/DnsResolverTest.java]:[DNS]:[4]:method_text:[solver.DnsException error) {             mErrorMsg = mMsg + error.getMessage();         }     }     ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[DNS]:[1]:method_text:[            assertTrue(msg + "" returned 0 results"", !callback.isAnswerEmpty());         }     }     ])', 1), ('([4:/android/net/cts/DnsResolverTest.java]:[DNS]:[4]:method_text:[         assertTrue(msg + "" returned Ipv4 results"", !callback.hasIpv4Answer());         }     }     ])', 1), ('([28:/android/net/cts/DnsResolverTest.java]:[DNS]:[28]:method_text:[   queryV6 ? !callback.hasIpv4Answer() : !callback.hasIpv6Answer());             }         }     } }])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[DNS]:[2]:method_text:[tion(expectedUs);         verification.addSensorEvents(events);         return verification;     } }])', 1), ('([5:/android/net/cts/IpSecManagerTest.java]:[DNS]:[5]:method_text:[loc the same SPI that was specifically created (expect SpiUnavailable)      * Close SPIs      */    ])', 1), ('([1:/android/net/cts/IpSecManagerTest.java]:[DNS]:[1]:method_text:[      * send data on socket      * release transform      * send data (expect exception)      */    ])', 1), ('([1:/android/permission/cts/NoNetworkStatePermissionTest.java]:[DNS]:[1]:method_text:[w.google.com"");             fail();         } catch (SecurityException expected) {         }     } }])', 1), ('([1:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[1]:method_text:[.55""));     private static final int MTU_V4 = 1440;     private static final int MTU_V6 = 1400;     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[getMtuV4()).isEqualTo(MTU_V4);         assertThat(response.getMtuV6()).isEqualTo(MTU_V6);     }     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[TU_V6)                 .build();          assertThat(response).isEqualTo(equalsResponse);     }     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[t(response).isNotEqualTo(null);         assertThat(response).isNotEqualTo(new String[1]);     }     ])', 1), ('([2:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[2]:method_text:[EATOR.createFromParcel(stateParcel);         assertThat(response).isEqualTo(parcelResponse);     } }])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[cuteFromHomeDir());     }      /**      * Verify that net.dns properties may not be read      */    ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on      * targetSdkVersion = 25      */    ])', 1), ('([2:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[DNS]:[2]:method_text:[p);         verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);     }     ])', 1), ('([3:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[3]:method_text:[  testableNetworks.size() >= 1);         return testableNetworks.toArray(new Network[0]);     }     ])', 1), ('([2:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[2]:method_text:[      @AppModeFull(reason = ""WRITE_SECURE_SETTINGS permission can\'t be granted to instant apps"")    ])', 1), ('([11:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[11]:method_text:[        }         } finally {             mCtsNetUtils.restorePrivateDnsSetting();         }     } }])', 1), ('([9:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[9]:method_text:[DNS, false);         mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());     }     ])', 1), ('([3:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[3]:method_text:[r.hasUserRestriction(                 UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();     }     ])', 1), ('([14:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[14]:method_text:[privateDnsHost, expectedResult, resultCode),                 expectedResult, resultCode);     }     ])', 1), ('([5:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[5]:method_text:[IC);         assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();     }     ])', 1), ('([7:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[7]:method_text:[er.getGlobalPrivateDnsHost(getWho())).isEqualTo(                 VALID_PRIVATE_DNS_HOST);     }     ])', 1), ('([4:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[4]:method_text:[TE_DNS_HOST,                 DevicePolicyManager.PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING);     }     ])', 1), ('([11:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[11]:method_text:[ISTIC);         assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();     } }])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([28:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[28]:method_text:[s addr) {         return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));     } }])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on      * targetSdkVersion = 28      */    ])', 1), ('([7:/android/net/cts/DnsTest.java]:[DNS]:[7]:method_text:[     */     @SkipPresubmit(reason = ""IPv6 support may be missing on presubmit virtual hardware"")    ])', 1), ('([11:/android/net/cts/DnsTest.java]:[DNS]:[11]:method_text:[ECONDS));         } finally {             mCm.unregisterNetworkCallback(callback);         }     } }])', 1), ('([3:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[DNS]:[3]:method_text:[redCallbacks) {             mCdm.unregisterConnectivityDiagnosticsCallback(cb);         }     }     ])', 1), ('([4:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[DNS]:[4]:method_text:[TS);          verifyOnDataStallSuspected(DETECTION_METHOD_DNS_EVENTS, TIMESTAMP, extras);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[DNS]:[2]:method_text:[) {             return;         }         executeDeviceOwnerTest(""PrivateDnsPolicyTest"");     }     ])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[DNS]:[2]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;             }         }     } }])', 1), ('([57:/com/android/cts/net/hostside/VpnTest.java]:[DNS]:[57]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[DNS]:[1]:method_text:[ISALLOW_CONFIG_DATE_TIME,                     UserManager.DISALLOW_AIRPLANE_MODE             );     ])', 1), ('([2:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[DNS]:[2]:method_text:[BOUND_V4_TS, OUTBOUND_V6_TS),                 childParams.getOutboundTrafficSelectors());     }     ])', 1), ('([4:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[DNS]:[4]:method_text:[any expected address is not found in result         assertTrue(expectedAddresses.isEmpty());     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[DNS]:[1]:method_text:[not used in test.                     // UserManager.DISALLOW_DEBUGGING_FEATURES             );     ])', 1)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-4"	""	"[('android.security.SELinuxTargetSdkTest', 10), ('android.net.cts.DnsResolverTest', 9), ('com.android.cts.deviceowner.PrivateDnsPolicyTest', 7), ('android.telephony.cts.DataCallResponseTest', 5), ('android.net.cts.MultinetworkApiTest', 3), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('android.net.cts.IpSecManagerTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.net.cts.DnsTest', 2), ('android.net.cts.ConnectivityDiagnosticsManagerTest', 2), ('android.net.ipsec.ike.cts.ChildSessionParamsTest', 2), ('android.media.cts.PresentationSyncTest', 1), ('android.hardware.cts.helpers.sensorverification.JitterVerificationTest', 1), ('android.appsecurity.cts.ListeningPortsTest', 1), ('android.net.cts.legacy.api22.ConnectivityManagerLegacyTest', 1), ('android.net.wifi.cts.NsdManagerTest', 1), ('android.net.cts.IpConfigurationTest', 1), ('android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1), ('android.net.ipsec.ike.cts.IkeSessionPskTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('android.hardware.camera2.cts.CaptureRequestTest', 1), ('com.android.cts.net.hostside.VpnTest', 1), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 1), ('com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest', 1)]"	"[('setUp', 14), ('getContext', 11), ('tearDown', 9), ('getInstrumentation', 5), ('getWho', 4), ('Builder', 3), ('build', 3), ('getContentResolver', 3), ('getPackageName', 3), ('getSoftLifetimeSeconds', 3), ('run', 2), ('storePrivateDnsSetting', 2), ('restorePrivateDnsSetting', 2), ('getPackageManager', 2), ('Object', 2), ('getSaProposals', 2), ('getHardLifetimeSeconds', 2), ('getInboundTrafficSelectors', 2), ('getOutboundTrafficSelectors', 2), ('getInstance', 1), ('getMainLooper', 1), ('getSimpleName', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('countDown', 1), ('Binder', 1), ('supportedHardware', 1), ('getTargetContext', 1), ('bind', 1), ('waitForIdle', 1), ('unbind', 1), ('stopVpn', 1), ('buildChildSaProposalWithCombinedModeCipher', 1)]"	"[('CtsTelephonyTestCases', 5), ('CtsWifiTestCases', 3), ('CtsIkeTestCases', 3), ('CtsSelinuxTargetSdk27TestCases', 2), ('CtsSelinuxTargetSdkCurrentTestCases', 2), ('CtsSelinuxTargetSdk29TestCases', 2), ('CtsSensorTestCases', 2), ('CtsSelinuxTargetSdk25TestCases', 2), ('CtsSelinuxTargetSdk28TestCases', 2), ('CtsMediaTestCases', 1), ('CtsNetTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsCameraTestCases', 1)]"	""	"7.4.5.3/C-1-4"	"""C-1-4] MUST use encrypted DNS as per the SDK documentation for android.net.LinkProperties.getPrivateDnsServerName and android.net.LinkProperties.isPrivateDnsActive for all network traffic that is not explicitly communicating with the captive portal. """	"07040503.670104"	"android.net.LinkProperties.getPrivateDnsServerName android.net.LinkProperties.isPrivateDnsActive DNS"	""	""	""	"[('DNS', 60)]"	""	"[('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk27TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdkCurrentTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk29TestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.JitterVerificationTest testCalculateDelta CtsSensorTestCases]', 1), ('[android.appsecurity.cts.ListeningPortsTest testNoListeningLoopbackUdp6Ports None]', 1), ('[android.net.cts.legacy.api22.ConnectivityManagerLegacyTest testStartUsingNetworkFeature_enableHipri CtsNetTestCases]', 1), ('[android.net.wifi.cts.NsdManagerTest testNDSManager CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainInlineWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryCancel None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryBlobCancel None]', 1), ('[android.net.cts.DnsResolverTest testCancelBeforeQuery None]', 1), ('[android.net.cts.DnsResolverTest testContinuousQueriesInline None]', 1), ('[android.net.cts.DnsResolverTest testQueryCancelForInetAddress None]', 1), ('[android.net.cts.DnsResolverTest testPrivateDnsBypass None]', 1), ('[android.hardware.cts.helpers.sensorverification.TimestampClockSourceVerificationTest testVerify_no_events_fail CtsSensorTestCases]', 1), ('[android.net.cts.IpSecManagerTest testAllocSpi None]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testSecurityExceptionFromDns CtsPermissionTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testNotEquals CtsTelephonyTestCases]', 1), ('[android.telephony.cts.DataCallResponseTest testParcel CtsTelephonyTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testCanExecuteFromHomeDir CtsSelinuxTargetSdk25TestCases]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk25TestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 CtsIkeTestCases]', 1), ('[android.net.cts.MultinetworkApiTest getTestableNetworks None]', 1), ('[android.net.cts.MultinetworkApiTest testResNApi None]', 1), ('[android.net.cts.MultinetworkApiTest testResNApiNXDomainPrivateDns None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testClearDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetOpportunisticMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetSpecificHostMode None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testSetModeWithIncorrectHost None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testCanSetModeDespiteUserRestriction None]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[android.security.SELinuxTargetSdkTest testNoDns CtsSelinuxTargetSdk28TestCases]', 1), ('[android.net.cts.DnsTest testNativeDns None]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest TestNetworkCallback None]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest testOnDataStallSuspected_DnsEvents None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testPrivateDnsPolicy None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.net.ipsec.ike.cts.ChildSessionParamsTest testBuildChildSessionParamsWithConfigReq CtsIkeTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 9), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/DataCallResponseTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/MultinetworkApiTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk27/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdkCurrent/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk29/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk25/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/selinux/selinuxTargetSdk28/src/android/security/SELinuxTargetSdkTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/NsdManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 1)]"	"[('/android/security/SELinuxTargetSdkTest.java', 15), ('/android/net/cts/DnsResolverTest.java', 10), ('/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 8), ('/android/telephony/cts/DataCallResponseTest.java', 6), ('/android/net/cts/MultinetworkApiTest.java', 4), ('/android/net/wifi/cts/WifiBackupRestoreTest.java', 3), ('/android/net/cts/IpSecManagerTest.java', 3), ('/com/android/cts/deviceowner/NetworkLoggingTest.java', 3), ('/android/net/cts/DnsTest.java', 3), ('/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 3), ('/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 3), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java', 2), ('/android/appsecurity/cts/ListeningPortsTest.java', 2), ('/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 2), ('/android/net/wifi/cts/NsdManagerTest.java', 2), ('/android/net/cts/IpConfigurationTest.java', 2), ('/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java', 2), ('/android/permission/cts/NoNetworkStatePermissionTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/com/android/cts/net/hostside/VpnTest.java', 2), ('/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 2), ('/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 2)]"	"[('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[SELinuxTargetSdkTestBase {     /**      * Verify that net.dns properties may not be read      */    ])', 4), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[public void testNoDns() throws IOException {         noDns();     }      ])', 2), ('([2:/android/net/cts/DnsResolverTest.java]:[DNS]:[2]:method_text:[  latch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));             } while (retry);         }     }     ])', 2), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[ify that selinux context is the expected domain based on      * targetSdkVersion = 26-27      */    ])', 1), ('([8:/android/media/cts/PresentationSyncTest.java]:[DNS]:[8]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([4:/android/hardware/cts/helpers/sensorverification/JitterVerificationTest.java]:[DNS]:[4]:method_text:[Double) stats.getValue(SensorStats.JITTER_95_PERCENTILE_PERCENT_KEY),                 0.01);     } }])', 1), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[DNS]:[2]:method_text:[);             }         }         contents.append(""\'"");         return contents.toString();     } }])', 1), ('([2:/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java]:[DNS]:[2]:method_text:[led && isWifiConnected()) {                 disconnectFromWifi();             }         }     }     ])', 1), ('([3:/android/net/wifi/cts/NsdManagerTest.java]:[DNS]:[3]:method_text:[l);         }         catch (InterruptedException ex) {             return false;         }     } } ])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.      */    ])"", 1), ('([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[DNS]:[2]:method_text:[ is deserialized correctly from AOSP      * legacy supplicant/ipconf backup data format.      */    ])', 1), ('([9:/android/net/cts/IpConfigurationTest.java]:[DNS]:[9]:method_text:[NS)                 .build();          mProxy = ProxyInfo.buildDirectProxy(""test"", 8888);     }     ])', 1), ('([43:/android/net/cts/DnsResolverTest.java]:[DNS]:[43]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[DNS]:[2]:method_text:[hPrivateDns() throws Exception {         doTestRawQueryNXDomainWithPrivateDns(mExecutor);     }     ])', 1), ('([22:/android/net/cts/DnsResolverTest.java]:[DNS]:[22]:method_text:[              callback.waitForAnswer());             callback.assertNXDomain();         }     }     ])', 1), ('([4:/android/net/cts/DnsResolverTest.java]:[DNS]:[4]:method_text:[solver.DnsException error) {             mErrorMsg = mMsg + error.getMessage();         }     }     ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[DNS]:[1]:method_text:[            assertTrue(msg + "" returned 0 results"", !callback.isAnswerEmpty());         }     }     ])', 1), ('([4:/android/net/cts/DnsResolverTest.java]:[DNS]:[4]:method_text:[         assertTrue(msg + "" returned Ipv4 results"", !callback.hasIpv4Answer());         }     }     ])', 1), ('([28:/android/net/cts/DnsResolverTest.java]:[DNS]:[28]:method_text:[   queryV6 ? !callback.hasIpv4Answer() : !callback.hasIpv6Answer());             }         }     } }])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/TimestampClockSourceVerificationTest.java]:[DNS]:[2]:method_text:[tion(expectedUs);         verification.addSensorEvents(events);         return verification;     } }])', 1), ('([5:/android/net/cts/IpSecManagerTest.java]:[DNS]:[5]:method_text:[loc the same SPI that was specifically created (expect SpiUnavailable)      * Close SPIs      */    ])', 1), ('([1:/android/net/cts/IpSecManagerTest.java]:[DNS]:[1]:method_text:[      * send data on socket      * release transform      * send data (expect exception)      */    ])', 1), ('([1:/android/permission/cts/NoNetworkStatePermissionTest.java]:[DNS]:[1]:method_text:[w.google.com"");             fail();         } catch (SecurityException expected) {         }     } }])', 1), ('([1:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[1]:method_text:[.55""));     private static final int MTU_V4 = 1440;     private static final int MTU_V6 = 1400;     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[getMtuV4()).isEqualTo(MTU_V4);         assertThat(response.getMtuV6()).isEqualTo(MTU_V6);     }     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[TU_V6)                 .build();          assertThat(response).isEqualTo(equalsResponse);     }     ])', 1), ('([4:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[4]:method_text:[t(response).isNotEqualTo(null);         assertThat(response).isNotEqualTo(new String[1]);     }     ])', 1), ('([2:/android/telephony/cts/DataCallResponseTest.java]:[DNS]:[2]:method_text:[EATOR.createFromParcel(stateParcel);         assertThat(response).isEqualTo(parcelResponse);     } }])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[1]:method_text:[cuteFromHomeDir());     }      /**      * Verify that net.dns properties may not be read      */    ])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on      * targetSdkVersion = 25      */    ])', 1), ('([2:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[DNS]:[2]:method_text:[p);         verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);     }     ])', 1), ('([3:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[3]:method_text:[  testableNetworks.size() >= 1);         return testableNetworks.toArray(new Network[0]);     }     ])', 1), ('([2:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[2]:method_text:[      @AppModeFull(reason = ""WRITE_SECURE_SETTINGS permission can\'t be granted to instant apps"")    ])', 1), ('([11:/android/net/cts/MultinetworkApiTest.java]:[DNS]:[11]:method_text:[        }         } finally {             mCtsNetUtils.restorePrivateDnsSetting();         }     } }])', 1), ('([9:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[9]:method_text:[DNS, false);         mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());     }     ])', 1), ('([3:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[3]:method_text:[r.hasUserRestriction(                 UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();     }     ])', 1), ('([14:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[14]:method_text:[privateDnsHost, expectedResult, resultCode),                 expectedResult, resultCode);     }     ])', 1), ('([5:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[5]:method_text:[IC);         assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();     }     ])', 1), ('([7:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[7]:method_text:[er.getGlobalPrivateDnsHost(getWho())).isEqualTo(                 VALID_PRIVATE_DNS_HOST);     }     ])', 1), ('([4:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[4]:method_text:[TE_DNS_HOST,                 DevicePolicyManager.PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING);     }     ])', 1), ('([11:/com/android/cts/deviceowner/PrivateDnsPolicyTest.java]:[DNS]:[11]:method_text:[ISTIC);         assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();     } }])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([28:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[DNS]:[28]:method_text:[s addr) {         return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));     } }])', 1), ('([2:/android/security/SELinuxTargetSdkTest.java]:[DNS]:[2]:method_text:[Verify that selinux context is the expected domain based on      * targetSdkVersion = 28      */    ])', 1), ('([7:/android/net/cts/DnsTest.java]:[DNS]:[7]:method_text:[     */     @SkipPresubmit(reason = ""IPv6 support may be missing on presubmit virtual hardware"")    ])', 1), ('([11:/android/net/cts/DnsTest.java]:[DNS]:[11]:method_text:[ECONDS));         } finally {             mCm.unregisterNetworkCallback(callback);         }     } }])', 1), ('([3:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[DNS]:[3]:method_text:[redCallbacks) {             mCdm.unregisterConnectivityDiagnosticsCallback(cb);         }     }     ])', 1), ('([4:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[DNS]:[4]:method_text:[TS);          verifyOnDataStallSuspected(DETECTION_METHOD_DNS_EVENTS, TIMESTAMP, extras);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[DNS]:[2]:method_text:[) {             return;         }         executeDeviceOwnerTest(""PrivateDnsPolicyTest"");     }     ])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[DNS]:[2]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;             }         }     } }])', 1), ('([57:/com/android/cts/net/hostside/VpnTest.java]:[DNS]:[57]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[DNS]:[1]:method_text:[ISALLOW_CONFIG_DATE_TIME,                     UserManager.DISALLOW_AIRPLANE_MODE             );     ])', 1), ('([2:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[DNS]:[2]:method_text:[BOUND_V4_TS, OUTBOUND_V6_TS),                 childParams.getOutboundTrafficSelectors());     }     ])', 1), ('([4:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[DNS]:[4]:method_text:[any expected address is not found in result         assertTrue(expectedAddresses.isEmpty());     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[DNS]:[1]:method_text:[not used in test.                     // UserManager.DISALLOW_DEBUGGING_FEATURES             );     ])', 1)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-5"	""	"[('android.media.cts.MediaBrowserTest', 8), ('android.net.wifi.cts.WifiManagerTest', 6), ('android.media.cts.MediaScannerTest', 5), ('android.app.cts.ActivityManagerProcessStateTest', 5), ('android.bluetooth.cts.HearingAidProfileTest', 5), ('android.telecom.cts.BackgroundCallAudioTest', 3), ('android.permission.cts.NoWifiStatePermissionTest', 3), ('android.telecom.cts.RemoteConnectionTest', 2), ('android.car.cts.CarTest', 2), ('android.net.cts.ConnectivityManagerTest', 2), ('android.media.cts.MediaScannerConnectionTest', 2), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 2), ('android.quickaccesswallet.cts.QuickAccessWalletClientTest', 2), ('android.telecom.cts.HandoverTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.net.cts.IpSecBaseTest', 2), ('android.car.cts.CarAppFocusManagerTest', 2), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 2), ('android.media.cts.MediaSession2Test', 1), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 1), ('android.jvmti.cts.JvmtiAttachingHostTest', 1), ('android.graphics.cts.ColorSpaceTest', 1), ('android.keystore.cts.KeyPairGeneratorTest', 1), ('android.cts.statsd.subscriber.ShellSubscriberTest', 1), ('android.media.cts.ConnectionStatus', 1), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 1), ('com.android.cts.delegate.NetworkLoggingDelegateTest', 1), ('android.media.cts.NativeDecoderTest', 1), ('android.net.wifi.cts.WifiInfoTest', 1), ('android.os.cts.StrictModeTest', 1), ('android.media.cts.MediaBrowserServiceTest', 1), ('com.android.cts.appwithdata.CreatePrivateDataTest', 1), ('android.security.cts.StagefrightTest', 1), ('android.net.wifi.cts.ScanResultTest', 1), ('android.suspendapps.cts.DualSuspendTests', 1), ('android.media.cts.MediaSession2ServiceTest', 1), ('android.media.cts.MediaPlayerFlakyNetworkTest', 1), ('android.permission.cts.NoNetworkStatePermissionTest', 1), ('android.net.cts.network.permission.InternetPermissionTest', 1), ('android.telecom.cts.PhoneAccountSuggestionServiceTest', 1), ('android.telecom.cts.ExtendedInCallServiceTest', 1), ('android.security.NetworkSecurityPolicyTestBase', 1), ('android.net.wifi.cts.WifiLocationInfoTest', 1), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('android.security.net.config.cts.DownloadManagerTest', 1), ('android.net.cts.SSLCertificateSocketFactoryTest', 1), ('android.telecom.cts.RemoteConferenceTest', 1), ('android.net.cts.VpnServiceTest', 1), ('android.suspendapps.cts.SuspendPackagesTest', 1), ('android.net.cts.network.permission.UpdateStatsPermissionTest', 1), ('android.telecom.cts.BasicInCallServiceTest', 1), ('com.android.cts.deviceandprofileowner.AlwaysOnVpnTest', 1), ('android.os.cts.ParcelFileDescriptorTest', 1), ('android.suspendapps.cts.DialogTests', 1), ('android.media.cts.StreamingMediaPlayerTest', 1), ('com.android.cts.net.hostside.VpnTest', 1), ('android.telecom.cts.CallDetailsTest', 1), ('android.telecom.cts.OutgoingCallTest', 1), ('com.android.cts.deviceowner.proxy.PacProxyTest', 1), ('android.telecom.cts.VideoCallTest', 1), ('com.android.server.cts.device.statsd.AtomTests', 1), ('android.net.cts.TrafficStatsTest', 1)]"	"[('setUp', 23), ('tearDown', 14), ('getInstrumentation', 12), ('getContext', 10), ('getSimpleName', 4), ('notify', 4), ('getPort', 4), ('receive', 4), ('size', 4), ('getResources', 3), ('getTargetContext', 3), ('getWho', 3), ('run', 2), ('getPackageName', 2), ('getService', 2), ('getLastCall', 2), ('getDefaultHostnameVerifier', 2), ('getBytes', 2), ('close', 2), ('waitForPacDownload', 2), ('getDevice', 1), ('getCurrentUser', 1), ('getNotConnectedReason', 1), ('getActiveNetworkInfo', 1), ('getReason', 1), ('getApplicationContext', 1), ('getThreadPolicy', 1), ('getVmPolicy', 1), ('getPackageManager', 1), ('getUiAutomation', 1), ('cellConnectAttempted', 1), ('Object', 1), ('ConnectionCallback', 1), ('onConnected', 1), ('SubscriptionCallback', 1), ('ItemCallback', 1), ('Runnable', 1), ('Bundle', 1), ('myPid', 1), ('myUid', 1), ('connect', 1), ('StubConnectionCallback', 1), ('StubSubscriptionCallback', 1), ('StubItemCallback', 1), ('getExternalMediaDirs', 1), ('getAbsolutePath', 1), ('cleanup', 1), ('releaseMediaPlayer', 1), ('releaseHttpServer', 1), ('getUserSelectedOutgoingPhoneAccount', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1), ('VpnService', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('countDown', 1), ('getArguments', 1), ('startServer', 1), ('stopServer', 1), ('setPacURLAndWaitForDownload', 1), ('getPacURL', 1)]"	"[('CtsMediaTestCases', 22), ('CtsTelecomTestCases', 14), ('CtsWifiTestCases', 11), ('CtsAndroidAppTestCases', 5), ('CtsBluetoothTestCases', 5), ('CtsCarTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsSuspendAppsTestCases', 3), ('CtsOsHostTestCases', 2), ('CtsNetTestCases', 2), ('CtsQuickAccessWalletTestCases', 2), ('CtsGraphicsTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsSecurityTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsNetSecConfigDownloadManagerTestCases', 1)]"	""	"7.4.5.3/C-1-5"	"""C-1-5] MUST ensure that, while the user is logging in to a captive portal, the default network used by applications (as returned by ConnectivityManager.getActiveNetwork, ConnectivityManager.registerDefaultNetworkCallback, and used by default by Java networking APIs such as java.net.Socket, and native APIs such as connect()) is any other available network that provides internet access, if available. <h4 id="""	"07040503.670105"	"ConnectivityManager.getActiveNetwork connect() ConnectivityManager.registerDefaultNetworkCallback java.net.Socket"	""	""	""	"[('connect()', 75), ('java.net.Socket', 23), ('ConnectivityManager.getActiveNetwork', 3)]"	""	"[('[android.net.cts.IpSecBaseTest currentTimeMillis None]', 2), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 2), ('[android.media.cts.MediaSession2Test testCallback_onConnect_onDisconnect CtsMediaTestCases]', 1), ('[android.graphics.cts.ColorSpaceTest testConnect CtsGraphicsTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionOutgoingCall CtsTelecomTestCases]', 1), ('[android.telecom.cts.RemoteConnectionTest testRemoteConnectionCallbacks_Disconnect CtsTelecomTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[android.cts.statsd.subscriber.ShellSubscriberTest testShellSubscriptionReconnect None]', 1), ('[android.media.cts.ConnectionStatus isAvailable CtsMediaTestCases]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[android.car.cts.CarTest isConnected CtsCarTestCases]', 1), ('[android.car.cts.CarTest testConnection CtsCarTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.cts.ConnectivityManagerTest testOpenConnection None]', 1), ('[android.net.cts.ConnectivityManagerTest disconnectFromCell None]', 1), ('[android.media.cts.MediaBrowserServiceTest disconnect CtsMediaTestCases]', 1), ('[android.security.cts.StagefrightTest TestName CtsSecurityTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testAudioProcessingFromCallScreeningDisallow CtsTelecomTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testManualAudioCallScreenReject CtsTelecomTestCases]', 1), ('[android.telecom.cts.BackgroundCallAudioTest testLowerApiLevelCompatibility2 CtsTelecomTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[android.media.cts.MediaBrowserTest disconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testMediaBrowser CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectTwice CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectionFailed CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testReconnection CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testConnectionCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testSubscriptionCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaBrowserTest testItemCallbackNotCalledAfterDisconnect CtsMediaTestCases]', 1), ('[android.suspendapps.cts.DualSuspendTests testCannotSuspendUnderDisallowUninstallApps CtsSuspendAppsTestCases]', 1), ('[android.media.cts.MediaScannerTest currentTimeMillis CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testLocalizeRingtoneTitles CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testMediaScanner CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testWildcardPaths CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testCanonicalize CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testOnGetSession_returnsSession CtsMediaTestCases]', 1), ('[android.permission.cts.NoNetworkStatePermissionTest testGetActiveNetworkInfo CtsPermissionTestCases]', 1), ('[android.telecom.cts.PhoneAccountSuggestionServiceTest disconnect CtsTelecomTestCases]', 1), ('[android.media.cts.MediaScannerConnectionTest currentTimeMillis CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerConnectionTest testMediaScannerConnection CtsMediaTestCases]', 1), ('[android.telecom.cts.ExtendedInCallServiceTest testAddNewOutgoingCallAndThenDisconnect CtsTelecomTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCurrentNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.security.NetworkSecurityPolicyTestBase testDefaultHttpURLConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorer CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testDisconnect_shouldClearListenersAndDisconnect CtsQuickAccessWalletTestCases]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testConnect_disconnect_reconnect_shouldWork CtsQuickAccessWalletTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testGetDhcpInfo CtsPermissionTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testDisconnect CtsPermissionTestCases]', 1), ('[android.permission.cts.NoWifiStatePermissionTest testReconnect CtsPermissionTestCases]', 1), ('[android.net.cts.SSLCertificateSocketFactoryTest toList None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceCallbacks_Disconnect CtsTelecomTestCases]', 1), ('[android.telecom.cts.HandoverTest testHandoverSourceFailed CtsTelecomTestCases]', 1), ('[android.telecom.cts.HandoverTest testHandoverDestinationFailed CtsTelecomTestCases]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[android.suspendapps.cts.SuspendPackagesTest testOpCameraOnSuspend CtsSuspendAppsTestCases]', 1), ('[android.telecom.cts.BasicInCallServiceTest testTelephonyCall_bindsToInCallServiceAndAddsCall CtsTelecomTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckService CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckStopsService CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckBroadcastService CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckActivityService CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testForegroundServiceAppOp CtsAndroidAppTestCases]', 1), ('[android.suspendapps.cts.DialogTests testInterceptorActivity_moreDetails CtsSuspendAppsTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getProxyServiceConnect CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionState CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectedDevices CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getDevicesMatchingConnectionStates CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionStateChangedIntent CtsBluetoothTestCases]', 1), ('[android.telecom.cts.CallDetailsTest testLogFeatures CtsTelecomTestCases]', 1), ('[android.car.cts.CarAppFocusManagerTest testFocusChange CtsCarTestCases]', 1), ('[android.car.cts.CarAppFocusManagerTest testFilter CtsCarTestCases]', 1), ('[android.telecom.cts.OutgoingCallTest testExtraPhoneAccountHandleAvailable CtsTelecomTestCases]', 1), ('[android.telecom.cts.VideoCallTest testSetZoom CtsTelecomTestCases]', 1), ('[com.android.server.cts.device.statsd.AtomTests testGenerateMobileTraffic None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaBrowserTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaScannerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/HearingAidProfileTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BackgroundCallAudioTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoWifiStatePermissionTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConnectionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaScannerConnectionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/HandoverTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecBaseTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarAppFocusManagerTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaSession2Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ColorSpaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/subscriber/ShellSubscriberTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ConnectionStatus.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaBrowserServiceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DualSuspendTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaSession2ServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerFlakyNetworkTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/netpermission/internetpermission/src/android/net/cts/network/permission/InternetPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/PhoneAccountSuggestionServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/ExtendedInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/SSLCertificateSocketFactoryTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConferenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/VpnServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/netpermission/updatestatspermission/src/android/net/cts/network/permission/UpdateStatsPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/ParcelFileDescriptorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDetailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/OutgoingCallTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1)]"	"[('/android/media/cts/MediaBrowserTest.java', 9), ('/android/net/wifi/cts/WifiManagerTest.java', 7), ('/android/media/cts/MediaScannerTest.java', 6), ('/android/app/cts/ActivityManagerProcessStateTest.java', 6), ('/android/bluetooth/cts/HearingAidProfileTest.java', 6), ('/android/net/cts/ConnectivityManagerTest.java', 4), ('/android/telecom/cts/BackgroundCallAudioTest.java', 4), ('/android/permission/cts/NoWifiStatePermissionTest.java', 4), ('/com/android/cts/deviceowner/NetworkLoggingTest.java', 4), ('/android/net/cts/IpSecBaseTest.java', 4), ('/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 4), ('/android/telecom/cts/RemoteConnectionTest.java', 3), ('/android/car/cts/CarTest.java', 3), ('/android/media/cts/MediaScannerConnectionTest.java', 3), ('/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 3), ('/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java', 3), ('/android/telecom/cts/HandoverTest.java', 3), ('/android/car/cts/CarAppFocusManagerTest.java', 3), ('/android/media/cts/MediaSession2Test.java', 2), ('/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 2), ('/android/jvmti/cts/JvmtiAttachingHostTest.java', 2), ('/android/graphics/cts/ColorSpaceTest.java', 2), ('/android/keystore/cts/KeyPairGeneratorTest.java', 2), ('/android/cts/statsd/subscriber/ShellSubscriberTest.java', 2), ('/android/media/cts/ConnectionStatus.java', 2), ('/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 2), ('/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 2), ('/android/media/cts/NativeDecoderTest.java', 2), ('/android/net/wifi/cts/WifiInfoTest.java', 2), ('/android/os/cts/StrictModeTest.java', 2), ('/android/media/cts/MediaBrowserServiceTest.java', 2), ('/com/android/cts/appwithdata/CreatePrivateDataTest.java', 2), ('/android/security/cts/StagefrightTest.java', 2), ('/android/net/wifi/cts/ScanResultTest.java', 2), ('/android/suspendapps/cts/DualSuspendTests.java', 2), ('/android/media/cts/MediaSession2ServiceTest.java', 2), ('/android/media/cts/MediaPlayerFlakyNetworkTest.java', 2), ('/android/permission/cts/NoNetworkStatePermissionTest.java', 2), ('/android/net/cts/network/permission/InternetPermissionTest.java', 2), ('/android/telecom/cts/PhoneAccountSuggestionServiceTest.java', 2), ('/android/telecom/cts/ExtendedInCallServiceTest.java', 2), ('/android/security/NetworkSecurityPolicyTestBase.java', 2), ('/android/net/wifi/cts/WifiLocationInfoTest.java', 2), ('/android/app/usage/cts/NetworkUsageStatsTest.java', 2), ('/android/security/net/config/cts/DownloadManagerTest.java', 2), ('/android/net/cts/SSLCertificateSocketFactoryTest.java', 2), ('/android/telecom/cts/RemoteConferenceTest.java', 2), ('/android/net/cts/VpnServiceTest.java', 2), ('/android/suspendapps/cts/SuspendPackagesTest.java', 2), ('/android/net/cts/network/permission/UpdateStatsPermissionTest.java', 2), ('/android/telecom/cts/BasicInCallServiceTest.java', 2), ('/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 2), ('/android/os/cts/ParcelFileDescriptorTest.java', 2), ('/android/suspendapps/cts/DialogTests.java', 2), ('/android/media/cts/StreamingMediaPlayerTest.java', 2), ('/com/android/cts/net/hostside/VpnTest.java', 2), ('/android/telecom/cts/CallDetailsTest.java', 2), ('/android/telecom/cts/OutgoingCallTest.java', 2), ('/com/android/cts/deviceowner/proxy/PacProxyTest.java', 2), ('/android/telecom/cts/VideoCallTest.java', 2), ('/com/android/server/cts/device/statsd/AtomTests.java', 2), ('/android/net/cts/TrafficStatsTest.java', 2)]"	"[('([1:/android/telecom/cts/BackgroundCallAudioTest.java]:[connect()]:[1]:method_text:[assertEquals(DisconnectCause.REJECTED, call.getDetails().getDisconnectCause().getCode());     }     ])', 2), ('([1:/android/media/cts/MediaSession2Test.java]:[connect()]:[1]:method_text:[ession);             assertEquals(controllerInfo, sessionCallback.mController);         }     }     ])', 1), ('([1:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[java.net.Socket]:[1]:method_text:[e file and the boolean      * values are received as parameters from the host side test.      */    ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[java.net.Socket]:[1]:method_text:[cted void setUp() throws Exception {         mCurrentUser = getDevice().getCurrentUser();     }     ])', 1), ('([1:/android/graphics/cts/ColorSpaceTest.java]:[connect()]:[1]:method_text:[pace.Named.SRGB));         assertSame(connector.getSource(), connector.getDestination());     }     ])', 1), ('([1:/android/telecom/cts/RemoteConnectionTest.java]:[connect()]:[1]:method_text:[NECTED);         assertConnectionState(mRemoteConnection, Connection.STATE_DISCONNECTED);     }     ])', 1), ('([1:/android/telecom/cts/RemoteConnectionTest.java]:[connect()]:[1]:method_text:[ection#pullExternalCall()} is proxied to      * {@link Connection#onPullExternalCall()}.      */    ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[java.net.Socket]:[1]:method_text:[ mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");         mKeyStore.load(null, null);     }     ])', 1), ('([1:/android/cts/statsd/subscriber/ShellSubscriberTest.java]:[connect()]:[1]:method_text:[    value += ((int) arr[j + startIndex] & 0xffL) << (8 * j);         }         return value;     } }])', 1), ('([3:/android/media/cts/ConnectionStatus.java]:[ConnectivityManager.getActiveNetwork]:[3]:method_text:[       break;             }         }          // ping test timeout         return false;     }     ])', 1), ('([1:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[accessed. It includes file      * and detailed traffic stats.      * @throws IOException      */    ])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[connect()]:[1]:method_text:[tch (IOException e) {             Log.w(TAG, ""Failed to connect to "" + server, e);         }     } }])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[java.net.Socket]:[1]:method_text:["", Arrays.toString(a2));                 fail(message + "": at index "" + i);             }     }     ])', 1), ('([1:/android/car/cts/CarTest.java]:[connect()]:[1]:method_text:[       if (mCar != null && mCar.isConnected()) {             mCar.disconnect();         }     }     ])', 1), ('([2:/android/car/cts/CarTest.java]:[connect()]:[2]:method_text:[ertThat(mCar.isConnected()).isFalse();         assertThat(mCar.isConnecting()).isFalse();     }     ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[connect()]:[1]:method_text:[ that was set, and that      * calling build multiple times returns different instances.      */    ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[java.net.Socket]:[1]:method_text:[icy);     }      public interface ThrowingRunnable {         void run() throws Exception;     }     ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[connect()]:[1]:method_text:[in the current API version"");         } catch (UnsupportedOperationException expected) {}     }     ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[java.net.Socket]:[1]:method_text:[he network may not be connected or ready yet         return mCtsNetUtils.connectToWifi();     }     ])', 1), ('([2:/android/media/cts/MediaBrowserServiceTest.java]:[connect()]:[2]:method_text:[ll) {             mMediaBrowser.disconnect();             mMediaBrowser = null;         }     }     ])', 1), ('([1:/com/android/cts/appwithdata/CreatePrivateDataTest.java]:[java.net.Socket]:[1]:method_text:[d traffic stats.      * @throws IOException if any error occurred when creating the file      */    ])', 1), ('([1:/android/security/cts/StagefrightTest.java]:[java.net.Socket]:[1]:method_text:[ore any existing test methods      ***********************************************************/     ])', 1), ('([2:/android/telecom/cts/BackgroundCallAudioTest.java]:[connect()]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[connect()]:[1]:method_text:[sidQuoted);         assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());     } }])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[ll) {             mMediaBrowser.disconnect();             mMediaBrowser = null;         }     }     ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[k() {                 return !mMediaBrowser.isConnected();             }         }.run();     }     ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[    fail();         } catch (IllegalStateException e) {             // expected         }     }     ])', 1), ('([1:/android/media/cts/MediaBrowserTest.java]:[connect()]:[1]:method_text:[    && mConnectionCallback.mConnectionSuspendedCount == 0;             }         }.run();     }     ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[              return mItemCallback.mLastMediaItem != null;             }         }.run();     }     ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[tionFailedCount);         assertEquals(0, mConnectionCallback.mConnectionSuspendedCount);     }     ])', 1), ('([2:/android/media/cts/MediaBrowserTest.java]:[connect()]:[2]:method_text:[mChildrenLoadedWithOptionCount);         assertNull(mSubscriptionCallback.mLastParentId);     }     ])', 1), ('([3:/android/media/cts/MediaBrowserTest.java]:[connect()]:[3]:method_text:[ @Override         public void onError(String id) {             mLastErrorId = id;         }     } }])', 1), ('([1:/android/suspendapps/cts/DualSuspendTests.java]:[connect()]:[1]:method_text:[verHandler);         }         removeDeviceAdmin();         SuspendTestUtils.unsuspendAll();     } }])', 1), ('([1:/android/media/cts/MediaScannerTest.java]:[connect()]:[1]:method_text:[tContentUri(""external""),                 ""_data like ?"", new String[] { mFileDir + ""%""});     }     ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[Title, c.getString(0));          mMediaScannerConnection.disconnect();         c.close();     }     ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[1b);          mMediaScannerConnection.disconnect();          checkConnectionState(false);     }     ])', 1), ('([2:/android/media/cts/MediaScannerTest.java]:[connect()]:[2]:method_text:[ll);          mMediaScannerConnection.disconnect();          checkConnectionState(false);     }     ])', 1), ('([1:/android/media/cts/MediaScannerTest.java]:[connect()]:[1]:method_text:[_mixed_3,                     new String[] {""谭咏麟"", ""二十年白金畅销金曲全记录"", null, ""知心当玩偶"", null})     };     ])', 1), ('([1:/android/media/cts/MediaSession2ServiceTest.java]:[connect()]:[1]:method_text:[Session(ControllerInfo)}      * can return different sessions for different controllers.      */    ])', 1), ('([1:/android/media/cts/MediaPlayerFlakyNetworkTest.java]:[java.net.Socket]:[1]:method_text:[on {         releaseMediaPlayer();         releaseHttpServer();         super.tearDown();     }     ])', 1), ('([2:/android/permission/cts/NoNetworkStatePermissionTest.java]:[ConnectivityManager.getActiveNetwork]:[2]:method_text:[ssion:      *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.      */     @SmallTest    ])', 1), ('([1:/android/net/cts/network/permission/InternetPermissionTest.java]:[java.net.Socket]:[1]:method_text:[>Tests Permission:      *   {@link android.Manifest.permission#INTERNET}.      */     @SmallTest    ])', 1), ('([1:/android/telecom/cts/PhoneAccountSuggestionServiceTest.java]:[connect()]:[1]:method_text:[oneAccountSuggestionService.disableService(mContext);         }         super.tearDown();     }     ])', 1), ('([1:/android/media/cts/MediaScannerConnectionTest.java]:[connect()]:[1]:method_text:[ediaScannerConnection.disconnect();             mMediaScannerConnection = null;         }     }     ])', 1), ('([3:/android/media/cts/MediaScannerConnectionTest.java]:[connect()]:[3]:method_text:[th;             if (uri != null) {                 mediaUri = uri;             }         }      }  }])', 1), ('([1:/android/telecom/cts/ExtendedInCallServiceTest.java]:[connect()]:[1]:method_text:[);         inCallService.disconnectLastCall();          assertNumCalls(inCallService, 0);     }     ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[2]:method_text:[spot request at a time.      *      * Note: Location mode must be enabled for this test.      */    ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[ateCallback(Executor,      * WifiManager.TrafficStateCallback)} by sending some traffic.      */    ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[));     }      /**      * Tests {@link WifiManager#isWpa3SaeSupported()} does not crash.      */    ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[;         }     }      /**      * Tests {@link WifiManager#allowAutojoin(int, boolean)}.      */    ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[    }      /**      * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.      */    ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[connect()]:[1]:method_text:[     }     }      /**      * Tests {@link WifiManager#isWapiSupported()} does not crash.      */    ])', 1), ('([2:/android/security/NetworkSecurityPolicyTestBase.java]:[connect()]:[2]:method_text:[l).build();         assertFalse(mHttpOnlyWebServer.wasResourceRequested(uri.toString()));     }     ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[connect()]:[1]:method_text:[ilityStatsEntry} retrieved from      * {@link WifiManager.OnWifiUsabilityStatsListener}.      */    ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[connect()]:[2]:method_text:[d() != -1);             }              uiAutomation.dropShellPermissionIdentity();         }     } }])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[connect()]:[1]:method_text:[_NAME,                 WIFI_LOCATION_TEST_APP_RETRIEVE_CONNECTION_INFO_SERVICE), status);     }     ])', 1), ('([2:/android/app/usage/cts/NetworkUsageStatsTest.java]:[connect()]:[2]:method_text:[er) -> telephonyManager.getSubscriberId());         }         return """";     }      @AppModeFull    ])', 1), ('([2:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[connect()]:[2]:method_text:[t.disconnect();         TestQuickAccessWalletService.awaitUnbinding(3, TimeUnit.SECONDS);     }     ])', 1), ('([1:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[connect()]:[1]:method_text:[hat(callback.mResponse).isNotNull();         assertThat(callback2.mResponse).isNotNull();     }     ])', 1), ('([1:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[1]:method_text:[ <p>Requires Permission:      *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.      */    ])', 1), ('([3:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[3]:method_text:[ <p>Requires Permission:      *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.      */    ])', 1), ('([2:/android/permission/cts/NoWifiStatePermissionTest.java]:[connect()]:[2]:method_text:[ <p>Requires Permission:      *   {@link android.Manifest.permission#CHANGE_WIFI_STATE}.      */    ])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[java.net.Socket]:[1]:method_text:[ength: 5\\r\\n\\r\\nhello"";     private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;     ])', 1), ('([2:/android/net/cts/SSLCertificateSocketFactoryTest.java]:[java.net.Socket]:[2]:method_text:[nameVerifier() {         HttpsURLConnection.setDefaultHostnameVerifier(mDefaultVerifier);     }     ])', 1), ('([1:/android/telecom/cts/RemoteConferenceTest.java]:[connect()]:[1]:method_text:[backInvoker.getArgs(0)[1]);         mRemoteConferenceObject.unregisterCallback(callback);     }     ])', 1), ('([1:/android/telecom/cts/HandoverTest.java]:[connect()]:[1]:method_text:[     * does not declare {@link android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO}.      */    ])', 1), ('([1:/android/telecom/cts/HandoverTest.java]:[connect()]:[1]:method_text:[ support handover that an outgoing handover      * request will be successfully relayed.      */    ])', 1), ('([1:/android/net/cts/VpnServiceTest.java]:[java.net.Socket]:[1]:method_text:[ @AppModeFull(reason = ""PackageManager#queryIntentActivities cannot access in instant app mode"")    ])', 1), ('([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[connect()]:[1]:method_text:[s addr) {         return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));     } }])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[java.net.Socket]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([1:/android/suspendapps/cts/SuspendPackagesTest.java]:[connect()]:[1]:method_text:[lable(String[] packageNames, UserHandle user,                 boolean replacing) {         }     } }])', 1), ('([1:/android/net/cts/network/permission/UpdateStatsPermissionTest.java]:[java.net.Socket]:[1]:method_text:[ission:      *   {@link android.Manifest.permission#UPDATE_DEVICE_STATS}.      */     @SmallTest    ])', 1), ('([1:/android/telecom/cts/BasicInCallServiceTest.java]:[connect()]:[1]:method_text:[onnect();                 lock.release();             }         };         return callbacks;     } }])', 1), ('([1:/android/net/cts/IpSecBaseTest.java]:[connect()]:[1]:method_text:[uildIpSecTransform(InstrumentationRegistry.getContext(), spi, null, localAddr);         }     }     ])', 1), ('([2:/android/net/cts/IpSecBaseTest.java]:[java.net.Socket]:[2]:method_text:[uildIpSecTransform(InstrumentationRegistry.getContext(), spi, null, localAddr);         }     }     ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[java.net.Socket]:[1]:method_text:[MPONENT, VPN_PACKAGE,                 /* restrictions */ null);         super.tearDown();     }     ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[nd: first      * allowing a service to be started, then stopped by the system when idle.      */    ])', 1), ('([5:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[5]:method_text:[t allow services to be started from broadcasts except when in      * the correct states.      */    ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[/**      * Test that background check does allow services to be started from activities.      */    ])', 1), ('([4:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[4]:method_text:[   /**      * Test that the foreground service app op does prevent the foreground state.      */    ])', 1), ('([8:/android/app/cts/ActivityManagerProcessStateTest.java]:[connect()]:[8]:method_text:[ound services demoted to      * ordinary service state when it is no longer the top app.      */    ])', 1), ('([1:/android/os/cts/ParcelFileDescriptorTest.java]:[java.net.Socket]:[1]:method_text:[      private Context getContext() {         return InstrumentationRegistry.getContext();     }     ])', 1), ('([1:/android/suspendapps/cts/DialogTests.java]:[connect()]:[1]:method_text:[      if (mTestAppInterface != null) {             mTestAppInterface.disconnect();         }     } }])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[java.net.Socket]:[1]:method_text:[ondition.    Disable until better solution is available     // Streaming RTSP video from YouTube    ])', 1), ('([2:/com/android/cts/net/hostside/VpnTest.java]:[java.net.Socket]:[2]:method_text:[l  *  */ public class VpnTest extends InstrumentationTestCase {      // These are neither public nor])', 1), ('([2:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[2]:method_text:[ * Basic test case to make sure that a fictional device is disconnected.      */     @MediumTest    ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[     * Basic test case to get the list of connected Hearing Aid devices.      */     @MediumTest    ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[matching Hearing Aid devices for each of the 4 connection      * states.      */     @MediumTest    ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[1]:method_text:[ changed intent is called, the parameters and      * device are correct.      */     @MediumTest    ])', 1), ('([2:/android/bluetooth/cts/HearingAidProfileTest.java]:[connect()]:[2]:method_text:[ t) {         try {             Thread.sleep(t);         } catch (InterruptedException e) {}     } }])', 1), ('([1:/android/telecom/cts/CallDetailsTest.java]:[connect()]:[1]:method_text:[OLTE);     }      /**      * Verifies operation of the test telecom call ID system APIs.      */    ])', 1), ('([1:/android/car/cts/CarAppFocusManagerTest.java]:[connect()]:[1]:method_text:[Manager.APP_FOCUS_TYPE_NAVIGATION, true));         mManager.removeFocusListener(change);      }     ])', 1), ('([1:/android/car/cts/CarAppFocusManagerTest.java]:[connect()]:[1]:method_text:[T_WAIT_TIMEOUT_MS,                 CarAppFocusManager.APP_FOCUS_TYPE_NAVIGATION, false));     }     ])', 1), ('([1:/android/telecom/cts/OutgoingCallTest.java]:[connect()]:[1]:method_text:[ils.TEST_PHONE_ACCOUNT_HANDLE_2, conn.getPhoneAccountHandle());         conn.onDisconnect();     } }])', 1), ('([1:/com/android/cts/deviceowner/proxy/PacProxyTest.java]:[java.net.Socket]:[1]:method_text:[ the PAC file can be set and it downloads it    * from the local HTTP server we are hosting.    */  ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[connect()]:[1]:method_text:[(10.0f);         assertZoomChanged(mockVideoProvider, 10.0f);          call.disconnect();     }     ])', 1), ('([2:/com/android/server/cts/device/statsd/AtomTests.java]:[connect()]:[2]:method_text:[           if (urlc != null) {                 urlc.disconnect();             }         }     }     ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[java.net.Socket]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                 range.contains(value));     }     ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[ConnectivityManager.getActiveNetwork]:[1]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1), ('([5:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[connect()]:[5]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1)]"	""	""	""	""	""
"207:635317) 7.4.8  . Secure Elements"	"7.4.8"	"C-1-2"	""	"[('android.telephony.euicc.cts.EuiccManagerTest', 18), ('android.telephony.euicc.cts.EuiccServiceTest', 16), ('android.telephony.euicc.cts.EuiccProfileInfoTest', 9), ('android.telephony.cts.TelephonyManagerTest', 8), ('android.carrierapi.cts.CarrierApiTest', 6), ('android.omapi.cts.OmapiTest', 5), ('android.telephony.euicc.cts.EuiccInfoTest', 4), ('android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest', 3), ('android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest', 3), ('android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest', 3), ('android.telephony4.cts.SimRestrictedApisTest', 2), ('android.net.eap.cts.EapSessionConfigTest', 2), ('android.omapi.accesscontrol3.cts.AccessControlTest', 1), ('android.omapi.accesscontrol1.cts.AccessControlTest', 1), ('android.carrierapi.cts.ApnDatabaseTest', 1), ('android.telephony.euicc.cts.DownloadableSubscriptionTest', 1), ('android.net.cts.ConnectivityDiagnosticsManagerTest', 1), ('android.omapi.accesscontrol2.cts.AccessControlTest', 1)]"	"[('getContext', 20), ('setUp', 11), ('Object', 5), ('ServiceConnectionTimerTask', 4), ('getPackageManager', 4), ('tearDown', 4), ('hasCellular', 3), ('getContentResolver', 3), ('getPackageName', 2), ('getPhoneCount', 2), ('Builder', 2), ('build', 2), ('start', 1), ('quit', 1), ('failMessage', 1), ('run', 1), ('Binder', 1), ('getAction', 1), ('countDown', 1), ('clearQueue', 1), ('waitForCarrierConfigChanged', 1), ('getDefaultSubscriptionId', 1), ('getRadioHalVersion', 1), ('toByteArray', 1), ('getBytes', 1)]"	"[('CtsTelephonyTestCases', 65), ('CtsCarrierApiTestCases', 7), ('CtsOmapiTestCases', 5), ('CtsSecureElementAccessControlTestCases', 3), ('CtsSimRestrictedApisTestCases', 2), ('CtsIkeTestCases', 2)]"	""	"7.4.8/C-1-2"	"""C-1-2] MUST declare the correct feature flags via android.hardware.se.omapi.uicc for the device with UICC-based secure elements, android.hardware.se.omapi.ese for the device with eSE-based secure elements and android.hardware.se.omapi.sd for the device with SD-based secure elements. <h3 id="""	"07040800.670102"	"UICC android.hardware.se.omapi.sd android.hardware.se.omapi.ese android.hardware.se.omapi.uicc"	""	""	""	"[('UICC', 85)]"	""	"[('[android.omapi.accesscontrol3.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest isSimCardPresent CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannelWithInvalidInputs CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testOpportunistic CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testIccExchangeSimIO CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testEapAkaAuthentication CtsCarrierApiTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest ServiceTestRule CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetOtaStatus CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetDownloadableSubscriptionMetadata CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnStartOtaIfNecessary CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetDefaultDownloadableSubscriptionList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnDownloadSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEuiccProfileInfoList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnGetEuiccInfo CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnDeleteSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnSwitchToSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnUpdateSubscriptionNickname CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnEraseSubscriptions CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testOnRetainSubscriptionsForFactoryReset CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testDump CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccServiceTest testEncodeSmdxSubjectAndReasonCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDownloadableSubscriptionMetadataResultTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testGetEid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testCreateForCardId CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testDownloadSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testGetEuiccInfo CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testDeleteSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSwitchToSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testEraseSubscriptions CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testStartResolutionActivity CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testOperationCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testErrorCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSetSupportedCountries CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testSetUnsupportedCountries CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsTrue_ifCountryIsOnSupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsTrue_ifCountryIsNotOnUnsupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifCountryIsNotOnSupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifCountryIsOnUnsupportedList CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccManagerTest testIsSupportedCountry_returnsFalse_ifBothListsAreEmpty CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetDefaultDownloadableSubscriptionListResultTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.omapi.accesscontrol1.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 1), ('[android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest testGetResult CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.GetEuiccProfileInfoListResultTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.omapi.cts.OmapiTest OnConnectedListener CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testGetReaders CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testATR CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testOpenBasicChannelNullAid CtsOmapiTestCases]', 1), ('[android.omapi.cts.OmapiTest testOpenBasicChannelNonNullAid CtsOmapiTestCases]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest TestNetworkCallback None]', 1), ('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener CtsSecureElementAccessControlTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testGetOsVersion CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testDescribeContents CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccInfoTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetManualNetworkSelectionPlmnPersisted CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCardIdForDefaultEuicc CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfoException CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfo CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsApplicationOnUicc CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState CtsTelephonyTestCases]', 1), ('[android.telephony4.cts.SimRestrictedApisTest testGetIccAuthentication CtsSimRestrictedApisTestCases]', 1), ('[android.telephony4.cts.SimRestrictedApisTest testGetUiccCardsInfo CtsSimRestrictedApisTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testWriteToParcel CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testWriteToParcelNullCarrierId CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderAndGetters CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilder_BasedOnAnotherProfile CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testEqualsHashCode CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderBuild_IllegalIccid CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testBuilderSetOperatorMccMnc_Illegal CtsTelephonyTestCases]', 1), ('[android.telephony.euicc.cts.EuiccProfileInfoTest testCreatorNewArray CtsTelephonyTestCases]', 1), ('[android.net.eap.cts.EapSessionConfigTest testBuildWithAllEapMethods CtsIkeTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccManagerTest.java', 18), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccServiceTest.java', 16), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccProfileInfoTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/secure_element/omapi/src/android/omapi/cts/OmapiTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/EuiccInfoTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony4/src/android/telephony4/cts/SimRestrictedApisTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/eap/cts/EapSessionConfigTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/secure_element/access_control/AccessControlApp3/src/android/omapi/accesscontrol3/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/secure_element/access_control/AccessControlApp1/src/android/omapi/accesscontrol1/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/ApnDatabaseTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/DownloadableSubscriptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 1)]"	"[('/android/telephony/euicc/cts/EuiccManagerTest.java', 19), ('/android/telephony/euicc/cts/EuiccServiceTest.java', 17), ('/android/telephony/euicc/cts/EuiccProfileInfoTest.java', 10), ('/android/telephony/cts/TelephonyManagerTest.java', 9), ('/android/carrierapi/cts/CarrierApiTest.java', 7), ('/android/omapi/cts/OmapiTest.java', 6), ('/android/telephony/euicc/cts/EuiccInfoTest.java', 5), ('/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java', 4), ('/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java', 4), ('/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java', 4), ('/android/telephony4/cts/SimRestrictedApisTest.java', 3), ('/android/net/eap/cts/EapSessionConfigTest.java', 3), ('/android/omapi/accesscontrol3/cts/AccessControlTest.java', 2), ('/android/omapi/accesscontrol1/cts/AccessControlTest.java', 2), ('/android/carrierapi/cts/ApnDatabaseTest.java', 2), ('/android/telephony/euicc/cts/DownloadableSubscriptionTest.java', 2), ('/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 2), ('/android/omapi/accesscontrol2/cts/AccessControlTest.java', 2)]"	"[('([2:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[2]:method_text:[           fail(e.toString());         }          assertTrue(mCallback.isMethodCalled());     }     ])', 9), ('([3:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[3]:method_text:[           fail(e.toString());         }          assertTrue(mCallback.isMethodCalled());     }     ])', 3), ('([3:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[3]:method_text:[     EuiccManager.EMBEDDED_SUBSCRIPTION_RESULT_ERROR, mCallbackReceiver.getResultCode());     }     ])', 3), ('([6:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[6]:method_text:[ginal country list         mEuiccManager.setSupportedCountries(originalSupportedCountry);     }     ])', 3), ('([9:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[9]:method_text:[ortedCountry);         mEuiccManager.setUnsupportedCountries(originalUnsupportedCountry);     }     ])', 2), ('([9:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[9]:method_text:[ EuiccProfileInfo.CREATOR.createFromParcel(parcel);          assertEquals(p, fromParcel);     }     ])', 2), ('([2:/android/omapi/accesscontrol3/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                 connectionTimer.cancel();             }         }     }     ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[             ""Visit https://source.android.com/devices/tech/config/uicc.html"");         }     }     ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[r a logical channel and makes sure appropriate      * errors are returned from the UICC.      */    ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[ss, as it process involves several file-reads. The ICCID is one of the first files read.      */    ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[lected via a      * SELECT apdu via the basic channel, then a STATUS AT-command is sent.      */    ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[envelope to the UICC via      * {@link TelephonyManager#sendEnvelopeWithStatus(String)}.      */    ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UICC]:[1]:method_text:[d"",                 hexStringToBytes(EXPECTED_EAP_AKA_RESULT),                 akaResponse);     } }])', 1), ('([56:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[56]:method_text:[      private Context getContext() {         return InstrumentationRegistry.getContext();     }     ])', 1), ('([6:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[6]:method_text:[           fail(e.toString());         }          assertTrue(mCallback.isMethodCalled());     }     ])', 1), ('([9:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[9]:method_text:[           fail(e.toString());         }          assertTrue(mCallback.isMethodCalled());     }     ])', 1), ('([4:/android/telephony/euicc/cts/EuiccServiceTest.java]:[UICC]:[4]:method_text:[;         assertEquals(mEuiccService.encodeSmdxSubjectAndReasonCode(""8.1"", ""5""), 0xA081005);     } }])', 1), ('([5:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[5]:method_text:[(                         EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);     }     ])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[1]:method_text:[     assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mSubMetadataResult.getResult());     }     ])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[UICC]:[1]:method_text:[RORS, fromParcel.getResult());         assertNull(fromParcel.getDownloadableSubscription());     } }])', 1), ('([14:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[14]:method_text:[iver != null) {             getContext().unregisterReceiver(mCallbackReceiver);         }     }     ])', 1), ('([2:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[2]:method_text:[ eid = mEuiccManager.getEid();          // verify result is null         assertNull(eid);     }     ])', 1), ('([4:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[4]:method_text:[     mEuiccManager = mEuiccManager.createForCardId(TelephonyManager.UNSUPPORTED_CARD_ID);     }     ])', 1), ('([8:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[8]:method_text:[cManager.getEuiccInfo();          // verify result is null         assertNull(euiccInfo);     }     ])', 1), ('([4:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[4]:method_text:[     EuiccManager.EMBEDDED_SUBSCRIPTION_RESULT_ERROR, mCallbackReceiver.getResultCode());     }     ])', 1), ('([7:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[7]:method_text:[tionActivity.RESULT_CODE_TEST_PASSED,                 mCallbackReceiver.getResultCode());     }     ])', 1), ('([13:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[13]:method_text:[ION_SMDX_SUBJECT_REASON_CODE, 10);         assertEquals(EuiccManager.OPERATION_HTTP, 11);     }     ])', 1), ('([19:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[19]:method_text:[INVALID_RESPONSE, 10015);         assertEquals(EuiccManager.ERROR_OPERATION_BUSY, 10016);     }     ])', 1), ('([6:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[6]:method_text:[l country list         mEuiccManager.setUnsupportedCountries(originalUnsupportedCountry);     }     ])', 1), ('([9:/android/telephony/euicc/cts/EuiccManagerTest.java]:[UICC]:[9]:method_text:[tDownLatch.countDown();                     break;                 }             }         }     } }])', 1), ('([5:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[5]:method_text:[(                         EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);     }     ])', 1), ('([1:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[1]:method_text:[  assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mDefaultSubListResult.getResult());     }     ])', 1), ('([1:/android/telephony/euicc/cts/GetDefaultDownloadableSubscriptionListResultTest.java]:[UICC]:[1]:method_text:[ORS, fromParcel.getResult());         assertNull(fromParcel.getDownloadableSubscriptions());     } }])', 1), ('([2:/android/omapi/accesscontrol1/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                 connectionTimer.cancel();             }         }     }     ])', 1), ('([9:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[9]:method_text:[                       null /*profiles*/,                         false /*isRemovable*/);     }     ])', 1), ('([1:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[1]:method_text:[     assertEquals(EuiccService.RESULT_RESOLVABLE_ERRORS, mProfileListResult.getResult());     }     ])', 1), ('([3:/android/telephony/euicc/cts/GetEuiccProfileInfoListResultTest.java]:[UICC]:[3]:method_text:[mProfileListResult.getProfiles());         assertFalse(mProfileListResult.getIsRemovable());     } }])', 1), ('([1:/android/carrierapi/cts/ApnDatabaseTest.java]:[UICC]:[1]:method_text:[e.      * Verify that the inserted values match the result of the query and are deleted.      */    ])', 1), ('([4:/android/omapi/cts/OmapiTest.java]:[UICC]:[4]:method_text:[        connectionTimer.cancel();             }         }     }      /** Tests getReaders API */    ])', 1), ('([16:/android/omapi/cts/OmapiTest.java]:[UICC]:[16]:method_text:[e) {             fail(""Unexpected Exception "" + e);         }     }      /** Tests getATR API */    ])', 1), ('([4:/android/omapi/cts/OmapiTest.java]:[UICC]:[4]:method_text:[pected Exception "" + e);         }     }      /** Tests OpenBasicChannel API when aid is null */    ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[UICC]:[2]:method_text:[ed Exception "" + e);         }     }      /** Tests OpenBasicChannel API when aid is provided */    ])', 1), ('([2:/android/omapi/cts/OmapiTest.java]:[UICC]:[2]:method_text:[e) {             fail(""Unexpected Exception "" + e);         }     }      /** Tests Select API */    ])', 1), ('([2:/android/telephony/euicc/cts/DownloadableSubscriptionTest.java]:[UICC]:[2]:method_text:[ mDownloadableSubscription = DownloadableSubscription.forActivationCode(ACTIVATION_CODE);     }     ])', 1), ('([1:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[UICC]:[1]:method_text:[redCallbacks) {             mCdm.unregisterConnectivityDiagnosticsCallback(cb);         }     }     ])', 1), ('([2:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[UICC]:[2]:method_text:[nectionTimer != null) {                 connectionTimer.cancel();             }         }     }     ])', 1), ('([8:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[8]:method_text:[   public void setUp() throws Exception {         mEuiccInfo = new EuiccInfo(OS_VERSION);     }     ])', 1), ('([2:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[2]:method_text:[  assertNotNull(mEuiccInfo);         assertEquals(OS_VERSION, mEuiccInfo.getOsVersion());     }     ])', 1), ('([2:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[2]:method_text:[ts();         assertTrue(bitmask == 0 || bitmask == Parcelable.CONTENTS_FILE_DESCRIPTOR);     }     ])', 1), ('([7:/android/telephony/euicc/cts/EuiccInfoTest.java]:[UICC]:[7]:method_text:[ateFromParcel(parcel);         assertEquals(OS_VERSION, euiccInfoFromParcel.getOsVersion());     } }])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[3]:method_text:[ckageManager.FEATURE_TELEPHONY)                 && mTelephonyManager.getPhoneCount() > 0;     }     ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);     }     ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[1]:method_text:[ returns a positive value or either      * UNINITIALIZED_CARD_ID or UNSUPPORTED_CARD_ID.      */    ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[4]:method_text:[/**      * Tests that a SecurityException is thrown when trying to access UiccCardsInfo.      */    ])', 1), (""([4:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[4]:method_text:[ption e) {         }     }      /**      * Tests that UiccCardsInfo methods don't crash.      */    ])"", 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[5]:method_text:[  /**      * Tests that the device properly reports the contents of NetworkSelectionMode      */    ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[3]:method_text:[ntation().getUiAutomation()                     .dropShellPermissionIdentity();         }     }     ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[UICC]:[7]:method_text:[ minor) {         if (major < 0 || minor < 0) return 0;         return major * 100 + minor;     } } ])', 1), ('([2:/android/telephony4/cts/SimRestrictedApisTest.java]:[UICC]:[2]:method_text:[ts a SecurityException since the test apk is not signed by certficate on the      * SIM.      */    ])', 1), ('([2:/android/telephony4/cts/SimRestrictedApisTest.java]:[UICC]:[2]:method_text:[arrier privileges."");             }         } catch (SecurityException expected) {         }     } }])', 1), ('([7:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[7]:method_text:[BuilderBuild_IllegalIccid}  */ @RunWith(AndroidJUnit4.class) public class EuiccProfileInfoTest {    ])', 1), ('([15:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[15]:method_text:[UiccAccessRule(new byte[0], null, 0)},                 p.getUiccAccessRules().toArray());     }     ])', 1), ('([9:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[9]:method_text:[          assertEquals(p, copied);         assertEquals(p.hashCode(), copied.hashCode());     }     ])', 1), ('([20:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[20]:method_text:[);         assertFalse(p.equals(t));         assertNotEquals(p.hashCode(), t.hashCode());     }     ])', 1), ('([1:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[1]:method_text:[id testBuilderBuild_IllegalIccid() {         new EuiccProfileInfo.Builder(""abc"").build();     }     ])', 1), ('([1:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[1]:method_text:[       .setCarrierIdentifier(new CarrierIdentifier(new byte[] {1, 2, 3, 4}, null, null));     }     ])', 1), ('([2:/android/telephony/euicc/cts/EuiccProfileInfoTest.java]:[UICC]:[2]:method_text:[ofiles = EuiccProfileInfo.CREATOR.newArray(123);         assertEquals(123, profiles.length);     } }])', 1), ('([1:/android/net/eap/cts/EapSessionConfigTest.java]:[UICC]:[1]:method_text:[APV2_USERNAME = ""username"";     private static final String EAP_MSCHAPV2_PASSWORD = ""password"";     ])', 1), ('([5:/android/net/eap/cts/EapSessionConfigTest.java]:[UICC]:[5]:method_text:[tEquals(SUB_ID, config.getSubId());         assertEquals(APPTYPE_USIM, config.getAppType());     } }])', 1)]"	""	""	""	""	""
"212:651746) 7.5.4  . Camera API Behavior"	"7.5.4"	"H-1-1"	""	"[('android.autofillservice.cts.SimpleSaveActivityTest', 10), ('android.location.cts.fine.GnssAntennaInfoTest', 4), ('android.hardware.camera2.cts.LogicalCameraDeviceTest', 4), ('android.autofillservice.cts.CustomDescriptionTest', 4), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 3), ('android.autofillservice.cts.CustomDescriptionDateTest', 2), ('android.autofillservice.cts.CheckoutActivityTest', 2), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 1), ('android.view.inputmethod.cts.InlineSuggestionInfoTest', 1), ('android.autofillservice.cts.ValidatorTest', 1), ('android.mediav2.cts.ExtractorTest', 1), ('android.hardware.cts.SensorAdditionalInfoTest', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.hardware.cts.Camera_SizeTest', 1), ('android.autofillservice.cts.OnClickActionTest', 1)]"	"[('build', 3), ('setUp', 2), ('size', 2), ('enableService', 1), ('Builder', 1), ('onFill', 1), ('getNextFillRequest', 1), ('tapLogin', 1), ('run', 1), ('getNextSaveRequest', 1), ('applyCharSequenceTransformationToImageView', 1), ('getSimpleName', 1), ('length', 1), ('getSize', 1), ('close', 1)]"	"[('CtsAutoFillServiceTestCases', 20), ('CtsCameraTestCases', 6), ('CtsLocationFineTestCases', 4), ('CtsAccessibilityServiceTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsMediaTestCases', 1), ('CtsSensorTestCases', 1)]"	""	"7.5.4/H-1-1"	""">7.5.4/H-1-1] MUST have normal field of view (FOV) by default and it MUST be between 50 and 90 degrees. Handheld device implementations: [<a href=""#7_6_memory_and_storage"""""	"07050400.720101"	"FOV"	""	""	""	"[('FOV', 37)]"	""	"[('[android.autofillservice.cts.SimpleSaveActivityTest testSanitizeOnSaveWhenAppChangeValues CtsAutoFillServiceTestCases]', 6), ('[android.accessibilityservice.cts.AccessibilityMagnificationTest testA11yNodeInfoVisibility_whenOutOfMagnifiedArea_shouldVisible CtsAccessibilityServiceTestCases]', 1), ('[android.view.inputmethod.cts.InlineSuggestionInfoTest testInlineSuggestionInfoValues CtsInputMethodTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionDateTest testCustomSave CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionDateTest testSaveSameValue_withoutSanitization CtsAutoFillServiceTestCases]', 1), ('[android.location.cts.fine.GnssAntennaInfoTest testFullAntennaInfoWriteToParcel CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.GnssAntennaInfoTest testPartialAntennaInfoWriteToParcel CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.GnssAntennaInfoTest testCreateFullGnssAntennaInfoAndGetValues CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.GnssAntennaInfoTest testCreatePartialGnssAntennaInfoAndGetValues CtsLocationFineTestCases]', 1), ('[android.autofillservice.cts.ValidatorTest testDontShowUiWhenValidatorFails CtsAutoFillServiceTestCases]', 1), ('[android.hardware.camera2.cts.LogicalCameraDeviceTest testLogicalCameraZoomSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.LogicalCameraDeviceTest testActivePhysicalId CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.LogicalCameraDeviceTest testDefaultFov CtsCameraTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionTest testSanitizationBeforeBatchUpdates CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionTest testSanitizationBeforeTransformations CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionTest assertSaveUiWithoutCustomDescriptionIsShown CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CheckoutActivityTest testCustomizedSaveUiWithContentDescription CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CheckoutActivityTest testCustomizedSaveUiWhenListResolutionFails CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SimpleSaveActivityTest testTapHomeWhileSaveUiIsShowing CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SimpleSaveActivityTest testSelectedDatasetsAreSentOnSaveRequest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SimpleSaveActivityTest testExplicitlySaveButtonOnly CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SimpleSaveActivityTest testTapUrlSpanOnSuccinctDescription_tapBackWithoutFinish CtsAutoFillServiceTestCases]', 1), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaTestCases]', 1), ('[android.hardware.cts.SensorAdditionalInfoTest testSensorAdditionalInfo CtsSensorTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.cts.Camera_SizeTest testConstructor CtsCameraTestCases]', 1), ('[android.autofillservice.cts.OnClickActionTest testHideAndShow CtsAutoFillServiceTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity testStarted None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/SimpleSaveActivityTest.java', 10), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/GnssAntennaInfoTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/CustomDescriptionTest.java', 4), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/CustomDescriptionDateTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/CheckoutActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InlineSuggestionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/ValidatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorAdditionalInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/Camera_SizeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/OnClickActionTest.java', 1)]"	"[('/android/autofillservice/cts/SimpleSaveActivityTest.java', 11), ('/android/location/cts/fine/GnssAntennaInfoTest.java', 5), ('/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 5), ('/android/autofillservice/cts/CustomDescriptionTest.java', 5), ('/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 4), ('/android/autofillservice/cts/CustomDescriptionDateTest.java', 3), ('/android/autofillservice/cts/CheckoutActivityTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/android/view/inputmethod/cts/InlineSuggestionInfoTest.java', 2), ('/android/autofillservice/cts/ValidatorTest.java', 2), ('/android/mediav2/cts/ExtractorTest.java', 2), ('/android/hardware/cts/SensorAdditionalInfoTest.java', 2), ('/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/android/hardware/cts/Camera_SizeTest.java', 2), ('/android/autofillservice/cts/OnClickActionTest.java', 2)]"	"[('([1:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[1]:method_text:[performClick();         });          mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_GENERIC);     }     ])', 4), ('([1:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[1]:method_text:[       assertTextValue(findNodeByResourceId(saveRequest.structure, ID_PASSWORD), ""pass"");     }     ])', 2), ('([1:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[FOV]:[1]:method_text:[ayoutParams));         // Waiting for UI refresh         mInstrumentation.waitForIdleSync();     } }])', 1), ('([1:/android/view/inputmethod/cts/InlineSuggestionInfoTest.java]:[FOV]:[1]:method_text:[()).isEqualTo(InlineSuggestionInfo.TYPE_SUGGESTION);         assertTrue(info.isPinned());     }     ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionDateTest.java]:[FOV]:[1]:method_text:[ mUiBot.assertChild(saveUi, ""second"", (o) -> assertThat(o.getText()).isEqualTo(""12-10""));     }     ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionDateTest.java]:[FOV]:[1]:method_text:[int resourceId) {         return new RemoteViews(getContext().getPackageName(), resourceId);     } }])', 1), ('([1:/android/location/cts/fine/GnssAntennaInfoTest.java]:[FOV]:[1]:method_text:[ verifyFullGnssAntennaInfoValuesAndGetters(newGnssAntennaInfo);         parcel.recycle();     }     ])', 1), ('([1:/android/location/cts/fine/GnssAntennaInfoTest.java]:[FOV]:[1]:method_text:[rifyPartialGnssAntennaInfoValuesAndGetters(newGnssAntennaInfo);         parcel.recycle();     }     ])', 1), ('([1:/android/location/cts/fine/GnssAntennaInfoTest.java]:[FOV]:[1]:method_text:[estGnssAntennaInfo();         verifyFullGnssAntennaInfoValuesAndGetters(gnssAntennaInfo);     }     ])', 1), ('([3:/android/location/cts/fine/GnssAntennaInfoTest.java]:[FOV]:[3]:method_text:[ION_UNCERTAINTIES,                 signalGainCorrections.getCorrectionUncertaintiesArray());     } }])', 1), ('([1:/android/autofillservice/cts/ValidatorTest.java]:[FOV]:[1]:method_text:[).findByAutofillId(id);         assertThat(validator.isValid(valueFinder)).isEqualTo(valid);     } }])', 1), ('([1:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[FOV]:[1]:method_text:[agtion behaves as expected      * for logical multi-camera and non-logical multi-camera.      */    ])', 1), ('([8:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[FOV]:[8]:method_text:[camera, the activePhysicalId is valid, and is the same      * for all capture templates.      */    ])', 1), ('([1:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[FOV]:[1]:method_text:[d device, the default FOV is      * between 50 and 90 degrees for all capture templates.      */    ])', 1), ('([36:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[FOV]:[36]:method_text:[htPixels/dm.ydpi,2);         return Math.sqrt(widthInInchesSquared + heightInInchesSquared);     } }])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionTest.java]:[FOV]:[1]:method_text:[Bot.saveForAutofill(true, SAVE_DATA_TYPE_GENERIC);         sReplier.getNextSaveRequest();     }     ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionTest.java]:[FOV]:[1]:method_text:[         mActivity.tapLogin();          assertSaveUiIsShownWithTwoLines(""batch updated"");     }     ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionTest.java]:[FOV]:[1]:method_text:[);         mActivity.tapLogin();          assertSaveUiIsShownWithTwoLines(""transformed"");     }     ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionTest.java]:[FOV]:[1]:method_text:[xt = matchFirst ? ""polo"" : ""POLO"";         assertSaveUiIsShownWithTwoLines(expectedText);     }     ])', 1), ('([1:/android/autofillservice/cts/CheckoutActivityTest.java]:[FOV]:[1]:method_text:[nored when the selected spinner element is not      * available in the autofill options.      */    ])', 1), ('([1:/android/autofillservice/cts/CheckoutActivityTest.java]:[FOV]:[1]:method_text:[         assertThat(saveUi.findObject(By.res(packageName, Helper.ID_STATIC_TEXT))).isNull();     } }])', 1), ('([3:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[3]:method_text:[uts.ACTIVITY_RESURRECTION);          mUiBot.assertSaveNotShowing(SAVE_DATA_TYPE_GENERIC);     }     ])', 1), ('([1:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[1]:method_text:[      assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_PASSWORD), ""42"");     }     ])', 1), ('([1:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[1]:method_text:[on, then the new activity      * finishes:      * the Save UI should have been restored.      */    ])', 1), ('([1:/android/autofillservice/cts/SimpleSaveActivityTest.java]:[FOV]:[1]:method_text:[     /* start= */ 8,  /* end= */ 15, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);         return ss;     } }])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[FOV]:[2]:method_text:[   testExtractor.unselectTrack(trackID);             }             return result;         }         ])', 1), ('([4:/android/hardware/cts/SensorAdditionalInfoTest.java]:[FOV]:[4]:method_text:[boolean vec3CalibrationDuplicate() {             return mVec3CalibrationDuplicate;         }     } }])', 1), ('([15:/android/hardware/camera2/cts/RobustnessTest.java]:[FOV]:[15]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());         }         return PREVIEW_SIZE_BOUND;     } }])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[FOV]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}      */    ])', 1), ('([1:/android/autofillservice/cts/OnClickActionTest.java]:[FOV]:[1]:method_text:[esourceId) {         mUiBot.assertGoneByRelativeId(saveUi, resourceId, Timeouts.UI_TIMEOUT);     } }])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[FOV]:[1]:method_text:[ultinetwork_connectivity_test_running);                 }                  @Override                ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[FOV]:[1]:method_text:[iew.setText(progressMessageResourceId);                 }                  @Override                ])', 1), ('([6:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[FOV]:[6]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1)]"	""	""	""	""	""
"212:651746) 7.5.4  . Camera API Behavior"	"7.5.4"	"C-0-12"	""	"[('android.hardware.cts.CameraTest', 12), ('android.hardware.camera2.cts.CameraDeviceTest', 4), ('android.hardware.cts.Camera_SizeTest', 4), ('android.hardware.camera2.cts.FastBasicsTest', 4), ('android.view.cts.TextureViewCameraTest', 2), ('android.hardware.camera2.cts.NativeCameraManagerTest', 2), ('android.content.cts.BroadcastReceiverTest', 2), ('android.hardware.cts.CameraGLTest', 2), ('android.camera.cts.api25test.EnableZslTest', 2), ('android.hardware.camera2.cts.NativeImageReaderTest', 2), ('android.hardware.camera2.cts.StillCaptureTest', 2), ('android.hardware.camera2.cts.ConcurrentCameraTest', 2), ('android.hardware.camera2.cts.NativeCameraDeviceTest', 2), ('android.hardware.camera2.cts.FlashlightTest', 2), ('android.adbmanager.cts.AdbManagerHostDeviceTest', 2), ('android.hardware.camera2.cts.RecordingTest', 2), ('android.media.cts.CamcorderProfileTest', 2), ('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 2), ('android.permission.cts.CameraPermissionTest', 2), ('android.hardware.camera2.cts.MultiViewTest', 2), ('android.media.cts.MediaPlayerTest', 2), ('android.hardware.camera2.cts.OfflineSessionTest', 2), ('com.android.cts.managedprofile.CameraPolicyTest', 2), ('android.hardware.camera2.cts.CameraManagerTest', 2), ('android.media.cts.MediaPlayerDrmTest', 2), ('android.hardware.camera2.cts.LogicalCameraDeviceTest', 2), ('com.android.cts.devicepolicy.ManagedProfileTest', 2), ('android.hardware.camera2.cts.BurstCaptureRawTest', 2), ('android.hardware.camera2.cts.HeifWriterTest', 2), ('android.hardware.camera2.cts.AllocationTest', 2), ('android.hardware.camera2.cts.ReprocessCaptureTest', 2), ('android.hardware.camera2.cts.BurstCaptureTest', 2), ('android.hardware.camera2.cts.PerformanceTest', 2), ('android.hardware.camera2.cts.IdleUidTest', 2), ('android.mediastress.cts.MediaRecorderStressTest', 2), ('android.media.cts.MediaRecorderTest', 2), ('android.hardware.cts.Camera_ParametersTest', 2), ('android.hardware.camera2.cts.ImageReaderTest', 2), ('android.hardware.camera2.cts.ImageWriterTest', 2), ('android.content.pm.cts.FeatureGroupInfoTest', 2), ('android.media.cts.CameraProfileTest', 2), ('android.hardware.multiprocess.camera.cts.CameraEvictionTest', 2), ('android.graphics.cts.CameraVulkanGpuTest', 2), ('android.hardware.camera2.cts.CaptureResultTest', 2), ('android.hardware.camera2.cts.StaticMetadataTest', 2), ('android.hardware.camera2.cts.RobustnessTest', 2), ('android.hardware.camera2.cts.CaptureRequestTest', 2), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 2), ('com.android.cts.ephemeralapp1.ClientTest', 2), ('com.android.cts.verifier.camera.performance.CameraPerformanceActivity', 2), ('android.app.cts.SystemFeaturesTest', 2), ('android.hardware.cts.LegacyCameraPerformanceTest', 2), ('android.permission.cts.Camera2PermissionTest', 2), ('android.hardware.camera2.cts.DngCreatorTest', 2), ('android.hardware.camera2.cts.SurfaceViewPreviewTest', 2), ('com.android.server.cts.device.statsd.AtomTests', 2), ('android.hardware.camera2.cts.NativeStillCaptureTest', 2), ('android.security.cts.OutputConfigurationTest', 2)]"	"[('setUp', 94), ('tearDown', 60), ('getWidth', 10), ('getContext', 10), ('getInstrumentation', 8), ('getHeight', 6), ('Monitor', 6), ('getPackageManager', 6), ('getActivity', 4), ('toString', 4), ('BlockingStateCallback', 4), ('never', 4), ('PreviewCallback', 4), ('ConditionVariable', 4), ('Object', 4), ('getExternalStorageDirectory', 4), ('startBackgroundThread', 4), ('getDownloadedFolder', 4), ('getSimpleName', 4), ('start', 4), ('clearContext', 4), ('close', 4), ('getTargetContext', 4), ('getSystemAvailableFeatures', 4), ('setup', 2), ('getNumberOfCameras', 2), ('getCacheDir', 2), ('anyInt', 2), ('SurfaceTextureCallback', 2), ('SurfaceTextureBurstCallback', 2), ('beforeActivityLaunched', 2), ('Renderer', 2), ('getView', 2), ('hasFlash', 2), ('getDevice', 2), ('getStdout', 2), ('trim', 2), ('hasProfile', 2), ('onShutter', 2), ('flush', 2), ('getAbsolutePath', 2), ('stopBackgroundThread', 2), ('getPath', 2), ('getLooper', 2), ('CameraIterable', 2), ('SizeIterable', 2), ('ResultIterable', 2), ('quitSafely', 2), ('getSourceSize', 2), ('getSize', 2), ('getLaunchOptions', 2), ('LaunchOptions', 2), ('toRectF', 2), ('BlockingSessionCallback', 2), ('CaptureCallback', 2), ('advanceInputWaiting', 2), ('execute', 2), ('stopCapture', 2), ('getStateWaiter', 2), ('getInputData', 2), ('getOutputAllocation', 2), ('getBytesSize', 2), ('getOutputData', 2), ('startHandlerThread', 2), ('stopHandlerThread', 2), ('quit', 2), ('getTopDirString', 2), ('CameraErrorCallback', 2), ('RecorderErrorCallback', 2), ('getVideoEncoders', 2), ('initializeAvailabilityCallbacksNative', 2), ('getContentResolver', 2), ('getUiAutomation', 2)]"	"[('CtsCameraTestCases', 88), ('CtsMediaTestCases', 10), ('CtsContentTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsViewTestCases', 2), ('CtsCameraApi25TestCases', 2), ('CtsMediaStressTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsAndroidAppTestCases', 2), ('CtsSecurityTestCases', 2)]"	""	"7.5.4/C-0-12"	"""C-0-12] MUST ensure that the facial appearance is NOT altered, including but not limited to altering facial geometry, facial skin tone, or facial skin smoothening for any android.hardware.camera2 or android.hardware.Camera API. """	"07050400.670012"	"android.hardware.Camera android.hardware.camera"	""	""	""	"[('android.hardware.Camera', 66), ('android.hardware.camera', 66)]"	""	"[('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRepeatingBurst CtsCameraTestCases]', 2), ('[android.content.cts.BroadcastReceiverTest BroadcastReceiverTest CtsContentTestCases]', 2), ('[android.hardware.cts.CameraGLTest deriveCameraIdsUnderTest CtsCameraTestCases]', 2), ('[android.camera.cts.api25test.EnableZslTest getCameraIdList CtsCameraApi25TestCases]', 2), ('[android.hardware.camera2.cts.RecordingTest isColorOutputSupported CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 2), ('[android.media.cts.MediaPlayerTest exists CtsMediaTestCases]', 2), ('[android.hardware.camera2.cts.CameraManagerTest NoopCameraListener CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.HeifWriterTest isInstantApp CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest TestShutterCallback CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewCallbackWithBuffer CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testSmoothZoom CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewPictureSizesCombination CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testPreviewFpsRange CtsCameraTestCases]', 2), ('[android.hardware.cts.CameraTest testMultiCameraRelease CtsCameraTestCases]', 2), ('[android.mediastress.cts.MediaRecorderStressTest MediaRecorderStressTest CtsMediaStressTestCases]', 2), ('[android.media.cts.MediaRecorderTest MediaRecorderTest CtsMediaTestCases]', 2), ('[android.content.pm.cts.FeatureGroupInfoTest testFeatureGroupsAreCorrect CtsContentTestCases]', 2), ('[android.hardware.multiprocess.camera.cts.CameraEvictionTest CameraEvictionTest CtsCameraTestCases]', 2), ('[android.hardware.cts.Camera_SizeTest testConstructor CtsCameraTestCases]', 2), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest dropShellPermissionIdentity None]', 2), ('[com.android.cts.verifier.camera.performance.CameraPerformanceActivity CameraTestInstrumentation None]', 2), ('[android.hardware.cts.LegacyCameraPerformanceTest CameraPerformanceTestHelper CtsCameraTestCases]', 2), ('[android.permission.cts.Camera2PermissionTest getCameraIdList CtsPermissionTestCases]', 2), ('[android.hardware.camera2.cts.FastBasicsTest testCamera1 CtsCameraTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 12), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/Camera_SizeTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/FastBasicsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/TextureViewCameraTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/BroadcastReceiverTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/api25test/src/android/camera/cts/api25test/EnableZslTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ConcurrentCameraTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeCameraDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/FlashlightTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/CamcorderProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/CameraPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureRawTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/AllocationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ReprocessCaptureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/IdleUidTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/mediastress/src/android/mediastress/cts/MediaRecorderStressTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/Camera_ParametersTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageWriterTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureGroupInfoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/CameraProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/LegacyCameraPerformanceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/Camera2PermissionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeStillCaptureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/OutputConfigurationTest.java', 2)]"	"[('/android/hardware/cts/CameraTest.java', 14), ('/android/hardware/camera2/cts/CameraDeviceTest.java', 6), ('/android/hardware/cts/Camera_SizeTest.java', 6), ('/android/hardware/camera2/cts/FastBasicsTest.java', 6), ('/android/view/cts/TextureViewCameraTest.java', 4), ('/android/hardware/camera2/cts/NativeCameraManagerTest.java', 4), ('/android/content/cts/BroadcastReceiverTest.java', 4), ('/android/hardware/cts/CameraGLTest.java', 4), ('/android/camera/cts/api25test/EnableZslTest.java', 4), ('/android/hardware/camera2/cts/NativeImageReaderTest.java', 4), ('/android/hardware/camera2/cts/StillCaptureTest.java', 4), ('/android/hardware/camera2/cts/ConcurrentCameraTest.java', 4), ('/android/hardware/camera2/cts/NativeCameraDeviceTest.java', 4), ('/android/hardware/camera2/cts/FlashlightTest.java', 4), ('/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 4), ('/android/hardware/camera2/cts/RecordingTest.java', 4), ('/android/media/cts/CamcorderProfileTest.java', 4), ('/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 4), ('/android/permission/cts/CameraPermissionTest.java', 4), ('/android/hardware/camera2/cts/MultiViewTest.java', 4), ('/android/media/cts/MediaPlayerTest.java', 4), ('/android/hardware/camera2/cts/OfflineSessionTest.java', 4), ('/com/android/cts/managedprofile/CameraPolicyTest.java', 4), ('/android/hardware/camera2/cts/CameraManagerTest.java', 4), ('/android/media/cts/MediaPlayerDrmTest.java', 4), ('/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 4), ('/com/android/cts/devicepolicy/ManagedProfileTest.java', 4), ('/android/hardware/camera2/cts/BurstCaptureRawTest.java', 4), ('/android/hardware/camera2/cts/HeifWriterTest.java', 4), ('/android/hardware/camera2/cts/AllocationTest.java', 4), ('/android/hardware/camera2/cts/ReprocessCaptureTest.java', 4), ('/android/hardware/camera2/cts/BurstCaptureTest.java', 4), ('/android/hardware/camera2/cts/PerformanceTest.java', 4), ('/android/hardware/camera2/cts/IdleUidTest.java', 4), ('/android/mediastress/cts/MediaRecorderStressTest.java', 4), ('/android/media/cts/MediaRecorderTest.java', 4), ('/android/hardware/cts/Camera_ParametersTest.java', 4), ('/android/hardware/camera2/cts/ImageReaderTest.java', 4), ('/android/hardware/camera2/cts/ImageWriterTest.java', 4), ('/android/content/pm/cts/FeatureGroupInfoTest.java', 4), ('/android/media/cts/CameraProfileTest.java', 4), ('/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java', 4), ('/android/graphics/cts/CameraVulkanGpuTest.java', 4), ('/android/hardware/camera2/cts/CaptureResultTest.java', 4), ('/android/hardware/camera2/cts/StaticMetadataTest.java', 4), ('/android/hardware/camera2/cts/RobustnessTest.java', 4), ('/android/hardware/camera2/cts/CaptureRequestTest.java', 4), ('/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 4), ('/com/android/cts/ephemeralapp1/ClientTest.java', 4), ('/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java', 4), ('/android/app/cts/SystemFeaturesTest.java', 4), ('/android/hardware/cts/LegacyCameraPerformanceTest.java', 4), ('/android/permission/cts/Camera2PermissionTest.java', 4), ('/android/hardware/camera2/cts/DngCreatorTest.java', 4), ('/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 4), ('/com/android/server/cts/device/statsd/AtomTests.java', 4), ('/android/hardware/camera2/cts/NativeStillCaptureTest.java', 4), ('/android/security/cts/OutputConfigurationTest.java', 4)]"	"[('([1:/android/view/cts/TextureViewCameraTest.java]:[android.hardware.Camera]:[1]:method_text:[ty = mActivityRule.getActivity();         mNumberOfCameras = Camera.getNumberOfCameras();     }     ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[android.hardware.camera]:[1]:method_text:[ty = mActivityRule.getActivity();         mNumberOfCameras = Camera.getNumberOfCameras();     }     ])', 1), ('([20:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.Camera]:[20]:method_text:[ure the stable frame rate is guaranteed for the given      * settings.</li>      * </ul>      */    ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.Camera]:[2]:method_text:[progress work. Once the abort is complete, the idle callback will be called.      * </p>      */    ])', 1), ('([20:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.camera]:[20]:method_text:[ure the stable frame rate is guaranteed for the given      * settings.</li>      * </ul>      */    ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[android.hardware.camera]:[2]:method_text:[progress work. Once the abort is complete, the idle callback will be called.      * </p>      */    ])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraManagerTest.java]:[android.hardware.Camera]:[1]:method_text:[Library(""ctscamera2_jni"");         Log.i(""NativeCameraManagerTest"", ""after loadlibrary"");     }     ])', 1), ('([1:/android/hardware/camera2/cts/NativeCameraManagerTest.java]:[android.hardware.camera]:[1]:method_text:[Library(""ctscamera2_jni"");         Log.i(""NativeCameraManagerTest"", ""after loadlibrary"");     }     ])', 1), ('([1:/android/content/cts/BroadcastReceiverTest.java]:[android.hardware.Camera]:[1]:method_text:[    }      @Override     protected void setUp() throws Exception {         super.setUp();     }     ])', 1), ('([1:/android/content/cts/BroadcastReceiverTest.java]:[android.hardware.camera]:[1]:method_text:[    }      @Override     protected void setUp() throws Exception {         super.setUp();     }     ])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[android.hardware.Camera]:[4]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */     @UiThreadTest    ])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[android.hardware.camera]:[4]:method_text:[.setPreviewTexture in conjunction with the standard Camera preview callback */     @UiThreadTest    ])', 1), ('([8:/android/camera/cts/api25test/EnableZslTest.java]:[android.hardware.Camera]:[8]:method_text:[ <p>Verify CaptureRequest.CONTROL_ENABLE_ZSL is false if available in all templates.</p>      */    ])', 1), ('([8:/android/camera/cts/api25test/EnableZslTest.java]:[android.hardware.camera]:[8]:method_text:[ <p>Verify CaptureRequest.CONTROL_ENABLE_ZSL is false if available in all templates.</p>      */    ])', 1), ('([2:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[android.hardware.Camera]:[2]:method_text:[adLibrary(""ctscamera2_jni"");         Log.i(""NativeImageReaderTest"", ""after loadlibrary"");     }     ])', 1), ('([2:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[android.hardware.camera]:[2]:method_text:[adLibrary(""ctscamera2_jni"");         Log.i(""NativeImageReaderTest"", ""after loadlibrary"");     }     ])', 1), ('([14:/android/hardware/camera2/cts/StillCaptureTest.java]:[android.hardware.Camera]:[14]:method_text:[  super.tearDown();     }      /**      * Test JPEG capture exif fields for each camera.      */    ])', 1), ('([14:/android/hardware/camera2/cts/StillCaptureTest.java]:[android.hardware.camera]:[14]:method_text:[  super.tearDown();     }      /**      * Test JPEG capture exif fields for each camera.      */    ])', 1), ('([15:/android/hardware/camera2/cts/ConcurrentCameraTest.java]:[android.hardware.Camera]:[15]:method_text:[ this.substituteY8 = substituteY8;             this.combination = combination;         }     };     ])', 1), ('([15:/android/hardware/camera2/cts/ConcurrentCameraTest.java]:[android.hardware.camera]:[15]:method_text:[ this.substituteY8 = substituteY8;             this.combination = combination;         }     };     ])', 1), ('([2:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[android.hardware.Camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");         Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");     }     ])', 1), ('([2:/android/hardware/camera2/cts/NativeCameraDeviceTest.java]:[android.hardware.camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");         Log.i(""NativeCameraDeviceTest"", ""after loadlibrary"");     }     ])', 1), ('([7:/android/hardware/camera2/cts/FlashlightTest.java]:[android.hardware.Camera]:[7]:method_text:[f (info.hasFlash()) {                 mFlashCameraIdList.add(id);             }         }     }     ])', 1), ('([7:/android/hardware/camera2/cts/FlashlightTest.java]:[android.hardware.camera]:[7]:method_text:[f (info.hasFlash()) {                 mFlashCameraIdList.add(id);             }         }     }     ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.Camera]:[1]:method_text:[has-feature "" + feature);         return Boolean.parseBoolean(result.getStdout().trim());     }     ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera]:[1]:method_text:[has-feature "" + feature);         return Boolean.parseBoolean(result.getStdout().trim());     }     ])', 1), ('([13:/android/hardware/camera2/cts/RecordingTest.java]:[android.hardware.Camera]:[13]:method_text:[on and validate the      * recorded video. Preview is set to the video size.      * </p>      */    ])', 1), ('([13:/android/hardware/camera2/cts/RecordingTest.java]:[android.hardware.camera]:[13]:method_text:[on and validate the      * recorded video. Preview is set to the video size.      * </p>      */    ])', 1), ('([3:/android/media/cts/CamcorderProfileTest.java]:[android.hardware.Camera]:[3]:method_text:[dProfile, highHighSpeedProfile,                 specificHighSpeedProfileQualities, null);     }     ])', 1), ('([3:/android/media/cts/CamcorderProfileTest.java]:[android.hardware.camera]:[3]:method_text:[dProfile, highHighSpeedProfile,                 specificHighSpeedProfileQualities, null);     }     ])', 1), ('([18:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[android.hardware.Camera]:[18]:method_text:[ations contain a few required formats and sizes.      */     @CddTest(requirement=""7.5.1/C-1-2"")    ])', 1), ('([18:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[android.hardware.camera]:[18]:method_text:[ations contain a few required formats and sizes.      */     @CddTest(requirement=""7.5.1/C-1-2"")    ])', 1), ('([1:/android/permission/cts/CameraPermissionTest.java]:[android.hardware.Camera]:[1]:method_text:[ Requires Permission:      * {@link android.Manifest.permission#CAMERA}.      */     @MediumTest    ])', 1), ('([1:/android/permission/cts/CameraPermissionTest.java]:[android.hardware.camera]:[1]:method_text:[ Requires Permission:      * {@link android.Manifest.permission#CAMERA}.      */     @MediumTest    ])', 1), ('([13:/android/hardware/camera2/cts/MultiViewTest.java]:[android.hardware.Camera]:[13]:method_text:[atic int YUV_IMG_READER_COUNT = 3;     private final static double BITMAP_DIFF_THRESHOLD = 0.1;     ])', 1), ('([13:/android/hardware/camera2/cts/MultiViewTest.java]:[android.hardware.camera]:[13]:method_text:[atic int YUV_IMG_READER_COUNT = 3;     private final static double BITMAP_DIFF_THRESHOLD = 0.1;     ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[android.hardware.Camera]:[1]:method_text:[e != null && mOutFile.exists()) {             mOutFile.delete();         }     }      @Presubmit    ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[android.hardware.camera]:[1]:method_text:[e != null && mOutFile.exists()) {             mOutFile.delete();         }     }      @Presubmit    ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[android.hardware.Camera]:[13]:method_text:[* surfaces not registered with camera or surfaces used in      * repeating requests.</p>      */    ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[android.hardware.camera]:[13]:method_text:[* surfaces not registered with camera or surfaces used in      * repeating requests.</p>      */    ])', 1), ('([1:/com/android/cts/managedprofile/CameraPolicyTest.java]:[android.hardware.Camera]:[1]:method_text:[d tearDown() throws Exception {         stopBackgroundThread();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/managedprofile/CameraPolicyTest.java]:[android.hardware.camera]:[1]:method_text:[d tearDown() throws Exception {         stopBackgroundThread();         super.tearDown();     }     ])', 1), ('([10:/android/hardware/camera2/cts/CameraManagerTest.java]:[android.hardware.Camera]:[10]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);          return -1; // unreachable     }     ])', 1), ('([10:/android/hardware/camera2/cts/CameraManagerTest.java]:[android.hardware.camera]:[10]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);          return -1; // unreachable     }     ])', 1), ('([1:/android/media/cts/MediaPlayerDrmTest.java]:[android.hardware.Camera]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");       // Tests     ])', 1), ('([1:/android/media/cts/MediaPlayerDrmTest.java]:[android.hardware.camera]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");       // Tests     ])', 1), ('([18:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[android.hardware.Camera]:[18]:method_text:[agtion behaves as expected      * for logical multi-camera and non-logical multi-camera.      */    ])', 1), ('([18:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[android.hardware.camera]:[18]:method_text:[agtion behaves as expected      * for logical multi-camera and non-logical multi-camera.      */    ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[android.hardware.Camera]:[1]:method_text:[ DEVICE_OWNER_ADMIN =             DEVICE_OWNER_PKG + "".BaseDeviceOwnerTest$BasicAdminReceiver"";     ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[android.hardware.camera]:[1]:method_text:[ DEVICE_OWNER_ADMIN =             DEVICE_OWNER_PKG + "".BaseDeviceOwnerTest$BasicAdminReceiver"";     ])', 1), ('([12:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[android.hardware.Camera]:[12]:method_text:[own();     }      /**      * Verify raw sensor size information is correctly configured.      */    ])', 1), ('([12:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[android.hardware.camera]:[12]:method_text:[own();     }      /**      * Verify raw sensor size information is correctly configured.      */    ])', 1), ('([11:/android/hardware/camera2/cts/HeifWriterTest.java]:[android.hardware.Camera]:[11]:method_text:[ }      @Override     public void tearDown() throws Exception {         super.tearDown();     }     ])', 1), ('([11:/android/hardware/camera2/cts/HeifWriterTest.java]:[android.hardware.camera]:[11]:method_text:[ }      @Override     public void tearDown() throws Exception {         super.tearDown();     }     ])', 1), ('([25:/android/hardware/camera2/cts/AllocationTest.java]:[android.hardware.Camera]:[25]:method_text:[alSizeOut);          if (VERBOSE) Log.v(TAG, ""validating Buffer , size = "" + actualSize);     }     ])', 1), ('([25:/android/hardware/camera2/cts/AllocationTest.java]:[android.hardware.camera]:[25]:method_text:[alSizeOut);          if (VERBOSE) Log.v(TAG, ""validating Buffer , size = "" + actualSize);     }     ])', 1), ('([12:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[android.hardware.Camera]:[12]:method_text:[KEYS,     }      /**      * Test YUV_420_888 -> YUV_420_888 with maximal supported sizes      */    ])', 1), ('([12:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[android.hardware.camera]:[12]:method_text:[KEYS,     }      /**      * Test YUV_420_888 -> YUV_420_888 with maximal supported sizes      */    ])', 1), ('([11:/android/hardware/camera2/cts/BurstCaptureTest.java]:[android.hardware.Camera]:[11]:method_text:[ol.      * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.      */    ])', 1), ('([11:/android/hardware/camera2/cts/BurstCaptureTest.java]:[android.hardware.camera]:[11]:method_text:[ol.      * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.      */    ])', 1), ('([16:/android/hardware/camera2/cts/PerformanceTest.java]:[android.hardware.Camera]:[16]:method_text:[   * For depth-only devices, timing is done with the DEPTH16 format instead.      * </p>      */    ])', 1), ('([16:/android/hardware/camera2/cts/PerformanceTest.java]:[android.hardware.camera]:[16]:method_text:[   * For depth-only devices, timing is done with the DEPTH16 format instead.      * </p>      */    ])', 1), ('([13:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[13]:method_text:[ture and verify all the callback      * functions are called properly.      */     @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[r3 == 1) {                 mPreviewDone.open();             }         }     }      @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[f (stopped) {                 mZoomDone.open();             }         }     }      @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[1]:method_text:[= PREVIEW_CALLBACK_RECEIVED;             mPreviewDone.open();         }     }      @UiThreadTest    ])', 1), ('([2:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[2]:method_text:[ "")"",                     Character.isLetter(c) && c != \'x\');         }     }      @UiThreadTest    ])', 1), ('([4:/android/hardware/cts/CameraTest.java]:[android.hardware.Camera]:[4]:method_text:[callback, id "" + mId + ""."");             mPreviewDone.open();         }     }      @UiThreadTest    ])', 1), ('([13:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[13]:method_text:[ture and verify all the callback      * functions are called properly.      */     @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[r3 == 1) {                 mPreviewDone.open();             }         }     }      @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[f (stopped) {                 mZoomDone.open();             }         }     }      @UiThreadTest    ])', 1), ('([1:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[1]:method_text:[= PREVIEW_CALLBACK_RECEIVED;             mPreviewDone.open();         }     }      @UiThreadTest    ])', 1), ('([2:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[2]:method_text:[ "")"",                     Character.isLetter(c) && c != \'x\');         }     }      @UiThreadTest    ])', 1), ('([4:/android/hardware/cts/CameraTest.java]:[android.hardware.camera]:[4]:method_text:[callback, id "" + mId + ""."");             mPreviewDone.open();         }     }      @UiThreadTest    ])', 1), ('([6:/android/hardware/camera2/cts/IdleUidTest.java]:[android.hardware.Camera]:[6]:method_text:[);     }      /**      * Tests that a UID has access to the camera only in active state.      */    ])', 1), ('([6:/android/hardware/camera2/cts/IdleUidTest.java]:[android.hardware.camera]:[6]:method_text:[);     }      /**      * Tests that a UID has access to the camera only in active state.      */    ])', 1), ('([4:/android/mediastress/cts/MediaRecorderStressTest.java]:[android.hardware.Camera]:[4]:method_text:[order error"");         }     }      //Test case for stressing the camera preview.     @LargeTest    ])', 1), ('([4:/android/mediastress/cts/MediaRecorderStressTest.java]:[android.hardware.camera]:[4]:method_text:[order error"");         }     }      //Test case for stressing the camera preview.     @LargeTest    ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[android.hardware.Camera]:[1]:method_text:[   mNextOutputFileStartedCond = null;         mActivity = null;         super.tearDown();     }     ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[android.hardware.camera]:[1]:method_text:[   mNextOutputFileStartedCond = null;         mActivity = null;         super.tearDown();     }     ])', 1), ('([1:/android/hardware/cts/Camera_ParametersTest.java]:[android.hardware.Camera]:[1]:method_text:[port android.hardware.Camera.Parameters;  public class Camera_ParametersTest extends TestCase {     ])', 1), ('([1:/android/hardware/cts/Camera_ParametersTest.java]:[android.hardware.camera]:[1]:method_text:[port android.hardware.Camera.Parameters;  public class Camera_ParametersTest extends TestCase {     ])', 1), ('([16:/android/hardware/camera2/cts/ImageReaderTest.java]:[android.hardware.Camera]:[16]:method_text:[ }      @Override     public void tearDown() throws Exception {         super.tearDown();     }     ])', 1), ('([16:/android/hardware/camera2/cts/ImageReaderTest.java]:[android.hardware.camera]:[16]:method_text:[ }      @Override     public void tearDown() throws Exception {         super.tearDown();     }     ])', 1), ('([7:/android/hardware/camera2/cts/ImageWriterTest.java]:[android.hardware.Camera]:[7]:method_text:[. This validates the ImageWriter explicit buffer copy      * interface.</li>      * </p>      */    ])', 1), ('([7:/android/hardware/camera2/cts/ImageWriterTest.java]:[android.hardware.camera]:[7]:method_text:[. This validates the ImageWriter explicit buffer copy      * interface.</li>      * </p>      */    ])', 1), ('([2:/android/content/pm/cts/FeatureGroupInfoTest.java]:[android.hardware.Camera]:[2]:method_text:[o2.flags);                     }                     return diff;                 }             }; }])', 1), ('([2:/android/content/pm/cts/FeatureGroupInfoTest.java]:[android.hardware.camera]:[2]:method_text:[o2.flags);                     }                     return diff;                 }             }; }])', 1), ('([1:/android/media/cts/CameraProfileTest.java]:[android.hardware.Camera]:[1]:method_text:[     assertTrue(high >= 0 && high <= 100);         assertTrue(low <= mid && mid <= high);     }     ])', 1), ('([1:/android/media/cts/CameraProfileTest.java]:[android.hardware.camera]:[1]:method_text:[     assertTrue(high >= 0 && high <= 100);         assertTrue(low <= mid && mid <= high);     }     ])', 1), ('([4:/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java]:[android.hardware.Camera]:[4]:method_text:[per.tearDown();     }      /**      * Test basic eviction scenarios for the Camera1 API.      */    ])', 1), ('([4:/android/hardware/multiprocess/camera/cts/CameraEvictionTest.java]:[android.hardware.camera]:[4]:method_text:[per.tearDown();     }      /**      * Test basic eviction scenarios for the Camera1 API.      */    ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[android.hardware.Camera]:[2]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[android.hardware.camera]:[2]:method_text:[ class CameraVulkanGpuTest {      static {         System.loadLibrary(""ctsgraphics_jni"");     }     ])', 1), ('([14:/android/hardware/camera2/cts/CaptureResultTest.java]:[android.hardware.Camera]:[14]:method_text:[y times, and checks if there is any null entries in      * a capture result.      * </p>      */    ])', 1), ('([14:/android/hardware/camera2/cts/CaptureResultTest.java]:[android.hardware.camera]:[14]:method_text:[y times, and checks if there is any null entries in      * a capture result.      * </p>      */    ])', 1), ('([11:/android/hardware/camera2/cts/StaticMetadataTest.java]:[android.hardware.Camera]:[11]:method_text:[  /**      * Test the available capability for different hardware support level devices.      */    ])', 1), ('([11:/android/hardware/camera2/cts/StaticMetadataTest.java]:[android.hardware.camera]:[11]:method_text:[  /**      * Test the available capability for different hardware support level devices.      */    ])', 1), ('([20:/android/hardware/camera2/cts/RobustnessTest.java]:[android.hardware.Camera]:[20]:method_text:[uffer size in the      * available stream configurations for a surface with this format.      */    ])', 1), ('([20:/android/hardware/camera2/cts/RobustnessTest.java]:[android.hardware.camera]:[20]:method_text:[uffer size in the      * available stream configurations for a surface with this format.      */    ])', 1), ('([19:/android/hardware/camera2/cts/CaptureRequestTest.java]:[android.hardware.Camera]:[19]:method_text:[        super.tearDown();     }      /**      * Test CaptureRequest settings parcelling.      */    ])', 1), ('([19:/android/hardware/camera2/cts/CaptureRequestTest.java]:[android.hardware.camera]:[19]:method_text:[        super.tearDown();     }      /**      * Test CaptureRequest settings parcelling.      */    ])', 1), ('([2:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.Camera]:[2]:method_text:[float ASPECT_RATIO_TOLERANCE = 0.05f;      private static final String TAG = ""Camera_SizeTest"";     ])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.Camera]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}      */    ])', 1), ('([2:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.camera]:[2]:method_text:[float ASPECT_RATIO_TOLERANCE = 0.05f;      private static final String TAG = ""Camera_SizeTest"";     ])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[android.hardware.camera]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}      */    ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[android.hardware.Camera]:[1]:method_text:[ad.sleep(1000);         }         throw new AssertionError(""Failed to get UiAutomation"");     }     ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[android.hardware.camera]:[1]:method_text:[ad.sleep(1000);         }         throw new AssertionError(""Failed to get UiAutomation"");     }     ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[android.hardware.Camera]:[2]:method_text:[s Exception {         InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);     }     ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[android.hardware.camera]:[2]:method_text:[s Exception {         InstrumentationRegistry.getContext().unregisterReceiver(mReceiver);     }     ])', 1), ('([1:/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java]:[android.hardware.Camera]:[1]:method_text:[ends RunListener {         private volatile boolean mCurrentTestReported;          @Override        ])', 1), ('([1:/com/android/cts/verifier/camera/performance/CameraPerformanceActivity.java]:[android.hardware.camera]:[1]:method_text:[ends RunListener {         private volatile boolean mCurrentTestReported;          @Override        ])', 1), ('([7:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.Camera]:[7]:method_text:[properly prefixed with ""android."" that are not defined in      * {@link PackageManager}.      */    ])', 1), ('([7:/android/app/cts/SystemFeaturesTest.java]:[android.hardware.camera]:[7]:method_text:[properly prefixed with ""android."" that are not defined in      * {@link PackageManager}.      */    ])', 1), ('([2:/android/hardware/cts/LegacyCameraPerformanceTest.java]:[android.hardware.Camera]:[2]:method_text:[  if (mHelper.getCamera() != null) {             mHelper.getCamera().release();         }     }     ])', 1), ('([2:/android/hardware/cts/LegacyCameraPerformanceTest.java]:[android.hardware.camera]:[2]:method_text:[  if (mHelper.getCamera() != null) {             mHelper.getCamera().release();         }     }     ])', 1), ('([4:/android/permission/cts/Camera2PermissionTest.java]:[android.hardware.Camera]:[4]:method_text:[ to open camera. Requires Permission:      * {@link android.Manifest.permission#CAMERA}.      */    ])', 1), ('([4:/android/permission/cts/Camera2PermissionTest.java]:[android.hardware.camera]:[4]:method_text:[ to open camera. Requires Permission:      * {@link android.Manifest.permission#CAMERA}.      */    ])', 1), ('([14:/android/hardware/camera2/cts/DngCreatorTest.java]:[android.hardware.Camera]:[14]:method_text:[captured for the first reported camera device to be saved to an output file.      * </p>      */    ])', 1), ('([14:/android/hardware/camera2/cts/DngCreatorTest.java]:[android.hardware.camera]:[14]:method_text:[captured for the first reported camera device to be saved to an output file.      * </p>      */    ])', 1), ('([14:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[android.hardware.Camera]:[14]:method_text:[e capture timestamp      * (monotonically increasing) ordering are verified.      * </p>      */    ])', 1), ('([14:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[android.hardware.camera]:[14]:method_text:[e capture timestamp      * (monotonically increasing) ordering are verified.      * </p>      */    ])', 1), ('([3:/com/android/server/cts/device/statsd/AtomTests.java]:[android.hardware.Camera]:[3]:method_text:[NSTALLER, 98);         APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);     }     ])', 1), ('([3:/com/android/server/cts/device/statsd/AtomTests.java]:[android.hardware.camera]:[3]:method_text:[NSTALLER, 98);         APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);     }     ])', 1), ('([11:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.Camera]:[11]:method_text:[IMEOUT_MS = 5000;     private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;      @Presubmit    ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.Camera]:[1]:method_text:[a != null) {                     camera.release();                 }             }         }     } }])', 1), ('([11:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.camera]:[11]:method_text:[IMEOUT_MS = 5000;     private static final int FRAMES_TO_WAIT_FOR_CAPTURE = 100;      @Presubmit    ])', 1), ('([1:/android/hardware/camera2/cts/FastBasicsTest.java]:[android.hardware.camera]:[1]:method_text:[a != null) {                     camera.release();                 }             }         }     } }])', 1), ('([2:/android/hardware/camera2/cts/NativeStillCaptureTest.java]:[android.hardware.Camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");         Log.i(""NativeStillCaptureTest"", ""after loadlibrary"");     }     ])', 1), ('([2:/android/hardware/camera2/cts/NativeStillCaptureTest.java]:[android.hardware.camera]:[2]:method_text:[dLibrary(""ctscamera2_jni"");         Log.i(""NativeStillCaptureTest"", ""after loadlibrary"");     }     ])', 1), ('([1:/android/security/cts/OutputConfigurationTest.java]:[android.hardware.Camera]:[1]:method_text:[arcel properly.  */ @SecurityTest public class OutputConfigurationTest extends AndroidTestCase {    ])', 1), ('([1:/android/security/cts/OutputConfigurationTest.java]:[android.hardware.camera]:[1]:method_text:[arcel properly.  */ @SecurityTest public class OutputConfigurationTest extends AndroidTestCase {    ])', 1)]"	""	""	""	""	""
"239:709221) 9.1  . Permissions"	"9.1"	"C-2-1"	""	"[('android.systemintents.cts.TestManageOverlayPermissionIntents', 1), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 1)]"	"[('size', 2)]"	"[('CtsSystemIntentTestCases', 1)]"	""	"9.1/C-2-1"	"""C-2-1] MUST ensure that all activities with intent filters for the ACTION_MANAGE_OVERLAY_PERMISSION intent have the same UI screen, regardless of the initiating app or any information it provides. <h3 id="""	"09010000.670201"	"ACTION_MANAGE_OVERLAY_PERMISSION"	""	""	""	"[('ACTION_MANAGE_OVERLAY_PERMISSION', 2)]"	""	"[('[android.systemintents.cts.TestManageOverlayPermissionIntents testManageOverlayPermissionIntentWithDataResolvesToSameIntentWithoutData CtsSystemIntentTestCases]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1)]"	"[('/android/systemintents/cts/TestManageOverlayPermissionIntents.java', 2), ('/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 2)]"	"[('([3:/android/systemintents/cts/TestManageOverlayPermissionIntents.java]:[ACTION_MANAGE_OVERLAY_PERMISSION]:[3]:method_text:[ty.packageName);         assertEquals(errorMessage, genericActivity.name, appActivity.name);     } }])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[ACTION_MANAGE_OVERLAY_PERMISSION]:[1]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1)]"	""	""	""	""	""
"265:761698) 9.10  . Device Integrity"	"9.10"	"C-0-4"	""	""	""	""	""	"9.10/C-0-4"	"""C-0-4] MUST NOT allow the read requests on a protected file to succeed when the read content do not verify against a trusted key. """	"09100000.670004"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:761698) 9.10  . Device Integrity"	"9.10"	"C-0-5"	""	""	""	""	""	"9.10/C-0-5"	"""C-0-5] MUST enable the above-described cryptographic file verification protection for all files for the package that is installed with trusted signature files as described here. If device implementations are already launched without the ability to verify file content against a trusted key on an earlier Android version and can not add support for this feature with a system software update, they MAY be exempted from the requirement. The upstream Android Open Source project provides a preferred implementation of this feature based on the Linux kernel fs-verity feature. Device implementations: """	"09100000.670005"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:761698) 9.10  . Device Integrity"	"9.10"	"C-1-10"	""	""	""	""	""	"9.10/C-1-10"	"""C-1-10] MUST implement rollback protection for partitions used by Android (e.g. boot, system partitions) and use tamper-evident storage for storing the metadata used for determining the minimum allowable OS version. """	"09100000.670110"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:761698) 9.10  . Device Integrity"	"9.10"	"C-1-9"	""	""	""	""	""	"9.10/C-1-9"	"""C-1-9] MUST prompt the user, while using the device, and require physical confirmation before allowing a transition from bootloader locked mode to bootloader unlocked mode. """	"09100000.670109"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"269:784393) 9.11.3  . Identity Credential"	"9.11.3"	"C-0-2"	""	"[('android.app.cts.DownloadManagerTest', 17), ('com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest', 13), ('android.content.cts.ClipboardManagerTest', 11), ('android.inputmethodservice.cts.hostside.ShellCommandFromAppTest', 10), ('android.appsecurity.cts.OverlayHostTest', 8), ('android.telephony.cts.CellIdentityTest', 7), ('android.inputmethodservice.cts.hostside.MultiUserTest', 5), ('android.widget.cts.TextViewTest', 4), ('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 3), ('android.view.cts.ViewTest', 3), ('android.autofillservice.cts.CustomDescriptionWithLinkTestCase', 3), ('android.security.identity.cts.UserAuthTest', 3), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 2), ('android.telephony.cts.PhoneStateListenerTest', 2), ('android.opengl.cts.OpenGlEsVersionTest', 2), ('android.telephony.cts.CdmaSmsCbProgramDataTest', 2), ('android.cts.statsd.atom.HostAtomTests', 2), ('com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest', 2), ('android.keystore.cts.MacTest', 2), ('android.jvmti.cts.JvmtiRedefineClassesTest', 2), ('android.security.cts.AslrTest', 1), ('android.media.cts.AudioMetadataTest', 1), ('android.permission2.cts.ProtectedBroadcastsTest', 1), ('android.security.identity.cts.IdentityApiTest', 1), ('android.admin.cts.DevicePolicyManagerTest', 1), ('android.hardware.cts.CameraGLTest', 1), ('android.dumpsys.cts.BatteryStatsDumpsysTest', 1), ('android.webkit.cts.WebSettingsTest', 1), ('android.security.identity.cts.HkdfTest', 1), ('com.android.cts.appbinding.AppBindingHostTest', 1), ('android.autofillservice.cts.LoginActivity', 1)]"	"[('getDevice', 28), ('setUp', 9), ('tearDown', 6), ('getTargetContext', 5), ('getInstrumentation', 3), ('trim', 3), ('find', 3), ('run', 2), ('DeviceLockSession', 2), ('LockScreenSession', 2), ('setLockCredential', 2), ('performDeviceLock', 2), ('sleepDevice', 2), ('toString', 2), ('length', 2), ('waitForBroadcastIdle', 2), ('InstallMultiple', 1), ('getCurrentUser', 1), ('getUiAutomation', 1), ('readLine', 1), ('matches', 1), ('size', 1), ('setup', 1), ('getActivity', 1), ('getResources', 1), ('hasWindowFocus', 1), ('getContext', 1), ('clearTransformations', 1), ('getDecoder', 1), ('Start', 1), ('Random', 1), ('hasAutoFillFeature', 1), ('wakeUp', 1), ('StringBuilder', 1), ('getCurrentActivity', 1), ('getContentView', 1), ('login', 1), ('save', 1), ('getAutofillManager', 1), ('cancel', 1), ('removeUser', 1)]"	"[('CtsAndroidAppTestCases', 17), ('CtsTelephonyTestCases', 11), ('CtsContentTestCases', 11), ('CtsIdentityTestCases', 5), ('CtsAutoFillServiceTestCases', 4), ('CtsWidgetTestCases', 4), ('CtsInputMethodTestCases', 3), ('CtsViewTestCases', 3), ('CtsOpenGLTestCases', 2), ('CtsKeystoreTestCases', 2), ('CtsSecurityTestCases', 1), ('CtsMediaTestCases', 1), ('CtsPermission2TestCases', 1), ('CtsAdminTestCases', 1), ('CtsCameraTestCases', 1), ('CtsWebkitTestCases', 1)]"	""	"9.11.3/C-0-2"	"""C-0-2] MUST implement the Identity Credential System (e.g. the android.security.identity.* APIs) with code communicating with a trusted application in an area that is securely isolated from the code running on the kernel and above. Secure isolation MUST block all potential mechanisms by which kernel or userspace code might access the internal state of the isolated environment, including DMA. """	"09110300.670002"	"android.security.identity DMA"	""	""	""	"[('DMA', 111), ('android.security.identity', 3)]"	""	"[('[android.security.identity.cts.UserAuthTest isDeviceLocked CtsIdentityTestCases]', 2), ('[android.appsecurity.cts.OverlayHostTest currentTimeMillis None]', 1), ('[android.appsecurity.cts.OverlayHostTest testCannotInstallDifferentSignaturesNoName None]', 1), ('[android.appsecurity.cts.OverlayHostTest testFailIdmapDifferentSignaturesNoName None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyAllNoNameFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyProductFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicySystemFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyVendorFails None]', 1), ('[android.appsecurity.cts.OverlayHostTest testOverlayPolicyDifferentSignatureFails None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testResetPasswordWithToken None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnAlwaysReportedSignalStrengthChanged CtsTelephonyTestCases]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnSignalStrengthsChanged CtsTelephonyTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testOpenGlEsVersion CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForWideColorDisplay CtsOpenGLTestCases]', 1), ('[android.view.cts.ViewTest testSetScrollContainer CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInputConnection CtsViewTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityCdma_asCellLocation CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityCdma_unavailable_asCellLocation CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityTdscdma_asCellLocation CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityTdscdma_unavailable_asCellLocation CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityWcdma_asCellLocation CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CellIdentityTest testCellIdentityWcdma_unavailable_asCellLocation CtsTelephonyTestCases]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_packageNotWhitelisted_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent None]', 1), ('[com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException None]', 1), ('[android.telephony.cts.CdmaSmsCbProgramDataTest testCdmaSmsCbProgramDataConstructorAndGetters CtsTelephonyTestCases]', 1), ('[android.cts.statsd.atom.HostAtomTests testSupportedRadioAccessFamily None]', 1), ('[com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest testClipboardWithPermission None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testCreateAndManageUser_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManager CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttp CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpWithExternalWebServer CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testMinimumDownload CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerDestination CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerDestinationExtension CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationUri_invalidRequests CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationUri CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationInExternalPublicDownloadDir CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testSetDestinationInExternalPublicDir_invalidRequests CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownloadNotVisibleInUi CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload_downloadDir CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testAddCompletedDownload_invalidPaths CtsAndroidAppTestCases]', 1), ('[android.app.cts.DownloadManagerTest testDownload_mediaScanned CtsAndroidAppTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionWithLinkTestCase testTapLink_tapBack_thenStartOverByTouchOutsideAndManualRequest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionWithLinkTestCase testTapLink_tapBack_thenStartOverBySayingNoAndManualRequest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionWithLinkTestCase testTapLink_tapBack_thenStartOverBySayingYesAndManualRequest CtsAutoFillServiceTestCases]', 1), ('[android.security.identity.cts.UserAuthTest testUserAuth CtsIdentityTestCases]', 1), ('[android.hardware.cts.CameraGLTest testCameraToSurfaceTextureMetadata CtsCameraTestCases]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeListFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandImeListInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandDumpFull None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandDumpInstant None]', 1), ('[android.inputmethodservice.cts.hostside.ShellCommandFromAppTest testShellCommandHelpFull None]', 1), ('[android.dumpsys.cts.BatteryStatsDumpsysTest testBatterystatsOutput None]', 1), ('[android.webkit.cts.WebSettingsTest testUserAgentStringTest CtsWebkitTestCases]', 1), ('[android.keystore.cts.MacTest testSmallMsgKat CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testLargeMsgKat CtsKeystoreTestCases]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest testSucessfulRetransform None]', 1), ('[android.content.cts.ClipboardManagerTest testSetGetText CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testHasPrimaryClip CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_intent CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_contentUri CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_complexItem CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_multipleItems CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_multipleMimeTypes CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testPrimaryClipChangedListener CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testClearPrimaryClip CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testPrimaryClipNotAvailableWithoutFocus CtsContentTestCases]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[android.autofillservice.cts.LoginActivity finish CtsAutoFillServiceTestCases]', 1), ('[android.widget.cts.TextViewTest testEllipsizeAndMaxLinesForSingleLine CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testEllipsizeAndMaxLinesForMultiLine CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testEllipsizeAndMaxLinesForHint CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAutoSizeUniform_equivalentConfigurations CtsWidgetTestCases]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest isMultiUserSupported None]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testSecondaryUserFull None]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testSecondaryUserInstant None]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testProfileUserFull None]', 1), ('[android.inputmethodservice.cts.hostside.MultiUserTest testProfileUserInstant None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 17), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ClipboardManagerTest.java', 11), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java', 10), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/OverlayHostTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CellIdentityTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/MultiUserTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/CustomDescriptionWithLinkTestCase.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/UserAuthTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CdmaSmsCbProgramDataTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/HostAtomTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/MacTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/AslrTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/ProtectedBroadcastsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/CameraGLTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivity.java', 1)]"	"[('/android/app/cts/DownloadManagerTest.java', 18), ('/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java', 14), ('/android/content/cts/ClipboardManagerTest.java', 12), ('/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java', 11), ('/android/appsecurity/cts/OverlayHostTest.java', 9), ('/android/telephony/cts/CellIdentityTest.java', 8), ('/android/inputmethodservice/cts/hostside/MultiUserTest.java', 6), ('/android/security/identity/cts/UserAuthTest.java', 5), ('/android/widget/cts/TextViewTest.java', 5), ('/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 4), ('/android/view/cts/ViewTest.java', 4), ('/android/autofillservice/cts/CustomDescriptionWithLinkTestCase.java', 4), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/android/telephony/cts/PhoneStateListenerTest.java', 3), ('/android/opengl/cts/OpenGlEsVersionTest.java', 3), ('/android/telephony/cts/CdmaSmsCbProgramDataTest.java', 3), ('/android/cts/statsd/atom/HostAtomTests.java', 3), ('/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java', 3), ('/android/keystore/cts/MacTest.java', 3), ('/android/jvmti/cts/JvmtiRedefineClassesTest.java', 3), ('/android/security/cts/AslrTest.java', 2), ('/android/media/cts/AudioMetadataTest.java', 2), ('/android/permission2/cts/ProtectedBroadcastsTest.java', 2), ('/android/security/identity/cts/IdentityApiTest.java', 2), ('/android/admin/cts/DevicePolicyManagerTest.java', 2), ('/android/hardware/cts/CameraGLTest.java', 2), ('/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 2), ('/android/webkit/cts/WebSettingsTest.java', 2), ('/android/security/identity/cts/HkdfTest.java', 2), ('/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/android/autofillservice/cts/LoginActivity.java', 2)]"	"[('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ion_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 3), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[DMA]:[1]:method_text:[ceiver)} returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 3), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[DMA]:[1]:method_text:[    * receiver)} returns {@link SecurityException} for instant apps.      */     @AppModeInstant    ])', 3), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[les_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 2), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ed_returnsFalse"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 2), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[ finally {                 mContext.unregisterReceiver(receiver);             }         }     }     ])', 2), ('([3:/android/app/cts/DownloadManagerTest.java]:[DMA]:[3]:method_text:[        assertEquals(fileContents, rawFileContents);         assertRemoveDownload(id, 0);     }     ])', 2), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[DMA]:[1]:method_text:[eceiver)}      * returns {@link SecurityException} for instant apps.      */     @AppModeInstant    ])', 2), ('([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[1]:method_text:[internal IME list upon      * IME APK installation for instant apps.      */     @AppModeInstant    ])', 2), ('([5:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[5]:method_text:[nd are not signed with the platform signature must not be      * installed successfully.      */    ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[dmap if the      * overlay is not signed with the same signature as the target package.      **/    ])', 1), ('([3:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[3]:method_text:[an idmap if the      * overlay is signed with the same signature as the target package.      **/    ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[eption {         assertFailToGenerateIdmap(OVERLAY_ALL_NO_NAME_APK, OVERLAY_ALL_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[eption {         assertFailToGenerateIdmap(OVERLAY_PRODUCT_APK, OVERLAY_PRODUCT_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[xception {         assertFailToGenerateIdmap(OVERLAY_SYSTEM_APK, OVERLAY_SYSTEM_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[xception {         assertFailToGenerateIdmap(OVERLAY_VENDOR_APK, OVERLAY_VENDOR_PACKAGE);     }     ])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[DMA]:[1]:method_text:[ap(OVERLAY_DIFFERENT_SIGNATURE_APK,                 OVERLAY_DIFFERENT_SIGNATURE_PACKAGE);     }     ])', 1), ('([3:/android/security/cts/AslrTest.java]:[DMA]:[3]:method_text:[ts, >= "" + aslrMinEntropyBits + "" required)"",             entropy >= aslrMinEntropyBits);     }     ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[DMA]:[1]:method_text:[ new UnlockScreenRule();      private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);     ])', 1), ('([3:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[DMA]:[3]:method_text:[able window hosted by a different process      * temporarily becomes the focused window.      */    ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[DMA]:[2]:method_text:[Matcher() {         return event -> TextUtils.equals(""onFinishInput"", event.getEventName());     } }])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DMA]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DMA]:[1]:method_text:[y         // without allowing failures.         executeResetPasswordWithTokenTests(true);     }     ])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[DMA]:[2]:method_text:[EPORTED_SIGNAL_STRENGTH without LISTEN_ALWAYS_REPORTED_SIGNAL_STRENGTH      * permission.      *    ])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[DMA]:[2]:method_text:[GsmSignalStrength();         mSignalStrength.isGsm();         mSignalStrength.getLevel();     }     ])', 1), ('([4:/android/opengl/cts/OpenGlEsVersionTest.java]:[DMA]:[4]:method_text:[3, getMinorVersion(reportedVersion));         }     }      @CddTest(requirement=""7.1.4.1/C-2-2"")    ])', 1), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[DMA]:[1]:method_text:[ption e) {             Log.e(TAG, ""Caught exception: "" + e);         }         return false;     } }])', 1), ('([1:/android/view/cts/ViewTest.java]:[DMA]:[1]:method_text:[ND_IN_MILLIS, mActivity::hasWindowFocus);         assertTrue(mActivity.hasWindowFocus());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[DMA]:[2]:method_text:[omInputMethod(mockView.getWindowToken(), 0));         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[DMA]:[2]:method_text:[view);             assertTrue(editText.hasCalledCheckInputConnectionProxy());         });     }     ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[DMA]:[1]:method_text:[a.BaseMap>         KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);     ])', 1), ('([1:/android/permission2/cts/ProtectedBroadcastsTest.java]:[DMA]:[1]:method_text:[K_OTHERS"",     };      /**      * Verify that protected broadcast actions can\'t be sent.      */    ])', 1), ('([5:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[5]:method_text:[t {@link android.telephony.CellIdentity} and its subclasses.  */ public class CellIdentityTest {    ])', 1), ('([10:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[10]:method_text:[tationLongitude());         assertEquals(lat, cdmaCellLocation.getBaseStationLatitude());     }     ])', 1), ('([10:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[10]:method_text:[);         assertEquals(CellInfo.UNAVAILABLE, cdmaCellLocation.getBaseStationLatitude());     }     ])', 1), ('([2:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[2]:method_text:[quals(cid, gsmCellLocation.getCid());         assertEquals(-1, gsmCellLocation.getPsc());     }     ])', 1), ('([2:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[2]:method_text:[Equals(-1, gsmCellLocation.getCid());         assertEquals(-1, gsmCellLocation.getPsc());     }     ])', 1), ('([2:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[2]:method_text:[uals(cid, gsmCellLocation.getCid());         assertEquals(psc, gsmCellLocation.getPsc());     }     ])', 1), ('([2:/android/telephony/cts/CellIdentityTest.java]:[DMA]:[2]:method_text:[ertEquals(-1, gsmCellLocation.getCid());         assertEquals(-1, gsmCellLocation.getPsc());     } }])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[rofiles_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[led_returnsTrue"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[Enabled_returnsTrue"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[n_returnsIntent"",                 mPrimaryUserId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[ction_returnsIntent"",                 mProfileId,                 Collections.EMPTY_MAP);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java]:[DMA]:[1]:method_text:[geName) {         return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);     } }])', 1), ('([10:/android/telephony/cts/CdmaSmsCbProgramDataTest.java]:[DMA]:[10]:method_text:[PTION = ALERT_OPTION_NO_ALERT;     private static final String CATEGORY_NAME = ""category_name"";     ])', 1), ('([3:/android/telephony/cts/CdmaSmsCbProgramDataTest.java]:[DMA]:[3]:method_text:[OPTION, data.getAlertOption());         assertEquals(CATEGORY_NAME, data.getCategoryName());     } }])', 1), ('([4:/android/cts/statsd/atom/HostAtomTests.java]:[DMA]:[4]:method_text:[ 1));      @Override     protected void setUp() throws Exception {         super.setUp();     }     ])', 1), ('([2:/android/cts/statsd/atom/HostAtomTests.java]:[DMA]:[2]:method_text:[eBitmask() & NETWORK_TYPE_BITMASK_CDMA_ALL)                     .isNotEqualTo(0L);         }     } }])', 1), ('([15:/android/security/identity/cts/IdentityApiTest.java]:[android.security.identity]:[15]:method_text:[quals;  public class IdentityApiTest {     private static final String TAG = ""IdentityApiTest"";     ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[DMA]:[1]:method_text:[ static Context getContext() {         return InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([1:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[DMA]:[1]:method_text:[clipFromClipboard);             assertWritingClipNotAllowed(clipFromClipboard);         }     }     ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[DMA]:[3]:method_text:[h (SecurityException e) {             assertDeviceOwnerMessage(e.getMessage());         }     }     ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[JUnit4.class) public class DownloadManagerTest extends DownloadManagerTestBase {      @FlakyTest    ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[  } finally {             mContext.unregisterReceiver(receiver);         }     }      @FlakyTest    ])', 1), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[  } finally {             mContext.unregisterReceiver(receiver);         }     }      @FlakyTest    ])', 1), ('([7:/android/app/cts/DownloadManagerTest.java]:[DMA]:[7]:method_text:[(id, 0);         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[       mContext.unregisterReceiver(receiver);         }     }      @CddTest(requirement=""7.6.1"")    ])', 1), ('([7:/android/app/cts/DownloadManagerTest.java]:[DMA]:[7]:method_text:[h setDestinationInExternalFilesDir and setDestinationinExternalPublicDir.      */     @FlakyTest    ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[ the download location and verify that the extension of the file name is left unchanged.      */    ])', 1), ('([4:/android/app/cts/DownloadManagerTest.java]:[DMA]:[4]:method_text:[ds - 2);         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([3:/android/app/cts/DownloadManagerTest.java]:[DMA]:[3]:method_text:[ setDestinationUri()"");         } catch (Exception e) {             // Expected         }     }     ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[DMA]:[1]:method_text:[        return ai.packageName + process;         }         return process;     }      @FlakyTest    ])', 1), ('([2:/android/app/cts/DownloadManagerTest.java]:[DMA]:[2]:method_text:[ }      //TODO(b/130797842): Remove FlakyTest annotation after that bug is fixed.     @FlakyTest    ])', 1), ('([6:/android/app/cts/DownloadManagerTest.java]:[DMA]:[6]:method_text:[adding random string"");         } catch (Exception e) {             // expected         }     }     ])', 1), ('([5:/android/app/cts/DownloadManagerTest.java]:[DMA]:[5]:method_text:[  } finally {                 mContext.unregisterReceiver(receiver);             }         }     } }])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionWithLinkTestCase.java]:[DMA]:[1]:method_text:[n to dismiss it.      *      * <p>Then user starts a new session by focusing in a field.      */    ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionWithLinkTestCase.java]:[DMA]:[1]:method_text:[tton to save it.      *      * <p>Then user starts a new session by focusing in a field.      */    ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionWithLinkTestCase.java]:[DMA]:[1]:method_text:[ re-launches the      * original activity:      * the Save UI should have been canceled.      */    ])', 1), ('([11:/android/security/identity/cts/UserAuthTest.java]:[android.security.identity]:[11]:method_text:[) {             throw new RuntimeException(""Error creating auth-bound key"", e);         }     }     ])', 1), ('([5:/android/security/identity/cts/UserAuthTest.java]:[DMA]:[5]:method_text:[) {             throw new RuntimeException(""Error creating auth-bound key"", e);         }     }     ])', 1), ('([8:/android/security/identity/cts/UserAuthTest.java]:[DMA]:[8]:method_text:[        rd.getEntry(""org.iso.18013-5.2019"", ""Accessible to auth-with-10-sec-timeout (1)""));     }  }])', 1), ('([4:/android/hardware/cts/CameraGLTest.java]:[DMA]:[4]:method_text:["";          // Magic key         private static final int GL_TEXTURE_EXTERNAL_OES = 0x8D65;     }  }])', 1), ('([2:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[DMA]:[2]:method_text:[}      * returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([1:/android/inputmethodservice/cts/hostside/ShellCommandFromAppTest.java]:[DMA]:[1]:method_text:[}      * returns {@link SecurityException} for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([2:/android/dumpsys/cts/BatteryStatsDumpsysTest.java]:[DMA]:[2]:method_text:[     * Tests the output of ""dumpsys gfxinfo framestats"".      *      * @throws Exception      */    ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[DMA]:[2]:method_text:[l:\\n%s"", patternString, useragent),                     patternMatcher.find());         }     }     ])', 1), ('([11:/android/keystore/cts/MacTest.java]:[DMA]:[11]:method_text:[code(keyBytes),                             e);                 }             }         }     }     ])', 1), ('([5:/android/keystore/cts/MacTest.java]:[DMA]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);             }         }     }     ])', 1), ('([1:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[DMA]:[1]:method_text:[             ""TRANSFORMED - post Finish private method call"",                 }, output);     }     ])', 1), ('([1:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[DMA]:[1]:method_text:[AAAAAAAAAAAcAAAAcAAAAAIA"" +                     ""AAAAAAAAAQAAAAAAAAAAEAAAAQAAAHAAAAA=""),     };     ])', 1), ('([1:/android/security/identity/cts/HkdfTest.java]:[android.security.identity]:[1]:method_text:[yte[] bytes = new byte[numBytes];         sRandom.nextBytes(bytes);         return bytes;     }     ])', 1), ('([7:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[7]:method_text:[strumentation());         mUiDevice.wakeUp();         launchActivity(MockActivity.class);     }     ])', 1), ('([7:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[7]:method_text:[.setText(""Test Text 2"");         assertEquals(""Test Text 2"", clipboardManager.getText());     }     ])', 1), ('([10:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[10]:method_text:[ta.newPlainText(""Label"", ""Text""));         assertTrue(clipboardManager.hasPrimaryClip());     }     ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[1]:method_text:[ription.MIMETYPE_TEXT_INTENT},                 new ExpectedClipItem(null, intent, null));     }     ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[1]:method_text:[on.MIMETYPE_TEXT_URILIST},                 new ExpectedClipItem(null, null, contentUri));     }     ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[1]:method_text:[ption.MIMETYPE_TEXT_URILIST},                 new ExpectedClipItem(""Text"", intent, uri));     }     ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[1]:method_text:[ctedClipItem(null, intent, null),                 new ExpectedClipItem(null, null, uri));     }     ])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[1]:method_text:[null, null, contentUri7),                 new ExpectedClipItem(null, null, contentUri8));     }     ])', 1), ('([2:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[2]:method_text:[   mClipboardManager.setPrimaryClip(clipData);          latch.await(5, TimeUnit.SECONDS);     }     ])', 1), ('([10:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[10]:method_text:[ger.getPrimaryClip());         assertNull(mClipboardManager.getPrimaryClipDescription());     }     ])', 1), ('([23:/android/content/cts/ClipboardManagerTest.java]:[DMA]:[23]:method_text:[text.getPackageManager().hasSystemFeature(                 PackageManager.FEATURE_AUTOFILL);     } }])', 1), ('([3:/com/android/cts/appbinding/AppBindingHostTest.java]:[DMA]:[3]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.      */    ])', 1), ('([3:/android/autofillservice/cts/LoginActivity.java]:[DMA]:[3]:method_text:[re checking autofill      * behavior.      * <pre>      * An example usage is:      * <code>      * ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[DMA]:[1]:method_text:[Layout().getLineBaseline(0),                 tvNoMaxLine.getLayout().getLineBaseline(0));     }     ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[DMA]:[1]:method_text:[neBaseline(i),                     tvNoMaxLine.getLayout().getLineBaseline(i));         }     }     ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[DMA]:[1]:method_text:["",                 tvTwoLines.getHeight(), tvEllipsizeEnd.getHeight());     }      @UiThreadTest    ])', 1), ('([3:/android/widget/cts/TextViewTest.java]:[DMA]:[3]:method_text:[       assertEquals(granularityTextView.getTextSize(), presetTextView.getTextSize(), 0f);     }     ])', 1), ('([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[1]:method_text:[ IME list upon      * IME APK installation for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([2:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[2]:method_text:[ IME list upon      * IME APK installation for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([7:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[DMA]:[7]:method_text:[                .setTestMethodName(testInfo.testMethod)                 .setUserId(userId));     } }])', 1)]"	""	""	""	""	""
"269:784393) 9.11.3  . Identity Credential"	"9.11.3"	"C-0-4"	""	"[('android.view.cts.ViewTest', 210), ('android.widget.cts.AbsSeekBarTest', 15), ('android.opengl.cts.OpenGlEsVersionTest', 9), ('android.autofillservice.cts.FillEventHistoryCommonTestCase', 7), ('android.autofillservice.cts.LoginActivityCommonTestCase', 5), ('android.media.tv.cts.TvViewTest', 4), ('android.preference.cts.PreferenceGroupTest', 4), ('android.widget.cts.GridLayoutTest', 4), ('android.server.wm.WindowInsetsAnimationImeTests', 3), ('android.preference.cts.PreferenceFragmentTest', 3), ('android.preference.cts.PreferenceWithHeadersTest', 3), ('android.widget.cts.ImageButtonTest', 3), ('com.android.cts.accountmanager.AccountManagerCrossUserTest', 2), ('android.autofillservice.cts.TimePickerTestCase', 2), ('android.widget.cts.AbsoluteLayoutTest', 2), ('android.view.cts.TextureViewCameraTest', 2), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 2), ('android.autofillservice.cts.DatePickerTestCase', 2), ('android.provider.cts.settings.Settings_SecureTest', 2), ('android.os.cts.VibratorTest', 1), ('android.autofillservice.cts.inline.InlineFillEventHistoryTest', 1), ('android.preference.cts.CustomCheckBoxPreferenceTest', 1), ('android.telephony.cts.PhoneStateListenerTest', 1)]"	"[('setup', 8), ('getActivity', 8), ('setUp', 7), ('getContext', 6), ('getInstrumentation', 6), ('getTop', 3), ('Builder', 2), ('Object', 2), ('getUiAutomation', 2), ('tearDown', 2), ('getResources', 2), ('getLeft', 2), ('getRight', 2), ('getBottom', 2), ('run', 2), ('build', 1), ('MockCallback', 1), ('booleanValue', 1), ('resetCount', 1), ('getConnectionFailedCount', 1), ('getPackageManager', 1), ('getWindow', 1), ('getDecorView', 1), ('getFloatingImeSettings', 1), ('getAttributeSet', 1), ('getNumberOfCameras', 1), ('getWidth', 1), ('getBaseline', 1), ('getHeight', 1), ('AccessibilityDumpOnFailureRule', 1), ('enableService', 1), ('Executor', 1), ('start', 1), ('getLooper', 1), ('quitSafely', 1), ('getSimpleName', 1), ('getTargetContext', 1), ('hasWindowFocus', 1), ('setSetLayoutParamsNull', 1), ('getLayoutParams', 1)]"	"[('CtsViewTestCases', 212), ('CtsWidgetTestCases', 24), ('CtsAutoFillServiceTestCases', 17), ('CtsPreferenceTestCases', 11), ('CtsOpenGLTestCases', 9), ('CtsTvTestCases', 4), ('CtsWindowManagerDeviceTestCases', 3), ('CtsAccessibilityServiceTestCases', 2), ('CtsProviderTestCases', 2), ('CtsOsHostTestCases', 1), ('CtsTelephonyTestCases', 1)]"	""	"9.11.3/C-0-4"	"""C-0-4] The trusted application MUST be implemented in a way such that its security properties are not affected (e.g. credential data is not released unless access control conditions are satisfied, MACs can't be produced for arbitrary data) even if Android is misbehaving or compromised. <h3 id="""	"09110300.670004"	"MAC"	""	""	""	"[('MAC', 288)]"	""	"[('[android.media.tv.cts.TvViewTest getDisconnectedCount CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testConstructor CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testOnUnhandledInputEventListener CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testUnhandledInputEvent CtsTvTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testAutoFillNoDatasets_multipleFields_alwaysNull CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testAutofill_twoDatasets_selectSecondDataset CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testClearFocusBeforeRespond CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testManualRequestWhileFirstResponseDelayed CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.LoginActivityCommonTestCase testResponseFirstAfterResponseSecond CtsAutoFillServiceTestCases]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForCurrentUser None]', 1), ('[android.preference.cts.PreferenceGroupTest PreferenceGroupTest CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceGroupTest testAddPreference CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceGroupTest testIsOnSameScreenAsChildren CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceGroupTest testOnPrepareAddPreference CtsPreferenceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testZeroInsetsImeAnimates CtsWindowManagerDeviceTestCases]', 1), ('[android.autofillservice.cts.inline.InlineFillEventHistoryTest testOneDatasetAndSave CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testDatasetAuthenticationSelected CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testDatasetSelected_twoResponses CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsNullResponse CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceReturnsFailure CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testNoEvents_whenServiceTimesout CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testEventsFromPreviousSessionIsDiscarded CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase testContextCommitted_withoutFlagOnLastResponse CtsAutoFillServiceTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessThumbOffset CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessThumb CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessTickMark CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testDrawableStateChanged CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testVerifyDrawable CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessKeyProgressIncrement CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessMax CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessMin CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testThumbTint CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testThumbTintBlendMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testTickMarkTint CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testTickMarkTintBlendMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessSplitTrack CtsWidgetTestCases]', 1), ('[android.autofillservice.cts.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.preference.cts.PreferenceFragmentTest PreferenceFragmentTest CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceFragmentTest testGetPreferenceManager CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceFragmentTest testGetPreferenceScreen CtsPreferenceTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testConstructor CtsWidgetTestCases]', 1), ('[android.preference.cts.PreferenceWithHeadersTest PreferenceWithHeadersTest CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceWithHeadersTest testHasHeaders CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceWithHeadersTest testOnIsHidingHeaders CtsPreferenceTestCases]', 1), ('[android.view.cts.TextureViewCameraTest testTextureViewActivity CtsViewTestCases]', 1), ('[android.widget.cts.ImageButtonTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageButtonTest testImageSource CtsWidgetTestCases]', 1), ('[android.preference.cts.CustomCheckBoxPreferenceTest CustomCheckBoxPreferenceTest CtsPreferenceTestCases]', 1), ('[android.widget.cts.GridLayoutTest testConstructor CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testCheckLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testGenerateLayoutParamsFromMarginParams CtsWidgetTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityMagnificationTest testA11yNodeInfoVisibility_whenOutOfMagnifiedArea_shouldVisible CtsAccessibilityServiceTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testOpenGlEsVersion CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensions CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testExtensionPack CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testOpenGlEsVersionForVrHighPerformance CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensionsForVrHighPerformance CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForHdrCapableDisplay CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredGLESVersion CtsOpenGLTestCases]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForWideColorDisplay CtsOpenGLTestCases]', 1), ('[android.autofillservice.cts.DatePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.provider.cts.settings.Settings_SecureTest testUnknownSourcesOnByDefault CtsProviderTestCases]', 1), ('[android.provider.cts.settings.Settings_SecureTest testBluetoothAddressNotAvailable CtsProviderTestCases]', 1), ('[android.view.cts.ViewTest testConstructor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testConstructor2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetContext CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetResources CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testClearAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartAnimationNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnAnimation CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFindViewById CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewById CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdNoId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdInvalid CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequireViewByIdNotFound CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessTouchDelegate CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMouseEventCallsGetPointerIcon CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessPointerIcon CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPointerIconOverlap CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCreatePointerIcons CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessTag CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnSizeChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHitRectNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHitRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testForceLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsLayoutRequested CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBaseline CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessBackground CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetBackgroundResource CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheBackgroundColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetBackgroundColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testVerifyDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFocusedRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRectPoint CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testComputeHorizontalScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testComputeVerticalScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLeftFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRightFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBottomFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTopFadingEdgeStrength CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessLongClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessContextClickable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetContextMenuInfo CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnCreateContextMenuListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCreateContextMenu CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCreateContextMenuNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetFocusables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusablesWithoutTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddFocusablesInTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddKeyboardNavigationClusters CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyboardNavigationClusterSearch CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRootView CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSolidColor CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetMinimumWidth CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSuggestedMinimumWidth CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetMinimumHeight CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetSuggestedMinimumHeight CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessWillNotCacheDrawing CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingCache CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBuildAndDestroyDrawingCache CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessWillNotDraw CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDrawingCacheQuality CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchSetSelected CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSelected CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchSetPressed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessPressed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSoundEffectsEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessKeepScreenOn CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessDuplicateParentStateEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessSaveEnabled CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenu CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuXYNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testShowContextMenuXY CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFitSystemWindows CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnGenericMotionListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXYNullParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY_WithListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnLongClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPerformContextClick CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetOnContextClickListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessOnFocusChangeListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusUpId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusDownId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusLeftId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessNextFocusRightId CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessMeasuredDimension CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMeasure CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAccessLayoutParams CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsShown CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetDrawingTime CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScheduleDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUnscheduleDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowVisibility CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowToken CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testHasWindowFocus CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetHandler CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRemoveCallbacks CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testCancelLongPress CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetViewTreeObserver CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowAttachCount CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnAttachedToAndDetachedFromWindow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindowNullArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationInWindowSmallArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreen CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreenNullArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocationOnScreenSmallArray CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddTouchables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTouchables CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInflate CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsInTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsInEditMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidate1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidate2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostInvalidateDelayed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPost CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPostDelayed CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPlaySoundEffect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyShortcut CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyMultiple CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyShortcutEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyShortcutEventNull CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTrackballEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchTrackballMoveEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchUnhandledMove CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUnhandledKeys CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testWindowVisibilityChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLocalVisibleRect CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testMergeDrawableStates CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSaveAndRestoreHierarchyState CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnKeyDownOrUp CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testAddRemoveAffectsWrapContentLayout CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchKeyEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDispatchTouchEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidate3 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInvalidateDrawable CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnFocusChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRestoreDefaultFocus CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDrawableState CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testWindowFocusChanged CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testDraw CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestFocusFromTouch CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen1 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen2 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen5 CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreenWithScale CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchEventTap CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnTouchEventScroll CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBringToFront CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetApplicationWindowToken CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetBottomPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetLeftPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetRightPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetTopPaddingOffset CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsPaddingOffsetRequired CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testPadding CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testGetWindowVisibleDisplayFrame CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testSetScrollContainer CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTouchMode CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollbarStyle CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollFading CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrolling CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInitializeScrollbarsAndFadingEdge CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollIndicators CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testScrollbarSize CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnStartAndFinishTemporaryDetach CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testKeyPreIme CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testHapticFeedback CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testInputConnection CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testFilterTouchesWhenObscured CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testBackgroundTint CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeWithParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeWithoutParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeTypedWithParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testStartActionModeTypedWithoutParent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testVisibilityAggregated CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOverlappingRendering CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTranslationSetter CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testXYZ CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testOnHoverEvent CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTransformMatrixToGlobal CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testTransformMatrixToLocal CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testIsShowingLayoutBounds CtsViewTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 210), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsSeekBarTest.java', 15), ('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 9), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 7), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivityCommonTestCase.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceGroupTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/GridLayoutTest.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceFragmentTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceWithHeadersTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ImageButtonTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/accounts/test-apps/AccountManagerCrossUserApp/src/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/TimePickerTestCase.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsoluteLayoutTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/TextureViewCameraTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DatePickerTestCase.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_SecureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/VibratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/CustomCheckBoxPreferenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 1)]"	"[('/android/view/cts/ViewTest.java', 211), ('/android/widget/cts/AbsSeekBarTest.java', 16), ('/android/opengl/cts/OpenGlEsVersionTest.java', 10), ('/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 8), ('/android/autofillservice/cts/LoginActivityCommonTestCase.java', 6), ('/android/media/tv/cts/TvViewTest.java', 5), ('/android/preference/cts/PreferenceGroupTest.java', 5), ('/android/widget/cts/GridLayoutTest.java', 5), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 4), ('/android/preference/cts/PreferenceFragmentTest.java', 4), ('/android/preference/cts/PreferenceWithHeadersTest.java', 4), ('/android/widget/cts/ImageButtonTest.java', 4), ('/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 3), ('/android/autofillservice/cts/TimePickerTestCase.java', 3), ('/android/widget/cts/AbsoluteLayoutTest.java', 3), ('/android/view/cts/TextureViewCameraTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 3), ('/android/autofillservice/cts/DatePickerTestCase.java', 3), ('/android/provider/cts/settings/Settings_SecureTest.java', 3), ('/android/os/cts/VibratorTest.java', 2), ('/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 2), ('/android/preference/cts/CustomCheckBoxPreferenceTest.java', 2), ('/android/telephony/cts/PhoneStateListenerTest.java', 2)]"	"[('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[))                 .setTintList(TestUtils.colorStateListOf(Color.RED));     }      @UiThreadTest    ])', 3), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[         mInstrumentation.waitForIdleSync();         assertFalse(view.hasCalledOnDraw());     }     ])', 3), ('([3:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[3]:method_text:[waitUntilDisconnected();          InstrumentedAutoFillService.assertNoFillEventHistory();     }     ])', 2), ('([3:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[3]:method_text:[r.verifyDrawable(drawable1));         assertTrue(myAbsSeekBar.verifyDrawable(drawable2));     }     ])', 2), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[);         assertEquals(1, viewList.size());         assertEquals(view, viewList.get(0));     }     ])', 2), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[ocation[0]);         assertEquals(layoutLocation[1] + mockView.getHeight(), location[1]);     }     ])', 2), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[n so that it does not affect other tests.             view.cancelDragAndDrop();         }     }     ])', 2), ('([1:/android/os/cts/VibratorTest.java]:[MAC]:[1]:method_text:[       mVibrator = InstrumentationRegistry.getContext().getSystemService(Vibrator.class);     }     ])', 1), ('([6:/android/media/tv/cts/TvViewTest.java]:[MAC]:[6]:method_text:[}         mInstrumentation.waitForIdleSync();         super.tearDown();     }      @UiThreadTest    ])', 1), ('([5:/android/media/tv/cts/TvViewTest.java]:[MAC]:[5]:method_text:[) {                     runOnEachChannel.run();                 }             }         }     }     ])', 1), ('([2:/android/media/tv/cts/TvViewTest.java]:[MAC]:[2]:method_text:[verifyKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_GUIDE), unhandledEvent);     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[MAC]:[1]:method_text:[ public boolean onUnhandledInputEvent(InputEvent event) {             return true;         }     } }])', 1), ('([3:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[MAC]:[3]:method_text:[        mActivity.onPassword(View::requestFocus);         mUiBot.assertNoDatasetsEver();     }      ])', 1), ('([5:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[MAC]:[5]:method_text:[             findNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();     }     ])', 1), ('([1:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[MAC]:[1]:method_text:[llRequest();          // Confirm no datasets shown         mUiBot.assertNoDatasetsEver();     }     ])', 1), ('([1:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[MAC]:[1]:method_text:[);          // confirm second response shown         mUiBot.assertDatasets(""The Dude 2"");     }     ])', 1), ('([1:/android/autofillservice/cts/LoginActivityCommonTestCase.java]:[MAC]:[1]:method_text:[         // confirm second response still shown         mUiBot.assertDatasets(""The Dude 2"");     } }])', 1), ('([6:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[MAC]:[6]:method_text:[mberFormatException ignore) {             }         }         return numAccountsExpected;     }     ])', 1), ('([4:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[MAC]:[4]:method_text:[sByType(MockAuthenticator.ACCOUNT_TYPE)).hasLength(                 numAccountsExpected);     }     ])', 1), ('([4:/android/preference/cts/PreferenceGroupTest.java]:[MAC]:[4]:method_text:[     checkboxPref.setChecked(true);         mPreferenceGroup.addPreference(checkboxPref);     }     ])', 1), ('([1:/android/preference/cts/PreferenceGroupTest.java]:[MAC]:[1]:method_text:[e preference = mActivity.findPreference(""pref-group"");         assertNotNull(preference);     }     ])', 1), ('([1:/android/preference/cts/PreferenceGroupTest.java]:[MAC]:[1]:method_text:[stom-pref-group"");         assertTrue(mCustomPreferenceGroup.isOnSameScreenAsChildren());     }     ])', 1), ('([2:/android/preference/cts/PreferenceGroupTest.java]:[MAC]:[2]:method_text:[up.addPreference(checkboxPref);         assertTrue(mCustomPreferenceGroup.mOnPrepareCalled);     } }])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[MAC]:[2]:method_text:[ViewHeight(KEYBOARD_HEIGHT)                                 .setDrawsBehindNavBar(true));     }     ])', 1), ('([7:/android/server/wm/WindowInsetsAnimationImeTests.java]:[MAC]:[7]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([7:/android/server/wm/WindowInsetsAnimationImeTests.java]:[MAC]:[7]:method_text:[// to ensure it.         builder.setNavigationBarColor(Color.BLACK);         return builder;     } }])', 1), ('([5:/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java]:[MAC]:[5]:method_text:[etShown(events.get(0));         assertFillEventForSaveShown(events.get(3), NULL_DATASET_ID);     } }])', 1), ('([2:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[2]:method_text:[ionSelected(events.get(1), ""name"",                 ""clientStateKey"", ""clientStateValue"");     }     ])', 1), ('([8:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[8]:method_text:[vents.get(3), NULL_DATASET_ID,                     ""clientStateKey"", ""Value2"");         }     }     ])', 1), ('([3:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[3]:method_text:[y A - at this point, service should have stats of      *        activity A.      * </ol>      */    ])', 1), ('([8:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[8]:method_text:[own(finalSelection.getEvents().get(0), NULL_DATASET_ID, ""activity"",                 ""A"");     }     ])', 1), ('([6:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[MAC]:[6]:method_text:[ents.get(0));             assertFillEventForDatasetSelected(events.get(1), ""id2"");         }     } }])', 1), ('([4:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[4]:method_text:[umentationRegistry.getInstrumentation();         mActivity = mActivityRule.getActivity();     }     ])', 1), ('([4:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[4]:method_text:[ new MyAbsSeekBar(mActivity, null, 0, android.R.style.Widget_Material_Light_ProgressBar);     }     ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[.setThumbOffset(negative);         assertEquals(negative, myAbsSeekBar.getThumbOffset());     }     ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[        assertEquals(Integer.valueOf(0xFF), alphaCaptures.get(alphaCaptures.size() - 1));     }     ])', 1), ('([5:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[5]:method_text:[r.verifyDrawable(drawable3));         assertTrue(myAbsSeekBar.verifyDrawable(drawable4));     }     ])', 1), ('([5:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[5]:method_text:[yEvent);         assertEquals(oldProgress - keyProgressIncrement, seekBar.getProgress());     }     ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[;         assertEquals(keyProgressIncrement + 1, myAbsSeekBar.getKeyProgressIncrement());     }     ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[AbsSeekBar.getMin());         assertEquals(max, myAbsSeekBar.getMax());     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[1]:method_text:[kTickMark, times(1))                 .setTintList(TestUtils.colorStateListOf(Color.RED));     }     ])', 1), ('([3:/android/widget/cts/AbsSeekBarTest.java]:[MAC]:[3]:method_text:[olean verifyDrawable(Drawable who) {             return super.verifyDrawable(who);         }     } }])', 1), ('([1:/android/autofillservice/cts/TimePickerTestCase.java]:[MAC]:[1]:method_text:[ty>         extends AutoFillServiceTestCase.AutoActivityLaunch<A> {      protected A mActivity;     ])', 1), ('([7:/android/autofillservice/cts/TimePickerTestCase.java]:[MAC]:[7]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");     } }])', 1), ('([2:/android/preference/cts/PreferenceFragmentTest.java]:[MAC]:[2]:method_text:[void setUp() throws Exception {         super.setUp();         mActivity = getActivity();     }     ])', 1), ('([1:/android/preference/cts/PreferenceFragmentTest.java]:[MAC]:[1]:method_text:[er prefManager = prefFragment.getPreferenceManager();         assertNotNull(prefManager);     }     ])', 1), ('([1:/android/preference/cts/PreferenceFragmentTest.java]:[MAC]:[1]:method_text:[enceScreen prefScreen = prefsFragment.getPreferenceScreen();         assertNull(prefScreen);     } }])', 1), ('([7:/android/widget/cts/AbsoluteLayoutTest.java]:[MAC]:[7]:method_text:[stUtils.beginDocument(parser, ""LinearLayout"");         return Xml.asAttributeSet(parser);     }     ])', 1), ('([5:/android/widget/cts/AbsoluteLayoutTest.java]:[MAC]:[5]:method_text:[(mActivity, null, 1);         new AbsoluteLayout(mActivity, attrs, -1);     }      @UiThreadTest    ])', 1), ('([2:/android/preference/cts/PreferenceWithHeadersTest.java]:[MAC]:[2]:method_text:[ty;      public PreferenceWithHeadersTest() {         super(PreferenceWithHeaders.class);     }     ])', 1), ('([1:/android/preference/cts/PreferenceWithHeadersTest.java]:[MAC]:[1]:method_text:[public void testHasHeaders() {         assertTrue(mActivity.hasHeaders());     }      ])', 1), ('([1:/android/preference/cts/PreferenceWithHeadersTest.java]:[MAC]:[1]:method_text:[public void testOnIsHidingHeaders() {         assertFalse(mActivity.onIsHidingHeaders());     } } ])', 1), ('([4:/android/view/cts/TextureViewCameraTest.java]:[MAC]:[4]:method_text:[ty = mActivityRule.getActivity();         mNumberOfCameras = Camera.getNumberOfCameras();     }     ])', 1), ('([1:/android/view/cts/TextureViewCameraTest.java]:[MAC]:[1]:method_text:[    return;         }         assertTrue(mActivity.waitForCompletion(WAIT_TIMEOUT_IN_SECS));     } }])', 1), ('([5:/android/widget/cts/ImageButtonTest.java]:[MAC]:[5]:method_text:[tivity();         mImageButton = (ImageButton) mActivity.findViewById(R.id.image_button);     }     ])', 1), ('([7:/android/widget/cts/ImageButtonTest.java]:[MAC]:[7]:method_text:[  new ImageButton(mActivity, null, 0, android.R.style.Widget_Material_Light_ImageButton);     }     ])', 1), ('([1:/android/widget/cts/ImageButtonTest.java]:[MAC]:[1]:method_text:[(), imageButtonDrawable.getIntrinsicHeight(),                 true, Color.YELLOW, 1, false);     } }])', 1), ('([3:/android/preference/cts/CustomCheckBoxPreferenceTest.java]:[MAC]:[3]:method_text:[(CheckBoxPreference) mActivity.findPreference(                 ""custom_checkbox_pref_1"");     }     ])', 1), ('([5:/android/widget/cts/GridLayoutTest.java]:[MAC]:[5]:method_text:[etActivity();         mGridLayout = (GridLayout) mActivity.findViewById(R.id.gridlayout);     }     ])', 1), ('([4:/android/widget/cts/GridLayoutTest.java]:[MAC]:[4]:method_text:[ttributeSet attrs = Xml.asAttributeSet(parser);         new GridLayout(mActivity, attrs);     }     ])', 1), ('([2:/android/widget/cts/GridLayoutTest.java]:[MAC]:[2]:method_text:[  new GridLayout.LayoutParams(GridLayout.spec(0), GridLayout.spec(0)));     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/GridLayoutTest.java]:[MAC]:[1]:method_text:[w, col, alignment, v0, table[row][col], ""row"");             }         }     }      @UiThreadTest    ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[MAC]:[2]:method_text:[to disable it.         mService = mMagnificationAccessibilityServiceRule.enableService();     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[MAC]:[1]:method_text:[ayoutParams));         // Waiting for UI refresh         mInstrumentation.waitForIdleSync();     } }])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[MAC]:[2]:method_text:[         if (mHandlerThread != null) {             mHandlerThread.quitSafely();         }     }     ])', 1), ('([5:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[5]:method_text:[       mActivity = mActivityRule.getActivity();     }      @CddTest(requirement=""7.1.4.1/C-0-1"")    ])', 1), ('([3:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[3]:method_text:[3, getMinorVersion(reportedVersion));         }     }      @CddTest(requirement=""7.1.4.1/C-2-2"")    ])', 1), ('([3:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[3]:method_text:[s, es31RequiredList[i]));         }     }      @CddTest(requirement=""7.1.4.1/C-2-1,C-5-1,C-4-1"")    ])', 1), ('([4:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[4]:method_text:[st."",             hasAepFeature, hasAepExtension);     }     @CddTest(requirement=""7.9.2/C-1-4"")    ])', 1), ('([2:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[2]:method_text:[  (major == 3 && minor >= 2) || major > 3);     }      @CddTest(requirement=""7.9.2/C-1-6,C-1-8"")    ])', 1), ('([2:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[2]:method_text:[ns, requiredExtension));             }         }     }     @CddTest(requirement=""7.1.4.1/C-6-1"")    ])', 1), ('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[1]:method_text:[g.e(TAG, ""Couldn\'t initialize EGL."");         }     }      @CddTest(requirement=""7.1.4.5/C-1-4"")    ])', 1), ('([3:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[3]:method_text:[        2 == getMinorVersion(reportedVersion));     }      @CddTest(requirement=""7.1.4.5/C-1-5"")    ])', 1), ('([9:/android/opengl/cts/OpenGlEsVersionTest.java]:[MAC]:[9]:method_text:[ption e) {             Log.e(TAG, ""Caught exception: "" + e);         }         return false;     } }])', 1), ('([1:/android/autofillservice/cts/DatePickerTestCase.java]:[MAC]:[1]:method_text:[ty>         extends AutoFillServiceTestCase.AutoActivityLaunch<A> {      protected A mActivity;     ])', 1), ('([7:/android/autofillservice/cts/DatePickerTestCase.java]:[MAC]:[7]:method_text:[   assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""2010/11/12"");     } }])', 1), ('([2:/android/provider/cts/settings/Settings_SecureTest.java]:[MAC]:[2]:method_text:[privileged apps, such as the CTS test app in the context of which this test      * runs.      */    ])', 1), ('([2:/android/provider/cts/settings/Settings_SecureTest.java]:[MAC]:[2]:method_text:[   fail(""Settings.Secure contains "" + name + "": "" + c.getString(2));             }         }     } }])', 1), ('([9:/android/view/cts/ViewTest.java]:[MAC]:[9]:method_text:[ND_IN_MILLIS, mActivity::hasWindowFocus);         assertTrue(mActivity.hasWindowFocus());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[ty, null);          new View(mActivity, attrs, 0);          new View(mActivity, null, 1);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[""                     + sCtorException.first.getName(), sCtorException.second);         }     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[       View view = new View(mActivity);         assertSame(mActivity, view.getContext());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[    View view = new View(mActivity);         assertSame(mResources, view.getResources());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[getAnimation());          view.clearAnimation();         assertNull(view.getAnimation());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[nitialized());          view.setAnimation(null);         assertNull(view.getAnimation());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[.getAnimation());         view.clearAnimation();         assertNull(view.getAnimation());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ationNull() {         View view = new View(mActivity);         view.startAnimation(null);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[imation);         assertEquals(Animation.START_ON_FIRST_FRAME, animation.getStartTime());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[LTA,                 () -> view.hasCalledOnSetAlpha() && view.hasCalledOnAnimationEnd());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ctivity.findViewById(R.id.viewlayout_root);         assertSame(parent, view.getParent());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[NDICATOR_LEFT | View.SCROLL_INDICATOR_RIGHT,                 view.getScrollIndicators());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[tors(0, view.getScrollIndicators());         assertEquals(0, view.getScrollIndicators());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[view = parent.findViewById(R.id.mock_view);         assertTrue(view instanceof MockView);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ssertSame(foundView, requiredView);         assertTrue(requiredView instanceof MockView);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[Activity.findViewById(R.id.viewlayout_root);         parent.requireViewById(View.NO_ID);     }      ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[parent = mActivity.findViewById(R.id.viewlayout_root);         parent.requireViewById(0);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[layout_root);         parent.requireViewById(R.id.view); // id not present in view_layout     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[gate);          view.setTouchDelegate(null);         assertNull(view.getTouchDelegate());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ndViewById(R.id.scroll_view);         assertFalse(view2.hasCalledOnResolvePointerIcon());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[EXT),                      view.onResolvePointerIcon(event, 0));         event.recycle();     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[MAC]:[8]:method_text:[ssertEquals(iconParent, parent.onResolvePointerIcon(event, 0));          event.recycle();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[) {         assertNotNull(PointerIcon.getSystemIcon(mActivity, style));     }      @UiThreadTest    ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[thTag(viewGroup));          mockView.setTag(null);         assertNull(mockView.getTag());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[, view.getOldWOnSizeChanged());         assertEquals(oldh, view.getOldHOnSizeChanged());     }      ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[tNull() {         MockView view = new MockView(mActivity);         view.getHitRect(null);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[w.getWidth(), outRect.right);         assertEquals(mockView.getHeight(), outRect.bottom);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[tRequested());          view.forceLayout();         assertTrue(view.isLayoutRequested());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[sted());          view.layout(0, 0, 0, 0);         assertFalse(view.isLayoutRequested());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[assertTrue(view.isLayoutRequested());         assertTrue(mMockParent.hasRequestLayout());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[        mInstrumentation.waitForIdleSync();         assertTrue(view.hasCalledOnLayout());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[{         View view = new View(mActivity);          assertEquals(-1, view.getBaseline());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[());          view.setBackgroundDrawable(null);         assertNull(view.getBackground());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[und());          view.setBackgroundResource(0);         assertNull(view.getBackground());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[acheBackgroundColor(-1);         assertEquals(-1, view.getDrawingCacheBackgroundColor());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[         assertNotNull(colorDrawable);         assertEquals(0, colorDrawable.getAlpha());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[       assertTrue(view.verifyDrawable(d1));         assertFalse(view.verifyDrawable(d2));     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[w.getWidth(), outRect.right);         assertEquals(mockView.getHeight(), outRect.bottom);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[top);         assertEquals(10, outRect.right);         assertEquals(100, outRect.bottom);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[m);         assertEquals(ptParent.x, point.x);         assertEquals(ptParent.y, point.y);     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[.left + halfWidth, rect.right);         assertEquals(rect.top + halfHeight, rect.bottom);     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[ollRange());         assertEquals(view.getWidth(), view.computeHorizontalScrollExtent());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[rollRange());         assertEquals(view.getHeight(), view.computeVerticalScrollExtent());     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[dgeStrength(), 0.0f);         assertEquals(1f, view.getBottomFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ view.scrollTo(1, 0);         assertEquals(1.0f, view.getLeftFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[iew.scrollTo(-1, 0);         assertEquals(1.0f, view.getRightFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ew.scrollTo(0, -2);         assertEquals(1.0f, view.getBottomFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[  view.scrollTo(0, 2);         assertEquals(1.0f, view.getTopFadingEdgeStrength(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[etId());          view.setId(0xFFFFFFFF);         assertEquals(0xFFFFFFFF, view.getId());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[e());          view.setLongClickable(false);         assertFalse(view.isLongClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[Clickable());          view.setClickable(false);         assertFalse(view.isClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[         view.setContextClickable(false);         assertFalse(view.isContextClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ MockView view = new MockView(mActivity);          assertNull(view.getContextMenuInfo());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ock(View.OnCreateContextMenuListener.class));         assertTrue(view.isLongClickable());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[, times(1)).onCreateContextMenu(                     any(), eq(view), any());         });     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ {         MockView view = new MockView(mActivity);         view.createContextMenu(null);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[st.get(0));          // null array should be ignored         view.addFocusables(null, 0);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[alse(""test sanity"", view.isInTouchMode());         focusableInTouchModeTest(view, false);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[RWARD, View.FOCUSABLES_TOUCH_MODE);         assertEquals(Collections.emptyList(), views);     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[als(decorView, v2.keyboardNavigationClusterSearch(null, View.FOCUS_FORWARD));         });     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[      view.setParent(mMockParent);         assertEquals(mMockParent, view.getRootView());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[         View view = new View(mActivity);          assertEquals(0, view.getSolidColor());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ view.setMinimumWidth(-100);         assertEquals(-100, view.getSuggestedMinimumWidth());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ + 10);         assertEquals(drawableMinimumWidth + 10, view.getSuggestedMinimumWidth());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[iew.setMinimumHeight(-100);         assertEquals(-100, view.getSuggestedMinimumHeight());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ 10);         assertEquals(drawableMinimumHeight + 10, view.getSuggestedMinimumHeight());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[       view.setWillNotCacheDrawing(true);         assertTrue(view.willNotCacheDrawing());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[     view.setDrawingCacheEnabled(true);         assertTrue(view.isDrawingCacheEnabled());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[        Bitmap bitmap2 = view.getDrawingCache();         assertNotSame(bitmap1, bitmap2);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ight());          view.destroyDrawingCache();         assertNull(view.getDrawingCache());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[llNotDraw());          view.setWillNotDraw(true);         assertTrue(view.willNotDraw());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[AWING_CACHE_QUALITY_MASK         assertEquals(0x00180000, view.getDrawingCacheQuality());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[        assertFalse(mockView1.isSelected());         assertFalse(mockView2.isSelected());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ew.isSelected());          view.setSelected(true);         assertTrue(view.isSelected());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[;         assertFalse(mockView1.isPressed());         assertFalse(mockView2.isPressed());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[(view.isPressed());          view.setPressed(true);         assertTrue(view.isPressed());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[   view.setSoundEffectsEnabled(false);         assertFalse(view.isSoundEffectsEnabled());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[enOn());          view.setKeepScreenOn(true);         assertTrue(view.getKeepScreenOn());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[licateParentStateEnabled(true);         assertTrue(view.isDuplicateParentStateEnabled());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[iew.isEnabled());          view.setEnabled(false);         assertFalse(view.isEnabled());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[abled());          view.setSaveEnabled(false);         assertFalse(view.isSaveEnabled());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ckView(mActivity);          assertNull(view.getParent());         view.showContextMenu();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[se(view.showContextMenu());         assertTrue(mMockParent.hasShowContextMenuForChild());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ew(mActivity);          assertNull(view.getParent());         view.showContextMenu(0, 0);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[e(view.showContextMenu(0, 0));         assertTrue(parent.hasShowContextMenuForChildXY());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[rtFalse(view.fitSystemWindows(insets));         assertFalse(view.fitSystemWindows(null));     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[(view);          view.setOnClickListener(null);         assertFalse(view.performClick());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[class));         assertTrue(view.performClick());         assertTrue(view.isClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[          assertFalse(view.dispatchGenericMotionEvent(event3));         event3.recycle();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ent() {         MockView view = new MockView(mActivity);         view.performLongClick();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[rent.hasShowContextMenuForChild());         verify(listener, times(1)).onLongClick(view);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[) {         MockView view = new MockView(mActivity);         view.performLongClick(0, 0);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[(view.performLongClick(0, 0));         assertTrue(parent.hasShowContextMenuForChildXY());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[False(parent.hasShowContextMenuForChildXY());         verify(listener).onLongClick(view);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[         assertTrue(view.performLongClick());         assertTrue(view.isLongClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[rue(view.performContextClick());         verify(listener, times(1)).onContextClick(view);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[   assertTrue(view.performContextClick());         assertTrue(view.isContextClickable());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[sChangeListener(listener);         assertSame(listener, view.getOnFocusChangeListener());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[pId(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusUpId());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[d(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusDownId());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[d(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusLeftId());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[(Integer.MIN_VALUE);         assertEquals(Integer.MIN_VALUE, view.getNextFocusRightId());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[tEquals(20, view.getMeasuredWidth());         assertEquals(30, view.getMeasuredHeight());     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[s(size2, view.getMeasuredWidth());         assertEquals(size1, view.getMeasuredHeight());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[tivity);         assertNull(view.getLayoutParams());          view.setLayoutParams(null);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[assertSame(params, view.getLayoutParams());         assertTrue(view.isLayoutRequested());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[        // mMockParent is not a instance of ViewRoot         assertFalse(view.isShown());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[_windows);         assertEquals(SystemClock.uptimeMillis(), view.getDrawingTime(), 1000);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[eDrawable(view.getBackground(), what);          view.scheduleDrawable(null, null, -1000);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[at);          view.unscheduleDrawable(null);         view.unscheduleDrawable(null, null);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ewById(R.id.fit_windows);         assertEquals(View.VISIBLE, view.getWindowVisibility());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[= mActivity.findViewById(R.id.fit_windows);         assertNotNull(view.getWindowToken());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[dow has been focused.         PollingCheck.waitFor(TIMEOUT_DELTA, view2::hasWindowFocus);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ockView(mActivity);         // mAttachInfo is null         assertNull(view.getHandler());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[runner, delay));         Thread.sleep(delay * 2);         verify(runner, times(1)).run();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[         view = mActivity.findViewById(R.id.fit_windows);         view.cancelLongPress();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[tivity.findViewById(R.id.fit_windows);         assertNotNull(view.getViewTreeObserver());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ttachInfo is null         assertEquals(0, view.getWindowAttachCount());     }      @UiThreadTest    ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[View(R.layout.view_layout);         assertTrue(mockView.hasCalledOnDetachedFromWindow());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ew = mActivity.findViewById(R.id.mock_view);          mockView.getLocationInWindow(null);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ity.findViewById(R.id.mock_view);          mockView.getLocationInWindow(new int[] { 0 });     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ mActivity.findViewById(R.id.scroll_view);          scrollView.getLocationOnScreen(null);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[findViewById(R.id.scroll_view);          scrollView.getLocationOnScreen(new int[] { 0 });     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[Clickable());         view.addTouchables(result);         assertEquals(0, result.size());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ckable());         result = view.getTouchables();         assertEquals(0, result.size());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[        assertNotNull(mockView);         assertTrue(mockView.hasCalledOnFinishInflate());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ew = mActivity.findViewById(R.id.fit_windows);         assertFalse(view.isInTouchMode());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[de() {         View view = new View(mActivity);         assertFalse(view.isInEditMode());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[l         view = mActivity.findViewById(R.id.fit_windows);         view.postInvalidate();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[      view.postInvalidate(10, 20, 30, 40);         view.postInvalidate(0, -20, -30, -40);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ view.postInvalidateDelayed(500, 0, 0, 100, 200);         view.postInvalidateDelayed(-1);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[fit_windows);         assertTrue(view.post(action));         assertTrue(view.post(null));     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[tDelayed(action, 1000));         assertTrue(view.postDelayed(null, 0));     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[stants.NAVIGATION_DOWN);          // no way to assert the soundConstant be really played.     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[  mInstrumentation.sendKeySync(event);         assertTrue(view.hasCalledOnKeyShortcut());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ent.KEYCODE_ENTER));         assertTrue(view.hasCalledOnKeyMultiple());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[hortcutEvent(event);         assertTrue(view.hasCalledOnKeyShortcut());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ock_view);         view.setFocusable(true);          view.dispatchKeyShortcutEvent(null);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[aitForIdleSync();         assertTrue(view.hasCalledOnTrackballEvent());     }      @UiThreadTest    ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[.hasCalledOnTrackballEvent());         assertTrue(mockView2.hasCalledOnTrackballEvent());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[mentation.sendKeySync(event);          assertTrue(view.hasCalledDispatchUnhandledMove());     }     ])', 1), ('([20:/android/view/cts/ViewTest.java]:[MAC]:[20]:method_text:[istener.fired()); // checks that both up and down were received         listener.reset();     }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[MAC]:[8]:method_text:[ion.waitForIdleSync();         assertTrue(mockView.hasCalledOnWindowVisibilityChanged());     }     ])', 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[Exception"");         } catch (NullPointerException e) {             // expected         }     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[r().removeOnPreDrawListener(this);                 return true;             }         });     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[         });         countDownLatch3.await(500, TimeUnit.MILLISECONDS);     }      @UiThreadTest    ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[getValue().getKeyCode());         assertFalse(view.hasCalledOnKeyUp());     }      @UiThreadTest    ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[ventTime(), 20 /*delta*/);         }          event1.recycle();         event2.recycle();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[pareAndRecycleMotionEvents(upEvent, events.poll());         assertTrue(events.isEmpty());     }     ])', 1), ('([4:/android/view/cts/ViewTest.java]:[MAC]:[4]:method_text:[ointerException"");         } catch (NullPointerException e) {         }     }      @UiThreadTest    ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ view.clearFocus();         assertTrue(view.hasCalledOnFocusChanged());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[y);         view.restoreDefaultFocus();         assertTrue(view.hasCalledRequestFocus());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[(), view.getDrawableState()));         assertTrue(view.hasCalledOnCreateDrawableState());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[      assertTrue(view.hasCalledDispatchWindowFocusChanged());          activity.finish();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[    assertTrue(view.hasCalledOnDraw());         assertTrue(view.hasCalledDispatchDraw());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[sFocused());          view.requestFocusFromTouch();         assertTrue(view.isFocused());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[should throw NullPointerException"");         } catch (NullPointerException e) {         }     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[   assertEquals(new Rect(9, 8, 11, 11), grandParent.getLastRequestedChildRectOnScreen());     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[) interrupted! Test may fail!"", e);         }         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[Instrumentation, mActivityRule, view);         assertTrue(view.hasCalledOnTouchEvent());     }      ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[vent());         assertFalse(view.isPressed());         verifyZeroInteractions(listener);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[);         view.bringToFront();         assertTrue(mMockParent.hasBroughtChildToFront());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[.findViewById(R.id.fit_windows);         assertNotNull(view.getApplicationWindowToken());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[w view = new MockView(mActivity);         assertEquals(0, view.getBottomPaddingOffset());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[iew view = new MockView(mActivity);         assertEquals(0, view.getLeftPaddingOffset());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ew view = new MockView(mActivity);         assertEquals(0, view.getRightPaddingOffset());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[View view = new MockView(mActivity);         assertEquals(0, view.getTopPaddingOffset());     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ckView(mActivity);         assertFalse(view.isPaddingOffsetRequired());     }      @UiThreadTest    ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[ssertEquals(8, view.getPaddingRight());         assertEquals(0, view.getPaddingBottom());     }     ])', 1), (""([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[        // it's implementation detail         view.getWindowVisibleDisplayFrame(outRect);     }     ])"", 1), ('([5:/android/view/cts/ViewTest.java]:[MAC]:[5]:method_text:[omInputMethod(mockView.getWindowToken(), 0));         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[MAC]:[7]:method_text:[PointerSync(event);         assertTrue(fitWindowsView.isInTouchMode());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[to get the position of the Scrollbar to assert it is inside or outside.     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[        assertEquals(fadingLength, view.getVerticalFadingEdgeLength());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[assertEquals(-2, view.getScrollY());         assertTrue(view.hasCalledOnScrollChanged());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[    assertEquals(fadingEdgeLength, view.getVerticalFadingEdgeLength());     }      @UiThreadTest    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ICATOR_START | View.SCROLL_INDICATOR_RIGHT,                 view.getScrollIndicators());      }     ])', 1), ('([8:/android/view/cts/ViewTest.java]:[MAC]:[8]:method_text:[idth());         assertEquals(customScrollbarSize, view6.getHorizontalScrollbarHeight());     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[artTemporaryDetach.get());         assertTrue(exitedDispatchFinishTemporaryDetach.get());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[view.hasCalledDispatchKeyEventPreIme());         assertTrue(view.hasCalledOnKeyPreIme());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[tor, view.performHapticFeedback(LONG_PRESS,                 FLAG_IGNORE_GLOBAL_SETTING));     }     ])', 1), ('([7:/android/view/cts/ViewTest.java]:[MAC]:[7]:method_text:[view);             assertTrue(editText.hasCalledCheckInputConnectionProxy());         });     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[rify(touchListener, times(1)).onTouch(view, obscuredTouch);         reset(touchListener);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[BackgroundTints() called before setBackground()"",                 bg.hasCalledSetTint());     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[lled);         assertEquals(ActionMode.TYPE_PRIMARY, parent.startActionModeForChildType);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ivity);          ActionMode mode = view.startActionMode(null);          assertNull(mode);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[led);         assertEquals(ActionMode.TYPE_FLOATING, parent.startActionModeForChildType);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[e mode = view.startActionMode(null, ActionMode.TYPE_FLOATING);          assertNull(mode);     }     ])', 1), ('([10:/android/view/cts/ViewTest.java]:[MAC]:[10]:method_text:[rent.setVisibility(View.VISIBLE));          assertTrue(mv.getLastAggregatedVisibility());     }     ])', 1), ('([6:/android/view/cts/ViewTest.java]:[MAC]:[6]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());         return shadowBuilder;     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[uInflater getMenuInflater() {                     return null;                 }             };     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[), 0.0f);         assertEquals(""Incorrect elevation"", offset, view.getElevation(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[Y(), 0.0f);         assertEquals(""Incorrect Z value"", offset + start, view.getZ(), 0.0f);     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[view.onHoverEvent(event);         assertFalse(view.isHovered());         event.recycle();     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[MAC]:[1]:method_text:[ix should reflect position on screen"",                 location[1], newValues[5], 0.001);     }     ])', 1), ('([2:/android/view/cts/ViewTest.java]:[MAC]:[2]:method_text:[ view should be 10px above the second view"",                 -10, localValues[5], 0.001);     }     ])', 1), ('([3:/android/view/cts/ViewTest.java]:[MAC]:[3]:method_text:[.class,         android.widget.ZoomButton.class,         android.widget.ZoomControls.class,     }; }])', 1)]"	""	""	""	""	""
"269:784393) 9.11.3  . Identity Credential"	"9.11.3"	"C-0-1"	""	"[('android.app.cts.NotificationManagerTest', 16), ('android.widget.cts.TextViewTest', 9), ('android.webkit.cts.TracingControllerTest', 6), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 6), ('android.text.method.cts.CharacterPickerDialogTest', 4), ('android.media.cts.MediaSession2ServiceTest', 4), ('android.view.inputmethod.cts.NavigationBarColorTest', 4), ('android.text.method.cts.DigitsKeyListenerTest', 3), ('android.text.cts.Spannable_FactoryTest', 3), ('android.text.method.cts.TextKeyListenerTest', 3), ('com.android.cts.managedprofile.WipeDataNotificationTest', 3), ('android.text.method.cts.DateTimeKeyListenerTest', 3), ('android.text.method.cts.DialerKeyListenerTest', 2), ('android.security.cts.StagefrightTest', 2), ('android.webkit.cts.WebViewDataDirTest', 2), ('android.text.method.cts.DateKeyListenerTest', 2), ('android.os.cts.HwBinderTest', 1), ('android.autofillservice.cts.TimePickerTestCase', 1), ('android.autofillservice.cts.DatePickerTestCase', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.media.cts.MediaRoute2ProviderServiceTest', 1), ('android.provider.cts.media.MediaStore_Audio_ArtistsTest', 1), ('android.text.format.cts.TimeTest', 1), ('android.webkit.cts.WebSettingsTest', 1), ('android.permission.cts.LocationAccessCheckTest', 1), ('android.webkit.cts.WebChromeClientTest', 1), ('android.autofillservice.cts.CustomDescriptionDateTest', 1), ('android.media.cts.MediaRouter2Test', 1), ('android.keystore.cts.KeyStoreTest', 1), ('android.text.method.cts.ScrollingMovementMethodTest', 1), ('android.text.cts.SpannableStringBuilderSpanTest', 1), ('android.widget.cts.TextClockTest', 1), ('android.view.inputmethod.cts.FocusHandlingTest', 1), ('android.webkit.cts.WebHistoryItemTest', 1), ('android.webkit.cts.CookieTest', 1), ('android.autofillservice.cts.DateTransformationTest', 1), ('android.provider.cts.media.MediaStore_Audio_GenresTest', 1), ('android.net.cts.DnsResolverTest', 1), ('android.text.cts.SpannableStringTest', 1), ('android.webkit.cts.WebViewTest', 1), ('android.provider.cts.media.MediaStore_Audio_MediaTest', 1), ('android.provider.cts.media.MediaStoreAudioTestHelper', 1), ('android.security.NetworkSecurityPolicyTestBase', 1), ('android.app.cts.BooleanTileServiceTest', 1), ('android.text.method.cts.HideReturnsTransformationMethodTest', 1), ('android.text.method.cts.PasswordTransformationMethodTest', 1)]"	"[('getInstrumentation', 7), ('getId', 7), ('build', 6), ('setUp', 5), ('tearDown', 5), ('toString', 5), ('getActiveNotifications', 5), ('getContentResolver', 5), ('getContext', 5), ('getPackageName', 4), ('getMessage', 4), ('getInstance', 3), ('validateThread', 3), ('RouteCallback', 2), ('getTargetContext', 2), ('run', 2), ('close', 2), ('getComplete', 2), ('getSimpleName', 2), ('getPackageManager', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('Audio1', 2), ('newSingleThreadExecutor', 1), ('check', 1), ('TracingReceiver', 1), ('ByteArrayOutputStream', 1), ('flush', 1), ('currentThread', 1), ('getName', 1), ('getNbChunks', 1), ('getCompleteCallable', 1), ('call', 1), ('getOutputStream', 1), ('getUiAutomation', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('getMainLooper', 1), ('storePrivateDnsSetting', 1), ('restorePrivateDnsSetting', 1), ('UnlockScreenRule', 1)]"	"[('CtsTextTestCases', 26), ('CtsAndroidAppTestCases', 17), ('CtsWebkitTestCases', 13), ('CtsWidgetTestCases', 10), ('CtsMediaTestCases', 7), ('CtsLegacyNotification27TestCases', 6), ('CtsInputMethodTestCases', 5), ('CtsAutoFillServiceTestCases', 4), ('CtsProviderTestCases', 4), ('CtsSecurityTestCases', 2), ('CtsOsHostTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsKeystoreTestCases', 1)]"	""	"9.11.3/C-0-1"	"""C-0-1] MUST return non-null for the IdentityCredentialStore#getInstance() method. """	"09110300.670001"	"getInstance()"	""	""	""	"[('getInstance()', 102)]"	""	"[('[android.os.cts.HwBinderTest testHwBinder CtsOsHostTestCases]', 1), ('[android.autofillservice.cts.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.DatePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.media.cts.MediaRoute2ProviderServiceTest finishActivity CtsMediaTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_ArtistsTest testStoreAudioArtists CtsProviderTestCases]', 1), ('[android.webkit.cts.TracingControllerTest TracingControllerTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.TracingControllerTest testTracingStopFalseIfNotTracing CtsWebkitTestCases]', 1), ('[android.webkit.cts.TracingControllerTest testTracingCannotStartIfAlreadyTracing CtsWebkitTestCases]', 1), ('[android.webkit.cts.TracingControllerTest testTracingInvalidCategoriesPatternExclusion CtsWebkitTestCases]', 1), ('[android.webkit.cts.TracingControllerTest testTracingInvalidCategoriesPatternComma CtsWebkitTestCases]', 1), ('[android.webkit.cts.TracingControllerTest testTracingWithNullConfig CtsWebkitTestCases]', 1), ('[android.text.format.cts.TimeTest testNormalize CtsTextTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAccessCacheMode_defaultValue CtsWebkitTestCases]', 1), ('[android.permission.cts.LocationAccessCheckTest getPermissionControllerPackageName CtsPermissionTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessKeyListener CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessMovementMethod CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testSetEditableFactory CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testSetSpannableFactory CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessError CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testKeyNavigation CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testAccessTransformationMethod CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testSingleLine CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewTest testGetTextDirectionHeuristic_RtlLayout_TextDirectionLocale CtsWidgetTestCases]', 1), ('[android.text.method.cts.DialerKeyListenerTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.DialerKeyListenerTest testGetInputType CtsTextTestCases]', 1), ('[android.webkit.cts.WebChromeClientTest testOnReceivedIcon CtsWebkitTestCases]', 1), ('[android.autofillservice.cts.CustomDescriptionDateTest testSaveSameValue_withoutSanitization CtsAutoFillServiceTestCases]', 1), ('[android.text.method.cts.CharacterPickerDialogTest testConstructor CtsTextTestCases]', 1), ('[android.text.method.cts.CharacterPickerDialogTest testConstructorNullContext CtsTextTestCases]', 1), ('[android.text.method.cts.CharacterPickerDialogTest testOnItemClick CtsTextTestCases]', 1), ('[android.text.method.cts.CharacterPickerDialogTest testOnClick CtsTextTestCases]', 1), ('[android.media.cts.MediaRouter2Test emptyList CtsMediaTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getInstance CtsKeystoreTestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenStillHasAccess CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testMethodsExistAndDoNotThrow CtsLegacyNotification27TestCases]', 1), ('[android.text.method.cts.ScrollingMovementMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.text.cts.SpannableStringBuilderSpanTest testCopyConstructorDoesNotEnforceParagraphStyleConstraint CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testFilter1 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener1 CtsTextTestCases]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testGetInstance1 CtsTextTestCases]', 1), ('[android.widget.cts.TextClockTest testUpdate12_24 CtsWidgetTestCases]', 1), ('[android.security.cts.StagefrightTest testStagefright_bug_68342866 CtsSecurityTestCases]', 1), ('[android.security.cts.StagefrightTest testStagefright_cve_2016_3879 CtsSecurityTestCases]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testKeyboardStateAfterImeFocusableFlagChanged CtsInputMethodTestCases]', 1), ('[android.webkit.cts.WebHistoryItemTest testWebHistoryItem CtsWebkitTestCases]', 1), ('[android.webkit.cts.CookieTest CookieTest CtsWebkitTestCases]', 1), ('[android.autofillservice.cts.DateTransformationTest testValidAutofillValue CtsAutoFillServiceTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_GenresTest testGetContentUriForAudioId CtsProviderTestCases]', 1), ('[android.webkit.cts.WebViewDataDirTest testSameDirTwoProcesses CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewDataDirTest testCookieJarsSeparate CtsWebkitTestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSuspendPackage CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSuspendedPackageSendsNotification CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCanBubble_ranking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testShowBadging_ranking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffectsOff_ranking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffects_ranking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testKeyChannelGroupOverrideImportanceExplanation_ranking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationDelegate_cannotCancelNotificationsPostedByDelegator CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_setNotificationsShown CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_getNotificationChannels CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_getNotificationChannelGroups CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_updateNotificationChannel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_getActiveNotifications CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_getCurrentRanking CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_cancelNotifications CtsAndroidAppTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testGetSessions CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testAddSessions_removedWhenClose CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testOnUpdateNotification CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2ServiceTest testOnBind CtsMediaTestCases]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.text.cts.SpannableStringTest testCopyConstructorDoesNotEnforceParagraphStyleConstraint CtsTextTestCases]', 1), ('[android.text.method.cts.DateKeyListenerTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.DateKeyListenerTest testDateTimeKeyListener CtsTextTestCases]', 1), ('[android.webkit.cts.WebViewTest testCreatingWebViewCreatesCookieSyncManager CtsWebkitTestCases]', 1), ('[android.text.cts.Spannable_FactoryTest testNewSpannable CtsTextTestCases]', 1), ('[android.text.cts.Spannable_FactoryTest testNewSpannableNull CtsTextTestCases]', 1), ('[android.text.cts.Spannable_FactoryTest testGetInstance CtsTextTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_MediaTest testStoreAudioMedia CtsProviderTestCases]', 1), ('[android.text.method.cts.TextKeyListenerTest testGetInstance2 CtsTextTestCases]', 1), ('[android.text.method.cts.TextKeyListenerTest testOnSpanChanged CtsTextTestCases]', 1), ('[android.text.method.cts.TextKeyListenerTest testOnSpanChangedNull CtsTextTestCases]', 1), ('[android.provider.cts.media.MediaStoreAudioTestHelper currentTimeMillis CtsProviderTestCases]', 1), ('[com.android.cts.managedprofile.WipeDataNotificationTest testWipeDataWithReasonVerification None]', 1), ('[com.android.cts.managedprofile.WipeDataNotificationTest testWipeDataWithEmptyReasonVerification None]', 1), ('[com.android.cts.managedprofile.WipeDataNotificationTest testWipeDataWithoutReasonVerification None]', 1), ('[android.security.NetworkSecurityPolicyTestBase testNetworkSecurityPolicy None]', 1), ('[android.app.cts.BooleanTileServiceTest testValueTracksState CtsAndroidAppTestCases]', 1), ('[android.text.method.cts.HideReturnsTransformationMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.PasswordTransformationMethodTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.DateTimeKeyListenerTest testGetInstance CtsTextTestCases]', 1), ('[android.text.method.cts.DateTimeKeyListenerTest testGetInputType CtsTextTestCases]', 1), ('[android.text.method.cts.DateTimeKeyListenerTest testDateTimeKeyListener CtsTextTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest getSystemUiVisibility CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testSetNavigationBarColor CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testLightNavigationBar CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.NavigationBarColorTest testDimmingWindow CtsInputMethodTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 16), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/TracingControllerTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/CharacterPickerDialogTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaSession2ServiceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/NavigationBarColorTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/DigitsKeyListenerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/Spannable_FactoryTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/TextKeyListenerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WipeDataNotificationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/DateTimeKeyListenerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/DialerKeyListenerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewDataDirTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/DateKeyListenerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/TimePickerTestCase.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DatePickerTestCase.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRoute2ProviderServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/format/cts/TimeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebChromeClientTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/CustomDescriptionDateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRouter2Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyStoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/ScrollingMovementMethodTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SpannableStringBuilderSpanTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextClockTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebHistoryItemTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/CookieTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DateTransformationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SpannableStringTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreAudioTestHelper.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/netsecpolicy/src/android/security/NetworkSecurityPolicyTestBase.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/BooleanTileServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/HideReturnsTransformationMethodTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/PasswordTransformationMethodTest.java', 1)]"	"[('/android/app/cts/NotificationManagerTest.java', 17), ('/android/widget/cts/TextViewTest.java', 10), ('/android/webkit/cts/TracingControllerTest.java', 7), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 7), ('/android/text/method/cts/CharacterPickerDialogTest.java', 5), ('/android/media/cts/MediaSession2ServiceTest.java', 5), ('/android/view/inputmethod/cts/NavigationBarColorTest.java', 5), ('/android/text/method/cts/DigitsKeyListenerTest.java', 4), ('/android/text/cts/Spannable_FactoryTest.java', 4), ('/android/text/method/cts/TextKeyListenerTest.java', 4), ('/com/android/cts/managedprofile/WipeDataNotificationTest.java', 4), ('/android/text/method/cts/DateTimeKeyListenerTest.java', 4), ('/android/text/method/cts/DialerKeyListenerTest.java', 3), ('/android/security/cts/StagefrightTest.java', 3), ('/android/webkit/cts/WebViewDataDirTest.java', 3), ('/android/text/method/cts/DateKeyListenerTest.java', 3), ('/android/os/cts/HwBinderTest.java', 2), ('/android/autofillservice/cts/TimePickerTestCase.java', 2), ('/android/autofillservice/cts/DatePickerTestCase.java', 2), ('/android/media/cts/PresentationSyncTest.java', 2), ('/android/media/cts/MediaRoute2ProviderServiceTest.java', 2), ('/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java', 2), ('/android/text/format/cts/TimeTest.java', 2), ('/android/webkit/cts/WebSettingsTest.java', 2), ('/android/permission/cts/LocationAccessCheckTest.java', 2), ('/android/webkit/cts/WebChromeClientTest.java', 2), ('/android/autofillservice/cts/CustomDescriptionDateTest.java', 2), ('/android/media/cts/MediaRouter2Test.java', 2), ('/android/keystore/cts/KeyStoreTest.java', 2), ('/android/text/method/cts/ScrollingMovementMethodTest.java', 2), ('/android/text/cts/SpannableStringBuilderSpanTest.java', 2), ('/android/widget/cts/TextClockTest.java', 2), ('/android/view/inputmethod/cts/FocusHandlingTest.java', 2), ('/android/webkit/cts/WebHistoryItemTest.java', 2), ('/android/webkit/cts/CookieTest.java', 2), ('/android/autofillservice/cts/DateTransformationTest.java', 2), ('/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 2), ('/android/net/cts/DnsResolverTest.java', 2), ('/android/text/cts/SpannableStringTest.java', 2), ('/android/webkit/cts/WebViewTest.java', 2), ('/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 2), ('/android/provider/cts/media/MediaStoreAudioTestHelper.java', 2), ('/android/security/NetworkSecurityPolicyTestBase.java', 2), ('/android/app/cts/BooleanTileServiceTest.java', 2), ('/android/text/method/cts/HideReturnsTransformationMethodTest.java', 2), ('/android/text/method/cts/PasswordTransformationMethodTest.java', 2)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[sociations()"");         } catch (SecurityException e) {             // expected         }     }     ])', 3), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[ot set to null!"");         } catch (NullPointerException e) {         }     }      @UiThreadTest    ])', 2), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[tFalse(outRanking.isSuspended());             }         }          mListener.resetData();     }     ])', 2), ('([1:/android/media/cts/MediaSession2ServiceTest.java]:[getInstance()]:[1]:method_text:[s = service.getSessions();             assertFalse(sessions.contains(session));         }     }     ])', 2), ('([1:/com/android/cts/managedprofile/WipeDataNotificationTest.java]:[getInstance()]:[1]:method_text:[SECONDS, TimeUnit.SECONDS));         NotificationListener.getInstance().clearListeners();     }     ])', 2), ('([2:/android/os/cts/HwBinderTest.java]:[getInstance()]:[2]:method_text:[      notification.lock.unlock();         }          assertTrue(notification.registered);     }     ])', 1), ('([1:/android/autofillservice/cts/TimePickerTestCase.java]:[getInstance()]:[1]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");     } }])', 1), ('([1:/android/autofillservice/cts/DatePickerTestCase.java]:[getInstance()]:[1]:method_text:[   assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""2010/11/12"");     } }])', 1), ('([1:/android/media/cts/PresentationSyncTest.java]:[getInstance()]:[1]:method_text:[sleep(10); }                 catch (InterruptedException ignored) {}             }         }     } }])', 1), ('([1:/android/media/cts/MediaRoute2ProviderServiceTest.java]:[getInstance()]:[1]:method_text:[(mService != null) {             mService.clear();             mService = null;         }     }     ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_ArtistsTest.java]:[getInstance()]:[1]:method_text:[, selection, selectionArgs, null);         assertEquals(0, c.getCount());         c.close();     } }])', 1), ('([2:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[2]:method_text:[t thread     // (via executor). Tracing start/stop and webview loading happens on the UI thread.    ])', 1), ('([1:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[1]:method_text:[ngController.isTracing());     }      // Test that tracing cannot be started if already tracing.    ])', 1), ('([1:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[1]:method_text:[e already tracing"");     }      // Test that tracing cannot be invoked with excluded categories.    ])', 1), ('([1:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[1]:method_text:[ pattern"");     }      // Test that tracing cannot be invoked with categories containing commas.    ])', 1), ('([1:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[1]:method_text:[egory pattern"");     }      // Test that tracing cannot start with a configuration that is null.    ])', 1), ('([2:/android/webkit/cts/TracingControllerTest.java]:[getInstance()]:[2]:method_text:[tion(""about:blank"");         assertTrue(tracingController.stop(tracingReceiver, executor));     } } ])', 1), ('([1:/android/text/format/cts/TimeTest.java]:[getInstance()]:[1]:method_text:[sertEquals(expectedMonth, time.month);         assertEquals(expectedDate, time.monthDay);     }     ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[getInstance()]:[1]:method_text:[Sync();         Thread.sleep(100); // Wait for open to be received on the icon db thread.     }     ])', 1), ('([2:/android/permission/cts/LocationAccessCheckTest.java]:[getInstance()]:[2]:method_text:[Unbind() throws Throwable {         unbindService();         getNotification(true, true);     }     ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[ion.waitForIdleSync();         assertSame(qwertyKeyListener, mTextView.getKeyListener());     }     ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[rtEquals(selectionEnd, Selection.getSelectionEnd(mTextView.getText()));     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[ // the error message and icon will be cleared.         assertNull(mTextView.getError());     }     ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[t.setSource(source);         CtsKeyEventUtil.sendKey(instrumentation, targetView, event);     }     ])', 1), ('([4:/android/widget/cts/TextViewTest.java]:[getInstance()]:[4]:method_text:[ForIdleSync();         assertNull(mTextView.getTransformationMethod());     }      @UiThreadTest    ])', 1), ('([2:/android/widget/cts/TextViewTest.java]:[getInstance()]:[2]:method_text:[ertEquals(singleLineWidth, mTextView.getLayout().getWidth());         }     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[getInstance()]:[1]:method_text:[  s.replace(0, s.length(), builder.toString());             mChangingText = false;         }     } }])', 1), ('([4:/android/text/method/cts/DialerKeyListenerTest.java]:[getInstance()]:[4]:method_text:[rtTrue(listener2 instanceof DialerKeyListener);         assertSame(listener1, listener2);     }     ])', 1), ('([1:/android/text/method/cts/DialerKeyListenerTest.java]:[getInstance()]:[1]:method_text:[Event event, Spannable content) {             return super.lookup(event, content);         }     } }])', 1), ('([1:/android/webkit/cts/WebChromeClientTest.java]:[getInstance()]:[1]:method_text:[);         } else {             assertFalse(webChromeClient.hadOnCloseWindow());         }     }    ])', 1), ('([1:/android/autofillservice/cts/CustomDescriptionDateTest.java]:[getInstance()]:[1]:method_text:[int resourceId) {         return new RemoteViews(getContext().getPackageName(), resourceId);     } }])', 1), ('([1:/android/text/method/cts/CharacterPickerDialogTest.java]:[getInstance()]:[1]:method_text:[aracterPickerDialog(view.getContext(), view, content, ""\\u00A1"", false);     }      @UiThreadTest    ])', 1), ('([1:/android/text/method/cts/CharacterPickerDialogTest.java]:[getInstance()]:[1]:method_text:[       new CharacterPickerDialog(null, view, content, ""\\u00A1"", false);     }      @UiThreadTest    ])', 1), ('([2:/android/text/method/cts/CharacterPickerDialogTest.java]:[getInstance()]:[2]:method_text:[ text.toString());         assertFalse(insertPickerDialog.isShowing());     }      @UiThreadTest    ])', 1), ('([1:/android/text/method/cts/CharacterPickerDialogTest.java]:[getInstance()]:[1]:method_text:[just make sure onClick does not throw exception         characterPickerDialog.onClick(view);     } }])', 1), ('([1:/android/media/cts/MediaRouter2Test.java]:[getInstance()]:[1]:method_text:[(mService != null) {             mService.clear();             mService = null;         }     }     ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[getInstance()]:[1]:method_text:[eption expected) {         }         assertNotNull(KeyStore.getInstance(type, provider));     }     ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[2]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([4:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[4]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[3]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[1]:method_text:[nd after permission lost"");         } catch (Exception e) {             // pass         }     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[1]:method_text:[atch (Exception e) {             fail(""Service should\'ve been able to rebind"");         }     }     ])', 1), ('([4:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[getInstance()]:[4]:method_text:[ } else {             Log.d(TAG, service.getName() + "" has a correct bind state"");         }     } }])', 1), ('([3:/android/text/method/cts/ScrollingMovementMethodTest.java]:[getInstance()]:[3]:method_text:[od method1 = ScrollingMovementMethod.getInstance();         assertSame(method0, method1);     }     ])', 1), ('([1:/android/text/cts/SpannableStringBuilderSpanTest.java]:[getInstance()]:[1]:method_text:[opied.length(), AlignmentSpan.Standard.class);          assertEquals(0, copiedSpans.length);     } }])', 1), ('([1:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[1]:method_text:[urn ""123456""      * 14. filter ""+123456"" but dest has \'-\' before dstart, return ""123456""      */    ])', 1), ('([1:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[1]:method_text:[ot be accepted,      *     because text view accepts minus sign iff it at the beginning.      */    ])', 1), ('([2:/android/text/method/cts/DigitsKeyListenerTest.java]:[getInstance()]:[2]:method_text:[er3);         assertSame(listener1, listener2);         assertSame(listener1, listener3);     }     ])', 1), ('([1:/android/widget/cts/TextClockTest.java]:[getInstance()]:[1]:method_text:[) {                 throw new RuntimeException(t.getMessage());             }         });     }     ])', 1), ('([1:/android/security/cts/StagefrightTest.java]:[getInstance()]:[1]:method_text:[     t.join();         policy.setCleartextTrafficPermitted(false);         server.join();     }     ])', 1), (""([1:/android/security/cts/StagefrightTest.java]:[getInstance()]:[1]:method_text:[or thread to exit so we're sure the player was released     }      /*      * b/135207745      */    ])"", 1), ('([2:/android/view/inputmethod/cts/FocusHandlingTest.java]:[getInstance()]:[2]:method_text:[ll AutoCloseable autoCloseable) {             return new CloseOnce(autoCloseable);         }     } }])', 1), ('([1:/android/webkit/cts/WebHistoryItemTest.java]:[getInstance()]:[1]:method_text:[ assertNotNull(item);         assertEquals(TestHtmlConstants.BR_TAG_TITLE, item.getTitle());     } }])', 1), ('([1:/android/webkit/cts/CookieTest.java]:[getInstance()]:[1]:method_text:[             }         }         assertFalse(mCookieManager.hasCookies());     }      @Presubmit    ])', 1), ('([1:/android/autofillservice/cts/DateTransformationTest.java]:[getInstance()]:[1]:method_text:[.setCharSequence(eq(0), any(),                 argThat(new CharSequenceMatcher(""12/2012"")));     } }])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_GenresTest.java]:[getInstance()]:[1]:method_text:[ull));             assertEquals(1, mContentResolver.delete(genreUri, null, null));         }     } }])', 1), ('([1:/android/webkit/cts/WebViewDataDirTest.java]:[getInstance()]:[1]:method_text:[_URL);             assertNull(""cookie leaked to alternate cookie jar"", cookie);         }     }     ])', 1), ('([1:/android/webkit/cts/WebViewDataDirTest.java]:[getInstance()]:[1]:method_text:[))) {             processA.run(TestCookieInAlternateDir.class, REMOTE_TIMEOUT_MS);         }     } }])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[ertFalse(outRanking.canBubble());             }         }          mListener.resetData();     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[                       Settings.Secure.NOTIFICATION_BADGING, originalBadging));         }     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[        assertEquals(0, outRanking.getSuppressedVisualEffects());             }         }     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[alFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }      }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[            assertNotNull(outRanking.getImportanceExplanation());             }         }     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[VITY_NEW_TASK);         mContext.startActivity(revokeIntent);         Thread.sleep(1000);     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[sn\'t granted"");         } catch (SecurityException e) {             // expected         }     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[fs[1].getId());         assertEquals(sbn1.getPackageName(), notifs[1].getPackageName());     }      ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[notification          assertEquals(mListener.mRankingMap, mListener.getCurrentRanking());     }     ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[getInstance()]:[1]:method_text:[lse)) {             fail(""Failed to cancel notification id="" + notificationId);         }     }     ])', 1), ('([3:/android/media/cts/MediaSession2ServiceTest.java]:[getInstance()]:[3]:method_text:[Session2Service.getInstance())                     .onUpdateNotification(null);         }     }     ])', 1), ('([1:/android/media/cts/MediaSession2ServiceTest.java]:[getInstance()]:[1]:method_text:[wrongIntent = new Intent(""wrongIntent"");         assertNull(service.onBind(wrongIntent));     }     ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[getInstance()]:[1]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);         }     }     ])', 1), ('([1:/android/text/cts/SpannableStringTest.java]:[getInstance()]:[1]:method_text:[ed.length(), AlignmentSpan.Standard.class);          assertEquals(0, copiedSpans.length);     }     ])', 1), ('([3:/android/text/method/cts/DateKeyListenerTest.java]:[getInstance()]:[3]:method_text:[assertNotSame(usListener1, irListener);         assertNotSame(usListener1, nullListener);     }     ])', 1), ('([1:/android/text/method/cts/DateKeyListenerTest.java]:[getInstance()]:[1]:method_text:[protected char[] getAcceptedChars() {             return super.getAcceptedChars();         }     } }])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[getInstance()]:[1]:method_text:[yncManager.getInstance());     }      // Static methods should be safe to call on non-UI threads    ])', 1), ('([1:/android/text/cts/Spannable_FactoryTest.java]:[getInstance()]:[1]:method_text:[(spannable instanceof SpannableString);         assertEquals(text, spannable.toString());     }     ])', 1), ('([1:/android/text/cts/Spannable_FactoryTest.java]:[getInstance()]:[1]:method_text:[   Factory factory = Spannable.Factory.getInstance();         factory.newSpannable(null);     }     ])', 1), ('([3:/android/text/cts/Spannable_FactoryTest.java]:[getInstance()]:[3]:method_text:[       assertNotNull(factory);         assertSame(factory, Spannable.Factory.getInstance());     } }])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[getInstance()]:[1]:method_text:[ mContentResolver.delete(uri, null, null);             assertEquals(1, result);         }     }     ])', 1), ('([2:/android/text/method/cts/TextKeyListenerTest.java]:[getInstance()]:[2]:method_text:[ertSame(listener1, listener2);          listener1.release();         listener2.release();     }     ])', 1), ('([1:/android/text/method/cts/TextKeyListenerTest.java]:[getInstance()]:[1]:method_text:[anChanged(text, Selection.SELECTION_END, 0, 0, 0, 0);          textKeyListener.release();     }     ])', 1), ('([1:/android/text/method/cts/TextKeyListenerTest.java]:[getInstance()]:[1]:method_text:[xtKeyListener.onSpanChanged(null, Selection.SELECTION_END, 0, 0, 0, 0);     }      @UiThreadTest    ])', 1), ('([5:/android/provider/cts/media/MediaStoreAudioTestHelper.java]:[getInstance()]:[5]:method_text:[ia.DATA, values.getAsString(Media.DATA) + "".5.mp3"");             return values;         }     }     ])', 1), ('([2:/com/android/cts/managedprofile/WipeDataNotificationTest.java]:[getInstance()]:[2]:method_text:[ com.android.cts.managedprofile/.WipeDataReceiver"";         SystemUtil.runShellCommand(cmd);     } }])', 1), ('([1:/android/security/NetworkSecurityPolicyTestBase.java]:[getInstance()]:[1]:method_text:[tted,                 NetworkSecurityPolicy.getInstance().isCleartextTrafficPermitted());     }     ])', 1), ('([1:/android/app/cts/BooleanTileServiceTest.java]:[getInstance()]:[1]:method_text:[HECK_DELAY);         }         assertEquals(state, ToggleableTestTileService.isConnected());     } }])', 1), ('([3:/android/text/method/cts/HideReturnsTransformationMethodTest.java]:[getInstance()]:[3]:method_text:[d1 = HideReturnsTransformationMethod.getInstance();         assertSame(method0, method1);     }     ])', 1), ('([3:/android/text/method/cts/PasswordTransformationMethodTest.java]:[getInstance()]:[3]:method_text:[tInt(mActivity.getContentResolver(), System.TEXT_SHOW_PASSWORD,                 on ? 1 : 0);     } }])', 1), ('([3:/android/text/method/cts/DateTimeKeyListenerTest.java]:[getInstance()]:[3]:method_text:[assertNotSame(usListener1, irListener);         assertNotSame(usListener1, nullListener);     }     ])', 1), (""([1:/android/text/method/cts/DateTimeKeyListenerTest.java]:[getInstance()]:[1]:method_text:[d.      * 7. Remove DateTimeKeyListener and Press '1' key, this key will not be accepted      */    ])"", 1), ('([1:/android/text/method/cts/DateTimeKeyListenerTest.java]:[getInstance()]:[1]:method_text:[protected char[] getAcceptedChars() {             return super.getAcceptedChars();         }     } }])', 1), ('([3:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[3]:method_text:[                         bitmap.getWidth(), navigationBarHeight);             }         }     }     ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[                   DimmingTestMode.NO_DIMMING_DIALOG));     }      @FlakyTest(bugId = 148768026)    ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[BottomNavigationBerHeight(),                         DimmingTestMode.NO_DIMMING_DIALOG));     }     ])', 1), ('([1:/android/view/inputmethod/cts/NavigationBarColorTest.java]:[getInstance()]:[1]:method_text:[omNavigationBerHeight(),                         DimmingTestMode.DIMMING_DIALOG_ABOVE_IME));     } }])', 1)]"	""	""	""	""	""
"269:784393) 9.11.3  . Identity Credential"	"9.11.3"	"C-0-3"	""	"[('android.security.identity.cts.EphemeralKeyTest', 2), ('android.security.identity.cts.ProvisioningTest', 2), ('android.security.identity.cts.IdentityApiTest', 1), ('android.security.identity.cts.UserAuthTest', 1), ('android.security.identity.cts.HkdfTest', 1), ('android.security.identity.cts.UtilUnitTests', 1), ('android.security.identity.cts.CreateItemsRequestTest', 1), ('android.security.identity.cts.AttestationTest', 1), ('android.security.identity.cts.X509CertificateSigningTest', 1)]"	"[('build', 5), ('getBytes', 3), ('printStackTrace', 3), ('length', 2), ('getExampleDrivingPrivilegesCbor', 2), ('end', 2), ('Builder', 2), ('DeviceLockSession', 1), ('LockScreenSession', 1), ('setLockCredential', 1), ('performDeviceLock', 1), ('sleepDevice', 1), ('getTargetContext', 1), ('Random', 1), ('toString', 1), ('createEphemeralKey', 1), ('ByteArrayOutputStream', 1), ('CborBuilder', 1), ('addArray', 1), ('addMap', 1), ('toByteArray', 1), ('iterator', 1), ('next', 1), ('getPublicKey', 1)]"	"[('CtsIdentityTestCases', 11)]"	""	"9.11.3/C-0-3"	"""C-0-3] The cryptographic operations needed to implement the Identity Credential System (e.g. the android.security.identity.* APIs) MUST be performed entirely in the trusted application and private key material MUST never leave the isolated execution environment unless specifically required by higher-level APIs (e.g. the createEphemeralKeyPair() method). """	"09110300.670003"	"android.security.identity createEphemeralKeyPair()"	""	""	""	"[('android.security.identity', 9), ('createEphemeralKeyPair()', 2)]"	""	"[('[android.security.identity.cts.UserAuthTest isDeviceLocked CtsIdentityTestCases]', 1), ('[android.security.identity.cts.EphemeralKeyTest isHalImplemented CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveMultipleTimes CtsIdentityTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/EphemeralKeyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/IdentityApiTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/UserAuthTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/UtilUnitTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/AttestationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/X509CertificateSigningTest.java', 1)]"	"[('/android/security/identity/cts/EphemeralKeyTest.java', 4), ('/android/security/identity/cts/ProvisioningTest.java', 4), ('/android/security/identity/cts/IdentityApiTest.java', 2), ('/android/security/identity/cts/UserAuthTest.java', 2), ('/android/security/identity/cts/HkdfTest.java', 2), ('/android/security/identity/cts/UtilUnitTests.java', 2), ('/android/security/identity/cts/CreateItemsRequestTest.java', 2), ('/android/security/identity/cts/AttestationTest.java', 2), ('/android/security/identity/cts/X509CertificateSigningTest.java', 2)]"	"[('([15:/android/security/identity/cts/IdentityApiTest.java]:[android.security.identity]:[15]:method_text:[quals;  public class IdentityApiTest {     private static final String TAG = ""IdentityApiTest"";     ])', 1), ('([11:/android/security/identity/cts/UserAuthTest.java]:[android.security.identity]:[11]:method_text:[) {             throw new RuntimeException(""Error creating auth-bound key"", e);         }     }     ])', 1), ('([1:/android/security/identity/cts/HkdfTest.java]:[android.security.identity]:[1]:method_text:[yte[] bytes = new byte[numBytes];         sRandom.nextBytes(bytes);         return bytes;     }     ])', 1), ('([1:/android/security/identity/cts/UtilUnitTests.java]:[android.security.identity]:[1]:method_text:[del.UnicodeString; import co.nstant.in.cbor.model.UnsignedInteger;  public class UtilUnitTests {    ])', 1), ('([4:/android/security/identity/cts/EphemeralKeyTest.java]:[android.security.identity]:[4]:method_text:[code. public class EphemeralKeyTest {     private static final String TAG = ""EphemeralKeyTest"";     ])', 1), ('([1:/android/security/identity/cts/EphemeralKeyTest.java]:[createEphemeralKeyPair()]:[1]:method_text:[             }             mMdlExpectedCounter += 1;             return plaintext;         }     } }])', 1), ('([16:/android/security/identity/cts/ProvisioningTest.java]:[android.security.identity]:[16]:method_text:[tStackTrace();             assertTrue(false);         }          return certificateChain;     }     ])', 1), ('([3:/android/security/identity/cts/ProvisioningTest.java]:[createEphemeralKeyPair()]:[3]:method_text:[;             assertTrue(false);         }          store.deleteCredentialByName(""test"");     }     ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[android.security.identity]:[1]:method_text:[t java.util.Map;  import co.nstant.in.cbor.CborException;  public class CreateItemsRequestTest {    ])', 1), ('([3:/android/security/identity/cts/AttestationTest.java]:[android.security.identity]:[3]:method_text:[STATION_APPLICATION_ID = 709;     public static final int KM_TAG_IDENTITY_CREDENTIAL_KEY = 721;     ])', 1), ('([1:/android/security/identity/cts/X509CertificateSigningTest.java]:[android.security.identity]:[1]:method_text:[09CertificateSigningTest {      private static final String TAG = ""X509CertificateSigningTest"";     ])', 1)]"	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-4"	""	""	""	""	""	"9.16/C-1-4"	"""C-1-4] MUST only migrate application data to the same application on the target device, with the same package name AND signing certificate. """	"09160000.670104"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-2"	""	""	""	""	""	"9.16/C-1-2"	"""C-1-2] MUST securely confirm the primary authentication on the source device and confirm with the user intent to copy the data on the source device before any data is transferred. """	"09160000.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-1"	""	""	""	""	""	"9.16/C-1-1"	"""C-1-1] MUST NOT initiate transfers of application data from devices on which the user has not set a primary authentication as described in 9.11.1 Secure Lock Screen and Authentication. """	"09160000.670101"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-5"	""	""	""	""	""	"9.16/C-1-5"	"""C-1-5] MUST show an indication that the source device has had data migrated by a device-to-device data migration in the settings menu. A user SHOULD NOT be able to remove this indication. <h2 id="""	"09160000.670105"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"274:790271) 9.16  . Application Data Migration"	"9.16"	"C-1-3"	""	""	""	""	""	"9.16/C-1-3"	"""C-1-3] MUST use security key attestation to ensure that both the source device and the target device in the device-to-device migration are legitimate Android devices and have a locked bootloader. """	"09160000.670103"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"243:715824) 9.5  . Multi"	"9.5"	"C-1-3"	""	""	""	""	""	"9.5/C-1-3"	"""C-1-3] MUST have separate and isolated shared application storage (a.k.a. /sdcard) directories for each user instance. """	"09050000.670103"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"243:715824) 9.5  . Multi"	"9.5"	"C-1-2"	""	""	""	""	""	"9.5/C-1-2"	"""C-1-2] MUST, for each user, implement a security model consistent with the Android platform security model as defined in Security and Permissions reference document in the APIs. """	"09050000.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-1"	""	"[('android.bugreport.cts.BugreportManagerTest', 4)]"	""	"[('CtsBugreportTestCases', 4)]"	""	"9.8.10/C-1-1"	"""C-1-1] MUST obtain user consent every time the System API BUGREPORT_MODE_TELEPHONY is called to generate a report and MUST NOT prompt the user to consent to all future requests from the application. """	"09081000.670101"	"BUGREPORT_MODE_TELEPHONY"	""	""	""	"[('BUGREPORT_MODE_TELEPHONY', 4)]"	""	"[('[android.bugreport.cts.BugreportManagerTest testTelephonyBugreport CtsBugreportTestCases]', 2), ('[android.bugreport.cts.BugreportManagerTest testFullBugreport CtsBugreportTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/bugreport/src/android/bugreport/cts/BugreportManagerTest.java', 4)]"	"[('/android/bugreport/cts/BugreportManagerTest.java', 6)]"	"[('([1:/android/bugreport/cts/BugreportManagerTest.java]:[BUGREPORT_MODE_TELEPHONY]:[1]:method_text:[telephony bugreport does not take any screenshot         assertThat(screenshot).isNull();     }     ])', 2), ('([1:/android/bugreport/cts/BugreportManagerTest.java]:[BUGREPORT_MODE_TELEPHONY]:[1]:method_text:[ringExtra(EXTRA_SCREENSHOT);         return new Pair<String, String>(bugreport, screenshot);     } }])', 2)]"	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-4"	""	"[('android.os.storage.cts.StorageStatsManagerTest', 22), ('android.app.cts.StatusBarNotificationTest', 7), ('android.media.cts.MediaSession2Test', 6), ('com.android.cts.net.hostside.MixedModesTest', 6), ('android.carrierapi.cts.CarrierApiTest', 6), ('android.jobscheduler.cts.JobThrottlingTest', 6), ('android.os.cts.WorkSourceTest', 4), ('android.view.cts.ViewTest', 4), ('android.app.usage.cts.UsageReportingTest', 4), ('com.android.cts.appaccessdata.AccessPrivateDataTest', 4), ('com.android.cts.blob.BlobStoreManagerTest', 4), ('com.android.cts.appcompat.CompatChangesTest', 4), ('android.security.cts.EffectBundleTest', 3), ('android.media.cts.VisualizerTest', 3), ('android.cts.statsd.validation.BatteryStatsValidationTests', 3), ('android.app.cts.BadProviderTest', 2), ('android.content.pm.cts.ApplicationInfoTest', 2), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 2), ('android.alarmmanager.cts.UidCapTests', 2), ('android.packageinstaller.tapjacking.cts.TapjackingTest', 2), ('android.media.cts.LoudnessEnhancerTest', 2), ('android.app.cts.InstrumentationTest', 2), ('android.app.cts.ActivityManagerMemoryClassTest', 2), ('android.media.cts.AudioRecordTest', 2), ('android.bluetooth.cts.ScanRecordTest', 2), ('android.content.cts.ClipboardManagerTest', 2), ('com.android.cts.sessioninspector.SessionInspectorTest', 2), ('com.android.cts.delegate.PermissionGrantDelegateTest', 1), ('android.media.tv.cts.TvViewTest', 1), ('android.media.cts.AudioRecordingConfigurationTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('com.android.server.cts.NotificationIncidentTest', 1), ('android.permission2.cts.ProtectedBroadcastsTest', 1), ('android.cts.statsd.atom.HostAtomTests', 1), ('android.os.cts.ProcessTest', 1), ('android.dumpsys.cts.BatteryStatsDumpsysTest', 1), ('android.permission.cts.PermissionUpdateListenerTest', 1), ('android.permission2.cts.RestrictedStoragePermissionTest', 1), ('android.content.pm.cts.ProviderInfoTest', 1), ('com.android.cts.appbinding.AppBindingHostTest', 1), ('android.thermal.cts.NativeThermalTest', 1), ('com.android.cts.certinstaller.CertSelectionDelegateTest', 1), ('android.permission.cts.LocationAccessCheckTest', 1), ('com.android.cts.delegate.NetworkLoggingDelegateTest', 1), ('com.android.cts.writeexternalstorageapp.WriteExternalStorageTest', 1), ('android.permission.cts.NoBroadcastPackageRemovedPermissionTest', 1), ('android.sharesheet.cts.CtsSharesheetDeviceTest', 1), ('com.android.cts.delegate.PackageAccessDelegateTest', 1), ('android.media.cts.AudioTrackTest', 1), ('android.provider.cts.settings.SettingsTest', 1), ('com.android.cts.delegate.EnableSystemAppDelegateTest', 1), ('com.android.cts.process.ProcessTest', 1), ('com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase', 1)]"	"[('size', 18), ('setUp', 18), ('myUserHandle', 17), ('getContext', 13), ('getInstrumentation', 13), ('myUid', 9), ('getPackageManager', 8), ('getOpPackageName', 8), ('getPackageName', 7), ('getTargetContext', 6), ('tearDown', 6), ('iterator', 6), ('next', 6), ('toString', 4), ('getSimpleName', 4), ('getLabel', 4), ('StringBuilder', 3), ('trim', 3), ('find', 3), ('getMethodName', 3), ('toPath', 3), ('WorkSource', 2), ('wakeUp', 2), ('getDevice', 2), ('waitForBroadcastIdle', 2), ('hasCellular', 2), ('getContentResolver', 2), ('getUiAutomation', 2), ('BroadcastReceiver', 2), ('getAction', 2), ('verifyDefaultValues', 1), ('getIdentifier', 1), ('alarmsCannotExceedLimit', 1), ('cancelAlarms', 1), ('clear', 1), ('deleteAlarmManagerConstants', 1), ('getMemoryClass', 1), ('build', 1), ('installApp', 1), ('unInstallApp', 1), ('hasAutoFillFeature', 1), ('run', 1), ('newSingleThreadExecutor', 1), ('waitForIdle', 1), ('start', 1), ('quit', 1), ('getPhoneCount', 1), ('noNotificationIfBlamerNotSystemOrLocationProvider', 1), ('countDown', 1), ('init', 1), ('meetsResolutionRequirements', 1), ('createMatchingIntent', 1), ('stream', 1), ('toSet', 1), ('queryCratesForUid_noCratedFolder_shouldBeEmpty', 1), ('queryCratesForUser_noCratedFolder_shouldBeEmpty', 1), ('queryCratesForPackage_noCratedFolder_shouldBeEmpty', 1), ('queryCratesForUid_addOneDirectory_shouldIncreasingOneCrate', 1), ('queryCratesForUser_addOneDirectory_shouldIncreasingOneCrate', 1), ('queryCratesForPackage_addOneDirectory_shouldIncreasingOneCrate', 1), ('queryCratesForUid_withoutSetCrateInfo_labelShouldTheSameWithFolderName', 1), ('queryCratesForUser_withoutSetCrateInfo_labelShouldTheSameWithFolderName', 1), ('queryCratesForPackage_withoutSetCrateInfo_labelShouldTheSameWithFolderName', 1), ('queryCratesForUid_withoutSetCrateInfo_expirationShouldBeZero', 1), ('queryCratesForUser_withoutSetCrateInfo_expirationShouldBeZero', 1), ('queryCratesForPackage_withoutSetCrateInfo_expirationShouldBeZero', 1), ('queryCratesForUid_removeCratedDir_shouldDecreaseTheNumberOfCrates', 1), ('queryCratesForPackage_removeCratedDir_shouldDecreaseTheNumberOfCrates', 1), ('queryCratesForUser_removeCratedDir_shouldDecreaseTheNumberOfCrates', 1), ('queryCratesForUid_createDeepPath_shouldCreateOneCrate', 1), ('queryCratesForUser_createDeepPath_shouldCreateOneCrate', 1), ('queryCratesForPackage_createDeepPath_shouldCreateOneCrate', 1), ('RequiredPropertiesRule', 1), ('MeterednessConfigurationRule', 1), ('getConnectivityManager', 1), ('bind', 1), ('unbind', 1), ('getResultData', 1), ('getRestrictBackgroundStatus', 1), ('assertBackgroundState', 1), ('assertForegroundNetworkAccess', 1), ('assertForegroundState', 1), ('assertForegroundServiceNetworkAccess', 1), ('assertForegroundServiceState', 1), ('assertsForegroundAlwaysHasNetworkAccess', 1), ('resetBatteryStatus', 1), ('unplugDevice', 1), ('plugInUsb', 1)]"	"[('CtsOsHostTestCases', 27), ('CtsMediaTestCases', 15), ('CtsAndroidAppTestCases', 13), ('CtsCarrierApiTestCases', 6), ('CtsJobSchedulerTestCases', 6), ('CtsContentTestCases', 5), ('CtsViewTestCases', 4), ('CtsUsageStatsTestCases', 4), ('CtsBlobStoreTestCases', 4), ('CtsSecurityTestCases', 3), ('CtsPermissionTestCases', 3), ('CtsPermission2TestCases', 2), ('CtsAlarmManagerTestCases', 2), ('CtsPackageInstallerTapjackingTestCases', 2), ('CtsBluetoothTestCases', 2), ('CtsTvTestCases', 1), ('CtsThermalTestCases', 1), ('CtsSharesheetTestCases', 1), ('CtsProviderTestCases', 1)]"	""	"9.8.10/C-1-4"	"""C-1-4] MUST NOT include the following in the generated reports: Any kind of information unrelated to connectivity debugging. Any kind of user-installed application traffic logs or detailed profiles of user-installed applications/packages (UIDs are okay, package names are not). MAY include additional information that is not associated with any user identity. (e.g. vendor logs). If device implementations include additional information (e.g vendor logs) in the bug report and that information has privacy/security/battery/storage/memory impact, they: """	"09081000.670104"	"UID"	""	""	""	"[('UID', 136)]"	""	"[('[android.os.storage.cts.StorageStatsManagerTest getExpirationMillis CtsOsHostTestCases]', 3), ('[com.android.cts.delegate.PermissionGrantDelegateTest testCannotAccessApis None]', 1), ('[android.os.cts.WorkSourceTest testAddWsUnordered CtsOsHostTestCases]', 1), ('[android.os.cts.WorkSourceTest testCombineMultiSomeSameUidsNames CtsOsHostTestCases]', 1), ('[android.os.cts.WorkSourceTest testWithoutNames CtsOsHostTestCases]', 1), ('[android.media.tv.cts.TvViewTest testOnUnhandledInputEventListener CtsTvTestCases]', 1), ('[android.app.cts.BadProviderTest testExitOnCreate CtsAndroidAppTestCases]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testParcel CtsMediaTestCases]', 1), ('[android.content.pm.cts.ApplicationInfoTest testWriteToParcel CtsContentTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrant_developmentPermission None]', 1), ('[android.view.cts.ViewTest testOverlappingRendering CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView CtsViewTestCases]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag CtsViewTestCases]', 1), ('[com.android.server.cts.NotificationIncidentTest testRankingConfig None]', 1), ('[android.media.cts.MediaSession2Test testSession2Token CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2Test testGetConnectedControllers_newController CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2Test testSession2Token_writeToParcel CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2Test testCallback_onConnect_onDisconnect CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2Test testCallback_onPostConnect_connected CtsMediaTestCases]', 1), ('[android.media.cts.MediaSession2Test testCancelSessionCommand CtsMediaTestCases]', 1), ('[android.security.cts.EffectBundleTest testDownmix_setParameter CtsSecurityTestCases]', 1), ('[android.security.cts.EffectBundleTest testPresetReverb_setParameter CtsSecurityTestCases]', 1), ('[android.media.cts.VisualizerTest test4_1MeasurePeakRms CtsMediaTestCases]', 1), ('[android.media.cts.VisualizerTest test4_2MeasurePeakRmsLongMP3 CtsMediaTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testUsageReportingMissingStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testMultipleTokenMissingStop CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.UsageReportingTest testSplitscreenSameTokenTwoMissedStop CtsUsageStatsTestCases]', 1), ('[com.android.cts.net.hostside.MixedModesTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testDataAndBatterySaverModes_meteredNetwork None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testDataAndBatterySaverModes_nonMeteredNetwork None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testDozeAndAppIdle_appIdleWhitelist None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testAppIdleAndDoze_tempPowerSaveAndAppIdleWhitelists None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testAppIdleAndBatterySaver_tempPowerSaveAndAppIdleWhitelists None]', 1), ('[android.appsecurity.cts.listeningports.ListeningPortsTest testNoAccessibleListeningPorts None]', 1), ('[android.cts.statsd.atom.HostAtomTests testDumpsysStats None]', 1), ('[android.packageinstaller.tapjacking.cts.TapjackingTest isScreenOn CtsPackageInstallerTapjackingTestCases]', 1), ('[android.packageinstaller.tapjacking.cts.TapjackingTest testTapsDroppedWhenObscured CtsPackageInstallerTapjackingTestCases]', 1), ('[android.media.cts.LoudnessEnhancerTest test3_0MeasureGainChange CtsMediaTestCases]', 1), ('[android.app.cts.InstrumentationTest testInvokeMenuActionSync CtsAndroidAppTestCases]', 1), ('[android.app.cts.InstrumentationTest testSendKeySync CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerMemoryClassTest ActivityManagerMemoryClassTest CtsAndroidAppTestCases]', 1), ('[android.app.cts.ActivityManagerMemoryClassTest testGetMemoryClass CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testGetUid CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testIsClearable_notClearableOngoingEvent CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testIsGroup_notifGroup CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testIsGroup_sortKey CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testIsOngoing_ongoingEvent CtsAndroidAppTestCases]', 1), ('[android.app.cts.StatusBarNotificationTest testClone CtsAndroidAppTestCases]', 1), ('[android.os.cts.ProcessTest testMiscMethods CtsOsHostTestCases]', 1), ('[android.dumpsys.cts.BatteryStatsDumpsysTest testBatterystatsOutput None]', 1), ('[android.media.cts.AudioRecordTest testRecordNoDataForIdleUids CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration CtsMediaTestCases]', 1), ('[android.bluetooth.cts.ScanRecordTest testParser CtsBluetoothTestCases]', 1), ('[android.permission.cts.PermissionUpdateListenerTest LatchWithPermissionsChangedListener CtsPermissionTestCases]', 1), ('[android.permission2.cts.RestrictedStoragePermissionTest testStorageTargetingSdk30CannotPreserveLegacyOnInstall CtsPermission2TestCases]', 1), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessProcQtaguidTrafficStatsFailed None]', 1), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testAccessPrivateTrafficStats None]', 1), ('[com.android.cts.appaccessdata.AccessPrivateDataTest testTrafficStatsStatsUidSelf None]', 1), ('[android.content.pm.cts.ProviderInfoTest testProviderInfo CtsContentTestCases]', 1), ('[android.content.cts.ClipboardManagerTest testPrimaryClipNotAvailableWithoutFocus CtsContentTestCases]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[android.thermal.cts.NativeThermalTest nativeTestRegisterThermalStatusListener CtsThermalTestCases]', 1), ('[com.android.cts.certinstaller.CertSelectionDelegateTest finish None]', 1), ('[com.android.cts.sessioninspector.SessionInspectorTest testOnlyOwnerCanSee None]', 1), ('[android.carrierapi.cts.CarrierApiTest isSimCardPresent CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testVoiceMailNumber CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testCreateAndRemoveSubscriptionGroup CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testAddSubscriptionToExistingGroupForMultipleSims CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testAddSubscriptionToExistingGroupForEsim CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.CarrierApiTest testSendEnvelopeWithStatus CtsCarrierApiTestCases]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryMountPoints None]', 1), ('[android.permission.cts.NoBroadcastPackageRemovedPermissionTest testSendOrRemoveStickyBroadcast CtsPermissionTestCases]', 1), ('[com.android.cts.delegate.PackageAccessDelegateTest testCannotAccessApis None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest isDeviceIdleMode CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobAllowedWhenUidActive CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testUidActiveBypassesStandby CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testUidActiveBypassesBatterySaverOn CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testBatterySaverOnThenUidActive CtsJobSchedulerTestCases]', 1), ('[android.media.cts.AudioTrackTest testMaxAudioTracks CtsMediaTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease CtsBlobStoreTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testCheckWriteSettingsOperation CtsProviderTestCases]', 1), ('[android.os.storage.cts.StorageStatsManagerTest TestName CtsOsHostTestCases]', 1), ('[android.os.storage.cts.StorageStatsManagerTest dropShellPermissionIdentity CtsOsHostTestCases]', 1), ('[android.os.storage.cts.StorageStatsManagerTest queryCratesForUid_withOtherUid_shouldRiseSecurityIssueException CtsOsHostTestCases]', 1), ('[android.os.storage.cts.StorageStatsManagerTest queryCratesForUser_withOtherUid_shouldRiseSecurityIssueException CtsOsHostTestCases]', 1), ('[android.os.storage.cts.StorageStatsManagerTest queryCratesForPackage_withOtherUid_shouldRiseSecurityIssueException CtsOsHostTestCases]', 1), ('[com.android.cts.appcompat.CompatChangesTest isChangeEnabledPackageName_changeEnabled None]', 1), ('[com.android.cts.appcompat.CompatChangesTest isChangeEnabledUid_changeEnabled None]', 1), ('[com.android.cts.appcompat.CompatChangesTest isChangeEnabledPackageName_changeDisabled None]', 1), ('[com.android.cts.appcompat.CompatChangesTest isChangeEnabledUid_changeDisabled None]', 1), ('[com.android.cts.delegate.EnableSystemAppDelegateTest testCannotAccessApis None]', 1), ('[com.android.cts.process.ProcessTest testUid None]', 1), ('[com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase finishActivity None]', 1), ('[android.cts.statsd.validation.BatteryStatsValidationTests testServiceStartCount None]', 1), ('[android.cts.statsd.validation.BatteryStatsValidationTests testServiceLaunchCount None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/storage/cts/StorageStatsManagerTest.java', 22), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/StatusBarNotificationTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaSession2Test.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/MixedModesTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 6), ('/home/gpoor/cts-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/WorkSourceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageReportingTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/AppAccessData/src/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 4), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/appcompat/compatchanges/app/src/com/android/cts/appcompat/CompatChangesTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EffectBundleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/validation/BatteryStatsValidationTests.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/ApplicationInfoTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/UidCapTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/packageinstaller/tapjacking/src/android/packageinstaller/tapjacking/cts/TapjackingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/LoudnessEnhancerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/InstrumentationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerMemoryClassTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ClipboardManagerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/SessionInspector/src/com/android/cts/sessioninspector/SessionInspectorTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PermissionGrantDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordingConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/NotificationIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/ProtectedBroadcastsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/HostAtomTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/ProcessTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/PermissionUpdateListenerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/ProviderInfoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/libthermalndk/src/android/thermal/cts/NativeThermalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/sharesheet/src/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PackageAccessDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/SettingsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/ProcessTest/src/com/android/cts/process/ProcessTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java', 1)]"	"[('/android/os/storage/cts/StorageStatsManagerTest.java', 23), ('/android/app/cts/StatusBarNotificationTest.java', 8), ('/android/media/cts/MediaSession2Test.java', 7), ('/com/android/cts/net/hostside/MixedModesTest.java', 7), ('/android/carrierapi/cts/CarrierApiTest.java', 7), ('/android/jobscheduler/cts/JobThrottlingTest.java', 7), ('/android/os/cts/WorkSourceTest.java', 5), ('/android/view/cts/ViewTest.java', 5), ('/android/app/usage/cts/UsageReportingTest.java', 5), ('/com/android/cts/appaccessdata/AccessPrivateDataTest.java', 5), ('/com/android/cts/blob/BlobStoreManagerTest.java', 5), ('/com/android/cts/appcompat/CompatChangesTest.java', 5), ('/android/security/cts/EffectBundleTest.java', 4), ('/android/media/cts/VisualizerTest.java', 4), ('/android/cts/statsd/validation/BatteryStatsValidationTests.java', 4), ('/android/app/cts/BadProviderTest.java', 3), ('/android/content/pm/cts/ApplicationInfoTest.java', 3), ('/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 3), ('/android/alarmmanager/cts/UidCapTests.java', 3), ('/android/packageinstaller/tapjacking/cts/TapjackingTest.java', 3), ('/android/media/cts/LoudnessEnhancerTest.java', 3), ('/android/app/cts/InstrumentationTest.java', 3), ('/android/app/cts/ActivityManagerMemoryClassTest.java', 3), ('/android/media/cts/AudioRecordTest.java', 3), ('/android/bluetooth/cts/ScanRecordTest.java', 3), ('/android/content/cts/ClipboardManagerTest.java', 3), ('/com/android/cts/sessioninspector/SessionInspectorTest.java', 3), ('/com/android/cts/delegate/PermissionGrantDelegateTest.java', 2), ('/android/media/tv/cts/TvViewTest.java', 2), ('/android/media/cts/AudioRecordingConfigurationTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/com/android/server/cts/NotificationIncidentTest.java', 2), ('/android/permission2/cts/ProtectedBroadcastsTest.java', 2), ('/android/cts/statsd/atom/HostAtomTests.java', 2), ('/android/os/cts/ProcessTest.java', 2), ('/android/dumpsys/cts/BatteryStatsDumpsysTest.java', 2), ('/android/permission/cts/PermissionUpdateListenerTest.java', 2), ('/android/permission2/cts/RestrictedStoragePermissionTest.java', 2), ('/android/content/pm/cts/ProviderInfoTest.java', 2), ('/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/android/thermal/cts/NativeThermalTest.java', 2), ('/com/android/cts/certinstaller/CertSelectionDelegateTest.java', 2), ('/android/permission/cts/LocationAccessCheckTest.java', 2), ('/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 2), ('/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 2), ('/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java', 2), ('/android/sharesheet/cts/CtsSharesheetDeviceTest.java', 2), ('/com/android/cts/delegate/PackageAccessDelegateTest.java', 2), ('/android/media/cts/AudioTrackTest.java', 2), ('/android/provider/cts/settings/SettingsTest.java', 2), ('/com/android/cts/delegate/EnableSystemAppDelegateTest.java', 2), ('/com/android/cts/process/ProcessTest.java', 2), ('/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java', 2)]"	"[('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[n so that it does not affect other tests.             view.cancelDragAndDrop();         }     }     ])', 2), ('([1:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[1]:method_text:[tion,                         mUserHandle, POST_TIME);         assertTrue(sbn.isGroup());     }     ])', 2), ('([2:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[2]:method_text:[     securityException = e;         }          assertThat(securityException).isNotNull();     }     ])', 2), ('([2:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[2]:method_text:[le());         assertThat(newCollection.size()).isEqualTo(originalCollection.size() + 1);     }     ])', 2), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[assertThat(crateInfos.iterator().next().getLabel()).isEqualTo(mTestName.getMethodName());     }     ])', 2), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[));          assertThat(crateInfos.iterator().next().getExpirationMillis()).isEqualTo(0);     }     ])', 2), ('([3:/com/android/cts/delegate/PermissionGrantDelegateTest.java]:[UID]:[3]:method_text:[   mDpm.getPermissionGrantState(null, TEST_APP_PKG, TEST_PERMISSION);                 });     }     ])', 1), ('([41:/android/os/cts/WorkSourceTest.java]:[UID]:[41]:method_text:[eName(i))) {                 failWorkSource(op, ws, uids, names);             }         }     }     ])', 1), ('([5:/android/os/cts/WorkSourceTest.java]:[UID]:[5]:method_text:[              makeStringArray(expected), makeStringArray(newbs), makeStringArray(gones));     }     ])', 1), ('([6:/android/os/cts/WorkSourceTest.java]:[UID]:[6]:method_text:[keStringArray(lhs), makeStringArray(rhs),                 makeStringArray(result), diff);     }     ])', 1), ('([7:/android/os/cts/WorkSourceTest.java]:[UID]:[7]:method_text:[rksource"");         } catch (IllegalArgumentException e) {             // Expected         }     } }])', 1), ('([2:/android/media/tv/cts/TvViewTest.java]:[UID]:[2]:method_text:[verifyKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_GUIDE), unhandledEvent);     }     ])', 1), ('([1:/android/app/cts/BadProviderTest.java]:[UID]:[1]:method_text:[g TEST_PACKAGE_NAME = ""com.android.cts.stubbad"";     private static final int WAIT_TIME = 2000;     ])', 1), ('([19:/android/app/cts/BadProviderTest.java]:[UID]:[19]:method_text:[               uidWatcher.finish();             }             worker.quitSafely();         }     } }])', 1), ('([5:/android/media/cts/AudioRecordingConfigurationTest.java]:[UID]:[5]:method_text:[       fail(""Exception thrown during reflection on config privileged fields"" + e);         }     } }])', 1), ('([2:/android/content/pm/cts/ApplicationInfoTest.java]:[UID]:[2]:method_text:[ctivityName);         assertEquals(mApplicationInfo.descriptionRes, info.descriptionRes);     }     ])', 1), ('([1:/android/content/pm/cts/ApplicationInfoTest.java]:[UID]:[1]:method_text:[tionInfo.uiOptions);         assertEquals(CATEGORY_UNDEFINED, mApplicationInfo.category);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[1]:method_text:[YSTEM, because      * network rules for this user will affect UID 0.      */     @RequiresDevice    ])', 1), ('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());         return shadowBuilder;     }     ])', 1), ('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[uInflater getMenuInflater() {                     return null;                 }             };     ])', 1), ('([4:/com/android/server/cts/NotificationIncidentTest.java]:[UID]:[4]:method_text:[() <= VISIBILITY_PUBLIC));     }      // Tests default state: zen mode is a valid/expected value    ])', 1), ('([2:/android/media/cts/MediaSession2Test.java]:[UID]:[2]:method_text:[token.describeContents());             assertTrue(token.getExtras().isEmpty());         }     }     ])', 1), ('([2:/android/media/cts/MediaSession2Test.java]:[UID]:[2]:method_text:[          break;                 }             }             assertTrue(found);         }     }     ])', 1), ('([2:/android/media/cts/MediaSession2Test.java]:[UID]:[2]:method_text:[xtrasOut);             assertEquals(TEST_VALUE, extrasOut.getString(TEST_KEY));         }     }     ])', 1), ('([2:/android/media/cts/MediaSession2Test.java]:[UID]:[2]:method_text:[ession);             assertEquals(controllerInfo, sessionCallback.mController);         }     }     ])', 1), ('([2:/android/media/cts/MediaSession2Test.java]:[UID]:[2]:method_text:[           assertEquals(Process.myUid(), sessionCallback.mController.getUid());         }     }     ])', 1), ('([10:/android/media/cts/MediaSession2Test.java]:[UID]:[10]:method_text:[rray(int size) {                 return new CustomParcelable[size];             }         };     } }])', 1), ('([1:/android/permission2/cts/ProtectedBroadcastsTest.java]:[UID]:[1]:method_text:[K_OTHERS"",     };      /**      * Verify that protected broadcast actions can\'t be sent.      */    ])', 1), ('([1:/android/security/cts/EffectBundleTest.java]:[UID]:[1]:method_text:[ intSize = 4;      //Testing security bug: 32436341     @SecurityTest(minPatchLevel = ""2017-01"")    ])', 1), ('([2:/android/security/cts/EffectBundleTest.java]:[UID]:[2]:method_text:[RAM_TYPE = 0;      //Testing security bug: 63526567     @SecurityTest(minPatchLevel = ""2017-10"")    ])', 1), ('([7:/android/security/cts/EffectBundleTest.java]:[UID]:[7]:method_text:[rraycopy(a, 0, b, offs, a.length);             offs += a.length;         }         return b;     } }])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[UID]:[1]:method_text:[ctor     //----------------------------------      //Test case 0.0: test constructor and release    ])', 1), ('([2:/android/media/cts/VisualizerTest.java]:[UID]:[2]:method_text:[seVisualizer();         }     }      //Test case 4.2: test measurement of peak / RMS in Long MP3    ])', 1), ('([2:/android/media/cts/VisualizerTest.java]:[UID]:[2]:method_text:[ catch(InterruptedException e) {             }             mListenerThread = null;         }     } }])', 1), ('([5:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[5]:method_text:[0 = mTargetPackage + ""/"" + TOKEN_0;         mFullToken1 = mTargetPackage + ""/"" + TOKEN_1;     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[_COMMAND);         Thread.sleep(1000);          assertAppOrTokenUsed(mFullToken0, false);     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[sertAppOrTokenUsed(mFullToken0, false);         assertAppOrTokenUsed(mFullToken1, false);     }     ])', 1), ('([1:/android/app/usage/cts/UsageReportingTest.java]:[UID]:[1]:method_text:[    break;                 }             }             return found == expected;         });     } }])', 1), ('([2:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[2]:method_text:[etworks.      */     @RequiredProperties({DATA_SAVER_MODE, BATTERY_SAVER_MODE, METERED_NETWORK})    ])', 1), ('([9:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[9]:method_text:[rks.      */     @RequiredProperties({DATA_SAVER_MODE, BATTERY_SAVER_MODE, NON_METERED_NETWORK})    ])', 1), ('([9:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[9]:method_text:[saver modes      * are enabled.      */     @RequiredProperties({DOZE_MODE, BATTERY_SAVER_MODE})    ])', 1), ('([3:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[3]:method_text:[     setDozeMode(false);         }     }      @RequiredProperties({APP_STANDBY_MODE, DOZE_MODE})    ])', 1), ('([2:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[2]:method_text:[hitelist(mUid);         }     }      @RequiredProperties({APP_STANDBY_MODE, BATTERY_SAVER_MODE})    ])', 1), ('([2:/com/android/cts/net/hostside/MixedModesTest.java]:[UID]:[2]:method_text:[             setBatterySaverMode(false);             removeAppIdleWhitelist(mUid);         }     } }])', 1), ('([3:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[UID]:[3]:method_text:[e file and the boolean      * values are received as parameters from the host side test.      */    ])', 1), ('([24:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[UID]:[24]:method_text:[2*i + 1), 16));             }             return InetAddress.getByAddress(retval);         }     } }])', 1), ('([6:/android/cts/statsd/atom/HostAtomTests.java]:[UID]:[6]:method_text:[sertThat(atom.getState().getNumber()).isEqualTo(AppBreadcrumbReported.State.START_VALUE);     }     ])', 1), ('([2:/android/alarmmanager/cts/UidCapTests.java]:[UID]:[2]:method_text:[etTargetContext();         mAlarmManager = mContext.getSystemService(AlarmManager.class);     }     ])', 1), ('([5:/android/alarmmanager/cts/UidCapTests.java]:[UID]:[5]:method_text:[ts() {         SystemUtil.runShellCommand(""settings delete global alarm_manager_constants"");     } }])', 1), ('([9:/android/packageinstaller/tapjacking/cts/TapjackingTest.java]:[UID]:[9]:method_text:[ame, id);         return mUiDevice.wait(Until.findObject(selector), WAIT_FOR_UI_TIMEOUT);     }     ])', 1), ('([3:/android/packageinstaller/tapjacking/cts/TapjackingTest.java]:[UID]:[3]:method_text:[           }                     base.evaluate();                 }             };         }     } }])', 1), ('([1:/android/media/cts/LoudnessEnhancerTest.java]:[UID]:[1]:method_text:[ctor     //----------------------------------      //Test case 0.0: test constructor and release    ])', 1), ('([2:/android/media/cts/LoudnessEnhancerTest.java]:[UID]:[2]:method_text:[r() {         if (mLE != null) {             mLE.release();             mLE = null;         }     } ])', 1), ('([1:/android/app/cts/InstrumentationTest.java]:[UID]:[1]:method_text:[ion.waitForIdleSync();              assertEquals(resId, mActivity.getMenuID());         }     }     ])', 1), ('([1:/android/app/cts/InstrumentationTest.java]:[UID]:[1]:method_text:[d onCreate() {             super.onCreate();             mIsOnCreateCalled = true;         }     } }])', 1), ('([1:/android/app/cts/ActivityManagerMemoryClassTest.java]:[UID]:[1]:method_text:[creen layout size "" + screenSize);            }         }     }      @CddTest(requirement=""3.7"")    ])', 1), ('([7:/android/app/cts/ActivityManagerMemoryClassTest.java]:[UID]:[7]:method_text:[             + "" specified by the memory class."", Activity.RESULT_OK, activity.getResult());     } }])', 1), ('([4:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[4]:method_text:[(PKG, OP_PKG, ID, TAG, UID, 0, 0, mNotification,                 mUserHandle, POST_TIME);     }     ])', 1), ('([3:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[3]:method_text:[public void testGetUid() {         assertEquals(UID, mSbn.getUid());     }      ])', 1), ('([1:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[1]:method_text:[                         mUserHandle, POST_TIME);         assertFalse(sbn.isClearable());     }     ])', 1), ('([1:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[1]:method_text:[on,                         mUserHandle, POST_TIME);         assertTrue(sbn.isOngoing());     }     ])', 1), ('([2:/android/app/cts/StatusBarNotificationTest.java]:[UID]:[2]:method_text:[ification();         assertEquals(""foo"", notification.extras.get(Notification.EXTRA_TITLE));     } }])', 1), (""([6:/android/os/cts/ProcessTest.java]:[UID]:[6]:method_text:[and any additional processes created by that app be able to kill each other's processes.      */    ])"", 1), ('([8:/android/dumpsys/cts/BatteryStatsDumpsysTest.java]:[UID]:[8]:method_text:[     * Tests the output of ""dumpsys gfxinfo framestats"".      *      * @throws Exception      */    ])', 1), ('([8:/android/media/cts/AudioRecordTest.java]:[UID]:[8]:method_text:[lease();             }             resetMyUidState(packageName, currentUserId);         }     }     ])', 1), ('([6:/android/media/cts/AudioRecordTest.java]:[UID]:[6]:method_text:[nstrumentation().getTargetContext();     }      /*      * Microphone Direction API tests      */    ])', 1), (""([1:/android/bluetooth/cts/ScanRecordTest.java]:[UID]:[1]:method_text:[h.BluetoothTestRunner'  */ public class ScanRecordTest extends AndroidTestCase {      @SmallTest    ])"", 1), ('([33:/android/bluetooth/cts/ScanRecordTest.java]:[UID]:[33]:method_text:[).get(uuid2));         TestUtils.assertArrayEquals(serviceData, data.getServiceData(uuid2));     } }])', 1), ('([6:/android/permission/cts/PermissionUpdateListenerTest.java]:[UID]:[6]:method_text:[missionsChangeListener(latch));         assertThat(latch.getCount()).isEqualTo((long) 0);     }     ])', 1), ('([6:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[UID]:[6]:method_text:[     @After     public void uninstallApp() {         runShellCommand(""pm uninstall "" + PKG);     } }])', 1), ('([2:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[UID]:[2]:method_text:[accessed. It includes file      * and detailed traffic stats.      * @throws IOException      */    ])', 1), ('([4:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[UID]:[4]:method_text:[ot be able to read qtaguid profile"",             new File(QTAGUID_STATS_FILE).canRead());     }     ])', 1), ('([11:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[UID]:[11]:method_text:[erAppUid));         assertEquals(UNSUPPORTED, TrafficStats.getUidTxPackets(otherAppUid));     }     ])', 1), ('([19:/com/android/cts/appaccessdata/AccessPrivateDataTest.java]:[UID]:[19]:method_text:[fficStats.getUidTxBytes(uid));         assertEquals(txp, TrafficStats.getUidTxPackets(uid));     } }])', 1), ('([1:/android/content/pm/cts/ProviderInfoTest.java]:[UID]:[1]:method_text:[     checkProviderInfoMethods(current, p);                 break;             }         }     }     ])', 1), ('([6:/android/content/cts/ClipboardManagerTest.java]:[UID]:[6]:method_text:[strumentation());         mUiDevice.wakeUp();         launchActivity(MockActivity.class);     }     ])', 1), ('([3:/android/content/cts/ClipboardManagerTest.java]:[UID]:[3]:method_text:[text.getPackageManager().hasSystemFeature(                 PackageManager.FEATURE_AUTOFILL);     } }])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[UID]:[2]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.      */    ])', 1), ('([7:/android/thermal/cts/NativeThermalTest.java]:[UID]:[7]:method_text:[      /**      * Confirm that we can get thermal status.      *      * @throws Exception      */    ])', 1), ('([6:/com/android/cts/certinstaller/CertSelectionDelegateTest.java]:[UID]:[6]:method_text:[ void tearDown() throws Exception {         mActivity.finish();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/sessioninspector/SessionInspectorTest.java]:[UID]:[1]:method_text:[port java.util.concurrent.TimeUnit;  @RunWith(JUnit4.class) public class SessionInspectorTest {     ])', 1), ('([2:/com/android/cts/sessioninspector/SessionInspectorTest.java]:[UID]:[2]:method_text:[         throw (Exception) result.getSerializable(""error"");         }         return result;     } }])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[             ""Visit https://source.android.com/devices/tech/config/uicc.html"");         }     }     ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[ptionsFromGroup(List, ParcelUuid)} correctly remove      * the given subscription group.      */    ])', 1), ('([7:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[7]:method_text:[ager.getSubscriptionsInGroup(uuid);             assertTrue(infoList.isEmpty());         }     }     ])', 1), ('([6:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[6]:method_text:[sting group.      *      * This test required the device has more than one subscription.      */    ])', 1), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[5]:method_text:[oolean, int)} correctly      * set the opportunistic property of the given subscription.      */    ])', 1), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[5]:method_text:[n {             return mReceiveLatch.await(30, TimeUnit.SECONDS);         }     }      @Suppress    ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[UID]:[1]:method_text:[).getPackageUid(TEST_APP_PKG, 0));         });         assertNull(getNotification(true));     }     ])', 1), ('([3:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[UID]:[3]:method_text:[tDown = new CountDownLatch(1);         NetworkLogsReceiver.mExceptionFromReceiver = null;     }     ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[UID]:[1]:method_text:[              assertDirNoWriteAccess(userPath);                 }             }         }     }     ])', 1), ('([1:/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java]:[UID]:[1]:method_text:[:      *   {@link android.Manifest.permission#BROADCAST_PACKAGE_REMOVED}.      */     @SmallTest    ])', 1), ('([3:/android/sharesheet/cts/CtsSharesheetDeviceTest.java]:[UID]:[3]:method_text:[    * total run time low, jam as many tests are possible into each visible test portion.      */    ])', 1), ('([4:/com/android/cts/delegate/PackageAccessDelegateTest.java]:[UID]:[4]:method_text:[agesSuspended(null, new String[] {TEST_APP_PKG}, true /* suspend */);                 });     }     ])', 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[1]:method_text:[ate static final long SHELL_TIMEOUT = 3_000;     // TODO: mark Settings.System.SCREEN_OFF_TIMEOUT as])', 1), ('([11:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[11]:method_text:[wer supply is on.             BatteryUtils.runDumpsysBatterySetPluggedIn(true);         }     }     ])', 1), (""([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[1]:method_text:[WAIT_TIMEOUT));     }      @RequiresDevice // Emulators don't always have access to wifi/network    ])"", 1), ('([2:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[2]:method_text:[iled to start in NEVER standby"",                 mTestAppInterface.awaitJobStart(4_000));     }     ])', 1), ('([2:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[2]:method_text:[o start with battery saver OFF"",                 mTestAppInterface.awaitJobStart(3_000));     }     ])', 1), ('([20:/android/jobscheduler/cts/JobThrottlingTest.java]:[UID]:[20]:method_text:[sTrue();     }      private interface Condition {         boolean isTrue() throws Exception;     } }])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[UID]:[2]:method_text:[ble to create "" + MAX_TRACKS + "" tracks - that\'s too many!"",             n < MAX_TRACKS);     }     ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[1]:method_text:[CE_SEC = 2;      private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;      // TODO: Make it a])', 1), ('([33:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[33]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                 .isEqualTo(0L);     }     ])', 1), ('([29:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[29]:method_text:[    .isEqualTo(0L);         } finally {             serviceConnection.unbind();         }     }     ])', 1), ('([26:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[26]:method_text:[reStatsForUid.getDataBytes())                 .isEqualTo(0L);          blobData.delete();     }     ])', 1), ('([10:/android/provider/cts/settings/SettingsTest.java]:[UID]:[10]:method_text:[   private Context getContext() {         return InstrumentationRegistry.getTargetContext();     } }])', 1), ('([5:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[5]:method_text:[  */     @After     public void tearDown() throws Exception {         cleanAllOfCrates();     }     ])', 1), ('([7:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[7]:method_text:[          uiAutomation.dropShellPermissionIdentity();         }         return crateInfos;     }    ])', 1), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[            Process.myUserHandle());          assertThat(collection.size()).isEqualTo(0);     }     ])', 1), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[kageName(), Process.myUserHandle());          assertThat(collection.size()).isEqualTo(0);     }     ])', 1), ('([8:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[8]:method_text:[     securityException = e;         }          assertThat(securityException).isNotNull();     }     ])', 1), ('([7:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[7]:method_text:[id());         assertThat(newCollection.size()).isEqualTo(originalCollection.size() + 1);     }     ])', 1), ('([4:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[4]:method_text:[assertThat(crateInfos.iterator().next().getLabel()).isEqualTo(mTestName.getMethodName());     }     ])', 1), ('([4:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[4]:method_text:[));          assertThat(crateInfos.iterator().next().getExpirationMillis()).isEqualTo(0);     }     ])', 1), ('([7:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[7]:method_text:[s.myUid());         assertThat(newCollection.size()).isEqualTo(oldCollection.size() - 1);     }     ])', 1), ('([2:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[2]:method_text:[rHandle());         assertThat(newCollection.size()).isEqualTo(oldCollection.size() - 1);     }     ])', 1), ('([2:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[2]:method_text:[ String toString() {             return ""It should be the crated folder name"";         }     };     ])', 1), ('([4:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[4]:method_text:[omparingElementsUsing(mCorrespondenceByLabel)                 .containsExactly(mCrateId);     }     ])', 1), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[omparingElementsUsing(mCorrespondenceByLabel)                 .containsExactly(mCrateId);     }     ])', 1), ('([1:/android/os/storage/cts/StorageStatsManagerTest.java]:[UID]:[1]:method_text:[).comparingElementsUsing(mCorrespondenceByLabel)                 .containsExactly(mCrateId);     } }])', 1), ('([1:/com/android/cts/appcompat/CompatChangesTest.java]:[UID]:[1]:method_text:[t.getUser())).isTrue();   }    /* Test run by CompatChangesSystemApiTest.testIsChangeEnabledUid */  ])', 1), ('([2:/com/android/cts/appcompat/CompatChangesTest.java]:[UID]:[2]:method_text:[ocess.myUid())).isTrue();   }    /* Test run by CompatChangesSystemApiTest.testIsChangeDisabled */  ])', 1), ('([1:/com/android/cts/appcompat/CompatChangesTest.java]:[UID]:[1]:method_text:[getUser())).isFalse();   }    /* Test run by CompatChangesSystemApiTest.testIsChangeDisabledUid */  ])', 1), ('([2:/com/android/cts/appcompat/CompatChangesTest.java]:[UID]:[2]:method_text:[assertThat(CompatChanges.isChangeEnabled(CTS_SYSTEM_API_CHANGEID, Process.myUid())).isFalse();   } }])', 1), ('([2:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[UID]:[2]:method_text:[   mDpm.enableSystemApp(null, new Intent().setPackage(TEST_APP_PKG));                 });     }     ])', 1), ('([13:/com/android/cts/process/ProcessTest.java]:[UID]:[13]:method_text:[.GET_META_DATA).uid;         assertEquals(uid1, uid3);         assertNotSame(uid2, uid3);     }     ])', 1), (""([75:/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java]:[UID]:[75]:method_text:[ult so it's displayed on log and failure messages.          */         String getExpected();     } }])"", 1), ('([4:/android/cts/statsd/validation/BatteryStatsValidationTests.java]:[UID]:[4]:method_text:[ void tearDown() throws Exception {         plugInUsb();         super.tearDown();     }      /*    ])', 1), ('([10:/android/cts/statsd/validation/BatteryStatsValidationTests.java]:[UID]:[10]:method_text:[untFromBS).isGreaterThan(0L);         assertThat(countFromBS).isEqualTo(countFromStatsd);     }     ])', 1), ('([10:/android/cts/statsd/validation/BatteryStatsValidationTests.java]:[UID]:[10]:method_text:[(countFromBS).isGreaterThan(0L);         assertThat(countFromBS).isEqualTo(countFromStatsd);     } }])', 1)]"	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-2"	""	""	""	""	""	"9.8.10/C-1-2"	"""C-1-2] MUST display and obtain explicit user consent when the reports are starting to be generated and MUST NOT return the generated report to the requesting app without explicit user consent. """	"09081000.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-3"	""	""	""	""	""	"9.8.10/C-1-3"	"""C-1-3] MUST generate requested reports containing at least the following information: TelephonyDebugService dump TelephonyRegistry dump WifiService dump ConnectivityService dump A dump of the calling package's CarrierService instance (if bound) Radio log buffer """	"09081000.670103"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"257:744346) 9.8.11  . Data blobs sharing"	"9.8.11"	"C-1-2"	""	""	""	""	""	"9.8.11/C-1-2"	"""C-1-2] MUST NOT send off device or share with other apps the secure hashes of data blobs (which are used to control access). <h3 id="""	"09081100.670102"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"257:744346) 9.8.11  . Data blobs sharing"	"9.8.11"	"C-1-1"	""	"[('com.android.cts.blob.BlobStoreManagerTest', 56), ('com.android.cts.device.blob.DataCleanupTest', 8), ('com.android.cts.device.blob.DataPersistenceTest', 6), ('com.android.server.cts.device.statsd.AtomTests', 2)]"	""	"[('CtsBlobStoreTestCases', 56)]"	""	"9.8.11/C-1-1"	"""C-1-1] MUST NOT share data blobs belonging to apps beyond what they intended to allow (i.e. the scope of default access and the other access modes that can be specified using BlobStoreManager.session#allowPackageAccess(), BlobStoreManager.session#allowSameSignatureAccess(), or BlobStoreManager.session#allowPublicAccess() MUST NOT be modified). The AOSP reference implementation meets these requirements. """	"09081100.670101"	"allowPackageAccess() allowSameSignatureAccess() allowPublicAccess() BlobStoreManager.session"	""	""	""	"[('BlobStoreManager.session', 52), ('allowPublicAccess()', 10), ('allowSameSignatureAccess()', 8), ('allowPackageAccess()', 2)]"	""	"[('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess_abandonedSession CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSession_fromAnotherPkg CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess_abandonedSession CtsBlobStoreTestCases]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 4), ('[com.android.cts.device.blob.DataCleanupTest testCommitBlob None]', 4), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowSameSignatureAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testMixedAccessType_fromMultiplePackages CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPublicAccess CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenReadWriteSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenSessionAndAbandon CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCloseSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_abandonedSession CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_largeBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleReadWrites CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testOpenBlob CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitBlobAfterIdleMaintenance CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testExpiredSessionsDeleted_withPartialData CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testAllowPackageAccess_countLimitExceeded CtsBlobStoreTestCases]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation CtsBlobStoreTestCases]', 2), ('[com.android.cts.device.blob.DataCleanupTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataCleanupTest testOpenSession None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testCreateSession None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testOpenSessionAndWrite None]', 2), ('[com.android.cts.device.blob.DataPersistenceTest testCommitSession None]', 2), ('[com.android.server.cts.device.statsd.AtomTests testBlobStore None]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 56), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataCleanupTest.java', 8), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/test-apps/BlobStoreHostTestHelper/src/com/android/cts/device/blob/DataPersistenceTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 2)]"	"[('/com/android/cts/blob/BlobStoreManagerTest.java', 64), ('/com/android/cts/device/blob/DataCleanupTest.java', 12), ('/com/android/cts/device/blob/DataPersistenceTest.java', 8), ('/com/android/server/cts/device/statsd/AtomTests.java', 4)]"	"[('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[essAllowed());             }         } finally {             blobData.delete();         }     }     ])', 4), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ctSuccess */);             }         } finally {             blobData.delete();         }     }     ])', 4), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rifyBlob(pfd);             }         } finally {             blobData.delete();         }     }     ])', 4), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPackageAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[2]:method_text:[essAllowed());             }         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[cess(blobData, HELPER_PKG3);         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowSameSignatureAccess()]:[1]:method_text:[1.unbind();             connection2.unbind();             connection3.unbind();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[kg(sessionId, HELPER_PKG2));         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[cess(blobData, HELPER_PKG3);         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[2]:method_text:[essAllowed());             }         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[allowPublicAccess()]:[1]:method_text:[    .isEqualTo(0L);         } finally {             serviceConnection.unbind();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[BlobHandle());             }         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[kg(sessionId, HELPER_PKG2));         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[ger.openSession(sessionId));         } finally {             blobData.delete();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ssion.close();             }         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[.getBytes()));             }         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[rite(0L, 0L));             }         } finally {             blobData.delete();         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[esults.add(result);             }         }         assertThat(invalidResults).isEmpty();     }     ])', 2), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[3]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                 .isEqualTo(0L);     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[    .isEqualTo(0L);         } finally {             serviceConnection.unbind();         }     }     ])', 2), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[2]:method_text:[ze());             commitSession(sessionId, session, blobData.getBlobHandle());         }     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[;         }, Pair.create(KEY_SESSION_EXPIRY_TIMEOUT_MS, String.valueOf(waitDurationMs)));     }     ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[1]:method_text:[    }         }, Pair.create(KEY_MAX_BLOB_ACCESS_PERMITTED_PACKAGES, String.valueOf(1)));     }     ])', 2), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[BlobStoreManager.session]:[4]:method_text:[) {             mCommandReceiver = null;             mContext.unbindService(this);         }     } }])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[allowPublicAccess()]:[1]:method_text:[       .isEqualTo(0);         }         addBlobHandleToResults(blobData.getBlobHandle());     }     ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[ssion, 0, PARTIAL_FILE_LENGTH_BYTES);         }         addSessionIdToResults(sessionId);     }     ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[            assertThat(session.getSize()).isEqualTo(PARTIAL_FILE_LENGTH_BYTES);         }     }     ])', 2), ('([1:/com/android/cts/device/blob/DataCleanupTest.java]:[BlobStoreManager.session]:[1]:method_text:[       .isEqualTo(0);         }         addBlobHandleToResults(blobData.getBlobHandle());     }     ])', 2), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[UT_WAIT_FOR_IDLE_MS),                 Exception.class, android.Manifest.permission.DUMP);     }     ])', 2), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[BYTES,                     blobData.getFileSize() - PARTIAL_FILE_LENGTH_BYTES);         }     }     ])', 2), ('([1:/com/android/cts/device/blob/DataPersistenceTest.java]:[BlobStoreManager.session]:[1]:method_text:[_COMMIT_CALLBACK_MS, TimeUnit.MILLISECONDS))                     .isEqualTo(0);         }     }     ])', 2), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[BlobStoreManager.session]:[1]:method_text:[   callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);         }     } }])', 2)]"	""	""	""	""	""
"255:740418) 9.8.9  . Installed apps"	"9.8.9"	"C-0-1"	""	""	""	""	""	"9.8.9/C-0-1"	"""C-0-1] MUST NOT expose to any app targeting API level 30 or above details about any other installed app, unless the app is already able to see details about the other installed app through the managed APIs. This includes but is not limited to details exposed by any custom APIs added by the device implementer, or accessible via the filesystem. <h4 id="""	"09080900.670001"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"264:754835) 9.9.4  . Resume on Reboot"	"9.9.4"	"C-0-1"	""	"[('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 13), ('android.hardware.cts.SensorBatchingTests', 12), ('android.media.tv.cts.TvViewTest', 11), ('android.provider.cts.contacts.ContactsContract_PinnedPositionsTest', 8), ('android.appsecurity.cts.DirectBootHostTest', 7), ('android.widget.cts.AbsoluteLayoutTest', 7), ('android.hdmicec.cts.playback.HdmiCecSystemInformationTest', 6), ('android.provider.cts.contacts.VoicemailContractTest', 6), ('android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest', 5), ('android.widget.cts.ResourceCursorAdapterTest', 5), ('android.widget.cts.GridLayoutTest', 5), ('android.webkit.cts.PostMessageTest', 5), ('android.security.cts.AslrTest', 4), ('android.server.wm.WindowInsetsAnimationImeTests', 3), ('android.app.cts.WearableExtenderTest', 2), ('android.security.cts.LinuxRngTest', 2), ('android.appsecurity.cts.OverlayHostTest', 2), ('android.graphics.drawable.cts.VectorDrawableTest', 2), ('android.media.cts.AudioRecordingConfigurationTest', 2), ('android.hdmicec.cts.playback.HdmiCecDeviceOsdNameTest', 2), ('android.content.pm.cts.ApplicationInfoTest', 2), ('android.keystore.cts.EcdsaSignaturePerformanceTest', 2), ('android.server.wm.ActivityTransitionTests', 2), ('android.content.cts.ReceiverCallNotAllowedExceptionTest', 2), ('android.mediapc.cts.MultiEncoderPairPerfTest', 2), ('android.security.cts.Poc18_07', 1), ('com.android.cts.delegate.PermissionGrantDelegateTest', 1), ('android.renderscript.cts.generated.TestFmin', 1), ('android.os.cts.VibratorTest', 1), ('android.app.cts.BadProviderTest', 1), ('com.android.cts.verifier.sensors.base.SensorCtsTestActivity', 1), ('android.server.wm.StartActivityAsUserTests', 1), ('android.media.cts.ResourceManagerTest', 1), ('android.security.cts.ConscryptIntermediateVerificationTest', 1), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 1), ('android.renderscript.cts.generated.TestClz', 1), ('android.autofillservice.cts.inline.InlineFillEventHistoryTest', 1), ('android.autofillservice.cts.FillEventHistoryCommonTestCase', 1), ('android.appsecurity.cts.PackageResolutionHostTest', 1), ('android.view.accessibility.cts.AccessibilityNodeInfo_RangeInfoTest', 1), ('android.content.cts.AccountAccessSameCertTest', 1), ('android.permission.cts.RebootPermissionTest', 1), ('android.widget.cts.AbsSeekBarTest', 1), ('android.util.proto.cts.ProtoOutputStreamInt64Test', 1), ('android.cts.backup.autorestoreapp.AutoRestoreTest', 1), ('android.security.cts.Poc17_12', 1), ('android.widget.cts.ImageButtonTest', 1), ('android.renderscript.cts.generated.TestDistance', 1), ('android.contentcaptureservice.cts.ResizingEditActivityTest', 1), ('android.text.cts.AndroidCharacterTest', 1), ('android.security.cts.BluetoothIntentsTest', 1), ('android.renderscript.cts.generated.TestCopysign', 1)]"	"[('destroy', 168), ('toString', 139), ('getDevice', 59), ('StringBuilder', 46), ('setUp', 26), ('tearDown', 19), ('ArgumentsFloatFloatFloat', 11), ('ArgumentsHalfHalfHalf', 11), ('getContext', 11), ('setup', 10), ('getInstrumentation', 9), ('getTargetContext', 6), ('size', 6), ('getUiAutomation', 5), ('getActivity', 5), ('getResources', 4), ('ArgumentsCharChar', 4), ('ArgumentsUcharUchar', 4), ('ArgumentsShortShort', 4), ('ArgumentsUshortUshort', 4), ('ArgumentsIntInt', 4), ('ArgumentsUintUint', 4), ('ContentValues', 3), ('getContentResolver', 3), ('Builder', 3), ('readLine', 3), ('matches', 3), ('getTop', 3), ('getAbi', 2), ('getBuild', 2), ('trim', 2), ('getPackageManager', 2), ('getWindow', 2), ('getDecorView', 2), ('getFloatingImeSettings', 2), ('getAttributeSet', 2), ('getLeft', 2), ('getRight', 2), ('getBottom', 2), ('checkFminFloatFloatFloat', 1), ('checkFminFloat2Float2Float2', 1), ('checkFminFloat3Float3Float3', 1), ('checkFminFloat4Float4Float4', 1), ('checkFminHalfHalfHalf', 1), ('checkFminHalf2Half2Half2', 1), ('checkFminHalf3Half3Half3', 1), ('checkFminHalf4Half4Half4', 1), ('checkFminFloat2FloatFloat2', 1), ('checkFminFloat3FloatFloat3', 1), ('checkFminFloat4FloatFloat4', 1), ('checkFminHalf2HalfHalf2', 1), ('checkFminHalf3HalfHalf3', 1), ('checkFminHalf4HalfHalf4', 1), ('cleanup', 1), ('build', 1), ('MockCallback', 1), ('Object', 1), ('booleanValue', 1), ('resetCount', 1), ('getConnectionFailedCount', 1), ('InstallMultiple', 1), ('run', 1), ('getCurrentUser', 1), ('activitySetUp', 1), ('supportsMultipleUsers', 1), ('WindowManagerStateHelper', 1), ('createSecondUser', 1), ('getUserId', 1), ('removeSecondUser', 1), ('close', 1), ('getTrustManager', 1), ('getDefaultType', 1), ('getTrustManagers', 1), ('checkClzCharChar', 1), ('checkClzChar2Char2', 1), ('checkClzChar3Char3', 1), ('checkClzChar4Char4', 1), ('checkClzUcharUchar', 1), ('checkClzUchar2Uchar2', 1), ('checkClzUchar3Uchar3', 1), ('checkClzUchar4Uchar4', 1), ('checkClzShortShort', 1), ('checkClzShort2Short2', 1), ('checkClzShort3Short3', 1), ('checkClzShort4Short4', 1), ('checkClzUshortUshort', 1), ('checkClzUshort2Ushort2', 1), ('checkClzUshort3Ushort3', 1), ('checkClzUshort4Ushort4', 1), ('checkClzIntInt', 1), ('checkClzInt2Int2', 1), ('checkClzInt3Int3', 1), ('checkClzInt4Int4', 1), ('checkClzUintUint', 1), ('checkClzUint2Uint2', 1), ('checkClzUint3Uint3', 1), ('checkClzUint4Uint4', 1), ('AccessibilityDumpOnFailureRule', 1), ('allowSyncAdapterRunInBackgroundAndDataInBackground', 1), ('getDeviceType', 1), ('cect_11_2_6_2_GivePhysicalAddress', 1), ('cect_11_2_6_6_GiveCecVersion', 1), ('cect_11_2_6_7_GetMenuLanguage', 1), ('length', 1), ('getSystemLocale', 1), ('cect_11_2_6_3_SetValidMenuLanguage', 1), ('cect_11_2_6_4_SetInvalidMenuLanguage', 1), ('cect_11_2_6_5_SetValidMenuLanguageFromInvalidSource', 1), ('getPackageName', 1), ('getSimpleName', 1), ('inputParams', 1), ('getWidth', 1), ('getBaseline', 1), ('getHeight', 1), ('checkCopysignFloatFloatFloat', 1), ('checkCopysignFloat2Float2Float2', 1), ('checkCopysignFloat3Float3Float3', 1), ('checkCopysignFloat4Float4Float4', 1), ('checkCopysignHalfHalfHalf', 1), ('checkCopysignHalf2Half2Half2', 1), ('checkCopysignHalf3Half3Half3', 1), ('checkCopysignHalf4Half4Half4', 1)]"	"[('CtsWidgetTestCases', 19), ('CtsContactsProviderTestCases', 13), ('CtsSensorTestCases', 12), ('CtsTvTestCases', 11), ('CtsSecurityTestCases', 8), ('CtsWindowManagerDeviceTestCases', 6), ('CtsProviderTestCases', 6), ('CtsContentTestCases', 5), ('CtsWebkitTestCases', 5), ('CtsRenderscriptTestCases', 4), ('CtsAndroidAppTestCases', 3), ('CtsMediaTestCases', 3), ('CtsGraphicsTestCases', 2), ('CtsAutoFillServiceTestCases', 2), ('CtsKeystoreTestCases', 2), ('CtsMediaPerformanceClassTestCases', 2), ('CtsOsHostTestCases', 1), ('CtsAccessibilityTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsProtoTestCases', 1), ('CtsContentCaptureServiceTestCases', 1), ('CtsTextTestCases', 1)]"	""	"9.9.4/C-0-1"	"""C-0-1] CE storage MUST NOT be readable even for the attacker who physically has the device and then has these capabilities and limitations: Can use the signing key of any vendor or company to sign arbitrary messages. Can cause an OTA to be received by the device. Can modify the operation of any hardware (AP, flash etc) except as detailed below, but such modification involves a delay of at least an hour and a power cycle that destroys RAM contents. Cannot modify the operation of tamper-resistant hardware (eg Titan M). Cannot read the RAM of the live device. Cannot obtain the user’s credential (PIN, pattern, password) or otherwise cause it to be entered. By way of example, a device implementation that implements and complies with all of the descriptions found here will be compliant with | C-0-1]. <h3 id="""	"09090400.670001"	"OTA RAM PIN"	""	""	""	"[('RAM', 64), ('OTA', 58), ('PIN', 24)]"	""	"[('[android.hdmicec.cts.playback.HdmiCecSystemInformationTest isLanguageEditable None]', 4), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone None]', 2), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsDemoteIllegalArguments CtsContactsProviderTestCases]', 2), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsAfterDemoteAndUndemote CtsContactsProviderTestCases]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 2), ('[android.app.cts.WearableExtenderTest testWearableExtender CtsAndroidAppTestCases]', 1), ('[android.app.cts.WearableExtenderTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[com.android.cts.delegate.PermissionGrantDelegateTest testCannotAccessApis None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testAutomotiveNativeFbe None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNative None]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootEmulated None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnlyFrequentsOrder CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly_projection CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection CtsContactsProviderTestCases]', 1), ('[android.media.tv.cts.TvViewTest getDisconnectedCount CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testConstructor CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSimpleTune CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSimpleTuneWithBundle CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testTrackChange CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testOnUnhandledInputEventListener CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testConnectionFailed CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testDisconnected CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderMediaOverlay CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderOnTop CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testUnhandledInputEvent CtsTvTestCases]', 1), ('[android.app.cts.BadProviderTest testExitOnCreate CtsAndroidAppTestCases]', 1), ('[android.appsecurity.cts.OverlayHostTest currentTimeMillis None]', 1), ('[android.appsecurity.cts.OverlayHostTest testFrameworkDoesNotDefineOverlayable None]', 1), ('[com.android.cts.verifier.sensors.base.SensorCtsTestActivity getTestLogger None]', 1), ('[android.media.cts.ResourceManagerTest ResourceManagerTest CtsMediaTestCases]', 1), ('[android.security.cts.AslrTest testRandomization CtsSecurityTestCases]', 1), ('[android.graphics.drawable.cts.VectorDrawableTest testColorStateList CtsGraphicsTestCases]', 1), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1), ('[android.autofillservice.cts.inline.InlineFillEventHistoryTest InlineFillEventHistoryTest CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.FillEventHistoryCommonTestCase FillEventHistoryCommonTestCase CtsAutoFillServiceTestCases]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testAudioManagerGetActiveRecordConfigurations CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordingConfigurationTest testCallbackHandler CtsMediaTestCases]', 1), ('[android.content.cts.AccountAccessSameCertTest disallowSyncAdapterRunInBackgroundAndDataInBackground CtsContentTestCases]', 1), ('[android.hdmicec.cts.playback.HdmiCecDeviceOsdNameTest cect_11_2_11_1a_GiveOsdNameTest None]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testSetDropDownViewResource CtsWidgetTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testNewDropDownView CtsWidgetTestCases]', 1), ('[android.widget.cts.ResourceCursorAdapterTest testNewView CtsWidgetTestCases]', 1), ('[android.content.pm.cts.ApplicationInfoTest testPartiallyDirectBootAwareAppIsEncryptionAware CtsContentTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsUpdate CtsContactsProviderTestCases]', 1), ('[android.provider.cts.contacts.ContactsContract_PinnedPositionsTest testPinnedPositionsAfterJoinAndSplit CtsContactsProviderTestCases]', 1), ('[android.keystore.cts.EcdsaSignaturePerformanceTest testSHA512withECDSA CtsKeystoreTestCases]', 1), ('[android.server.wm.ActivityTransitionTests testActivityTransitionDurationNoShortenAsExpected CtsWindowManagerDeviceTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testRotationVector_fastest_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testRotationVector_50hz_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testRotationVector_fastest_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testRotationVector_50hz_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGameRotationVector_fastest_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGameRotationVector_50hz_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGameRotationVector_fastest_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGameRotationVector_50hz_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGeomagneticRotationVector_fastest_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGeomagneticRotationVector_50hz_batching CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGeomagneticRotationVector_fastest_flush CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorBatchingTests testGeomagneticRotationVector_50hz_flush CtsSensorTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testCheckLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testGenerateLayoutParamsFromAttributeSet CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testGenerateLayoutParamsFromLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testGenerateLayoutParamsFromNull CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsoluteLayoutTest testGenerateDefaultLayoutParams CtsWidgetTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTaskAfterReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetStorageEncryption None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppWithIntentLogged None]', 1), ('[android.content.cts.ReceiverCallNotAllowedExceptionTest testConstructor CtsContentTestCases]', 1), ('[android.renderscript.cts.generated.TestDistance checkDistanceFloatFloatFloat CtsRenderscriptTestCases]', 1), ('[android.contentcaptureservice.cts.ResizingEditActivityTest ResizingEditActivityTest CtsContentCaptureServiceTestCases]', 1), ('[android.text.cts.AndroidCharacterTest testGetEastAsianWidth CtsTextTestCases]', 1), ('[android.mediapc.cts.MultiEncoderPairPerfTest test720p CtsMediaPerformanceClassTestCases]', 1), ('[android.widget.cts.GridLayoutTest testCheckLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testGenerateDefaultLayoutParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testGenerateLayoutParamsFromMarginParams CtsWidgetTestCases]', 1), ('[android.widget.cts.GridLayoutTest testAlignment CtsWidgetTestCases]', 1), ('[android.webkit.cts.PostMessageTest PostMessageTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testSimpleMessageToMainFrame CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testWildcardOriginMatchesAnything CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testEmptyStringOriginMatchesAnything CtsWebkitTestCases]', 1), ('[android.webkit.cts.PostMessageTest testMultipleMessagesToMainFrame CtsWebkitTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testStatusTable CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_dirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_retainDirty_notDirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_explicitNotDirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_null_dirty CtsProviderTestCases]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_NotNormalized_normalized CtsProviderTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 13), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingTests.java', 12), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java', 8), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsoluteLayoutTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/contacts/VoicemailContractTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ResourceCursorAdapterTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/GridLayoutTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/PostMessageTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/AslrTest.java', 4), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/LinuxRngTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/OverlayHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/VectorDrawableTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordingConfigurationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/ApplicationInfoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/EcdsaSignaturePerformanceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityTransitionTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ReceiverCallNotAllowedExceptionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPairPerfTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_07.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PermissionGrantDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestFmin.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/VibratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/BadProviderTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/StartActivityAsUserTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ResourceManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/ConscryptIntermediateVerificationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestClz.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PackageResolutionHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AccountAccessSameCertTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/RebootPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsSeekBarTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamInt64Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/backup/AutoRestoreApp/src/android/cts/backup/autorestoreapp/AutoRestoreTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_12.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ImageButtonTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestDistance.java', 1), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/ResizingEditActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AndroidCharacterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/BluetoothIntentsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestCopysign.java', 1)]"	"[('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 15), ('/android/hardware/cts/SensorBatchingTests.java', 13), ('/android/media/tv/cts/TvViewTest.java', 12), ('/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java', 11), ('/android/appsecurity/cts/DirectBootHostTest.java', 9), ('/android/widget/cts/AbsoluteLayoutTest.java', 9), ('/android/provider/cts/contacts/VoicemailContractTest.java', 8), ('/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 7), ('/android/security/cts/AslrTest.java', 7), ('/android/widget/cts/ResourceCursorAdapterTest.java', 7), ('/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java', 7), ('/android/widget/cts/GridLayoutTest.java', 7), ('/android/server/wm/WindowInsetsAnimationImeTests.java', 6), ('/android/webkit/cts/PostMessageTest.java', 6), ('/android/security/cts/LinuxRngTest.java', 4), ('/android/appsecurity/cts/OverlayHostTest.java', 4), ('/android/graphics/drawable/cts/VectorDrawableTest.java', 4), ('/android/app/cts/WearableExtenderTest.java', 3), ('/android/media/cts/AudioRecordingConfigurationTest.java', 3), ('/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java', 3), ('/android/content/pm/cts/ApplicationInfoTest.java', 3), ('/android/keystore/cts/EcdsaSignaturePerformanceTest.java', 3), ('/android/server/wm/ActivityTransitionTests.java', 3), ('/android/content/cts/ReceiverCallNotAllowedExceptionTest.java', 3), ('/android/mediapc/cts/MultiEncoderPairPerfTest.java', 3), ('/android/security/cts/Poc18_07.java', 2), ('/com/android/cts/delegate/PermissionGrantDelegateTest.java', 2), ('/android/renderscript/cts/generated/TestFmin.java', 2), ('/android/os/cts/VibratorTest.java', 2), ('/android/app/cts/BadProviderTest.java', 2), ('/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java', 2), ('/android/server/wm/StartActivityAsUserTests.java', 2), ('/android/media/cts/ResourceManagerTest.java', 2), ('/android/security/cts/ConscryptIntermediateVerificationTest.java', 2), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 2), ('/android/renderscript/cts/generated/TestClz.java', 2), ('/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 2), ('/android/autofillservice/cts/FillEventHistoryCommonTestCase.java', 2), ('/android/appsecurity/cts/PackageResolutionHostTest.java', 2), ('/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java', 2), ('/android/content/cts/AccountAccessSameCertTest.java', 2), ('/android/permission/cts/RebootPermissionTest.java', 2), ('/android/widget/cts/AbsSeekBarTest.java', 2), ('/android/util/proto/cts/ProtoOutputStreamInt64Test.java', 2), ('/android/cts/backup/autorestoreapp/AutoRestoreTest.java', 2), ('/android/security/cts/Poc17_12.java', 2), ('/android/widget/cts/ImageButtonTest.java', 2), ('/android/renderscript/cts/generated/TestDistance.java', 2), ('/android/contentcaptureservice/cts/ResizingEditActivityTest.java', 2), ('/android/text/cts/AndroidCharacterTest.java', 2), ('/android/security/cts/BluetoothIntentsTest.java', 2), ('/android/renderscript/cts/generated/TestCopysign.java', 2)]"	"[('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();             assertEquals(1, cursor.getInt(0));         }     }     ])', 3), ('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();             assertEquals(0, cursor.getInt(0));         }     }     ])', 2), ('([1:/android/security/cts/Poc18_07.java]:[OTA]:[1]:method_text:[ssRunner.class) public class Poc18_07 extends SecurityTestCase {     /**     * b/76221123     */    ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[(1, extender.getPages().size());         assertEquals(page2, extender.getPages().get(0));     }     ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[ion.Builder(0, ""title"", null);     }      /** Notification.Action.WearableExtender functions */     ])', 1), ('([1:/com/android/cts/delegate/PermissionGrantDelegateTest.java]:[OTA]:[1]:method_text:[   mDpm.getPermissionGrantState(null, TEST_APP_PKG, TEST_PERMISSION);                 });     }     ])', 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[OTA]:[2]:method_text:[allPackage(OTHER_PKG);     }      /**      * Automotive devices MUST support native FBE.      */    ])', 1), ('([3:/android/appsecurity/cts/DirectBootHostTest.java]:[OTA]:[3]:method_text:[super(getDevice(), getBuild(), getAbi());             addArg(""--force-queryable"");         }     } }])', 1), ('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[1]:method_text:[allPackage(OTHER_PKG);     }      /**      * Automotive devices MUST support native FBE.      */    ])', 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[equals(getFbeMode()));     }      /**      * If device has native FBE, verify lifecycle.      */    ])', 1), (""([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[    /**      * If device doesn't have native FBE, enable emulation and verify lifecycle.      */    ])"", 1), (""([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[ATED);     }      /**      * If device doesn't have native FBE, verify normal lifecycle.      */    ])"", 1), ('([2:/android/appsecurity/cts/DirectBootHostTest.java]:[PIN]:[2]:method_text:[super(getDevice(), getBuild(), getAbi());             addArg(""--force-queryable"");         }     } }])', 1), ('([1:/android/renderscript/cts/generated/TestFmin.java]:[RAM]:[1]:method_text:[ +                 (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);     }     ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[RAM]:[1]:method_text:[ntactsFilter(uri, mDataIds, false,                 sContentValues[0], sContentValues[2]);     }     ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[RAM]:[1]:method_text:[ ranking order.         assertCursorStoredValuesWithContactsFilter(uri, mDataIds, false);     }     ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[RAM]:[1]:method_text:[      STREQUENT_PHONE_ONLY_PROJECTION,                 new long[]{mDataIds[0]}         );     }     ])', 1), ('([8:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[RAM]:[8]:method_text:[).load();          return new long[] {contact.getId(), contact2.getId(), contact3.getId()};     } } ])', 1), (""([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[PIN]:[2]:method_text:[      * no contacts if there are no starred or frequent contacts in the user's contacts.      */    ])"", 1), ('([1:/android/security/cts/LinuxRngTest.java]:[OTA]:[1]:method_text:[nuxRngTest extends TestCase {     static {         System.loadLibrary(""ctssecurity_jni"");     }     ])', 1), ('([1:/android/security/cts/LinuxRngTest.java]:[RAM]:[1]:method_text:[nuxRngTest extends TestCase {     static {         System.loadLibrary(""ctssecurity_jni"");     }     ])', 1), ('([2:/android/os/cts/VibratorTest.java]:[OTA]:[2]:method_text:[       mVibrator = InstrumentationRegistry.getContext().getSystemService(Vibrator.class);     }     ])', 1), ('([3:/android/media/tv/cts/TvViewTest.java]:[RAM]:[3]:method_text:[}         mInstrumentation.waitForIdleSync();         super.tearDown();     }      @UiThreadTest    ])', 1), ('([4:/android/media/tv/cts/TvViewTest.java]:[RAM]:[4]:method_text:[) {                     runOnEachChannel.run();                 }             }         }     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[k(getActivity())) {             return;         }         tryTuneAllChannels(null, null);     }     ])', 1), ('([4:/android/media/tv/cts/TvViewTest.java]:[RAM]:[4]:method_text:[                   fail(""Unrecognized type: "" + track.getType());             }         }     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[yEvent.getAction());         assertEquals(unhandled.getKeyCode(), keyEvent.getKeyCode());     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[verifyKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, KeyEvent.KEYCODE_GUIDE), unhandledEvent);     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[          return mCallback.getConnectionFailedCount() > 0;             }         }.run();     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[              return mCallback.getDisconnectedCount() > 0;             }         }.run();     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[        mTvView.setZOrderMediaOverlay(false);         mInstrumentation.waitForIdleSync();     }     ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[View.setZOrderOnTop(false);         mInstrumentation.waitForIdleSync();     }      @UiThreadTest    ])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[RAM]:[1]:method_text:[ public boolean onUnhandledInputEvent(InputEvent event) {             return true;         }     } }])', 1), ('([3:/android/app/cts/BadProviderTest.java]:[PIN]:[3]:method_text:[               uidWatcher.finish();             }             worker.quitSafely();         }     } }])', 1), ('([1:/android/appsecurity/cts/OverlayHostTest.java]:[OTA]:[1]:method_text:[nd are not signed with the platform signature must not be      * installed successfully.      */    ])', 1), ('([2:/android/appsecurity/cts/OverlayHostTest.java]:[RAM]:[2]:method_text:[APP_CLASS, testMethod, false /* instant */);     }      /** Overlays must not overlay assets. */    ])', 1), ('([4:/com/android/cts/verifier/sensors/base/SensorCtsTestActivity.java]:[RAM]:[4]:method_text:[sorRunListener extends RunListener {         private volatile boolean mCurrentTestReported;         ])', 1), ('([1:/android/server/wm/StartActivityAsUserTests.java]:[OTA]:[1]:method_text:[lic void removeSecondUser() {         runShellCommand(""pm remove-user "" + mSecondUserId);     }     ])', 1), ('([2:/android/media/cts/ResourceManagerTest.java]:[OTA]:[2]:method_text:[, extras);         activity.testReclaimResource(type1, type2);         activity.finish();     }     ])', 1), ('([2:/android/security/cts/AslrTest.java]:[OTA]:[2]:method_text:[ts, >= "" + aslrMinEntropyBits + "" required)"",             entropy >= aslrMinEntropyBits);     }     ])', 1), ('([1:/android/security/cts/AslrTest.java]:[RAM]:[1]:method_text:[ts, >= "" + aslrMinEntropyBits + "" required)"",             entropy >= aslrMinEntropyBits);     }     ])', 1), ('([14:/android/security/cts/AslrTest.java]:[PIN]:[14]:method_text:[ts, >= "" + aslrMinEntropyBits + "" required)"",             entropy >= aslrMinEntropyBits);     }     ])', 1), ('([2:/android/security/cts/AslrTest.java]:[PIN]:[2]:method_text:[py(""/system/bin/"");     }      @AppModeFull // /system/bin/cat is not accessible to instant apps    ])', 1), ('([1:/android/graphics/drawable/cts/VectorDrawableTest.java]:[OTA]:[1]:method_text:[InstrumentationRegistry.getTargetContext();         mResources = mContext.getResources();     }     ])', 1), ('([1:/android/graphics/drawable/cts/VectorDrawableTest.java]:[RAM]:[1]:method_text:[ builder.append(stateSet[i]);             }         }          return builder.toString();     }     ])', 1), ('([1:/android/security/cts/ConscryptIntermediateVerificationTest.java]:[OTA]:[1]:method_text:[        }         }         fail(""Unable to find X509TrustManager"");         return null;     }     ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[OTA]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[OTA]:[1]:method_text:[ViewHeight(KEYBOARD_HEIGHT)                                 .setDrawsBehindNavBar(true));     }     ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[RAM]:[1]:method_text:[ViewHeight(KEYBOARD_HEIGHT)                                 .setDrawsBehindNavBar(true));     }     ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[PIN]:[1]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                         .getInsets(ime()));     }     ])', 1), ('([1:/android/renderscript/cts/generated/TestClz.java]:[RAM]:[1]:method_text:[ +                 (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);     }     ])', 1), ('([2:/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java]:[OTA]:[2]:method_text:[ule getMainTestRule() {         return InlineUiBot.annotateRule(super.getMainTestRule());     }     ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryCommonTestCase.java]:[OTA]:[1]:method_text:[undle bundle = new Bundle();         bundle.putString(key, value);         return bundle;     }     ])', 1), ('([1:/android/media/cts/AudioRecordingConfigurationTest.java]:[PIN]:[1]:method_text:[(""Unexpected number of recording configs after stop"",                 configs.size(), 0);     }     ])', 1), ('([1:/android/media/cts/AudioRecordingConfigurationTest.java]:[PIN]:[1]:method_text:[{                 h.getLooper().quit();             }         }     }      @NonMediaMainlineTest    ])', 1), ('([2:/android/appsecurity/cts/PackageResolutionHostTest.java]:[OTA]:[2]:method_text:[public void tearDown() throws Exception {         getDevice().uninstallPackage(TINY_PKG);     }     ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityNodeInfo_RangeInfoTest.java]:[OTA]:[1]:method_text:[ilureRule mDumpOnFailureRule =             new AccessibilityDumpOnFailureRule();      @SmallTest    ])', 1), ('([1:/android/content/cts/AccountAccessSameCertTest.java]:[OTA]:[1]:method_text:[own() throws Exception {         disallowSyncAdapterRunInBackgroundAndDataInBackground();     }     ])', 1), ('([1:/android/permission/cts/RebootPermissionTest.java]:[OTA]:[1]:method_text:[Requires Permission:      *   {@link android.Manifest.permission#REBOOT}.      */     @SmallTest    ])', 1), ('([1:/android/widget/cts/AbsSeekBarTest.java]:[OTA]:[1]:method_text:[umentationRegistry.getInstrumentation();         mActivity = mActivityRule.getActivity();     }     ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java]:[RAM]:[1]:method_text:[D_NAME> with a <SET_OSD_NAME> that has the      * correct device name in the parameters.      */    ])', 1), ('([2:/android/hdmicec/cts/playback/HdmiCecDeviceOsdNameTest.java]:[RAM]:[2]:method_text:[GIVE_OSD_NAME> with a <SET_OSD_NAME> that has the updated device name in the parameters.      */    ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamInt64Test.java]:[RAM]:[1]:method_text:[-------------------------------------------------------      /**      * Test writeInt64.      */    ])', 1), ('([1:/android/cts/backup/autorestoreapp/AutoRestoreTest.java]:[OTA]:[1]:method_text:[references = context.getSharedPreferences(SHARED_PREFERENCES_FILE, Context.MODE_PRIVATE);     }     ])', 1), ('([1:/android/widget/cts/ResourceCursorAdapterTest.java]:[OTA]:[1]:method_text:[ut.cursoradapter_host, null);         mCursor = createTestCursor(3, 3);     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/ResourceCursorAdapterTest.java]:[RAM]:[1]:method_text:[ut.cursoradapter_host, null);         mCursor = createTestCursor(3, 3);     }      @UiThreadTest    ])', 1), ('([1:/android/widget/cts/ResourceCursorAdapterTest.java]:[RAM]:[1]:method_text:[d());     }      // parameters Context and Cursor are never read in the method     @UiThreadTest    ])', 1), ('([1:/android/widget/cts/ResourceCursorAdapterTest.java]:[RAM]:[1]:method_text:[;     }      // The parameters Context and Cursor are never read in the method     @UiThreadTest    ])', 1), ('([2:/android/widget/cts/ResourceCursorAdapterTest.java]:[RAM]:[2]:method_text:[      }          public boolean isAutoRequery() {             return mAutoRequery;         }     } }])', 1), ('([1:/android/security/cts/Poc17_12.java]:[OTA]:[1]:method_text:[unner.class) public class Poc17_12 extends SecurityTestCase {      /**      * b/38045794      */    ])', 1), ('([4:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[4]:method_text:[-6      * Tests that the device sends a <CEC_VERSION> in response to a <GET_CEC_VERSION>      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[1]:method_text:[    * Tests that the device sends a <FEATURE_ABORT> in response to a <GET_MENU_LANGUAGE>      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[1]:method_text:[  * Tests that the device handles a <SET_MENU_LANGUAGE> with a valid language correctly.      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[1]:method_text:[6-4      * Tests that the device ignores a <SET_MENU_LANGUAGE> with an invalid language.      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[1]:method_text:[_LANGUAGE> with a valid language that comes from a      * source device which is not TV.      */    ])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecSystemInformationTest.java]:[RAM]:[1]:method_text:[qualTo(originalLanguage);         } finally {             setSystemLocale(locale);         }     } }])', 1), ('([2:/android/content/pm/cts/ApplicationInfoTest.java]:[OTA]:[2]:method_text:[ntext() {         return InstrumentationRegistry.getInstrumentation().getTargetContext();     }     ])', 1), ('([1:/android/content/pm/cts/ApplicationInfoTest.java]:[OTA]:[1]:method_text:[ECT_BOOT_AWARE_PACKAGE_NAME, 0);         assertTrue(applicationInfo.isEncryptionAware());     }     ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[OTA]:[1]:method_text:[positions are correctly handled for contacts that have been demoted      * or undemoted.      */    ])', 1), (""([1:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[RAM]:[1]:method_text:[at the      * values are correctly propogated to the contact's constituent raw contacts.      */    ])"", 1), ('([15:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[RAM]:[15]:method_text:[ {             Log.wtf(TAG, ""Remote exception when performing batch operation."");         }     } } ])', 1), (""([8:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[8]:method_text:[at the      * values are correctly propogated to the contact's constituent raw contacts.      */    ])"", 1), ('([49:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[49]:method_text:[ correctly handled after the ContactsProvider aggregates      * and splits raw contacts.      */    ])', 1), ('([63:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[63]:method_text:[TE_METHOD} with an illegal argument correctly      * throws an IllegalArgumentException.      */    ])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[6]:method_text:[positions are correctly handled for contacts that have been demoted      * or undemoted.      */    ])', 1), ('([27:/android/provider/cts/contacts/ContactsContract_PinnedPositionsTest.java]:[PIN]:[27]:method_text:[ {             Log.wtf(TAG, ""Remote exception when performing batch operation."");         }     } } ])', 1), ('([1:/android/keystore/cts/EcdsaSignaturePerformanceTest.java]:[RAM]:[1]:method_text:[_SIZES = {224, 256, 384, 521};     final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};     ])', 1), ('([1:/android/keystore/cts/EcdsaSignaturePerformanceTest.java]:[RAM]:[1]:method_text:[mSignature.update(getMessage());             mSignature.verify(mMessageSignature);         }     } }])', 1), ('([1:/android/server/wm/ActivityTransitionTests.java]:[OTA]:[1]:method_text:[itionTests  */ @Presubmit public class ActivityTransitionTests extends ActivityManagerTestBase {    ])', 1), ('([3:/android/server/wm/ActivityTransitionTests.java]:[OTA]:[3]:method_text:[ss), bundle);         }     }      public static class TransitionActivity extends Activity {     } }])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[       runBatchingSensorTest(Sensor.TYPE_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[{         runBatchingSensorTest(Sensor.TYPE_ROTATION_VECTOR, RATE_50HZ, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[{         runFlushSensorTest(Sensor.TYPE_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[le {         runFlushSensorTest(Sensor.TYPE_ROTATION_VECTOR, RATE_50HZ, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[  runBatchingSensorTest(Sensor.TYPE_GAME_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[     runBatchingSensorTest(Sensor.TYPE_GAME_ROTATION_VECTOR, RATE_50HZ, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[     runFlushSensorTest(Sensor.TYPE_GAME_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[        runFlushSensorTest(Sensor.TYPE_GAME_ROTATION_VECTOR, RATE_50HZ, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[tchingSensorTest(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[nBatchingSensorTest(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR, RATE_50HZ, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[nFlushSensorTest(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR, RATE_FASTEST, BATCHING_PERIOD);     }     ])', 1), ('([2:/android/hardware/cts/SensorBatchingTests.java]:[OTA]:[2]:method_text:[          flush);             stats.logToFile(environment.getContext(), fileName);         }     } }])', 1), ('([1:/android/widget/cts/AbsoluteLayoutTest.java]:[OTA]:[1]:method_text:[stUtils.beginDocument(parser, ""LinearLayout"");         return Xml.asAttributeSet(parser);     }     ])', 1), ('([5:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[5]:method_text:[stUtils.beginDocument(parser, ""LinearLayout"");         return Xml.asAttributeSet(parser);     }     ])', 1), ('([9:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[9]:method_text:[rams));         assertFalse(mMyAbsoluteLayout.checkLayoutParams(null));     }      @UiThreadTest    ])', 1), ('([12:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[12]:method_text:[;         assertEquals(0, params.x);         assertEquals(0, params.y);     }      @UiThreadTest    ])', 1), ('([11:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[11]:method_text:[HT, params.height);         assertEquals(0, params.x);         assertEquals(0, params.y);     }     ])', 1), ('([3:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[3]:method_text:[ {         mMyAbsoluteLayout.generateLayoutParams((LayoutParams) null);     }      @UiThreadTest    ])', 1), ('([21:/android/widget/cts/AbsoluteLayoutTest.java]:[RAM]:[21]:method_text:[rams(ViewGroup.LayoutParams p) {             return super.generateLayoutParams(p);         }     } }])', 1), ('([6:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[6]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[elper"",             ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);     }     ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[4]:method_text:[Delegations} to test that      *    the scope can only be delegatd to one app at a time.      */    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");         }     }      @RequiresDevice    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[hod("".LockTaskHostDrivenTest"", ""testCleanupLockTask_noAsserts"");         }     }      @LargeTest    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[1]:method_text:[teDeviceTestMethod("".LockTaskHostDrivenTest"", ""testCleanupLockTask_noAsserts"");         }     }     ])', 1), ('([17:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[OTA]:[17]:method_text:[and(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[2]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[                 DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);     }     ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[lean(false)                 .setStrings(systemPackageToEnable)                 .build());     }     ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[3]:method_text:[lse)                 .setStrings(""android.intent.action.MAIN"")                 .build());     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RAM]:[2]:method_text:[and(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }])', 1), ('([2:/android/content/cts/ReceiverCallNotAllowedExceptionTest.java]:[OTA]:[2]:method_text:[est.AndroidTestCase;  public class ReceiverCallNotAllowedExceptionTest extends AndroidTestCase {    ])', 1), ('([1:/android/content/cts/ReceiverCallNotAllowedExceptionTest.java]:[OTA]:[1]:method_text:[public void testConstructor() {         new ReceiverCallNotAllowedException(""TEST_STRING"");     } } ])', 1), ('([1:/android/widget/cts/ImageButtonTest.java]:[OTA]:[1]:method_text:[tivity();         mImageButton = (ImageButton) mActivity.findViewById(R.id.image_button);     }     ])', 1), ('([1:/android/renderscript/cts/generated/TestDistance.java]:[RAM]:[1]:method_text:[ +                 (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);     }     ])', 1), ('([2:/android/contentcaptureservice/cts/ResizingEditActivityTest.java]:[OTA]:[2]:method_text:[  public void resetActivityStaticState() {         ResizingEditActivity.onRootView(null);     }     ])', 1), ('([1:/android/text/cts/AndroidCharacterTest.java]:[OTA]:[1]:method_text:[EAST_ASIAN_WIDTH_WIDE,                 AndroidCharacter.getEastAsianWidth((char)0x319F));     }     ])', 1), ('([6:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[RAM]:[6]:method_text:[sync});                 }             }         }         return argsList;     }      @LargeTest    ])', 1), ('([3:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[RAM]:[3]:method_text:[     }         // Achieved frame rate is not compared as this test runs in byte buffer mode.     } }])', 1), ('([1:/android/widget/cts/GridLayoutTest.java]:[OTA]:[1]:method_text:[etActivity();         mGridLayout = (GridLayout) mActivity.findViewById(R.id.gridlayout);     }     ])', 1), ('([3:/android/widget/cts/GridLayoutTest.java]:[RAM]:[3]:method_text:[  new GridLayout.LayoutParams(GridLayout.spec(0), GridLayout.spec(0)));     }      @UiThreadTest    ])', 1), ('([6:/android/widget/cts/GridLayoutTest.java]:[RAM]:[6]:method_text:[CONTENT, lp.width);         assertEquals(ViewGroup.LayoutParams.WRAP_CONTENT, lp.height);     }     ])', 1), ('([14:/android/widget/cts/GridLayoutTest.java]:[RAM]:[14]:method_text:[w, col, alignment, v0, table[row][col], ""row"");             }         }     }      @UiThreadTest    ])', 1), ('([4:/android/widget/cts/GridLayoutTest.java]:[RAM]:[4]:method_text:[rams(ViewGroup.LayoutParams p) {             return super.generateLayoutParams(p);         }     } }])', 1), ('([1:/android/security/cts/BluetoothIntentsTest.java]:[OTA]:[1]:method_text:[c class BluetoothIntentsTest extends AndroidTestCase {   /**    * b/35258579    */   @SecurityTest  ])', 1), ('([3:/android/webkit/cts/PostMessageTest.java]:[RAM]:[3]:method_text:[ng-webview-cts.      */     // Post a string message to main frame and make sure it is received.    ])', 1), ('([2:/android/webkit/cts/PostMessageTest.java]:[RAM]:[2]:method_text:[view-cts.      */     // Post a string message to main frame passing a wildcard as target origin    ])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[RAM]:[1]:method_text:[cts.      */     // Post a string message to main frame passing an empty string as target origin    ])', 1), ('([2:/android/webkit/cts/PostMessageTest.java]:[RAM]:[2]:method_text:[// Post multiple messages to main frame and make sure they are received in     // correct order.    ])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[RAM]:[1]:method_text:[   */     // Create a message channel and make sure it can be used for data transfer to/from js.    ])', 1), ('([1:/android/renderscript/cts/generated/TestCopysign.java]:[RAM]:[1]:method_text:[ +                 (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);     }     ])', 1), ('([36:/android/provider/cts/contacts/VoicemailContractTest.java]:[OTA]:[36]:method_text:[d, null, null, null);         assertEquals(0, cursor.getCount());         cursor.close();     }     ])', 1)]"	""	""	""	""	""
