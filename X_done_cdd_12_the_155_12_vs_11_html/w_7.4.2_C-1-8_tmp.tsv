"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-8"	"7.4.2/C-1-8"	"07040200.670108"	"""C-1-8] MUST use one consistent MAC address (SHOULD NOT randomize MAC address halfway through a scan)."""	""	"wifi"	"frames scan MAC random"	"frames random scan"	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 50), ('android.net.wifi.rtt.cts.WifiRttTest', 11), ('android.net.wifi.cts.WifiLocationInfoTest', 10), ('android.net.wifi.aware.cts.SingleDeviceTest', 7), ('android.net.wifi.cts.ConcurrencyTest', 7), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 6), ('android.net.wifi.cts.ScanResultTest', 5), ('android.net.wifi.cts.WifiHotspot2Test', 4), ('android.net.wifi.p2p.cts.WifiP2pConfigTest', 4), ('android.net.wifi.nl80211.cts.NativeWifiClientTest', 4), ('com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase', 3), ('com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase', 3), ('android.net.wifi.cts.WifiInfoTest', 3), ('android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest', 3), ('android.net.wifi.cts.TestHelper', 2), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 2), ('android.net.wifi.nl80211.cts.WifiNl80211ManagerTest', 2), ('android.net.wifi.nl80211.cts.NativeScanResultTest', 2), ('com.android.cts.verifier.wifi.TestUtils', 2), ('android.cts.statsdatom.wifi.WifiStatsTests', 2), ('android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test', 2), ('android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity', 1), ('android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity', 1), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 1), ('android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity', 1), ('com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase', 1), ('com.android.cts.verifier.wifiaware.CallbackUtils', 1), ('android.net.wifi.cts.WifiBackupRestoreTest', 1), ('android.net.wifi.rtt.cts.TestBase', 1), ('android.net.wifi.cts.CoexUnsafeChannelTest', 1), ('com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase', 1), ('android.net.wifi.cts.SupplicantStateTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 1), ('com.android.cts.verifier.wifi.NetworkRequestUnavailableNetworkSpecifierTestActivity', 1), ('android.net.wifi.cts.WifiMigrationTest', 1), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 1)]"	"[('getContext', 17), ('countDown', 16), ('Object', 13), ('setUp', 13), ('getInstrumentation', 11), ('getAction', 8), ('generateRandomPassphrase', 8), ('notifyAll', 8), ('getScanResults', 7), ('BroadcastReceiver', 7), ('notify', 7), ('Builder', 6), ('getBytes', 5), ('setUpClass', 4), ('getPackageManager', 4), ('startScanAndWaitForResults', 4), ('startScan', 3), ('getConnectionInfo', 3), ('getSSID', 3), ('newSingleThreadScheduledExecutor', 3), ('build', 3), ('MySync', 3), ('start', 2), ('getLooper', 2), ('onAttachFailed', 2), ('waitForAnyCallback', 2), ('printStackTrace', 2), ('Intent', 2), ('turnScreenOn', 2), ('turnScreenOff', 2), ('onScanResultsAvailable', 2), ('poll', 2), ('getSupplicantState', 2), ('getBSSID', 2), ('Random', 2), ('toString', 2), ('IntentFilter', 2), ('canSerializeAndDeserialize', 2), ('obtain', 2), ('hashCode', 2), ('getState', 2), ('waitForStateChange', 1), ('getSession', 1), ('runAll', 1), ('run', 1), ('getCurrentCountryCode', 1), ('waitForAttach', 1), ('onIdentityChanged', 1), ('waitForMac', 1), ('onUnavailable', 1), ('waitForNetworkCapabilities', 1), ('waitForCallbacks', 1), ('await', 1), ('onSessionConfigUpdated', 1), ('onSessionConfigFailed', 1), ('onSessionTerminated', 1), ('waitForRangingResults', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MyResponse', 1), ('executeAttach', 1), ('AttachCb', 1), ('DeviceWiphyCapabilities', 1), ('getMacAddress', 1), ('toByteArray', 1), ('getDevice', 1)]"	"[('CtsWifiTestCases', 130), ('CtsStatsdAtomHostTestCases', 2), ('CtsWifiBroadcastsHostTestCases', 2)]"	""	"android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest"	"getDevice"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 50), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pConfigTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 4), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/CoexUnsafeChannelTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/SupplicantStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1)]"	"[('(35,MAC,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(14,scan,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(5,MAC,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(8,scan,/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java)', 1), ('(53,scan,/android/net/wifi/cts/TestHelper.java)', 1), ('(4,MAC,/android/net/wifi/cts/TestHelper.java)', 1), ('(3,MAC,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(3,random,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(8,scan,/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java)', 1), ('(12,scan,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(7,scan,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,MAC,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,scan,/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java)', 1), ('(13,scan,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(39,scan,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(3,MAC,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(4,MAC,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1), ('(36,MAC,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(27,scan,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(10,MAC,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(5,scan,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(28,scan,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(2,MAC,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(3,random,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(8,MAC,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(2,scan,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(67,scan,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(37,scan,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(8,MAC,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(3,random,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(2,scan,/android/net/wifi/cts/CoexUnsafeChannelTest.java)', 1), ('(88,scan,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(4,random,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(19,MAC,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(24,MAC,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(1,scan,/android/net/wifi/cts/SupplicantStateTest.java)', 1), ('(6,scan,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,MAC,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(27,scan,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(8,scan,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(21,scan,/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java)', 1), ('(13,MAC,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(191,scan,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(86,MAC,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(37,random,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,scan,/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java)', 1), ('(86,scan,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,scan,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(4,scan,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(7,scan,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1)]"	"[('([8:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[8]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[2]:method_text:[spond to enable/disable and will not result in a new     * MAC address being generated.     */   ])', 1), ('([10:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[10]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[1]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[5]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[5]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[4]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[8]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[4]:method_text:[the device (that     * can provide internet connectivity) when the request is released.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[2]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[2]:method_text:[    /**     * Tests the entire connection flow using a BSSID pattern in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[2]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([8:/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java]:[scan]:[8]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([53:/android/net/wifi/cts/TestHelper.java]:[scan]:[53]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([4:/android/net/wifi/cts/TestHelper.java]:[MAC]:[4]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[MAC]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[MAC]:[2]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[random]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[random]:[2]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([8:/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java]:[scan]:[8]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([12:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[scan]:[12]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[scan]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[MAC]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java]:[scan]:[2]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[scan]:[1]:method_text:[tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(mContext));    }   ])', 1), ('([12:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[scan]:[12]:method_text:[R_TKIP));        assertThat(securityType.groupCipher).isEqualTo(ScanResult.CIPHER_CCMP);    }   ])', 1), ('([23:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[23]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[n()            throws Exception {        triggerScanFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[        throws Exception {        retrieveScanResultsFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([3:/android/net/wifi/cts/WifiLocationInfoTest.java]:[MAC]:[3]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[T_OWNER_FREQ = 2447;    private static final String TEST_DEVICE_ADDRESS = ""aa:bb:cc:dd:ee:ff"";   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[);        assertEquals(copiedConfig.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[R_BAND);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[OWNER_FREQ);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_TEMPORARY);    }}])', 1), ('([36:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[MAC]:[36]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([10:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[10]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[1]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([5:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[5]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[2]:method_text:[et(0).getStatus());    }    /**     * Verify ranging request with aware peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[scan]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[scan]:[2]:method_text:[Result result = new NativeScanResult();        assertThat(result.isAssociated()).isFalse();    }}])', 1), ('([28:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[scan]:[28]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([2:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[MAC]:[2]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([3:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[random]:[3]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([8:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[MAC]:[8]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), (""([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[scan]:[2]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([67:/android/net/wifi/rtt/cts/TestBase.java]:[scan]:[67]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([37:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[scan]:[37]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([8:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[MAC]:[8]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([3:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[random]:[3]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([2:/android/net/wifi/cts/CoexUnsafeChannelTest.java]:[scan]:[2]:method_text:[D_24_GHZ;    final static int TEST_CHANNEL = 6;    final static int TEST_POWER_CAP_DBM = -50;   ])', 1), ('([88:/com/android/cts/verifier/wifi/TestUtils.java]:[scan]:[88]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([4:/com/android/cts/verifier/wifi/TestUtils.java]:[random]:[4]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[1]:method_text:[ponse.discoveryState);        mWifiP2pManager.stopPeerDiscovery(mWifiP2pChannel, null);    }   ])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[  assertTrue(waitForServiceResponse(mMyResponse));        return mMyResponse.deviceName;    }   ])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[orServiceResponse(mMyResponse));        });        return mMyResponse.persistentGroups;    }   ])', 1), ('([6:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[6]:method_text:[tNull(persistentGroups);        assertEquals(0, persistentGroups.getGroupList().size());    }   ])', 1), ('([3:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[3]:method_text:[orServiceResponse(mMyResponse));            assertTrue(mMyResponse.success);        });    }   ])', 1), ('([3:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[3]:method_text:[   assertTrue(waitForServiceResponse(mMyResponse));        assertTrue(mMyResponse.success);    }}])', 1), ('([24:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[MAC]:[24]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([1:/android/net/wifi/cts/SupplicantStateTest.java]:[scan]:[1]:method_text:[NINITIALIZED));        assertFalse(SupplicantState.isValidState(SupplicantState.INVALID));    }}])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[scan]:[1]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([5:/android/net/wifi/cts/WifiInfoTest.java]:[scan]:[5]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[MAC]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([18:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[scan]:[18]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([9:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[scan]:[9]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([8:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[scan]:[8]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[1]:method_text:[} object can be serialized and deserialized,     *  while keeping its values unchanged.     */   ])', 1), ('([6:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[6]:method_text:[apa.hashCode());    }    /** Test mapping wifi standard support into channel width support */   ])', 1), ('([14:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[14]:method_text:[;        assertThat(capa.isChannelWidthSupported(ScanResult.CHANNEL_WIDTH_80MHZ)).isTrue();    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[EST_MAC));        assertThat(client.getMacAddress().toByteArray()).isEqualTo(TEST_MAC);    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[(client);        assertThat(clientDeserialized.hashCode()).isEqualTo(client.hashCode());    }   ])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[3]:method_text:[tes(new byte[] { 7, 8, 9, 10, 11, 12 }));        assertThat(client2).isNotEqualTo(client);    }}])', 1), ('([35:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[35]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[    /**     * Test wifi scanning when Wifi is off and location scanning is turned on.     */   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[13]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[19]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[urn getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[11]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[10]:method_text:[not turned off when the screen turns off while wifi is enabled.     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[9]:method_text:[e platform supports a reasonable number of suggestions per app.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[1]:method_text:[ /** Test that PNO scans reconnects us when the device is disconnected and the screen is off. */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[4]:method_text:[r#setScanAlwaysAvailable(boolean)} &     * {@link WifiManager#isScanAlwaysAvailable()}.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[8]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[ }    /**     * Test that the wifi country code is either null, or a length-2 string.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[8]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[9]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[17]:method_text:[pty());    }    /**     * Tests {@link WifiManager#disableEphemeralNetwork(String)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[4]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[7]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[7]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[16]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[3]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[3]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[1]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[8]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[10]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[6]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[1]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[3]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[6]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([14:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[14]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([1:/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java]:[scan]:[1]:method_text:[equest_unavailable,                R.string.wifi_test_network_request_unavailable_info, 0);    }}])', 1), ('([21:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[21]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([20:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[20]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([13:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[13]:method_text:[           }        }    }    /** Test that the copy constructor copies fields correctly. */   ])', 1), ('([20:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[20]:method_text:[lTo(TEST_FREQUENCY);        assertThat(scanResult2.timestamp).isEqualTo(TEST_TIMESTAMP);    }   ])', 1), ('([12:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[12]:method_text:[sidQuoted);        assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());    }}])', 1), ('([1:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[scan]:[1]:method_text:[s the string was not logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([2:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[scan]:[2]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([4:/android/net/wifi/cts/WifiMigrationTest.java]:[scan]:[4]:method_text:[    /**     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.     */   ])', 1), ('([7:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[scan]:[7]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1)]"	""	""	"[('scan', 78), ('MAC', 57), ('random', 14)]"	"[('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 3), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 3), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact CtsWifiTestCases]', 2), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testGetFactoryMacAddresses CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsApMacRandomizationSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsConnectedMacRandomizationSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSuggestionBuilderNonPersistentRandomization CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachNoIdentity CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachDiscoveryAddressChanges CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSendMessageFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathOpenOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPassphraseOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPmkOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testWifiBandInNetworkCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithBssidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity isEmpty None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testOemSecurityTypeConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForPersist CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForNonPersist CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase executeTest None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithPeerHandle CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeScanResultTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testRequestDiscoveryState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testRequestNetworkInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testSetDeviceName CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testPersistentGroupOperation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testP2pListening CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testP2pService CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 1), ('[android.net.wifi.cts.SupplicantStateTest testIsValidState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest testMappingWifiStandardIntoChannelWidthSupport CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testEquals CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConvertBetweenChannelFrequencyMhz CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiDisabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPreferredNetworkOffloadSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTrafficStateCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartAndStopRestrictingAutoJoinToSubscriptionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetMatchingScanResults CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testForget CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultTimeStamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultConstructors CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
