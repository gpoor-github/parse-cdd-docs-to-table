"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-7"	"7.4.2/C-1-7"	"07040200.670107"	"""C-1-7] MUST randomize the source MAC address and sequence number of probe request frames, once at the beginning of each scan, while STA is disconnected."""	""	"wifi"	"STA MAC"	"frames random"	""	""	""	"[('android.widget.cts.ListPopupWindowTest', 43), ('android.appwidget.cts.DarkTextThemeTest', 5), ('com.android.cts.host.blob.StatsdBlobStoreAtomTest', 3), ('com.android.server.cts.FingerprintIncidentTest', 2), ('android.telephony.cts.util.CarrierPrivilegeUtils', 1), ('android.widget.cts.util.TestUtilsMatchers', 1), ('android.widget.cts.ResourceCursorTreeAdapterTest', 1), ('android.app.usage.cts.test1.SomeActivity', 1), ('android.autofillservice.cts.unittests.SavedDatasetsInfoTest', 1)]"	"[('getDevice', 4), ('setup', 3), ('hasAppWidgets', 2), ('getSimpleName', 1), ('close', 1), ('getAction', 1), ('countDown', 1), ('waitForCarrierPrivilegeChanged', 1), ('hasCarrierPrivileges', 1), ('getPackageManager', 1), ('getOpPackageName', 1), ('toByteArray', 1), ('inAscendingOrder', 1), ('size', 1), ('getTargetContext', 1), ('getWindow', 1), ('setUp', 1), ('tearDown', 1)]"	"[('CtsWidgetTestCases', 45), ('CtsAppWidgetTestCases', 5), ('CtsBlobStoreHostTestCases', 3), ('CtsIncidentHostTestCases', 2), ('CtsTelephonyTestCases', 1), ('CtsAutoFillServiceTestCases', 1)]"	""	"com.android.cts.verifier.wifiaware.DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity"	"obtain"	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 98), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 22), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 9), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pConfigTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/EasyConnectStatusCallbackTest.java', 4), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/SupplicantStateTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/CallbackUtils.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/RadioChainInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/ScheduleJobActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/WifiConfigCreator/src/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/app/src/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WaitForResultActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/CoexUnsafeChannelTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MulticastLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java', 1)]"	"[('(3,STA,/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(44,STA,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(7,STA,/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java)', 1), ('(4,random,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(23,STA,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(13,STA,/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java)', 1), ('(12,STA,/com/android/cts/verifier/wifiaware/BaseTestCase.java)', 1), ('(48,STA,/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java)', 1), ('(2,STA,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(6,STA,/android/net/wifi/nl80211/cts/RadioChainInfoTest.java)', 1), ('(25,STA,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(4,STA,/android/net/wifi/nl80211/cts/PnoNetworkTest.java)', 1), ('(25,STA,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(36,STA,/android/net/wifi/cts/SupplicantStateTest.java)', 1), ('(8,STA,/android/net/wifi/cts/app/ScheduleJobActivity.java)', 1), ('(265,STA,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(197,STA,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(10,MAC,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(12,STA,/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java)', 1), ('(27,STA,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java)', 1), ('(6,STA,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(4,STA,/com/android/cts/verifier/wifi/CallbackUtils.java)', 1), ('(3,STA,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(13,MAC,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(26,STA,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(44,STA,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(8,MAC,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(2,STA,/android/net/wifi/cts/WifiLockTest.java)', 1), ('(3,random,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(34,STA,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(8,MAC,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(9,STA,/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java)', 1), ('(7,STA,/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java)', 1), ('(16,STA,/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java)', 1), ('(3,STA,/android/net/wifi/nl80211/cts/PnoSettingsTest.java)', 1), ('(1,STA,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java)', 1), ('(8,STA,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(119,STA,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java)', 1), ('(11,STA,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(2,STA,/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java)', 1), ('(7,STA,/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java)', 1), ('(5,STA,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1), ('(4,MAC,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java)', 1), ('(31,STA,/android/net/wifi/cts/WaitForResultActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(78,STA,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(50,STA,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(24,MAC,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(96,STA,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(12,STA,/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(4,STA,/android/net/wifi/cts/CoexUnsafeChannelTest.java)', 1), ('(3,STA,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(3,random,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(113,STA,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(2,MAC,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java)', 1), ('(15,STA,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(3,random,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(24,STA,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(3,MAC,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(6,STA,/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java)', 1), ('(104,STA,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(3,MAC,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(55,STA,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,MAC,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(37,random,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(513,STA,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(86,MAC,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,STA,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(66,STA,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(17,STA,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java)', 1), ('(34,STA,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(5,MAC,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(67,STA,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,MAC,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(36,STA,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(85,STA,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(35,MAC,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(53,STA,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(36,MAC,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(7,STA,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(2,STA,/android/net/wifi/cts/MulticastLockTest.java)', 1), ('(7,STA,/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java)', 1), ('(15,STA,/com/android/cts/verifier/wifi/BaseTestCase.java)', 1), ('(101,STA,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(19,MAC,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(1,STA,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(20,STA,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(39,STA,/android/net/wifi/cts/EasyConnectStatusCallbackTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java)', 1), ('(44,STA,/android/net/wifi/cts/TestHelper.java)', 1), ('(4,MAC,/android/net/wifi/cts/TestHelper.java)', 1), ('(26,STA,/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java)', 1), ('(6,STA,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 3), ('([2:/android/net/wifi/cts/WifiConfigurationTest.java]:[STA]:[2]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[STA]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 2), ('([2:/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java]:[STA]:[2]:method_text:[                        TEST_UPNP_QUERY);        assertEquals(rawRequest, upnpRequest);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java]:[STA]:[1]:method_text:[ntException"");        } catch (IllegalArgumentException ex) {            return;        }    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[ted_publish,                R.string.aware_data_path_passphrase_solicited_publish_info, 0);    }}])', 1), ('([44:/com/android/cts/verifier/wifi/TestListActivity.java]:[STA]:[44]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([7:/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java]:[STA]:[7]:method_text:[work_request_specific,                R.string.wifi_test_network_request_specific_info, 0);    }}])', 1), ('([4:/com/android/cts/verifier/wifi/TestUtils.java]:[random]:[4]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([23:/com/android/cts/verifier/wifi/TestUtils.java]:[STA]:[23]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([13:/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java]:[STA]:[13]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([12:/com/android/cts/verifier/wifiaware/BaseTestCase.java]:[STA]:[12]:method_text:[       hexChars[base++] = hexArray[v & 0x0F];        }        return new String(hexChars);    }}])', 1), ('([48:/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java]:[STA]:[48]:method_text:[    + ""finish"");                return false;            }        }        return true;    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[STA]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([6:/android/net/wifi/nl80211/cts/RadioChainInfoTest.java]:[STA]:[6]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([25:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[STA]:[25]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([4:/android/net/wifi/nl80211/cts/PnoNetworkTest.java]:[STA]:[4]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([7:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[7]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[1]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([11:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[STA]:[11]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([2:/android/net/wifi/cts/SupplicantStateTest.java]:[STA]:[2]:method_text:[mport android.test.AndroidTestCase;public class SupplicantStateTest extends AndroidTestCase {   ])', 1), ('([34:/android/net/wifi/cts/SupplicantStateTest.java]:[STA]:[34]:method_text:[NINITIALIZED));        assertFalse(SupplicantState.isValidState(SupplicantState.INVALID));    }}])', 1), ('([8:/android/net/wifi/cts/app/ScheduleJobActivity.java]:[STA]:[8]:method_text:[s);        jobScheduler.schedule(jobInfo);        Log.v(TAG,""Job scheduled: "" + jobInfo);    }}])', 1), ('([66:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[66]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([145:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[145]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([10:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[10]:method_text:[* {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(WifiConnectedSessionInfo)}.     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[1]:method_text:[  /**     * Tests the {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(int)}.     */   ])', 1), ('([27:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[27]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([16:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[STA]:[16]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([14:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[14]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([59:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[59]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([13:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[13]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([22:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[22]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[4]:method_text:[et(0).getStatus());    }    /**     * Verify ranging request with aware peer handle.     */   ])', 1), ('([5:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[5]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([80:/android/net/wifi/rtt/cts/WifiRttTest.java]:[STA]:[80]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([5:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[5]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[2]:method_text:[et(0).getStatus());    }    /**     * Verify ranging request with aware peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[MAC]:[1]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([12:/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java]:[STA]:[12]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([27:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[STA]:[27]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[licited_publish,                R.string.aware_data_path_open_unsolicited_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1), ('([6:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[STA]:[6]:method_text:[tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(mContext));    }   ])', 1), ('([4:/com/android/cts/verifier/wifi/CallbackUtils.java]:[STA]:[4]:method_text:[ mOnCapabilitiesChangedBlocker.await(mCallbackTimeoutInMs, TimeUnit.MILLISECONDS);        }    }}])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[STA]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[2]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[EST_MAC));        assertThat(client.getMacAddress().toByteArray()).isEqualTo(TEST_MAC);    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[4]:method_text:[(client);        assertThat(clientDeserialized.hashCode()).isEqualTo(client.hashCode());    }   ])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[MAC]:[3]:method_text:[tes(new byte[] { 7, 8, 9, 10, 11, 12 }));        assertThat(client2).isNotEqualTo(client);    }}])', 1), ('([20:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[STA]:[20]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[STA]:[2]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[STA]:[2]:method_text:[ow an IllegalArgumentException!"");        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[STA]:[2]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([44:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[STA]:[44]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), ('([8:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[MAC]:[8]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), ('([2:/android/net/wifi/cts/WifiLockTest.java]:[STA]:[2]:method_text:[WifiLockTest"";    /**     * Verify acquire and release of High Performance wifi locks     */   ])', 1), ('([3:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[random]:[3]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([34:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[STA]:[34]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([8:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[MAC]:[8]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([9:/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java]:[STA]:[9]:method_text:[pted while changing wifi settings"", ie);        } finally {            finish();        }    }}])', 1), ('([7:/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java]:[STA]:[7]:method_text:[_credential,                R.string.wifi_test_network_request_invalid_credential_info, 0);    }}])', 1), ('([16:/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java]:[STA]:[16]:method_text:[TATUS_EXTRA, canRetrieveSsidFromTransportInfo(TAG, connectivityManager)));        finish();    }}])', 1), ('([3:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[STA]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/net/wifi/cts/PpsMoParserTest.java]:[STA]:[1]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[olicited_publish,                R.string.aware_data_path_pmk_unsolicited_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java]:[STA]:[6]:method_text:[iscovery_ranging_publish,                R.string.aware_discovery_ranging_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java]:[STA]:[6]:method_text:[stion_ssid_bssid,                R.string.wifi_test_network_suggestion_ssid_bssid_info, 0);    }}])', 1), ('([7:/android/net/wifi/cts/ConfigParserTest.java]:[STA]:[7]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/ConfigParserTest.java]:[STA]:[1]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([119:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[STA]:[119]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([7:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[STA]:[7]:method_text:[Instrumentation().getContext();        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[STA]:[4]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java]:[STA]:[2]:method_text:[stered "" + action);        Toast.makeText(mContext, ""Started"", Toast.LENGTH_SHORT).show();    }}])', 1), ('([7:/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java]:[STA]:[7]:method_text:[equest_unavailable,                R.string.wifi_test_network_request_unavailable_info, 0);    }}])', 1), ('([5:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[STA]:[5]:method_text:[T_OWNER_FREQ = 2447;    private static final String TEST_DEVICE_ADDRESS = ""aa:bb:cc:dd:ee:ff"";   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[T_OWNER_FREQ = 2447;    private static final String TEST_DEVICE_ADDRESS = ""aa:bb:cc:dd:ee:ff"";   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[);        assertEquals(copiedConfig.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[R_BAND);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[MAC]:[1]:method_text:[OWNER_FREQ);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_TEMPORARY);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java]:[STA]:[6]:method_text:[th_oob_open_responder,                R.string.aware_data_path_oob_open_responder_info, 0);    }}])', 1), ('([31:/android/net/wifi/cts/WaitForResultActivity.java]:[STA]:[31]:method_text:[ONDS)).isTrue();        synchronized (mStatusLock) {            return mStatus;        }    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([56:/android/net/wifi/cts/ScanResultTest.java]:[STA]:[56]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([11:/android/net/wifi/cts/ScanResultTest.java]:[STA]:[11]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([7:/android/net/wifi/cts/ScanResultTest.java]:[STA]:[7]:method_text:[           }        }    }    /** Test that the copy constructor copies fields correctly. */   ])', 1), ('([4:/android/net/wifi/cts/ScanResultTest.java]:[STA]:[4]:method_text:[lTo(TEST_FREQUENCY);        assertThat(scanResult2.timestamp).isEqualTo(TEST_TIMESTAMP);    }   ])', 1), ('([50:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[STA]:[50]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([24:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[MAC]:[24]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([22:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[22]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([16:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[16]:method_text:[tMode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_HIGH_PERF);        }    }   ])', 1), ('([16:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[16]:method_text:[ode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_LOW_LATENCY);        }    }   ])', 1), ('([17:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[17]:method_text:[ckStateChanged().getTag();            assertThat(tag).isEqualTo(EXPECTED_TAG);        }    }   ])', 1), ('([3:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[3]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([3:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[3]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([19:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[STA]:[19]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([12:/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java]:[STA]:[12]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[licited_publish,                R.string.aware_data_path_open_unsolicited_publish_info, 0);    }}])', 1), ('([4:/android/net/wifi/cts/CoexUnsafeChannelTest.java]:[STA]:[4]:method_text:[D_24_GHZ;    final static int TEST_CHANNEL = 6;    final static int TEST_POWER_CAP_DBM = -50;   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[STA]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[STA]:[1]:method_text:[ileOis));    }    /**     * Verify that the allOis set and get APIs work as expected     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[STA]:[1]:method_text:[   }    /**     * Verify that the OtherHomePartners set and get APIs work as expected     */   ])', 1), ('([3:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[random]:[3]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([113:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[STA]:[113]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([2:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[MAC]:[2]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[_solicited_publish,                R.string.aware_data_path_pmk_solicited_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java]:[STA]:[6]:method_text:[hrase_responder,                R.string.aware_data_path_oob_passphrase_responder_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[ted_publish,                R.string.aware_data_path_passphrase_solicited_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java]:[STA]:[6]:method_text:[t_connect,                R.string.wifi_test_network_suggestion_ssid_post_connect_info, 0);    }}])', 1), ('([11:/android/net/wifi/cts/WifiConfigurationTest.java]:[STA]:[11]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[random]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[random]:[2]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[STA]:[11]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[STA]:[11]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[STA]:[2]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[MAC]:[1]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[MAC]:[2]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([6:/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java]:[STA]:[6]:method_text:[_failure,                R.string.wifi_test_network_suggestion_connection_failure_info, 0);    }}])', 1), ('([88:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[88]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[n()            throws Exception {        triggerScanFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[        throws Exception {        retrieveScanResultsFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[     throws Exception {        retrieveConnectionInfoFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[, ACCESS_FINE_LOCATION);        retrieveConnectionInfoFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[gServiceAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[ActivityAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[gActivityAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[STA]:[1]:method_text:[NAME, ACCESS_FINE_LOCATION);        retrieveTransportInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([3:/android/net/wifi/cts/WifiLocationInfoTest.java]:[MAC]:[3]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([34:/android/net/wifi/cts/WifiInfoTest.java]:[STA]:[34]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([17:/android/net/wifi/cts/WifiInfoTest.java]:[STA]:[17]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[STA]:[3]:method_text:[CurrentSecurityType and getCurrentSecurityType work as expected     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[STA]:[1]:method_text:[er.build();        assertEquals(WifiInfo.SECURITY_TYPE_SAE, info.getCurrentSecurityType());    }}])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[MAC]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[6]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[1]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[3]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[2]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[6]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([14:/android/net/wifi/cts/WifiManagerTest.java]:[random]:[14]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([156:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[156]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[erify transition through states.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[17]:method_text:[able properties     * 2.DhcpInfo properties     * 3.wifi state     * 4.ConnectionInfo     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[6]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([29:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[29]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[    }    /**     * Verify non DO apps cannot call removeNonCallerConfiguredNetworks.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[7]:method_text:[leged(WifiConfiguration)} throws a     * SecurityException when called by a normal app.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[NetworkPrivileged(WifiConfiguration)} throws an exception when     * null is the input.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[ailure status code when adding an enterprise config with mandatory fields not filled in.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[8]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[ intended to be granted to only those apps with direct user     * access and no others.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[The permission is intended to be granted to only the device managed     * provisioning.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[on#WIFI_SET_DEVICE_MOBILITY_STATE} permission     * is held by at most one application.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[sion#NETWORK_CARRIER_PROVISIONING} permission     * is held by at most one application.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[WIFI_UPDATE_USABILITY_STATS_SCORE}     * permission is held by at most one application.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[8]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([23:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[23]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ation, WifiManager.ActionListener)} by marking     * an existing saved network metered.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[pported();    }    /**     * Tests {@link WifiManager#isStaApConcurrencySupported().     */   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[16]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[8]:method_text:[r#setScanAlwaysAvailable(boolean)} &     * {@link WifiManager#isScanAlwaysAvailable()}.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[9]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[9]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[10]:method_text:[tVerboseLoggingEnabled(boolean)} &     * {@link WifiManager#isVerboseLoggingEnabled()}.     */   ])', 1), ('([14:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[14]:method_text:[;        }    }    /**     * Tests {@link WifiManager#setVerboseLoggingLevel(int)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[u add the     * networks back after reset, the ownership of saved networks will change.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ash.     * TODO(b/150891569): deprecate it in Android S, this API is not used anywhere.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[8]:method_text:[s clear to connect     * again.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[ }    /**     * Test that the wifi country code is either null, or a length-2 string.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[20]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[3]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[6]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[8]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[4]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[alse     * are valid responses.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[2]:method_text:[nnels(int, int))} does not crash     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[5]:method_text:[nels(int, int))} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([1:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[1]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[STA]:[12]:method_text:[ic void onUserApprovalStatusChange(int status) {            mBlocker.countDown();        }    }}])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[7]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[7]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[6]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[16]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[3]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[2]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[3]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[1]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[8]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[MAC]:[10]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([1:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[STA]:[1]:method_text:[            + ""SystemServiceRegistry!"");        } catch (IllegalStateException expected) {}    }}])', 1), (""([34:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[STA]:[34]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([23:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[STA]:[23]:method_text:[ is deserialized correctly from AOSP     * legacy supplicant/ipconf backup data format.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[STA]:[3]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.0 format.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[STA]:[3]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.1 format.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[STA]:[3]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.2 format.     */   ])', 1), ('([17:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[STA]:[17]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([6:/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java]:[STA]:[6]:method_text:[place,                R.string.wifi_test_network_suggestion_modification_in_place_info, 0);    }}])', 1), ('([32:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[STA]:[32]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), (""([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[STA]:[2]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[1]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[2]:method_text:[    /**     * Tests the entire connection flow using a BSSID pattern in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[MAC]:[2]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([59:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[STA]:[59]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[STA]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[STA]:[2]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[STA]:[2]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[MAC]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([36:/android/net/wifi/rtt/cts/TestBase.java]:[STA]:[36]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([47:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[47]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[4]:method_text:[gitimate. When no resources are used, the value should equal to     *   the capability.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[Fi Aware availability change we get a broadcast + the API returns     * correct status.     */   ])', 1), ('([11:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[11]:method_text:[reManager.isAvailable());    }    /**     * Validate that can attach to Wi-Fi Aware.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[1]:method_text:[spond to enable/disable and will not result in a new     * MAC address being generated.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[1]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[4]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[2]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[STA]:[1]:method_text:[        assertTrue(mWifiAwareManager.isDeviceAttached());        }        return session;    }}])', 1), ('([8:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[8]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[2]:method_text:[spond to enable/disable and will not result in a new     * MAC address being generated.     */   ])', 1), ('([10:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[10]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[1]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[5]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[5]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[MAC]:[4]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([53:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[STA]:[53]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([36:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[MAC]:[36]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([7:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[STA]:[7]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([2:/android/net/wifi/cts/MulticastLockTest.java]:[STA]:[2]:method_text:[TAG = ""MulticastLockTest"";    /**     * Verify acquire and release of Multicast locks     */   ])', 1), ('([7:/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java]:[STA]:[7]:method_text:[etwork_request_pattern,                R.string.wifi_test_network_request_pattern_info, 0);    }}])', 1), ('([15:/com/android/cts/verifier/wifi/BaseTestCase.java]:[STA]:[15]:method_text:[ when the test failed (test is done).         */        void onTestFailed(String reason);    }}])', 1), ('([45:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[45]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([8:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[8]:method_text:[nse));        assertEquals(WifiP2pManager.WIFI_P2P_STATE_ENABLED, mMyResponse.p2pState);    }   ])', 1), ('([17:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[17]:method_text:[ponse.discoveryState);        mWifiP2pManager.stopPeerDiscovery(mWifiP2pChannel, null);    }   ])', 1), ('([16:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[16]:method_text:[  assertTrue(waitForServiceResponse(mMyResponse));        return mMyResponse.deviceName;    }   ])', 1), ('([13:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[13]:method_text:[tNull(persistentGroups);        assertEquals(0, persistentGroups.getGroupList().size());    }   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[1]:method_text:[orServiceResponse(mMyResponse));            assertTrue(mMyResponse.success);        });    }   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[STA]:[1]:method_text:[   assertTrue(waitForServiceResponse(mMyResponse));        assertTrue(mMyResponse.success);    }}])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[1]:method_text:[ponse.discoveryState);        mWifiP2pManager.stopPeerDiscovery(mWifiP2pChannel, null);    }   ])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[  assertTrue(waitForServiceResponse(mMyResponse));        return mMyResponse.deviceName;    }   ])', 1), ('([2:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[2]:method_text:[orServiceResponse(mMyResponse));        });        return mMyResponse.persistentGroups;    }   ])', 1), ('([6:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[6]:method_text:[tNull(persistentGroups);        assertEquals(0, persistentGroups.getGroupList().size());    }   ])', 1), ('([3:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[3]:method_text:[orServiceResponse(mMyResponse));            assertTrue(mMyResponse.success);        });    }   ])', 1), ('([3:/android/net/wifi/cts/ConcurrencyTest.java]:[MAC]:[3]:method_text:[   assertTrue(waitForServiceResponse(mMyResponse));        assertTrue(mMyResponse.success);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[olicited_publish,                R.string.aware_data_path_pmk_unsolicited_publish_info, 0);    }}])', 1), ('([1:/android/net/wifi/cts/WifiMigrationTest.java]:[STA]:[1]:method_text:[     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData.Builder} class.     */   ])', 1), ('([15:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[STA]:[15]:method_text:[s the string was not logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([5:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[STA]:[5]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([22:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[STA]:[22]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([5:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[STA]:[5]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([4:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[STA]:[4]:method_text:[sion and expect a     * DPP URI     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([8:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[STA]:[8]:method_text:[h (IllegalArgumentException expected) {}        uiAutomation.dropShellPermissionIdentity();    }}])', 1), ('([6:/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java]:[STA]:[6]:method_text:[etwork_suggestion_ssid,                R.string.wifi_test_network_suggestion_ssid_info, 0);    }}])', 1), ('([44:/android/net/wifi/cts/TestHelper.java]:[STA]:[44]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([4:/android/net/wifi/cts/TestHelper.java]:[MAC]:[4]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([2:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[STA]:[2]:method_text:[} object can be serialized and deserialized,     *  while keeping its values unchanged.     */   ])', 1), ('([13:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[STA]:[13]:method_text:[apa.hashCode());    }    /** Test mapping wifi standard support into channel width support */   ])', 1), ('([11:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[STA]:[11]:method_text:[;        assertThat(capa.isChannelWidthSupported(ScanResult.CHANNEL_WIDTH_80MHZ)).isTrue();    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java]:[STA]:[6]:method_text:[_solicited_publish,                R.string.aware_data_path_pmk_solicited_publish_info, 0);    }}])', 1), ('([6:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java]:[STA]:[6]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1)]"	""	""	"[('STA', 255), ('MAC', 57), ('random', 14)]"	"[('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 3), ('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 3), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testGetFactoryMacAddresses CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testSuggestionBuilderNonPersistentRandomization CtsWifiTestCases]', 3), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithMacAddress CtsWifiTestCases]', 2), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 2), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsApMacRandomizationSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsConnectedMacRandomizationSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testForget CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachNoIdentity CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachDiscoveryAddressChanges CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testSendMessageFail CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathOpenOutOfBandFail CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPassphraseOutOfBandFail CtsWifiTestCases]', 2), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPmkOutOfBandFail CtsWifiTestCases]', 2), ('[com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase executeTest None]', 2), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConcurrencyTest testRequestDiscoveryState CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConcurrencyTest testRequestNetworkInfo CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConcurrencyTest testPersistentGroupOperation CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConcurrencyTest testP2pListening CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConcurrencyTest testP2pService CtsWifiTestCases]', 2), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 2), ('[android.net.wifi.p2p.cts.WifiP2pServiceRequestTest testValidRawRequest CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pServiceRequestTest testInvalidRawRequest CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity finish None]', 1), ('[com.android.cts.verifier.wifiaware.BaseTestCase executeTest None]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase executeTest None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.cts.SupplicantStateTest testIsValidState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiScoringEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithPeerHandle CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testEquals CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetOcsp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[com.android.cts.deviceowner.wificonfigcreator.WifiConfigCreatorActivity finish None]', 1), ('[android.net.wifi.cts.app.RetrieveTransportInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForPersist CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForNonPersist CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WaitForResultActivity isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultTimeStamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultConstructors CtsWifiTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockHighPerf CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockLowLatency CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiMulticastLock CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity isEmpty None]', 1), ('[android.net.wifi.passpoint.cts.HomeSpTest testAnyOis CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.HomeSpTest testAllOis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailurePsk8021X CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailure8021xEapSae CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoCurrentSecurityType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystemShouldFailNoPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystem CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetSupportedFeatures CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkResultCreation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedNotAllowedForNormalApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedBadInput CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedFailureBadEnterpriseConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkStackPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSetupWizardPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkManagedProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiSetDeviceMobilityStatePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkCarrierProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsTdlsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTrafficStateCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAutoWakeUpEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLogging CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeNonUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFactoryReset CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiNetworkConnectionStatistics CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartAndStopRestrictingAutoJoinToSubscriptionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsEnhancedOpenSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs5GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs6GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedUsableChannelsOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddRemoveSuggestionUserApprovalStatusListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest testRegisterServiceWrappers_failsWhenCalledOutsideOfSystemServiceRegistry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromLegacyBackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_0BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_1BackupFormat CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithBssidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testCharacteristics CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAvailableAwareResources CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAvailabilityStatusChange CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAwareResourcesConstructor CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.BaseTestActivity setPassFailButtonClickListeners None]', 1), ('[com.android.cts.verifier.wifi.BaseTestCase executeTest None]', 1), ('[android.net.wifi.cts.ConcurrencyTest testConcurrency CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testSetDeviceName CtsWifiTestCases]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testConfiguratorInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeResponderUriGeneration CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest testMappingWifiStandardIntoChannelWidthSupport CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
