"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-1"	"Test Available"	""	""	""	""	"9.8.10/C-1-1"	"""C-1-1] MUST obtain user consent every time the System API BUGREPORT_MODE_TELEPHONY is called to generate a report and MUST NOT prompt the user to consent to all future requests from the application. """	"09081000.670101"	"re_tag:BUGREPORT_MODE_TELEPHONY&consent BUGREPORT_MODE_TELEPHONY"	"re_tag:BUGREPORT_MODE_TELEPHONY&consent"	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-2"	"Other couldn't find"	""	""	""	""	"9.8.10/C-1-2"	"""C-1-2] MUST display and obtain explicit user consent when the reports are starting to be generated and MUST NOT return the generated report to the requesting app without explicit user consent. """	"09081000.670102"	"re_tag:consent&report"	"re_tag:consent&report"	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-3"	"Test Missing because TelephonyDebugService AND TelephonyRegistry not found in code search"	""	""	""	""	"9.8.10/C-1-3"	"""C-1-3] MUST generate requested reports containing at least the following information: TelephonyDebugService dump TelephonyRegistry dump WifiService dump ConnectivityService dump A dump of the calling package's CarrierService instance (if bound) Radio log buffer """	"09081000.670103"	"re_tag:TelephonyDebugService&TelephonyRegistry"	"re_tag:TelephonyDebugService&TelephonyRegistry"	""	""	""	"incident"	""	""	""	""	""	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-4"	Found a test but not clear added comment	"[('com.google.android.cts.deviceowner.DeviceOwnerTest', 5), ('com.android.server.cts.IncidentdTest', 4), ('android.media.cts.MediaRecorderTest', 2), ('android.autofillservice.cts.inline.InlineFilteringTest', 2), ('com.android.server.cts.ActivityManagerIncidentTest', 2), ('com.android.server.cts.SettingsIncidentTest', 2), ('android.autofillservice.cts.DatasetFilteringTest', 2), ('android.media.cts.AudioRecordTest', 2), ('android.webkit.cts.WebViewTest', 2), ('com.android.server.cts.NotificationIncidentTest', 2), ('android.permission.cts.LocationAccessCheckTest', 1), ('com.android.server.cts.UsbIncidentTest', 1), ('com.android.server.cts.AlarmManagerIncidentTest', 1), ('com.android.server.cts.PrintProtoTest', 1), ('android.telecom.cts.CallDetailsTest', 1), ('com.android.server.cts.PowerIncidentTest', 1), ('com.android.server.cts.FingerprintIncidentTest', 1), ('android.app.cts.ActivityManagerApi29Test', 1), ('com.google.android.cts.settings.PrivacyDeviceOwnerTest', 1), ('com.android.server.cts.DiskStatsProtoTest', 1), ('com.android.server.cts.PackageIncidentTest', 1), ('android.telecom.cts.ConferenceTest', 1), ('com.android.server.cts.BatteryIncidentTest', 1), ('com.android.server.cts.BatteryStatsIncidentTest', 1), ('android.permission.cts.ProviderPermissionTest', 1), ('com.android.server.cts.JobSchedulerIncidentTest', 1), ('android.hardware.cts.SensorTest', 1)]"	"[('setUp', 5), ('getInstrumentation', 4), ('getPackageManager', 4), ('getContext', 3), ('tearDown', 3), ('getTargetContext', 2), ('getName', 2), ('getDeviceOwner', 2), ('wakeupDeviceAndPressHome', 2), ('pressHome', 2), ('getContentResolver', 2), ('getSimpleName', 1), ('getUiAutomation', 1), ('getWho', 1), ('getPackage', 1), ('setOrientationNatural', 1), ('wakeUp', 1), ('pressMenu', 1), ('pressBack', 1), ('launchPrivacyAndCheckWorkPolicyInfo', 1), ('getComponentInfo', 1), ('getComponentName', 1), ('WindowManagerStateHelper', 1), ('Intent', 1), ('getDevice', 1)]"	"[('CtsMediaTestCases', 4), ('CtsAutoFillServiceTestCases', 4), ('CtsPermissionTestCases', 2), ('CtsTelecomTestCases', 2), ('CtsWebkitTestCases', 2), ('CtsAndroidAppTestCases', 1), ('CtsSensorTestCases', 1)]"	""	"9.8.10/C-1-4"	"""C-1-4] MUST NOT include the following in the generated reports: Any kind of information unrelated to connectivity debugging. Any kind of user-installed application traffic logs or detailed profiles of user-installed applications/packages (UIDs are okay, package names are not). MAY include additional information that is not associated with any user identity. (e.g. vendor logs). If device implementations include additional information (e.g vendor logs) in the bug report and that information has privacy/security/battery/storage/memory impact, they: """	"09081000.670104"	"re_tag:privacy&debug privacy"	"re_tag:privacy&debug privacy"	"UID"	""	"[('privacy', 42)]"	""	"[('[android.autofillservice.cts.DatasetFilteringTest testFilter CtsAutoFillServiceTestCases]', 2), ('[android.permission.cts.LocationAccessCheckTest getPermissionControllerPackageName CtsPermissionTestCases]', 1), ('[com.android.server.cts.IncidentdTest testIncidentReportDumpAuto None]', 1), ('[com.android.server.cts.IncidentdTest testIncidentReportDumpExplicit None]', 1), ('[com.android.server.cts.IncidentdTest testIncidentReportDumpLocal None]', 1), ('[com.android.server.cts.UsbIncidentTest testUsbServiceDump None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest disableWorkPolicyInfoActivity None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest testDeviceOwnerWithInfo None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest testDeviceOwnerWithoutInfo None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest testNonDeviceOwnerWithInfo None]', 1), ('[com.google.android.cts.deviceowner.DeviceOwnerTest testNonDeviceOwnerWithoutInfo None]', 1), ('[android.media.cts.MediaRecorderTest testPrivacySensitive CtsMediaTestCases]', 1), ('[android.media.cts.MediaRecorderTest testPrivacySensitiveDefaults CtsMediaTestCases]', 1), ('[android.autofillservice.cts.inline.InlineFilteringTest testFiltering_privacy CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.inline.InlineFilteringTest testFiltering_privacy_textReplacement CtsAutoFillServiceTestCases]', 1), ('[com.android.server.cts.ActivityManagerIncidentTest testDumpServices None]', 1), ('[com.android.server.cts.ActivityManagerIncidentTest testDumpProcesses None]', 1), ('[com.android.server.cts.AlarmManagerIncidentTest testAlarmManagerServiceDump None]', 1), ('[com.android.server.cts.PrintProtoTest testDump None]', 1), ('[com.android.server.cts.SettingsIncidentTest testBasicStructure None]', 1), ('[android.telecom.cts.CallDetailsTest testCallPropertyPropagation CtsTelecomTestCases]', 1), ('[android.media.cts.AudioRecordTest testPrivacySensitiveBuilder CtsMediaTestCases]', 1), ('[android.media.cts.AudioRecordTest testPrivacySensitiveDefaults CtsMediaTestCases]', 1), ('[android.webkit.cts.WebViewTest testStartSafeBrowsingInvokesCallback CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testGetSafeBrowsingPrivacyPolicyUrl CtsWebkitTestCases]', 1), ('[com.android.server.cts.PowerIncidentTest testPowerServiceDump None]', 1), ('[com.android.server.cts.NotificationIncidentTest testRankingConfig None]', 1), ('[com.android.server.cts.NotificationIncidentTest testZenMode None]', 1), ('[com.android.server.cts.FingerprintIncidentTest testFingerprintServiceDump None]', 1), ('[android.app.cts.ActivityManagerApi29Test clearHistory CtsAndroidAppTestCases]', 1), ('[com.android.server.cts.DiskStatsProtoTest testDump None]', 1), ('[com.android.server.cts.PackageIncidentTest testPackageServiceDump None]', 1), ('[android.telecom.cts.ConferenceTest testConferenceProperties CtsTelecomTestCases]', 1), ('[com.android.server.cts.BatteryIncidentTest testBatteryServiceDump None]', 1), ('[com.android.server.cts.BatteryStatsIncidentTest testBatteryStatsServiceDump None]', 1), ('[android.permission.cts.ProviderPermissionTest testManageDocuments CtsPermissionTestCases]', 1), ('[com.android.server.cts.JobSchedulerIncidentTest testJobSchedulerServiceDump None]', 1), ('[android.hardware.cts.SensorTest testRegisterTwiceWithSameSensor CtsSensorTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/IncidentdTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFilteringTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/ActivityManagerIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/SettingsIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DatasetFilteringTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/NotificationIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/UsbIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/AlarmManagerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/PrintProtoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallDetailsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/PowerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/FingerprintIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/DiskStatsProtoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/PackageIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/ConferenceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/BatteryIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/BatteryStatsIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/ProviderPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/JobSchedulerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorTest.java', 1)]"	"[('(4,privacy,/android/permission/cts/LocationAccessCheckTest.java)', 1), ('(1,re_tag:privacy&debug,/com/android/server/cts/IncidentdTest.java)', 1), ('(4,privacy,/com/android/server/cts/IncidentdTest.java)', 1), ('(1,re_tag:privacy&debug,/com/android/server/cts/UsbIncidentTest.java)', 1), ('(7,privacy,/com/android/server/cts/UsbIncidentTest.java)', 1), ('(10,privacy,/com/google/android/cts/deviceowner/DeviceOwnerTest.java)', 1), ('(9,privacy,/android/media/cts/MediaRecorderTest.java)', 1), ('(3,privacy,/android/autofillservice/cts/inline/InlineFilteringTest.java)', 1), ('(8,privacy,/com/android/server/cts/ActivityManagerIncidentTest.java)', 1), ('(5,privacy,/com/android/server/cts/AlarmManagerIncidentTest.java)', 1), ('(6,privacy,/com/android/server/cts/PrintProtoTest.java)', 1), ('(14,privacy,/com/android/server/cts/SettingsIncidentTest.java)', 1), ('(2,privacy,/android/autofillservice/cts/DatasetFilteringTest.java)', 1), ('(2,privacy,/android/telecom/cts/CallDetailsTest.java)', 1), ('(9,privacy,/android/media/cts/AudioRecordTest.java)', 1), ('(5,privacy,/android/webkit/cts/WebViewTest.java)', 1), ('(1,privacy,/com/android/server/cts/PowerIncidentTest.java)', 1), ('(4,privacy,/com/android/server/cts/NotificationIncidentTest.java)', 1), ('(1,privacy,/com/android/server/cts/FingerprintIncidentTest.java)', 1), ('(3,privacy,/android/app/cts/ActivityManagerApi29Test.java)', 1), ('(1,privacy,/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java)', 1), ('(2,privacy,/com/android/server/cts/DiskStatsProtoTest.java)', 1), ('(2,privacy,/com/android/server/cts/PackageIncidentTest.java)', 1), ('(3,privacy,/android/telecom/cts/ConferenceTest.java)', 1), ('(1,privacy,/com/android/server/cts/BatteryIncidentTest.java)', 1), ('(1,privacy,/com/android/server/cts/BatteryStatsIncidentTest.java)', 1), ('(1,privacy,/android/permission/cts/ProviderPermissionTest.java)', 1), ('(3,privacy,/com/android/server/cts/JobSchedulerIncidentTest.java)', 1), ('(1,privacy,/android/hardware/cts/SensorTest.java)', 1)]"	"[('([4:/android/permission/cts/LocationAccessCheckTest.java]:[privacy]:[4]:method_text:[Unbind() throws Throwable {        unbindService();        getNotification(true, true);    }   ])', 1), ('([1:/com/android/server/cts/IncidentdTest.java]:[privacy]:[1]:method_text:[ncidentdTest extends ProtoDumpTestCase {    private static final String TAG = ""IncidentdTest"";   ])', 1), ('([1:/com/android/server/cts/IncidentdTest.java]:[privacy]:[1]:method_text:[tDumpAuto() throws Exception {        testIncidentReportDump(PRIVACY_AUTO, ""AUTOMATIC"");    }   ])', 1), ('([1:/com/android/server/cts/IncidentdTest.java]:[privacy]:[1]:method_text:[plicit() throws Exception {        testIncidentReportDump(PRIVACY_EXPLICIT, ""EXPLICIT"");    }   ])', 1), ('([1:/com/android/server/cts/IncidentdTest.java]:[privacy]:[1]:method_text:[ReportDumpLocal() throws Exception {        testIncidentReportDump(PRIVACY_LOCAL, ""LOCAL"");    }}])', 1), ('([7:/com/android/server/cts/UsbIncidentTest.java]:[privacy]:[7]:method_text:[Level == PRIVACY_AUTO) {            assertTrue(udfp.getSerialNumber().isEmpty());        }    }}])', 1), ('([3:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[privacy]:[3]:method_text:[evice owner and has work policy info, then we should have a Privacy     * entry for it.     */   ])', 1), (""([2:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[privacy]:[2]:method_text:[but doesn't have work policy info, then we shouldn't     * have a Privacy entry for it.     */   ])"", 1), ('([2:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[privacy]:[2]:method_text:[ctive device owner, then we should not have a Privacy entry for work     * policy info.     */   ])', 1), ('([2:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[privacy]:[2]:method_text:[e work policy info, then we should     * not have a Privacy entry for work policy info.     */   ])', 1), ('([1:/com/google/android/cts/deviceowner/DeviceOwnerTest.java]:[privacy]:[1]:method_text:[ettings entry shouldn\'t be present"",                launchPrivacyAndCheckWorkPolicyInfo());    }}])', 1), ('([6:/android/media/cts/MediaRecorderTest.java]:[privacy]:[6]:method_text:[cyOn, mMediaRecorder.isPrivacySensitive());            mMediaRecorder.reset();        }    }   ])', 1), ('([3:/android/media/cts/MediaRecorderTest.java]:[privacy]:[3]:method_text:[.AudioSource.VOICE_COMMUNICATION);        assertTrue(mMediaRecorder.isPrivacySensitive());    }}])', 1), ('([2:/android/autofillservice/cts/inline/InlineFilteringTest.java]:[privacy]:[2]:method_text:[e full text is replaced, as opposed to     * individual characters being added/removed.     */   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineFilteringTest.java]:[privacy]:[1]:method_text:[.setText(""""));        mUiBot.waitForIdleSync();        mUiBot.assertDatasets(""sergey"");    }   ])', 1), ('([4:/com/android/server/cts/ActivityManagerIncidentTest.java]:[privacy]:[4]:method_text:[eDescriptor()));        }    }    /**     * Tests activity manager dumps processes.     */   ])', 1), ('([4:/com/android/server/cts/ActivityManagerIncidentTest.java]:[privacy]:[4]:method_text:[t : attp.getPackageTimesList()) {            assertTrue(pt.getDurationMs() >= 0);        }    }}])', 1), ('([5:/com/android/server/cts/AlarmManagerIncidentTest.java]:[privacy]:[5]:method_text:[);        // Nesting should be non-negative.        assertTrue(0 <= filter.getNesting());    }}])', 1), ('([6:/com/android/server/cts/PrintProtoTest.java]:[privacy]:[6]:method_text:[ws DeviceNotAvailableException {        return device.hasFeature(""android.software.print"");    }}])', 1), ('([1:/com/android/server/cts/SettingsIncidentTest.java]:[privacy]:[1]:method_text:[ for the user and there are some global     * settings.     *     * @throws Exception     */   ])', 1), ('([13:/com/android/server/cts/SettingsIncidentTest.java]:[privacy]:[13]:method_text:[      throw new AssertionError(""Failed for setting "" + setting, e);            }        }    }}])', 1), ('([1:/android/autofillservice/cts/DatasetFilteringTest.java]:[privacy]:[1]:method_text:[show the datasets now to protect privacy.            mUiBot.assertDatasets(c);        }    }   ])', 1), ('([1:/android/autofillservice/cts/DatasetFilteringTest.java]:[privacy]:[1]:method_text:[callback.assertUiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }   ])', 1), ('([2:/android/telecom/cts/CallDetailsTest.java]:[privacy]:[2]:method_text:[  /**     * Tests whether the getCallerDisplayName() getter returns the correct object.     */   ])', 1), ('([6:/android/media/cts/AudioRecordTest.java]:[privacy]:[6]:method_text:[rtEquals(privacyOn, record.isPrivacySensitive());            record.release();        }    }   ])', 1), ('([3:/android/media/cts/AudioRecordTest.java]:[privacy]:[3]:method_text:[        .build();        assertTrue(record.isPrivacySensitive());        record.release();    }}])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[privacy]:[1]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([4:/android/webkit/cts/WebViewTest.java]:[privacy]:[4]:method_text:[on e) {            fail(""The privacy policy URL should be a well-formed URL"");        }    }   ])', 1), ('([1:/com/android/server/cts/PowerIncidentTest.java]:[privacy]:[1]:method_text:[           assertTrue(0 <= wl.getUid());            assertTrue(0 <= wl.getPid());        }    }}])', 1), ('([1:/com/android/server/cts/NotificationIncidentTest.java]:[privacy]:[1]:method_text:[() <= VISIBILITY_PUBLIC));    }    // Tests default state: zen mode is a valid/expected value   ])', 1), ('([3:/com/android/server/cts/NotificationIncidentTest.java]:[privacy]:[3]:method_text:[Descriptor().getValues()                .contains(record.getState().getValueDescriptor()));    }}])', 1), ('([1:/com/android/server/cts/FingerprintIncidentTest.java]:[privacy]:[1]:method_text:[e.fingerprint is not supported."");            return false;        }        return true;    }}])', 1), ('([3:/android/app/cts/ActivityManagerApi29Test.java]:[privacy]:[3]:method_text:[ * , even its capability is zero, it still has location access.     * @throws Exception     */   ])', 1), ('([1:/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java]:[privacy]:[1]:method_text:[    super.tearDown();    }    /** The case: app is the device owner, has work policy info. */   ])', 1), ('([2:/com/android/server/cts/DiskStatsProtoTest.java]:[privacy]:[2]:method_text:[ssertTrue(dsfs.getAvailableSpaceKb() >= 0);        assertTrue(dsfs.getTotalSpaceKb() >= 0);    }}])', 1), ('([2:/com/android/server/cts/PackageIncidentTest.java]:[privacy]:[2]:method_text:[dump.getMessagesList()) {                assertTrue(msg.isEmpty());            }        }    }}])', 1), ('([3:/android/telecom/cts/ConferenceTest.java]:[privacy]:[3]:method_text:[ed to     * {@link android.telecom.Call.Callback#onDetailsChanged(Call, Call.Details)}.     */   ])', 1), ('([1:/com/android/server/cts/BatteryIncidentTest.java]:[privacy]:[1]:method_text:[     boolean hasBattery = batteryinfo.contains(""present: true"");        return hasBattery;    }}])', 1), ('([1:/com/android/server/cts/BatteryStatsIncidentTest.java]:[privacy]:[1]:method_text:[estTimerProto(w.getBackgroundScan());        testTimerProto(u.getWifiMulticastWakelock());    }}])', 1), ('([1:/android/permission/cts/ProviderPermissionTest.java]:[privacy]:[1]:method_text:[@code WRITE_MEDIA_STORAGE}, that     * would be a CDD violation and a privacy incident.     */   ])', 1), ('([3:/com/android/server/cts/JobSchedulerIncidentTest.java]:[privacy]:[3]:method_text:[oProto(tj.getInfo(), filterLevel);            assertTrue(0 <= tj.getSourceUid());        }    }}])', 1), ('([1:/android/hardware/cts/SensorTest.java]:[privacy]:[1]:method_text:[  */    // TODO: remove when parametrized tests are supported and EventTimestampSynchronization   ])', 1)]"	""	""	""	""	""
