[('([1:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[1]
:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ]
)', 3), ('([2:/android/media/cts/AudioManagerTest.java]
:[DND]
:[2]
:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ]
)', 2), ('([3:/android/media/cts/AudioManagerTest.java]
:[DND]
:[3]
:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ]
)', 2), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]
:[DND]
:[2]
:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ]
)', 2), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]
:[DND]
:[1]
:method_text:[    /**      * Test: Retrieving security logs should update the corresponding timestamp.      */    ]
)', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]
:[DND]
:[4]
:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a]
)', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]
:[DND]
:[2]
:method_text:[TestVibrateRinger());         tests.add(new TestSetRingerModePolicyAccess());         // TODO: Add a]
)', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]
:[DND]
:[16]
:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ]
)', 1), ('([8:/android/media/cts/AudioManagerTest.java]
:[DND]
:[8]
:method_text:[      @AppModeFull(reason = "Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS")    ]
)', 1), ('([1:/android/media/cts/AudioManagerTest.java]
:[DND]
:[1]
:method_text:[ckageName(), getInstrumentation(), true);             testStreamMuting(stream);         }     }     ]
)', 1), ('([1:/android/media/cts/AudioManagerTest.java]
:[DND]
:[1]
:method_text:[etStreamMute failed.",                     mAudioManager.isStreamMute(stream));         }     }     ]
)', 1), ('([4:/android/media/cts/AudioManagerTest.java]
:[DND]
:[4]
:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ]
)', 1), ('([7:/android/media/cts/AudioManagerTest.java]
:[DND]
:[7]
:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ]
)', 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]
:[DND]
:[1]
:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.      */    ]
)', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]
:[DND]
:[2]
:method_text:[InterruptedException ex) {                 // pass             }         }         return n;     } }]
)', 1), ('([1:/android/app/cts/NotificationChannelTest.java]
:[DND]
:[1]
:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ]
)', 1), ('([1:/android/app/cts/NotificationChannelTest.java]
:[DND]
:[1]
:method_text:[icationChannel.CREATOR.createFromParcel(parcel);         assertEquals(channel, channel1);     }     ]
)', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]
:[DND]
:[3]
:method_text:[result mismatch,", expectedResult,                     results.get(resultKey));         }     }     ]
)', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]
:[DND]
:[3]
:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ]
)', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]
:[DND]
:[1]
:method_text:[nd after permission lost");         } catch (Exception e) {             // pass         }     }     ]
)', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]
:[DND]
:[2]
:method_text:[ } else {             Log.d(TAG, service.getName() + " has a correct bind state");         }     } }]
)', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]
:[DND]
:[6]
:method_text:[        throw new IOException("Could not read stdout of command:\xa0" + command, e);         }     }  }]
)', 1), ('([4:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[4]
:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ]
)', 1), ('([5:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[5]
:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ]
)', 1), ('([3:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[3]
:method_text:[) != Notification.VISIBILITY_SECRET);         assertFalse(createdChannel.canBypassDnd());     }     ]
)', 1), ('([4:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[4]
:method_text:[te(id, condition);          assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ]
)', 1), ('([8:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[8]
:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ]
)', 1), ('([6:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[6]
:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ]
)', 1), ('([7:/android/app/cts/NotificationManagerTest.java]
:[DND]
:[7]
:method_text:[cZenRule(secondId);         assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ]
)', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]
:[DND]
:[1]
:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ]
)', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]
:[DND]
:[1]
:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ]
)', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]
:[DND]
:[1]
:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);         super.tearDown();     }     ]
)', 1), ("([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]
:[DND]
:[1]
:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ]
)", 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]
:[DND]
:[1]
:method_text:[ption {         mDpm.uninstallCaCert(null, TEST_CA.getBytes());         super.tearDown();     }     ]
)', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]
:[DND]
:[2]
:method_text:[ent.getActivity(                 mContext, 0, new Intent(mContext, this.getClass()), 0);     }      ]
)', 1), ('([2:/android/ndef/cts/NdefTest.java]
:[DND]
:[2]
:method_text:[on for input " + bytesToString(b));             } catch (FormatException e) { }         }     }     ]
)', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]
:[DND]
:[2]
:method_text:[ {       return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);     } }]
)', 1)]
