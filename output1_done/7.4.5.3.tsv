"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-1"	""	"[('android.net.wifi.cts.WifiManagerTest', 2)]"	""	"[('CtsWifiTestCases', 2)]"	""	"7.4.5.3/C-1-1"	"""C-1-1] MUST provide a captive portal application to handle the intent ACTION_CAPTIVE_PORTAL_SIGN_IN and display the captive portal login page, by sending that intent, on call to the System API ConnectivityManager#startCaptivePortalApp(Network, Bundle). """	"07040503.670101"	"ACTION_CAPTIVE_PORTAL_SIGN_IN"	""	""	""	"[('ACTION_CAPTIVE_PORTAL_SIGN_IN', 2)]"	"net"	"[('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 2)]"	"[('/android/net/wifi/cts/WifiManagerTest.java', 4)]"	"[('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ACTION_CAPTIVE_PORTAL_SIGN_IN]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.      */    ])', 2)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-2"	""	"[('android.net.wifi.cts.WifiManagerTest', 4), ('android.net.cts.NetworkInfo_DetailedStateTest', 4)]"	""	"[('CtsWifiTestCases', 4)]"	""	"7.4.5.3/C-1-2"	"""C-1-2] MUST perform detection of captive portals and support login through the captive portal application when the device is connected to any network type, including cellular/mobile network, WiFi, Ethernet or Bluetooth. """	"07040503.670102"	"portal captive"	"captive portal"	""	""	"[('portal', 4), ('captive', 4)]"	"net"	"[('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 4), ('[android.net.cts.NetworkInfo_DetailedStateTest testValues None]', 4)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkInfo_DetailedStateTest.java', 4)]"	"[('/android/net/wifi/cts/WifiManagerTest.java', 8), ('/android/net/cts/NetworkInfo_DetailedStateTest.java', 8)]"	"[('([2:/android/net/wifi/cts/WifiManagerTest.java]:[portal]:[2]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.      */    ])', 2), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[captive]:[2]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.      */    ])', 2), ('([1:/android/net/cts/NetworkInfo_DetailedStateTest.java]:[portal]:[1]:method_text:[INK, expected[11]);         assertEquals(DetailedState.CAPTIVE_PORTAL_CHECK, expected[12]);     }  }])', 2), ('([1:/android/net/cts/NetworkInfo_DetailedStateTest.java]:[captive]:[1]:method_text:[INK, expected[11]);         assertEquals(DetailedState.CAPTIVE_PORTAL_CHECK, expected[12]);     }  }])', 2)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-3"	""	"[('com.android.cts.net.HostsideRestrictBackgroundNetworkTests', 8), ('com.android.cts.net.hostside.DataSaverModeTest', 7), ('android.net.cts.Ikev2VpnTest', 6), ('android.net.cts.ConnectivityManagerTest', 5), ('android.net.cts.DnsResolverTest', 3), ('android.net.wifi.cts.WifiManagerTest', 3), ('com.android.cts.net.hostside.MixedModesTest', 3), ('com.android.cts.net.hostside.NetworkCallbackTest', 2), ('com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase', 2), ('com.android.cts.net.hostside.AbstractAppIdleTestCase', 2), ('android.net.cts.MultinetworkApiTest', 2), ('android.net.wifi.cts.WifiMigrationTest', 1), ('android.net.wifi.cts.ConcurrencyTest', 1), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 1), ('com.android.cts.net.hostside.AbstractBatterySaverModeTestCase', 1), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 1), ('android.net.wifi.cts.ScanResultTest', 1), ('android.net.wifi.cts.WifiLocationInfoTest', 1), ('android.net.wifi.cts.WifiBackupRestoreTest', 1), ('com.android.cts.net.hostside.VpnTest', 1), ('com.android.cts.net.hostside.AbstractDozeModeTestCase', 1)]"	"[('setUp', 25), ('getContext', 16), ('tearDown', 9), ('getInstrumentation', 9), ('notify', 6), ('Object', 5), ('BroadcastReceiver', 4), ('notifyAll', 4), ('getAction', 3), ('getPackageName', 3), ('getPackageManager', 3), ('getContentResolver', 2), ('storePrivateDnsSetting', 2), ('restorePrivateDnsSetting', 2), ('getSimpleName', 2), ('MySync', 2), ('bind', 2), ('unbind', 2), ('getResources', 2), ('getInstance', 1), ('getMainLooper', 1), ('run', 1), ('getBytes', 1), ('getScanResults', 1), ('getState', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MyResponse', 1), ('RequiredPropertiesRule', 1), ('MeterednessConfigurationRule', 1), ('getConnectivityManager', 1), ('getResultData', 1), ('getRestrictBackgroundStatus', 1), ('assertBackgroundState', 1), ('assertForegroundNetworkAccess', 1), ('assertForegroundState', 1), ('assertForegroundServiceNetworkAccess', 1), ('assertForegroundServiceState', 1), ('assertsForegroundAlwaysHasNetworkAccess', 1), ('setUpClass', 1), ('IntentFilter', 1), ('supportedHardware', 1), ('getTargetContext', 1), ('waitForIdle', 1), ('stopVpn', 1), ('turnBatteryOn', 1), ('getUiAutomation', 1), ('cellConnectAttempted', 1)]"	"[('CtsWifiTestCases', 10)]"	""	"7.4.5.3/C-1-3"	"""C-1-3] MUST support logging in to captive portals using cleartext DNS when the device is configured to use private DNS strict mode. """	"07040503.670103"	"logging strict"	"logging strict"	"DNS"	""	"[('strict', 43), ('logging', 10)]"	"net"	"[('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainInlineWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testPrivateDnsBypass None]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfilePsk None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfileUsernamePassword None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfileDigitalSignature None]', 1), ('[android.net.cts.Ikev2VpnTest testDeleteVpnProfile None]', 1), ('[android.net.cts.Ikev2VpnTest testStartVpnProfileNoPreviousConsent None]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAutoWakeUpEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_disabled None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_whitelisted None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_enabled None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_blacklisted None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_reinstall None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_requiredWhitelistedPackages None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testAppIdleAndBatterySaver_tempPowerSaveAndAppIdleWhitelists None]', 1), ('[com.android.cts.net.hostside.NetworkCallbackTest TestNetworkCallback None]', 1), ('[com.android.cts.net.hostside.NetworkCallbackTest testOnBlockedStatusChanged_dataSaver None]', 1), ('[com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase finishActivity None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_disabled None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_whitelisted None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_enabled None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_blacklisted None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_requiredWhitelistedPackages None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testBroadcastNotSentOnUnsupportedDevices None]', 1), ('[com.android.cts.net.hostside.AbstractBatterySaverModeTestCase registerBroadcastReceiver None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[com.android.cts.net.hostside.MixedModesTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testDataAndBatterySaverModes_meteredNetwork None]', 1), ('[com.android.cts.net.hostside.MixedModesTest testDataAndBatterySaverModes_nonMeteredNetwork None]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[com.android.cts.net.hostside.AbstractAppIdleTestCase registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.AbstractAppIdleTestCase testAppIdleNetworkAccess_whenCharging None]', 1), ('[android.net.cts.ConnectivityManagerTest disconnectFromCell None]', 1), ('[android.net.cts.ConnectivityManagerTest testRequestNetworkCallback_onUnavailable None]', 1), ('[android.net.cts.ConnectivityManagerTest testRestrictedNetworks None]', 1), ('[android.net.cts.ConnectivityManagerTest testSocketKeepaliveUnprivileged None]', 1), ('[android.net.cts.ConnectivityManagerTest testRestrictedNetworkPermission None]', 1), ('[com.android.cts.net.hostside.AbstractDozeModeTestCase registerBroadcastReceiver None]', 1), ('[android.net.cts.MultinetworkApiTest getTestableNetworks None]', 1), ('[android.net.cts.MultinetworkApiTest testResNApiNXDomainPrivateDns None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 8), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/DataSaverModeTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/MixedModesTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/NetworkCallbackTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/AbstractAppIdleTestCase.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/MultinetworkApiTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/AbstractBatterySaverModeTestCase.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/AbstractDozeModeTestCase.java', 1)]"	"[('/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 9), ('/com/android/cts/net/hostside/DataSaverModeTest.java', 8), ('/android/net/cts/Ikev2VpnTest.java', 7), ('/android/net/cts/ConnectivityManagerTest.java', 6), ('/android/net/cts/DnsResolverTest.java', 4), ('/android/net/wifi/cts/WifiManagerTest.java', 4), ('/com/android/cts/net/hostside/MixedModesTest.java', 4), ('/com/android/cts/net/hostside/NetworkCallbackTest.java', 3), ('/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java', 3), ('/com/android/cts/net/hostside/AbstractAppIdleTestCase.java', 3), ('/android/net/cts/MultinetworkApiTest.java', 3), ('/android/net/wifi/cts/WifiMigrationTest.java', 2), ('/android/net/wifi/cts/ConcurrencyTest.java', 2), ('/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 2), ('/com/android/cts/net/hostside/AbstractBatterySaverModeTestCase.java', 2), ('/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/android/net/wifi/cts/ScanResultTest.java', 2), ('/android/net/wifi/cts/WifiLocationInfoTest.java', 2), ('/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/com/android/cts/net/hostside/VpnTest.java', 2), ('/com/android/cts/net/hostside/AbstractDozeModeTestCase.java', 2)]"	"[('([1:/android/net/cts/Ikev2VpnTest.java]:[strict]:[1]:method_text:[       assertNull(profile.getRsaPrivateKey());         assertNull(profile.getUserCert());     }     ])', 2), ('([1:/android/net/cts/DnsResolverTest.java]:[strict]:[1]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[strict]:[2]:method_text:[              callback.waitForAnswer());             callback.assertNXDomain();         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[strict]:[2]:method_text:[   queryV6 ? !callback.hasIpv4Answer() : !callback.hasIpv6Answer());             }         }     } }])', 1), ('([2:/android/net/wifi/cts/WifiMigrationTest.java]:[logging]:[2]:method_text:[    /**      * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.      */    ])', 1), ('([12:/android/net/cts/Ikev2VpnTest.java]:[strict]:[12]:method_text:[EST_MTU, profile.getMaxMtu());         assertFalse(profile.isRestrictedToTestNetworks());     }     ])', 1), ('([2:/android/net/cts/Ikev2VpnTest.java]:[strict]:[2]:method_text:[sVpnMgr.provisionVpnProfile(profile);         assertEquals(expectIntent, intent != null);     }     ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[strict]:[1]:method_text:[due to missing profile"");         } catch (IllegalArgumentException expected) {         }     }     ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[strict]:[1]:method_text:[ != null) {                 tnm.teardownTestNetwork(testNetwork);             }         }     }     ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[logging]:[7]:method_text:[);         }         return -1;     }      /**      * Test creation of WifiManager Lock.      */    ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[logging]:[2]:method_text:[tVerboseLoggingEnabled(boolean)} &      * {@link WifiManager#isVerboseLoggingEnabled()}.      */    ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[logging]:[6]:method_text:[u add the      * networks back after reset, the ownership of saved networks will change.      */    ])', 1), ('([7:/android/net/wifi/cts/ConcurrencyTest.java]:[logging]:[7]:method_text:[to EnabledState         assertNotNull(mMySync.expectedNetworkInfo);          return true;     }     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[   /**************************      * Data Saver Mode tests. *      **************************/     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[_PKG + "".DataSaverModeTest"",                 ""testGetRestrictBackgroundStatus_disabled"");     }     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[G + "".DataSaverModeTest"",                 ""testGetRestrictBackgroundStatus_whitelisted"");     }     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[T_PKG + "".DataSaverModeTest"",                 ""testGetRestrictBackgroundStatus_enabled"");     }     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[G + "".DataSaverModeTest"",                 ""testGetRestrictBackgroundStatus_blacklisted"");     }     ])', 1), ('([4:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[4]:method_text:[groundWhitelist(oldUid, false);         assertRestrictBackgroundWhitelist(newUid, false);     }     ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[1]:method_text:[odeTest"",                 ""testGetRestrictBackgroundStatus_requiredWhitelistedPackages"");     }     ])', 1), ('([5:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[strict]:[5]:method_text:[esult = runCommand(""cmd deviceidle enabled deep"").trim();         return result.equals(""1"");     } }])', 1), ('([7:/com/android/cts/net/hostside/NetworkCallbackTest.java]:[strict]:[7]:method_text:[e(false);         unregisterNetworkCallback();     }      @RequiredProperties({DATA_SAVER_MODE})    ])', 1), ('([6:/com/android/cts/net/hostside/NetworkCallbackTest.java]:[strict]:[6]:method_text:[ration.resetNetworkMeteredness();         }     }      @RequiredProperties({BATTERY_SAVER_MODE})    ])', 1), ('([5:/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java]:[strict]:[5]:method_text:[ION_REMOTE_INPUT = ""ACTION_REMOTE_INPUT"";      // TODO: Update BatteryManager.BATTERY_PLUGGED_ANY as])', 1), (""([33:/com/android/cts/net/hostside/AbstractRestrictBackgroundNetworkTestCase.java]:[strict]:[33]:method_text:[ult so it's displayed on log and failure messages.          */         String getExpected();     } }])"", 1), ('([7:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[logging]:[7]:method_text:[ilityStatsEntry} retrieved from      * {@link WifiManager.OnWifiUsabilityStatsListener}.      */    ])', 1), ('([10:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[10]:method_text:[own() throws Exception {         super.tearDown();          setRestrictBackground(false);     }     ])', 1), ('([6:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[6]:method_text:[Access();         assertDataSaverStatusOnBackground(RESTRICT_BACKGROUND_STATUS_DISABLED);     }     ])', 1), ('([11:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[11]:method_text:[kAccess();         assertDataSaverStatusOnBackground(RESTRICT_BACKGROUND_STATUS_ENABLED);     }     ])', 1), ('([9:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[9]:method_text:[kAccess();         stopForegroundService();         assertBackgroundNetworkAccess(false);     }     ])', 1), ('([21:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[21]:method_text:[(RESTRICT_BACKGROUND_STATUS_DISABLED);         assertsForegroundAlwaysHasNetworkAccess();     }     ])', 1), ('([2:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[2]:method_text:[  }     }      @RequiredProperties({NO_DATA_SAVER_MODE})     @CddTest(requirement=""7.4.7/C-2-2"")    ])', 1), ('([8:/com/android/cts/net/hostside/DataSaverModeTest.java]:[strict]:[8]:method_text:[        assertBackgroundNetworkAccess(expectedStatus != RESTRICT_BACKGROUND_STATUS_ENABLED);     } }])', 1), ('([1:/com/android/cts/net/hostside/AbstractBatterySaverModeTestCase.java]:[strict]:[1]:method_text:[rDown() throws Exception {         super.tearDown();          setBatterySaverMode(false);     }     ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[logging]:[7]:method_text:[     /**      * Tests the entire connection flow using a specific SSID in the specifier.      */    ])', 1), ('([8:/com/android/cts/net/hostside/MixedModesTest.java]:[strict]:[8]:method_text:[etworks.      */     @RequiredProperties({DATA_SAVER_MODE, BATTERY_SAVER_MODE, METERED_NETWORK})    ])', 1), ('([11:/com/android/cts/net/hostside/MixedModesTest.java]:[strict]:[11]:method_text:[rks.      */     @RequiredProperties({DATA_SAVER_MODE, BATTERY_SAVER_MODE, NON_METERED_NETWORK})    ])', 1), ('([10:/com/android/cts/net/hostside/MixedModesTest.java]:[strict]:[10]:method_text:[saver modes      * are enabled.      */     @RequiredProperties({DOZE_MODE, BATTERY_SAVER_MODE})    ])', 1), ('([7:/android/net/wifi/cts/ScanResultTest.java]:[logging]:[7]:method_text:[          mMySync.wait(WAIT_MSEC);         return mMySync.expectedState == expectedState;     }     ])', 1), ('([7:/android/net/wifi/cts/WifiLocationInfoTest.java]:[logging]:[7]:method_text:[_NAME,                 WIFI_LOCATION_TEST_APP_RETRIEVE_CONNECTION_INFO_SERVICE), status);     }     ])', 1), (""([7:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[logging]:[7]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.      */    ])"", 1), ('([11:/com/android/cts/net/hostside/VpnTest.java]:[strict]:[11]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1), ('([1:/com/android/cts/net/hostside/AbstractAppIdleTestCase.java]:[strict]:[1]:method_text:[wn();          executeSilentShellCommand(""cmd battery reset"");         setAppIdle(false);     }     ])', 1), (""([1:/com/android/cts/net/hostside/AbstractAppIdleTestCase.java]:[strict]:[1]:method_text:[since it's not idle         turnBatteryOn();         assertBackgroundNetworkAccess(true);     }     ])"", 1), ('([2:/android/net/cts/ConnectivityManagerTest.java]:[strict]:[2]:method_text:[he network may not be connected or ready yet         return mCtsNetUtils.connectToWifi();     }     ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[strict]:[1]:method_text:[*/     @AppModeFull(reason = ""CHANGE_NETWORK_STATE permission can\'t be granted to instant apps"")    ])', 1), ('([4:/android/net/cts/ConnectivityManagerTest.java]:[strict]:[4]:method_text:[etered networks.      */     @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")    ])', 1), ('([2:/android/net/cts/ConnectivityManagerTest.java]:[strict]:[2]:method_text:[ee. b/144679405.      */     @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")    ])', 1), ('([6:/android/net/cts/ConnectivityManagerTest.java]:[strict]:[6]:method_text:[tedly succeeded"");                 } catch (IOException expected) {}             }         }     } }])', 1), ('([1:/com/android/cts/net/hostside/AbstractDozeModeTestCase.java]:[strict]:[1]:method_text:[void tearDown() throws Exception {         super.tearDown();          setDozeMode(false);     }     ])', 1), ('([1:/android/net/cts/MultinetworkApiTest.java]:[strict]:[1]:method_text:[  testableNetworks.size() >= 1);         return testableNetworks.toArray(new Network[0]);     }     ])', 1), ('([2:/android/net/cts/MultinetworkApiTest.java]:[strict]:[2]:method_text:[        }         } finally {             mCtsNetUtils.restorePrivateDnsSetting();         }     } }])', 1)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-4"	""	"[('com.android.cts.net.hostside.VpnTest', 1)]"	"[('getInstrumentation', 3), ('Object', 2), ('setUp', 2), ('getPackageName', 2), ('supportedHardware', 1), ('getContext', 1), ('getPackageManager', 1), ('storePrivateDnsSetting', 1), ('getTargetContext', 1), ('bind', 1), ('waitForIdle', 1), ('tearDown', 1), ('restorePrivateDnsSetting', 1), ('unbind', 1), ('stopVpn', 1)]"	""	""	"7.4.5.3/C-1-4"	"""C-1-4] MUST use encrypted DNS as per the SDK documentation for android.net.LinkProperties.getPrivateDnsServerName and android.net.LinkProperties.isPrivateDnsActive for all network traffic that is not explicitly communicating with the captive portal. """	"07040503.670104"	"isPrivateDnsActive android.net.LinkProperties.getPrivateDnsServerName android.net.LinkProperties.isPrivateDnsActive getPrivateDnsServerName"	"getPrivateDnsServerName isPrivateDnsActive"	"DNS"	""	"[('getPrivateDnsServerName', 1)]"	"net"	"[('[com.android.cts.net.hostside.VpnTest finish None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1)]"	"[('/com/android/cts/net/hostside/VpnTest.java', 2)]"	"[('([1:/com/android/cts/net/hostside/VpnTest.java]:[getPrivateDnsServerName]:[1]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1)]"	""	""	""	""	""
"204:632149) 7.4.5.3  . Captive Portals"	"7.4.5.3"	"C-1-5"	""	"[('android.net.cts.ConnectivityManagerTest', 3), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 2), ('android.net.cts.DnsResolverTest', 1), ('com.android.cts.net.hostside.VpnTest', 1), ('android.net.cts.DnsTest', 1)]"	"[('size', 4), ('getInstrumentation', 3), ('Object', 2), ('setUp', 2), ('getPackageName', 2), ('supportedHardware', 1), ('getContext', 1), ('getPackageManager', 1), ('storePrivateDnsSetting', 1), ('getTargetContext', 1), ('bind', 1), ('waitForIdle', 1), ('tearDown', 1), ('restorePrivateDnsSetting', 1), ('unbind', 1), ('stopVpn', 1)]"	""	""	"7.4.5.3/C-1-5"	"""C-1-5] MUST ensure that, while the user is logging in to a captive portal, the default network used by applications (as returned by ConnectivityManager.getActiveNetwork, ConnectivityManager.registerDefaultNetworkCallback, and used by default by Java networking APIs such as java.net.Socket, and native APIs such as connect()) is any other available network that provides internet access, if available. <h4 id="""	"07040503.670105"	"getActiveNetwork ConnectivityManager.getActiveNetwork ConnectivityManager.registerDefaultNetworkCallback"	"getActiveNetwork"	"connect() java.net.Socket"	""	"[('getActiveNetwork', 7), ('ConnectivityManager.getActiveNetwork', 1)]"	"net"	"[('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 2), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainInlineWithPrivateDns None]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[android.net.cts.ConnectivityManagerTest testGetActiveNetworkInfo None]', 1), ('[android.net.cts.ConnectivityManagerTest testGetActiveNetwork None]', 1), ('[android.net.cts.ConnectivityManagerTest testRestrictedNetworks None]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 3), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 1)]"	"[('/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 4), ('/android/net/cts/ConnectivityManagerTest.java', 4), ('/android/net/cts/DnsResolverTest.java', 2), ('/com/android/cts/net/hostside/VpnTest.java', 2), ('/android/net/cts/DnsTest.java', 2)]"	"[('([2:/android/net/cts/DnsResolverTest.java]:[getActiveNetwork]:[2]:method_text:[              callback.waitForAnswer());             callback.assertNXDomain();         }     }     ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[getActiveNetwork]:[1]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[ConnectivityManager.getActiveNetwork]:[1]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1), ('([8:/com/android/cts/net/hostside/VpnTest.java]:[getActiveNetwork]:[8]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1), ('([2:/android/net/cts/ConnectivityManagerTest.java]:[getActiveNetwork]:[2]:method_text:[.isNetworkTypeValid(ni.getType()));         assertTrue(ni.getState() == State.CONNECTED);     }     ])', 1), ('([4:/android/net/cts/ConnectivityManagerTest.java]:[getActiveNetwork]:[4]:method_text:[.isNetworkTypeValid(ni.getType()));         assertTrue(ni.getState() == State.CONNECTED);     }     ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[getActiveNetwork]:[1]:method_text:[etered networks.      */     @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")    ])', 1), ('([1:/android/net/cts/DnsTest.java]:[getActiveNetwork]:[1]:method_text:[ECONDS));         } finally {             mCm.unregisterNetworkCallback(callback);         }     } }])', 1)]"	""	""	""	""	""
