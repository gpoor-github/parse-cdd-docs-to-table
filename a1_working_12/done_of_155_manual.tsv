Section	section_id	req_id	full_key	key_as_number	requirement	Test Availability	search_roots	search_terms	manual_search_terms	not_search_terms	not_files	max_matches	class_defs	methods	modules	protected	class_def	method	module	file_name	matched_files	methods_string	urls	method_text	matched_terms	qualified_method	Annotation?	New Req for S?	New CTS for S?	Comment(internal) e.g. why a test is not possible	CTS Bug Id	CDD Bug Id	Area	Shortened	Test Level
9.9.3  . Encryption Methods	9.9.3	C-1-7	9.9.3/C-1-7	09090300.670107	"""C-1-7] MUST be cryptographically bound to a hardware-backed Keystore. This keystore MUST be bound to Verified Boot and the device&#39;s hardware root of trust."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	True	""	""	Found annotation reference in comments of .cpp files	""	""	""	""	""
3.5.1  . Application Restriction	3.5.1	C-1-9	3.5.1/C-1-9	03050100.670109	"""C-1-9] MUST report all app restriction events via UsageStats."""	Test Available, Incomplete	""	UsageStats	""	""	""	""	""	""	""	""	android.app.usage.cts.UsageStatsTest	testUserForceIntoRestricted	CtsUsageStatsTestCases	/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java	""	"public void testUserForceIntoRestricted() throws Exception {
        setSetting(Settings.Global.ENABLE_RESTRICTED_BUCKET, ""1"");

        launchSubActivity(TaskRootActivity.class);
        assertEquals(""Activity launch didn't bring app up to ACTIVE bucket"",
                UsageStatsManager.STANDBY_BUCKET_ACTIVE,
                mUsageStatsManager.getAppStandbyBucket(mTargetPackage));

        // User force shouldn't have to deal with the timeout.
        setStandByBucket(mTargetPackage, ""restricted"");
        assertEquals(""User was unable to force an ACTIVE app down into RESTRICTED bucket"",
                UsageStatsManager.STANDBY_BUCKET_RESTRICTED,
                mUsageStatsManager.getAppStandbyBucket(mTargetPackage));

    }

    // TODO(148887416): get this test to work for instant apps
    @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")"	""	""	UsageStats	""	""	""	""	"There is no indication of an list of ""all"" restriction being exercised and checking if they show up in A.""	""	""
3.5.1  . Application Restriction	3.5.1	C-1-9	3.5.1/C-1-9	03050100.670109	"""C-1-9] MUST report all app restriction events via UsageStats."""	Test Available, Incomplete	""	UsageStats	""	""	""	""	""	""	""	""	android.app.usage.cts.UsageStatsTest	testUserForceIntoRestricted	CtsUsageStatsTestCases	/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java	""	"public void testUserForceIntoRestricted() throws Exception {
        setSetting(Settings.Global.ENABLE_RESTRICTED_BUCKET, ""1"");

        launchSubActivity(TaskRootActivity.class);
        assertEquals(""Activity launch didn't bring app up to ACTIVE bucket"",
                UsageStatsManager.STANDBY_BUCKET_ACTIVE,
                mUsageStatsManager.getAppStandbyBucket(mTargetPackage));

        // User force shouldn't have to deal with the timeout.
        setStandByBucket(mTargetPackage, ""restricted"");
        assertEquals(""User was unable to force an ACTIVE app down into RESTRICTED bucket"",
                UsageStatsManager.STANDBY_BUCKET_RESTRICTED,
                mUsageStatsManager.getAppStandbyBucket(mTargetPackage));

    }

    // TODO(148887416): get this test to work for instant apps
    @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")"	""	""	UsageStats	""	""	""	""	"There is no indication of an list of ""all"" restriction events being exercised and checking if they show up in UsageStats. If it does exists it is a good example of annotation being important."	""	""	""	""	""
3.5.1  . Application Restriction	3.5.1	C-1-10	3.5.1/C-1-10	03050100.670110	"""C-1-10] MUST NOT allow an app to be automatically placed in the RESTRICTED bucket within 2 hours of the most recent usage by a user. If device implementations extend the app restrictions that are implemented in AOSP, they:"""	Test Available, Incomplete	""	BackgroundRestricted bucket RESTRICTED backgroundRestriction	""	""	""	""	""	""	""	""	android.app.cts.ActivityManagerProcessStateTest	testBgRestrictedForegroundService	CtsAppTestCases	/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java	""	"// TODO (b/185181884): Remove once standby buckets can be reliably manipulated from tests.
    @Ignore(""Cannot reliably test bucket manipulation yet"")
    public void exactAlarmPermissionElevatesBucket() throws Exception {
        mDeviceConfigHelper.without(""exact_alarm_deny_list"").commitAndAwaitPropagation();

        setTestAppStandbyBucket(""active"");
        assertEquals(STANDBY_BUCKET_ACTIVE, AppStandbyUtils.getAppStandbyBucket(TEST_APP_PACKAGE));

        setTestAppStandbyBucket(""frequent"");
        assertEquals(STANDBY_BUCKET_WORKING_SET,
                AppStandbyUtils.getAppStandbyBucket(TEST_APP_PACKAGE));

        setTestAppStandbyBucket(""rare"");
        assertEquals(STANDBY_BUCKET_WORKING_SET,
                AppStandbyUtils.getAppStandbyBucket(TEST_APP_PACKAGE));
    }"	""	""	bucket	""	""	""	""	Once b/185181884 is fixed then a test could possible test whether the 2 hour minimum is met.	b/185181884	""	""	""	""
3.5.1  . Application Restriction	3.5.1	C-2-1	3.5.1/C-2-1	03050100.670201	"""C-2-1]MUST follow the implementation described in this document. <h4 id=""352_application_hibernation"" """	Test Available, Incomplete	""	backgroundrestrictions	""	""	""	""	""	""	""	""	android.app.cts.backgroundrestrictions.MyReceiver	getContext	CtsBackgroundRestrictionsTestCases	/home/gpoor/cts-12-source/cts/tests/tests/background/src/android/app/cts/backgroundrestrictions/MyReceiver.java	""	"public void test/*
 *.
 */
package android.app.cts.backgroundrestrictions;

import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;

import androidx.test.InstrumentationRegistry;

import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;

public class MyReceiver extends BroadcastReceiver {

    private static final AtomicReference<Consumer<Intent>> sCallback
            = new AtomicReference<>();

    @Override
    public void onReceive(Context context, Intent intent) {
        final Consumer<Intent>callback = sCallback.get();
        if (callback != null) {
            callback.accept(intent);
        }
    }

    public static void setCallback(Consumer<Intent> callback) {
        sCallback.set(callback);
    }

    public static void clearCallback() {
        sCallback.set(null);
    }

    public static ComponentName getComponent() {
        return new ComponentName(InstrumentationRegistry.getContext(), MyReceiver.class);
    }
}"	""	""	backgroundrestrictions	""	""	""	""	All of the features and rules of https://source.android.com/devices/tech/power/app_mgmt are not represented in these tests	tbd	""	""	""	""
3.5.2  . Application Hibernation	3.5.2	C-1-1	3.5.2/C-1-1	03050200.670101	"""C-1-1] MUST meet all the requirements in section 3.5.1 except for C-1-6] and c-1-3"""	Test Missing	""	""	restriction restricted hibernation	RECOMMENDED	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	"The tests seem to be missing a code search shows no CTS files with ""hibernation AND restrict"""	tbd	""	""	""	""
3.5.2  . Application Hibernation	3.5.2	C-1-2	3.5.2/C-1-2	03050200.670102	"""C-1-2] MUST only apply the restriction on the app for a user when there is evidence that the user has not used the app for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer. Usage MUST be defined by either explicit user interaction via the"" [UsageStats#getLastTimeVisible()]( https://developer.android.com/reference/android/app/usage/UsageStats#getLastTimeVisible()) API or anything that would cause an app to leave the force-stopped state, including service bindings, content provider bindings, explicit broadcasts, etc., which will be tracked by a new API UsageStats#getLastTimeAnyComponentUsed()."""	Test Missing	""	""	restriction restricted hibernation	RECOMMENDED	""	""	[('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 3), ('android.widget.cts.ToastTest', 2), ('android.view.accessibility.cts.AccessibilityManagerTest', 1), ('android.os.cts.HwBinderTest', 1), ('android.view.cts.ViewConfigurationTest', 1), ('android.hardware.cts.helpers.SensorCtsHelper', 1), ('main.java.com.android.bedstead.nene.permissions.Permissions', 1), ('com.android.cts.verifier.sensors.MagneticFieldMeasurementTestActivity', 1), ('com.android.cts.deviceowner.proxy.BaseProxyTest', 1), ('android.server.wm.ActivityManagerTestBase', 1), ('test.java.com.android.bedstead.harrier.DeviceStateTestGrandparent', 1), ('android.media.cts.CamcorderProfileTest', 1), ('android.hardware.camera2.cts.RecordingTest', 1), ('android.video.cts.CodecEncoderPerformanceTest', 1), ('com.android.cts.verifier.car.GarageModeTestActivity', 1), ('com.android.cts.verifier.audio.AudioLoopbackBaseActivity', 1), ('com.android.cts.verifier.audio.AudioTap2ToneActivity', 1), ('com.android.compatibility.common.util.UiccUtil', 1), ('android.admin.cts.DevicePolicyManagerTest', 1), ('main.java.com.android.bedstead.nene.permissions.PermissionContext', 1), ('main.java.com.android.activitycontext.ActivityContext', 1), ('android.widget.cts29.ToastTest', 1), ('android.media.cts.AudioHelper', 1), ('android.media.cts.AudioTrackTest', 1), ('test.java.com.android.bedstead.harrier.DeviceStateTestParent', 1), ('com.android.cts.verifier.managedprovisioning.CommandReceiverActivity', 1)]	[('getMediaType', 14), ('size', 8), ('getChannelCount', 8), ('doubleValue', 7), ('Builder', 7), ('getAudioFormat', 7), ('getPackageName', 5), ('getInstrumentation', 5), ('build', 5), ('setUp', 4), ('getCodec', 4), ('getContext', 3), ('getProfile', 3), ('getName', 2), ('toString', 2), ('getBitrate', 2), ('getWidth', 2), ('getHeight', 2), ('getSampleRate', 2), ('getSimpleName', 2), ('printStackTrace', 2), ('close', 2), ('onResume', 2), ('get', 2), ('makeSomething', 2), ('join', 2), ('getStdJitterMs', 2), ('getStartTimeNs', 2), ('duplicate', 2), ('startRecording', 2), ('stop', 2), ('getIntent', 2), ('SensorCtsHelper', 1), ('getSensor', 1), ('getRequestedSamplingPeriodUs', 1), ('getMaxReportLatencyUs', 1), ('StringBuilder', 1), ('ObjectTracker', 1), ('PostAssertionRule', 1), ('WindowManagerStateHelper', 1), ('getWmState', 1), ('BroadcastActionTrigger', 1), ('grandparentBeforeClass', 1), ('shadowedGrandparentBeforeClass', 1), ('shadowedGrandparentWithoutBeforeClass', 1), ('getDefaultDurationSeconds', 1), ('getRecommendedFileFormat', 1), ('getVideoProfiles', 1), ('getFrameRate', 1), ('getAudioProfiles', 1), ('getChannels', 1), ('hasProfile', 1), ('input', 1), ('getMimesOfAvailableHardwareVideoEncoders', 1), ('getLayoutInflater', 1), ('NullPointerException', 1), ('getTargetContext', 1), ('Intent', 1), ('await', 1), ('countDown', 1), ('getEncoding', 1), ('getAvg', 1), ('getAvgAbs', 1), ('getMaxAbs', 1), ('notify', 1), ('wait', 1), ('make', 1), ('Thread', 1), ('run', 1), ('prepare', 1), ('myLooper', 1), ('loop', 1), ('start', 1), ('quit', 1), ('getJitterCount', 1), ('getMeanJitterMs', 1), ('getMaxAbsJitterMs', 1), ('nanoTime', 1), ('abs', 1), ('getState', 1), ('play', 1), ('getPlaybackHeadPosition', 1), ('parentBeforeClass', 1), ('getReceiverComponentName', 1), ('myUserId', 1)]	[('CtsCameraTestCases', 4), ('CtsWidgetTestCases', 3), ('CtsMediaTestCases', 2), ('CtsAccessibilityTestCases', 1), ('CtsViewTestCases', 1), ('CtsSensorTestCases', 1), ('CtsVideoTestCases', 1), ('CtsAdminTestCases', 1)]	""	""	myUserId	""	[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/SensorCtsHelper.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/main/java/com/android/bedstead/nene/permissions/Permissions.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/MagneticFieldMeasurementTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/BaseProxyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/util/src/android/server/wm/ActivityManagerTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/harrier/src/test/java/com/android/bedstead/harrier/DeviceStateTestGrandparent.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/CamcorderProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/video/src/android/video/cts/CodecEncoderPerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/car/GarageModeTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioTap2ToneActivity.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/UiccUtil.java', 1), ('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/main/java/com/android/bedstead/nene/permissions/PermissionContext.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/activitycontext/src/main/java/com/android/activitycontext/ActivityContext.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/AudioHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/harrier/src/test/java/com/android/bedstead/harrier/DeviceStateTestParent.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/CommandReceiverActivity.java', 1)]	[('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 1), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 1), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 1), ('(1,RECOMMENDED,/android/hardware/cts/helpers/SensorCtsHelper.java)', 1), ('(2,RECOMMENDED,/main/java/com/android/bedstead/nene/permissions/Permissions.java)', 1), ('(1,RECOMMENDED,/com/android/cts/verifier/sensors/MagneticFieldMeasurementTestActivity.java)', 1), ('(1,RECOMMENDED,/com/android/cts/deviceowner/proxy/BaseProxyTest.java)', 1), ('(1,RECOMMENDED,/android/server/wm/ActivityManagerTestBase.java)', 1), ('(1,RECOMMENDED,/test/java/com/android/bedstead/harrier/DeviceStateTestGrandparent.java)', 1), ('(1,RECOMMENDED,/android/media/cts/CamcorderProfileTest.java)', 1), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1), ('(1,RECOMMENDED,/android/video/cts/CodecEncoderPerformanceTest.java)', 1), ('(4,RECOMMENDED,/com/android/cts/verifier/car/GarageModeTestActivity.java)', 1), ('(21,RECOMMENDED,/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java)', 1), ('(3,RECOMMENDED,/com/android/cts/verifier/audio/AudioTap2ToneActivity.java)', 1), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,RECOMMENDED,/com/android/compatibility/common/util/UiccUtil.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(1,RECOMMENDED,/main/java/com/android/bedstead/nene/permissions/PermissionContext.java)', 1), ('(1,RECOMMENDED,/main/java/com/android/activitycontext/ActivityContext.java)', 1), ('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 1), ('(2,RECOMMENDED,/android/media/cts/AudioHelper.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(1,RECOMMENDED,/test/java/com/android/bedstead/harrier/DeviceStateTestParent.java)', 1), ('(3,RECOMMENDED,/com/android/cts/verifier/managedprovisioning/CommandReceiverActivity.java)', 1)]	"[('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 1), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 1), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 1), ('([1:/android/hardware/cts/helpers/SensorCtsHelper.java]:[RECOMMENDED]:[1]:method_text:[;        SystemUtil.runShellCommand(InstrumentationRegistry.getInstrumentation(), command);    }}])', 1), ('([2:/main/java/com/android/bedstead/nene/permissions/Permissions.java]:[RECOMMENDED]:[2]:method_text:[ExistingPermissions.toArray(new String[0]));        }        mExistingPermissions = null;    }}])', 1), ('([1:/com/android/cts/verifier/sensors/MagneticFieldMeasurementTestActivity.java]:[RECOMMENDED]:[1]:method_text:[erToContinue();        } finally {            magnetometer.unregisterListener();        }    }}])', 1), ('([1:/com/android/cts/deviceowner/proxy/BaseProxyTest.java]:[RECOMMENDED]:[1]:method_text:[ore.tryAcquire(10, TimeUnit.SECONDS)) {        return true;      }      return false;    }  }}])', 1), ('([1:/android/server/wm/ActivityManagerTestBase.java]:[RECOMMENDED]:[1]:method_text:[ public static class ConfigChangeHandlingActivity extends CommandSession.BasicTestActivity {    }}])', 1), ('([1:/test/java/com/android/bedstead/harrier/DeviceStateTestGrandparent.java]:[RECOMMENDED]:[1]:method_text:[andparentWithoutBeforeClass() {        sShadowedGrandparentWithoutBeforeClassHasRun = true;    }}])', 1), ('([1:/android/media/cts/CamcorderProfileTest.java]:[RECOMMENDED]:[1]:method_text:[dProfile, highHighSpeedProfile,                specificHighSpeedProfileQualities, null);    }   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([1:/android/video/cts/CodecEncoderPerformanceTest.java]:[RECOMMENDED]:[1]:method_text:[  /**     * Validates performance of hardware accelerated video encoders     */    @LargeTest   ])', 1), ('([4:/com/android/cts/verifier/car/GarageModeTestActivity.java]:[RECOMMENDED]:[4]:method_text:[        mStatusText.setText(resultsString);        getPassButton().setEnabled(testPassed);    }}])', 1), ('([21:/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java]:[RECOMMENDED]:[21]:method_text:[nectLoopbackUI();        calculateLatencyThresholds();        displayLatencyThresholds();    }}])', 1), ('([3:/com/android/cts/verifier/audio/AudioTap2ToneActivity.java]:[RECOMMENDED]:[3]:method_text:[read(mAnalysisTask).start(); // run asynchronously with audio thread            }        }    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 1), ('([1:/com/android/compatibility/common/util/UiccUtil.java]:[RECOMMENDED]:[1]:method_text:[tUp} method if an entire class requires a particular     * UICC, or at the top of a specific {@code])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/main/java/com/android/bedstead/nene/permissions/PermissionContext.java]:[RECOMMENDED]:[1]:method_text:[ock */public interface PermissionContext extends AutoCloseable {    @Override    void close();}])', 1), ('([1:/main/java/com/android/activitycontext/ActivityContext.java]:[RECOMMENDED]:[1]:method_text:[hrowValue = e;                }                sLatch.countDown();            }        }    }}])', 1), ('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), ('([2:/android/media/cts/AudioHelper.java]:[RECOMMENDED]:[2]:method_text:[  private final static String TAG = ""AudioRecordAuditNative"";        private int mPosition;    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/harrier/DeviceStateTestParent.java]:[RECOMMENDED]:[1]:method_text:[ssertThat(sGrandparentBeforeClassHasRun).isTrue();        sParentBeforeClassHasRun = true;    }}])', 1), ('([3:/com/android/cts/verifier/managedprovisioning/CommandReceiverActivity.java]:[RECOMMENDED]:[3]:method_text:[) {            return null;        }        return resolveInfo.activityInfo.packageName;    }}])', 1)]"	""	""	[('RECOMMENDED', 29)]	[('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.view.cts.ViewConfigurationTest testInstanceValues CtsViewTestCases]', 1), ('[android.hardware.cts.helpers.SensorCtsHelper getSensorTestDataDirectory CtsSensorTestCases]', 1), ('[main.java.com.android.bedstead.nene.permissions.Permissions TestApis None]', 1), ('[com.android.cts.verifier.sensors.MagneticFieldMeasurementTestActivity MagneticFieldMeasurementTestActivity None]', 1), ('[com.android.cts.deviceowner.proxy.BaseProxyTest registerAndWaitForStickyBroadcast None]', 1), ('[android.server.wm.ActivityManagerTestBase currentTimeMillis None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes CtsCameraTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[com.android.cts.verifier.car.GarageModeTestActivity setPassFailButtonClickListeners None]', 1), ('[com.android.cts.verifier.audio.AudioLoopbackBaseActivity isMMapSupported None]', 1), ('[com.android.cts.verifier.audio.AudioTap2ToneActivity OnTouchListener None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations CtsCameraTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.media.cts.AudioHelper currentTimeMillis None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize CtsMediaTestCases]', 1), ('[test.java.com.android.bedstead.harrier.DeviceStateTestParent isFalse None]', 1), ('[com.android.cts.verifier.managedprovisioning.CommandReceiverActivity isKeyguardSecure None]', 1)]	""	""	""	"The tests seem to be missing a code search shows no CTS files with ""hibernation AND restrict"""	tbd	""	""	""	""
3.5.2  . Application Hibernation	3.5.2	C-1-3	3.5.2/C-1-3	03050200.670103	"""C-1-3]. | C-1-3] MUST only apply restrictions affecting all device users when there is evidence that the package has not been used by ANY user for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer."""	Test Missing	""	RECOMMENDED ANY	restriction restricted hibernation	RECOMMENDED	""	""	[('android.transition.cts.TransitionTest', 16), ('android.graphics.drawable.cts.DrawableContainerTest', 8), ('android.media.cts.MediaExtractorTest', 3), ('android.server.biometrics.BiometricSecurityTests', 2), ('android.widget.cts.ToolbarTest', 2), ('android.app.usage.cts.NetworkUsageStatsTest', 2), ('android.app.cts.AlertDialog_BuilderTest', 1), ('android.server.wm.WindowInsetsAnimationSynchronicityTests', 1), ('android.dynamicmime.cts.PreferredActivitiesTestCases', 1), ('java.android.signature.cts.api.HiddenApiTest', 1), ('android.media.cts.EncodeDecodeTest', 1), ('com.android.cts.isolatedsplitapp.feature_b.FeatureBActivity', 1), ('android.carrierapi.cts.BaseCarrierApiTest', 1), ('android.text.format.cts.TimeTest', 1), ('android.content.cts.IntentFilterTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('android.content.res.cts.ResourcesTest', 1)]	[('setup', 4), ('revertSensorStrengths', 2), ('getDevice', 2), ('getInstrumentation', 2), ('getConstants', 1), ('ensureReset', 1), ('teardown', 1), ('setUp', 1), ('getLayoutInflater', 1), ('getContext', 1), ('getTargetContext', 1), ('getActivity', 1), ('getMainToolbar', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1)]	[('CtsTransitionTestCases', 16), ('CtsGraphicsTestCases', 8), ('CtsMediaTestCases', 4), ('CtsBiometricsTestCases', 2), ('CtsWidgetTestCases', 2), ('CtsContentTestCases', 2), ('CtsUsageStatsTestCases', 2), ('CtsAppTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1), ('CtsDynamicMimeHostTestCases', 1), ('CtsCarrierApiTestCases', 1), ('CtsTextTestCases', 1), ('CtsLegacyNotification27TestCases', 1)]	""	""	""	""	[('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityManagerFgsBgStartTest.java', 28), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 26), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 20), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/LockTaskTest.java', 20), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/testapp/src/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java', 19), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/CipherTest.java', 18), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/remotedpc/src/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java', 17), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintDocumentAdapterContractTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/admin/src/android/admin/cts/DeviceAdminReceiverTest.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/device/src/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/uwb/src/android/uwb/cts/RangingSessionTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/AppWidgetTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/LayerDrawableTest.java', 11), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceDataStoreTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintDocumentInfoTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/ScaleDrawableTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 9), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/LongQueryHelperTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/ClassParametersTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableContainerTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ProgressBarTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ListPopupWindowTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierMessagingServiceWrapperTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/ExactAlarmsTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/ActivityTransitionTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewReceiveContentTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/TransitionManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/AbsListViewTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/DeferSyncTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/PopupMenuTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/SplitPermissionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 5), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/UserHandleQueryHelperTest.java', 5), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/PersistableBundleQueryHelperTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/VideoViewTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/TextUtilsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintServicesTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/musicrecognition/src/android/musicrecognition/cts/MusicRecognitionManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewGroupTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/DistractingPackageTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ListViewTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/DocumentsContractTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/contentsuggestions/src/android/contentsuggestions/cts/ContentSuggestionsManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSimpleTests.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SearchView_CursorTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ImageViewTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleAdapterTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorManagerStaticTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/DisplayTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioPlaybackConfigurationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SmsManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/VisibilityTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/translation/src/android/translation/cts/UiTranslationManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/systemui/src/android/systemui/cts/WindowInsetsBehaviorTests.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/searchui/src/android/searchuiservice/cts/SearchUiManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/TransitionDrawableTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteDatabaseTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/MultipleAppsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverWrapTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_UsingViewsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/BannedFilesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaExtractorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ResourcesHardeningTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGeneratorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationProviderBaseTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ApplicationInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibratorTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/AppRestrictionsDelegateTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewTreeObserverTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaScannerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/tests/src/com/android/compatibility/common/util/StateChangerRuleTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteQueryBuilderTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewReceiveContentTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/LinkMovementMethodTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SimpleCursorAdapterTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/tests/src/com/android/compatibility/common/util/StateKeeperRuleTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/database/src/android/database/cts/DatabaseCursorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FlashlightTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/ImageTransformationTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/StringQueryHelperTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/BuildTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SurfaceEncodeTimestampTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutLineBreakingTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamObjectTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/SearchViewTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/RemoteViewsRecyclingTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobInfoTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/stagedinstall/src/com/android/tests/stagedinstall/host/StagedInstallTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/NumberPickerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/AnimatorSetTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/GridViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/harmfulappwarning/testapp/src/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/telephony/devicetest/src/android/telephony/device/cts/TelephonyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/RationalTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/GestureDetectorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/src/android/host/accounts/BaseMultiUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AlertWindowsAppOpsTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/CaptioningManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MetaKeyKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensoroperations/SensorOperation.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/IsolatedProcessTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/WidgetTransitionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/ShapeDrawableTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TabWidgetTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaActivityTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplaySecurityTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/appintegrity/src/android/appintegrity/cts/CtsAppIntegrityDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDevicePolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/IconTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/LegacyStorageHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/controls/src/android/controls/cts/CtsControlsServiceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/stagedinstall/src/com/android/tests/stagedinstall/host/ApexShimValidationTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadSettingsFieldsApp/src/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/AppStandbyTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/FrameLayoutTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/UidAtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/BidiFormatterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/TextViewFadingEdgeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/src/com/android/cts/isolatedsplitapp/SplitAppTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/ScopedStorageHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/saveui/OptionalSaveActivityTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/PinnedStackTests.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/testapp/src/test/java/com/android/bedstead/testapp/TestAppActivitiesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_FocusHandlingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentTransitionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentLifecycleTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/ChangeImageTransformTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CustomizationApp/src/com/android/cts/customizationapp/CustomizationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/util/TestUtils.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/ImageDecoderTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricSecurityTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/CheckNoOwnerRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricServiceTests.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApexSignatureVerificationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/camera/its/ItsService.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RoutingSessionInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionSharedUidTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/cts/BaseMultiUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/LoginFilterTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/OptionalFeatureHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowUntrustedTouchTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/VpnTestActivity.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerMultiLauncherTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/EncodeVirtualDisplayTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/GeneralDelegateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/input/InputDeviceMultiDeviceKeyEventTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DragDropTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/MultiAutoCompleteTextViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/SuggestionSpanTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/BatteryStatsManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementValuesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/MultiTapKeyListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/ExifInterfaceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyCallbackTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/accessibility/common/src/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/HearingAidProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ValidateTestsAbi.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/cts/SpannableStringBuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_AllUriTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintJobStateTransitionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/CameraTestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/ServiceDisabledForSureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CompatChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/apps/ForceStopHelperApp/src/com/android/cts/forcestophelper/TaskRemovedListenerService.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/bluetooth/BleCocSecureServerTestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/includeexcludeapp/src/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/renderscript/src/android/renderscript/cts/FieldPackerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/TextureViewCtsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/apps/batterystatsapp/src/com/android/server/cts/device/batterystats/BatteryStatsSyncAdapter.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Renderer/Renderable/Light.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uidisolation/src/android/uidisolation/cts/PermissionTestService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/UsbDebuggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/StepCounterTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/MediaCodecTunneledPlayer.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/nfc/hce/HceService.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/tests/src/com/android/compatibility/common/util/SafeCleanerRuleTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ConferenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FocusFinderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/TestApp1/src/android/app/usage/cts/test1/SomeActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioPlaybackCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/testcore/InstrumentedAutoFillService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/util/TestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/libcorefileio/src/android/cts/FileChannelInterProcessLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/ProfileSerialNumberHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/tests/src/android/signature/cts/tests/data/NormalInterface.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PowerPolicyHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/util/IntentsResolutionHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarRotaryImeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-api-coverage/src/com/android/cts/apicoverage/PackageFilter.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/ParcelTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/restoresessionapp1/src/android/cts/backup/restoresessionapp1/RestoreSessionAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/BlobStoreMultiUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/leanbackjank/src/android/leanbackjank/cts/CtsDeviceLeanback.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileSharingTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/compilation/src/android/compilation/cts/AdbRootDependentCompilationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/lib/ConfigUtils.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/TestListAdapter.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/ActivityResultMultiplexedLatch.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/CacheQuotaHintTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sustainedperf/shadertoy_android/src/GLtestView.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsTestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/EnvironmentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/app/src/android/app/stubs/LaunchpadActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/TypefaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecodeEditEncodeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/CookieManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/remotedpc/src/library/main/java/com/android/bedstead/remotedpc/RemoteDpc.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/AbstractMonkeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentReorderingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/rs/Script.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/PreCreateUsersHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/android/jvmti/cts/JvmtiTrackingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/api-check/src/java/android/signature/cts/api/TestResultObserver.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/PhoneAccountSuggestionServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/ColorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/SystemGestureExclusionRectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Renderer/RenderUtils/CameraStreamManager.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/MeanLargerThanVerification.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/app/src/android/server/wm/app/CrashingActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/pseudorange/PseudorangePositionVelocityFromRealTimeEvents.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/asn1/base/BitStreamReader.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/launchanywhere/src/com/android/security/cts/launchanywhere/Authenticator.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/input/InputDeviceVibratorTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/testapp/src/main/library/java/com/android/bedstead/testapp/TestAppProvider.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/OutgoingCallTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/MmsReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ApplicationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensorverification/FifoLengthVerification.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/SystemUtil.java', 1), ('/home/gpoor/cts-12-source/cts/tests/translation/src/android/translation/cts/CtsTranslationService.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/statsd/DeviceAtomTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/dynamicmime/src/android/dynamicmime/cts/PreferredActivitiesTestCases.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/PendingIntentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/fullbackupapp/src/android/cts/backup/fullbackupapp/FullbackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Fragments/RobustnessFragment.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testinfrastructure/DisplayModifier.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/tests/src/android/signature/cts/tests/data/FinalClass.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ChronometerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/openglperf2/src/android/opengl2/cts/reference/GLReferenceBenchmark.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicestate/src/android/hardware/devicestate/cts/DeviceStateManagerTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/TestApp2/src/android/app/usage/cts/test2/FinishingTaskRootActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AsyncQueryHandlerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/GestureDetectorCtsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/Timeout.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/printTestUtilLib/src/android/print/test/BasePrintTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testinfrastructure/ActivityTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-api-coverage/src/com/android/cts/apicoverage/CtsApiCoverage.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementValuesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/transition/src/android/transition/cts/BaseTransitionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher3/src/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPostBackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/HeadlessSmsSendService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/leanbackjank/app/src/android/leanbackjank/app/ui/MainFragment.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/asn1/base/Asn1GeneralString.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/VirtualDisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/admin/ScreenLockTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ScrollCaptureScrollViewCtsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventInjectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewUnbufferedTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/WakeLockHelper.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AppRestrictionsTargetApp/src/com/android/cts/apprestrictions/targetapp/ApplicationRestrictionsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/core/runner-axt/src/com/android/cts/core/runner/support/TestNgRunnerBuilder.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NoReadLogsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/notifications/BubblesVerifierActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/StatsdSyncAdapter.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/CVE-2021-0523/src/android/security/cts/CVE_2021_0523/PocService.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/NoAttestKeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/BundleTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/ArraySetTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/incident/src/com/android/server/cts/SettingsIncidentTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SuspensionChecker/src/com/android/cts/suspensionchecker/ActivityLaunchTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/AdaptivePlaybackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/FrameRateCtsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/helpers/UncheckedCloseable.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/AbstractContentCaptureActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/util/src/android/server/wm/NestedShellPermission.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/useslibrary/src/android/classloaders/cts/BaseInstallMultiple.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/MacTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/helpers/CameraSessionUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/StrictFragment.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RemoteService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/batterysaving/src/android/os/cts/batterysaving/BatterySaverAlarmTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/bluetooth/BleConnectionPriorityServerService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CallComposerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/pseudorange/UserPositionVelocityWeightedLeastSquare.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/lib/accountaccess/src/com.android.cts.content/FlakyTestRule.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/jni/src/android/jni/cts/LinkerNamespacesHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarBluetoothTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SupportMessageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityMetricsLoggerTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/EmbmsMiddlewareTestApp/src/android/telephony/cts/embmstestapp/CtsDownloadService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/SessionLifecycleTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/BaseDefaultPermissionGrantPolicyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/OutputSurface.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/launchanywhere/src/com/android/security/cts/launchanywhere/StartExploit.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appcompat/strictjavapackages/src/android/compat/sjp/cts/StrictJavaPackagesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsControllerTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetPolicyActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/BaseDeviceAdminTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/AutoRestoreApp/src/android/cts/backup/autorestoreapp/AutoRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/voiceinteraction/service/src/android/voiceinteraction/service/BasicVoiceInteractionService.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SimpleApp/src/com/android/cts/launcherapps/simpleapp/SimpleActivityImmediateExit.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/feature_c/src/com/android/cts/isolatedsplitapp/feature_c/FeatureCActivity.java', 1), ('/home/gpoor/cts-12-source/cts/libs/deviceutillegacy/src/android/webkit/cts/WebViewOnUiThread.java', 1), ('/home/gpoor/cts-12-source/cts/libs/helpers/core/src/com/android/cts/helpers/ICtsDeviceInteractionHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/test-apps/SuspendTestApp/src/com/android/suspendapps/suspendtestapp/TestService.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ListeningPortsTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/Utils.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/feature_c/src/com/android/cts/isolatedsplitapp/feature_c/FeatureCReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/lib/common/src/android/signature/cts/ApiComplianceChecker.java', 1), ('/home/gpoor/cts-12-source/cts/tests/core/runner-axt/src/com/android/cts/core/runner/support/SingleTestNGTestRunListener.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/format/cts/TimeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/openglperf2/src/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/InterfaceForAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/MediaUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/util/src/android/util/cts/JsonReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/src/android/media/cts/MediaExtractorHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/bluetooth/BleCocInsecureServerTestListActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/app/src/android/server/wm/app/FontScaleActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/MockConference.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/util/BitmapDumper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/LogicalCameraDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/MidiJavaTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/tv/HdmiCecRemoteControlPassThroughTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/tests/src/com/android/compatibility/common/util/BusinessLogicDeviceExecutorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/jdwp/runner/host-side/src/com/android/compatibility/testtype/DalvikTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ResumeOnRebootHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/lib/src/android/inputmethodservice/cts/db/Database.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/ByodHelperActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderPauseTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/util/src/android/server/wm/ActivityLauncher.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/BackupEligibilityHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/edi/src/android/edi/cts/DynamicPartitionsDeviceInfo.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/LoginActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/NoReceiveSmsPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/NonMarketAppsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/BackgroundPermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/main/java/com/android/bedstead/nene/users/UserReference.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/DisplayTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/SecurityLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/method/cts/DialerKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/asn1/base/Asn1BMPString.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/input/InputDeviceSensorManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/ExtendedInCallServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/feature_b/src/com/android/cts/isolatedsplitapp/feature_b/FeatureBReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/jetpack/src/android/server/wm/jetpack/TestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/camera/bokeh/CameraBokehActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/BaseTelecomTestWithMockServices.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/helpers/StaticMetadata.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/LifecycleVerifier.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/IntentDrivenTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testinfrastructure/ResourceModifier.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/DisallowAppsControlActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CellBroadcastDataMigrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/testcases/Camera2SurfaceViewTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintJobTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentResolverSyncTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/BaseShortcutManagerHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/EmergencyCallTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/app/src/android/app/stubs/LocalActivityManagerTestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/test-apps/CVE-2021-0481/src/android/security/cts/CVE_2021_0481/DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/apex/src/android/apex/cts/ApexTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/lib/AtomTestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/LoginActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/TestImsService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/app/src/android/server/wm/app/ResizeableActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/security/src/android/security/cts/PerfEventParanoidTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/AdbBackupApp/src/android/cts/backup/adbbackupapp/AdbBackupApp.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementsConstellationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SimpleSmsApp/src/android/telephony/cts/sms/SmsReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/WifiConfigCreator.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SimpleSmsApp/src/android/telephony/cts/sms/MmsReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app/src/android/app/cts/ApplyOverrideConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/TransitionFragment.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/fingerprint/FingerprintServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/BackupPreparer.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/GlobalSearchSessionCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/display/src/android/display/cts/BrightnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/AllocationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/PackageSignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifierUSBCompanion/src/com/android/cts/verifierusbcompanion/AccessoryTestCompanion.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/VideoCodecTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ShellPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/alarm/AlarmStatsTests.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/CtsMediaOutputSurface.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ParentProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/text/src/android/text/style/cts/TextAppearanceSpanTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/CommandReceiverActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PrintingPolicyTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/testserver/src/android/webkit/cts/CtsTestServer.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/tests/src/android/signature/cts/tests/ApiPresenceCheckerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/SeccompTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/background/src/android/app/cts/backgroundrestrictions/BroadcastsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToggleButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrinterInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/AdbUtils.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/util/BitmapDumper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/USBAudioPeripheralActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/p2p/testcase/ConnectReqTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/feature_b/src/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/NetworkRegistrationInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarPropertyConfigTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Utils/Path/Path.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewStubTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/splits/apps/src/com/android/cts/classloadersplitapp/BaseReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/splits/src/android/classloaders/cts/BaseInstallMultiple.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/DelegateTestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/time/src/android/app/time/cts/TimeManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/ReadElf.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/BooleanQueryHelperTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/FontsContractTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/AllTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminFeaturesCheckerRule.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/stagedinstall/app/src/com/android/tests/stagedinstall/StagedInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/api-check/src/java/android/signature/cts/api/HiddenApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/deviceside/devicetest/src/android/inputmethodservice/cts/devicetest/DirectShellCommand.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/DecoderColorAspectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/BackupTransportApp/src/android/cts/backup/backuptransportapp/BackupTransportTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/deviceutillegacy/src/android/webkit/cts/WebViewSyncLoader.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderCursorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrinterCapabilitiesChangeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/app/src/android/car/cts/app/PowerPolicyTestClient.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/RVCVXCheckAnalyzer.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ServicePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/ServicePermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/LayoutTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/base/app/src/art/CtsMain.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioFrequencyActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java', 1), ('/home/gpoor/cts-12-source/cts/libs/install/src/android/cts/install/lib/host/InstallUtilsHost.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_DataTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicyLoggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/testcore/CtsAugmentedAutofillService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/ChildlessActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/PreserveLegacyStorageHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/TestAutofillService/src/android/autofill/cts2/NoOpAutofillService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentQueryMapTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Utils/PoseProvider/AndroidPoseProvider.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextClassifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/CountingSecureRandom.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AttachedSurfaceControlSyncTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationSynchronicityTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/libs/ScopedStorageTestLib/src/android/scopedstorage/cts/lib/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/asn1/base/Asn1IA5String.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/DefaultPhoneAccountTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/ExternalStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/dpi/src/android/dpi/cts/DefaultManifestAttributesSdkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/leanbackjank/app/src/android/leanbackjank/app/ui/MainActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/pdf/src/android/graphics/pdf/cts/PdfRendererTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/bluetooth/BluetoothChatService.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppWithData/src/com/android/cts/appwithdata/CreatePrivateDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/util/src/android/server/wm/TestJournalProvider.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/LocaleListTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Activities/TestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewZoomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/helpers/AssertHelpers.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/MagneticFieldMeasurementTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/feature_a/src/com/android/cts/isolatedsplitapp/feature_a/FeatureAReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/widget/WidgetCtsProvider.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/KeyRotationTest/src/android/appsecurity/cts/keyrotationtest/service/SignatureQueryService.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/rs/BlockingInputAllocation.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/KernelSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityCallbacksTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/UserAppTest/src/com/android/cts/userapptest/ClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/main/java/com/android/bedstead/nene/packages/PackageReference.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/BackupEligibility/src/BackupEligibilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/users/UserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-api-coverage/src/com/android/cts/apicoverage/CurrentXmlHandler.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/transition/TrackingTransition.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/RequiredStrongAuthTimeoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/queryable/src/test/java/com/android/queryable/queries/EnumQueryHelperTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/DebugTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/BitmapDrawableTest.java', 1), ('/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/asn1/base/Asn1SequenceOf.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureGroupInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/helpers/TestSensorEventListener.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/api31test/src/android/camera/cts/api31test/SPerfClassTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/json/src/com/android/json/stream/NewlineDelimitedJsonWriter.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyProtectionTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/install/src/com/android/cts/install/lib/InstallUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceActivityFlowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/ActivityActionModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/src/android/cts/backup/BaseBackupHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/TestAppInterface.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/IncomingCallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/powerpolicy/PowerPolicyDef.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/mockime/src/com/android/cts/mockime/MockImeSession.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/ReadExternalStorageApp/src/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/ReportExporter.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadReceiverTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/LifecycleTracker.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/utils/src/android/hardware/camera2/cts/helpers/CameraErrorCollector.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/splits/apps/feature_a/src/com/android/cts/classloadersplitapp/feature_a/FeatureAReceiver.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/RunningAppProcessInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/app/src/android/server/wm/app/BottomActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Utils/Path/ReferencePath.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/ConnectionStatus.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/art/Main.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telecom/src/android/telecom/cts/CtsConnectionService.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/openglperf2/src/android/opengl2/cts/reference/GLGameActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/util/LightNavigationBarVerifier.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityLifecycleTopResumedStateTests.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/camera/intents/CameraIntentsActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/assertions/AssertionsByIntentResolution.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Renderer/ComplexMovementRenderer.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher1/src/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/DeviceOwnerRequestingBugreportTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/notifications/ShortcutThrottlingResetActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/targetprep/CecPortDiscoverer.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget/src/android/widget/cts/CalendarViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/location/common/src/android/location/cts/common/TestMeasurementUtil.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/users/UsersTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/rollback/src/com/android/cts/rollback/lib/RollbackInfoSubject.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Fragments/AccuracyFragment.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsStreamingSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AdoptableHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/WidgetTestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayAreaPolicyTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/common/src/android/media/cts/CodecState.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/includeexcludeapp/src/android/cts/backup/includeexcludeapp/DataExtractionRulesApplicabilityTest.java', 1), ('/home/gpoor/cts-12-source/cts/libs/rollback/src/com/android/cts/rollback/lib/RollbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackLatencyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetPolicyActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/sixdof/Utils/TestPhase/Test.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher2/src/android/content/pm/cts/shortcut/backup/launcher2/ShortcutManagerPostBackupTest.java', 1)]	[('(1,ANY,/android/classloaders/cts/BaseInstallMultiple.java)', 2), ('(3,restriction,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 1), ('(1,ANY,/android/bluetooth/cts/HearingAidProfileTest.java)', 1), ('(2,ANY,/com/android/compatibility/common/tradefed/presubmit/ValidateTestsAbi.java)', 1), ('(1,ANY,/android/content/cts/IntentFilterTest.java)', 1), ('(4,ANY,/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java)', 1), ('(3,ANY,/android/animation/cts/AnimatorSetTest.java)', 1), ('(2,ANY,/android/text/cts/SpannableStringBuilderTest.java)', 1), ('(2,ANY,/android/provider/cts/contacts/ContactsContract_AllUriTest.java)', 1), ('(1,ANY,/android/print/cts/PrintJobStateTransitionsTest.java)', 1), ('(14,ANY,/android/hardware/camera2/cts/CameraTestUtils.java)', 1), ('(1,ANY,/android/autofillservice/cts/unittests/ServiceDisabledForSureTest.java)', 1), ('(1,ANY,/android/server/wm/CompatChangeTests.java)', 1), ('(1,ANY,/com/android/cts/forcestophelper/TaskRemovedListenerService.java)', 1), ('(1,ANY,/com/android/cts/verifier/bluetooth/BleCocSecureServerTestListActivity.java)', 1), ('(2,ANY,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(1,ANY,/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java)', 1), ('(1,ANY,/android/renderscript/cts/FieldPackerTest.java)', 1), ('(1,ANY,/android/view/cts/TextureViewCtsActivity.java)', 1), ('(1,ANY,/com/android/server/cts/device/batterystats/BatteryStatsSyncAdapter.java)', 1), ('(21,ANY,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(8,ANY,/android/server/biometrics/BiometricSimpleTests.java)', 1), ('(2,ANY,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(5,ANY,/android/content/cts/ContentResolverWrapTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Renderer/Renderable/Light.java)', 1), ('(44,ANY,/android/uwb/cts/RangingSessionTest.java)', 1), ('(1,ANY,/android/uidisolation/cts/PermissionTestService.java)', 1), ('(4,ANY,/android/view/cts/View_UsingViewsTest.java)', 1), ('(2,restricted,/android/os/cts/UsbDebuggingTest.java)', 1), ('(9,ANY,/android/widget/cts/GridViewTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/StepCounterTestActivity.java)', 1), ('(18,restriction,/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java)', 1), ('(2,ANY,/android/media/cts/MediaCodecTunneledPlayer.java)', 1), ('(1,ANY,/com/android/cts/verifier/nfc/hce/HceService.java)', 1), ('(1,ANY,/com/android/compatibility/common/util/SafeCleanerRuleTest.java)', 1), ('(2,restricted,/android/telecom/cts/ConferenceTest.java)', 1), ('(1,ANY,/android/view/cts/FocusFinderTest.java)', 1), ('(1,ANY,/android/app/usage/cts/test1/SomeActivity.java)', 1), ('(2,restriction,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java)', 1), ('(1,ANY,/android/media/cts/AudioPlaybackCaptureTest.java)', 1), ('(3,restriction,/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java)', 1), ('(2,ANY,/android/content/cts/ContextTest.java)', 1), ('(3,ANY,/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java)', 1), ('(1,ANY,/android/autofillservice/cts/testcore/InstrumentedAutoFillService.java)', 1), ('(2,ANY,/android/view/inputmethod/cts/util/TestActivity.java)', 1), ('(1,ANY,/android/cts/FileChannelInterProcessLockTest.java)', 1), ('(93,restriction,/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java)', 1), ('(1,ANY,/android/cts/backup/ProfileSerialNumberHostSideTest.java)', 1), ('(1,ANY,/android/signature/cts/tests/data/NormalInterface.java)', 1), ('(3,restricted,/android/security/cts/BannedFilesTest.java)', 1), ('(1,ANY,/android/car/cts/PowerPolicyHostTest.java)', 1), ('(2,ANY,/android/dynamicmime/testapp/util/IntentsResolutionHelper.java)', 1), ('(2,ANY,/android/car/cts/CarRotaryImeTest.java)', 1), ('(3,ANY,/com/android/cts/apicoverage/PackageFilter.java)', 1), ('(1,ANY,/android/os/cts/ParcelTest.java)', 1), ('(1,ANY,/android/cts/backup/restoresessionapp1/RestoreSessionAppTest.java)', 1), ('(1,ANY,/com/android/cts/host/blob/BlobStoreMultiUserTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java)', 1), ('(1,ANY,/android/leanbackjank/cts/CtsDeviceLeanback.java)', 1), ('(3,ANY,/android/telephony/device/cts/TelephonyTest.java)', 1), ('(17,ANY,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(1,ANY,/com/android/cts/managedprofile/CrossProfileSharingTest.java)', 1), ('(1,ANY,/android/compilation/cts/AdbRootDependentCompilationTest.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java)', 1), ('(7,ANY,/android/hardware/camera2/cts/MultiViewTest.java)', 1), ('(2,ANY,/android/cts/statsdatom/lib/ConfigUtils.java)', 1), ('(2,ANY,/com/android/cts/verifier/TestListAdapter.java)', 1), ('(4,ANY,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(1,ANY,/android/hardware/cts/helpers/ActivityResultMultiplexedLatch.java)', 1), ('(2,restriction,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(5,ANY,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,ANY,/android/app/usage/cts/CacheQuotaHintTest.java)', 1), ('(1,ANY,/GLtestView.java)', 1), ('(2,ANY,/android/telephonyprovider/cts/SmsTestHelper.java)', 1), ('(1,ANY,/android/os/cts/EnvironmentTest.java)', 1), ('(3,ANY,/android/app/stubs/LaunchpadActivity.java)', 1), ('(2,ANY,/android/app/cts/ActivityManagerFgsBgStartTest.java)', 1), ('(69,restriction,/android/app/cts/ActivityManagerFgsBgStartTest.java)', 1), ('(1,restricted,/android/app/cts/ActivityManagerFgsBgStartTest.java)', 1), ('(5,ANY,/android/media/cts/AudioTrackTest.java)', 1), ('(6,ANY,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(10,restricted,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(4,ANY,/android/util/cts/RationalTest.java)', 1), ('(3,ANY,/android/media/cts/MediaExtractorTest.java)', 1), ('(1,ANY,/android/graphics/cts/TypefaceTest.java)', 1), ('(12,restriction,/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java)', 1), ('(3,ANY,/android/media/cts/DecodeEditEncodeTest.java)', 1), ('(8,ANY,/android/transition/cts/FadeTest.java)', 1), ('(6,ANY,/android/webkit/cts/CookieManagerTest.java)', 1), ('(17,ANY,/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java)', 1), ('(5,ANY,/library/main/java/com/android/bedstead/remotedpc/RemoteDpc.java)', 1), ('(1,ANY,/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java)', 1), ('(1,ANY,/com/android/cts/monkey/AbstractMonkeyTest.java)', 1), ('(1,ANY,/android/fragment/cts/FragmentReorderingTest.java)', 1), ('(2,ANY,/android/hardware/camera2/cts/rs/Script.java)', 1), ('(1,ANY,/android/car/cts/PreCreateUsersHostTest.java)', 1), ('(1,ANY,/android/jvmti/cts/JvmtiTrackingTest.java)', 1), ('(1,ANY,/java/android/signature/cts/api/TestResultObserver.java)', 1), ('(2,ANY,/android/view/cts/GestureDetectorTest.java)', 1), ('(1,restricted,/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java)', 1), ('(4,ANY,/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(1,ANY,/android/telecom/cts/PhoneAccountSuggestionServiceTest.java)', 1), ('(1,ANY,/android/graphics/cts/ColorTest.java)', 1), ('(1,ANY,/android/view/cts/SystemGestureExclusionRectsTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/sensors/sixdof/Renderer/RenderUtils/CameraStreamManager.java)', 1), ('(2,ANY,/android/hardware/cts/helpers/sensorverification/MeanLargerThanVerification.java)', 1), ('(9,ANY,/android/view/cts/ViewReceiveContentTest.java)', 1), ('(16,ANY,/android/admin/cts/DeviceAdminReceiverTest.java)', 1), ('(7,ANY,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,restriction,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,ANY,/android/server/wm/app/CrashingActivity.java)', 1), ('(1,ANY,/android/host/accounts/BaseMultiUserTest.java)', 1), ('(2,restricted,/android/host/accounts/BaseMultiUserTest.java)', 1), ('(1,ANY,/android/location/cts/gnss/pseudorange/PseudorangePositionVelocityFromRealTimeEvents.java)', 1), ('(3,ANY,/android/location/cts/gnss/asn1/base/BitStreamReader.java)', 1), ('(1,ANY,/com/android/security/cts/launchanywhere/Authenticator.java)', 1), ('(3,ANY,/android/view/cts/input/InputDeviceVibratorTest.java)', 1), ('(8,ANY,/android/widget/cts/SearchView_CursorTest.java)', 1), ('(2,ANY,/main/library/java/com/android/bedstead/testapp/TestAppProvider.java)', 1), ('(10,ANY,/android/server/wm/AlertWindowsAppOpsTests.java)', 1), ('(1,ANY,/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java)', 1), ('(1,ANY,/android/telecom/cts/OutgoingCallTest.java)', 1), ('(1,ANY,/android/telephony/cts/MmsReceiver.java)', 1), ('(25,restriction,/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java)', 1), ('(1,ANY,/android/app/cts/ApplicationTest.java)', 1), ('(1,ANY,/android/hardware/cts/helpers/sensorverification/FifoLengthVerification.java)', 1), ('(6,ANY,/android/server/biometrics/BiometricTestBase.java)', 1), ('(5,ANY,/android/view/accessibility/cts/CaptioningManagerTest.java)', 1), ('(1,ANY,/android/content/cts/ContentProviderTest.java)', 1), ('(2,ANY,/com/android/compatibility/common/util/SystemUtil.java)', 1), ('(1,ANY,/android/translation/cts/CtsTranslationService.java)', 1), ('(1,ANY,/android/cts/statsdatom/statsd/DeviceAtomTestCase.java)', 1), ('(5,ANY,/android/text/method/cts/MetaKeyKeyListenerTest.java)', 1), ('(2,ANY,/android/dynamicmime/cts/PreferredActivitiesTestCases.java)', 1), ('(1,ANY,/android/app/cts/PendingIntentTest.java)', 1), ('(2,ANY,/android/hardware/cts/helpers/sensoroperations/SensorOperation.java)', 1), ('(1,restriction,/android/hardware/cts/helpers/sensoroperations/SensorOperation.java)', 1), ('(24,ANY,/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java)', 1), ('(2,restricted,/android/security/cts/IsolatedProcessTest.java)', 1), ('(1,ANY,/android/cts/backup/fullbackupapp/FullbackupTest.java)', 1), ('(3,ANY,/android/webkit/cts/WebSettingsTest.java)', 1), ('(2,ANY,/android/appwidget/cts/WidgetTransitionTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java)', 1), ('(6,ANY,/android/media/cts/MediaCodecTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Fragments/RobustnessFragment.java)', 1), ('(1,ANY,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(6,restriction,/android/content/pm/cts/ResourcesHardeningTest.java)', 1), ('(16,restricted,/android/content/pm/cts/ResourcesHardeningTest.java)', 1), ('(1,ANY,/android/uirendering/cts/testinfrastructure/DisplayModifier.java)', 1), ('(1,ANY,/android/signature/cts/tests/data/FinalClass.java)', 1), ('(1,ANY,/android/widget/cts/ChronometerTest.java)', 1), ('(1,ANY,/android/opengl2/cts/reference/GLReferenceBenchmark.java)', 1), ('(1,ANY,/android/hardware/devicestate/cts/DeviceStateManagerTestBase.java)', 1), ('(1,ANY,/android/app/usage/cts/test2/FinishingTaskRootActivity.java)', 1), ('(1,ANY,/android/content/cts/AsyncQueryHandlerTest.java)', 1), ('(6,ANY,/android/keystore/cts/KeyGeneratorTest.java)', 1), ('(12,ANY,/android/view/cts/GestureDetectorCtsActivity.java)', 1), ('(8,ANY,/android/telephony/cts/CarrierMessagingServiceWrapperTest.java)', 1), ('(4,ANY,/com/android/compatibility/common/util/Timeout.java)', 1), ('(24,ANY,/android/print/test/BasePrintTest.java)', 1), ('(5,ANY,/android/graphics/drawable/cts/ShapeDrawableTest.java)', 1), ('(2,ANY,/android/widget/cts/TabWidgetTest.java)', 1), ('(3,ANY,/android/location/cts/fine/LocationProviderBaseTest.java)', 1), ('(1,ANY,/android/uirendering/cts/testinfrastructure/ActivityTestBase.java)', 1), ('(1,ANY,/android/security/cts/SELinuxHostTest.java)', 1), ('(3,restricted,/android/security/cts/SELinuxHostTest.java)', 1), ('(30,ANY,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,ANY,/com/android/cts/apicoverage/CtsApiCoverage.java)', 1), ('(1,ANY,/android/location/cts/privileged/GnssMeasurementValuesTest.java)', 1), ('(5,ANY,/android/transition/cts/BaseTransitionTest.java)', 1), ('(2,ANY,/android/content/cts/AvailableIntentsTest.java)', 1), ('(1,ANY,/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPostBackupTest.java)', 1), ('(10,ANY,/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java)', 1), ('(1,ANY,/android/telephony/cts/HeadlessSmsSendService.java)', 1), ('(1,ANY,/android/leanbackjank/app/ui/MainFragment.java)', 1), ('(18,ANY,/android/view/cts/KeyEventTest.java)', 1), ('(4,ANY,/android/media/cts/MediaActivityTest.java)', 1), ('(1,ANY,/android/location/cts/gnss/asn1/base/Asn1GeneralString.java)', 1), ('(1,restriction,/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java)', 1), ('(1,ANY,/android/display/cts/VirtualDisplayTest.java)', 1), ('(48,ANY,/android/appwidget/cts/AppWidgetTest.java)', 1), ('(2,restricted,/android/server/wm/MultiDisplaySecurityTests.java)', 1), ('(1,restricted,/com/android/cts/verifier/admin/ScreenLockTestActivity.java)', 1), ('(1,ANY,/android/view/cts/ScrollCaptureScrollViewCtsActivity.java)', 1), ('(1,ANY,/android/view/cts/KeyEventInjectionTest.java)', 1), ('(2,ANY,/android/view/cts/ViewUnbufferedTest.java)', 1), ('(1,ANY,/android/hdmicec/cts/WakeLockHelper.java)', 1), ('(8,ANY,/android/print/cts/ClassParametersTest.java)', 1), ('(15,restriction,/com/android/cts/apprestrictions/targetapp/ApplicationRestrictionsActivity.java)', 1), ('(6,ANY,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(1,restriction,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(1,restricted,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(1,ANY,/com/android/cts/core/runner/support/TestNgRunnerBuilder.java)', 1), ('(1,ANY,/android/permission/cts/NoReadLogsPermissionTest.java)', 1), ('(3,ANY,/android/appintegrity/cts/CtsAppIntegrityDeviceTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/notifications/BubblesVerifierActivity.java)', 1), ('(1,ANY,/com/android/server/cts/device/statsdatom/StatsdSyncAdapter.java)', 1), ('(3,ANY,/android/content/pm/cts/ApplicationInfoTest.java)', 1), ('(1,ANY,/android/security/cts/CVE_2021_0523/PocService.java)', 1), ('(6,ANY,/com/android/cts/devicepolicy/BaseDevicePolicyTest.java)', 1), ('(38,restriction,/com/android/cts/devicepolicy/BaseDevicePolicyTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(1,ANY,/android/keystore/cts/NoAttestKeyTest.java)', 1), ('(1,ANY,/android/os/cts/BundleTest.java)', 1), ('(2,ANY,/android/carrierapi/cts/BugreportManagerTest.java)', 1), ('(1,ANY,/android/util/cts/ArraySetTest.java)', 1), ('(4,ANY,/com/android/server/cts/SettingsIncidentTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(1,ANY,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(3,restricted,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(1,ANY,/com/android/cts/suspensionchecker/ActivityLaunchTest.java)', 1), ('(14,ANY,/android/widget/cts/ImageViewTest.java)', 1), ('(1,ANY,/android/mediav2/cts/AdaptivePlaybackTest.java)', 1), ('(1,ANY,/android/graphics/cts/FrameRateCtsActivity.java)', 1), ('(2,ANY,/android/app/notification/legacy29/cts/NotificationManager29Test.java)', 1), ('(8,ANY,/android/print/cts/PrintDocumentInfoTest.java)', 1), ('(1,restricted,/android/print/cts/PrintDocumentInfoTest.java)', 1), ('(3,ANY,/android/hardware/camera2/cts/helpers/UncheckedCloseable.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/WifiTest.java)', 1), ('(1,ANY,/android/contentcaptureservice/cts/AbstractContentCaptureActivity.java)', 1), ('(4,ANY,/android/os/cts/VibratorTest.java)', 1), ('(5,ANY,/android/widget/cts/PopupMenuTest.java)', 1), ('(2,ANY,/android/graphics/drawable/cts/IconTest.java)', 1), ('(3,ANY,/android/telephony/ims/cts/SipDelegateManagerTest.java)', 1), ('(5,restricted,/android/telephony/ims/cts/SipDelegateManagerTest.java)', 1), ('(1,ANY,/android/server/wm/NestedShellPermission.java)', 1), ('(1,ANY,/android/scopedstorage/cts/host/LegacyStorageHostTest.java)', 1), ('(1,restriction,/android/scopedstorage/cts/host/LegacyStorageHostTest.java)', 1), ('(50,restriction,/com/android/cts/delegate/AppRestrictionsDelegateTest.java)', 1), ('(1,ANY,/android/keystore/cts/MacTest.java)', 1), ('(2,ANY,/android/controls/cts/CtsControlsServiceTest.java)', 1), ('(10,ANY,/android/hardware/camera2/cts/helpers/CameraSessionUtils.java)', 1), ('(2,ANY,/com/android/tests/stagedinstall/host/ApexShimValidationTest.java)', 1), ('(1,ANY,/android/fragment/cts/StrictFragment.java)', 1), ('(1,ANY,/android/media/cts/RemoteService.java)', 1), ('(1,ANY,/android/os/cts/batterysaving/BatterySaverAlarmTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/bluetooth/BleConnectionPriorityServerService.java)', 1), ('(2,restricted,/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java)', 1), ('(1,ANY,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,ANY,/android/telephony/cts/CallComposerTest.java)', 1), ('(12,ANY,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(22,restriction,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(2,ANY,/android/location/cts/gnss/pseudorange/UserPositionVelocityWeightedLeastSquare.java)', 1), ('(1,ANY,/com.android.cts.content/FlakyTestRule.java)', 1), ('(8,ANY,/android/jni/cts/LinkerNamespacesHelper.java)', 1), ('(1,ANY,/android/car/cts/CarBluetoothTest.java)', 1), ('(1,ANY,/android/webkit/cts/WebViewClientTest.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/SupportMessageTest.java)', 1), ('(1,ANY,/android/server/wm/ActivityMetricsLoggerTests.java)', 1), ('(34,ANY,/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java)', 1), ('(1,ANY,/android/media/cts/MediaPlayerTest.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,ANY,/android/telephony/cts/embmstestapp/CtsDownloadService.java)', 1), ('(9,ANY,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(1,ANY,/android/autofillservice/cts/SessionLifecycleTest.java)', 1), ('(15,ANY,/com/android/compatibility/common/util/BaseDefaultPermissionGrantPolicyTest.java)', 1), ('(17,restriction,/com/android/cts/deviceowner/SensorToggleRestrictionTest.java)', 1), ('(1,ANY,/android/media/cts/OutputSurface.java)', 1), ('(5,ANY,/com/android/security/cts/launchanywhere/StartExploit.java)', 1), ('(1,ANY,/android/alarmmanager/cts/AppStandbyTests.java)', 1), ('(1,restriction,/android/alarmmanager/cts/AppStandbyTests.java)', 1), ('(2,ANY,/android/compat/sjp/cts/StrictJavaPackagesTest.java)', 1), ('(1,ANY,/android/server/wm/WindowInsetsControllerTests.java)', 1), ('(2,ANY,/android/widget/cts/FrameLayoutTest.java)', 1), ('(22,restriction,/com/android/cts/devicepolicy/ManagedProfileTest.java)', 1), ('(4,ANY,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(12,restricted,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,ANY,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(3,restriction,/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java)', 1), ('(38,ANY,/android/graphics/drawable/cts/ScaleDrawableTest.java)', 1), ('(25,restriction,/com/android/cts/deviceandprofileowner/SetPolicyActivity.java)', 1), ('(1,restriction,/com.android.cts.deviceadmin/BaseDeviceAdminTest.java)', 1), ('(3,ANY,/android/view/cts/ViewTreeObserverTest.java)', 1), ('(1,ANY,/android/cts/backup/autorestoreapp/AutoRestoreTest.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java)', 1), ('(2,ANY,/android/text/cts/BidiFormatterTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java)', 1), ('(7,ANY,/android/widget/cts/TextViewFadingEdgeTest.java)', 1), ('(1,ANY,/android/voiceinteraction/service/BasicVoiceInteractionService.java)', 1), ('(1,ANY,/com/android/cts/launcherapps/simpleapp/SimpleActivityImmediateExit.java)', 1), ('(1,ANY,/com/android/cts/isolatedsplitapp/feature_c/FeatureCActivity.java)', 1), ('(1,ANY,/android/webkit/cts/WebViewOnUiThread.java)', 1), ('(2,ANY,/com/android/cts/helpers/ICtsDeviceInteractionHelper.java)', 1), ('(2,ANY,/com/android/suspendapps/suspendtestapp/TestService.java)', 1), ('(2,ANY,/android/appsecurity/cts/ListeningPortsTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java)', 1), ('(1,ANY,/android/graphics/pdf/cts/Utils.java)', 1), ('(1,ANY,/com/android/cts/isolatedsplitapp/feature_c/FeatureCReceiver.java)', 1), ('(2,ANY,/android/signature/cts/ApiComplianceChecker.java)', 1), ('(1,ANY,/com/android/cts/core/runner/support/SingleTestNGTestRunListener.java)', 1), ('(2,ANY,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(1,ANY,/android/text/format/cts/TimeTest.java)', 1), ('(1,ANY,/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java)', 1), ('(1,ANY,/android/print/cts/InterfaceForAppsTest.java)', 1), ('(1,ANY,/android/content/cts/ClipDescriptionTest.java)', 1), ('(4,ANY,/com/android/compatibility/common/util/MediaUtils.java)', 1), ('(1,ANY,/android/util/cts/JsonReaderTest.java)', 1), ('(2,ANY,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(1,ANY,/android/permission/cts/SplitPermissionTest.java)', 1), ('(4,restriction,/android/permission/cts/SplitPermissionTest.java)', 1), ('(1,ANY,/android/media/cts/MediaExtractorHostSideTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/bluetooth/BleCocInsecureServerTestListActivity.java)', 1), ('(2,ANY,/android/server/wm/app/FontScaleActivity.java)', 1), ('(5,ANY,/android/alarmmanager/cts/ExactAlarmsTest.java)', 1), ('(2,restricted,/android/alarmmanager/cts/ExactAlarmsTest.java)', 1), ('(18,ANY,/android/server/wm/WindowTest.java)', 1), ('(1,ANY,/android/telecom/cts/MockConference.java)', 1), ('(1,ANY,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(1,ANY,/android/uirendering/cts/util/BitmapDumper.java)', 1), ('(5,ANY,/android/hardware/camera2/cts/LogicalCameraDeviceTest.java)', 1), ('(3,ANY,/com/android/cts/verifier/audio/MidiJavaTestActivity.java)', 1), ('(2,ANY,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(8,ANY,/android/view/cts/ActionModeTest.java)', 1), ('(2,ANY,/android/hdmicec/cts/tv/HdmiCecRemoteControlPassThroughTest.java)', 1), ('(1,ANY,/com/android/compatibility/common/util/BusinessLogicDeviceExecutorTest.java)', 1), ('(11,ANY,/android/server/wm/WindowInsetsAnimationTests.java)', 1), ('(18,ANY,/android/transition/cts/TransitionManagerTest.java)', 1), ('(3,ANY,/com/android/compatibility/testtype/DalvikTest.java)', 1), ('(1,restriction,/android/appsecurity/cts/ResumeOnRebootHostTest.java)', 1), ('(1,ANY,/android/inputmethodservice/cts/db/Database.java)', 1), ('(76,restriction,/com/android/cts/verifier/managedprovisioning/ByodHelperActivity.java)', 1), ('(5,ANY,/android/graphics/cts/PaintTest.java)', 1), ('(1,ANY,/android/mediav2/cts/CodecDecoderPauseTest.java)', 1), ('(28,ANY,/android/widget/cts/SimpleAdapterTest.java)', 1), ('(5,restriction,/test/java/com/android/queryable/queries/UserHandleQueryHelperTest.java)', 1), ('(1,ANY,/android/server/wm/ActivityLauncher.java)', 1), ('(2,ANY,/android/scopedstorage/cts/host/ScopedStorageHostTest.java)', 1), ('(8,restriction,/test/java/com/android/queryable/queries/PersistableBundleQueryHelperTest.java)', 1), ('(5,ANY,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(1,ANY,/android/cts/backup/BackupEligibilityHostSideTest.java)', 1), ('(2,ANY,/android/autofillservice/cts/saveui/OptionalSaveActivityTest.java)', 1), ('(1,ANY,/android/edi/cts/DynamicPartitionsDeviceInfo.java)', 1), ('(16,ANY,/android/widget/cts/VideoViewTest.java)', 1), ('(1,ANY,/android/autofillservice/cts/dropdown/LoginActivityTest.java)', 1), ('(3,ANY,/android/server/wm/PinnedStackTests.java)', 1), ('(3,ANY,/test/java/com/android/bedstead/testapp/TestAppActivitiesTest.java)', 1), ('(1,restriction,/android/permission2/cts/NoReceiveSmsPermissionTest.java)', 1), ('(4,restriction,/com/android/cts/verifier/managedprovisioning/NonMarketAppsActivity.java)', 1), ('(1,ANY,/android/hardware/cts/SensorIntegrationTests.java)', 1), ('(1,ANY,/android/view/cts/View_FocusHandlingTest.java)', 1), ('(1,restricted,/android/view/cts/View_FocusHandlingTest.java)', 1), ('(1,ANY,/android/permission/cts/BackgroundPermissionsTest.java)', 1), ('(2,ANY,/main/java/com/android/bedstead/nene/users/UserReference.java)', 1), ('(1,ANY,/android/app/cts/DisplayTest.java)', 1), ('(1,ANY,/com/android/cts/delegate/SecurityLoggingDelegateTest.java)', 1), ('(2,ANY,/android/fragment/cts/FragmentTransitionTest.java)', 1), ('(4,ANY,/android/hardware/cts/SensorManagerStaticTest.java)', 1), ('(1,ANY,/android/text/method/cts/DialerKeyListenerTest.java)', 1), ('(3,ANY,/android/display/cts/DisplayTest.java)', 1), ('(1,restricted,/android/display/cts/DisplayTest.java)', 1), ('(2,ANY,/android/location/cts/gnss/asn1/base/Asn1BMPString.java)', 1), ('(2,ANY,/android/view/cts/input/InputDeviceSensorManagerTest.java)', 1), ('(1,restricted,/android/telephonyprovider/cts/SmsTest.java)', 1), ('(2,restriction,/com.android.cts.deviceadmin/DeviceAdminTest.java)', 1), ('(4,ANY,/android/media/cts/MediaScannerTest.java)', 1), ('(2,ANY,/android/fragment/cts/FragmentLifecycleTest.java)', 1), ('(1,ANY,/android/telecom/cts/ExtendedInCallServiceTest.java)', 1), ('(1,ANY,/com/android/cts/isolatedsplitapp/feature_b/FeatureBReceiver.java)', 1), ('(1,ANY,/android/server/wm/jetpack/TestActivity.java)', 1), ('(3,ANY,/com/android/cts/verifier/camera/bokeh/CameraBokehActivity.java)', 1), ('(5,ANY,/android/telecom/cts/BaseTelecomTestWithMockServices.java)', 1), ('(1,ANY,/android/telephony/embms/cts/MbmsDownloadSessionTest.java)', 1), ('(2,ANY,/android/hardware/camera2/cts/helpers/StaticMetadata.java)', 1), ('(2,ANY,/android/server/wm/lifecycle/LifecycleVerifier.java)', 1), ('(1,ANY,/com/android/cts/verifier/IntentDrivenTestActivity.java)', 1), ('(24,ANY,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(4,restriction,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(16,ANY,/android/inputmethodservice/cts/devicetest/InputMethodServiceDeviceTest.java)', 1), ('(2,restricted,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(1,ANY,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(1,ANY,/com/android/cts/deviceowner/CreateAndManageUserTest.java)', 1), ('(10,restriction,/com/android/cts/deviceowner/CreateAndManageUserTest.java)', 1), ('(2,ANY,/android/mediapc/cts/EncoderInitializationLatencyTest.java)', 1), ('(1,ANY,/com/android/cts/devicepolicy/BaseDeviceOwnerTest.java)', 1), ('(1,ANY,/android/uirendering/cts/testinfrastructure/ResourceModifier.java)', 1), ('(3,restriction,/com/android/cts/verifier/managedprovisioning/DisallowAppsControlActivity.java)', 1), ('(1,ANY,/android/telephony/cts/CellBroadcastDataMigrationTest.java)', 1), ('(4,ANY,/android/hardware/camera2/cts/testcases/Camera2SurfaceViewTestCase.java)', 1), ('(1,ANY,/android/print/cts/PrintJobTest.java)', 1), ('(1,ANY,/android/content/cts/ContentResolverSyncTestCase.java)', 1), ('(5,ANY,/android/media/cts/AudioPlaybackConfigurationTest.java)', 1), ('(1,ANY,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(3,restricted,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(3,ANY,/com/android/compatibility/common/util/StateChangerRuleTest.java)', 1), ('(4,ANY,/android/transition/cts/ChangeImageTransformTest.java)', 1), ('(1,ANY,/android/hardware/camera2/cts/HeifWriterTest.java)', 1), ('(2,ANY,/android/content/pm/cts/shortcuthost/BaseShortcutManagerHostTest.java)', 1), ('(50,ANY,/android/print/cts/PrintDocumentAdapterContractTest.java)', 1), ('(1,ANY,/android/telecom/cts/EmergencyCallTests.java)', 1), ('(5,restriction,/com/android/cts/customizationapp/CustomizationTest.java)', 1), ('(2,ANY,/android/media/tv/cts/TvViewTest.java)', 1), ('(1,ANY,/android/app/stubs/LocalActivityManagerTestHelper.java)', 1), ('(1,ANY,/android/security/cts/CVE_2021_0481/DeviceTest.java)', 1), ('(1,ANY,/android/apex/cts/ApexTest.java)', 1), ('(3,ANY,/android/cts/statsdatom/lib/AtomTestUtils.java)', 1), ('(1,ANY,/android/contentcaptureservice/cts/LoginActivityTest.java)', 1), ('(3,ANY,/android/keystore/cts/util/TestUtils.java)', 1), ('(1,restriction,/android/keystore/cts/util/TestUtils.java)', 1), ('(3,ANY,/android/database/sqlite/cts/SQLiteQueryBuilderTest.java)', 1), ('(1,ANY,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(3,ANY,/android/graphics/cts/ImageDecoderTest.java)', 1), ('(1,restriction,/android/telephony/ims/cts/TestImsService.java)', 1), ('(1,ANY,/android/server/wm/app/ResizeableActivity.java)', 1), ('(3,ANY,/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java)', 1), ('(2,ANY,/android/server/biometrics/BiometricSecurityTests.java)', 1), ('(1,restricted,/android/security/cts/PerfEventParanoidTest.java)', 1), ('(5,ANY,/android/widget/cts/TextViewReceiveContentTest.java)', 1), ('(1,ANY,/android/cts/backup/adbbackupapp/AdbBackupApp.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(1,ANY,/android/location/cts/gnss/GnssMeasurementsConstellationTest.java)', 1), ('(1,ANY,/android/telephony/cts/sms/SmsReceiver.java)', 1), ('(1,ANY,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,ANY,/com/android/compatibility/common/util/WifiConfigCreator.java)', 1), ('(2,ANY,/android/telephony/cts/SmsManagerTest.java)', 1), ('(2,restriction,/android/telephony/cts/SmsManagerTest.java)', 1), ('(4,ANY,/android/hardware/camera2/cts/PerformanceTest.java)', 1), ('(2,ANY,/com/android/cts/storageapp/StorageTest.java)', 1), ('(1,ANY,/android/telephony/cts/sms/MmsReceiver.java)', 1), ('(5,restriction,/com/android/cts/deviceandprofileowner/userrestrictions/CheckNoOwnerRestrictionsTest.java)', 1), ('(1,ANY,/android/app/cts/ApplyOverrideConfigurationTest.java)', 1), ('(2,ANY,/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java)', 1), ('(3,ANY,/android/fragment/cts/TransitionFragment.java)', 1), ('(1,ANY,/android/car/cts/CarSensorManagerTest.java)', 1), ('(2,ANY,/android/server/biometrics/BiometricServiceTests.java)', 1), ('(2,ANY,/android/server/biometrics/fingerprint/FingerprintServiceTest.java)', 1), ('(1,ANY,/android/cts/backup/BackupPreparer.java)', 1), ('(1,ANY,/com/android/cts/appsearch/external/app/GlobalSearchSessionCtsTestBase.java)', 1), ('(44,ANY,/android/graphics/drawable/cts/DrawableContainerTest.java)', 1), ('(1,ANY,/android/display/cts/BrightnessTest.java)', 1), ('(1,ANY,/com/android/cts/intent/sender/ContentTest.java)', 1), ('(6,ANY,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(1,ANY,/android/hardware/camera2/cts/AllocationTest.java)', 1), ('(2,restricted,/android/security/cts/PackageSignatureTest.java)', 1), ('(2,restricted,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(15,ANY,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(3,ANY,/com/android/cts/verifierusbcompanion/AccessoryTestCompanion.java)', 1), ('(4,ANY,/android/media/cts/VideoCodecTestBase.java)', 1), ('(1,ANY,/android/content/res/cts/ResourcesTest.java)', 1), ('(1,ANY,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(3,ANY,/android/permission/cts/FileSystemPermissionTest.java)', 1), ('(1,ANY,/android/provider/cts/SettingsPanelTest.java)', 1), ('(14,ANY,/android/text/cts/TextUtilsTest.java)', 1), ('(12,ANY,/android/print/cts/PrintServicesTest.java)', 1), ('(22,ANY,/android/widget/cts/ProgressBarTest.java)', 1), ('(8,ANY,/android/transition/cts/VisibilityTest.java)', 1), ('(1,ANY,/android/permission/cts/ShellPermissionTest.java)', 1), ('(2,ANY,/android/hardware/camera2/cts/StillCaptureTest.java)', 1), ('(1,ANY,/android/cts/statsdatom/alarm/AlarmStatsTests.java)', 1), ('(35,ANY,/android/transition/cts/ActivityTransitionTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/CtsMediaOutputSurface.java)', 1), ('(3,restriction,/com/android/cts/managedprofile/ParentProfileTest.java)', 1), ('(8,ANY,/android/accessibilityservice/cts/AccessibilityMagnificationTest.java)', 1), ('(2,restricted,/android/text/style/cts/TextAppearanceSpanTest.java)', 1), ('(17,ANY,/android/text/method/cts/LinkMovementMethodTest.java)', 1), ('(4,ANY,/com/android/cts/verifier/camera/its/ItsService.java)', 1), ('(9,restriction,/com/android/cts/verifier/camera/its/ItsService.java)', 1), ('(47,restriction,/com/android/cts/verifier/managedprovisioning/CommandReceiverActivity.java)', 1), ('(2,ANY,/android/media/cts/RoutingSessionInfoTest.java)', 1), ('(1,ANY,/android/adb/cts/AdbHostTest.java)', 1), ('(18,restricted,/android/permission2/cts/RestrictedStoragePermissionSharedUidTest.java)', 1), ('(1,restriction,/com/android/cts/deviceandprofileowner/PrintingPolicyTest.java)', 1), ('(33,ANY,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,restriction,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,restricted,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(9,ANY,/android/webkit/cts/CtsTestServer.java)', 1), ('(1,restriction,/android/media/cts/BaseMultiUserTest.java)', 1), ('(3,restricted,/android/media/cts/BaseMultiUserTest.java)', 1), ('(1,ANY,/android/signature/cts/tests/ApiPresenceCheckerTest.java)', 1), ('(2,ANY,/android/scopedstorage/cts/host/ScopedStorageCoreHostTest.java)', 1), ('(4,ANY,/android/os/cts/SeccompTest.java)', 1), ('(1,restriction,/android/app/cts/backgroundrestrictions/BroadcastsTest.java)', 1), ('(8,ANY,/android/text/cts/LoginFilterTest.java)', 1), ('(1,ANY,/android/widget/cts/ToggleButtonTest.java)', 1), ('(2,ANY,/android/print/cts/PrinterInfoTest.java)', 1), ('(1,ANY,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,ANY,/android/app/cts/AlertDialog_BuilderTest.java)', 1), ('(6,ANY,/android/security/cts/AdbUtils.java)', 1), ('(1,ANY,/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java)', 1), ('(1,ANY,/android/view/cts/util/BitmapDumper.java)', 1), ('(1,ANY,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/audio/USBAudioPeripheralActivity.java)', 1), ('(6,ANY,/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java)', 1), ('(37,ANY,/android/widget/cts/ListPopupWindowTest.java)', 1), ('(1,ANY,/android/jvmti/cts/JvmtiAttachingHostTest.java)', 1), ('(8,restriction,/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java)', 1), ('(1,ANY,/com/android/cts/verifier/p2p/testcase/ConnectReqTestCase.java)', 1), ('(1,ANY,/android/opengl/cts/OpenGlEsVersionTest.java)', 1), ('(1,ANY,/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java)', 1), ('(21,ANY,/android/musicrecognition/cts/MusicRecognitionManagerTest.java)', 1), ('(1,ANY,/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(1,ANY,/android/car/cts/CarPropertyConfigTest.java)', 1), ('(1,ANY,/android/car/cts/OptionalFeatureHostTest.java)', 1), ('(1,restriction,/android/car/cts/OptionalFeatureHostTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Utils/Path/Path.java)', 1), ('(1,ANY,/android/view/cts/ViewStubTest.java)', 1), ('(1,ANY,/com/android/cts/classloadersplitapp/BaseReceiver.java)', 1), ('(8,ANY,/android/translation/cts/UiTranslationManagerTest.java)', 1), ('(1,ANY,/com/android/cts/delegate/DelegateTestUtils.java)', 1), ('(3,restriction,/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java)', 1), ('(1,ANY,/android/app/time/cts/TimeManagerTest.java)', 1), ('(16,ANY,/android/widget/cts/SimpleCursorAdapterTest.java)', 1), ('(1,ANY,/com/android/compatibility/common/util/ReadElf.java)', 1), ('(4,ANY,/android/server/wm/WindowUntrustedTouchTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/managedprovisioning/VpnTestActivity.java)', 1), ('(2,restriction,/com/android/cts/verifier/managedprovisioning/VpnTestActivity.java)', 1), ('(3,ANY,/android/content/pm/cts/shortcutmanager/ShortcutManagerMultiLauncherTest.java)', 1), ('(5,ANY,/android/webkit/cts/WebViewTest.java)', 1), ('(1,restriction,/test/java/com/android/queryable/queries/BooleanQueryHelperTest.java)', 1), ('(6,restricted,/android/provider/cts/FontsContractTest.java)', 1), ('(6,ANY,/android/media/cts/EncodeVirtualDisplayTest.java)', 1), ('(23,ANY,/android/widget/cts/AbsListViewTest.java)', 1), ('(1,ANY,/dot/junit/AllTests.java)', 1), ('(3,ANY,/com/android/compatibility/common/util/StateKeeperRuleTest.java)', 1), ('(5,ANY,/android/view/cts/ViewGroupTest.java)', 1), ('(1,ANY,/com/android/cts/devicepolicy/DeviceAdminFeaturesCheckerRule.java)', 1), ('(1,ANY,/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java)', 1), ('(1,ANY,/com/android/tests/stagedinstall/StagedInstallTest.java)', 1), ('(1,ANY,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java)', 1), ('(1,ANY,/java/android/signature/cts/api/HiddenApiTest.java)', 1), ('(2,ANY,/android/inputmethodservice/cts/devicetest/DirectShellCommand.java)', 1), ('(46,ANY,/android/graphics/drawable/cts/LayerDrawableTest.java)', 1), ('(1,ANY,/android/mediav2/cts/DecoderColorAspectsTest.java)', 1), ('(2,ANY,/com/android/cts/delegate/GeneralDelegateTest.java)', 1), ('(1,ANY,/android/cts/backup/backuptransportapp/BackupTransportTest.java)', 1), ('(2,ANY,/android/webkit/cts/WebViewSyncLoader.java)', 1), ('(1,ANY,/android/app/cts/AlertDialog_BuilderCursorTest.java)', 1), ('(1,ANY,/android/print/cts/PrinterCapabilitiesChangeTest.java)', 1), ('(1,ANY,/android/car/cts/app/PowerPolicyTestClient.java)', 1), ('(3,ANY,/com/android/cts/verifier/sensors/RVCVXCheckAnalyzer.java)', 1), ('(1,ANY,/android/permission/cts/ServicePermissionTest.java)', 1), ('(1,ANY,/android/security/cts/ServicePermissionsTest.java)', 1), ('(22,ANY,/android/preference/cts/PreferenceDataStoreTest.java)', 1), ('(2,ANY,/android/view/cts/input/InputDeviceMultiDeviceKeyEventTest.java)', 1), ('(9,ANY,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(6,restriction,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(86,restricted,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(2,ANY,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,ANY,/android/server/wm/LayoutTests.java)', 1), ('(1,ANY,/art/CtsMain.java)', 1), ('(1,ANY,/com/android/cts/verifier/audio/AudioFrequencyActivity.java)', 1), ('(1,ANY,/android/telephony/cts/TelephonyLocationTests.java)', 1), ('(1,ANY,/android/cts/install/lib/host/InstallUtilsHost.java)', 1), ('(1,ANY,/android/provider/cts/contacts/ContactsContract_DataTest.java)', 1), ('(1,ANY,/com/android/cts/deviceowner/DevicePolicyLoggingTest.java)', 1), ('(1,ANY,/android/autofillservice/cts/testcore/CtsAugmentedAutofillService.java)', 1), ('(1,restriction,/android/contentcaptureservice/cts/ChildlessActivityTest.java)', 1), ('(1,restricted,/android/scopedstorage/cts/host/PreserveLegacyStorageHostTest.java)', 1), ('(1,ANY,/android/autofill/cts2/NoOpAutofillService.java)', 1), ('(1,ANY,/android/content/cts/ContentQueryMapTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Utils/PoseProvider/AndroidPoseProvider.java)', 1), ('(4,ANY,/android/database/cts/DatabaseCursorTest.java)', 1), ('(1,ANY,/android/view/textclassifier/cts/TextClassifierTest.java)', 1), ('(20,restriction,/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java)', 1), ('(1,ANY,/android/keystore/cts/CountingSecureRandom.java)', 1), ('(1,ANY,/android/view/cts/AttachedSurfaceControlSyncTest.java)', 1), ('(1,ANY,/android/server/wm/WindowInsetsAnimationSynchronicityTests.java)', 1), ('(5,ANY,/android/scopedstorage/cts/lib/TestUtils.java)', 1), ('(1,ANY,/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java)', 1), ('(18,restricted,/android/location/cts/gnss/asn1/base/Asn1IA5String.java)', 1), ('(2,ANY,/android/telecom/cts/DefaultPhoneAccountTest.java)', 1), ('(1,ANY,/com/android/cts/externalstorageapp/ExternalStorageTest.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java)', 1), ('(14,ANY,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(6,ANY,/android/media/cts/MediaRecorderTest.java)', 1), ('(2,restricted,/android/dpi/cts/DefaultManifestAttributesSdkTest.java)', 1), ('(1,ANY,/android/leanbackjank/app/ui/MainActivity.java)', 1), ('(1,ANY,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(1,ANY,/android/graphics/pdf/cts/PdfRendererTest.java)', 1), ('(27,ANY,/android/content/cts/DeferSyncTest.java)', 1), ('(5,ANY,/com/android/cts/verifier/bluetooth/BluetoothChatService.java)', 1), ('(19,restriction,/android/suspendapps/cts/DistractingPackageTest.java)', 1), ('(1,ANY,/com/android/cts/appwithdata/CreatePrivateDataTest.java)', 1), ('(62,restriction,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(2,ANY,/android/server/wm/DragDropTest.java)', 1), ('(2,ANY,/android/server/wm/TestJournalProvider.java)', 1), ('(1,ANY,/android/os/cts/LocaleListTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Activities/TestActivity.java)', 1), ('(1,ANY,/android/widget/cts/ToastTest.java)', 1), ('(5,ANY,/android/autofillservice/cts/unittests/ImageTransformationTest.java)', 1), ('(4,ANY,/android/widget/cts/MultiAutoCompleteTextViewTest.java)', 1), ('(2,ANY,/android/webkit/cts/WebViewZoomTest.java)', 1), ('(4,ANY,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(3,restriction,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(2,restricted,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(7,ANY,/android/hardware/camera2/cts/helpers/AssertHelpers.java)', 1), ('(4,ANY,/android/systemui/cts/WindowInsetsBehaviorTests.java)', 1), ('(3,ANY,/com/android/cts/verifier/sensors/MagneticFieldMeasurementTestActivity.java)', 1), ('(1,restriction,/android/keystore/cts/KeyInfoTest.java)', 1), ('(2,restricted,/android/keystore/cts/KeyInfoTest.java)', 1), ('(1,ANY,/com/android/cts/isolatedsplitapp/feature_a/FeatureAReceiver.java)', 1), ('(14,ANY,/android/text/style/cts/SuggestionSpanTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/widget/WidgetCtsProvider.java)', 1), ('(1,ANY,/android/mediav2/cts/MuxerTest.java)', 1), ('(3,restriction,/test/java/com/android/queryable/queries/StringQueryHelperTest.java)', 1), ('(1,ANY,/android/appsecurity/cts/keyrotationtest/service/SignatureQueryService.java)', 1), ('(5,ANY,/android/mediav2/cts/CodecTestBase.java)', 1), ('(2,ANY,/android/hardware/camera2/cts/rs/BlockingInputAllocation.java)', 1), ('(1,ANY,/android/view/inputmethod/cts/KeyboardTest.java)', 1), ('(1,ANY,/android/security/cts/KernelSettingsTest.java)', 1), ('(1,ANY,/android/app/cts/ActivityCallbacksTest.java)', 1), ('(1,ANY,/com/android/cts/userapptest/ClientTest.java)', 1), ('(2,ANY,/android/permission2/cts/RestrictedStoragePermissionTest.java)', 1), ('(1,restriction,/android/permission2/cts/RestrictedStoragePermissionTest.java)', 1), ('(32,restricted,/android/permission2/cts/RestrictedStoragePermissionTest.java)', 1), ('(2,ANY,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(19,restriction,/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java)', 1), ('(1,ANY,/main/java/com/android/bedstead/nene/packages/PackageReference.java)', 1), ('(1,ANY,/BackupEligibilityTest.java)', 1), ('(3,ANY,/android/telephony/cts/BatteryStatsManagerTest.java)', 1), ('(1,ANY,/android/os/cts/BuildTest.java)', 1), ('(2,restricted,/android/os/cts/BuildTest.java)', 1), ('(1,ANY,/test/java/com/android/bedstead/nene/users/UserTest.java)', 1), ('(1,ANY,/com/android/cts/apicoverage/CurrentXmlHandler.java)', 1), ('(1,ANY,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(3,ANY,/com/android/compatibility/common/util/transition/TrackingTransition.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/RequiredStrongAuthTimeoutTest.java)', 1), ('(6,ANY,/android/searchuiservice/cts/SearchUiManagerTest.java)', 1), ('(1,restriction,/test/java/com/android/queryable/queries/EnumQueryHelperTest.java)', 1), ('(3,ANY,/android/media/cts/SurfaceEncodeTimestampTest.java)', 1), ('(3,ANY,/android/text/cts/StaticLayoutLineBreakingTest.java)', 1), ('(1,ANY,/android/os/cts/DebugTest.java)', 1), ('(1,ANY,/android/server/wm/AppConfigurationTests.java)', 1), ('(1,ANY,/android/uirendering/cts/testclasses/BitmapDrawableTest.java)', 1), ('(1,ANY,/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java)', 1), ('(1,ANY,/android/location/cts/gnss/asn1/base/Asn1SequenceOf.java)', 1), ('(1,ANY,/android/content/pm/cts/FeatureGroupInfoTest.java)', 1), ('(2,ANY,/android/hardware/cts/helpers/TestSensorEventListener.java)', 1), ('(11,ANY,/android/camera/cts/api31test/SPerfClassTest.java)', 1), ('(2,ANY,/android/server/wm/BackgroundActivityLaunchTest.java)', 1), ('(16,restriction,/com/android/cts/deviceowner/PrivateDnsPolicyTest.java)', 1), ('(1,ANY,/com/android/json/stream/NewlineDelimitedJsonWriter.java)', 1), ('(1,restricted,/android/keystore/cts/KeyProtectionTest.java)', 1), ('(2,ANY,/com/android/cts/install/lib/InstallUtils.java)', 1), ('(9,ANY,/android/preference/cts/PreferenceActivityFlowTest.java)', 1), ('(1,ANY,/android/content/pm/cts/FeatureTest.java)', 1), ('(1,ANY,/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java)', 1), ('(14,ANY,/android/widget/cts/ListViewTest.java)', 1), ('(5,restriction,/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java)', 1), ('(4,ANY,/android/app/cts/ActivityActionModeTest.java)', 1), ('(1,ANY,/android/cts/backup/BaseBackupHostSideTest.java)', 1), ('(4,ANY,/android/util/proto/cts/ProtoOutputStreamObjectTest.java)', 1), ('(1,ANY,/android/suspendapps/cts/TestAppInterface.java)', 1), ('(1,ANY,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(1,ANY,/android/telecom/cts/IncomingCallTest.java)', 1), ('(1,ANY,/android/car/cts/powerpolicy/PowerPolicyDef.java)', 1), ('(5,ANY,/android/hardware/cts/CameraTest.java)', 1), ('(5,ANY,/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java)', 1), ('(4,ANY,/android/widget/cts/SearchViewTest.java)', 1), ('(2,ANY,/android/server/wm/AssistantStackTests.java)', 1), ('(2,ANY,/android/location/cts/gnss/GnssMeasurementValuesTest.java)', 1), ('(13,ANY,/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java)', 1), ('(5,restriction,/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java)', 1), ('(3,ANY,/com/android/cts/mockime/MockImeSession.java)', 1), ('(1,ANY,/com/android/cts/readexternalstorageapp/ReadExternalStorageTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/ReportExporter.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(1,ANY,/android/telephony/embms/cts/MbmsDownloadReceiverTest.java)', 1), ('(1,ANY,/android/server/wm/lifecycle/LifecycleTracker.java)', 1), ('(11,ANY,/android/graphics/drawable/cts/TransitionDrawableTest.java)', 1), ('(4,ANY,/android/hardware/camera2/cts/helpers/CameraErrorCollector.java)', 1), ('(1,ANY,/com/android/cts/classloadersplitapp/feature_a/FeatureAReceiver.java)', 1), ('(1,restriction,/android/security/cts/RunningAppProcessInfoTest.java)', 1), ('(1,ANY,/android/server/wm/app/BottomActivity.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Utils/Path/ReferencePath.java)', 1), ('(1,ANY,/android/media/cts/ConnectionStatus.java)', 1), ('(4,ANY,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(10,ANY,/android/text/method/cts/MultiTapKeyListenerTest.java)', 1), ('(2,ANY,/art/Main.java)', 1), ('(3,ANY,/android/telecom/cts/CtsConnectionService.java)', 1), ('(5,ANY,/RestoreAnyVersionTest.java)', 1), ('(1,ANY,/android/opengl2/cts/reference/GLGameActivity.java)', 1), ('(3,restriction,/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java)', 1), ('(2,restriction,/com/android/cts/managedprofile/CrossProfileUtils.java)', 1), ('(1,ANY,/android/view/inputmethod/cts/util/LightNavigationBarVerifier.java)', 1), ('(16,ANY,/android/keystore/cts/CipherTest.java)', 1), ('(4,restriction,/android/keystore/cts/CipherTest.java)', 1), ('(1,ANY,/android/server/wm/lifecycle/ActivityLifecycleTopResumedStateTests.java)', 1), ('(1,ANY,/com/android/cts/verifier/camera/intents/CameraIntentsActivity.java)', 1), ('(1,ANY,/android/dynamicmime/testapp/assertions/AssertionsByIntentResolution.java)', 1), ('(10,ANY,/android/provider/cts/DocumentsContractTest.java)', 1), ('(4,ANY,/android/database/sqlite/cts/SQLiteDatabaseTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Renderer/ComplexMovementRenderer.java)', 1), ('(1,ANY,/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java)', 1), ('(5,ANY,/android/widget/cts/RemoteViewsRecyclingTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/managedprovisioning/DeviceOwnerRequestingBugreportTestActivity.java)', 1), ('(1,ANY,/com/android/cts/verifier/notifications/ShortcutThrottlingResetActivity.java)', 1), ('(1,ANY,/android/hdmicec/cts/targetprep/CecPortDiscoverer.java)', 1), ('(2,ANY,/android/security/cts/STKFrameworkTest.java)', 1), ('(9,restriction,/test/java/com/android/queryable/queries/LongQueryHelperTest.java)', 1), ('(1,restriction,/android/widget/cts/CalendarViewTest.java)', 1), ('(2,ANY,/android/media/cts/ExifInterfaceTest.java)', 1), ('(1,ANY,/android/location/cts/common/TestMeasurementUtil.java)', 1), ('(1,ANY,/test/java/com/android/bedstead/nene/users/UsersTest.java)', 1), ('(6,ANY,/com/android/cts/normalapp/ClientTest.java)', 1), ('(2,ANY,/com/android/cts/rollback/lib/RollbackInfoSubject.java)', 1), ('(1,ANY,/com/android/cts/verifier/sensors/sixdof/Fragments/AccuracyFragment.java)', 1), ('(2,ANY,/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java)', 1), ('(1,restriction,/com/android/cts/deviceandprofileowner/PasswordRequirementsTest.java)', 1), ('(1,ANY,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(4,ANY,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(1,ANY,/android/telephony/embms/cts/MbmsStreamingSessionTest.java)', 1), ('(3,ANY,/android/telephony/cts/TelephonyCallbackTest.java)', 1), ('(2,ANY,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(19,ANY,/android/dynamicmime/testapp/MultipleAppsTest.java)', 1), ('(4,ANY,/android/jobscheduler/cts/JobInfoTest.java)', 1), ('(4,ANY,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(43,restricted,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,ANY,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(2,ANY,/com/android/compatibility/common/util/WidgetTestUtils.java)', 1), ('(5,ANY,/com/android/tests/stagedinstall/host/StagedInstallTest.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java)', 1), ('(29,restriction,/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java)', 1), ('(3,ANY,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(1,ANY,/android/server/wm/DisplayAreaPolicyTests.java)', 1), ('(5,ANY,/android/media/cts/CodecState.java)', 1), ('(4,ANY,/android/widget/cts/NumberPickerTest.java)', 1), ('(1,ANY,/android/cts/backup/includeexcludeapp/DataExtractionRulesApplicabilityTest.java)', 1), ('(2,ANY,/com/android/cts/rollback/lib/RollbackUtils.java)', 1), ('(2,ANY,/android/media/cts/AudioTrackLatencyTest.java)', 1), ('(21,restriction,/com/android/cts/deviceowner/SetPolicyActivity.java)', 1), ('(3,ANY,/com/android/cts/verifier/sensors/sixdof/Utils/TestPhase/Test.java)', 1), ('(2,ANY,/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java)', 1), ('(27,ANY,/android/devicepolicy/cts/LockTaskTest.java)', 1), ('(8,ANY,/android/contentsuggestions/cts/ContentSuggestionsManagerTest.java)', 1), ('(5,ANY,/android/security/cts/TestMedia.java)', 1), ('(1,ANY,/android/content/pm/cts/shortcut/backup/launcher2/ShortcutManagerPostBackupTest.java)', 1), ('(5,ANY,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1)]	"[('([3:/android/print/cts/PrintDocumentAdapterContractTest.java]:[ANY]:[3]:method_text:[ish();        // No other call are expected.        verifyNoMoreInteractions(adapter);    }   ])', 9), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[ANY]:[1]:method_text:[tate.dpc().devicePolicyManager().setLockTaskPackages(originalLockTaskPackages);        }    }   ])', 9), ('([1:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[1]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 5), ('([1:/android/widget/cts/PopupMenuTest.java]:[ANY]:[1]:method_text:[       verifyNoMoreInteractions(mBuilder.mOnDismissListener);        mPopupMenu = null;    }   ])', 4), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[ANY]:[1]:method_text:[ype is handled correctly.     *     * @throws Exception If anything unexpected happens     */   ])', 3), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[ANY]:[1]:method_text:[                    AlarmReceiver.waitForAlarm(id, DEFAULT_WAIT_FOR_SUCCESS));        }    }   ])', 3), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[restriction]:[1]:method_text:[CKGROUND_RESTRICTION,                mTestAppInterface.getLastParams().getStopReason());    }   ])', 3), ('([3:/android/jobscheduler/cts/JobThrottlingTest.java]:[restricted]:[3]:method_text:[CKGROUND_RESTRICTION,                mTestAppInterface.getLastParams().getStopReason());    }   ])', 3), ('([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[ANY]:[1]:method_text:[Utils.runDeviceTests(getDevice(), DEVICE_TESTS_PKG, DEVICE_TESTS_CLASS, ""testHasNoPerm"");    }   ])', 3), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[4]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 2), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[= null) {            assertThat(pkg.installedOnUsers()).doesNotContain(sUser);        }    }   ])', 2), ('([2:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[2]:method_text:[p();            assertThat(testApp.reference().runningProcesses()).isEmpty();        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[            assertThat(testApp.reference().runningProcess(sUser)).isNotNull();        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[action().isEqualTo(INTENT_ACTION);            assertThat(logs.get()).isNull();        }    }   ])', 2), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[1]:method_text:[e the all CarrierMessagingServices can send data sms and     * triggers valid callback.     */   ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ANY]:[1]:method_text:[nt.CATEGORY_OPENABLE);        intent.setType(""*/*"");        assertCanBeHandled(intent);    }   ])', 2), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[ANY]:[1]:method_text:[unt is handled correctly.     *     * @throws Exception If anything unexpected happens     */   ])', 2), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[ANY]:[1]:method_text:[e document has two pages)     *     * @throws Exception If anything unexpected happens     */   ])', 2), ('([1:/android/classloaders/cts/BaseInstallMultiple.java]:[ANY]:[1]:method_text:[       } else {            TestCase.assertTrue(result, result.contains(failure));        }    }}])', 2), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[);        } finally {            remoteDPC.devicePolicyController().remove();        }    }   ])', 2), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[        } finally {            deviceOwner.devicePolicyController().remove();        }    }   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[restricted]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[restricted]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[restricted]:[3]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[ANY]:[1]:method_text:[        TestTheme.THEME_FEATURE_A, TestTheme.THEME_FEATURE_B, TestTheme.THEME_FEATURE_C);    }   ])', 2), ('([3:/android/transition/cts/TransitionManagerTest.java]:[ANY]:[3]:method_text:[quare));            assertNotNull(mActivity.findViewById(R.id.greenSquare));        });    }   ])', 2), ('([2:/test/java/com/android/queryable/queries/PersistableBundleQueryHelperTest.java]:[restriction]:[2]:method_text:[        assertThat(persistableBundleQueryHelper.matches(mPersistableBundle)).isFalse();    }   ])', 2), ('([1:/android/hardware/cts/SensorManagerStaticTest.java]:[ANY]:[1]:method_text:[v2[0], rotv2[1], rotv2[2]),                RI[0] + RI[4] + RI[8], 3.f, 1e-4f);        }    }   ])', 2), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[restriction]:[1]:method_text:[le    // respecting the spec constraints.    // Test fails until the resolution of b/113276806   ])', 2), ('([1:/android/media/cts/AudioPlaybackConfigurationTest.java]:[ANY]:[1]:method_text:[           if (h != null) {                h.getLooper().quit();            }        }    }   ])', 2), ('([5:/android/text/cts/TextUtilsTest.java]:[ANY]:[5]:method_text:[xception!"");        } catch (NullPointerException e) {            // expected        }    }   ])', 2), ('([3:/android/widget/cts/ProgressBarTest.java]:[ANY]:[3]:method_text:[awable, times(1)).setTintList(TestUtils.colorStateListOf(Color.WHITE));    }    @UiThreadTest   ])', 2), ('([1:/android/widget/cts/ProgressBarTest.java]:[ANY]:[1]:method_text:[)).setTintList(                TestUtils.colorStateListOf(Color.RED));    }    @UiThreadTest   ])', 2), ('([1:/android/view/cts/ViewGroupTest.java]:[ANY]:[1]:method_text:[}    @UiThreadTest    @Ignore(""Turn on once ViewRootImpl.USE_NEW_INSETS is switched to true"")   ])', 2), ('([6:/android/jobscheduler/cts/JobThrottlingTest.java]:[restricted]:[6]:method_text:[as unrestricted"",                mTestAppInterface.awaitJobStart(DEFAULT_WAIT_TIMEOUT));    }   ])', 2), ('([4:/android/content/cts/DeferSyncTest.java]:[ANY]:[4]:method_text:[  extrasCaptor.getValue().containsKey(ContentResolver.SYNC_EXTRAS_INITIALIZE));        }    }   ])', 2), ('([2:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[restriction]:[2]:method_text:[UserRestriction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_ADD_USER);    }   ])', 2), ('([1:/android/systemui/cts/WindowInsetsBehaviorTests.java]:[ANY]:[1]:method_text:[Number of the canceled points not match"", 0,                mActionCancelPoints.size());    }   ])', 2), ('([1:/android/scopedstorage/cts/device/ScopedStorageDeviceTest.java]:[ANY]:[1]:method_text:[eleteFiles(pendingVideoFile, trashedImageFile, pendingPdfFile, trashedPdfFile);        }    }   ])', 2), ('([1:/android/keystore/cts/CipherTest.java]:[ANY]:[1]:method_text:[yptionProvider,                            e);                }            }        }    }   ])', 2), ('([1:/android/keystore/cts/CipherTest.java]:[ANY]:[1]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 2), ('([1:/android/keystore/cts/CipherTest.java]:[ANY]:[1]:method_text:[en authorized only for "" + badDigest,                        e);            }        }    }   ])', 2), ('([1:/android/keystore/cts/CipherTest.java]:[ANY]:[1]:method_text:[              + badEncryptionPadding,                        e);            }        }    }   ])', 2), ('([2:/android/keystore/cts/CipherTest.java]:[restriction]:[2]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[restricted]:[4]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[restricted]:[4]:method_text:[y requested for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([6:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[restricted]:[6]:method_text:[ suggestion for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([2:/android/devicepolicy/cts/LockTaskTest.java]:[ANY]:[2]:method_text:[tate.dpc().devicePolicyManager().setLockTaskPackages(originalLockTaskPackages);        }    }   ])', 2), ('([2:/android/devicepolicy/cts/LockTaskTest.java]:[ANY]:[2]:method_text:[kTaskFeatures(                        originalLockTaskFeatures);            }        }    }   ])', 2), ('([2:/android/devicepolicy/cts/LockTaskTest.java]:[ANY]:[2]:method_text:[kTaskPackages(                        originalLockTaskPackages);            }        }    }   ])', 2), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[ANY]:[1]:method_text:[kTaskPackages(                        originalLockTaskPackages);            }        }    }   ])', 2), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[restriction]:[1]:method_text:[OLUME can only be set by device owners        // and profile owners on the primary user.    }   ])', 1), ('([2:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[restriction]:[2]:method_text:[ {        super.testPackageInstallUserRestrictions();    }    @Override    @PermissionsTest   ])', 1), ('([1:/android/bluetooth/cts/HearingAidProfileTest.java]:[ANY]:[1]:method_text:[ t) {        try {            Thread.sleep(t);        } catch (InterruptedException e) {}    }}])', 1), ('([2:/com/android/compatibility/common/tradefed/presubmit/ValidateTestsAbi.java]:[ANY]:[2]:method_text:[ will end up with only one of     * the two abis required and the second one will fail.     */   ])', 1), ('([1:/android/content/cts/IntentFilterTest.java]:[ANY]:[1]:method_text:[TEGORY_TYPE,                        ACTION, null, ""*/*"", ""scheme1://authority1"", true));    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[ANY]:[1]:method_text:[ServiceRule.enableService();        mMotionEvents.clear();        mGotUpEvent = false;    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[ANY]:[1]:method_text:[me() + ViewConfiguration.getLongPressTimeout()                > clickUp.getEventTime());    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[ANY]:[1]:method_text:[Up.getEventTime());        assertEquals(clickDown.getDownTime(), clickUp.getDownTime());    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[ANY]:[1]:method_text:[                both(IS_ACTION_UP).and(isAtPoint(viewPortCenterWithOffset, POINT_TOL)));    }   ])', 1), ('([1:/android/animation/cts/AnimatorSetTest.java]:[ANY]:[1]:method_text:[ public void tearDown() {        ValueAnimator.setDurationScale(mPreviousDurationScale);    }   ])', 1), ('([2:/android/animation/cts/AnimatorSetTest.java]:[ANY]:[2]:method_text:[   /**     * Test that non-zero duration scale is handled correctly in the AnimatorSet.     */   ])', 1), ('([2:/android/text/cts/SpannableStringBuilderTest.java]:[ANY]:[2]:method_text:[on        } catch (NullPointerException e) {            // expected exception        }    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_AllUriTest.java]:[ANY]:[2]:method_text:[ull);    }    /**     * Make sure all URLs are accessible with all arguments = null.     */   ])', 1), ('([1:/android/print/cts/PrintJobStateTransitionsTest.java]:[ANY]:[1]:method_text:[nce the job is     * queued.     *     * @throws Exception If anything is unexpected.     */   ])', 1), ('([14:/android/hardware/camera2/cts/CameraTestUtils.java]:[ANY]:[14]:method_text:[               return false;                }            }        }        return false;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/ServiceDisabledForSureTest.java]:[ANY]:[1]:method_text:[feCleanerRule.run(() ->assertThat(mActivity.getAutofillManager().isEnabled()).isFalse());    }   ])', 1), ('([1:/android/server/wm/CompatChangeTests.java]:[ANY]:[1]:method_text:[-resizeable portrait activity enters size compat mode after resizing the     * display.     */   ])', 1), ('([1:/com/android/cts/forcestophelper/TaskRemovedListenerService.java]:[ANY]:[1]:method_text:[wWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, ALARM_DELAY, alarmPi);        stopSelf();    }}])', 1), ('([1:/com/android/cts/verifier/bluetooth/BleCocSecureServerTestListActivity.java]:[ANY]:[1]:method_text:[tClass().getName(),                disabledTest.toArray(new String[disabledTest.size()])));    }}])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[ANY]:[1]:method_text:[automation.dropShellPermissionIdentity();        }        overrideCarrierConfig(null);    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[ANY]:[1]:method_text:[  res = waitForIntResult(actionQueue, 500);        assertEquals(res, Integer.MAX_VALUE);    }   ])', 1), ('([1:/android/cts/backup/includeexcludeapp/IncludeExcludeTest.java]:[ANY]:[1]:method_text:[, ""file_to_include""));        mExcludeFiles.add(new File(directory, ""file_to_exclude""));    }   ])', 1), ('([1:/android/renderscript/cts/FieldPackerTest.java]:[ANY]:[1]:method_text:[tException."");            } catch (RSIllegalArgumentException e) {            }        }    }}])', 1), ('([1:/android/view/cts/TextureViewCtsActivity.java]:[ANY]:[1]:method_text:[FACE_TYPE, EGL10.EGL_WINDOW_BIT,                    EGL10.EGL_NONE            };        }    }}])', 1), ('([1:/com/android/server/cts/device/batterystats/BatteryStatsSyncAdapter.java]:[ANY]:[1]:method_text:[        Thread.sleep(sleep);        }        Assert.fail(""Couldn\'t cancel pending sync."");    }}])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[2]:method_text:[ the correct number of keystore entries"",                expectedAliases.length, count);    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[3]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[3]:method_text:[));        } finally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[2]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[ANY]:[3]:method_text:[   threads.get(i).join();        }        Log.i(TAG, ""Deleted "" + numberOfKeys + "" keys"");    }}])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[ANY]:[1]:method_text:[lments created via {@link BiometricTestSession} show up in the     * biometric dumpsys.     */   ])', 1), ('([2:/android/server/biometrics/BiometricSimpleTests.java]:[ANY]:[2]:method_text:[ Cancelling authentication for the above     * 4) Cancelling auth for options 2) and 3)     */   ])', 1), ('([4:/android/server/biometrics/BiometricSimpleTests.java]:[ANY]:[4]:method_text:[s that the result is     * {@link BiometricPrompt#AUTHENTICATION_RESULT_TYPE_BIOMETRIC}     */   ])', 1), ('([1:/android/server/biometrics/BiometricSimpleTests.java]:[ANY]:[1]:method_text:[         any());                verifyNoMoreInteractions(callback);            }        }    }}])', 1), ('([2:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[ANY]:[2]:method_text:[     isA(CaptureRequest.class),                                isA(CaptureFailure.class));    }}])', 1), ('([1:/android/content/cts/ContentResolverWrapTest.java]:[ANY]:[1]:method_text:[mProvider.attachInfo(mContext, pi);        mResolver = ContentResolver.wrap(mProvider);    }   ])', 1), ('([2:/android/content/cts/ContentResolverWrapTest.java]:[ANY]:[2]:method_text:[);        assertEquals(CURSOR, mResolver.query(URI, ARG_ARRAY, null, null, null, null));    }   ])', 1), ('([2:/android/content/cts/ContentResolverWrapTest.java]:[ANY]:[2]:method_text:[ize(32, 32), SIGNAL);            fail();        } catch (IOException expected) {        }    }}])', 1), ('([1:/com/android/cts/verifier/sensors/sixdof/Renderer/Renderable/Light.java]:[ANY]:[1]:method_text:[slation[Z]);    }    @Override    public void destroy() {        // Nothing to destroy.    }}])', 1), ('([2:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[2]:method_text:[gSession.Callback.Reason int REASON =            RangingSession.Callback.REASON_GENERIC_ERROR;   ])', 1), ('([2:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[2]:method_text:[(1)).onOpened(eq(session));        verify(callback, times(0)).onClosed(anyInt(), any());    }   ])', 1), ('([6:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[6]:method_text:[(1)).onOpened(eq(session));        verify(callback, times(1)).onClosed(anyInt(), any());    }   ])', 1), ('([2:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[2]:method_text:[(0)).onOpened(eq(session));        verify(callback, times(1)).onClosed(anyInt(), any());    }   ])', 1), ('([4:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[4]:method_text:[gingClosed(REASON, PARAMS);        verify(callback, times(2)).onClosed(anyInt(), any());    }   ])', 1), ('([4:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[4]:method_text:[lState(() -> session.start(PARAMS));        verify(callback, times(1)).onStarted(any());    }   ])', 1), ('([7:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[7]:method_text:[legalState(session::stop);        verify(callback, times(1)).onStopped(anyInt(), any());    }   ])', 1), ('([9:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[9]:method_text:[erify(callback, times(3)).onReconfigured(any());        verifyOpenState(session, false);    }   ])', 1), ('([4:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[4]:method_text:[ging(handle);            verify(callback, times(i)).onClosed(anyInt(), any());        }    }   ])', 1), ('([3:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[3]:method_text:[;        session.close();        verify(callback, times(1)).onClosed(anyInt(), any());    }   ])', 1), ('([1:/android/uwb/cts/RangingSessionTest.java]:[ANY]:[1]:method_text:[galState(() -> session.stop());        verifyNoThrowIllegalState(() -> session.close());    }   ])', 1), ('([1:/android/uidisolation/cts/PermissionTestService.java]:[ANY]:[1]:method_text:[      if (webServer != null) {                webServer.shutdown();            }        }    }}])', 1), ('([1:/android/view/cts/View_UsingViewsTest.java]:[ANY]:[1]:method_text:[    mWarningTextView = (TextView) mActivity.findViewById(R.id.warning);    }    @UiThreadTest   ])', 1), ('([1:/android/view/cts/View_UsingViewsTest.java]:[ANY]:[1]:method_text:[lball);        assertEquals(R.id.symbolball, mSymbolTextView.getId());    }    @UiThreadTest   ])', 1), ('([2:/android/view/cts/View_UsingViewsTest.java]:[ANY]:[2]:method_text:[;        assertEquals(View.VISIBLE, mWarningTextView.getVisibility());    }    @UiThreadTest   ])', 1), ('([2:/android/os/cts/UsbDebuggingTest.java]:[restricted]:[2]:method_text:[java.io.File;public class UsbDebuggingTest extends AndroidTestCase {    @RestrictedBuildTest   ])', 1), ('([3:/android/widget/cts/GridViewTest.java]:[ANY]:[3]:method_text:[ty.findViewById(R.id.gridview);        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([6:/android/widget/cts/GridViewTest.java]:[ANY]:[6]:method_text:[eq(mGridView), any(View.class),                eq(NUM_COLUMNS), eq((long) NUM_COLUMNS));    }   ])', 1), ('([1:/com/android/cts/verifier/sensors/StepCounterTestActivity.java]:[ANY]:[1]:method_text:[.add(timestamp);        getTestLogger().logMessage(R.string.snsr_step_reported, timestamp);    }}])', 1), ('([8:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[restriction]:[8]:method_text:[lity(ADMIN_RECEIVER_COMPONENT, mParentPreviousPasswordQuality);        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[restriction]:[1]:method_text:[        invokeGetMethod(METHOD_LIST[i], mParentDpm, ADMIN_RECEIVER_COMPONENT));        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[restriction]:[1]:method_text:[     }                // Expected to throw NullPointerException.            }        }    }   ])', 1), ('([8:/com/android/cts/deviceandprofileowner/PasswordMinimumRestrictionsTest.java]:[restriction]:[8]:method_text:[ }    private String getMethodName(String methodName) {        return ""get"" + methodName;    }}])', 1), ('([2:/android/media/cts/MediaCodecTunneledPlayer.java]:[ANY]:[2]:method_text:[elFrameReady()) {                return true;            }        }        return false;    }}])', 1), ('([1:/com/android/cts/verifier/nfc/hce/HceService.java]:[ANY]:[1]:method_text:[ceComplete();                }                return responseApdu;            }        }    }}])', 1), ('([1:/com/android/compatibility/common/util/SafeCleanerRuleTest.java]:[ANY]:[1]:method_text:[lable<List<Throwable>> mGoodGuyExtraExceptions2;    @Mock private Statement mGoodGuyStatement;   ])', 1), ('([2:/android/telecom/cts/ConferenceTest.java]:[restricted]:[2]:method_text:[ propagation of the {@link Conference} properties to the associated     * {@link Call}.     */   ])', 1), ('([1:/android/view/cts/FocusFinderTest.java]:[ANY]:[1]:method_text:[ft);        view.setTop(top);        view.setRight(right);        view.setBottom(bottom);    }}])', 1), ('([1:/android/app/usage/cts/test1/SomeActivity.java]:[ANY]:[1]:method_text:[nstanceState);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java]:[restriction]:[2]:method_text:[LockScreenFeature();        executeDeviceTestClass("".PasswordMinimumRestrictionsTest"");    }   ])', 1), ('([1:/android/media/cts/AudioPlaybackCaptureTest.java]:[ANY]:[1]:method_text:[rds) {                    audioRecord.release();                }            }        }    }}])', 1), ('([2:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[restriction]:[2]:method_text:[riction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[restriction]:[1]:method_text:[+ mUserId + "": "" + expected                + ""; actual: "" + actual + "" after 0.5 seconds"");    }}])', 1), ('([1:/android/content/cts/ContextTest.java]:[ANY]:[1]:method_text:[sultExtras.getString(KEY_KEPT));        assertNull(resultExtras.getString(KEY_REMOVED));    }   ])', 1), ('([1:/android/content/cts/ContextTest.java]:[ANY]:[1]:method_text:[ IntentFilter(MOCK_STICKY_ACTION)));        mContext.unregisterReceiver(stickyReceiver);    }   ])', 1), ('([1:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[ANY]:[1]:method_text:[    public void tearDown() {        mSampleActivityStartedReceiver.unregisterQuietly();    }   ])', 1), ('([2:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[ANY]:[2]:method_text:[erifyWarningShown();        clickLaunchAnyway();        verifySampleActivityLaunched();    }   ])', 1), ('([1:/android/autofillservice/cts/testcore/InstrumentedAutoFillService.java]:[ANY]:[1]:method_text:[portUnhandledSaveRequest);            pw.print(""mIdMode: ""); pw.println(mIdMode);        }    }}])', 1), ('([2:/android/view/inputmethod/cts/util/TestActivity.java]:[ANY]:[2]:method_text:[TATE)                        | newState;        window.setSoftInputMode(newSoftInputMode);    }}])', 1), ('([1:/android/cts/FileChannelInterProcessLockTest.java]:[ANY]:[1]:method_text:[          lockReleasedLatch.countDown();                    break;            }        }    }}])', 1), ('([29:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[29]:method_text:[_RECEIVER_COMPONENT, mContext.getPackageName(), new Bundle());        super.tearDown();    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[4]:method_text:[alling identity is not authorized"",                    expected.getMessage());        }    }   ])', 1), ('([23:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[23]:method_text:[icationRestrictions(                ADMIN_RECEIVER_COMPONENT, OTHER_PACKAGE).isEmpty());    }   ])', 1), ('([8:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[8]:method_text:[R_COMPONENT, packageName));        assertBundle1(waitForRestrictionsChangedBroadcast());    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[2]:method_text:[ SecurityException not thrown"");        } catch (SecurityException expected) {        }    }   ])', 1), ('([10:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[10]:method_text:[ictionsManagingPackage(                            ADMIN_RECEIVER_COMPONENT));        }    }   ])', 1), ('([17:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[restriction]:[17]:method_text:[       }        return mUserManager.getApplicationRestrictions(mContext.getPackageName());    }}])', 1), ('([1:/android/cts/backup/ProfileSerialNumberHostSideTest.java]:[ANY]:[1]:method_text:[)} returns {@code null}     * when the given serial number is not assigned to any user.     */   ])', 1), ('([1:/android/signature/cts/tests/data/NormalInterface.java]:[ANY]:[1]:method_text:[tation for * any of these methods. */public interface NormalInterface {    void doSomething();}])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[restricted]:[1]:method_text:[ugs-and-more-plagiarism/     * http://forum.xda-developers.com/showthread.php?t=1213014     */   ])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[restricted]:[1]:method_text:[alse(""/dev/socket/fota"", new File(""/dev/socket/fota"").exists());    }    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[restricted]:[1]:method_text:[rtFalse(""/vendor/bin/su"",  new File(""/vendor/bin/su"").exists());    }    @RestrictedBuildTest   ])', 1), ('([1:/android/car/cts/PowerPolicyHostTest.java]:[ANY]:[1]:method_text:[vents but {@code SHUTDOWN_PREPARE} shall not have any impact     * to CPMS power state.     */   ])', 1), ('([2:/android/dynamicmime/testapp/util/IntentsResolutionHelper.java]:[ANY]:[2]:method_text:[nfo.activityInfo.name.equals(PACKAGE_ACTIVITIES + simpleClassName);            }        };    }}])', 1), ('([2:/android/car/cts/CarRotaryImeTest.java]:[ANY]:[2]:method_text:[                           ComponentName.unflattenFromString(componentNameAndSubtypes[0])));    }}])', 1), ('([3:/com/android/cts/apicoverage/PackageFilter.java]:[ANY]:[3]:method_text:[      mFilters.add(prefix);    }    public void clearFilter() {        mFilters.clear();    }}])', 1), ('([1:/android/os/cts/ParcelTest.java]:[ANY]:[1]:method_text:[    p.setDataPosition(0);        assertEquals(kTest, p.readInt());        p.recycle();    }   ])', 1), ('([1:/android/cts/backup/restoresessionapp1/RestoreSessionAppTest.java]:[ANY]:[1]:method_text:[ED_PREFERENCES_KEY = ""test_key_1"";    private static final int SHARED_PREFERENCES_VALUE = 123;   ])', 1), ('([1:/com/android/cts/host/blob/BlobStoreMultiUserTest.java]:[ANY]:[1]:method_text:[_PKG, TEST_CLASS, ""testOpenBlob"", argsFromLastTestRun,                mSecondaryUserId);    }   ])', 1), ('([1:/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java]:[ANY]:[1]:method_text:[licited_publish,                R.string.aware_data_path_open_unsolicited_publish_info, 0);    }}])', 1), ('([1:/android/leanbackjank/cts/CtsDeviceLeanback.java]:[ANY]:[1]:method_text:[erationCount = 2)    @GfxMonitor(processName = APP_PACKAGE)    @WindowContentFrameStatsMonitor   ])', 1), ('([1:/android/telephony/device/cts/TelephonyTest.java]:[ANY]:[1]:method_text:[it.MILLISECONDS);        assertTrue(""Never got anything on the extra listener"", result);    }   ])', 1), ('([2:/android/telephony/device/cts/TelephonyTest.java]:[ANY]:[2]:method_text:[              l, PhoneStateListener.LISTEN_SERVICE_STATE));        return fillerListeners;    }}])', 1), ('([12:/android/hardware/camera2/cts/RobustnessTest.java]:[ANY]:[12]:method_text:[    /**     * Test for making sure the mandatory stream combinations work as expected.     */   ])', 1), ('([4:/android/hardware/camera2/cts/RobustnessTest.java]:[ANY]:[4]:method_text:[ll expected mandatory stream combinations are present and     * advertised accordingly.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[ANY]:[1]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileSharingTest.java]:[ANY]:[1]:method_text:[tch == 0) {                return resolveInfo;            }        }        return null;    }}])', 1), ('([1:/android/compilation/cts/AdbRootDependentCompilationTest.java]:[ANY]:[1]:method_text:[n an empty array.        return !(result.length > 0 && result[0].contains(""No such file""));    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[ANY]:[1]:method_text:[            return false;                }            }            return true;        }    }}])', 1), ('([2:/android/hardware/camera2/cts/MultiViewTest.java]:[ANY]:[2]:method_text:[    }    /*     * Verify dynamic shared surface behavior using multiple ImageReaders.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[ANY]:[1]:method_text:[Id);    }    /*     * Verify dynamic shared surface behavior using YUV ImageReaders.     */   ])', 1), ('([3:/android/hardware/camera2/cts/MultiViewTest.java]:[ANY]:[3]:method_text:[eaders[i].close();        }    }    /*     * Test the dynamic shared surface limit.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[ANY]:[1]:method_text:[ fail(""wait for image available timed out after "" + timeout + ""ms"");            }        }    }}])', 1), ('([2:/android/cts/statsdatom/lib/ConfigUtils.java]:[ANY]:[2]:method_text:[ic(config, atomId);        uploadConfig(device, config);    }    private ConfigUtils() {    }}])', 1), ('([2:/com/android/cts/verifier/TestListAdapter.java]:[ANY]:[2]:method_text:[TestsFromMainView() {        return adapterFromManifest && !hasTestParentInManifestAdapter;    }}])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[ANY]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[ANY]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([1:/android/hardware/cts/helpers/ActivityResultMultiplexedLatch.java]:[ANY]:[1]:method_text:[ny time    private int getRequestCode() {        return Thread.currentThread().hashCode();    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[restriction]:[2]:method_text:[ns() throws Exception {        super.testPackageInstallUserRestrictions();    }    @Override   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureResultTest.java]:[ANY]:[3]:method_text:[y times, and checks if there is any null entries in     * a capture result.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[ANY]:[1]:method_text:[ers, and capture callbacks match for     * a single request, and increase monotonically     */   ])', 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[ANY]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/app/usage/cts/CacheQuotaHintTest.java]:[ANY]:[1]:method_text:[port org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class CacheQuotaHintTest {   ])', 1), ('([1:/GLtestView.java]:[ANY]:[1]:method_text:[blic void onSurfaceCreated(GL10 gl, EGLConfig config) {            // Do nothing.        }    }}])', 1), ('([2:/android/telephonyprovider/cts/SmsTestHelper.java]:[ANY]:[2]:method_text:[      assertThat(typeResult).isAnyOf(1, 2);        assertThat(typeResult).isEqualTo(type);    }}])', 1), ('([1:/android/os/cts/EnvironmentTest.java]:[ANY]:[1]:method_text:[maxsize + "" bytes; expected [""              + minInodes + "","" + maxInodes + ""]"");        }    }}])', 1), ('([3:/android/app/stubs/LaunchpadActivity.java]:[ANY]:[3]:method_text:[e(Context context, Intent intent) {            gotReceive(RECEIVER_REG, intent);        }    };}])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[ANY]:[1]:method_text:[lity.     * APP1 is in TOP state, it gets location capability.     * @throws Exception     */   ])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[ANY]:[1]:method_text:[ passed to APP2 by service binding, then APP2 can start     * APP3 FGS from background.     */   ])', 1), ('([6:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[6]:method_text:[lity.     * APP1 is in TOP state, it gets location capability.     * @throws Exception     */   ])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[1]:method_text:[tate, it can start FGSL in APP2, FGSL gets location capability.     * @throws Exception     */   ])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[1]:method_text:[t can start FGSL in APP2,     * FGSL gets location capability.     * @throws Exception     */   ])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[1]:method_text:[start by bind from BG does not get get while-in-use capability.     * @throws Exception     */   ])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[1]:method_text:[ROCESS_CAPABILITY_NONE));        } finally {            uid1Watcher.finish();        }    }   ])', 1), ('([3:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[3]:method_text:[eground() restriction, use DeviceConfig to turn on restriction.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[riction, use AppCompat CHANGE ID to turn on     * restriction.     * @throws Exception     */   ])', 1), ('([6:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[6]:method_text:[Test a FGS can start from a process that is at BOUND_TOP state.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[S can start from a process that is at FOREGROUND_SERVICE state.     * @throws Exception     */   ])', 1), ('([3:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[3]:method_text:[     * restriction is disabled, FGS can start from background.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[   * restriction is enabled, FGS can NOT start from background.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[* pass BG-Activity-launch ability to APP2, then APP2 can start APP2 FGS from background.     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[  /**     * Test a FGS can start from BG if the app has SYSTEM_ALERT_WINDOW permission.     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[    }    /**     * Test a FGS can start from BG if the device is in retail demo mode.     */   ])', 1), ('([3:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[3]:method_text:[t S, the    // framework throws a ForegroundServiceStartNotAllowedException with error message.   ])', 1), (""([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[1]:method_text:[   * Test a FGS can start from BG if the app is in the DeviceIdleController's AllowList.     */   ])"", 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[ME_APP1);        }    }    /**     * Test temp allowlist types in BroadcastOptions.     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[t a FGS can start from BG if the process had a visible activity recently.     */    @LargeTest   ])', 1), (""([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[ depends on the service's app proc state.     * Test starService() -> startForeground()     */   ])"", 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[ startForegroundService() -> startForeground() -> stopForeground() -> startForeground().     */   ])', 1), ('([4:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[4]:method_text:[LATFORM_VPN are exempted from BG-FGS-launch     * restriction.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[_NOT_ALLOWED} (1):     *      temp allowlisted, not allow FGS.     * @throws Exception     */   ])', 1), ('([2:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[2]:method_text:[     * All other reason codes, DeviceIdleController does not change temp allowlist type.     */   ])', 1), ('([3:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[3]:method_text:[default_input_method is exempted from BG-FGS-start restriction.     * @throws Exception     */   ])', 1), ('([12:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restriction]:[12]:method_text:[OR,                            Integer.toString(type), false);                }        );    }}])', 1), ('([1:/android/app/cts/ActivityManagerFgsBgStartTest.java]:[restricted]:[1]:method_text:[t S, the    // framework throws a ForegroundServiceStartNotAllowedException with error message.   ])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[ANY]:[2]:method_text:[            if (track != null) {                track.release();            }        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[e2 > 0);    }    // Test AudioTrack to see if there are any problems with large frame counts.   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[ble to create "" + MAX_TRACKS + "" tracks - that\'s too many!"",            n < MAX_TRACKS);    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[!= null) {                    track.release();                }            }        }    }   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[ANY]:[1]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[ANY]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[ANY]:[1]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[ANY]:[2]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[restricted]:[1]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([7:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[restricted]:[7]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[restricted]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[restricted]:[1]:method_text:[corerForRestrictedSuggestionConnection(                Set.of(NET_CAPABILITY_OEM_PRIVATE));    }}])', 1), ('([1:/android/util/cts/RationalTest.java]:[ANY]:[1]:method_text:[(nan));        assertFalse(nan.equals(posInf));        assertFalse(nan.equals(negInf));    }   ])', 1), ('([3:/android/util/cts/RationalTest.java]:[ANY]:[3]:method_text:[tional(5, 25), new Rational(-1, 10));        verifyLessThan(new Rational(-5, 25), ZERO);    }   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[ANY]:[1]:method_text:[tual: "" + ap);                return false;            }        }        return true;    }   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[ANY]:[1]:method_text:[ak;            }        }        assertTrue(""could not read alac mov"", totalSize > 0);    }   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[ANY]:[1]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([1:/android/graphics/cts/TypefaceTest.java]:[ANY]:[1]:method_text:[eateFromAsset(mContext.getAssets(), file);            assertNotNull(typeface);        }    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[restriction]:[2]:method_text:[lumeDevice();    }    // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume.   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[restriction]:[3]:method_text:[ePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initVolumeMuted);        }    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[restriction]:[4]:method_text:[}        mediaPlayer.stop();        mediaPlayer.release();        mediaPlayer = null;    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[restriction]:[3]:method_text:[null$"", line))) {                return true;            }        }        return false;    }}])', 1), ('([3:/android/media/cts/DecodeEditEncodeTest.java]:[ANY]:[3]:method_text:[                  throw new RuntimeException(ioe);                }            }        }    }}])', 1), ('([1:/android/transition/cts/FadeTest.java]:[ANY]:[1]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([4:/android/transition/cts/FadeTest.java]:[ANY]:[4]:method_text:[e4);        verify(mListener, never()).onTransitionEnd(any());        waitForEnd(1000);    }   ])', 1), ('([3:/android/transition/cts/FadeTest.java]:[ANY]:[3]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([6:/android/webkit/cts/CookieManagerTest.java]:[ANY]:[6]:method_text:[.tryAcquire(TEST_TIMEOUT, TimeUnit.MILLISECONDS));        assertFalse(anyDeleted.get());    }   ])', 1), ('([2:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[2]:method_text:[ield_bestMatchIsFirst() throws Exception {        manyUserData_oneDetectableField(true);    }   ])', 1), ('([3:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[3]:method_text:[2ndId"", ""1stId"" },                            new float[] { 0.66F, 0.5F }) });        }    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[1]:method_text:[         new FieldClassificationResult(fieldId2.get(), ""myId"", 0.6F),                });    }   ])', 1), ('([3:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[3]:method_text:[                       new String[] { ""otherId"", ""myId""}, new float[] { 0.80F, 0.2F })});    }   ])', 1), ('([3:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[3]:method_text:[t(),                                new String[] { ""otherId"" }, new float[] { 0.2F })});    }   ])', 1), ('([4:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[4]:method_text:[                       new String[] { ""otherId"", ""myId""}, new float[] { 0.80F, 0.2F })});    }   ])', 1), (""([1:/android/autofillservice/cts/servicebehavior/FieldsClassificationTest.java]:[ANY]:[1]:method_text:[ull'     * v multiple fields     * v multiple value     * - combinations of above items     */}])"", 1), ('([5:/library/main/java/com/android/bedstead/remotedpc/RemoteDpc.java]:[ANY]:[5]:method_text:[er devicePolicyManager() {        return new RemoteDevicePolicyManager_Wrapper(mConnector);    }}])', 1), ('([1:/android/devicepolicy/cts/AppUriAuthenticationPolicyTest.java]:[ANY]:[1]:method_text:[.containsKey(URI2)).isTrue();        assertThat(urisToAlias.get(URI2)).isEqualTo(ALIAS);    }   ])', 1), ('([1:/com/android/cts/monkey/AbstractMonkeyTest.java]:[ANY]:[1]:method_text:[at() throws DeviceNotAvailableException {        mDevice.executeAdbCommand(""logcat"", ""-c"");    }}])', 1), (""([1:/android/fragment/cts/FragmentReorderingTest.java]:[ANY]:[1]:method_text:[ion doesn't interfere with back stack add/pop    // reodering/removing of redundant operations.   ])"", 1), ('([2:/android/hardware/camera2/cts/rs/Script.java]:[ANY]:[2]:method_text:[}    protected static RenderScript getRS() {        return RenderScriptSingleton.getRS();    }}])', 1), ('([1:/android/car/cts/PreCreateUsersHostTest.java]:[ANY]:[1]:method_text:[ystem to make sure PackageManager preserves the installed bit        restartSystemServer();    }}])', 1), ('([1:/android/jvmti/cts/JvmtiTrackingTest.java]:[ANY]:[1]:method_text:[        Double.class.getName();    }    private ArrayList<Object> l = new ArrayList<>(100);   ])', 1), ('([1:/java/android/signature/cts/api/TestResultObserver.java]:[ANY]:[1]:method_text:[          finalizeErrorString();            Assert.fail(mErrorString.toString());        }    }}])', 1), ('([1:/android/view/cts/GestureDetectorTest.java]:[ANY]:[1]:method_text:[ressSecondaryMotionEvent.setActionButton(MotionEvent.BUTTON_SECONDARY);    }    @UiThreadTest   ])', 1), ('([1:/android/view/cts/GestureDetectorTest.java]:[ANY]:[1]:method_text:[ent);        verify(mListener, times(1)).onContextClick(mButtonPressPrimaryMotionEvent);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[restricted]:[1]:method_text:[      assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();    }   ])', 1), ('([1:/android/app/usage/cts/NetworkUsageStatsTest.java]:[ANY]:[1]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([3:/android/app/usage/cts/NetworkUsageStatsTest.java]:[ANY]:[3]:method_text:[ception e) {                // expected outcome            }        }    }    @AppModeFull   ])', 1), ('([1:/android/telecom/cts/PhoneAccountSuggestionServiceTest.java]:[ANY]:[1]:method_text:[assertTrue(receivedAccounts.containsAll(getHandlesFromSuggestions(receivedSuggestions)));    }   ])', 1), ('([1:/android/graphics/cts/ColorTest.java]:[ANY]:[1]:method_text:[droid.R.color"",                colors.length + systemColors.length, numPublicApiColors);    }   ])', 1), ('([1:/android/view/cts/SystemGestureExclusionRectsTest.java]:[ANY]:[1]:method_text:[ernals correctly handle cycling between exclusion rects present     * and rects absent.     */   ])', 1), ('([2:/com/android/cts/verifier/sensors/sixdof/Renderer/RenderUtils/CameraStreamManager.java]:[ANY]:[2]:method_text:[  // Add RGB offset to current device rotation.        return toOrientate + deviceRotation;    }}])', 1), ('([2:/android/hardware/cts/helpers/sensorverification/MeanLargerThanVerification.java]:[ANY]:[2]:method_text:[[] thresholds) {      mExpectedValues = expectedValues;      mThresholds = thresholds;    }  }}])', 1), ('([1:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[1]:method_text:[ = mActivityRule.getActivity();        mReceiver = mock(OnReceiveContentListener.class);    }   ])', 1), ('([2:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[2]:method_text:[    assertThat(view.performReceiveContent(samplePayloadGif)).isEqualTo(samplePayloadGif);    }   ])', 1), ('([2:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[2]:method_text:[        assertThat(view.onReceiveContent(samplePayloadGif)).isEqualTo(samplePayloadGif);    }   ])', 1), ('([2:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[2]:method_text:[verify(mReceiver).onReceiveContent(same(view), contentEq(clip, SOURCE_DRAG_AND_DROP, 0));    }   ])', 1), ('([1:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[1]:method_text:[verify(mReceiver).onReceiveContent(same(view), contentEq(clip, SOURCE_DRAG_AND_DROP, 0));    }   ])', 1), ('([1:/android/view/cts/ViewReceiveContentTest.java]:[ANY]:[1]:method_text:[ && mFlags == actual.getFlags()                    && actual.getExtras() == null;        }    }}])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[Manager.FEATURE_DEVICE_ADMIN);        MockitoAnnotations.initMocks(this);    }    @Presubmit   ])', 1), ('([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[2]:method_text:[fy(mReceiver).onPasswordChanged(any(), actionEq(ACTION_PASSWORD_CHANGED));    }    @Presubmit   ])', 1), ('([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[2]:method_text:[rify(mReceiver).onPasswordFailed(any(), actionEq(ACTION_PASSWORD_FAILED));    }    @Presubmit   ])', 1), ('([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[2]:method_text:[Receiver).onPasswordSucceeded(any(), actionEq(ACTION_PASSWORD_SUCCEEDED));    }    @Presubmit   ])', 1), ('([2:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[2]:method_text:[(mReceiver).onPasswordExpiring(any(), actionEq(ACTION_PASSWORD_EXPIRING));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[        any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[       any(), actionEq(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[ined(                any(), actionEq(ACTION_BUGREPORT_SHARING_DECLINED));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[             eq(DeviceAdminReceiver.BUGREPORT_FAILURE_FAILED_COMPLETING));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[             any(), actionEq(ACTION_BUGREPORT_SHARE), eq(BUGREPORT_HASH));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[.onSecurityLogsAvailable(any(), actionEq(ACTION_SECURITY_LOGS_AVAILABLE));    }    @Presubmit   ])', 1), ('([1:/android/admin/cts/DeviceAdminReceiverTest.java]:[ANY]:[1]:method_text:[AILABLE),                eq(NETWORK_LOGS_TOKEN), eq(NETWORK_LOGS_COUNT));    }    @Presubmit   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[ANY]:[2]:method_text:[oid deactivateGracePeriod() {        UiDevice.getInstance(mInstrumentation).pressHome();    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[ANY]:[2]:method_text:[} finally {            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), (""([1:/android/app/cts/NotificationManagerTest.java]:[ANY]:[1]:method_text:[firm that the optional methods of TestNotificationListener still exist and     * don't fail. */   ])"", 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[ANY]:[1]:method_text:[     performNotificationProviderAction(""reset"");            Thread.sleep(500);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[ANY]:[1]:method_text:[.getImportance());        assertEquals(IMPORTANCE_HIGH, actual.getOriginalImportance());    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[restriction]:[1]:method_text:[s background restrictions by retrieving their own     * notification and triggering it.     */   ])', 1), ('([1:/android/server/wm/app/CrashingActivity.java]:[ANY]:[1]:method_text:[e(savedInstanceState);        throw new RuntimeException(""Crashing for testing purposes!"");    }}])', 1), ('([1:/android/host/accounts/BaseMultiUserTest.java]:[ANY]:[1]:method_text:[ %s"", output);            fail(""\'am wait-for-broadcase-idle\' did not complete."");        }    }}])', 1), ('([2:/android/host/accounts/BaseMultiUserTest.java]:[restricted]:[2]:method_text:[ %s"", output);            fail(""\'am wait-for-broadcase-idle\' did not complete."");        }    }}])', 1), ('([1:/android/location/cts/gnss/pseudorange/PseudorangePositionVelocityFromRealTimeEvents.java]:[ANY]:[1]:method_text:[lic double[] getPositionVelocityUncertaintyEnu() {    return mPositionVelocityUncertaintyEnu;  }}])', 1), ('([3:/android/location/cts/gnss/asn1/base/BitStreamReader.java]:[ANY]:[3]:method_text:[Many; i++) {      result <<= 1;      result |= (readBit() ? 1 : 0);    }    return result;  }}])', 1), ('([1:/com/android/security/cts/launchanywhere/Authenticator.java]:[ANY]:[1]:method_text:[uthenticatorResponse response, Account account, String[] features)    {        return null;    }])', 1), ('([3:/android/view/cts/input/InputDeviceVibratorTest.java]:[ANY]:[3]:method_text:[r state listener        verify(mListener, never()).onVibratorStateChanged(anyBoolean());    }   ])', 1), ('([2:/android/widget/cts/SearchView_CursorTest.java]:[ANY]:[2]:method_text:[    mSearchView.setSuggestionsAdapter(mSuggestionsAdapter);        });    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SearchView_CursorTest.java]:[ANY]:[1]:method_text:[ry(""Di"", false);        verify(mockQueryTextListener, times(1)).onQueryTextChange(""Di"");    }   ])', 1), ('([3:/android/widget/cts/SearchView_CursorTest.java]:[ANY]:[3]:method_text:[times(1)).onSuggestionClick(0);        verifyNoMoreInteractions(mockSuggestionListener);    }   ])', 1), ('([2:/android/widget/cts/SearchView_CursorTest.java]:[ANY]:[2]:method_text:[, times(2)).onSuggestionClick(0);        verifyNoMoreInteractions(mockSuggestionListener);    }}])', 1), ('([2:/main/library/java/com/android/bedstead/testapp/TestAppProvider.java]:[ANY]:[2]:method_text:[    }    void markTestAppUsed(TestAppDetails testApp) {        mTestApps.remove(testApp);    }}])', 1), ('([3:/android/server/wm/AlertWindowsAppOpsTests.java]:[ANY]:[3]:method_text:[ontext().getPackageName(),                OPSTR_SYSTEM_ALERT_WINDOW, sPreviousSawAppOp);    }   ])', 1), ('([7:/android/server/wm/AlertWindowsAppOpsTests.java]:[ANY]:[7]:method_text:[d        assertTrue(appOpsManager.isOpActive(OPSTR_SYSTEM_ALERT_WINDOW, uid, packageName));    }}])', 1), ('([1:/com/android/cts/verifier/audio/AudioLoopbackBaseActivity.java]:[ANY]:[1]:method_text:[nectLoopbackUI();        calculateLatencyThresholds();        displayLatencyThresholds();    }}])', 1), ('([1:/android/telecom/cts/OutgoingCallTest.java]:[ANY]:[1]:method_text:[->                        Objects.equals(numberObj.getNumber(), TEST_EMERGENCY_NUMBER));    }   ])', 1), ('([1:/android/telephony/cts/MmsReceiver.java]:[ANY]:[1]:method_text:[roadcastReceiver {    @Override    public void onReceive(Context context, Intent intent) {    }}])', 1), ('([10:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[restriction]:[10]:method_text:[e that {@link UserManager} understands that it is applied but not as a base restriction.     */   ])', 1), ('([15:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[restriction]:[15]:method_text:[    hasBaseUserRestriction(r, userHandle));                return;            }        }    }}])', 1), ('([1:/android/app/cts/ApplicationTest.java]:[ANY]:[1]:method_text:[ return true;            }            Thread.sleep(1000);        }        return false;    }}])', 1), ('([1:/android/hardware/cts/helpers/sensorverification/FifoLengthVerification.java]:[ANY]:[1]:method_text:[mpMs);            mPrevRecvdTimeStampMs = currRecvdTimeStampMs;        }        mIndex++;    }}])', 1), ('([6:/android/server/biometrics/BiometricTestBase.java]:[ANY]:[6]:method_text:[States.sensorStates                .get(sensorId).getUserStates().get(userId).numEnrolled);    }}])', 1), ('([2:/android/view/accessibility/cts/CaptioningManagerTest.java]:[ANY]:[2]:method_text:[    }    /**     * Tests whether a client can observe changes in caption properties.     */   ])', 1), ('([3:/android/view/accessibility/cts/CaptioningManagerTest.java]:[ANY]:[3]:method_text:[    throw new AssertionError(""Fails silently when removing listener twice"", e);        }    }   ])', 1), ('([1:/android/content/cts/ContentProviderTest.java]:[ANY]:[1]:method_text:[      sContext.deleteDatabase(TEST_DB_NAME);        sContext.deleteFile(TEST_FILE_NAME);    }   ])', 1), ('([2:/com/android/compatibility/common/util/SystemUtil.java]:[ANY]:[2]:method_text:[             } else {                    throw e;                }            }        }    }}])', 1), ('([1:/android/translation/cts/CtsTranslationService.java]:[ANY]:[1]:method_text:[)                        + "" in "" + TRANSLATION_TIMEOUT_MS + ""ms"");            }        }    }}])', 1), ('([1:/android/cts/statsdatom/statsd/DeviceAtomTestCase.java]:[ANY]:[1]:method_text:[tings put global netstats_combine_subtype_enabled ""                + (enable ? ""1"" : ""0""));    }}])', 1), ('([1:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[ANY]:[1]:method_text:[@RunWith(AndroidJUnit4.class)public class MetaKeyKeyListenerTest extends KeyListenerTestCase {   ])', 1), ('([4:/android/text/method/cts/MetaKeyKeyListenerTest.java]:[ANY]:[4]:method_text:[hould throw NullPointerException."");        } catch (NullPointerException e) {        }    }   ])', 1), ('([2:/android/dynamicmime/cts/PreferredActivitiesTestCases.java]:[ANY]:[2]:method_text:[cuteShellCommand(""input keyevent KEYCODE_WAKEUP"");        getDevice().disableKeyguard();    }   ])', 1), ('([1:/android/app/cts/PendingIntentTest.java]:[ANY]:[1]:method_text:[FinishResult);        assertNull(MockReceiver.sAction);        mPendingIntent.cancel();    }   ])', 1), ('([2:/android/hardware/cts/helpers/sensoroperations/SensorOperation.java]:[ANY]:[2]:method_text:[           return mParent.getName() + ""-"" + mOperation.getClass().getSimpleName();        }    }}])', 1), ('([1:/android/hardware/cts/helpers/sensoroperations/SensorOperation.java]:[restriction]:[1]:method_text:[           return mParent.getName() + ""-"" + mOperation.getClass().getSimpleName();        }    }}])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[ = testApp.instance(sUser);        assertThat(testAppInstance.user()).isEqualTo(sUser);    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[stApp.instance(sUser);        assertThat(testAppInstance.testApp()).isEqualTo(testApp);    }   ])', 1), ('([3:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[3]:method_text:[ser)) {            assertThat(testAppInstance.activities().any()).isNotNull();        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[e(sUser);        assertThrows(IllegalStateException.class, testAppInstance::keepAlive);    }   ])', 1), (""([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[fter stopKeepAlive it does not restart, as we'd have to wait an    // unbounded amount of time   ])"", 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[p.install(sUser)) {            assertThat(testAppInstance.process()).isNull();        }    }   ])', 1), ('([2:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[2]:method_text:[.any().start();            assertThat(testAppInstance.process()).isNotNull();        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[on().isEqualTo(INTENT_ACTION);            assertThat(logs.poll()).isNotNull();        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[hat(logs.poll()).isNotNull();            assertThat(logs2.poll()).isNotNull();        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[ertThat(logs.get()).isNull();            assertThat(logs2.poll()).isNotNull();        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/testapp/TestAppInstanceReferenceTest.java]:[ANY]:[1]:method_text:[ction().isEqualTo(INTENT_ACTION);            assertThat(logs.poll()).isNotNull();        }    }}])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[restricted]:[1]:method_text:[(BIND_SERVICE_TIMEOUT, TimeUnit.MILLISECONDS));    }    @AsbSecurityTest(cveBugId = 30202228)   ])', 1), ('([1:/android/security/cts/IsolatedProcessTest.java]:[restricted]:[1]:method_text:[ould not be accessible from an isolated process"",                    service);        }    }   ])', 1), ('([1:/android/cts/backup/fullbackupapp/FullbackupTest.java]:[ANY]:[1]:method_text:[r, ""file_to_backup"");        mDoBackupFile2 = new File(normalFolder, ""file_to_backup2"");    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[ANY]:[1]:method_text:[l:\\n%s"", patternString, useragent),                    patternMatcher.find());        }    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[ANY]:[1]:method_text:[ccur.        Thread.sleep(1000);        assertEquals(""Loaded"", mOnUiThread.getTitle());    }   ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[ANY]:[1]:method_text:[res creating a    // webChromeClient and listening to Quota callbacks, which is not documented.   ])', 1), ('([1:/android/appwidget/cts/WidgetTransitionTest.java]:[ANY]:[1]:method_text:[ivity, mAppWidgetId, providerInfo);        mActivity.setContentView(mAppWidgetHostView);    }   ])', 1), ('([1:/android/appwidget/cts/WidgetTransitionTest.java]:[ANY]:[1]:method_text:[nds.removeAt(i);                    action.run();                }            }        }    }}])', 1), ('([1:/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java]:[ANY]:[1]:method_text:[_solicited_publish,                R.string.aware_data_path_pmk_solicited_publish_info, 0);    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[ANY]:[1]:method_text:[ createInputSurface() with a non-Surface color format is not required to throw exception     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[ANY]:[1]:method_text:[ twice throws exception     * <br> submitting a frame after EOS throws exception [TODO]     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[ANY]:[2]:method_text:[ (inputSurface != null) {                inputSurface.release();            }        }    }   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[ANY]:[1]:method_text:[ As of Q, any codec of type ""audio/raw"" must support PCM encoding float.     */    @MediumTest   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[ANY]:[1]:method_text:[ {                codec.stop();                codec.release();            }        }    }   ])', 1), ('([1:/com/android/cts/verifier/sensors/sixdof/Fragments/RobustnessFragment.java]:[ANY]:[1]:method_text:[stnessRenderer) mRenderer).updateTargetAngle(data.getTargetAngle());            }        }    }}])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[ANY]:[1]:method_text:[Navigation messages received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([6:/android/content/pm/cts/ResourcesHardeningTest.java]:[restriction]:[6]:method_text:[ {        return (ActivityManager) getContext().getSystemService(Context.ACTIVITY_SERVICE);    }}])', 1), ('([7:/android/content/pm/cts/ResourcesHardeningTest.java]:[restricted]:[7]:method_text:[os.isEmpty());                mRestrictedRanges.put(apk, infos);            }        }    }   ])', 1), ('([9:/android/content/pm/cts/ResourcesHardeningTest.java]:[restricted]:[9]:method_text:[ {        return (ActivityManager) getContext().getSystemService(Context.ACTIVITY_SERVICE);    }}])', 1), ('([1:/android/uirendering/cts/testinfrastructure/DisplayModifier.java]:[ANY]:[1]:method_text:[wing(Paint paint, Canvas canvas) {            paint.setColorFilter(mColorFilter);        }    }}])', 1), ('([1:/android/signature/cts/tests/data/FinalClass.java]:[ANY]:[1]:method_text:[al class FinalClass {    public final void finalMethod() { }    public void nonFinalMethod() { }}])', 1), ('([1:/android/widget/cts/ChronometerTest.java]:[ANY]:[1]:method_text:[     SystemClock.sleep(1500);        assertTrue(expected.equals(chronometer.getText()));    }   ])', 1), ('([1:/android/opengl2/cts/reference/GLReferenceBenchmark.java]:[ANY]:[1]:method_text:[   super(GLReferenceActivity.class);    }    /**     * Runs the reference benchmark.     */   ])', 1), ('([1:/android/hardware/devicestate/cts/DeviceStateManagerTestBase.java]:[ANY]:[1]:method_text:[@Nullable        public Throwable getThrowable() {            return mThrowable;        }    }}])', 1), ('([1:/android/app/usage/cts/test2/FinishingTaskRootActivity.java]:[ANY]:[1]:method_text:[    }    @Override    protected void onStop() {        super.onStop();        finish();    }}])', 1), ('([1:/android/content/cts/AsyncQueryHandlerTest.java]:[ANY]:[1]:method_text:[lete(DummyProvider.CONTENT_URI, null, null);        super.tearDown();    }    @UiThreadTest   ])', 1), ('([1:/android/keystore/cts/KeyGeneratorTest.java]:[ANY]:[1]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[ANY]:[2]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/KeyGeneratorTest.java]:[ANY]:[3]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([12:/android/view/cts/GestureDetectorCtsActivity.java]:[ANY]:[12]:method_text:[           mGestureDetector.onGenericMotionEvent(event);            return true;        }    }}])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[1]:method_text:[**     * Tests that the device properly connects to available CarrierMessagingServices.     */   ])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[1]:method_text:[e the all CarrierMessagingServices can send text sms and     * triggers valid callback.     */   ])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[1]:method_text:[ all CarrierMessagingServices can send multipart sms and     * triggers valid callback.     */   ])', 1), ('([1:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[1]:method_text:[device the all CarrierMessagingServices can send mms and     * triggers valid callback.     */   ])', 1), ('([2:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[ANY]:[2]:method_text:[                    + CarrierMessagingServiceWrapperTest.TIMEOUT_IN_MS + "" ms."");        }    }}])', 1), ('([4:/com/android/compatibility/common/util/Timeout.java]:[ANY]:[4]:method_text:["";    }    @VisibleForTesting    interface Sleeper {        void sleep(long napTimeMs);    }}])', 1), ('([24:/android/print/test/BasePrintTest.java]:[ANY]:[24]:method_text:[                  break;                }            }            return base;        }    }}])', 1), ('([1:/android/graphics/drawable/cts/ShapeDrawableTest.java]:[ANY]:[1]:method_text:[ java.io.IOException;@SmallTest@RunWith(AndroidJUnit4.class)public class ShapeDrawableTest {   ])', 1), ('([4:/android/graphics/drawable/cts/ShapeDrawableTest.java]:[ANY]:[4]:method_text:[hape, new Canvas(), new Paint());        verify(mockShape, times(1)).draw(any(), any());    }   ])', 1), ('([1:/android/widget/cts/TabWidgetTest.java]:[ANY]:[1]:method_text:[anything that extends AdapterView        mockTabWidget.addView(new ListView(mActivity));    }   ])', 1), ('([1:/android/widget/cts/TabWidgetTest.java]:[ANY]:[1]:method_text:[ anything that extends AdapterView        mockTabWidget.addView(null);    }    @UiThreadTest   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[ANY]:[1]:method_text:[IES, mMock);        mLocationProvider.asProvider().setLocationProviderManager(mManager);    }   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[ANY]:[1]:method_text:[.onFlush(any(OnFlushCompleteCallback.class));        verify(mManager).onFlushComplete();    }   ])', 1), ('([1:/android/location/cts/fine/LocationProviderBaseTest.java]:[ANY]:[1]:method_text:[ @Nullable Bundle extras) {            mMock.onSendExtraCommand(command, extras);        }    }}])', 1), ('([1:/android/uirendering/cts/testinfrastructure/ActivityTestBase.java]:[ANY]:[1]:method_text:[ePicture ? "" with picture"" : "" without picture"") + ""\\n"";            return debug;        }    }}])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[ANY]:[1]:method_text:[ot produce any dumpstate-related     * SELinux denials.     *     * @throws Exception     */   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[restricted]:[1]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[restricted]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[restricted]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([30:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[ANY]:[30]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([1:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[ANY]:[1]:method_text:[xception for adding too many strokes."");        } catch (RuntimeException e) {        }    }   ])', 1), ('([1:/com/android/cts/apicoverage/CtsApiCoverage.java]:[ANY]:[1]:method_text:[                 break;            }        } finally {            out.close();        }    }}])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementValuesTest.java]:[ANY]:[1]:method_text:[or the measurements received.     * This tests uses actual data retrieved from GPS HAL.     */   ])', 1), ('([5:/android/transition/cts/BaseTransitionTest.java]:[ANY]:[5]:method_text:[    return ObjectAnimator.ofFloat(BaseTransitionTest.this, ""animatedValue"", 1, 0);        }    }}])', 1), ('([1:/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPostBackupTest.java]:[ANY]:[1]:method_text:[ifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllPinned();    }   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[ethodManager#getInputMethodList()} does not contain     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[MethodManager#getEnabledInputMethodList()} contains     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[nager#getEnabledInputMethodList()} does not contain     * {@link Ime1Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[k InputMethodManager#getInputMethodList()} contains     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[ethodManager#getInputMethodList()} does not contain     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[MethodManager#getEnabledInputMethodList()} contains     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[nager#getEnabledInputMethodList()} does not contain     * {@link Ime2Constants#IME_ID}.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[oolean)} for     * {@link Ime1Constants#IME_ID} returns the implicitly enabled subtype.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[ for     * {@link Ime1Constants#IME_ID} does not return the implicitly enabled subtype.     */   ])', 1), ('([1:/android/inputmethodservice/cts/devicetest/InputMethodManagerDeviceTest.java]:[ANY]:[1]:method_text:[stream())                .anyMatch(InputMethodSubtype::overridesImplicitlyEnabledSubtype));    }}])', 1), ('([1:/android/telephony/cts/HeadlessSmsSendService.java]:[ANY]:[1]:method_text:[er(name);    }    @Override    protected void onHandleIntent(@Nullable Intent intent) {    }}])', 1), ('([1:/android/leanbackjank/app/ui/MainFragment.java]:[ANY]:[1]:method_text:[ay, interval);    }    public void selectRow(int row) {        setSelectedPosition(row);    }}])', 1), ('([2:/android/view/cts/KeyEventTest.java]:[ANY]:[2]:method_text:[ mDownTime = SystemClock.uptimeMillis();        mEventTime = SystemClock.uptimeMillis();    }   ])', 1), ('([14:/android/view/cts/KeyEventTest.java]:[ANY]:[14]:method_text:[s(1)).onKeyUp(KeyEvent.KEYCODE_0, mKeyEvent);        verifyNoMoreInteractions(callback);    }   ])', 1), ('([1:/android/view/cts/KeyEventTest.java]:[ANY]:[1]:method_text:[g() {        // make sure it does not throw any exception.        mKeyEvent.toString();    }   ])', 1), ('([1:/android/view/cts/KeyEventTest.java]:[ANY]:[1]:method_text:[        // make sure it never shrow any exception.        mKeyEvent.describeContents();    }   ])', 1), ('([2:/android/media/cts/MediaActivityTest.java]:[ANY]:[2]:method_text:[yEvent.KEYCODE_VOLUME_UP);            return checkAnyStreamVolumeChanged();        }));    }   ])', 1), ('([2:/android/media/cts/MediaActivityTest.java]:[ANY]:[2]:method_text:[unexpected InterruptedException"");            }        }        return pollingCount >= 0;    }}])', 1), ('([1:/android/location/cts/gnss/asn1/base/Asn1GeneralString.java]:[ANY]:[1]:method_text:[erride public void decodePerAligned(BitStreamReader reader) {    decodePerImpl(reader, true);  }}])', 1), (""([1:/com/android/cts/usespermissiondiffcertapp/AccessPermissionWithDiffSigTest.java]:[restriction]:[1]:method_text:[riction aren't     * allowed, even though the {@code provider} requires no permissions.     */   ])"", 1), ('([1:/android/display/cts/VirtualDisplayTest.java]:[ANY]:[1]:method_text:[           }            Log.d(TAG, ""- Reporting other."");            return -1;        }    }}])', 1), ('([1:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[1]:method_text:[tPath());    }    @AppModeInstant(reason = ""Instant apps cannot provide or host app widgets"")   ])', 1), ('([12:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[12]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 1), ('([10:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[10]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 1), ('([2:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[2]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 1), ('([4:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[4]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 1), ('([14:/android/appwidget/cts/AppWidgetTest.java]:[ANY]:[14]:method_text:[          mOnUpdateAppWidgetListener.onUpdateAppWidget(remoteViews);            }        }    }}])', 1), ('([1:/android/server/wm/MultiDisplaySecurityTests.java]:[restricted]:[1]:method_text:[ an activity on a virtual display without special permission must not be     * allowed.     */   ])', 1), (""([1:/android/server/wm/MultiDisplaySecurityTests.java]:[restricted]:[1]:method_text:[r activity that     * doesn't allow embedding - it should fail with security exception.     */   ])"", 1), ('([1:/com/android/cts/verifier/admin/ScreenLockTestActivity.java]:[restricted]:[1]:method_text:[                      .show();                }            }, LOCK_CHECK_DELAY);        }    }}])', 1), ('([1:/android/view/cts/ScrollCaptureScrollViewCtsActivity.java]:[ANY]:[1]:method_text:[rce(android.R.color.white);    }    public Dialog getDialog() {        return mDialog;    }}])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[ANY]:[1]:method_text:[ent(KeyEvent.ACTION_UP, keyCode, 0 /* repeatCount */);        assertLongPressNotReceived();    }}])', 1), ('([2:/android/view/cts/ViewUnbufferedTest.java]:[ANY]:[2]:method_text:[eCallback(mFrameCallback);    }    // Normal view would expect to receive the buffered event.   ])', 1), ('([1:/android/hdmicec/cts/WakeLockHelper.java]:[ANY]:[1]:method_text:[ RELEASE_LOCK);        // Clear activity        device.executeShellCommand(CLEAR_COMMAND);    }}])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[Modes with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[xMode with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[ution with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[olution with legal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[aSize with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[diaSize with legal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[tInfo with illegal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/ClassParametersTest.java]:[ANY]:[1]:method_text:[entInfo with legal parameters.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([15:/com/android/cts/apprestrictions/targetapp/ApplicationRestrictionsActivity.java]:[restriction]:[15]:method_text:[G_RECEIVER_FOREGROUND)                .putExtra(""value"", restrictions));        finish();    }}])', 1), (""([1:/android/provider/cts/calendar/CalendarTest.java]:[ANY]:[1]:method_text:[any data in     * the calendar, since it's testing the database schema.     */    @MediumTest   ])"", 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ANY]:[1]:method_text:[Id);    }    /**     * Tests creation and manipulation of Reminders.     */    @MediumTest   ])', 1), ('([3:/android/provider/cts/calendar/CalendarTest.java]:[ANY]:[3]:method_text:[ Tests exceptions that modify all future instances of a recurring event.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[ANY]:[1]:method_text:[ } finally {            if (c != null) {                c.close();            }        }    }}])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[restriction]:[1]:method_text:[n the Calendar table, specifying one restricted     * column at a time.     */    @MediumTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[restricted]:[1]:method_text:[n the Calendar table, specifying one restricted     * column at a time.     */    @MediumTest   ])', 1), ('([1:/com/android/cts/core/runner/support/TestNgRunnerBuilder.java]:[ANY]:[1]:method_text:[ or has any methods with ])', 1), ('([1:/android/permission/cts/NoReadLogsPermissionTest.java]:[ANY]:[1]:method_text:[t see     * any of those log entries.     *     * @throws IOException     */    @MediumTest   ])', 1), ('([1:/android/appintegrity/cts/CtsAppIntegrityDeviceTest.java]:[ANY]:[1]:method_text:[l(formula);    }    /**     * Test app integrity rule creation for any (OR) formula.     */   ])', 1), ('([2:/android/appintegrity/cts/CtsAppIntegrityDeviceTest.java]:[ANY]:[2]:method_text:[otNull(formula);    }    /**     * Test app integrity rule creation for NOT formula.     */   ])', 1), ('([1:/com/android/cts/verifier/notifications/BubblesVerifierActivity.java]:[ANY]:[1]:method_text:[                           SystemClock.currentThreadTimeMillis(), person)                );    }}])', 1), ('([1:/com/android/server/cts/device/statsdatom/StatsdSyncAdapter.java]:[ANY]:[1]:method_text:[              sLatch = new CountDownLatch(1);            }        }        return sLatch;    }}])', 1), ('([1:/android/content/pm/cts/ApplicationInfoTest.java]:[ANY]:[1]:method_text:[tionInfo.uiOptions);        assertEquals(CATEGORY_UNDEFINED, mApplicationInfo.category);    }   ])', 1), ('([1:/android/content/pm/cts/ApplicationInfoTest.java]:[ANY]:[1]:method_text:[  assertTrue(packageName + "" is not product package."", info.applicationInfo.isProduct());    }   ])', 1), ('([1:/android/content/pm/cts/ApplicationInfoTest.java]:[ANY]:[1]:method_text:[    assertTrue(packageName + "" is not vendor package."", info.applicationInfo.isVendor());    }   ])', 1), ('([1:/android/security/cts/CVE_2021_0523/PocService.java]:[ANY]:[1]:method_text:[overlay the WifiScanModeActivity screen"");            }            return false;        }    }}])', 1), ('([6:/com/android/cts/devicepolicy/BaseDevicePolicyTest.java]:[ANY]:[6]:method_text:[hrows InterruptedException {        CLog.d(""Sleeping %d ms"");        Thread.sleep(timeMs);    }}])', 1), ('([38:/com/android/cts/devicepolicy/BaseDevicePolicyTest.java]:[restriction]:[38]:method_text:[hrows InterruptedException {        CLog.d(""Sleeping %d ms"");        Thread.sleep(timeMs);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java]:[ANY]:[2]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1), ('([1:/android/keystore/cts/NoAttestKeyTest.java]:[ANY]:[1]:method_text:[// Ignore any exception and delete the other aliases in the list.            }        }    }   ])', 1), ('([1:/android/os/cts/BundleTest.java]:[ANY]:[1]:method_text:[ into the Bundle,    // else containsKey would return true if any putXXX has been called before   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[;        FileUtils.closeQuietly(mScreenshotFd);        killCurrentBugreportIfRunning();    }   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[ssertThat(bugreportFile2.length()).isEqualTo(0L);        assertFdIsClosed(bugreportFd2);    }   ])', 1), ('([1:/android/util/cts/ArraySetTest.java]:[ANY]:[1]:method_text:[    assertTrue(""ArraySet.addAll(Container) failed"", arraySet.containsAll(testArrayList));    }   ])', 1), ('([4:/com/android/server/cts/SettingsIncidentTest.java]:[ANY]:[4]:method_text:[      throw new AssertionError(""Failed for setting "" + setting, e);            }        }    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java]:[ANY]:[2]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[ANY]:[1]:method_text:[ionFailureMessage.equals(e.getMessage())) {                throw e;            }        }    }}])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[restricted]:[1]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[restricted]:[1]:method_text:[ntry(keystoreAlias);            }        }    }    @RestrictedBuildTest    @RequiresDevice   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[restricted]:[1]:method_text:[    @RestrictedBuildTest    @RequiresDevice  // Emulators have no place to store the needed key   ])', 1), ('([1:/com/android/cts/suspensionchecker/ActivityLaunchTest.java]:[ANY]:[1]:method_text:[   }            Thread.sleep(1000);        }        fail(""Activity is still launchable"");    }}])', 1), ('([2:/android/widget/cts/ImageViewTest.java]:[ANY]:[2]:method_text:[          }        } catch (IOException e) {            fail(e.getMessage());        }    }   ])', 1), ('([1:/android/widget/cts/ImageViewTest.java]:[ANY]:[1]:method_text:[s());        verify(drawable, atLeastOnce()).draw(any(Canvas.class));    }    @UiThreadTest   ])', 1), ('([8:/android/widget/cts/ImageViewTest.java]:[ANY]:[8]:method_text:[   verify(mockImageView, times(1)).onSizeChanged(anyInt(), anyInt(), anyInt(), anyInt());    }   ])', 1), ('([3:/android/widget/cts/ImageViewTest.java]:[ANY]:[3]:method_text:[     verify(drawable, times(2)).setTintList(any(ColorStateList.class));    }    @UiThreadTest   ])', 1), ('([1:/android/mediav2/cts/AdaptivePlaybackTest.java]:[ANY]:[1]:method_text:[       waitForAllOutputs();            mCodec.reset();        }        tearDownSurface();    }}])', 1), ('([1:/android/graphics/cts/FrameRateCtsActivity.java]:[ANY]:[1]:method_text:[.e(TAG, passFailMessage);                    }                }            }        }    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[ANY]:[1]:method_text:[ontext, 0, new Intent(mContext, this.getClass()), PendingIntent.FLAG_MUTABLE_UNAUDITED);    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[ANY]:[1]:method_text:[me(),                    InstrumentationRegistry.getInstrumentation(), false);        }    }   ])', 1), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[ANY]:[1]:method_text:[intDocumentInfo are fine.     *     * @throws Exception If anything unexpected happens     */   ])', 1), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[restricted]:[1]:method_text:[intDocumentInfo are fine.     *     * @throws Exception If anything unexpected happens     */   ])', 1), ('([3:/android/hardware/camera2/cts/helpers/UncheckedCloseable.java]:[ANY]:[3]:method_text:[    *     * <p>Does not throw any checked exceptions.</p>     */    @Override    void close();}])', 1), ('([1:/com/android/cts/deviceandprofileowner/WifiTest.java]:[ANY]:[1]:method_text:[        mDevicePolicyManager.removeKeyPair(ADMIN, TEST_ALIAS);        super.tearDown();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/AbstractContentCaptureActivity.java]:[ANY]:[1]:method_text:[ntcapture"",  getComponentName().flattenToString());        Log.v(mTag, ""dump it: "" + dump);    }}])', 1), ('([1:/android/os/cts/VibratorTest.java]:[ANY]:[1]:method_text:[StateListener);    }    @After    public void cleanUp() {        mVibrator.cancel();    }   ])', 1), ('([1:/android/os/cts/VibratorTest.java]:[ANY]:[1]:method_text:[ any physical vibrator and use a default id.        assertEquals(-1, mVibrator.getId());    }   ])', 1), ('([2:/android/os/cts/VibratorTest.java]:[ANY]:[2]:method_text:[         .onVibratorStateChanged(eq(expected));            reset(mStateListener);        }    }}])', 1), ('([1:/android/widget/cts/PopupMenuTest.java]:[ANY]:[1]:method_text:[));        assertEquals(R.id.action_share_circles, shareSubMenu.getItem(1).getItemId());    }   ])', 1), ('([1:/android/graphics/drawable/cts/IconTest.java]:[ANY]:[1]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/graphics/drawable/cts/IconTest.java]:[ANY]:[1]:method_text:[Thread.sleep(TIMEOUT_MS);        verify(mockListener, times(1)).onDrawableLoaded(any());    }   ])', 1), ('([2:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[ANY]:[2]:method_text:[eg);        destroySipDelegateConnectionNoDelegate(ifaces.manager, ifaces.delegateConn);    }   ])', 1), ('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[ANY]:[1]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([2:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[restricted]:[2]:method_text:[ces.transport.getDelegates().size());        verifyUpdateRegistrationCalled(ifaces.reg);    }   ])', 1), ('([1:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[restricted]:[1]:method_text:[ces.transport.getDelegates().size());        verifyUpdateRegistrationCalled(ifaces.reg);    }   ])', 1), ('([2:/android/telephony/ims/cts/SipDelegateManagerTest.java]:[restricted]:[2]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([1:/android/server/wm/NestedShellPermission.java]:[ANY]:[1]:method_text:[            automan.dropShellPermissionIdentity();                }            }        }    }}])', 1), ('([1:/android/scopedstorage/cts/host/LegacyStorageHostTest.java]:[ANY]:[1]:method_text:[ion.WRITE_EXTERNAL_STORAGE"",                ""android.permission.READ_EXTERNAL_STORAGE"");    }   ])', 1), ('([1:/android/scopedstorage/cts/host/LegacyStorageHostTest.java]:[restriction]:[1]:method_text:[ion.WRITE_EXTERNAL_STORAGE"",                ""android.permission.READ_EXTERNAL_STORAGE"");    }   ])', 1), ('([19:/com/android/cts/delegate/AppRestrictionsDelegateTest.java]:[restriction]:[19]:method_text:[ows Exception {        mContext.unregisterReceiver(mReceiver);        super.tearDown();    }   ])', 1), ('([6:/com/android/cts/delegate/AppRestrictionsDelegateTest.java]:[restriction]:[6]:method_text:[  mDpm.getApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG);                });    }   ])', 1), ('([25:/com/android/cts/delegate/AppRestrictionsDelegateTest.java]:[restriction]:[25]:method_text:[ll, mContext.getPackageName());        return scopes.contains(DELEGATION_APP_RESTRICTIONS);    }}])', 1), ('([1:/android/keystore/cts/MacTest.java]:[ANY]:[1]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([1:/android/controls/cts/CtsControlsServiceTest.java]:[ANY]:[1]:method_text:[   @Before    public void setUp() {        mControlsService = new CtsControlsService();    }   ])', 1), ('([1:/android/controls/cts/CtsControlsServiceTest.java]:[ANY]:[1]:method_text:[on(), t2.getActionDescription());        assertRangeTemplate(t1.getRange(), t2.getRange());    }}])', 1), ('([10:/android/hardware/camera2/cts/helpers/CameraSessionUtils.java]:[ANY]:[10]:method_text:[onstructor for noninstantiability    private CameraSessionUtils() { throw new AssertionError(); }}])', 1), ('([1:/com/android/tests/stagedinstall/host/ApexShimValidationTest.java]:[ANY]:[1]:method_text:[alse);    }    @After    public void tearDown() throws Exception {        cleanUp();    }   ])', 1), ('([1:/com/android/tests/stagedinstall/host/ApexShimValidationTest.java]:[ANY]:[1]:method_text:[""Shim APEX is not pre-installed"").that(                isShimApexPreInstalled).isTrue();    }   ])', 1), ('([1:/android/fragment/cts/StrictFragment.java]:[ANY]:[1]:method_text:[       int fromState = mState;        mState = DETACHED;        onStateChanged(fromState);    }}])', 1), ('([1:/android/media/cts/RemoteService.java]:[ANY]:[1]:method_text:[ion {            assertTrue(ASSERTION_MESSAGE, mBinder.run(mTestId, step, args));        }    }}])', 1), ('([1:/android/os/cts/batterysaving/BatterySaverAlarmTest.java]:[ANY]:[1]:method_text:[get()),                ""Allow-while-idle alarms shouldn\'t be throttled when BS is off"");    }   ])', 1), ('([1:/com/android/cts/verifier/bluetooth/BleConnectionPriorityServerService.java]:[ANY]:[1]:method_text:[dvertiser != null) {            mAdvertiser.stopAdvertising(mAdvertiseCallback);        }    }}])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[restricted]:[1]:method_text:[d with readable annotation but access should be    // protected by additional permission check.   ])', 1), ('([1:/com/android/cts/readsettingsfieldsapp/ReadSettingsFieldsTest.java]:[restricted]:[1]:method_text:[eysReadable(Settings.Global.class, publicSettingsKeys,                hiddenSettingsKeys);    }}])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[ANY]:[1]:method_text:[ppears if the dev option is set even if the user specifically     * set to suppress it.     */   ])', 1), ('([1:/android/telephony/cts/CallComposerTest.java]:[ANY]:[1]:method_text:[.myUserId()                        + "" android.app.role.DIALER "" + mPreviousDefaultDialer);    }}])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[ intended to be granted to only those apps with direct user     * access and no others.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[3]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[ash.     * TODO(b/150891569): deprecate it in Android S, this API is not used anywhere.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[ANY]:[1]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[restriction]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[restriction]:[6]:method_text:[he needed privileged permissions     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[restriction]:[13]:method_text:[ork configurations are rejected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/location/cts/gnss/pseudorange/UserPositionVelocityWeightedLeastSquare.java]:[ANY]:[2]:method_text:[ngeMeters, sigmaMeters));      }    }    return usefulSatellitesToPseudorangeMeasurements;  }}])', 1), ('([1:/com.android.cts.content/FlakyTestRule.java]:[ANY]:[1]:method_text:[              }                }                throw throwable;            };        };    }}])', 1), ('([8:/android/jni/cts/LinkerNamespacesHelper.java]:[ANY]:[8]:method_text:[    }    public static native void incrementGlobal();    public static native int getGlobal();}])', 1), ('([1:/android/car/cts/CarBluetoothTest.java]:[ANY]:[1]:method_text:[ented), or for the    // configured timeout. If all required profiles connect, the test passes.   ])', 1), ('([1:/android/webkit/cts/WebViewClientTest.java]:[ANY]:[1]:method_text:[    // Test that the WebResourceResponse returned by shouldInterceptRequest is handled correctly   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/SupportMessageTest.java]:[ANY]:[1]:method_text:[d tearDown() throws Exception {        clearSupportMessages();        super.tearDown();    }   ])', 1), ('([1:/android/server/wm/ActivityMetricsLoggerTests.java]:[ANY]:[1]:method_text:[rampoline activity. See b/80380150 (Long warm launch times reported in dev play console)     */   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[oDeviceOwner_noProfileOwner_returnsNull() {        assertThat(RemoteDpc.any()).isNull();    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[moteDpc.any()).isNull();        } finally {            profileOwner.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[emoteDpc.any()).isNull();        } finally {            deviceOwner.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[        assertThrows(NullPointerException.class, () -> RemoteDpc.any((UserHandle) null));    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[fileOwner_returnsNull() {        assertThat(RemoteDpc.any(sUser.userHandle())).isNull();    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[file.userHandle())).isNull();        } finally {            profile.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[.userHandle())).isNull();        } finally {            deviceOwner.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[())).isEqualTo(profileOwner);        } finally {            profile.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[     assertThrows(NullPointerException.class, () -> RemoteDpc.any((UserReference) null));    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[ceOwner_noProfileOwner_returnsNull() {        assertThat(RemoteDpc.any(sUser)).isNull();    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[teDpc.any(profile)).isNull();        } finally {            profile.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[Dpc.any(sUser)).isNull();        } finally {            deviceOwner.remove();        }    }   ])', 1), ('([2:/library/test/java/com/android/bedstead/remotedpc/RemoteDpcTest.java]:[ANY]:[2]:method_text:[le)).isEqualTo(profileOwner);        } finally {            profile.remove();        }    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[ANY]:[1]:method_text:[reseting, the video should continue playing     * from the time setDisplay() was called     */   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[ANY]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/telephony/cts/embmstestapp/CtsDownloadService.java]:[ANY]:[1]:method_text:[ack == null) {            throw new IllegalStateException(""Not yet initialized"");        }    }}])', 1), ('([7:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[ANY]:[7]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[ANY]:[1]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([1:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[ANY]:[1]:method_text:[        assertTrue(mWifiAwareManager.isDeviceAttached());        }        return session;    }}])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[ANY]:[1]:method_text:[till not shown        startAndWaitExternalActivity();        mUiBot.assertNoDatasets();    }   ])', 1), ('([15:/com/android/compatibility/common/util/BaseDefaultPermissionGrantPolicyTest.java]:[ANY]:[15]:method_text:[f brand vs. SHA256 hash            }            this.permissions = permissions;        }    }}])', 1), ('([5:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[restriction]:[5]:method_text:[rRestriction(getWho(), UserManager.DISALLOW_MICROPHONE_TOGGLE);        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[restriction]:[3]:method_text:[                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));    }   ])', 1), ('([3:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[restriction]:[3]:method_text:[                m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));    }   ])', 1), ('([3:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[restriction]:[3]:method_text:[            }        }        fail(""Camera sensor privacy did not get reset in time"");    }   ])', 1), ('([3:/com/android/cts/deviceowner/SensorToggleRestrictionTest.java]:[restriction]:[3]:method_text:[            }        }        fail(""Microphone sensor privacy did not get reset in time"");    }}])', 1), ('([1:/android/media/cts/OutputSurface.java]:[ANY]:[1]:method_text:[ throw new RuntimeException(msg + "": EGL error: 0x"" + Integer.toHexString(error));        }    }}])', 1), ('([5:/com/android/security/cts/launchanywhere/StartExploit.java]:[ANY]:[5]:method_text:[re""};        attacker.putExtra(""account_types"", authTypes);        startActivity(attacker);    }])', 1), ('([1:/android/alarmmanager/cts/AppStandbyTests.java]:[ANY]:[1]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());    }   ])', 1), ('([1:/android/alarmmanager/cts/AppStandbyTests.java]:[restriction]:[1]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());    }   ])', 1), ('([2:/android/compat/sjp/cts/StrictJavaPackagesTest.java]:[ANY]:[2]:method_text:[**     * Ensure that there are no duplicate classes among jars listed in BOOTCLASSPATH.     */   ])', 1), ('([1:/android/server/wm/WindowInsetsControllerTests.java]:[ANY]:[1]:method_text:[tusBars()));            assertFalse(windowInsets.isVisible(navigationBars()));        }    }   ])', 1), ('([1:/android/widget/cts/FrameLayoutTest.java]:[ANY]:[1]:method_text:[ctivity();        mFrameLayout = (FrameLayout) mActivity.findViewById(R.id.framelayout);    }   ])', 1), ('([1:/android/widget/cts/FrameLayoutTest.java]:[ANY]:[1]:method_text:[rams(ViewGroup.LayoutParams p) {            return super.generateLayoutParams(p);        }    }}])', 1), ('([12:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[restriction]:[12]:method_text:[put.contains(""SecurityException""));    }    // Test the bluetooth API from a managed profile.   ])', 1), ('([2:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[restriction]:[2]:method_text:[r(MANAGED_PROFILE_PKG, "".NfcTest"",                ""testNfcShareEnabled"", mParentUserId);    }   ])', 1), ('([4:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[restriction]:[4]:method_text:[ngRestrictionTest"",                ""testOppDisabledWhenRestrictionSet"", mProfileUserId);    }   ])', 1), ('([4:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[restriction]:[4]:method_text:[leException {        return changeUserRestriction(key, value, userId, MANAGED_PROFILE_PKG);    }}])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[ANY]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[restricted]:[2]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/cts/statsdatom/statsd/UidAtomTests.java]:[ANY]:[1]:method_text:[ngProgress()) < 0.001);        assertEquals(-1, atom.getMillisSinceOldestPendingRead());    }   ])', 1), ('([1:/android/cts/statsdatom/statsd/UidAtomTests.java]:[ANY]:[1]:method_text:[gProgress()) < 0.001);        assertEquals(-1, atom.getMillisSinceOldestPendingRead());    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java]:[restriction]:[3]:method_text:[estriction(ADMIN_RECEIVER_COMPONENT,                UserManager.DISALLOW_CONFIG_LOCATION);    }}])', 1), ('([4:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[4]:method_text:[ontext = InstrumentationRegistry.getTargetContext();    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([3:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[3]:method_text:[verify(callback, never()).invalidateDrawable(any());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([9:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[9]:method_text:[ never()).scheduleDrawable(any(), any(), anyLong());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([6:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[6]:method_text:[Drawable(null, null);        verify(callback, never()).unscheduleDrawable(any(), any());    }   ])', 1), ('([4:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[4]:method_text:[));        scaleDrawable.draw(null);        verify(mockDrawable, times(1)).draw(any());    }   ])', 1), ('([1:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[1]:method_text:[rawable.getPadding(new Rect());        verify(mockDrawable, times(1)).getPadding(any());    }   ])', 1), ('([6:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[6]:method_text:[isible());        verify(mockDrawable, times(1)).setVisible(anyBoolean(), anyBoolean());    }   ])', 1), ('([3:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[3]:method_text:[   scaleDrawable.setAlpha(-1);        verify(mockDrawable, times(1)).setAlpha(anyInt());    }   ])', 1), ('([2:/android/graphics/drawable/cts/ScaleDrawableTest.java]:[ANY]:[2]:method_text:[wable.setColorFilter(null);        verify(mockDrawable, times(1)).setColorFilter(any());    }   ])', 1), ('([25:/com/android/cts/deviceandprofileowner/SetPolicyActivity.java]:[restriction]:[25]:method_text:[ scopes);        } else {            Log.e(TAG, ""Invalid command: "" + command);        }    }}])', 1), ('([1:/com.android.cts.deviceadmin/BaseDeviceAdminTest.java]:[restriction]:[1]:method_text:[mumSymbols(mAdminComponent, 0);        dpm.setPasswordMinimumNonLetter(mAdminComponent, 0);    }}])', 1), ('([1:/android/view/cts/ViewTreeObserverTest.java]:[ANY]:[1]:method_text:[ad(() -> mActivity.setContentView(layoutId));        mInstrumentation.waitForIdleSync();    }   ])', 1), ('([1:/android/view/cts/ViewTreeObserverTest.java]:[ANY]:[1]:method_text:[leSync();        verify(listener, within(TIMEOUT_MS)).onTouchModeChanged(anyBoolean());    }   ])', 1), ('([1:/android/view/cts/ViewTreeObserverTest.java]:[ANY]:[1]:method_text:[  SystemClock.sleep(TIMEOUT_MS);        verifyZeroInteractions(listener);    }    @LargeTest   ])', 1), ('([1:/android/cts/backup/autorestoreapp/AutoRestoreTest.java]:[ANY]:[1]:method_text:[references = context.getSharedPreferences(SHARED_PREFERENCES_FILE, Context.MODE_PRIVATE);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerHelper.java]:[ANY]:[1]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([1:/android/text/cts/BidiFormatterTest.java]:[ANY]:[1]:method_text:[       RTL_FMT_EXIT_RESET.unicodeWrap(HE + EN + HE, TextDirectionHeuristics.LTR, false));    }   ])', 1), ('([1:/android/text/cts/BidiFormatterTest.java]:[ANY]:[1]:method_text:[ctionHeuristics.ANYRTL_LTR).build();        assertTrue(modifiedFmt.isRtl(EN + HE + EN));    }   ])', 1), ('([1:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java]:[ANY]:[1]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([2:/android/widget/cts/TextViewFadingEdgeTest.java]:[ANY]:[2]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([5:/android/widget/cts/TextViewFadingEdgeTest.java]:[ANY]:[5]:method_text:[ity, textAlignment, false,                    expectationLeft, expectationRight);        }    }}])', 1), ('([1:/android/voiceinteraction/service/BasicVoiceInteractionService.java]:[ANY]:[1]:method_text:[SULT_INTENT,                    Utils.HOTWORD_DETECTION_SERVICE_TRIGGER_SUCCESS);        }    }}])', 1), ('([1:/com/android/cts/launcherapps/simpleapp/SimpleActivityImmediateExit.java]:[ANY]:[1]:method_text:[= new Intent();        reply.setAction(ACTIVITY_EXIT_ACTION);        sendBroadcast(reply);    }}])', 1), ('([1:/com/android/cts/isolatedsplitapp/feature_c/FeatureCActivity.java]:[ANY]:[1]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_c_textview, linearLayout);    }}])', 1), ('([1:/android/webkit/cts/WebViewOnUiThread.java]:[ANY]:[1]:method_text:[   params.width = ViewGroup.LayoutParams.MATCH_PARENT;        view.setLayoutParams(params);    }}])', 1), ('([2:/com/android/cts/helpers/ICtsDeviceInteractionHelper.java]:[ANY]:[2]:method_text:[     * tearDown} method or another {@code @After} method.     */    default void tearDown() {};}])', 1), ('([2:/com/android/suspendapps/suspendtestapp/TestService.java]:[ANY]:[2]:method_text:[{            sRegisteredReporters.clear();        }        return super.onUnbind(intent);    }}])', 1), ('([2:/android/appsecurity/cts/ListeningPortsTest.java]:[ANY]:[2]:method_text:[  * unauthorized access to computers systems without user knowledge or     * awareness.     */   ])', 1), ('([1:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java]:[ANY]:[1]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1), ('([1:/android/graphics/pdf/cts/Utils.java]:[ANY]:[1]:method_text:[n throw an exception.     */    interface Invokable {        void run() throws Exception;    }}])', 1), ('([1:/com/android/cts/isolatedsplitapp/feature_c/FeatureCReceiver.java]:[ANY]:[1]:method_text:[(                ""feature_c"", context.getResources().getString(R.string.feature_c_string));    }}])', 1), ('([2:/android/signature/cts/ApiComplianceChecker.java]:[ANY]:[2]:method_text:[ } catch (ClassNotFoundException e) {                // Do nothing.            }        }    }}])', 1), ('([1:/com/android/cts/core/runner/support/SingleTestNGTestRunListener.java]:[ANY]:[1]:method_text:[owable error) {        return Arrays.toString(error.getStackTrace()).replaceAll(""\\n"", "" "");    }}])', 1), ('([1:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[ANY]:[1]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([1:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[ANY]:[1]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([1:/android/text/format/cts/TimeTest.java]:[ANY]:[1]:method_text:[+ highStart.getEpochSecond()) / 2;        return Instant.ofEpochSecond(midPointSeconds);    }   ])', 1), ('([1:/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java]:[ANY]:[1]:method_text:[ivity.class);    }    /**     * Runs the full OpenGL ES 2.0 pipeline test offscreen.     */   ])', 1), ('([1:/android/print/cts/InterfaceForAppsTest.java]:[ANY]:[1]:method_text:[rue(job.isCancelled()));        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[ANY]:[1]:method_text:[        assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isTrue();    }   ])', 1), ('([4:/com/android/compatibility/common/util/MediaUtils.java]:[ANY]:[4]:method_text:[     *  -------------------------------------- END --------------------------------------     */}])', 1), ('([1:/android/util/cts/JsonReaderTest.java]:[ANY]:[1]:method_text:[g());        assertEquals(Long.MAX_VALUE, reader.nextLong());        reader.endArray();    }   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[ANY]:[1]:method_text:[ /**     * It should be possible to grant a permission implicitly added due to a split.     */   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[restriction]:[1]:method_text:[ }    /**     * The background location permission granted by default for pre-M apps.     */   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[restriction]:[1]:method_text:[ission should inherit the     * revoked state.     *     * <p>(Pre-M version of test)     */   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[restriction]:[1]:method_text:[/**     * It should be possible to revoke a permission implicitly added due to a split.     */   ])', 1), ('([1:/android/permission/cts/SplitPermissionTest.java]:[restriction]:[1]:method_text:[    * When a requested permission was granted before upgrade it should still be granted.     */   ])', 1), ('([1:/android/media/cts/MediaExtractorHostSideTest.java]:[ANY]:[1]:method_text:[ receiver);        return ConfigMetricsReportList.parser().parseFrom(receiver.getOutput());    }}])', 1), ('([1:/com/android/cts/verifier/bluetooth/BleCocInsecureServerTestListActivity.java]:[ANY]:[1]:method_text:[tClass().getName(),                disabledTest.toArray(new String[disabledTest.size()])));    }}])', 1), ('([2:/android/server/wm/app/FontScaleActivity.java]:[ANY]:[2]:method_text:[as(this,                bundle -> bundle.putInt(EXTRA_FONT_ACTIVITY_DPI, fontActivityDpi));    }}])', 1), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[ANY]:[1]:method_text:[ALLOW_WHILE_IDLE_QUOTA - quotaToReclaim + 1);        return t + ALLOW_WHILE_IDLE_WINDOW;    }   ])', 1), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[ANY]:[1]:method_text:[;        i.setFlags(Intent.FLAG_RECEIVER_FOREGROUND);        sContext.sendBroadcast(i);    }   ])', 1), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[restricted]:[1]:method_text:[                    AlarmReceiver.waitForAlarm(id, DEFAULT_WAIT_FOR_SUCCESS));        }    }   ])', 1), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[restricted]:[1]:method_text:[ALLOW_WHILE_IDLE_QUOTA - quotaToReclaim + 1);        return t + ALLOW_WHILE_IDLE_WINDOW;    }   ])', 1), ('([9:/android/server/wm/WindowTest.java]:[ANY]:[9]:method_text:[f (mActivity != null) {            mActivity.setFlagFalse();        }    }    @UiThreadTest   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[ams.FLAG_FULLSCREEN);        mWindow.clearFlags(WindowManager.LayoutParams.FLAG_DITHER);    }   ])', 1), (""([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[se;     * Otherwise, it will display itself meanwhile container's mHasChildren is true.     */   ])"", 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[later} instance that this Window     *    retrieved from its Context.     */    @UiThreadTest   ])', 1), ('([2:/android/server/wm/WindowTest.java]:[ANY]:[2]:method_text:[utesChanged(window.getAttributes());    }    /**     * Set the gravity of the window     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[    *    2.You can change them to WRAP_CONTENT to make a window that is not full-screen.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[    /**     * Set the type of the window, as per the WindowManager.LayoutParams types.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[indow.     *    2.Providing ""unspecified"" here will override the input mode the window.     */   ])', 1), ('([1:/android/server/wm/WindowTest.java]:[ANY]:[1]:method_text:[wAnimations);        verify(mWindowCallback, times(1)).onWindowAttributesChanged(attrs);    }   ])', 1), ('([1:/android/telecom/cts/MockConference.java]:[ANY]:[1]:method_text:[return true;    }    public void resetLock() {        mLock = new CompletableFuture<>();    }}])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[ANY]:[1]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/uirendering/cts/util/BitmapDumper.java]:[ANY]:[1]:method_text:[leStream.flush();        } catch (Exception e) {            e.printStackTrace();        }    }}])', 1), ('([5:/android/hardware/camera2/cts/LogicalCameraDeviceTest.java]:[ANY]:[5]:method_text:[  /**     * Test for making sure that streaming from physical streams work as expected.     */   ])', 1), ('([3:/com/android/cts/verifier/audio/MidiJavaTestActivity.java]:[ANY]:[3]:method_text:[     } /* class USBMidiEchoReceiver */    } /* class BTMidiTestModule */} /* class MidiActivity */])', 1), ('([2:/com/android/cts/verifier/wifi/TestUtils.java]:[ANY]:[2]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([1:/android/view/cts/ActionModeTest.java]:[ANY]:[1]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([7:/android/view/cts/ActionModeTest.java]:[ANY]:[7]:method_text:[nGetContentRect(any(ActionMode.class), any(View.class),                any(Rect.class));    }   ])', 1), ('([2:/android/hdmicec/cts/tv/HdmiCecRemoteControlPassThroughTest.java]:[ANY]:[2]:method_text:[ionAddresses)                    .containsAnyIn(Arrays.asList(device1, device2));        }"	""	""	[('ANY', 1179), ('restriction', 199), ('restricted', 95)]	[('[android.print.cts.PrintDocumentAdapterContractTest onFinishCalled CtsPrintTestCases]', 12), ('[library.test.java.com.android.bedstead.remotedpc.RemoteDpcTest isNull None]', 9), ('[android.transition.cts.ActivityTransitionTest getVisibility CtsTransitionTestCases]', 3), ('[android.permission2.cts.RestrictedStoragePermissionTest testStorageTargetingSdk30CannotPreserveLegacyOnInstall CtsPermission2TestCases]', 3), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartRetailDemoMode CtsAppTestCases]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart CtsWifiTestCases]', 2), ('[android.host.accounts.BaseMultiUserTest listUsers CtsAccountsHostTestCases]', 2), ('[android.content.pm.cts.ResourcesHardeningTest TestBlockFilter CtsContentTestCases]', 2), ('[android.provider.cts.calendar.CalendarTest testBulkUpdate CtsCalendarProviderTestCases]', 2), ('[android.appintegrity.cts.CtsAppIntegrityDeviceTest isPreInstalled CtsAppIntegrityDeviceTestCases]', 2), ('[com.android.cts.devicepolicy.BaseDevicePolicyTest isHeadlessSystemUserMode CtsDevicePolicyManagerTestCases]', 2), ('[android.print.cts.PrintDocumentInfoTest createFirstMockDiscoverySessionCallbacks CtsPrintTestCases]', 2), ('[android.telephony.ims.cts.SipDelegateManagerTest testIncomingInviteDeregistering CtsTelephonyTestCases]', 2), ('[android.scopedstorage.cts.host.LegacyStorageHostTest isTrue None]', 2), ('[library.test.java.com.android.bedstead.remotedpc.RemoteDpcTest isNotNull None]', 2), ('[android.alarmmanager.cts.AppStandbyTests setUpTests CtsAlarmManagerTestCases]', 2), ('[android.alarmmanager.cts.ExactAlarmsTest setExactAwiWithoutPermissionWithWhitelist CtsAlarmManagerTestCases]', 2), ('[android.alarmmanager.cts.ExactAlarmsTest setExactAwiWithPermissionAndWhitelist CtsAlarmManagerTestCases]', 2), ('[test.java.com.android.queryable.queries.UserHandleQueryHelperTest isTrue None]', 2), ('[android.display.cts.DisplayTest testRestrictedFramebufferSize CtsDisplayTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_AsCustomAsPossible CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_AsCustomAsPossible CtsKeystoreTestCases]', 2), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_LeaveAllSystemApps None]', 2), ('[android.keystore.cts.util.TestUtils TestUtils CtsKeystoreTestCases]', 2), ('[android.telephony.cts.SmsManagerTest testContentProviderAccessRestriction CtsTelephonyTestCases]', 2), ('[android.transition.cts.ActivityTransitionTest finishAfterTransition CtsTransitionTestCases]', 2), ('[com.android.cts.verifier.camera.its.ItsService doCheckSensorExistence None]', 2), ('[android.media.cts.BaseMultiUserTest listUsers CtsMediaHostTestCases]', 2), ('[com.android.cts.verifier.managedprovisioning.VpnTestActivity setPassFailButtonClickListeners None]', 2), ('[android.jobscheduler.cts.JobThrottlingTest isDeviceIdleMode CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testBackgroundConnectivityJobsThrottled CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_WithRequiredNetwork CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_RestrictedBucket CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_Doze CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testJobStoppedWhenRestricted CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobAllowedWhenUidActive CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testEJStoppedWhenRestricted CtsJobSchedulerTestCases]', 2), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedEJAllowedWhenUidActive CtsJobSchedulerTestCases]', 2), ('[android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testAlarmClockNotBlocked CtsAlarmManagerTestCases]', 2), ('[android.keystore.cts.KeyInfoTest testImmutabilityViaGetterReturnValues CtsKeystoreTestCases]', 2), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testOpendirRestrictions None]', 2), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testExternalStorageProviderAndDownloadsProvider None]', 2), ('[android.keystore.cts.CipherTest testMaxSizedPlaintextSupported CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testLargerThanMaxSizedPlaintextRejected CtsKeystoreTestCases]', 2), ('[com.android.cts.deviceandprofileowner.PasswordRequirementsTest testPasswordConstraintsDoesntThrowAndPreservesValuesPreR None]', 2), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 2), ('[android.devicepolicy.cts.LockTaskTest isNotNull CtsDevicePolicyTestCases]', 2), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testAudioRestriction CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testPackageInstallUserRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionStateChangedIntent CtsBluetoothTestCases]', 1), ('[android.content.cts.IntentFilterTest testAppEnumerationMatchesMimeGroups CtsContentTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest MyTouchListener CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest testClickAt_producesDownThenUp CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest testLongClickAt_producesEventsWithLongClickTiming CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest testClickWhenMagnified_matchesActualTouch CtsAccessibilityServiceTestCases]', 1), ('[android.animation.cts.AnimatorSetTest testZeroDurationScale CtsAnimationTestCases]', 1), ('[android.text.cts.SpannableStringBuilderTest testReplace2 CtsTextTestCases]', 1), ('[android.print.cts.PrintJobStateTransitionsTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.hardware.camera2.cts.CameraTestUtils ImageDropperListener None]', 1), ('[android.autofillservice.cts.unittests.ServiceDisabledForSureTest prepareServicePreTest CtsAutoFillServiceTestCases]', 1), ('[android.server.wm.CompatChangeTests createManagedConstrainDisplayApisFlagsSession CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.verifier.bluetooth.BleCocSecureServerTestListActivity setPassFailButtonClickListeners None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishWithSipOptions CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerRcsProvisioningChangedCallback CtsTelephonyTestCases]', 1), ('[android.renderscript.cts.FieldPackerTest testAlignResetSkip CtsRenderscriptTestCases]', 1), ('[android.view.cts.TextureViewCtsActivity glFinish CtsViewTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest getTestAlias1 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_RSA CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_EC CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_HMAC CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_OnlyOneDigestCanBeAuthorized_HMAC CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_RSA CtsKeystoreTestCases]', 1), ('[android.server.biometrics.BiometricSimpleTests testWhenCredentialNotEnrolled CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSimpleTests testWhenCredentialEnrolled CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricSimpleTests testBiometricCancellation CtsBiometricsTestCases]', 1), ('[android.hardware.camera2.cts.SurfaceViewPreviewTest testDeferredSurfaces CtsCameraTestCases]', 1), ('[android.content.cts.ContentResolverWrapTest testQuery CtsContentTestCases]', 1), ('[android.content.cts.ContentResolverWrapTest testLoadThumbnail CtsContentTestCases]', 1), ('[android.uwb.cts.RangingSessionTest PersistableBundle CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testOnRangingOpened_OnOpenSuccessCalled CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testOnRangingOpened_CannotOpenClosedSession CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testOnRangingClosed_OnClosedCalledWhenSessionNotOpen CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testOnRangingClosed_OnClosedCalled CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testStart_CannotStartIfAlreadyStarted CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testStop_CannotStopIfAlreadyStopped CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testReconfigure_OnlyWhenOpened CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testClose_NoCallbackUntilInvoked CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testClose_OnClosedCalled CtsUwbTestCases]', 1), ('[android.uwb.cts.RangingSessionTest testClose_CannotInteractFurther CtsUwbTestCases]', 1), ('[android.uidisolation.cts.PermissionTestService startTests CtsUidIsolationTestCases]', 1), ('[android.view.cts.View_UsingViewsTest testSetProperties CtsViewTestCases]', 1), ('[android.view.cts.View_UsingViewsTest testSetupListeners CtsViewTestCases]', 1), ('[android.widget.cts.GridViewTest testPressKey CtsWidgetTestCases]', 1), ('[com.android.cts.verifier.sensors.StepCounterTestActivity StepCounterTestActivity None]', 1), ('[com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest testPasswordMinimumRestriction None]', 1), ('[com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest testSetPasswordMinimumRestrictionWithNull None]', 1), ('[com.android.cts.deviceandprofileowner.PasswordMinimumRestrictionsTest testGetPasswordMinimumRestrictionWithNullAdmin None]', 1), ('[android.media.cts.MediaCodecTunneledPlayer isEnded None]', 1), ('[com.android.cts.verifier.nfc.hce.HceService currentTimeMillis None]', 1), ('[android.telecom.cts.ConferenceTest testConferenceSetters CtsTelecomTestCases]', 1), ('[android.view.cts.FocusFinderTest testBasicFocusOrder CtsViewTestCases]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi30 testPasswordMinimumRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[android.media.cts.AudioPlaybackCaptureTest testPlaybackCaptureDoS CtsMediaTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AutofillRestrictionsTest disableService None]', 1), ('[com.android.cts.deviceandprofileowner.AutofillRestrictionsTest testDisallowAutofill_allowed None]', 1), ('[android.content.cts.ContextTest testSendOrderedBroadcast2 CtsContentTestCases]', 1), ('[android.content.cts.ContextTest testAccessStickyBroadcast CtsContentTestCases]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest register None]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest testLaunchAnyway None]', 1), ('[android.autofillservice.cts.testcore.InstrumentedAutoFillService getFillEventHistory CtsAutoFillServiceTestCases]', 1), ('[android.view.inputmethod.cts.util.TestActivity finish CtsInputMethodTestCases]', 1), ('[android.cts.FileChannelInterProcessLockTest test_lockJJZ_Shared_differentChannelTypes CtsLibcoreFileIOTestCases]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testNullComponentThrowsException None]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testSetApplicationRestrictions None]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testCanRetrieveOwnRestrictionsViaUserManager None]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testCannotRetrieveOtherPackageRestrictionsViaUserManager None]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testSetApplicationRestrictionsManagingPackage None]', 1), ('[com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest testSetApplicationRestrictionsManagingPackageForNotInstalledPackage None]', 1), ('[android.cts.backup.ProfileSerialNumberHostSideTest testSetAndGetAncestralSerialNumber CtsBackupHostTestCases]', 1), ('[android.security.cts.BannedFilesTest testNoSystemCmdSocket CtsSecurityTestCases]', 1), ('[android.security.cts.BannedFilesTest testNoSu CtsSecurityTestCases]', 1), ('[android.car.cts.PowerPolicyHostTest testPowerPolicySilentMode CtsCarHostTestCases]', 1), ('[android.car.cts.CarRotaryImeTest isNotEmpty CtsCarTestCases]', 1), ('[com.android.cts.apicoverage.PackageFilter isEmpty None]', 1), ('[android.os.cts.ParcelTest testObtainWithBinder None]', 1), ('[com.android.cts.host.blob.BlobStoreMultiUserTest testBlobAccessAcrossUsers_recommit CtsBlobStoreHostTestCases]', 1), ('[android.leanbackjank.cts.CtsDeviceLeanback runTest CtsLeanbackJankTestCases]', 1), ('[android.telephony.device.cts.TelephonyTest testListenerRegistrationWithChangeEnabled None]', 1), ('[android.telephony.device.cts.TelephonyTest testListenerRegistrationWithChangeDisabled None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testBadSurfaceDimensions CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testOisDataMode CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.compilation.cts.AdbRootDependentCompilationTest testCompile_curAndRefProfile CtsCompilationTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testShowInputMethodDialogWindow_resultIsApplicationType CtsAccessibilityServiceTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceBasic CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceImageReaderSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceYUVImageReaderSwitch CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaces CtsCameraTestCases]', 1), ('[com.android.cts.verifier.TestListAdapter isTest None]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testPackageInstallUserRestrictions CtsDevicePolicyManagerTestCases]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testPartialResult CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 1), ('[android.telephonyprovider.cts.SmsTestHelper SmsTestHelper CtsTelephonyProviderTestCases]', 1), ('[android.os.cts.EnvironmentTest testSaneInodes None]', 1), ('[android.app.stubs.LaunchpadActivity isEmpty None]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsBindingFlagFGS CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsLocationStartFromBG CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsLocationStartFromBGTwoProcesses CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsLocationPendingIntent CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsLocationStartFromBGWithBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testUpdateUidProcState CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBG1 CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBG2 CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBoundTopState CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromFgsState CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBGWithBind CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBGWithBindWithRestriction CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsBindingFlagNone CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartSystemAlertWindow CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartFromBGException CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartAllowList CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testTempAllowListType CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testVisibleActivityGracePeriod CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testStartForegroundTimeout CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testSecondStartForeground CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartVpn CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testPushMessagingOverQuota CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testTempAllowListReasonCode CtsAppTestCases]', 1), ('[android.app.cts.ActivityManagerFgsBgStartTest testFgsStartInputMethod CtsAppTestCases]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData CtsMediaTestCases]', 1), ('[android.media.cts.AudioTrackTest testAudioTrackBufferSize CtsMediaTestCases]', 1), ('[android.media.cts.AudioTrackTest testMaxAudioTracks CtsMediaTestCases]', 1), ('[android.media.cts.AudioTrackTest testTunerConfiguration CtsMediaTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPrivateSuggestionConnection CtsWifiTestCases]', 1), ('[android.util.cts.RationalTest testEquals CtsUtilTestCases]', 1), ('[android.util.cts.RationalTest testCompareTo CtsUtilTestCases]', 1), ('[android.media.cts.MediaExtractorTest testMpegh3dAudioMediaExtractorMhm1 CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testGetAudioPresentations CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.graphics.cts.TypefaceTest testInvalidCmapFont_tooLargeCodePoints CtsGraphicsTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AudioRestrictionTest isFullVolumeDevice None]', 1), ('[com.android.cts.deviceandprofileowner.AudioRestrictionTest testDisallowAdjustVolume_muted None]', 1), ('[com.android.cts.deviceandprofileowner.AudioRestrictionTest testDisallowAdjustVolume None]', 1), ('[com.android.cts.deviceandprofileowner.AudioRestrictionTest testDisallowUnmuteMicrophone None]', 1), ('[android.media.cts.DecodeEditEncodeTest testVideoEdit720p CtsMediaTestCases]', 1), ('[android.transition.cts.FadeTest resetListener CtsTransitionTestCases]', 1), ('[android.transition.cts.FadeTest testMode CtsTransitionTestCases]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect CtsTransitionTestCases]', 1), ('[android.webkit.cts.CookieManagerTest testRemoveCookiesCallback CtsWebkitTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_manyUserData_oneDetectableField_bestMatchIsFirst CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_manyUserData_oneDetectableField_bestMatchIsSecond CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_oneUserData_manyDetectableFields CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_manyUserData_manyDetectableFields CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_manyUserData_manyDetectableFields_differentClassificationAlgo CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_manyUserDataPerField_manyDetectableFields CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.servicebehavior.FieldsClassificationTest testHit_mergeUserData_manyDetectableFields CtsAutoFillServiceTestCases]', 1), ('[library.main.java.com.android.bedstead.remotedpc.RemoteDpc TestApis None]', 1), ('[android.devicepolicy.cts.AppUriAuthenticationPolicyTest getAppAnyUrisMappings_multipleUrisSameAlias_containsBothUris CtsDevicePolicyTestCases]', 1), ('[android.hardware.camera2.cts.rs.Script isEmpty CtsCameraTestCases]', 1), ('[android.car.cts.PreCreateUsersHostTest testAppPermissionsPreCreatedGuestPackagesAfterReboot CtsCarHostTestCases]', 1), ('[java.android.signature.cts.api.TestResultObserver onTestComplete None]', 1), ('[android.view.cts.GestureDetectorTest getListener CtsViewTestCases]', 1), ('[android.view.cts.GestureDetectorTest testOnSetContextClickListener CtsViewTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testSetAccountManagementDisabledOnParent None]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest testUidTagStateDetails CtsUsageStatsTestCases]', 1), ('[android.telecom.cts.PhoneAccountSuggestionServiceTest testSuggestionTimeout CtsTelecomTestCases]', 1), ('[android.view.cts.SystemGestureExclusionRectsTest isEmpty CtsViewTestCases]', 1), ('[android.view.cts.ViewReceiveContentTest testPerformReceiveContent CtsViewTestCases]', 1), ('[android.view.cts.ViewReceiveContentTest testOnReceiveContent CtsViewTestCases]', 1), ('[android.view.cts.ViewReceiveContentTest testOnDragEvent_withOnReceiveContentListener CtsViewTestCases]', 1), ('[android.view.cts.ViewReceiveContentTest testOnDragEvent_withOnReceiveContentListener_noneOfTheContentAccepted CtsViewTestCases]', 1), ('[android.view.cts.ViewReceiveContentTest testOnDragEvent_withOnReceiveContentListener_someOfTheContentAccepted CtsViewTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceivePasswordChanged CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceivePasswordFailed CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceivePasswordSucceeded CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceivePasswordExpiring CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveEnabled CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveDisabled CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveBugreportSharingDeclined CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveBugreportFailed CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveBugreportShared CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveSecurityLogsAvailable CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminReceiverTest testOnReceiveNetworkLogsAvailable CtsAdminTestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testPostRCanToggleConversationsTest CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testMatchesCallFilter CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testNotificationUriPermissionsGranted CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testOriginalChannelImportance CtsAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testDeleteConversationChannels CtsAppTestCases]', 1), ('[android.location.cts.gnss.pseudorange.PseudorangePositionVelocityFromRealTimeEvents currentTimeMillis CtsLocationGnssTestCases]', 1), ('[com.android.security.cts.launchanywhere.Authenticator isBinderAlive None]', 1), ('[android.view.cts.input.InputDeviceVibratorTest isVibrating CtsViewTestCases]', 1), ('[android.widget.cts.SearchView_CursorTest testSuggestionFiltering CtsWidgetTestCases]', 1), ('[android.widget.cts.SearchView_CursorTest testSuggestionSelection CtsWidgetTestCases]', 1), ('[android.widget.cts.SearchView_CursorTest testSuggestionEnterKey CtsWidgetTestCases]', 1), ('[main.library.java.com.android.bedstead.testapp.TestAppProvider TestApis None]', 1), ('[android.server.wm.AlertWindowsAppOpsTests testSystemAlertWindowAppOpsInitiallyAllowed CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.verifier.audio.AudioLoopbackBaseActivity isMMapSupported None]', 1), ('[android.telecom.cts.OutgoingCallTest testPhoneStateListenerInvokedOnOutgoingEmergencyCall CtsTelecomTestCases]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest testHasBaseUserRestrictions None]', 1), ('[android.app.cts.ApplicationTest testOnTrimMemory CtsAppTestCases]', 1), ('[android.hardware.cts.helpers.sensorverification.FifoLengthVerification isDeviceSuspendTest CtsSensorTestCases]', 1), ('[android.server.biometrics.BiometricTestBase anyEnrollmentsExist CtsBiometricsTestCases]', 1), ('[android.view.accessibility.cts.CaptioningManagerTest testChangeListener CtsAccessibilityTestCases]', 1), ('[android.content.cts.ContentProviderTest TestApis CtsContentTestCases]', 1), ('[com.android.compatibility.common.util.SystemUtil grantRuntimePermission None]', 1), ('[android.translation.cts.CtsTranslationService onDisconnected CtsTranslationTestCases]', 1), ('[android.cts.statsdatom.statsd.DeviceAtomTestCase installTestApp CtsStatsdAtomHostTestCases]', 1), ('[android.text.method.cts.MetaKeyKeyListenerTest testResetLockedMeta CtsTextTestCases]', 1), ('[android.dynamicmime.cts.PreferredActivitiesTestCases disableKeyguard CtsDynamicMimeHostTestCases]', 1), ('[android.app.cts.PendingIntentTest testSendNoReceiverOnFinishedHandler CtsAppTestCases]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest testApp_returnsTestApp None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest isNotNull None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest killProcess_keepAlive_processIsRunningAgain None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest stop_processIsNotRunning None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest isEmpty None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest process_isNotRunning_returnsNull None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest process_isRunning_isNotNull None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest registerReceiver_receivesBroadcast None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest registerReceiver_multipleIntentFilters_receivesAllMatchingBroadcasts None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest registerReceiver_processIsRunning None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest stop_registeredReceiver_doesNotReceiveBroadcast None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest unregisterReceiver_registeredReceiver_doesNotReceiveBroadcast None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest unregisterReceiver_doesNotUnregisterOtherReceivers None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest keepAlive_processIsRunning None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppInstanceReferenceTest registerReceiver_appIsKilled_stillReceivesBroadcast None]', 1), ('[android.security.cts.IsolatedProcessTest testGetServiceFromIsolatedService CtsSecurityTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testUserAgentStringTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAppCacheDisabled CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebSettingsTest testAppCacheEnabled CtsWebkitTestCases]', 1), ('[android.appwidget.cts.WidgetTransitionTest grantBindAppWidgetPermission CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.WidgetTransitionTest testCollection_sendBroadcast CtsAppWidgetTestCases]', 1), ('[android.media.cts.MediaCodecTest testException CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCreateInputSurfaceErrors CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testAbruptStop CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testCryptoException CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecTest testFlushAfterFirstBuffer CtsMediaTestCases]', 1), ('[com.android.cts.verifier.sensors.sixdof.Fragments.RobustnessFragment OnClickListener None]', 1), ('[android.content.pm.cts.ResourcesHardeningTest isEmpty CtsContentTestCases]', 1), ('[android.uirendering.cts.testinfrastructure.DisplayModifier DisplayModifier CtsUiRenderingTestCases]', 1), ('[android.widget.cts.ChronometerTest testStartAndStop CtsWidgetTestCases]', 1), ('[android.app.usage.cts.test2.FinishingTaskRootActivity finish None]', 1), ('[android.keystore.cts.KeyGeneratorTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testHmacKeyOnlyOneDigestCanBeAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testGenerateHonorsRequestedAuthorizations CtsKeystoreTestCases]', 1), ('[android.view.cts.GestureDetectorCtsActivity MockOnTouchListener CtsViewTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest disconnect CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testReceiveSms CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendTextSms CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendDataSms CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendMultipartTextSms CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testDownloadMms CtsTelephonyTestCases]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendMms CtsTelephonyTestCases]', 1), ('[com.android.compatibility.common.util.Timeout getCurrentTestName None]', 1), ('[android.print.test.BasePrintTest disableImes None]', 1), ('[android.graphics.drawable.cts.ShapeDrawableTest testOnDraw CtsGraphicsTestCases]', 1), ('[android.widget.cts.TabWidgetTest testAddAdapterView CtsWidgetTestCases]', 1), ('[android.widget.cts.TabWidgetTest testAddNullView CtsWidgetTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest currentTimeMillis CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest testOnFlush CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.LocationProviderBaseTest testOnSendExtraCommand CtsLocationFineTestCases]', 1), ('[android.uirendering.cts.testinfrastructure.ActivityTestBase isWideColorGamut CtsUiRenderingTestCases]', 1), ('[android.security.cts.SELinuxHostTest testNoBooleans CtsSecurityHostTestCases]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo CtsSecurityHostTestCases]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing CtsSecurityHostTestCases]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain CtsSecurityHostTestCases]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1), ('[android.accessibilityservice.cts.GestureDescriptionTest testAddStroke_allowUpToMaxPaths CtsAccessibilityServiceTestCases]', 1), ('[com.android.cts.apicoverage.CtsApiCoverage isDirectory None]', 1), ('[android.location.cts.privileged.GnssMeasurementValuesTest dropShellPermissionIdentity CtsLocationPrivilegedTestCases]', 1), ('[android.transition.cts.BaseTransitionTest TestTransition CtsTransitionTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testOpenDocumentAny CtsContentTestCases]', 1), ('[android.content.cts.AvailableIntentsTest testGetContentAny CtsContentTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.publisher3.ShortcutManagerPostBackupTest testWithUninstall None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1InInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1NotInInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1InEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1NotInEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2InInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2NotInInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2InEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme2NotInEnabledInputMethodList None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1ImplicitlyEnabledSubtypeExists None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodManagerDeviceTest testIme1ImplicitlyEnabledSubtypeNotExist None]', 1), ('[android.leanbackjank.app.ui.MainFragment setupEventListeners None]', 1), ('[android.view.cts.KeyEventTest uptimeMillis CtsViewTestCases]', 1), ('[android.view.cts.KeyEventTest testDispatch CtsViewTestCases]', 1), ('[android.view.cts.KeyEventTest testToString CtsViewTestCases]', 1), ('[android.view.cts.KeyEventTest testDescribeContents CtsViewTestCases]', 1), ('[android.media.cts.MediaActivityTest testVolumeKey_afterSessionReleased CtsMediaTestCases]', 1), ('[android.media.cts.MediaActivityTest testMediaKey_whileSessionReleased CtsMediaTestCases]', 1), ('[com.android.cts.usespermissiondiffcertapp.AccessPermissionWithDiffSigTest testRestrictingProviderNoMatchingPath None]', 1), ('[android.display.cts.VirtualDisplayTest testGetHdrCapabilitiesWithUserDisabledFormats CtsDisplayTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testAppWidgetProviderCallbacks CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testTwoAppWidgetProviderCallbacks CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testOnProvidersChanged CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testUpdateAppWidgetViaComponentName CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testUpdateAppWidgetViaWidgetId CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testUpdateAppWidgetViaWidgetIds CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testPartiallyUpdateAppWidgetViaWidgetId CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testPartiallyUpdateAppWidgetViaWidgetIds CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testCollectionWidgets CtsAppWidgetTestCases]', 1), ('[android.appwidget.cts.AppWidgetTest testAppWidgetGetActivityInfo CtsAppWidgetTestCases]', 1), ('[android.server.wm.MultiDisplaySecurityTests testLaunchWithoutPermissionOnVirtualDisplayByOwner CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.MultiDisplaySecurityTests testLaunchWithoutPermissionOnVirtualDisplay CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.verifier.admin.ScreenLockTestActivity setPassFailButtonClickListeners None]', 1), ('[android.view.cts.KeyEventInjectionTest testKeyEventInjectedViaAdb CtsViewTestCases]', 1), ('[android.view.cts.ViewUnbufferedTest uptimeMillis CtsViewTestCases]', 1), ('[android.print.cts.ClassParametersTest isPortrait CtsPrintTestCases]', 1), ('[com.android.cts.apprestrictions.targetapp.ApplicationRestrictionsActivity finish None]', 1), ('[android.provider.cts.calendar.CalendarTest testCalendarCreationAndDeletion CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testAttendees CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testOutOfOrderRecurrenceExceptions CtsCalendarProviderTestCases]', 1), ('[android.provider.cts.calendar.CalendarTest testMutatorSetCorrectly CtsCalendarProviderTestCases]', 1), ('[com.android.cts.verifier.notifications.BubblesVerifierActivity getTestTitle None]', 1), ('[android.content.pm.cts.ApplicationInfoTest testIsProduct CtsContentTestCases]', 1), ('[android.content.pm.cts.ApplicationInfoTest testIsVendor CtsContentTestCases]', 1), ('[android.security.cts.CVE_2021_0523.PocService getDisplayMetrics None]', 1), ('[android.keystore.cts.NoAttestKeyTest ArrayList CtsKeystoreTestCases]', 1), ('[android.os.cts.BundleTest testClone None]', 1), ('[android.carrierapi.cts.BugreportManagerTest TestName CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.BugreportManagerTest hasEarlyReportFinished CtsCarrierApiTestCases]', 1), ('[android.util.cts.ArraySetTest testAddAll CtsUtilTestCases]', 1), ('[com.android.server.cts.SettingsIncidentTest testBasicStructure CtsIncidentHostTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testDeviceIdAttestation CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_NoChallenge CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation_NoChallenge CtsKeystoreTestCases]', 1), ('[com.android.cts.suspensionchecker.ActivityLaunchTest testWaitForActivityNotLaunchable None]', 1), ('[android.widget.cts.ImageViewTest testOnDraw CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageViewTest testSetFrame CtsWidgetTestCases]', 1), ('[android.widget.cts.ImageViewTest testImageTintDrawableUpdates CtsWidgetTestCases]', 1), ('[android.mediav2.cts.AdaptivePlaybackTest testAdaptivePlayback CtsMediaV2TestCases]', 1), ('[android.graphics.cts.FrameRateCtsActivity DisplayListener CtsGraphicsTestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationManager29Test isNotificationPolicyAccessGranted CtsLegacyNotification29TestCases]', 1), ('[android.app.notification.legacy29.cts.NotificationManager29Test testApi29CannotToggleConversationsTest CtsLegacyNotification29TestCases]', 1), ('[com.android.cts.deviceandprofileowner.WifiTest emptyList None]', 1), ('[android.os.cts.VibratorTest testGetId None]', 1), ('[android.os.cts.VibratorTest testVibratorStateCallback None]', 1), ('[android.widget.cts.PopupMenuTest dismiss CtsWidgetTestCases]', 1), ('[android.widget.cts.PopupMenuTest testDismissalViaAPI CtsWidgetTestCases]', 1), ('[android.widget.cts.PopupMenuTest testNestedDismissalViaAPI CtsWidgetTestCases]', 1), ('[android.widget.cts.PopupMenuTest testSimpleMenuItemClickViaAPI CtsWidgetTestCases]', 1), ('[android.widget.cts.PopupMenuTest testSubMenuClickViaAPI CtsWidgetTestCases]', 1), ('[android.graphics.drawable.cts.IconTest testLoadDrawableAsync CtsGraphicsTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCreateDelegateMessagingAppChangesAwayFromApp CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testCreateDelegateTestInvalidSipMessages CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.SipDelegateManagerTest testActiveDialogPendingNewInvite CtsTelephonyTestCases]', 1), ('[android.server.wm.NestedShellPermission NestedShellPermission None]', 1), ('[android.classloaders.cts.BaseInstallMultiple allowTest CtsUsesLibraryHostTestCases]', 1), ('[com.android.cts.delegate.AppRestrictionsDelegateTest testCannotAccessApis None]', 1), ('[com.android.cts.delegate.AppRestrictionsDelegateTest testCanAccessApis None]', 1), ('[android.keystore.cts.MacTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.controls.cts.CtsControlsServiceTest testRequestAddControl CtsControlsDeviceTestCases]', 1), ('[android.hardware.camera2.cts.helpers.CameraSessionUtils getMockCaptureListener None]', 1), ('[com.android.tests.stagedinstall.host.ApexShimValidationTest isTrue None]', 1), ('[com.android.tests.stagedinstall.host.ApexShimValidationTest testShimApexIsPreInstalled None]', 1), ('[android.os.cts.batterysaving.BatterySaverAlarmTest testAllowWhileIdleThrottled CtsBatterySavingTestCases]', 1), ('[com.android.cts.verifier.bluetooth.BleConnectionPriorityServerService getBluetoothLeAdvertiser None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalHiddenSettingsKeysNotReadableWithoutAnnotation None]', 1), ('[com.android.cts.readsettingsfieldsapp.ReadSettingsFieldsTest testGlobalHiddenSettingsKeysReadableWithoutAnnotation None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingOverride CtsWindowManagerDeviceTestCases]', 1), ('[android.telephony.cts.CallComposerTest testExcessivelyLargePictureAsStream CtsTelephonyTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkStackPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFactoryReset CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnSOrNewer CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testListenOnCoexUnsafeChannels CtsWifiTestCases]', 1), ('[android.jni.cts.LinkerNamespacesHelper exists CtsJniTestCases]', 1), ('[android.car.cts.CarBluetoothTest disable CtsCarTestCases]', 1), ('[android.webkit.cts.WebViewClientTest testShouldInterceptRequestParams CtsWebkitTestCases]', 1), ('[android.server.wm.ActivityMetricsLoggerTests testAppLaunchCancelledSameTask CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.MediaPlayerTest testGapless3 CtsMediaTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.telephony.cts.embmstestapp.CtsDownloadService emptyList None]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachDiscoveryAddressChanges CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAwareResourcesConstructor CtsWifiTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testDatasetGoesAwayWhenAutofilledAppIsKilled CtsAutoFillServiceTestCases]', 1), ('[com.android.compatibility.common.util.BaseDefaultPermissionGrantPolicyTest isEmpty None]', 1), ('[com.android.cts.deviceowner.SensorToggleRestrictionTest testCameraToggle_RestrictionSet_CannotChangeSensorPrivacy None]', 1), ('[com.android.cts.deviceowner.SensorToggleRestrictionTest testMicrophoneToggle_RestrictionSet_CannotChangeSensorPrivacy None]', 1), ('[com.android.cts.deviceowner.SensorToggleRestrictionTest testCameraToggle_RestrictionSet_ResetSensorPrivacy None]', 1), ('[com.android.cts.deviceowner.SensorToggleRestrictionTest testMicrophoneToggle_RestrictionSet_ResetSensorPrivacy None]', 1), ('[android.server.wm.WindowInsetsControllerTests testInsetsDispatch CtsWindowManagerDeviceTestCases]', 1), ('[android.widget.cts.FrameLayoutTest testForegroundTint CtsWidgetTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testNoDebuggingFeaturesRestriction CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testNfcRestriction CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testBluetoothSharingRestriction CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testChooserActivityLaunchedFromWorkProfileWithSelectedPersonalTab CtsDevicePolicyManagerTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability CtsWifiTestCases]', 1), ('[android.cts.statsdatom.statsd.UidAtomTests testAppCrashOccurred CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.statsd.UidAtomTests testAppCrashOccurredNative CtsStatsdAtomHostTestCases]', 1), ('[com.android.cts.deviceandprofileowner.DevicePolicyLoggingParentTest testUserRestrictionLogged None]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testInvalidateDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testScheduleDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testUnscheduleDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testDraw CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testGetPadding CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testSetVisible CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testSetAlpha CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.ScaleDrawableTest testSetColorFilter CtsGraphicsTestCases]', 1), ('[com.android.cts.deviceandprofileowner.SetPolicyActivity finish None]', 1), ('[com.android.cts.deviceadmin.BaseDeviceAdminTest isDeviceOwner None]', 1), ('[android.view.cts.ViewTreeObserverTest testAddOnTouchModeChangeListener CtsViewTestCases]', 1), ('[android.view.cts.ViewTreeObserverTest testRemoveOnTouchModeChangeListener CtsViewTestCases]', 1), ('[android.text.cts.BidiFormatterTest testUnicodeWrap CtsTextTestCases]', 1), ('[android.text.cts.BidiFormatterTest testBuilder_setTextDirectionHeuristic CtsTextTestCases]', 1), ('[android.widget.cts.TextViewFadingEdgeTest testFadingEdge CtsWidgetTestCases]', 1), ('[android.voiceinteraction.service.BasicVoiceInteractionService dropShellPermissionIdentity None]', 1), ('[com.android.cts.launcherapps.simpleapp.SimpleActivityImmediateExit finish None]', 1), ('[android.webkit.cts.WebViewOnUiThread clearHistory None]', 1), ('[com.android.suspendapps.suspendtestapp.TestService isPackageSuspended None]', 1), ('[android.appsecurity.cts.ListeningPortsTest installDeviceTestPkg CtsAppSecurityHostTestCases]', 1), ('[android.signature.cts.ApiComplianceChecker isAnnotation None]', 1), ('[com.android.cts.core.runner.support.SingleTestNGTestRunListener getNumTestStarted None]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.text.format.cts.TimeTest test_toMillisAndNormalizeGenerallyWork CtsTextTestCases]', 1), ('[android.print.cts.InterfaceForAppsTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.content.cts.ClipDescriptionTest testIsStyledText CtsContentTestCases]', 1), ('[com.android.compatibility.common.util.MediaUtils getTestName None]', 1), ('[android.util.cts.JsonReaderTest testHighPrecisionDouble_losesPrecision CtsUtilTestCases]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest assertThemeBaseValues None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest shouldLoadPolishLocale None]', 1), ('[android.permission.cts.SplitPermissionTest inheritRevokedPermissionStatePreM CtsPermissionTestCases]', 1), ('[android.permission.cts.SplitPermissionTest inheritGrantedPermissionStatePreM CtsPermissionTestCases]', 1), ('[android.permission.cts.SplitPermissionTest grantNewSplitPermissionStatePreM CtsPermissionTestCases]', 1), ('[android.permission.cts.SplitPermissionTest newPermissionGetRevokedOnUpgradePreM CtsPermissionTestCases]', 1), ('[android.media.cts.MediaExtractorHostSideTest testMediaMetricsLogSessionId CtsMediaHostTestCases]', 1), ('[com.android.cts.verifier.bluetooth.BleCocInsecureServerTestListActivity setPassFailButtonClickListeners None]', 1), ('[android.server.wm.app.FontScaleActivity getDisplayMetrics None]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest setAlarmClockWithoutPermissionWithWhitelist CtsAlarmManagerTestCases]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest setAlarmClockWithPermission CtsAlarmManagerTestCases]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest activityToRequestPermissionExists CtsAlarmManagerTestCases]', 1), ('[android.server.wm.WindowTest testOpFlags CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAccessAttributes CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testAccessContainer CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetDefaultWindowFormat CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetGravity CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetLayout CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetType CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowTest testSetWindowAnimations CtsWindowManagerDeviceTestCases]', 1), ('[android.telecom.cts.MockConference onDisconnect CtsTelecomTestCases]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh CtsCameraTestCases]', 1), ('[android.uirendering.cts.util.BitmapDumper listFiles CtsUiRenderingTestCases]', 1), ('[android.hardware.camera2.cts.LogicalCameraDeviceTest testInvalidPhysicalCameraIdInOutputConfiguration CtsCameraTestCases]', 1), ('[com.android.cts.verifier.audio.MidiJavaTestActivity MidiJavaTestActivity None]', 1), ('[android.view.cts.ActionModeTest testInvalidateContentRectOnFloatingCallsCallback CtsViewTestCases]', 1), ('[android.hdmicec.cts.tv.HdmiCecRemoteControlPassThroughTest isFalse CtsHdmiCecHostTestCases]', 1), ('[com.android.compatibility.common.util.BusinessLogicDeviceExecutorTest testInvokeMethodTooManyArgs None]', 1), ('[android.server.wm.WindowInsetsAnimationTests testAnimationCallbacks_overlapping CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationTests testAnimationCallbacks_childInsetting CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationTests testAnimationCallbacks_withLegacyFlags CtsWindowManagerDeviceTestCases]', 1), ('[android.transition.cts.TransitionManagerTest testBeginDelayedTransition CtsTransitionTestCases]', 1), ('[android.transition.cts.TransitionManagerTest testGo CtsTransitionTestCases]', 1), ('[android.transition.cts.TransitionManagerTest testSetTransition1 CtsTransitionTestCases]', 1), ('[android.transition.cts.TransitionManagerTest testSetTransition2 CtsTransitionTestCases]', 1), ('[android.transition.cts.TransitionManagerTest testEndTransitionsBeforeStarted CtsTransitionTestCases]', 1), ('[com.android.compatibility.testtype.DalvikTest isFile None]', 1), ('[android.appsecurity.cts.ResumeOnRebootHostTest isSupportedSDevice CtsAppSecurityHostTestCases]', 1), ('[com.android.cts.verifier.managedprovisioning.ByodHelperActivity isProfileOwner None]', 1), ('[android.graphics.cts.PaintTest testGetRunAdvance_nonzeroIndex CtsGraphicsTestCases]', 1), ('[android.graphics.cts.PaintTest testStrikeThruPosition_notCrashes CtsGraphicsTestCases]', 1), ('[android.graphics.cts.PaintTest testStrikeThruThickness_notCrashes CtsGraphicsTestCases]', 1), ('[android.graphics.cts.PaintTest testUnderlinePosition_notCrashes CtsGraphicsTestCases]', 1), ('[android.graphics.cts.PaintTest testUnderlineThickness_notCrashes CtsGraphicsTestCases]', 1), ('[android.mediav2.cts.CodecDecoderPauseTest testPause CtsMediaV2TestCases]', 1), ('[android.widget.cts.SimpleAdapterTest testGetView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleAdapterTest testGetDropDownView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleAdapterTest testAccessViewBinder CtsWidgetTestCases]', 1), ('[test.java.com.android.queryable.queries.UserHandleQueryHelperTest matches_isEqualTo_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.UserHandleQueryHelperTest matches_isEqualTo_doesNotMeetRestriction_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.UserHandleQueryHelperTest isFalse None]', 1), ('[android.server.wm.ActivityLauncher currentTimeMillis None]', 1), ('[android.scopedstorage.cts.host.ScopedStorageHostTest testWallpaperApisReadExternalStorage None]', 1), ('[android.scopedstorage.cts.host.ScopedStorageHostTest testNoIsolatedStorageInstrumentationFlag None]', 1), ('[test.java.com.android.queryable.queries.PersistableBundleQueryHelperTest isTrue None]', 1), ('[test.java.com.android.queryable.queries.PersistableBundleQueryHelperTest matches_restrictionOnOneKey_restrictionIsMet_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.PersistableBundleQueryHelperTest matches_restrictionOnOneKey_restrictionIsNotMet_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.PersistableBundleQueryHelperTest matches_restrictionOnMultipleKeys_oneRestrictionIsNotMet_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.PersistableBundleQueryHelperTest matches_restrictionOnNonExistingKey_returnsFalse None]', 1), ('[android.net.wifi.passpoint.cts.HomeSpTest testAnyOis CtsWifiTestCases]', 1), ('[android.cts.backup.BackupEligibilityHostSideTest testAdbBackup_onForDebuggableApp CtsBackupHostTestCases]', 1), ('[android.autofillservice.cts.saveui.OptionalSaveActivityTest testNoAutofillSaveRequiredOnly CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.saveui.OptionalSaveActivityTest testNoAutofillSecondRequiredFieldMissing CtsAutoFillServiceTestCases]', 1), ('[android.edi.cts.DynamicPartitionsDeviceInfo isEmpty CtsEdiHostTestCases]', 1), ('[android.widget.cts.VideoViewTest testPlayVideo CtsWidgetTestCases]', 1), ('[android.widget.cts.VideoViewTest testAudioAttributes CtsWidgetTestCases]', 1), ('[android.widget.cts.VideoViewTest testSetOnErrorListener CtsWidgetTestCases]', 1), ('[android.widget.cts.VideoViewTest testGetBufferPercentage CtsWidgetTestCases]', 1), ('[android.autofillservice.cts.dropdown.LoginActivityTest testAutofillCallbacks CtsAutoFillServiceTestCases]', 1), ('[android.server.wm.PinnedStackTests testStopBeforeMultiWindowCallbacksOnDismiss CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.PinnedStackTests testFinishPipActivityWithTaskOverlay CtsWindowManagerDeviceTestCases]', 1), ('[test.java.com.android.bedstead.testapp.TestAppActivitiesTest TestApis None]', 1), ('[test.java.com.android.bedstead.testapp.TestAppActivitiesTest isNotNull None]', 1), ('[android.hardware.cts.SensorIntegrationTests testSensorsMovingRates CtsSensorTestCases]', 1), ('[android.view.cts.View_FocusHandlingTest testSizeHandling CtsViewTestCases]', 1), ('[android.view.cts.View_FocusHandlingTest testEnabledHandling CtsViewTestCases]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpGetsDowngradedWhenBgPermIsNotRequestedAnymore CtsPermissionTestCases]', 1), ('[main.java.com.android.bedstead.nene.users.UserReference permissions None]', 1), ('[android.app.cts.DisplayTest testRotation CtsAppTestCases]', 1), ('[com.android.cts.delegate.SecurityLoggingDelegateTest testGenerateLogs None]', 1), ('[android.hardware.cts.SensorManagerStaticTest testGetAngleChange CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorManagerStaticTest testGetInclination CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorManagerStaticTest testGetOrientation CtsSensorTestCases]', 1), ('[android.hardware.cts.SensorManagerStaticTest testGetRotationMatrix CtsSensorTestCases]', 1), ('[android.text.method.cts.DialerKeyListenerTest testLookup CtsTextTestCases]', 1), ('[android.display.cts.DisplayTest finish CtsDisplayTestCases]', 1), ('[android.display.cts.DisplayTest testModeSwitchOnPrimaryDisplayWithRestart CtsDisplayTestCases]', 1), ('[android.view.cts.input.InputDeviceSensorManagerTest testDynamicSensorAPIs CtsViewTestCases]', 1), ('[android.telephonyprovider.cts.SmsTest testInsertEmoji_andVerify CtsTelephonyProviderTestCases]', 1), ('[com.android.cts.deviceadmin.DeviceAdminTest testPasswordHistoryLength None]', 1), ('[android.media.cts.MediaScannerTest testMediaScanner CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testCanonicalize CtsMediaTestCases]', 1), ('[android.media.cts.MediaScannerTest testEncodingDetection CtsMediaTestCases]', 1), ('[android.fragment.cts.FragmentLifecycleTest isAdded CtsFragmentTestCases]', 1), ('[android.fragment.cts.FragmentLifecycleTest fragmentDestroyedOnFinish CtsFragmentTestCases]', 1), ('[android.telecom.cts.ExtendedInCallServiceTest testCanAddCall_CannotAddIfTooManyCalls CtsTelecomTestCases]', 1), ('[com.android.cts.verifier.camera.bokeh.CameraBokehActivity setPassFailButtonClickListeners None]', 1), ('[android.telecom.cts.BaseTelecomTestWithMockServices disableCarMode CtsTelecomTestCases]', 1), ('[android.telephony.embms.cts.MbmsDownloadSessionTest testClose CtsTelephonyTestCases]', 1), ('[android.hardware.camera2.cts.helpers.StaticMetadat getCharacteristics None]', 1), ('[com.android.cts.verifier.IntentDrivenTestActivity setPassFailButtonClickListeners None]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerateHonorsRequestedAuthorizations CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_LegacySpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_LegacySpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_AsCustomAsPossibleStrongbox CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_AsCustomAsPossibleStrongbox CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_UsableForTLSPeerAuth CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_UsableForTLSPeerAuth CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_IndCpaEnforced CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_IndCpaEnforced CtsKeystoreTestCases]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testCreateIme1 None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testSwitchIme1ToIme2 None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testSwitchInputMethod None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testSwitchToNextInputMethod None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest TestHelper None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testInputUnbindsOnImeStopped None]', 1), ('[android.inputmethodservice.cts.devicetest.InputMethodServiceDeviceTest testInputUnbindsOnAppStopped None]', 1), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted CtsSecurityTestCases]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_AddRestrictionSet None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_RemoveRestrictionSet None]', 1), ('[android.mediapc.cts.EncoderInitializationLatencyTest isRPerfClass CtsMediaPerformanceClassTestCases]', 1), ('[android.mediapc.cts.EncoderInitializationLatencyTest testInitializationLatency CtsMediaPerformanceClassTestCases]', 1), ('[com.android.cts.devicepolicy.BaseDeviceOwnerTest isHeadlessSystemUserMode CtsDevicePolicyManagerTestCases]', 1), ('[com.android.cts.verifier.managedprovisioning.DisallowAppsControlActivity DisallowAppsControlActivity None]', 1), ('[android.hardware.camera2.cts.testcases.Camera2SurfaceViewTestCase isInstantApp CtsCameraTestCases]', 1), ('[android.print.cts.PrintJobTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.content.cts.ContentResolverSyncTestCase isDone CtsContentTestCases]', 1), ('[android.media.cts.AudioPlaybackConfigurationTest testCallbackMediaPlayerHandler CtsMediaTestCases]', 1), ('[android.media.cts.AudioPlaybackConfigurationTest testCallbackMediaPlayerRelease CtsMediaTestCases]', 1), ('[android.media.cts.AudioPlaybackConfigurationTest testGetterSoundPool CtsMediaTestCases]', 1), ('[android.media.cts.AudioPlaybackConfigurationTest testGetAudioDeviceInfoMediaPlayerStart CtsMediaTestCases]', 1), ('[android.telephony.cts.SubscriptionManagerTest testGetActiveDataSubscriptionId CtsTelephonyTestCases]', 1), ('[android.telephony.cts.SubscriptionManagerTest isSupported CtsTelephonyTestCases]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSetAndGetD2DSharingContacts CtsTelephonyTestCases]', 1), ('[com.android.compatibility.common.util.StateChangerRuleTest testDontSetIfSameValueOnSuccess None]', 1), ('[com.android.compatibility.common.util.StateChangerRuleTest testDontSetIfSameValueOnFailure None]', 1), ('[android.transition.cts.ChangeImageTransformTest resetListener CtsTransitionTestCases]', 1), ('[android.transition.cts.ChangeImageTransformTest testNullAnimatorKeepsImagePadding CtsTransitionTestCases]', 1), ('[android.hardware.camera2.cts.HeifWriterTest testHeif CtsCameraTestCases]', 1), ('[android.content.pm.cts.shortcuthost.BaseShortcutManagerHostTest isMultiUserSupported CtsShortcutHostTestCases]', 1), ('[android.print.cts.PrintDocumentAdapterContractTest waitForAdapterFinishCallbackCalled CtsPrintTestCases]', 1), ('[android.telecom.cts.EmergencyCallTests testStartEmergencyCall CtsTelecomTestCases]', 1), ('[com.android.cts.customizationapp.CustomizationTest testSetWallpaper_disallowed None]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderMediaOverlay CtsTvTestCases]', 1), ('[android.media.tv.cts.TvViewTest testSetZOrderOnTop CtsTvTestCases]', 1), ('[android.app.stubs.LocalActivityManagerTestHelper LocalActivityManagerTestHelper None]', 1), ('[android.security.cts.CVE_2021_0481.DeviceTest testUserPhotoSetUp None]', 1), ('[android.apex.cts.ApexTest testMountNamespaces CtsApexTestCases]', 1), ('[android.cts.statsdatom.lib.AtomTestUtils getReportMetricListData CtsStatsdAtomHostTestCases]', 1), ('[android.contentcaptureservice.cts.LoginActivityTest testUserDataRemovalRequest_manyIds CtsContentCaptureServiceTestCases]', 1), ('[android.database.sqlite.cts.SQLiteQueryBuilderTest testStrictQuery CtsDatabaseTestCases]', 1), ('[android.database.sqlite.cts.SQLiteQueryBuilderTest testStrictUpdate CtsDatabaseTestCases]', 1), ('[android.database.sqlite.cts.SQLiteQueryBuilderTest testStrictDelete CtsDatabaseTestCases]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery CtsProviderTestCases]', 1), ('[android.graphics.cts.ImageDecoderTest exists CtsGraphicsTestCases]', 1), ('[android.graphics.cts.ImageDecoderTest testResizeTransparency CtsGraphicsTestCases]', 1), ('[android.telephony.ims.cts.TestImsService TestImsRegistration CtsTelephonyTestCases]', 1), ('[com.google.android.cts.settings.PrivacyDeviceOwnerTest isHeadlessSystemUserMode CtsSettingsHostTestCases]', 1), ('[com.google.android.cts.settings.PrivacyDeviceOwnerTest testNonDeviceOwnerWithoutInfo CtsSettingsHostTestCases]', 1), ('[android.server.biometrics.BiometricSecurityTests testBiometricStrengthUpgraded_ConvenienceSensor CtsBiometricsTestCases]', 1), ('[android.security.cts.PerfEventParanoidTest testPerfEventRestricted CtsSecurityHostTestCases]', 1), ('[android.widget.cts.TextViewReceiveContentTest TextViewOnReceiveContentListener CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewReceiveContentTest testDragAndDrop_nonEditableTextViewChangedToEditable_actionDragLocation CtsWidgetTestCases]', 1), ('[android.widget.cts.TextViewReceiveContentTest testDragAndDrop_nonEditableTextViewChangedToEditable_actionDrop CtsWidgetTestCases]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest registerServiceWrappers CtsWifiTestCases]', 1), ('[android.location.cts.gnss.GnssMeasurementsConstellationTest testGnssMultiConstellationSupported CtsLocationGnssTestCases]', 1), ('[android.view.cts.PointerCaptureTest testRequestAndReleaseWorkOnAnyView CtsViewTestCases]', 1), ('[com.android.compatibility.common.util.WifiConfigCreator isWifiEnabled None]', 1), ('[android.telephony.cts.SmsManagerTest testSendAndReceiveMessages CtsTelephonyTestCases]', 1), ('[android.hardware.camera2.cts.PerformanceTest testSingleCapture CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.PerformanceTest testReprocessingLatency CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.PerformanceTest testHighQualityReprocessingLatency CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.PerformanceTest testReprocessingCaptureStall CtsCameraTestCases]', 1), ('[com.android.cts.storageapp.StorageTest testVerifySpaceApi None]', 1), ('[com.android.cts.storageapp.StorageTest testExternalStorageIsolatedWrite None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.CheckNoOwnerRestrictionsTest testNoOwnerRestrictions None]', 1), ('[android.app.cts.ApplyOverrideConfigurationTest ApplyOverrideConfigurationTest CtsAndroidAppTestCases]', 1), ('[android.fragment.cts.TransitionFragment TrackingVisibility CtsFragmentTestCases]', 1), ('[android.car.cts.CarSensorManagerTest testMustSupportParkingBrake CtsCarTestCases]', 1), ('[android.server.biometrics.BiometricServiceTests testAuthenticatorIdsInvalidated CtsBiometricsTestCases]', 1), ('[android.server.biometrics.BiometricServiceTests testBiometricsRemovedWhenCredentialRemoved CtsBiometricsTestCases]', 1), ('[android.server.biometrics.fingerprint.FingerprintServiceTest adoptShellPermissionIdentity CtsBiometricsTestCases]', 1), ('[android.cts.backup.BackupPreparer isBackupActiveForSysytemUser CtsBackupHostTestCases]', 1), ('[com.android.cts.appsearch.external.app.GlobalSearchSessionCtsTestBase testGlobalQuery_projectionEmptyTwoInstances CtsAppSearchTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest LevelListDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testDraw CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testGetPadding CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testSetAlpha CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testSetColorFilter CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testInvalidateDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testScheduleDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest testUnscheduleDrawable CtsGraphicsTestCases]', 1), ('[android.display.cts.BrightnessTest testNoTrackingForManualBrightness CtsDisplayTestCases]', 1), ('[com.android.cts.intent.sender.ContentTest testCanObserveAcrossProfiles None]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests dropShellPermissionIdentityAfterTest CtsDeviceConfigTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigWithoutPermissions CtsDeviceConfigTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigWithWritePermission CtsDeviceConfigTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigWithReadPermission CtsDeviceConfigTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigWithAllPermissions CtsDeviceConfigTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest getApexPackageList CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest testApexIncludePubKey CtsAppSecurityHostTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testKeys CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics CtsCameraTestCases]', 1), ('[com.android.cts.verifierusbcompanion.AccessoryTestCompanion runTest None]', 1), ('[android.media.cts.VideoCodecTestBase isEncoder CtsMediaTestCases]', 1), ('[android.content.res.cts.ResourcesTest testUpdateConfiguration_copyLocales CtsContentTestCases]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testOnStartInputCalledOnceIme CtsInputMethodTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testProcQtaguidStatsSane CtsPermissionTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testMntSecureSane CtsPermissionTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testRunAsHasCorrectCapabilities CtsPermissionTestCases]', 1), ('[android.provider.cts.SettingsPanelTest isNull CtsProviderTestCases]', 1), ('[android.text.cts.TextUtilsTest getEllipsis CtsTextTestCases]', 1), ('[android.text.cts.TextUtilsTest testGetOffsetAfter CtsTextTestCases]', 1), ('[android.text.cts.TextUtilsTest testGetOffsetBefore CtsTextTestCases]', 1), ('[android.text.cts.TextUtilsTest testIsDigitsOnly CtsTextTestCases]', 1), ('[android.text.cts.TextUtilsTest testGetLayoutDirectionFromLocale CtsTextTestCases]', 1), ('[android.print.cts.PrintServicesTest isEmpty CtsPrintTestCases]', 1), ('[android.print.cts.PrintServicesTest displayPrinterList CtsPrintTestCases]', 1), ('[android.print.cts.PrintServicesTest waitForPrinterDiscoverySessionCreateCallbackCalled CtsPrintTestCases]', 1), ('[android.widget.cts.ProgressBarTest testAccessIndeterminateDrawable CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testAccessProgressDrawable CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testInvalidateDrawable CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testProgressTint CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testProgressTintBlendMode CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testIndeterminateTint CtsWidgetTestCases]', 1), ('[android.widget.cts.ProgressBarTest testIndeterminateTintBlendMode CtsWidgetTestCases]', 1), ('[android.transition.cts.VisibilityTest testMode CtsTransitionTestCases]', 1), ('[android.transition.cts.VisibilityTest testOnAppear CtsTransitionTestCases]', 1), ('[android.transition.cts.VisibilityTest testOnDisppear CtsTransitionTestCases]', 1), ('[android.hardware.camera2.cts.StillCaptureTest testFocalLengths CtsCameraTestCases]', 1), ('[android.cts.statsdatom.alarm.AlarmStatsTests testAlarmScheduled CtsStatsdAtomHostTestCases]', 1), ('[android.transition.cts.ActivityTransitionTest TrackingVisibility CtsTransitionTestCases]', 1), ('[android.transition.cts.ActivityTransitionTest TrackingVisibilityWithAnimator CtsTransitionTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityMagnificationTest testListener CtsAccessibilityServiceTestCases]', 1), ('[android.text.style.cts.TextAppearanceSpanTest testRestrictContext CtsTextTestCases]', 1), ('[android.text.method.cts.LinkMovementMethodTest testOnKeyDown CtsTextTestCases]', 1), ('[android.text.method.cts.LinkMovementMethodTest testOnTouchEvent CtsTextTestCases]', 1), ('[com.android.cts.verifier.managedprovisioning.CommandReceiverActivity isKeyguardSecure None]', 1), ('[android.media.cts.RoutingSessionInfoTest testBuilderConstructorWithEmptyClientPackageName CtsMediaTestCases]', 1), ('[android.media.cts.RoutingSessionInfoTest testBuilderBuildWithEmptySelectedRoutesThrowsIAE CtsMediaTestCases]', 1), ('[android.permission2.cts.RestrictedStoragePermissionSharedUidTest getTestAppCombinations CtsPermission2TestCases]', 1), ('[android.permission2.cts.RestrictedStoragePermissionSharedUidTest uninstallAllTestPackages CtsPermission2TestCases]', 1), ('[com.android.cts.deviceandprofileowner.PrintingPolicyTest testPrintingPolicy None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDevicePolicyApn CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testListen CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetImeiForSlot CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetRadioPowerState CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetCarrierDataEnabled CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testRebootRadio CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAidForAppType CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetIsimDomain CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoRegisteredPlmn CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoIsRoaming CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoGetRoamingType CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testPreferredOpportunisticDataSubscription CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAllCellInfo CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testRegisterTelephonyCallback CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testCheckCarrierPrivilegesForPackageAnyPhone CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetSettings CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState CtsTelephonyTestCases]', 1), ('[android.webkit.cts.CtsTestServer getAcceptedIssuers None]', 1), ('[android.signature.cts.tests.ApiPresenceCheckerTest TestClassesProvider None]', 1), ('[android.scopedstorage.cts.host.ScopedStorageCoreHostTest testManageExternalStorageCanCreateFilesAnywhere None]', 1), ('[android.os.cts.SeccompTest testKernelPrecedenceTests None]', 1), ('[android.text.cts.LoginFilterTest testFilter CtsTextTestCases]', 1), ('[android.widget.cts.ToggleButtonTest testDrawableStateChanged CtsWidgetTestCases]', 1), ('[android.print.cts.PrinterInfoTest createFirstMockPrinterDiscoverySessionCallbacks CtsPrintTestCases]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid CtsMediaV2TestCases]', 1), ('[android.app.cts.AlertDialog_BuilderTest testSetOnItemSelectedListener CtsAppTestCases]', 1), ('[android.security.cts.AdbUtils emptyList CtsSecurityBulletinHostTestCases]', 1), ('[android.view.cts.util.BitmapDumper listFiles CtsViewTestCases]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableCorrelationOutputs CtsLocationPrivilegedTestCases]', 1), ('[com.android.cts.verifier.audio.USBAudioPeripheralActivity OnBtnClickListener None]', 1), ('[android.content.pm.cts.PackageManagerShellCommandIncrementalTest testBug183952694Fixed CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerShellCommandIncrementalTest testInstallWithMissingBlocks CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerShellCommandIncrementalTest testInstallWithStreamingUnreliableConnection CtsContentTestCases]', 1), ('[android.content.pm.cts.PackageManagerShellCommandIncrementalTest testInstallSysTraceNoReadlogs CtsContentTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest dismiss CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testSetOnDismissListener CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testItemClicks CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testAccessSelection CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testNoDefaultDismissalWithBackButton CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testListSelectionWithDPad CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testListSelectionWithDPadEnter CtsWidgetTestCases]', 1), ('[android.widget.cts.ListPopupWindowTest testCreateOnDragListener CtsWidgetTestCases]', 1), ('[com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester isEmpty None]', 1), ('[com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester testOnOperationSafetyStateChanged None]', 1), ('[com.android.cts.verifier.p2p.testcase.ConnectReqTestCase disconnect None]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForWideColorDisplay CtsOpenGLTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest TestName CtsMusicRecognitionTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testOnRecognitionFailed CtsMusicRecognitionTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testOnRecognitionSucceeded CtsMusicRecognitionTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testDoesntBindToForeignService CtsMusicRecognitionTestCases]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testRecordAudioOpsAreTracked CtsMusicRecognitionTestCases]', 1), ('[android.telephony.cts.NetworkRegistrationInfoTest testGetEmergencyServices CtsTelephonyTestCases]', 1), ('[android.car.cts.CarPropertyConfigTest testGetMinAndMaxValue CtsCarTestCases]', 1), ('[com.android.cts.verifier.sensors.sixdof.Utils.Path.Path isUserGenerated None]', 1), ('[android.view.cts.ViewStubTest testDraw CtsViewTestCases]', 1), ('[android.classloaders.cts.BaseInstallMultiple allowTest CtsClassloaderSplitsHostTestCases]', 1), ('[android.translation.cts.UiTranslationManagerTest testUiTranslation_CustomViewTranslationCallback CtsTranslationTestCases]', 1), ('[android.translation.cts.UiTranslationManagerTest testNonIMEUiTranslationStateCallback CtsTranslationTestCases]', 1), ('[android.translation.cts.UiTranslationManagerTest testVirtualViewUiTranslation CtsTranslationTestCases]', 1), ('[com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest disableService None]', 1), ('[com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest testDisallowContentSuggestions_allowed None]', 1), ('[android.app.time.cts.TimeManagerTest testLocationManagerAffectsCapabilities CtsTimeTestCases]', 1), ('[android.widget.cts.SimpleCursorAdapterTest testBindView CtsWidgetTestCases]', 1), ('[android.widget.cts.SimpleCursorAdapterTest testAccessViewBinder CtsWidgetTestCases]', 1), ('[com.android.compatibility.common.util.ReadElf isDynamic None]', 1), ('[android.server.wm.WindowUntrustedTouchTest TestName CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.WindowUntrustedTouchTest testWhenOneSelfCustomToastWindowOneSelfActivityWindowAndOneSawBelowThreshold_allowsTouch CtsWindowManagerDeviceTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerMultiLauncherTest testPinShortcuts CtsShortcutManagerTestCases]', 1), ('[android.webkit.cts.WebViewTest testAccessHttpAuthUsernamePassword CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testWebViewDatabaseAccessHttpAuthUsernamePassword CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testLoadDataWithBaseUrl_unencodedContentHttpBaseUrl CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testFindNext CtsWebkitTestCases]', 1), ('[android.webkit.cts.WebViewTest testGetContentHeight CtsWebkitTestCases]', 1), ('[test.java.com.android.queryable.queries.BooleanQueryHelperTest isTrue None]', 1), ('[android.media.cts.EncodeVirtualDisplayTest testEncodeVirtualDisplay CtsMediaTestCases]', 1), ('[android.widget.cts.AbsListViewTest isWatch CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testFling CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testSelectorOnScreen CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testCheckedItemsUnderMultipleChoiceMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testCheckedItemsUnderMultipleModalChoiceMode CtsWidgetTestCases]', 1), ('[android.widget.cts.AbsListViewTest testMultiSelectionWithLongPressAndTaps CtsWidgetTestCases]', 1), ('[dot.junit.AllTests TestSuite None]', 1), ('[com.android.compatibility.common.util.StateKeeperRuleTest testDoNotRestoreWhenNotChanged None]', 1), ('[com.android.compatibility.common.util.StateKeeperRuleTest testDoNotRestoreOnFailure None]', 1), ('[android.view.cts.ViewGroupTest testDispatchInsets_affectsChildren CtsViewTestCases]', 1), ('[android.view.cts.ViewGroupTest testDispatchInsets_doesntAffectSiblings CtsViewTestCases]', 1), ('[android.view.cts.ViewGroupTest testDispatchInsets_doesntAffectParentSiblings CtsViewTestCases]', 1), ('[android.view.cts.ViewGroupTest testDispatchInsets_consumeStopsDispatch CtsViewTestCases]', 1), ('[com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule getDisplayName CtsDevicePolicyManagerTestCases]', 1), ('[android.app.notification.legacy.cts.LegacyNotificationManagerTest testSuspendedPackageSendNotification CtsLegacyNotification27TestCases]', 1), ('[com.android.tests.stagedinstall.StagedInstallTest testIsStagedSessionActive None]', 1), ('[android.provider.cts.contacts.ContactsContract_CommonDataKinds_PhoneTest testGetTypeLabel CtsContactsProviderTestCases]', 1), ('[java.android.signature.cts.api.HiddenApiTest testSignatureFieldsThroughJni None]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testInvalidateDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testScheduleDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testUnscheduleDrawable CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testDraw CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testSetDither CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testSetAlpha CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testSetColorFilter CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testSetBounds CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testGetIntrinsicWidth CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.LayerDrawableTest testGetIntrinsicHeight CtsGraphicsTestCases]', 1), ('[android.mediav2.cts.DecoderColorAspectsTest testColorAspects CtsMediaV2TestCases]', 1), ('[com.android.cts.delegate.GeneralDelegateTest testGetsExpectedDelegationScopes None]', 1), ('[android.webkit.cts.WebViewSyncLoader isUiThread None]', 1), ('[android.app.cts.AlertDialog_BuilderCursorTest AlertDialog_BuilderCursorTest CtsAppTestCases]', 1), ('[android.print.cts.PrinterCapabilitiesChangeTest currentTimeMillis CtsPrintTestCases]', 1), ('[android.car.cts.app.PowerPolicyTestClient clearTestcase None]', 1), ('[com.android.cts.verifier.sensors.RVCVXCheckAnalyzer exists None]', 1), ('[android.security.cts.ServicePermissionsTest testDumpProtected CtsSecurityTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testDataStoresHierarchy CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutStringWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testInitialValueIsFromDataStoreOnPreference CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testInitialValueIsFromDataStoreOnPreferenceManager CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutStringSetWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutIntWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutLongWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutFloatWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.preference.cts.PreferenceDataStoreTest testPutBooleanWithDataStoreOnMgr CtsPreferenceTestCases]', 1), ('[android.view.cts.input.InputDeviceMultiDeviceKeyEventTest testReceivesKeyRepeatOnTwoKeysFromTwoDevices CtsViewTestCases]', 1), ('[android.view.cts.input.InputDeviceMultiDeviceKeyEventTest testKeyRepeatStopsAfterRepeatingKeyUp CtsViewTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testExpeditedJobDeferredAfterTimeout_DozeAndBatterySaver CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobStartedWhenUnrestricted CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedEJStartedWhenUnrestricted CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_ParoleSession CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_CorrectParoleWhileCharging CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_DeferredUntilFreeResources CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_NoRequiredNetwork CtsJobSchedulerTestCases]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[android.server.wm.LayoutTests testLayoutAfterRemovingFocus CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.verifier.audio.AudioFrequencyActivity testMaxLevel None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28CellInfoUpdate CtsTelephonyTestCases]', 1), ('[android.cts.install.lib.host.InstallUtilsHost isNotNull None]', 1), ('[android.provider.cts.contacts.ContactsContract_DataTest testDataUpdate_updatesContactLastUpdatedTimestamp CtsContactsProviderTestCases]', 1), ('[android.autofillservice.cts.testcore.CtsAugmentedAutofillService onDisconnected CtsAutoFillServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledThenReEnabledByDeviceConfig CtsContentCaptureServiceTestCases]', 1), ('[android.scopedstorage.cts.host.PreserveLegacyStorageHostTest testPreserveLegacy None]', 1), ('[com.android.cts.verifier.sensors.sixdof.Utils.PoseProvider.AndroidPoseProvider SensorEventListener None]', 1), ('[android.database.cts.DatabaseCursorTest testManyRowsLong CtsDatabaseTestCases]', 1), ('[android.database.cts.DatabaseCursorTest testManyRowsTxt CtsDatabaseTestCases]', 1), ('[android.database.cts.DatabaseCursorTest testManyRowsTxtLong CtsDatabaseTestCases]', 1), ('[com.android.cts.deviceandprofileowner.CustomizationRestrictionsTest testDisallowSetWallpaper_allowed None]', 1), ('[android.view.cts.AttachedSurfaceControlSyncTest TestName CtsViewTestCases]', 1), ('[android.server.wm.WindowInsetsAnimationSynchronicityTests testControl_rendersSynchronouslyBetweenImeWindowAndAppContent CtsWindowManagerDeviceTestCases]', 1), ('[android.scopedstorage.cts.lib.TestUtils exists None]', 1), ('[android.net.cts.legacy.api22.ConnectivityManagerLegacyTest assertTelephonyInService CtsNetTestCases]', 1), ('[android.telecom.cts.DefaultPhoneAccountTest testGetDefaultOutgoingPhoneAccountOneOrMany CtsTelecomTestCases]', 1), ('[com.android.cts.externalstorageapp.ExternalStorageTest testAllWalkingUpTreeNoAccess None]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testGetAnchorForDropDownForAutoCompleteTextView_returnsTextViewNode CtsAccessibilityServiceTestCases]', 1), ('[android.hardware.camera2.cts.FlashlightTest testSetTorchModeOnOff CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.FlashlightTest testTorchCallback CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.FlashlightTest testCameraDeviceOpenAfterTorchOn CtsCameraTestCases]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest CtsMediaTestCases]', 1), ('[android.media.cts.MediaRecorderTest testRecorderPauseResumeOnTimeLapse CtsMediaTestCases]', 1), ('[android.media.cts.MediaRecorderTest testOnErrorListener CtsMediaTestCases]', 1), ('[android.location.cts.fine.ScanningSettingsTest testBleScanningSettings CtsLocationFineTestCases]', 1), ('[android.graphics.pdf.cts.PdfRendererTest testPrintScalePDF16None CtsPdfTestCases]', 1), ('[android.content.cts.DeferSyncTest disallowSyncAdapterRunInBackgroundAndDataInBackground CtsContentTestCases]', 1), ('[android.content.cts.DeferSyncTest deferSyncAndReportIsReady CtsContentTestCases]', 1), ('[android.content.cts.DeferSyncTest deferSyncAndReportIsReadyAlwaysSyncable CtsContentTestCases]', 1), ('[com.android.cts.verifier.bluetooth.BluetoothChatService listenUsingL2capChannel None]', 1), ('[android.suspendapps.cts.DistractingPackageTest isEmpty CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DistractingPackageTest testShouldHideFromSuggestions CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DistractingPackageTest testCannotRestrictWhenUninstallBlocked CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DistractingPackageTest testCannotRestrictUnderDisallowAppsControl CtsSuspendAppsTestCases]', 1), ('[android.suspendapps.cts.DistractingPackageTest testCannotRestrictUnderDisallowUninstallApps CtsSuspendAppsTestCases]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testAddUserRestrictionDisallowConfigDateTime_onParent None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testHasUserRestrictionDisallowConfigDateTime None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testUserRestrictionDisallowConfigDateTimeIsNotPersisted None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testAddUserRestrictionDisallowAddUser_onParent None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testHasUserRestrictionDisallowAddUser None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testClearUserRestrictionDisallowAddUser None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testAddUserRestrictionCameraDisabled_onParent None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testRemoveUserRestrictionCameraEnabled_onParent None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testCanOpenCamera None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerDeviceUserRestriction_onParent None]', 1), ('[android.server.wm.DragDropTest testNoExtraEvents CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.DragDropTest testAcceptingGroupInTheMiddle CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.TestJournalProvider testSomething None]', 1), ('[android.os.cts.LocaleListTest testDescribeContents_doesNotThrowException None]', 1), ('[com.android.cts.verifier.sensors.sixdof.Activities.TestActivity finish None]', 1), ('[android.widget.cts.ToastTest testShowFailure CtsWidgetTestCases]', 1), ('[android.widget.cts.MultiAutoCompleteTextViewTest testPerformValidation CtsWidgetTestCases]', 1), ('[android.webkit.cts.WebViewZoomTest WebViewZoomTest CtsWebkitTestCases]', 1), ('[android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testRepeatingAlarmBlocked CtsAlarmManagerTestCases]', 1), ('[android.hardware.camera2.cts.helpers.AssertHelpers AssertHelpers None]', 1), ('[com.android.cts.verifier.sensors.MagneticFieldMeasurementTestActivity MagneticFieldMeasurementTestActivity None]', 1), ('[android.text.style.cts.SuggestionSpanTest testGetFlags CtsTextTestCases]', 1), ('[android.text.style.cts.SuggestionSpanTest testEquals_returnsFalseIfCreationTimeIsNotSame CtsTextTestCases]', 1), ('[test.java.com.android.queryable.queries.StringQueryHelperTest isTrue None]', 1), ('[test.java.com.android.queryable.queries.StringQueryHelperTest matches_isEqualTo_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.StringQueryHelperTest matches_isEqualTo_doesNotMeetRestriction_returnsFalse None]', 1), ('[android.appsecurity.cts.keyrotationtest.service.SignatureQueryService isPresent None]', 1), ('[android.mediav2.cts.CodecTestBase isEmpty CtsMediaV2TestCases]', 1), ('[android.hardware.camera2.cts.rs.BlockingInputAllocation receiveLatestAvailableBuffers CtsCameraTestCases]', 1), ('[android.view.inputmethod.cts.KeyboardTest testKeyOnPressedAndReleased CtsInputMethodTestCases]', 1), ('[android.security.cts.KernelSettingsTest testMmapMinAddr CtsSecurityTestCases]', 1), ('[com.android.cts.userapptest.ClientTest testQueryFull None]', 1), ('[android.permission2.cts.RestrictedStoragePermissionTest testCannotControlStorageWhitelistPostInstall1 CtsPermission2TestCases]', 1), ('[android.permission2.cts.RestrictedStoragePermissionTest testCannotControlStorageWhitelistPostInstall2 CtsPermission2TestCases]', 1), ('[android.permission2.cts.RestrictedStoragePermissionTest restrictedWritePermDoesNotImplyIsolatedStorageAccess CtsPermission2TestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease CtsBlobStoreTestCases]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease CtsBlobStoreTestCases]', 1), ('[com.android.cts.deviceandprofileowner.SecurityLoggingTest testVerifyGeneratedLogs None]', 1), ('[com.android.cts.deviceandprofileowner.SecurityLoggingTest testGenerateLogs None]', 1), ('[com.android.cts.deviceandprofileowner.SecurityLoggingTest testSetDelegateScope_noDelegation None]', 1), ('[main.java.com.android.bedstead.nene.packages.PackageReference permissions None]', 1), ('[android.telephony.cts.BatteryStatsManagerTest testGetCellularBatteryStats CtsTelephonyTestCases]', 1), ('[android.os.cts.BuildTest testBuildConstants None]', 1), ('[android.os.cts.BuildTest testMediaPerformanceClass None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testSecondaryWalkingUpTreeReadWrite None]', 1), ('[com.android.cts.deviceandprofileowner.RequiredStrongAuthTimeoutTest testSetRequiredStrongAuthTimeout None]', 1), ('[android.searchuiservice.cts.SearchUiManagerTest testNotifyEvent CtsSearchUiServiceTestCases]', 1), ('[android.searchuiservice.cts.SearchUiManagerTest testQuery_realCallback CtsSearchUiServiceTestCases]', 1), ('[android.searchuiservice.cts.SearchUiManagerTest testQuery_params CtsSearchUiServiceTestCases]', 1), ('[test.java.com.android.queryable.queries.EnumQueryHelperTest isTrue None]', 1), ('[android.media.cts.SurfaceEncodeTimestampTest testCreateInputSurfaceSuspendedResumeWithTime CtsMediaTestCases]', 1), ('[android.media.cts.SurfaceEncodeTimestampTest testSuspendedResumeWithTime CtsMediaTestCases]', 1), ('[android.text.cts.StaticLayoutLineBreakingTest testZeroWidthCharacters CtsTextTestCases]', 1), ('[android.text.cts.StaticLayoutLineBreakingTest testWithOneSpan CtsTextTestCases]', 1), ('[android.text.cts.StaticLayoutLineBreakingTest testWithTwoSpans CtsTextTestCases]', 1), ('[android.os.cts.DebugTest testDumpService None]', 1), ('[android.server.wm.AppConfigurationTests getDefaultDisplay CtsWindowManagerDeviceTestCases]', 1), ('[android.uirendering.cts.testclasses.BitmapDrawableTest testPreloadDensity CtsUiRenderingTestCases]', 1), ('[com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck testApkPackageNames None]', 1), ('[android.location.cts.gnss.asn1.base.Asn1SequenceOf isConstructed CtsLocationGnssTestCases]', 1), ('[android.hardware.cts.helpers.TestSensorEventListener TestSensorEventListener CtsSensorTestCases]', 1), ('[android.camera.cts.api31test.SPerfClassTest getCameraIdList CtsCameraApi31TestCases]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testAppCannotStartBgActivityAfterHomeButton CtsActivityManagerBackgroundActivityTestCases]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testClearDisallowPrivateDnsConfigurationRestriction None]', 1), ('[com.android.cts.deviceowner.PrivateDnsPolicyTest testCanSetModeDespiteUserRestriction None]', 1), ('[android.keystore.cts.KeyProtectionTest testDefaults CtsKeystoreTestCases]', 1), ('[com.android.cts.install.lib.InstallUtils uptimeMillis None]', 1), ('[android.preference.cts.PreferenceActivityFlowTest TestName CtsPreferenceTestCases]', 1), ('[android.widget.cts.ListViewTest testPerformItemClick CtsWidgetTestCases]', 1), ('[android.widget.cts.ListViewTest testJumpDrawables CtsWidgetTestCases]', 1), ('[android.widget.cts.ListViewTest testAccessOverscrollHeader CtsWidgetTestCases]', 1), ('[android.widget.cts.ListViewTest testAccessOverscrollFooter CtsWidgetTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest clearAllAccountManagementDisabled None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount None]', 1), ('[com.android.cts.deviceandprofileowner.AllowedAccountManagementTest testRemoveAccount_noUserRestriction None]', 1), ('[android.cts.backup.BaseBackupHostSideTest isBackupEnabled CtsBackupHostTestCases]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithData CtsProtoTestCases]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithoutData CtsProtoTestCases]', 1), ('[android.suspendapps.cts.TestAppInterface disconnect CtsSuspendAppsTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest isHalImplemented CtsIdentityTestCases]', 1), ('[android.telecom.cts.IncomingCallTest testRingOnIncomingCall CtsTelecomTestCases]', 1), ('[android.car.cts.powerpolicy.PowerPolicyDef getDisables CtsCarHostTestCases]', 1), ('[android.hardware.cts.CameraTest testJpegExif CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraTest testPreviewPictureSizesCombination CtsCameraTestCases]', 1), ('[android.hardware.cts.CameraTest testPreviewFpsRange CtsCameraTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase executeTest None]', 1), ('[android.widget.cts.SearchViewTest testAccessQuery CtsWidgetTestCases]', 1), ('[android.widget.cts.SearchViewTest testEnterKey CtsWidgetTestCases]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackFinishToPreviousApp CtsWindowManagerDeviceTestCases]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant CtsWindowManagerDeviceTestCases]', 1), ('[android.location.cts.gnss.GnssMeasurementValuesTest testListenForGnssMeasurements CtsLocationGnssTestCases]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testReadWriteFilesInOtherAppExternalDir None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testSystemGalleryAppHasFullAccessToImages None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testDeletePendingAndTrashed_fileManagerCanDelete None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testDeletePendingAndTrashed_systemGalleryCanDeleteMedia None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testQueryOtherAppsFiles None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testSystemGalleryQueryOtherAppsFiles None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testSystemGalleryCanRenameImagesAndVideos None]', 1), ('[android.scopedstorage.cts.device.ScopedStorageDeviceTest testRenameFileNotOwned None]', 1), ('[com.android.cts.mockime.MockImeSession getCurrentInputMethodIdForTesting None]', 1), ('[com.android.cts.readexternalstorageapp.ReadExternalStorageTest testAllWalkingUpTreeReadOnly None]', 1), ('[com.android.cts.verifier.ReportExporter currentTimeMillis None]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 1), ('[android.telephony.embms.cts.MbmsDownloadReceiverTest testRequestRefreshedFileDescriptors CtsTelephonyTestCases]', 1), ('[android.server.wm.lifecycle.LifecycleTracker isEmpty CtsWindowManagerDeviceTestCases]', 1), ('[android.graphics.drawable.cts.TransitionDrawableTest testStartTransition CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.TransitionDrawableTest testResetTransition CtsGraphicsTestCases]', 1), ('[android.graphics.drawable.cts.TransitionDrawableTest testReverseTransition CtsGraphicsTestCases]', 1), ('[android.media.cts.ConnectionStatus isAvailable None]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2TwoSignersRejectsWhenOneBroken CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testKnownSignerPermGrantedWhenCurrentSignerInResource CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testKnownSignerPermCurrentSignerNotInResource CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testKnownSignerPermGrantedWhenSignerInLineageInResource CtsAppSecurityHostTestCases]', 1), ('[android.text.method.cts.MultiTapKeyListenerTest testOnSpanAdded CtsTextTestCases]', 1), ('[android.telecom.cts.CtsConnectionService isServiceRegisteredToTelecom CtsTelecomTestCases]', 1), ('[android.opengl2.cts.reference.GLGameActivity finish CtsOpenGlPerf2TestCases]', 1), ('[com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest disableService None]', 1), ('[com.android.cts.managedprofile.CrossProfileUtils testDisallowCrossProfileCopyPaste None]', 1), ('[com.android.cts.managedprofile.CrossProfileUtils testAllowCrossProfileCopyPaste None]', 1), ('[android.view.inputmethod.cts.util.LightNavigationBarVerifier getAssertionMessage CtsInputMethodTestCases]', 1), ('[android.keystore.cts.CipherTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testAndroidKeyStoreKeysHandledByAndroidKeyStoreProviderWhenDecrypting CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testEmptyPlaintextEncryptsAndDecrypts CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testEncryptsAndDecryptsInterrupted CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testEncryptsAndDecryptsUsingCipherStreams CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testEmptyPlaintextEncryptsAndDecryptsWhenUnlockedRequired CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByAndroidKeyStoreDecryptsByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByHighestPriorityProviderDecryptsByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByAndroidKeyStoreDecryptsByHighestPriorityProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenPaddingSchemeNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenPaddingSchemeNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresThatKeyNoLongerValid CtsKeystoreTestCases]', 1), ('[android.server.wm.lifecycle.ActivityLifecycleTopResumedStateTests testTopPositionNotSwitchedToPip CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.verifier.camera.intents.CameraIntentsActivity setPassFailButtonClickListeners None]', 1), ('[android.dynamicmime.testapp.assertions.AssertionsByIntentResolution isEmpty None]', 1), ('[android.provider.cts.DocumentsContractTest testRootUri CtsProviderTestCases]', 1), ('[android.provider.cts.DocumentsContractTest testRootUri_returnFalse CtsProviderTestCases]', 1), ('[android.provider.cts.DocumentsContractTest testRootsUri CtsProviderTestCases]', 1), ('[android.provider.cts.DocumentsContractTest testRootsUri_returnsFalse CtsProviderTestCases]', 1), ('[android.database.sqlite.cts.SQLiteDatabaseTest testTransaction CtsDatabaseTestCases]', 1), ('[android.database.sqlite.cts.SQLiteDatabaseTest testCustomScalarFunction_Throws CtsDatabaseTestCases]', 1), ('[android.database.sqlite.cts.SQLiteDatabaseTest testCustomAggregateFunction_Throws CtsDatabaseTestCases]', 1), ('[android.database.sqlite.cts.SQLiteDatabaseTest testDefaultLegacyAlterTableEnabled CtsDatabaseTestCases]', 1), ('[com.android.cts.verifier.sensors.sixdof.Renderer.ComplexMovementRenderer doTestSpecificRendering None]', 1), ('[android.content.pm.cts.shortcut.backup.launcher1.ShortcutManagerPostBackupTest testWithUninstall_afterAppRestore None]', 1), ('[com.android.cts.verifier.managedprovisioning.DeviceOwnerRequestingBugreportTestActivity finish None]', 1), ('[com.android.cts.verifier.notifications.ShortcutThrottlingResetActivity createTestItems None]', 1), ('[android.hdmicec.cts.targetprep.CecPortDiscoverer exists CtsHdmiCecHostTestCases]', 1), ('[android.security.cts.STKFrameworkTest testInterceptedSIMCommandsToTelephony CtsSecurityTestCases]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest isTrue None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isEqualTo_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isEqualTo_doesNotMeetRestriction_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isGreaterThan_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isGreaterThan_doesNotMeetRestriction_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isGreaterThanOrEqualTo_doesNotMeetRestriction_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isLessThan_meetsRestriction_returnsTrue None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isLessThan_doesNotMeetRestriction_returnsFalse None]', 1), ('[test.java.com.android.queryable.queries.LongQueryHelperTest matches_isLessThanOrEqualTo_doesNotMeetRestriction_returnsFalse None]', 1), ('[android.widget.cts.CalendarViewTest testMinMaxRangeRestrictionsHolo CtsWidgetTestCases]', 1), ('[android.media.cts.ExifInterfaceTest testDoNotFailOnCorruptedImage CtsMediaTestCases]', 1), ('[android.media.cts.ExifInterfaceTest testSetAttribute CtsMediaTestCases]', 1), ('[android.location.cts.common.TestMeasurementUtil assertAll None]', 1), ('[test.java.com.android.bedstead.nene.users.UsersTest TestApis None]', 1), ('[com.android.cts.normalapp.ClientTest testQuery None]', 1), ('[com.android.cts.rollback.lib.RollbackInfoSubject assert_ None]', 1), ('[com.android.cts.verifier.sensors.sixdof.Fragments.AccuracyFragment OnClickListener None]', 1), ('[com.android.cts.deviceandprofileowner.PasswordRequirementsTest testSettingConstraintsWithComplexQualityAndResetWithLowerQuality None]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.telephony.embms.cts.MbmsStreamingSessionTest testClose CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyCallbackTest testOnSignalStrengthsChangedByRegisterTelephonyCallback CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyCallbackTest testOnBarringInfoChangedByRegisterTelephonyCallback CtsTelephonyTestCases]', 1), ('[android.dynamicmime.testapp.MultipleAppsTest MultipleAppsTest None]', 1), ('[android.dynamicmime.testapp.MultipleAppsTest testMimeGroupsIndependentSet None]', 1), ('[android.dynamicmime.testapp.MultipleAppsTest testMimeGroupsIndependentReset None]', 1), ('[android.dynamicmime.testapp.MultipleAppsTest testMimeGroupsIndependentClear None]', 1), ('[android.jobscheduler.cts.JobInfoTest testEstimatedNetworkBytes CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobInfoTest testExpeditedJob CtsJobSchedulerTestCases]', 1), ('[android.jobscheduler.cts.JobInfoTest testRequiredNetworkType CtsJobSchedulerTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPaidSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailureWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailureWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPaidNetCapabilityWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPrivateNetCapabilityWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.appsecurity.cts.AdoptableHostTest testEjected CtsAppSecurityHostTestCases]', 1), ('[com.android.compatibility.common.util.WidgetTestUtils getDisplayMetrics None]', 1), ('[com.android.tests.stagedinstall.host.StagedInstallTest testInstallStagedApex_SameGrade None]', 1), ('[com.android.tests.stagedinstall.host.StagedInstallTest testRejectsApexDifferentCertificate None]', 1), ('[com.android.tests.stagedinstall.host.StagedInstallTest testApexInfoListAfterUpdate None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testDisallowConfigVpn None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testAllowedApps None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testDisallowedApps None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testVpnLockdownUpdateAllowlist None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testVpnLockdownAllowlistVpnComesUp None]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[android.server.wm.DisplayAreaPolicyTests testDisplayAreaUniqueId CtsWindowManagerDeviceTestCases]', 1), ('[android.media.cts.CodecState releaseFrameListeners None]', 1), ('[android.widget.cts.NumberPickerTest testAccessValue CtsWidgetTestCases]', 1), ('[android.widget.cts.NumberPickerTest testInteractionWithSwipeUp CtsWidgetTestCases]', 1), ('[com.android.cts.rollback.lib.RollbackUtils isStaged None]', 1), ('[android.media.cts.AudioTrackLatencyTest testGetUnderrunCountSleep CtsMediaTestCases]', 1), ('[com.android.cts.deviceowner.SetPolicyActivity finish None]', 1), ('[com.android.cts.verifier.sensors.sixdof.Utils.TestPhase.Test pathTest None]', 1), ('[android.accessibility.cts.common.InstrumentedAccessibilityServiceTestRule testWithEnabledAccessibilityService None]', 1), ('[android.devicepolicy.cts.LockTaskTest TestApis CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest isTrue CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_includesPolicyExemptApp_lockTaskPackagesIsSet CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest isLockTaskPermitted_includesPolicyExemptApps CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_includedInLockTaskPackages_taskIsLocked CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_notIncludedInLockTaskPackages_taskIsNotLocked CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_includedInLockTaskPackages_policyShouldNotApply_taskIsNotLocked CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest finish_isLocked_doesNotFinish CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest finish_hasStoppedLockTask_doesFinish CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_removingCurrentlyLockedTask_taskFinishes CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest launchEmergencyDialerInLockTaskMode_notWhitelisted_noKeyguardFeature_doesNotLaunch CtsDevicePolicyTestCases]', 1), ('[android.devicepolicy.cts.LockTaskTest launchEmergencyDialerInLockTaskMode_notWhitelisted_keyguardFeature_launches CtsDevicePolicyTestCases]', 1), ('[android.contentsuggestions.cts.ContentSuggestionsManagerTest dropShellPermissionIdentity CtsContentSuggestionsTestCases]', 1), ('[android.contentsuggestions.cts.ContentSuggestionsManagerTest newArrayList CtsContentSuggestionsTestCases]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9527 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9537 CtsSecurityBulletinHostTestCases]', 1), ('[android.content.pm.cts.shortcut.backup.launcher2.ShortcutManagerPostBackupTest testWithUninstall_afterAppRestore None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1)]	""	""	""	"The tests seem to be missing a code search shows no CTS files with ""hibernation AND restrict"""	tbd	""	""	""	""
3.5.2  . Application Hibernation	3.5.2	C-1-4	3.5.2/C-1-4	03050200.670104	"""C-1-4] MUST NOT render the app unable to respond to activity intents, service bindings, content provider requests, or explicit broadcasts. App Hibernation in AOSP meets the above requirements. <h3 id=""36_api_namespaces"" """	Test Missing	""	restricted restriction hibernation	""	""	""	""	""	""	""	""	android.cts.statsdatom.appstart.AppStartStatsTests	testHibernatingAppStartOccurred	CtsStatsdAtomHostTestCases	/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/appstart/AppStartStatsTests.java	""	"public void testHibernatingAppStartOccurred() throws Exception {
        final int atomTag = AtomsProto.Atom.APP_START_OCCURRED_FIELD_NUMBER;
        ConfigUtils.uploadConfigForPushedAtomWithUid(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                atomTag,  /*uidInAttributionChain=*/false);
        getDevice().executeShellCommand(COMMAND_ENABLE_APP_HIBERNATION);
        getDevice().executeShellCommand(getGlobalHibernationCommand(
                DeviceUtils.STATSD_ATOM_TEST_PKG, true));

        DeviceUtils.runActivity(getDevice(), DeviceUtils.STATSD_ATOM_TEST_PKG,
                STATSD_CTS_FOREGROUND_ACTIVITY, ""action"", ""action.sleep_top"", WAIT_TIME_MS);

        // Sorted list of events in order in which they occurred.
        List<StatsLog.EventMetricData> data = ReportUtils.getEventMetricDataList(getDevice());
        assertThat(data).hasSize(1);
        AtomsProto.AppStartOccurred atom = data.get(0).getAtom().getAppStartOccurred();
        assertThat(atom.getIsHibernating()).isTrue();
    }"	""	""	hibernation	""	""	""	""	"The tests seem to be missing a code search shows no CTS files with ""hibernation AND restrict"""	tbd	""	""	""	""
3.6  . API Namespaces	3.6	C-1-1	3.6/C-1-1	03060000.670101	"""C-1-1] MUST NOT be in a NDK library or a library owned by another organization as described here. If a device implementer proposes to improve one of the package namespaces above (such as by adding useful new functionality to an existing API, or adding a new API), the implementer SHOULD visit source.android.com and begin the process for contributing changes and code, according to the information on that site. Note that the restrictions above correspond to standard conventions for naming APIs in the Java programming language; this section simply aims to reinforce those conventions and make them binding through inclusion in this Compatibility Definition. <h3 id=""37_runtime_compatibility"" """	Not Testable, related test included	""	NDK	""	""	""	""	""	""	""	""	com.android.cts.apicoverage.ApkNdkApiReport	getTestModules	""	/home/gpoor/cts-12-source/cts/tools/cts-api-coverage/src/com/android/cts/apicoverage/ApkNdkApiReport.java	""	"public void test/*
 *.
 */

package com.android.cts.apicoverage;


import org.xml.sax.SAXException;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
/**
 * Class that outputs an XML report of the {@link ApiCoverage} collected. It can be viewed in a
 * browser when used with the api-coverage.css and api-coverage.xsl files.
 */
class ApkNdkApiReport {
    public static final String FILE_FILTER_EXT = "".apk"";
    public static final String DEFAULT_OUTPUT_FILE_NAME = ""./apk-ndk-coverage.txt"";

    private static final FilenameFilter SUPPORTED_FILE_NAME_FILTER =
            new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    String fileName = name.toLowerCase();
                    return fileName.endsWith(FILE_FILTER_EXT);
                }
            };

    private static void printUsage() {
        System.out.println(""Usage: ApkNdkApiReport [OPTION]... [APK]..."");
        System.out.println();
        System.out.println(""Generates a report about what Android NDK methods."");
        System.out.println();
        System.out.println(""Options:"");
        System.out.println(""  -o FILE                output file or standard out if not given"");
        System.out.println(""  -t PATH                path to the CTS testcases Folder"");
        System.out.println(""  -b BITS                64 or 32"");
        System.out.println();
        System.exit(1);
    }

    /** Get the argument or print out the usage and exit. */
    private static String getExpectedArg(String[] args, int index) {
        if (index < args.length) {
            return args[index];
        } else {
            printUsage();
            return null; // Never will happen because printUsage will call exit(1)
        }
    }

    public static void main(String[] args) throws IOException, SAXException {
        ApkNdkApiReport apiReport;
        String testCasePath = """";
        String bits = ""64"";
        String outputFileName = DEFAULT_OUTPUT_FILE_NAME;
        int numTestModule = 0;

        for (int i = 0; i < args.length; i++) {
            if (args[i].startsWith(""-"")) {
                if (""-o"".equals(args[i])) {
                    outputFileName = getExpectedArg(args, ++i);
                } else if (""-t"".equals(args[i])) {
                    testCasePath = getExpectedArg(args, ++i);
                } else if (""-b"".equals(args[i])) {
                    bits = getExpectedArg(args, ++i);
                } else {
                    printUsage();
                }
            } else {
                printUsage();
            }
        }

        apiReport = parseTestcasesFolder(testCasePath, bits);
        if (apiReport != null) {
            for (TestModule tm : apiReport.mTestModules) {
                tm.getDynSymArr();
            }
        } else {
            printUsage();
        }
    }

    private List<TestModule> mTestModules;
    private String mBits;

    ApkNdkApiReport(List<TestModule> testModules, String bits) {
        mTestModules = testModules;
        mBits = bits;
    }

    public List<TestModule> getTestModules() {
        return mTestModules;
    }

    public String getBits() {
        return mBits;
    }

    public static ApkNdkApiReport parseTestcasesFolder(String testCasePath, String bits)
            throws IOException, SAXException {
        File[] testConfigFiles;
        List<TestModule> testModules = new ArrayList<TestModule>();

        File file = new File(testCasePath);
        if (file.isDirectory()) {
            File[] targetFiles = file.listFiles(SUPPORTED_FILE_NAME_FILTER);

            Map<String, String> env = new HashMap<>();
            for (File targetFile : targetFiles) {
                final ZipFile apkFile = new ZipFile(targetFile);
                System.out.println(targetFile.getName());
                try {
                    final Enumeration<? extends ZipEntry> entries = apkFile.entries();
                    while (entries.hasMoreElements()) {
                        final ZipEntry entry = entries.nextElement();

                        if (!entry.getName().matches(""lib(.*)"" + bits + ""(.*)so"")) {
                            continue;
                        }

                        System.out.println(entry.getName());

                        //use entry input stream:
                        InputStream is = apkFile.getInputStream(entry);

                        File tempFile = File.createTempFile(""ApkNdkApiReport"", "".so"");
                        tempFile.deleteOnExit();
                        FileOutputStream fos = new FileOutputStream(tempFile);

                        byte[] bytes = new byte[4096];
                        int length;
                        while ((length = is.read(bytes)) >= 0) {
                            fos.write(bytes, 0, length);
                        }
                        is.close();
                        fos.close();

                        testModules.add(new TestModule(tempFile, targetFile.getName(), ""jUnit""));
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        } else {
            return null;
        }
        return new ApkNdkApiReport(testModules, bits);
    }
}"	""	""	NDK	""	""	""	""	The requirement makes statements about the owner of custom libraries, this could be verified in a process outside the CTS. We can test that it there are not additional APIs in the library as the test include shows.	""	""	""	""	""
3.8.13  . Unicode and Font	3.8.13	C-1-3	3.8.13/C-1-3	03081300.670103	"""C-1-3] MUST NOT remove or modify NotoColorEmoji.tff in the system image. (It is acceptable to add a new emoji font to override emoji in NotoColorEmoji.tff) SHOULD support the skin tone and diverse family emojis as specified in the Unicode Technical Report #51. If device implementations include an IME, they: SHOULD provide an input method to the user for these emoji characters. Android includes support to render Myanmar fonts. Myanmar has several non-Unicode compliant fonts, commonly known as “Zawgyi,” for rendering Myanmar languages. If device implementations include support for Burmese, they: *"""	Test Available	""	NotoColorEmoji.tff NotoColorEmoji	""	""	""	""	""	""	""	""	android.graphics.fonts.SystemEmojiTest	isNotNull	CtsGraphicsTestCases	/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/fonts/SystemEmojiTest.java	""	"public void uniquePostScript() throws IOException {
        File emojiFont = null;
        for (Font font : SystemFonts.getAvailableFonts()) {
            if (font.getFile().getName().equals(""NotoColorEmoji.ttf"")) {
                emojiFont = font.getFile();
            }
        }

        // NotoColorEmoji.ttf should be always available as a fallback font even if another emoji
        // font files are installed in the system.
        assertThat(emojiFont).isNotNull();

        assertThat(FontFileTestUtil.containsEmojiCompatMetadata(emojiFont)).isTrue();
    }
}"	""	""	NotoColorEmoji NotoColorEmoji	""	""	""	""	""	""	""	""	""	""
3.9.1.1  . The	3.9.1.1	C-1-9	3.9.1/C-1-9	03090100.670109	"""C-1-9] MUST send the ACTION_ADMIN_POLICY_COMPLIANCE intent to the Device Owner app if a Device Owner is established during provisioning regardless of the provisioning method used. The user must not be able to proceed in the Setup Wizard until the Device Owner app finishes. When the device implementation has user data, it:"""	Test Missing	""	ACTION_ADMIN_POLICY_COMPLIANCE	ADMIN_POLICY_COMPLIANCE	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	ADMIN_POLICY_COMPLIANCE is not found in code search	tbd	""	""	""	""
3.9.1.1	3.9.1.1	C-1-8	3.9.1/C-1-8	03090100.670108	"""C-1-8] MUST send the ACTION_GET_PROVISIONING_MODE intent after device owner provisioning is triggered so that the DPC app can choose whether to become a Device Owner or a Profile Owner unless it can be determined from context that there is only one valid option (such as for NFC based provisioning where Profile Owner provisioning is not supported). | C-1-8] MUST send ACTION_MANAGED_PROFILE_PROVISIONED broadcast to the personal profile DPC when a Profile Owner is established, regardless of the provisioning method used. <h4 id=""392_managed_profile_support"" """	Test Available	""	NFC ACTION_MANAGED_PROFILE_PROVISIONED DPC ACTION_GET_PROVISIONING_MODE	""	""	""	""	""	""	""	""	com.android.compatibility.common.util.devicepolicy.provisioning.SilentProvisioningTestManager	getReceviedProfileProvisionedIntent	""	/home/gpoor/cts-12-source/cts/common/device-side/util-axt/src/com/android/compatibility/common/util/devicepolicy/provisioning/SilentProvisioningTestManager.java	""	"public void test/*
 *.
 */
package com.android.compatibility.common.util.devicepolicy.provisioning;

import static android.app.admin.DevicePolicyManager.ACTION_MANAGED_PROFILE_PROVISIONED;
import static android.app.admin.DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE;
import static android.content.Intent.ACTION_MANAGED_PROFILE_ADDED;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.test.uiautomator.UiDevice;
import android.util.Log;

import androidx.test.InstrumentationRegistry;

import com.android.compatibility.common.util.BlockingBroadcastReceiver;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

// TODO(b/183395856): Remove once the remaining silent provisioning tests are removed.
public class SilentProvisioningTestManager {
    private static final long TIMEOUT_SECONDS = 120L;
    private static final String TAG = ""SilentProvisioningTest"";

    private final LinkedBlockingQueue<Boolean> mProvisioningResults = new LinkedBlockingQueue(1);

    private final IBooleanCallback mProvisioningResultCallback = new IBooleanCallback.Stub() {
        @Override
        public void onResult(boolean result) {
            try {
                mProvisioningResults.put(result);
            } catch (InterruptedException e) {
                Log.e(TAG, ""IBooleanCallback.callback"", e);
            }
        }
    };

    private final Context mContext;
    private Intent mReceivedProfileProvisionedIntent;

    public SilentProvisioningTestManager(Context context) {
        mContext = context.getApplicationContext();
    }

    public Intent getReceviedProfileProvisionedIntent() {
        return mReceivedProfileProvisionedIntent;
    }

    public boolean startProvisioningAndWait(Intent provisioningIntent) throws InterruptedException {
        wakeUpAndDismissInsecureKeyguard();
        mContext.startActivity(getStartIntent(provisioningIntent));
        Log.i(TAG, ""startActivity on user "" + mContext.getUserId() + "" with "" + provisioningIntent);

        if (ACTION_PROVISION_MANAGED_PROFILE.equals(provisioningIntent.getAction())) {
            return waitManagedProfileProvisioning();
        } else {
            return waitDeviceOwnerProvisioning();
        }
    }

    private boolean waitDeviceOwnerProvisioning() throws InterruptedException {
        return pollProvisioningResult();
    }

    private boolean waitManagedProfileProvisioning() throws InterruptedException {
        BlockingBroadcastReceiver managedProfileProvisionedReceiver =
                new BlockingBroadcastReceiver(mContext, ACTION_MANAGED_PROFILE_PROVISIONED);
        BlockingBroadcastReceiver managedProfileAddedReceiver =
                new BlockingBroadcastReceiver(mContext, ACTION_MANAGED_PROFILE_ADDED);
        try {
            managedProfileProvisionedReceiver.register();
            managedProfileAddedReceiver.register();

            if (!pollProvisioningResult()) {
                return false;
            }

            mReceivedProfileProvisionedIntent =
                    managedProfileProvisionedReceiver.awaitForBroadcast(
                            TimeUnit.SECONDS.toMillis(TIMEOUT_SECONDS));
            if (mReceivedProfileProvisionedIntent == null) {
                Log.i(TAG, ""managedProfileProvisionedReceiver.awaitForBroadcast(): failed"");
                return false;
            }

            if (managedProfileAddedReceiver.awaitForBroadcast(
                    TimeUnit.SECONDS.toMillis(TIMEOUT_SECONDS)) == null) {
                Log.i(TAG, ""managedProfileAddedReceiver.awaitForBroadcast(): failed"");
                return false;
            }
        } finally {
            managedProfileProvisionedReceiver.unregisterQuietly();
            managedProfileAddedReceiver.unregisterQuietly();
        }
        return true;
    }

    private boolean pollProvisioningResult() throws InterruptedException {
        Boolean result = mProvisioningResults.poll(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        if (result == null) {
            Log.i(TAG, ""ManagedProvisioning doesn't return result within ""
                    + TIMEOUT_SECONDS + "" seconds "");
            return false;
        }

        if (!result) {
            Log.i(TAG, ""Failed to provision"");
            return false;
        }
        return true;
    }

    private Intent getStartIntent(Intent intent) {
        final Bundle bundle = new Bundle();
        bundle.putParcelable(Intent.EXTRA_INTENT, intent);
        bundle.putBinder(StartProvisioningActivity.EXTRA_BOOLEAN_CALLBACK,
                mProvisioningResultCallback.asBinder());
        return new Intent(mContext, StartProvisioningActivity.class)
                .putExtras(bundle)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    }

    private static void wakeUpAndDismissInsecureKeyguard() {
        try {
            UiDevice uiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
            uiDevice.wakeUp();
            uiDevice.pressMenu();
        } catch (RemoteException e) {
            Log.e(TAG, ""wakeUpScreen"", e);
        }
    }

    private static class BlockingReceiver extends BroadcastReceiver {

        private final CountDownLatch mLatch = new CountDownLatch(1);
        private final Context mContext;
        private final String mAction;
        private Intent mReceivedIntent;

        private BlockingReceiver(Context context, String action) {
            mContext = context;
            mAction = action;
            mReceivedIntent = null;
        }

        public void register() {
            mContext.registerReceiver(this, new IntentFilter(mAction));
        }

        public boolean await() throws InterruptedException {
            return mLatch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        }

        public Intent getReceivedIntent() {
            return mReceivedIntent;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            mReceivedIntent = intent;
            mLatch.countDown();
        }
    }
}"	""	""	ACTION_MANAGED_PROFILE_PROVISIONED	""	""	""	""	""	""	""	""	""	""
2.5.3  . Software	3.9.3	A-1-1	3.9.3/A-1-1	03090300.650101	"""[3.9.3/A-1-1] MUST implement all of the User lifecycle properties INITIAL_USER_INFO, SWITCH_USER, CREATE_USER, REMOVE_USER. Automotive device implementations: """	Test Missing	""	REMOVE_USER SWITCH_USER INITIAL_USER_INFO CREATE_USER	""	""	""	""	""	""	""	""	android.car.cts.CarHostJUnit4TestCase	isEmpty	CtsCarHostTestCases	/home/gpoor/cts-12-source/cts/hostsidetests/car/src/android/car/cts/CarHostJUnit4TestCase.java	""	"public void test/*
 *.
 */

package android.car.cts;

import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import android.service.pm.PackageProto;
import android.service.pm.PackageProto.UserPermissionsProto;
import android.service.pm.PackageServiceDumpProto;

import com.android.compatibility.common.util.CommonTestUtils;
import com.android.tradefed.device.CollectingByteOutputReceiver;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.log.LogUtil.CLog;
import com.android.tradefed.testtype.ITestInformationReceiver;
import com.android.tradefed.testtype.junit4.BaseHostJUnit4Test;

import org.junit.After;
import org.junit.AssumptionViolatedException;
import org.junit.Before;
import org.junit.Rule;
import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Base class for all test cases.
 */
// NOTE: must be public because of @Rules
public abstract class CarHostJUnit4TestCase extends BaseHostJUnit4Test {

    private static final int DEFAULT_TIMEOUT_SEC = 20;

    private static final Pattern CREATE_USER_OUTPUT_PATTERN = Pattern.compile(""id=(\\d+)"");

    private static final String USER_PREFIX = ""CtsCarHostTestCases"";

    /**
     * User pattern in the output of ""cmd user list --all -v""
     * TEXT id=<id> TEXT name=<name>, TEX flags=<flags> TEXT
     * group 1: id group 2: name group 3: flags group 4: other state(like ""(running)"")
     */
    private static final Pattern USER_PATTERN = Pattern.compile(
            "".*id=(\\d+).*name=([^\\s,]+).*flags=(\\S+)(.*)"");

    private static final int USER_PATTERN_GROUP_ID = 1;
    private static final int USER_PATTERN_GROUP_NAME = 2;
    private static final int USER_PATTERN_GROUP_FLAGS = 3;
    private static final int USER_PATTERN_GROUP_OTHER_STATE = 4;

    /**
     * User's package permission pattern string format in the output of ""dumpsys package PKG_NAME""
    */
    protected static final String APP_APK = ""CtsCarApp.apk"";
    protected static final String APP_PKG = ""android.car.cts.app"";

    @Rule
    public final RequiredFeatureRule mHasAutomotiveRule = new RequiredFeatureRule(this,
            ""android.hardware.type.automotive"");

    private final HashSet<Integer> mUsersToBeRemoved = new HashSet<>();

    private int mInitialUserId;
    private Integer mInitialMaximumNumberOfUsers;

    /**
     * Saves multi-user state so it can be restored after the test.
     */
    @Before
    public void saveUserState() throws Exception {
        removeUsers(USER_PREFIX);

        mInitialUserId = getCurrentUserId();
    }

    /**
     * Restores multi-user state from before the test.
     */
    @After
    public void restoreUsersState() throws Exception {
        int currentUserId = getCurrentUserId();
        CLog.d(""restoreUsersState(): initial user: %d, current user: %d, created users: %s ""
                + ""max number of users: %d"",
                mInitialUserId, currentUserId, mUsersToBeRemoved, mInitialMaximumNumberOfUsers);
        if (currentUserId != mInitialUserId) {
            CLog.i(""Switching back from %d to %d"", currentUserId, mInitialUserId);
            switchUser(mInitialUserId);
        }

        if (!mUsersToBeRemoved.isEmpty()) {
            CLog.i(""Removing users %s"", mUsersToBeRemoved);
            for (int userId : mUsersToBeRemoved) {
                removeUser(userId);
            }
        }

        // Should have been removed above, but as the saying goes, better safe than sorry...
        removeUsers(USER_PREFIX);

        if (mInitialMaximumNumberOfUsers != null) {
            CLog.i(""Restoring max number of users to %d"", mInitialMaximumNumberOfUsers);
            setMaxNumberUsers(mInitialMaximumNumberOfUsers);
        }
    }

    /**
     * Makes sure the device supports multiple users, throwing {@link AssumptionViolatedException}
     * if it doesn't.
     */
    protected final void assumeSupportsMultipleUsers() throws Exception {
        assumeTrue(""device does not support multi-user"",
                getDevice().getMaxNumberOfUsersSupported() > 1);
    }

    /**
     * Makes sure the device can add {@code numberOfUsers} new users, increasing limit if needed or
     * failing if not possible.
     */
    protected final void requiresExtraUsers(int numberOfUsers) throws Exception {
        assumeSupportsMultipleUsers();

        int maxNumber = getDevice().getMaxNumberOfUsersSupported();
        int currentNumber = getDevice().listUsers().size();

        if (currentNumber + numberOfUsers <= maxNumber) return;

        if (!getDevice().isAdbRoot()) {
            failCannotCreateUsers(numberOfUsers, currentNumber, maxNumber, /* isAdbRoot= */ false);
        }

        // Increase limit...
        mInitialMaximumNumberOfUsers = maxNumber;
        setMaxNumberUsers(maxNumber + numberOfUsers);

        // ...and try again
        maxNumber = getDevice().getMaxNumberOfUsersSupported();
        if (currentNumber + numberOfUsers > maxNumber) {
            failCannotCreateUsers(numberOfUsers, currentNumber, maxNumber, /* isAdbRoot= */ true);
        }
    }

    private void failCannotCreateUsers(int numberOfUsers, int currentNumber, int maxNumber,
            boolean isAdbRoot) {
        String reason = isAdbRoot ? ""failed to increase it""
                : ""cannot be increased without adb root"";
        String existingUsers = """";
        try {
            existingUsers = ""Existing users: "" + executeCommand(""cmd user list --all -v"");
        } catch (Exception e) {
            // ignore
        }
        fail(""Cannot create "" + numberOfUsers + "" users: current number is "" + currentNumber
                + "", limit is "" + maxNumber + "" and could not be increased ("" + reason + ""). ""
                + existingUsers);
    }

    /**
     * Executes the shell command and returns the output.
     */
    protected String executeCommand(String command, Object... args) throws Exception {
        String fullCommand = String.format(command, args);
        return getDevice().executeShellCommand(fullCommand);
    }

    /**
     * Executes the shell command and parses output with {@code resultParser}.
     */
    protected <T> T executeAndParseCommand(Function<String, T> resultParser,
            String command, Object... args) throws Exception {
        String output = executeCommand(command, args);
        return resultParser.apply(output);
    }

    /**
     * Executes the shell command and parses the Matcher output with {@code resultParser}, failing
     * with {@code matchNotFoundErrorMessage} if it didn't match the {@code regex}.
     */
    protected <T> T executeAndParseCommand(Pattern regex, String matchNotFoundErrorMessage,
            Function<Matcher, T> resultParser,
            String command, Object... args) throws Exception {
        String output = executeCommand(command, args);
        Matcher matcher = regex.matcher(output);
        if (!matcher.find()) {
            fail(matchNotFoundErrorMessage + "". Shell command: '"" + String.format(command, args)
                    + ""'. Output: "" + output.trim() + "". Regex: "" + regex);
        }
        return resultParser.apply(matcher);
    }

    /**
     * Executes the shell command and parses the Matcher output with {@code resultParser}.
     */
    protected <T> T executeAndParseCommand(Pattern regex, Function<Matcher, T> resultParser,
            String command, Object... args) throws Exception {
        String output = executeCommand(command, args);
        return resultParser.apply(regex.matcher(output));
    }

    /**
     * Executes the shell command that returns all users and returns {@code function} applied to
     * them.
     */
    public <T> T onAllUsers(Function<List<UserInfo>, T> function) throws Exception {
        ArrayList<UserInfo> allUsers = executeAndParseCommand(USER_PATTERN, (matcher) -> {
            ArrayList<UserInfo> users = new ArrayList<>();
            while (matcher.find()) {
                users.add(new UserInfo(matcher));
            }
            return users;
        }, ""cmd user list --all -v"");
        return function.apply(allUsers);
    }

    /**
     * Gets the info for the given user.
     */
    public UserInfo getUserInfo(int userId) throws Exception {
        return onAllUsers((allUsers) -> allUsers.stream()
                .filter((u) -> u.id == userId))
                        .findFirst().get();
    }

    /**
     * Sets the maximum number of users that can be created for this car.
     *
     * @throws IllegalStateException if adb is not running as root
     */
    protected void setMaxNumberUsers(int numUsers) throws Exception {
        if (!getDevice().isAdbRoot()) {
            throw new IllegalStateException(""must be running adb root"");
        }
        executeCommand(""setprop fw.max_users %d"", numUsers);
    }

    /**
     * Gets the current user's id.
     */
    protected int getCurrentUserId() throws DeviceNotAvailableException {
        return getDevice().getCurrentUser();
    }

    /**
     * Creates a full user with car service shell command.
     */
    protected int createFullUser(String name) throws Exception {
        return createUser(name, /* flags= */ 0, ""android.os.usertype.full.SECONDARY"");
    }

    /**
     * Creates a full guest with car service shell command.
     */
    protected int createGuestUser(String name) throws Exception {
        return createUser(name, /* flags= */ 0, ""android.os.usertype.full.GUEST"");
    }

    /**
     * Creates a flexible user with car service shell command.
     *
     * <p><b>NOTE: </b>it uses User HAL flags, not core Android's.
     */
    protected int createUser(String name, int flags, String type) throws Exception {
        name = USER_PREFIX + ""."" + name;
        waitForCarServiceReady();
        int userId = executeAndParseCommand(CREATE_USER_OUTPUT_PATTERN,
                ""Could not create user with name "" + name + "", flags "" + flags + "", type"" + type,
                matcher -> Integer.parseInt(matcher.group(1)),
                ""cmd car_service create-user --flags %d --type %s %s"",
                flags, type, name);
        markUserForRemovalAfterTest(userId);
        return userId;
    }

    /**
     * Marks a user to be removed at the end of the tests.
     */
    protected void markUserForRemovalAfterTest(int userId) {
        mUsersToBeRemoved.add(userId);
    }

    /**
     * Waits until the given user is initialized.
     */
    protected void waitForUserInitialized(int userId) throws Exception {
        CommonTestUtils.waitUntil(""timed out waiting for user "" + userId + "" initialization"",
                DEFAULT_TIMEOUT_SEC, () -> isUserInitialized(userId));
    }

    /**
     * Waits until the system server is ready.
     */
    protected void waitForCarServiceReady() throws Exception {
        CommonTestUtils.waitUntil(""timed out waiting for system server "",
                DEFAULT_TIMEOUT_SEC, () -> isCarServiceReady());
    }

    protected boolean isCarServiceReady() {
        String cmd = ""service check car_service"";
        try {
            String output = getDevice().executeShellCommand(cmd);
            return !output.endsWith(""not found"");
        } catch (Exception e) {
            CLog.i(""%s failed: %s"", cmd, e.getMessage());
        }
        return false;
    }

    /**
     * Asserts that the given user is initialized.
     */
    protected void assertUserInitialized(int userId) throws Exception {
        assertWithMessage(""User %s not initialized"", userId).that(isUserInitialized(userId))
                .isTrue();
        CLog.v(""User %d is initialized"", userId);
    }

    /**
     * Checks if the given user is initialized.
     */
    protected boolean isUserInitialized(int userId) throws Exception {
        UserInfo userInfo = getUserInfo(userId);
        CLog.v(""isUserInitialized(%d): %s"", userId, userInfo);
        return userInfo.flags.contains(""INITIALIZED"");
    }

    /**
     * Switches the current user.
     */
    protected void switchUser(int userId) throws Exception {
        waitForCarServiceReady();
        String output = executeCommand(""cmd car_service switch-user %d"", userId);
        if (!output.contains(""STATUS_SUCCESSFUL"")) {
            throw new IllegalStateException(""Failed to switch to user "" + userId + "": "" + output);
        }
        waitUntilCurrentUser(userId);
    }

    /**
     * Waits until the given user is the current foreground user.
     */
    protected void waitUntilCurrentUser(int userId) throws Exception {
        CommonTestUtils.waitUntil(""timed out ("" + DEFAULT_TIMEOUT_SEC
                + ""s) waiting for current user to be "" + userId
                + "" (it is "" + getCurrentUserId() + "")"",
                DEFAULT_TIMEOUT_SEC,
                () -> (getCurrentUserId() == userId));
    }

    /**
     * Removes a user by user ID and update the list of users to be removed.
     */
    protected void removeUser(int userId) throws Exception {
        executeCommand(""cmd car_service remove-user %d"", userId);
    }

    /**
     * Removes users whose name start with the given prefix.
     */
    protected void removeUsers(String prefix) throws Exception {
        Pattern pattern = Pattern.compile(""^.*id=(\\d+), name=("" + prefix + "".*),.*$"");
        String output = executeCommand(""cmd user list --all -v"");
        for (String line : output.split(""\\n"")) {
            Matcher matcher = pattern.matcher(line);
            if (!matcher.find()) continue;

            int userId = Integer.parseInt(matcher.group(1));
            String name = matcher.group(2);
            CLog.e(""Removing user with %s prefix (id=%d, name='%s')"", prefix, userId, name);
            removeUser(userId);
        }
    }

    /**
     * Checks if an app is installed for a given user.
     */
    protected boolean isAppInstalledForUser(String packageName, int userId)
            throws DeviceNotAvailableException {
        return getDevice().isPackageInstalled(packageName, Integer.toString(userId));
    }

    /**
     * Fails the test if the app is installed for the given user.
     */
    protected void assertAppInstalledForUser(String packageName, int userId)
            throws DeviceNotAvailableException {
        assertWithMessage(""%s should BE installed for user %s"", packageName, userId).that(
                isAppInstalledForUser(packageName, userId)).isTrue();
    }

    /**
     * Fails the test if the app is NOT installed for the given user.
     */
    protected void assertAppNotInstalledForUser(String packageName, int userId)
            throws DeviceNotAvailableException {
        assertWithMessage(""%s should NOT be installed for user %s"", packageName, userId).that(
                isAppInstalledForUser(packageName, userId)).isFalse();
    }

    /**
     * Restarts the system server process.
     *
     * <p>Useful for cases where the test case changes system properties, as
     * {@link ITestDevice#reboot()} would reset them.
     */
    protected void restartSystemServer() throws Exception {
        final ITestDevice device = getDevice();
        device.executeShellCommand(""stop"");
        device.executeShellCommand(""start"");
        device.waitForDeviceAvailable();
        waitForCarServiceReady();
    }

    /**
     * Gets mapping of package and permissions granted for requested user id.
     *
     * @return Map<String, List<String>> where key is the package name and
     * the value is list of permissions granted for this user.
     */
    protected Map<String, List<String>> getPackagesAndPermissionsForUser(int userId)
            throws Exception {
        CollectingByteOutputReceiver receiver = new CollectingByteOutputReceiver();
        getDevice().executeShellCommand(""dumpsys package --proto"", receiver);

        PackageServiceDumpProto dump = PackageServiceDumpProto.parser()
                .parseFrom(receiver.getOutput());

        CLog.v(""Device has %d packages while getPackagesAndPermissions"", dump.getPackagesCount());
        Map<String, List<String>> pkgMap = new HashMap<>();
        for (PackageProto pkg : dump.getPackagesList()) {
            String pkgName = pkg.getName();
            for (UserPermissionsProto userPermissions : pkg.getUserPermissionsList()) {
                if (userPermissions.getId() == userId) {
                    pkgMap.put(pkg.getName(), userPermissions.getGrantedPermissionsList());
                    break;
                }
            }
        }
        return pkgMap;
    }

    /**
     * Sleeps for the given amount of milliseconds.
     */
    protected void sleep(long ms) throws InterruptedException {
        CLog.v(""Sleeping for %dms"", ms);
        Thread.sleep(ms);
        CLog.v(""Woke up; Little Susie woke up!"");
    }

    // TODO(b/169341308): move to common infra code
    private static final class RequiredFeatureRule implements TestRule {

        private final ITestInformationReceiver mReceiver;
        private final String mFeature;

        RequiredFeatureRule(ITestInformationReceiver receiver, String feature) {
            mReceiver = receiver;
            mFeature = feature;
        }

        @Override
        public Statement apply(Statement base, Description description) {
            return new Statement() {

                @Override
                public void evaluate() throws Throwable {
                    boolean hasFeature = false;
                    try {
                        hasFeature = mReceiver.getTestInformation().getDevice()
                                .hasFeature(mFeature);
                    } catch (DeviceNotAvailableException e) {
                        CLog.e(""Could not check if device has feature %s: %e"", mFeature, e);
                        return;
                    }

                    if (!hasFeature) {
                        CLog.d(""skipping %s#%s""
                                + "" because device does not have feature '%s'"",
                                description.getClassName(), description.getMethodName(), mFeature);
                        throw new AssumptionViolatedException(""Device does not have feature '""
                                + mFeature + ""'"");
                    }
                    base.evaluate();
                }
            };
        }

        @Override
        public String toString() {
            return ""RequiredFeatureRule["" + mFeature + ""]"";
        }
    }

    /**
     * Represents a user as returned by {@code cmd user list -v}.
     */
    public static final class UserInfo {
        public final int id;
        public final String flags;
        public final String name;
        public final String otherState;

        private UserInfo(Matcher matcher) {
            id = Integer.parseInt(matcher.group(USER_PATTERN_GROUP_ID));
            flags = matcher.group(USER_PATTERN_GROUP_FLAGS);
            name = matcher.group(USER_PATTERN_GROUP_NAME);
            otherState = matcher.group(USER_PATTERN_GROUP_OTHER_STATE);
        }

        @Override
        public String toString() {
            return ""[UserInfo: id="" + id + "", flags="" + flags + "", name="" + name
                    + "", otherState="" + otherState + ""]"";
        }
    }
}"	""	""	CREATE_USER	""	""	""	""	All of the lifecycle properties do not appear in one test. INITIAL_USER_INFO can not be found in CTS at all.	tbd	""	""	""	""
3.15  . Instant Apps	3.15	C-0-7	3.15/C-0-7	03150000.670007	"""C-0-7] MUST allow running Instant Apps to be accessed from the Recents function if the Recents function is available on the device. If device implementations support Instant Apps, they:"""	Test Available	""	instantapp recents	""	""	""	""	""	""	""	""	com.android.cts.normalapp.NormalActivity	finish	""	/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/NormalActivity.java	""	"public void test/*
 *.
 */

package com.android.cts.normalapp;

import android.app.Activity;
import android.app.SearchManager;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.net.Uri;
import android.os.Bundle;
import android.provider.SearchRecentSuggestions;
import android.util.Log;

import com.android.cts.util.TestResult;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;

public class NormalActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        final Intent intent  = getIntent();
        if (Intent.ACTION_SEARCH.equals(intent.getAction())) {
            final String query = intent.getStringExtra(SearchManager.QUERY);
            final SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this,
                    SearchSuggestionProvider.AUTHORITY, SearchSuggestionProvider.MODE);
            suggestions.saveRecentQuery(query, null);
        }

        boolean canAccessInstantApp = false;
        String exception = null;
        try {
            canAccessInstantApp = tryAccessingInstantApp();
        } catch (Throwable t) {
            exception = t.getClass().getName();
        }

        TestResult.getBuilder()
                .setPackageName(""com.android.cts.normalapp"")
                .setComponentName(""NormalActivity"")
                .setStatus(""PASS"")
                .setException(exception)
                .setEphemeralPackageInfoExposed(canAccessInstantApp)
                .build()
                .broadcast(this);
        finish();
    }

    private boolean tryAccessingInstantApp() throws NameNotFoundException {
        final PackageInfo info = getPackageManager()
                .getPackageInfo(""com.android.cts.ephemeralapp1"", 0 /*flags*/);
        return (info != null);
    }
}"	""	""	instantapp recents	""	""	""	""	The test seems to cover the requirement, it contains a test for instant apps in recents	""	""	""	""	""
3.15  . Instant Apps	3.15	C-0-6	3.15/C-0-6	03150000.670006	"""C-0-6] MUST provide a persistent user notification that can be collapsed while an Instant App is running in the foreground. This user notification MUST include that Instant Apps do not require installation and provide a user affordance that directs the user to the application info screen in Settings. For Instant Apps launched via web intents, as defined by using an intent with action set to Intent.ACTION_VIEW and with a scheme of &quot;http&quot; or &quot;https&quot;, an additional user affordance SHOULD allow the user not to launch the Instant App and launch the associated link with the configured web browser, if a browser is available on the device."""	Test Available	""	notification instantapp	""	""	""	""	""	""	""	""	com.android.cts.ephemeralapp1.ClientTest	testStartForegroundService	""	/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java	""	"public void testStartForegroundService() throws Exception {
        final Context context = InstrumentationRegistry.getContext();
        final Intent intent = new Intent(context, SomeService.class);

        // Create a notification channel for the foreground notification
        final NotificationChannel channel = new NotificationChannel(""foo"", ""foo"",
                NotificationManager.IMPORTANCE_DEFAULT);
        final NotificationManager notificationManager = context.getSystemService(
                NotificationManager.class);
        notificationManager.createNotificationChannel(channel);

        // Shouldn't be able to start without a permission
        final CountDownLatch latch1 = new CountDownLatch(1);
        SomeService.setOnStartCommandCallback((int result) -> {
            assertSame(""Shouldn't be able to start without ""
                    + "" INSTANT_APP_FOREGROUND_SERVICE permission"", 0, result);
            latch1.countDown();
        });
        context.startForegroundService(intent);
        latch1.await(5, TimeUnit.SECONDS);

        // Now grant ourselves INSTANT_APP_FOREGROUND_SERVICE
        grantInstantAppForegroundServicePermission();

        // Should be able to start with a permission
        final CountDownLatch latch2 = new CountDownLatch(1);
        SomeService.setOnStartCommandCallback((int result) -> {
            assertSame(""Should be able to start with ""
                    + "" INSTANT_APP_FOREGROUND_SERVICE permission"", 1, result);
            latch2.countDown();
        });
        context.startForegroundService(intent);
        latch2.await(5, TimeUnit.SECONDS);
    }"	""	""	notification instantapp	""	""	""	""	""	""	""	""	""	""
3.15  . Instant Apps	3.15	C-0-5	3.15/C-0-5	03150000.670005	"""C-0-5] MUST provide a user affordance to view and delete Instant Apps locally cached for each individual app package."""	Test Missing	""	delete ephem instantapp	""	""	""	""	""	""	""	""	android.os.cts.FileObserverTest	isInstantApp	""	/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/FileObserverTest.java	""	"public void test/*
 *.
 */

package android.os.cts;

import android.os.Environment;
import android.os.FileObserver;
import android.platform.test.annotations.AppModeFull;
import android.platform.test.annotations.AppModeInstant;
import android.test.AndroidTestCase;
import android.util.Pair;

import androidx.test.InstrumentationRegistry;

import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class FileObserverTest extends AndroidTestCase {
    private static final String PATH = ""/PATH"";
    private static final String TEST_FILE = ""file_observer_test.txt"";
    private static final String TEST_DIR = ""fileobserver_dir"";
    private static final File EXT_STORAGE_DIR = new File(Environment.getExternalStorageDirectory(), ""fileobserver_toplevel_dir"");
    private static final int FILE_DATA = 0x20;
    private static final int UNDEFINED = 0x8000;
    private static final long DELAY_MSECOND = 2000;

    private void helpSetUp(File dir) throws Exception {
        File testFile = new File(dir, TEST_FILE);
        testFile.createNewFile();
        File testDir = new File(dir, TEST_DIR);
        testDir.mkdirs();
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        File dir = getContext().getFilesDir();
        helpSetUp(dir);

        dir = getContext().getCacheDir();
        helpSetUp(dir);

        // Instant apps cannot access external storage
        if (!InstrumentationRegistry.getTargetContext().getPackageManager().isInstantApp()) {
            dir = getContext().getExternalFilesDir(null);
            helpSetUp(dir);

            dir = EXT_STORAGE_DIR;
            dir.mkdirs();
            helpSetUp(dir);
        }

        // Let the setup settles
        Thread.sleep(DELAY_MSECOND);
    }

    private void helpTearDown(File dir) throws Exception {
        File testFile = new File(dir, TEST_FILE);
        File testDir = new File(dir, TEST_DIR);
        File moveDestFile = new File(testDir, TEST_FILE);

        if (testFile.exists()) {
            testFile.delete();
        }

        if (moveDestFile.exists()) {
            moveDestFile.delete();
        }

        if (testDir.exists()) {
            testDir.delete();
        }
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();

        File dir = getContext().getFilesDir();
        helpTearDown(dir);

        dir = getContext().getCacheDir();
        helpTearDown(dir);

        dir = getContext().getExternalFilesDir(null);
        helpTearDown(dir);

        dir = EXT_STORAGE_DIR;
        helpTearDown(dir);
        if (dir.exists()) {
            dir.delete();
        }
    }"	""	""	delete instantapp	""	""	""	""	"Searches for ""delete ephem instantapp"" do not find tests for UI for user to delete apps. The test included tests file deletion."	""	""	""	""	""
2.2.7.1  . Media	5.6	H-1-1	5.6/H-1-1	05060000.720101	"""[5.6/H-1-1] MUST have a tap-to-tone 321 of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | [5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. <h4 id=""2272_camera"" """	Test Available	""	AudioTap2ToneActivity OboeTester MEDIA_PERFORMANCE_CLASS	""	""	""	""	""	""	""	""	com.android.cts.verifier.audio.AudioTap2ToneActivity	OnTouchListener	""	/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/AudioTap2ToneActivity.java	""	"public void test/*
 *.
 */

package com.android.cts.verifier.audio;

import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.RadioButton;
import android.widget.TextView;

import com.android.compatibility.common.util.ResultType;
import com.android.compatibility.common.util.ResultUnit;
import com.android.cts.verifier.audio.audiolib.StatUtils;
import com.android.cts.verifier.CtsVerifierReportLog;
import com.android.cts.verifier.PassFailButtons;
import com.android.cts.verifier.R;
import com.android.cts.verifier.audio.audiolib.CircularBufferFloat;
import com.android.cts.verifier.audio.audiolib.TapLatencyAnalyser;
import com.android.cts.verifier.audio.audiolib.WaveformView;
import com.android.cts.verifier.audio.sources.BlipAudioSourceProvider;

import org.hyphonate.megaaudio.common.BuilderBase;
import org.hyphonate.megaaudio.duplex.DuplexAudioManager;
import org.hyphonate.megaaudio.player.AudioSource;
import org.hyphonate.megaaudio.player.AudioSourceProvider;
import org.hyphonate.megaaudio.player.JavaSourceProxy;
import org.hyphonate.megaaudio.recorder.AudioSinkProvider;
import org.hyphonate.megaaudio.recorder.sinks.AppCallback;
import org.hyphonate.megaaudio.recorder.sinks.AppCallbackAudioSinkProvider;

/**
 * CtsVerifier test to measure tap-to-tone latency.
 */
public class AudioTap2ToneActivity
        extends PassFailButtons.Activity
        implements View.OnClickListener, AppCallback {
    private static final String TAG = ""AudioTap2ToneActivity"";

    // JNI load
    static {
        try {
            System.loadLibrary(""megaaudio_jni"");
        } catch (UnsatisfiedLinkError e) {
            Log.e(TAG, ""Error loading MegaAudio JNI library"");
            Log.e(TAG, ""e: "" + e);
            e.printStackTrace();
        }

        /* TODO: gracefully fail/notify if the library can't be loaded */
    }

    private boolean mIsRecording;

    private int mPlayerType = BuilderBase.TYPE_OBOE | BuilderBase.SUB_TYPE_OBOE_AAUDIO;

    private DuplexAudioManager mDuplexAudioManager;
    private AudioSource mBlipSource;

    private Button mStartBtn;
    private Button mStopBtn;

    private TextView mSpecView;
    private TextView mResultsView;
    private TextView mStatsView;
    private TextView mPhaseView;

    private WaveformView mWaveformView;

    // Test Constants are from OboeTester.AudioMidiTester
    private static final float MAX_TOUCH_LATENCY = 0.200f;
    private static final float MAX_OUTPUT_LATENCY = 0.600f;
    private static final float ANALYSIS_TIME_MARGIN = 0.250f;

    private static final float ANALYSIS_TIME_DELAY = MAX_OUTPUT_LATENCY;
    private static final float ANALYSIS_TIME_TOTAL = MAX_TOUCH_LATENCY + MAX_OUTPUT_LATENCY;
    private static final float ANALYSIS_TIME_MAX = ANALYSIS_TIME_TOTAL + ANALYSIS_TIME_MARGIN;
    private static final int ANALYSIS_SAMPLE_RATE = 48000; // need not match output rate

    private static final int NUM_RECORD_CHANNELS = 1;

    private CircularBufferFloat mInputBuffer;

    private Runnable mAnalysisTask;
    private int mTaskCountdown;

    private TapLatencyAnalyser mTapLatencyAnalyser;

    // Stats for latency
    // STRONGLY RECOMMENDED in CDD 5.6
    private static final int MAX_TAP_2_TONE_LATENCY = 80;   // ms

    // Test API (back-end) IDs
    private static final int NUM_TEST_APIS = 2;
    private static final int TEST_API_NATIVE = 0;
    private static final int TEST_API_JAVA = 1;
    private int mActiveTestAPI = TEST_API_NATIVE;

    private int[] mNumMeasurements = new int[NUM_TEST_APIS];    // ms
    private int[] mLatencySumSamples = new int[NUM_TEST_APIS];  // ms
    private double[] mLatencyMin = new double[NUM_TEST_APIS];   // ms
    private double[] mLatencyMax = new double[NUM_TEST_APIS];   // ms
    private double[] mLatencyAve = new double[NUM_TEST_APIS];   // ms

    private static final int NUM_TEST_PHASES = 5;
    private int mTestPhase;

    private double[] mLatencyMillis = new double[NUM_TEST_PHASES];

    // ReportLog Schema
    // Note that each key will be suffixed with the ID of the API tested
    private static final String KEY_LATENCY_MIN = ""latency_min_"";
    private static final String KEY_LATENCY_MAX = ""latency_max_"";
    private static final String KEY_LATENCY_AVE = ""latency_max_"";
    private static final String KEY_LATENCY_NUM_MEASUREMENTS = ""latency_num_measurements_"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        setContentView(R.layout.audio_tap2tone_activity);

        super.onCreate(savedInstanceState);

        // Setup UI
        mStartBtn = (Button) findViewById(R.id.tap2tone_startBtn);
        mStartBtn.setOnClickListener(this);
        mStopBtn = (Button) findViewById(R.id.tap2tone_stopBtn);
        mStopBtn.setOnClickListener(this);

        ((RadioButton) findViewById(R.id.audioJavaApiBtn)).setOnClickListener(this);
        RadioButton nativeApiRB = findViewById(R.id.audioNativeApiBtn);
        nativeApiRB.setChecked(true);
        nativeApiRB.setOnClickListener(this);

        ((Button) findViewById(R.id.tap2tone_clearResults)).setOnClickListener(this);

        mSpecView = (TextView) findViewById(R.id.tap2tone_specTxt);
        mResultsView = (TextView) findViewById(R.id.tap2tone_resultTxt);
        mStatsView = (TextView) findViewById(R.id.tap2tone_statsTxt);
        mPhaseView = (TextView) findViewById(R.id.tap2tone_phaseInfo);

        mWaveformView = (WaveformView) findViewById(R.id.tap2tone_waveView);
        // Start a blip test when the waveform view is tapped.
        mWaveformView.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View view, MotionEvent event) {
                int action = event.getActionMasked();
                switch (action) {
                    case MotionEvent.ACTION_DOWN:
                    case MotionEvent.ACTION_POINTER_DOWN:
                        trigger();
                        break;
                    case MotionEvent.ACTION_MOVE:
                        break;
                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_POINTER_UP:
                        break;
                }
                // Must return true or we do not get the ACTION_MOVE and
                // ACTION_UP events.
                return true;
            }
        });

        setPassFailButtonClickListeners();
        setInfoResources(R.string.audio_tap2tone, R.string.audio_tap2tone_info, -1);

        enableAudioButtons();

        // Setup analysis
        int numBufferSamples = (int) (ANALYSIS_TIME_MAX * ANALYSIS_SAMPLE_RATE);
        mInputBuffer = new CircularBufferFloat(numBufferSamples);
        mTapLatencyAnalyser = new TapLatencyAnalyser();

        JavaSourceProxy.initN();

        calculateTestPass();
    }

    private void startAudio() {
        if (mIsRecording) {
            return;
        }

        if (mDuplexAudioManager == null) {
            AudioSourceProvider sourceProvider = new BlipAudioSourceProvider();
            AudioSinkProvider sinkProvider = new AppCallbackAudioSinkProvider(this);
            mDuplexAudioManager = new DuplexAudioManager(sourceProvider, sinkProvider);
            mDuplexAudioManager.setNumRecorderChannels(NUM_RECORD_CHANNELS);
        }

        mDuplexAudioManager.setupStreams(mPlayerType, BuilderBase.TYPE_JAVA);
        mDuplexAudioManager.start();

        mBlipSource = (AudioSource) mDuplexAudioManager.getAudioSource();

        mIsRecording = true;
        enableAudioButtons();
    }

    private void stopAudio() {
        if (mIsRecording) {
            mDuplexAudioManager.stop();
            // is there a teardown method here?
            mIsRecording = false;
            enableAudioButtons();
        }
    }

    private void resetStats() {
        mNumMeasurements[mActiveTestAPI] = 0;
        mLatencySumSamples[mActiveTestAPI] = 0;
        mLatencyMin[mActiveTestAPI] =
            mLatencyMax[mActiveTestAPI] =
            mLatencyAve[mActiveTestAPI] = 0;

        java.util.Arrays.fill(mLatencyMillis, 0.0);

        mTestPhase = 0;
    }

    private void clearResults() {
        resetStats();
        mSpecView.setText(getResources().getString(R.string.audio_tap2tone_spec));
        mResultsView.setText("""");
        mStatsView.setText("""");
    }

    private void enableAudioButtons() {
        mStartBtn.setEnabled(!mIsRecording);
        mStopBtn.setEnabled(mIsRecording);
    }

    private void calculateTestPass() {
        // 80ms is currently STRONGLY RECOMMENDED, so pass the test as long as they have run it.
        boolean testCompleted = mTestPhase >= NUM_TEST_PHASES;
        boolean pass = mLatencyAve[mActiveTestAPI] != 0
                && mLatencyAve[mActiveTestAPI] <= MAX_TAP_2_TONE_LATENCY;

        if (testCompleted) {
            if (pass) {
                mSpecView.setText(""Ave: "" + mLatencyAve[mActiveTestAPI] + "" ms <= ""
                        + MAX_TAP_2_TONE_LATENCY + "" ms -- PASS"");
            } else {
                mSpecView.setText(""Ave: "" + mLatencyAve[mActiveTestAPI] + "" ms > ""
                        + MAX_TAP_2_TONE_LATENCY + "" ms -- DOES NOT MEET STRONGLY RECOMMENDED"");
            }
        }
        getPassButton().setEnabled(testCompleted);
    }

    private void recordTestStatus() {
        CtsVerifierReportLog reportLog = getReportLog();
        for (int api = TEST_API_NATIVE; api <= TEST_API_JAVA; api++) {
            reportLog.addValue(
                    KEY_LATENCY_MIN + api,
                    mLatencyMin[api],
                    ResultType.NEUTRAL,
                    ResultUnit.NONE);
            reportLog.addValue(
                    KEY_LATENCY_MAX + api,
                    mLatencyMax[api],
                    ResultType.NEUTRAL,
                    ResultUnit.NONE);
            reportLog.addValue(
                    KEY_LATENCY_AVE + api,
                    mLatencyAve[api],
                    ResultType.NEUTRAL,
                    ResultUnit.NONE);
            reportLog.addValue(
                    KEY_LATENCY_NUM_MEASUREMENTS + api,
                    mNumMeasurements[api],
                    ResultType.NEUTRAL,
                    ResultUnit.NONE);
        }

        reportLog.submit();
    }

    private void trigger() {
        if (mIsRecording) {
            mBlipSource.trigger();

            // schedule an analysis to start in the near future
            mAnalysisTask = new Runnable() {
                public void run() {
                    new Thread() {
                        public void run() {
                            analyzeCapturedAudio();
                        }
                    }.start();
                }
            };
            mTaskCountdown =
                    (int) (mDuplexAudioManager.getRecorder().getSampleRate() * ANALYSIS_TIME_DELAY);
        }
    }

    /**
     * A holder for analysis results/
     */
    public static class TestResult {
        public float[] samples;
        public float[] filtered;
        public int frameRate;
        public TapLatencyAnalyser.TapLatencyEvent[] events;
    }

    private void processTest(TestResult result) {
        if (mTestPhase == NUM_TEST_PHASES) {
            mTestPhase--;
        }

        int[] cursors = new int[2];
        cursors[0] = result.events[0].sampleIndex;
        cursors[1] = result.events[1].sampleIndex;
        mWaveformView.setCursorData(cursors);

        int latencySamples = cursors[1] - cursors[0];
        mLatencySumSamples[mActiveTestAPI] += latencySamples;
        mNumMeasurements[mActiveTestAPI]++;

        double latencyMillis = 1000 * latencySamples / result.frameRate;
        mLatencyMillis[mTestPhase] = latencyMillis;

        if (mLatencyMin[mActiveTestAPI] == 0
                || mLatencyMin[mActiveTestAPI] > latencyMillis) {
            mLatencyMin[mActiveTestAPI] = latencyMillis;
        }
        if (mLatencyMax[mActiveTestAPI] == 0
                || mLatencyMax[mActiveTestAPI] < latencyMillis) {
            mLatencyMax[mActiveTestAPI] = latencyMillis;
        }

        mLatencyAve[mActiveTestAPI] = StatUtils.calculateMean(mLatencyMillis);
        double meanAbsoluteDeviation = StatUtils.calculateMeanAbsoluteDeviation(
                mLatencyAve[mActiveTestAPI], mLatencyMillis);

        mTestPhase++;

        mLatencyAve[mActiveTestAPI] = 1000
                * (mLatencySumSamples[mActiveTestAPI] / mNumMeasurements[mActiveTestAPI])
                / result.frameRate;
        mResultsView.setText(""Phase: "" + mTestPhase + "" : "" + latencyMillis
                + "" ms, Ave: "" + mLatencyAve[mActiveTestAPI] + "" ms"");
        mStatsView.setText(""Deviation: "" + String.format(""%.2f"",meanAbsoluteDeviation));

        mPhaseView.setText("""" + mTestPhase + "" of "" + NUM_TEST_PHASES + "" completed."");
    }

    private void analyzeCapturedAudio() {
        if (!mIsRecording) {
            return;
        }
        int sampleRate = mDuplexAudioManager.getRecorder().getSampleRate();
        int numSamples = (int) (sampleRate * ANALYSIS_TIME_TOTAL);
        float[] buffer = new float[numSamples];

        int numRead = mInputBuffer.readMostRecent(buffer);

        TestResult result = new TestResult();
        result.samples = buffer;
        result.frameRate = sampleRate;
        result.events = mTapLatencyAnalyser.analyze(buffer, 0, numRead);
        result.filtered = mTapLatencyAnalyser.getFilteredBuffer();

        // This will come in on a background thread, so switch to the UI thread to update the UI.
        runOnUiThread(new Runnable() {
            public void run() {
                if (result.events.length < 2) {
                    mResultsView.setText(
                            getResources().getString(R.string.audio_tap2tone_too_few));
                    mStatsView.setText("""");
                } else if (result.events.length > 2) {
                    mResultsView.setText(
                            getResources().getString(R.string.audio_tap2tone_too_many));
                    mStatsView.setText("""");
                } else {
                    processTest(result);
                }

                mWaveformView.setSampleData(result.filtered);
                mWaveformView.postInvalidate();

                calculateTestPass();
            }
        });
    }

    //
    // View.OnClickListener overrides
    //
    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.tap2tone_startBtn:
                startAudio();
                break;

            case R.id.tap2tone_stopBtn:
                stopAudio();
                break;

            case R.id.audioJavaApiBtn:
                stopAudio();
                clearResults();
                mPlayerType = BuilderBase.TYPE_JAVA;
                mActiveTestAPI = TEST_API_JAVA;
                break;

            case R.id.audioNativeApiBtn:
                stopAudio();
                clearResults();
                mPlayerType = BuilderBase.TYPE_OBOE | BuilderBase.SUB_TYPE_OBOE_AAUDIO;
                mActiveTestAPI = TEST_API_NATIVE;
                break;

            case R.id.tap2tone_clearResults:
                clearResults();
                break;
        }
    }

    @Override
    public void setTestResultAndFinish(boolean passed) {
        stopAudio();
        recordTestStatus();
        super.setTestResultAndFinish(passed);
    }

    //
    // AppCallback overrides
    //
    @Override
    public void onDataReady(float[] audioData, int numFrames) {
        mInputBuffer.write(audioData);

        // Analysis?
        if (mTaskCountdown > 0) {
            mTaskCountdown -= numFrames;
            if (mTaskCountdown <= 0) {
                mTaskCountdown = 0;
                new Thread(mAnalysisTask).start(); // run asynchronously with audio thread
            }
        }
    }
}"	""	""	AudioTap2ToneActivity OboeTester	""	""	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-7	5.1/H-1-7	05010000.720107	"""[5.1/H-1-7] MUST have a codec initialization latency of 65 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization.  | [5.1/H-1-7] MUST have a codec initialization latency of 50 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. """	""	""	""	""	""	""	""	""	""	""	""	android.mediapc.cts.EncoderInitializationLatencyTest	testInitializationLatency()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java	""	""	""	""	""	""	True	""	""	""	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-8	7.5/H-1-8	07050000.720108	"""[7.5/H-1-8] MUST support CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_RAW and android.graphics.ImageFormat.RAW_SENSOR for the primary back camera. <h4 id=""2273_hardware"" """	""	""	CameraMetadata.REQUEST REQUEST_AVAILABLE_CAPABILITIES_RAW RAW_SENSOR android.graphics.ImageFormat.RAW	""	""	""	""	[('android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest', 8), ('android.hardware.camera2.cts.DngCreatorTest', 7), ('android.hardware.camera2.cts.RobustnessTest', 4), ('android.hardware.camera2.cts.helpers.StaticMetadat', 3), ('android.hardware.camera2.cts.StaticMetadataTest', 3), ('android.hardware.camera2.cts.CameraDeviceTest', 2), ('android.hardware.camera2.cts.CaptureRequestTest', 2), ('android.hardware.camera2.cts.BurstCaptureRawTest', 2), ('android.hardware.camera2.cts.MultiResolutionImageReaderTest', 2), ('android.hardware.camera2.cts.CaptureResultTest', 2), ('android.media.cts.CodecImage', 1), ('android.hardware.camera2.cts.CtsUtilsTest', 1), ('android.hardware.camera2.cts.ZoomCaptureTest', 1), ('android.hardware.camera2.cts.testcases.Camera2SurfaceViewTestCase', 1), ('android.app.cts.SystemFeaturesTest', 1), ('android.hardware.camera2.cts.CameraTestUtils', 1), ('android.hardware.camera2.cts.PerformanceTest', 1)]	[('close', 12), ('getWidth', 7), ('getHeight', 7), ('setUp', 6), ('getSurface', 4), ('getAeModeName', 3), ('getAfModeName', 3), ('tearDown', 2), ('getFormat', 1), ('getTimestamp', 1), ('getCropRect', 1), ('getPlanes', 1), ('getRowStride', 1), ('getPixelStride', 1), ('getBuffer', 1), ('start', 1), ('getLooper', 1), ('BlockingStateCallback', 1), ('CameraErrorCollector', 1), ('getPackageManager', 1), ('release', 1)]	[('CtsCameraTestCases', 36), ('CtsAppTestCases', 1)]	""	android.camera.cts.api31test.SPerfClassTest	testSPerfClassJpegSizes	CtsCameraApi31TestCases	/home/gpoor/cts-12-source/cts/tests/camera/api31test/src/android/camera/cts/api31test/SPerfClassTest.java	[('(2,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(2,RAW_SENSOR,/android/media/cts/CodecImage.java)', 1), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CtsUtilsTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/ZoomCaptureTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/testcases/Camera2SurfaceViewTestCase.java)', 1), ('(2,CameraMetadata.REQUEST,/android/hardware/camera2/cts/helpers/StaticMetadata.java)', 1), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/helpers/StaticMetadata.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/helpers/StaticMetadata.java)', 1), ('(3,RAW_SENSOR,/android/hardware/camera2/cts/BurstCaptureRawTest.java)', 1), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/app/cts/SystemFeaturesTest.java)', 1), ('(6,RAW_SENSOR,/android/hardware/camera2/cts/CameraTestUtils.java)', 1), ('(3,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(10,RAW_SENSOR,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(1,CameraMetadata.REQUEST,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(2,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(4,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(10,RAW_SENSOR,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java)', 1), ('(4,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/StaticMetadataTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/StaticMetadataTest.java)', 1), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/PerformanceTest.java)', 1)]	"[('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[2]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[RAW_SENSOR]:[1]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([2:/android/media/cts/CodecImage.java]:[RAW_SENSOR]:[2]:method_text:[ the image data for this plane.         */        public abstract ByteBuffer getBuffer();    }}])', 1), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[RAW_SENSOR]:[1]:method_text:[ack level should be     *   close enough to the optical black level values.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/CtsUtilsTest.java]:[RAW_SENSOR]:[1]:method_text:[ int getPixelStride() { return 1; }    @Override public ByteBuffer getBuffer() { return buffer; }}])', 1), ('([2:/android/hardware/camera2/cts/ZoomCaptureTest.java]:[RAW_SENSOR]:[2]:method_text:[ fail(""wait for image available timed out after "" + timeout + ""ms"");            }        }    }}])', 1), ('([1:/android/hardware/camera2/cts/testcases/Camera2SurfaceViewTestCase.java]:[RAW_SENSOR]:[1]:method_text:[aptureBurst(burstCaptureRequests, listener, handler);        }        return numCaptures;    }}])', 1), ('([2:/android/hardware/camera2/cts/helpers/StaticMetadata.java]:[CameraMetadata.REQUEST]:[2]:method_text:[             throw new UnsupportedOperationException(""Unhandled level "" + mLevel);        }    }}])', 1), ('([1:/android/hardware/camera2/cts/helpers/StaticMetadata.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[             throw new UnsupportedOperationException(""Unhandled level "" + mLevel);        }    }}])', 1), ('([2:/android/hardware/camera2/cts/helpers/StaticMetadata.java]:[RAW_SENSOR]:[2]:method_text:[             throw new UnsupportedOperationException(""Unhandled level "" + mLevel);        }    }}])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[RAW_SENSOR]:[1]:method_text:[own();    }    /**     * Verify raw sensor size information is correctly configured.     */   ])', 1), ('([2:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[RAW_SENSOR]:[2]:method_text:[            }            } finally {                closeDevice();            }        }    }}])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([6:/android/hardware/camera2/cts/CameraTestUtils.java]:[RAW_SENSOR]:[6]:method_text:[               return false;                }            }        }        return false;    }}])', 1), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[1]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[2]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[1]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), ('([6:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[6]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[CameraMetadata.REQUEST]:[1]:method_text:[  if (inputWriter != null) {                inputWriter.close();            }        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[RAW_SENSOR]:[2]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[pported yet.        }    }    /**     * Test values for the available session keys.     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[nputSize));            }        }    }    /**     * Check depth output capability     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ cross-check the high speed sizes and fps ranges from     * the StreamConfigurationMap.     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[1]:method_text:[     }    }    /**     * Test values for static metadata used by the RAW capability.     */   ])', 1), ('([5:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[5]:method_text:[nputSize));            }        }    }    /**     * Check depth output capability     */   ])', 1), ('([3:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[3]:method_text:[ cross-check the high speed sizes and fps ranges from     * the StreamConfigurationMap.     */   ])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[     testMultiResolutionImageReaderForFormat(ImageFormat.RAW_SENSOR, /*repeating*/false);    }   ])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[      testMultiResolutionImageReaderForFormat(ImageFormat.RAW_SENSOR, /*repeating*/true);    }   ])', 1), ('([1:/android/hardware/camera2/cts/StaticMetadataTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ces.        }    }    /**     * Test max number of output stream reported by device     */   ])', 1), ('([3:/android/hardware/camera2/cts/StaticMetadataTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[3]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 1), ('([1:/android/hardware/camera2/cts/StaticMetadataTest.java]:[RAW_SENSOR]:[1]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[RAW_SENSOR]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([2:/android/hardware/camera2/cts/PerformanceTest.java]:[RAW_SENSOR]:[2]:method_text:[, and the frame duration, which is the timestamp     * gap between results.     * </p>     */   ])', 1)]"	""	""	[('RAW_SENSOR', 24), ('REQUEST_AVAILABLE_CAPABILITIES_RAW', 16), ('CameraMetadata.REQUEST', 2)]	[('[android.hardware.camera2.cts.helpers.StaticMetadat getCharacteristics None]', 3), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageBasic CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.DngCreatorTest testDngRenderingByBitmapFactor CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testUltraHighResolutionSensorCharacteristics CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStreamConfigurationMap CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.StaticMetadataTest testCapabilities CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases]', 2), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testBlackLevelLock CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CtsUtilsTest testCopyPad3to5 CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ZoomCaptureTest testRawZoomCapture CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.testcases.Camera2SurfaceViewTestCase isInstantApp CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.BurstCaptureRawTest testTimestamp CtsCameraTestCases]', 1), ('[android.app.cts.SystemFeaturesTest testCameraFeatures CtsAppTestCases]', 1), ('[android.hardware.camera2.cts.CameraTestUtils ImageDropperListener None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageBasicMaximumResolution CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryMaximumResolutionReprocessConfigurations CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStaticRawCharacteristics CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testKeys CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiResolutionImageReaderTest testMultiResolutionImageReaderRaw CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.MultiResolutionImageReaderTest testMultiResolutionImageReaderRepeatingRaw CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.StaticMetadataTest testHwSupportedLevel CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.PerformanceTest testSingleCapture CtsCameraTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.3	H-1-2	5.3/H-1-2	05030000.720102	"""[5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback.  | [5.3/H-1-2] MUST NOT drop more than 2 frames in 10 seconds during a video resolution change in a 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. """	""	""	AAC	""	""	""	""	[('android.mediav2.cts.ExtractorTest', 8), ('android.media.cts.NativeDecoderTest', 8), ('android.media.cts.MediaCodecListTest', 4), ('android.hardware.camera2.cts.CameraDeviceTest', 3), ('com.android.cts.appdataisolation.appa.AppATests', 3), ('android.media.cts.MediaMuxerTest', 3), ('android.mediastress.cts.NativeMediaTest', 2), ('android.hardware.camera2.cts.FlashlightTest', 2), ('android.hardware.camera2.cts.CameraManagerTest', 2), ('com.android.cts.isolatedsplitapp.feature_b.FeatureBActivity', 1), ('com.android.cts.verifier.camera.fov.PhotoCaptureActivity', 1), ('android.mediastress.cts.HEVCR720pAacShortPlayerTest', 1), ('android.media.cts.MediaExtractorTest', 1), ('com.android.cts.usespermissiondiffcertapp.Utils', 1), ('android.mediav2.cts.MuxerUnitTest', 1), ('android.mediastress.cts.H264R1080pAacLongPlayerTest', 1), ('com.android.cts.isolatedsplitapp.feature_a.FeatureAActivity', 1), ('android.hardware.camera2.cts.helpers.CameraSessionUtils', 1), ('android.security.cts.TestMedi', 1), ('android.mediastress.cts.NativeMediaActivity', 1), ('android.taskswitching.appa.AppAActivity', 1), ('android.telephony.cts.TelephonyRegistryManagerTest', 1)]	[('Intent', 7), ('setUp', 7), ('getContext', 4), ('poll', 3), ('getLayoutInflater', 2), ('getSimpleName', 2), ('getItemCount', 2), ('getUri', 2), ('toString', 2), ('never', 2), ('tearDown', 2), ('getMediaDirString', 2), ('getStateWaiter', 2), ('getWindow', 2), ('getExternalCacheDir', 1), ('getReportedFovDegrees', 1), ('getNumberOfCameras', 1), ('getHolder', 1), ('getTargetContext', 1), ('Bundle', 1), ('getContentResolver', 1), ('getPackageName', 1), ('clearPrimaryClip', 1), ('getCacheDir', 1), ('BlockingStateCallback', 1), ('anyInt', 1), ('length', 1), ('getSize', 1), ('close', 1), ('validateKeyValuePairs', 1), ('MediaExtractor', 1), ('getTrackCount', 1), ('release', 1), ('input', 1), ('hasFlash', 1), ('getIntent', 1), ('onSurfaceCreated', 1), ('Runnable', 1), ('run', 1), ('createEngine', 1), ('setSurfaceForNative', 1), ('getMediaString', 1), ('getPackageManager', 1), ('getStatSize', 1)]	[('CtsMediaTestCases', 16), ('CtsMediaV2TestCases', 9), ('CtsCameraTestCases', 7), ('CtsMediaStressTestCases', 5), ('CtsSecurityBulletinHostTestCases', 1), ('CtsTelephonyTestCases', 1)]	""	android.mediapc.cts.AdaptivePlaybackFrameDropTest	testAdaptivePlaybackFrameDrop()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/AdaptivePlaybackFrameDropTest.java	[('(2,AAC,/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java)', 1), ('(5,AAC,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(2,AAC,/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java)', 1), ('(11,AAC,/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java)', 1), ('(2,AAC,/android/media/cts/MediaExtractorTest.java)', 1), ('(21,AAC,/android/media/cts/MediaCodecListTest.java)', 1), ('(2,AAC,/com/android/cts/usespermissiondiffcertapp/Utils.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(46,AAC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(4,AAC,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,AAC,/android/mediav2/cts/MuxerUnitTest.java)', 1), ('(3,AAC,/android/mediastress/cts/H264R1080pAacLongPlayerTest.java)', 1), ('(21,AAC,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,AAC,/com/android/cts/isolatedsplitapp/feature_a/FeatureAActivity.java)', 1), ('(9,AAC,/android/hardware/camera2/cts/helpers/CameraSessionUtils.java)', 1), ('(1,AAC,/android/security/cts/TestMedia.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(9,AAC,/android/mediastress/cts/NativeMediaActivity.java)', 1), ('(13,AAC,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(15,AAC,/android/media/cts/MediaMuxerTest.java)', 1), ('(1,AAC,/android/taskswitching/appa/AppAActivity.java)', 1), ('(3,AAC,/android/telephony/cts/TelephonyRegistryManagerTest.java)', 1)]	"[('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[estName.getMethodName() + "" failed for mime: "" + mMime, isOk);        }        @SmallTest       ])', 2), ('([2:/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java]:[AAC]:[2]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_b_textview, linearLayout);    }}])', 1), ('([2:/android/mediastress/cts/NativeMediaTest.java]:[AAC]:[2]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([3:/android/mediastress/cts/NativeMediaTest.java]:[AAC]:[3]:method_text:[us); // null means time-out        Assert.assertEquals(expectAlive, status.booleanValue());    }}])', 1), ('([2:/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java]:[AAC]:[2]:method_text:[           "": "" + e.getMessage(), Toast.LENGTH_LONG).show();        }        return false;    }}])', 1), ('([11:/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java]:[AAC]:[11]:method_text:[""bbb_short.fmpeg.1280x720.mp4.libx265_6500kbps_30fps.libfaac_stereo_128kbps_48000hz.mp4""    };   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[AAC]:[2]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([4:/android/media/cts/MediaCodecListTest.java]:[AAC]:[4]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([8:/android/media/cts/MediaCodecListTest.java]:[AAC]:[8]:method_text:[        assertNotNull(""Profile "" + profile + "" must be supported."", codecName);        }    }   ])', 1), ('([7:/android/media/cts/MediaCodecListTest.java]:[AAC]:[7]:method_text:[        assertNotNull(""Profile "" + profile + "" must be supported."", codecName);        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AAC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/Utils.java]:[AAC]:[2]:method_text:[N_VERIFY_OUTGOING_PERSISTED);        intent.putExtra(EXTRA_URI, uri);        call(intent);    }}])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[2]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                cam1Cb = null;            }        }    }   ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[5]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([7:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[7]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[te point for a given         * choice of timestamp and mode.         */        @LargeTest       ])', 1), ('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[estName.getMethodName() + "" failed for mime: "" + mMime, isOk);        }        @LargeTest       ])', 1), ('([26:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[26]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[4]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[1]:method_text:[sc/profiles/cur/""+ getCurrentUserId() + ""/""                + mContext.getPackageName());    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[1]:method_text:[tDirIsAccessible(""/data/misc/profiles/ref/""                + mContext.getPackageName());    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[2]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([1:/android/mediav2/cts/MuxerUnitTest.java]:[AAC]:[1]:method_text:[/ expected            } finally {                muxer.release();            }        }       ])', 1), ('([3:/android/mediastress/cts/H264R1080pAacLongPlayerTest.java]:[AAC]:[3]:method_text:[bb_full.ffmpeg.1920x1080.mp4.libx264_10000kbps_30fps.libfaac_stereo_192kbps_48000Hz.mp4""    };   ])', 1), ('([9:/android/media/cts/NativeDecoderTest.java]:[AAC]:[9]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([2:/android/media/cts/NativeDecoderTest.java]:[AAC]:[2]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([5:/android/media/cts/NativeDecoderTest.java]:[AAC]:[5]:method_text:[e,            int fd, long startOffset, long length);    @Presubmit    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[p4_h264_1000kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[3gp_h263_300kbps_25fps_aac_stereo_128kbps_11025hz.3gp"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[p4_mpeg2_105kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[erNative(int in, long inoffset, long insize,            int out, boolean webm);    @Presubmit   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/feature_a/FeatureAActivity.java]:[AAC]:[1]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_a_textview, linearLayout);    }}])', 1), ('([9:/android/hardware/camera2/cts/helpers/CameraSessionUtils.java]:[AAC]:[9]:method_text:[onstructor for noninstantiability    private CameraSessionUtils() { throw new AssertionError(); }}])', 1), ('([1:/android/security/cts/TestMedia.java]:[AAC]:[1]:method_text:[ in self (Android P),     *                          SIGABRT in self (Android Q onward)     */   ])', 1), ('([1:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[1]:method_text:[f (info.hasFlash()) {                mFlashCameraIdList.add(id);            }        }    }   ])', 1), ('([3:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[3]:method_text:[ble e) {                    fail(e.getMessage());                }            }        }    }}])', 1), ('([9:/android/mediastress/cts/NativeMediaActivity.java]:[AAC]:[9]:method_text:[ad jni on initialization */    static {         System.loadLibrary(""ctsmediastress_jni"");    }}])', 1), ('([9:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[9]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);        return -1; // unreachable    }   ])', 1), ('([4:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[4]:method_text:[pening the same device multiple times and make sure the right     * error state is set.     */   ])', 1), ('([9:/android/media/cts/MediaMuxerTest.java]:[AAC]:[9]:method_text:[neAndVerify(source, outputFilePath, 1, 180, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);    }   ])', 1), ('([4:/android/media/cts/MediaMuxerTest.java]:[AAC]:[4]:method_text:[e frame     * drops as in b/63590381 and b/64949961 while B Frames encoding is enabled.     */   ])', 1), ('([2:/android/media/cts/MediaMuxerTest.java]:[AAC]:[2]:method_text:[dvance) {            fail(""either audio track has not reached its last sample"");        }    }}])', 1), ('([1:/android/taskswitching/appa/AppAActivity.java]:[AAC]:[1]:method_text:[    getIntent().<RemoteCallback>getParcelableExtra(""callback"").sendResult(null);        });    }}])', 1), ('([3:/android/telephony/cts/TelephonyRegistryManagerTest.java]:[AAC]:[3]:method_text:[queue.poll(TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);        assertEquals(testValue, result);    }}])', 1)]"	""	""	[('AAC', 48)]	[('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[android.mediastress.cts.NativeMediaTest testDefaultPlay CtsMediaStressTestCases]', 1), ('[com.android.cts.verifier.camera.fov.PhotoCaptureActivity OnClickListener None]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testRequiredMediaCodecList CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testFindDecoderWithAacProfile CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testFindEncoderWithAacProfile CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testInputChannelLimits CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice CtsCameraTestCases]', 1), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testDataSourceNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtract CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testSeekToZero CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtractNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testSeekToZeroNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate CtsMediaV2TestCases]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppACurProfileDataAccessible None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppARefProfileDataAccessible None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAUnlockDeviceAndVerifyCeDeExternalDataExist None]', 1), ('[android.mediav2.cts.MuxerUnitTest testIfCorruptMediaFormatIsRejected CtsMediaV2TestCases]', 1), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSource CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSourceAudioOnly CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSourceWithCallback CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerAvc CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerH263 CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerVp9Hdr CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerMpeg4 CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.helpers.CameraSessionUtils getMockCaptureListener None]', 1), ('[android.security.cts.TestMedi testPocCVE_2020_0451 CtsSecurityBulletinHostTestCases]', 1), ('[android.hardware.camera2.cts.FlashlightTest testTorchModeExceptions CtsCameraTestCases]', 1), ('[android.mediastress.cts.NativeMediaActivity exists CtsMediaStressTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest NoopCameraListener CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerOpenAllCameras CtsCameraTestCases]', 1), ('[android.media.cts.MediaMuxerTest SKIP_testVideoAudio CtsMediaTestCases]', 1), ('[android.media.cts.MediaMuxerTest testWebmOutput CtsMediaTestCases]', 1), ('[android.media.cts.MediaMuxerTest testTimestampsStartOffsetNegativeAudioVideo CtsMediaTestCases]', 1), ('[android.taskswitching.appa.AppAActivity getListView None]', 1), ('[android.telephony.cts.TelephonyRegistryManagerTest testNotifyDataActivityChanged CtsTelephonyTestCases]', 1)]	True	""	""	""	""	""	""	""	""
9.9.3  . Encryption Methods	9.9.3	C-1-5	9.9.3/C-1-5	09090300.670105	"""C-1-5] MUST encrypt file contents and filesystem metadata using AES-256-XTS or Adiantum. AES-256-XTS refers to the Advanced Encryption Standard with a 256-bit cipher key length, operated in XTS mode; the full length of the key is 512 bits. Adiantum refers to Adiantum-XChaCha12-AES, as specified at https://github.com/google/adiantum. Filesystem metadata is data such as file sizes, ownership, modes, and extended attributes (xattrs)."""	""	""	AES XTS github.com	""	""	""	""	[('android.security.identity.cts.ProvisioningTest', 12), ('android.keystore.cts.AndroidKeyStoreTest', 4), ('android.autofillservice.cts.saveui.CustomDescriptionTest', 4), ('android.keystore.cts.SecretKeyFactoryTest', 2), ('android.security.SELinuxTargetSdkTest', 2), ('android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase', 2), ('android.text.cts.LayoutTest', 2), ('android.widget.cts.SearchViewTest', 2), ('com.android.cts.managedprofile.NfcTest', 2), ('android.autofillservice.cts.inline.InlineLoginActivityTest', 2), ('android.autofillservice.cts.SessionLifecycleTest', 2), ('android.graphics.fonts.NativeSystemFontTest', 1), ('android.contentcaptureservice.cts.ChildlessActivityTest', 1), ('android.autofillservice.cts.commontests.TimePickerTestCase', 1), ('android.graphics.cts.PaintFlagsDrawFilterTest', 1), ('android.autofillservice.cts.testcore.CannedFillResponse', 1), ('android.mediav2.cts.ExtractorTest', 1), ('android.text.method.cts.ReplacementTransformationMethodTest', 1), ('android.graphics.cts.Paint_TextBoundsTest', 1), ('android.autofillservice.cts.servicebehavior.ValidatorTest', 1), ('android.telecom.cts.TestUtils', 1), ('com.android.cts.input.VirtualInputDevice', 1), ('android.media.cts.StubMediaRoute2ProviderService', 1), ('android.accessibilityservice.cts.AccessibilityTextActionTest', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('com.android.cts.verifier.nfc.offhost.UiccTransactionEvent2EmulatorActivity', 1), ('android.uirendering.cts.testclasses.PathTests', 1), ('com.android.cts.verifier.security.UnlockedDeviceRequiredTest', 1), ('android.text.cts.StaticLayoutLineBreakingVariantsTest', 1), ('android.accessibilityservice.cts.AccessibilityTextTraversalTest', 1), ('android.keystore.cts.KeyAttestationTest', 1)]	[('build', 21), ('Bundle', 7), ('getPackageName', 5), ('getId', 5), ('getComponentName', 4), ('getClassName', 4), ('Builder', 3), ('length', 3), ('close', 3), ('getCount', 3), ('getSimpleName', 2), ('getTargetContext', 2), ('getAssets', 2), ('hasBluetoothFeature', 2), ('getPackageManager', 2), ('getUiAutomation', 2), ('toString', 2), ('getContext', 2), ('Object', 2), ('getShellCommand', 2), ('readResults', 2), ('setupPipes', 2), ('start', 2), ('endArray', 2), ('size', 2), ('getBytes', 2), ('countDown', 2), ('supports3DES', 1), ('getFailureMessage', 1), ('getResponseType', 1), ('getSize', 1), ('setup', 1), ('getActivity', 1), ('getPaint', 1), ('Paint', 1), ('enableService', 1), ('onFill', 1), ('getNextFillRequest', 1), ('tapLogin', 1), ('run', 1), ('getNextSaveRequest', 1), ('applyCharSequenceTransformationToImageView', 1), ('flattenToString', 1), ('getMainLooper', 1), ('getFileDescriptor', 1), ('StringBuilder', 1), ('readLine', 1), ('obtain', 1), ('recycle', 1), ('waitForBinding', 1), ('getConnectionService', 1), ('getConnections', 1), ('stream', 1), ('getAddress', 1), ('findFirst', 1), ('getLooper', 1), ('peek', 1), ('readData', 1), ('beginArray', 1), ('hasNext', 1), ('nextString', 1), ('JSONObject', 1), ('getDeviceId', 1), ('flush', 1), ('getVendorId', 1), ('getProductId', 1), ('getSources', 1), ('getPassButton', 1), ('TextPaint', 1), ('getLineCount', 1), ('deleteCredential', 1), ('proofOfOwnership', 1), ('multipleNamespaces', 1)]	[('CtsAutoFillServiceTestCases', 13), ('CtsIdentityTestCases', 12), ('CtsKeystoreTestCases', 7), ('CtsTextTestCases', 4), ('CtsGraphicsTestCases', 3), ('CtsSelinuxEphemeralTestCases', 2), ('CtsWidgetTestCases', 2), ('CtsAccessibilityServiceTestCases', 2), ('CtsContentCaptureServiceTestCases', 1), ('CtsMediaV2TestCases', 1), ('CtsTelecomTestCases', 1), ('CtsMediaTestCases', 1), ('CtsUiRenderingTestCases', 1)]	""	android.security.cts.MetadataEncryptionTest	testMetadataEncryptionIsEnabled()	CtsSecurityHostTestCases	/home/gpoor/cts-12-source/cts/hostsidetests/security/src/android/security/cts/MetadataEncryptionTest.java	[('(2,XTS,/android/graphics/fonts/NativeSystemFontTest.java)', 1), ('(1,XTS,/android/contentcaptureservice/cts/ChildlessActivityTest.java)', 1), ('(1,XTS,/android/autofillservice/cts/commontests/TimePickerTestCase.java)', 1), ('(1,XTS,/android/graphics/cts/PaintFlagsDrawFilterTest.java)', 1), ('(2,AES,/android/keystore/cts/SecretKeyFactoryTest.java)', 1), ('(2,XTS,/android/security/SELinuxTargetSdkTest.java)', 1), ('(3,XTS,/android/autofillservice/cts/testcore/CannedFillResponse.java)', 1), ('(14,AES,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(2,XTS,/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java)', 1), ('(12,XTS,/android/mediav2/cts/ExtractorTest.java)', 1), ('(1,XTS,/android/text/method/cts/ReplacementTransformationMethodTest.java)', 1), ('(1,XTS,/android/graphics/cts/Paint_TextBoundsTest.java)', 1), ('(9,XTS,/android/autofillservice/cts/saveui/CustomDescriptionTest.java)', 1), ('(8,XTS,/android/text/cts/LayoutTest.java)', 1), ('(7,XTS,/android/widget/cts/SearchViewTest.java)', 1), ('(3,XTS,/com/android/cts/managedprofile/NfcTest.java)', 1), ('(3,XTS,/android/autofillservice/cts/servicebehavior/ValidatorTest.java)', 1), ('(4,XTS,/android/telecom/cts/TestUtils.java)', 1), ('(1,XTS,/com/android/cts/input/VirtualInputDevice.java)', 1), ('(3,XTS,/android/media/cts/StubMediaRoute2ProviderService.java)', 1), ('(14,XTS,/android/accessibilityservice/cts/AccessibilityTextActionTest.java)', 1), ('(1,AES,/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java)', 1), ('(4,XTS,/android/autofillservice/cts/inline/InlineLoginActivityTest.java)', 1), ('(2,XTS,/com/android/cts/verifier/nfc/offhost/UiccTransactionEvent2EmulatorActivity.java)', 1), ('(1,XTS,/android/uirendering/cts/testclasses/PathTests.java)', 1), ('(2,AES,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(1,XTS,/android/text/cts/StaticLayoutLineBreakingVariantsTest.java)', 1), ('(2,XTS,/android/autofillservice/cts/SessionLifecycleTest.java)', 1), ('(6,XTS,/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java)', 1), ('(2,AES,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(12,AES,/android/security/identity/cts/ProvisioningTest.java)', 1)]	"[('([2:/android/autofillservice/cts/inline/InlineLoginActivityTest.java]:[XTS]:[2]:method_text:[             findNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();    }   ])', 2), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[nicalizeCbor(rd.getAuthenticatedData())));        store.deleteCredentialByName(""test"");    }   ])', 2), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[, Util.getIntegerEntry(rd, ns, ""Height""));        store.deleteCredentialByName(""test"");    }   ])', 2), ('([2:/android/graphics/fonts/NativeSystemFontTest.java]:[XTS]:[2]:method_text:[ }                        }                    }                }            }        }    }}])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[XTS]:[1]:method_text:[der(@NonNull String id) {        return new ContentCaptureContext.Builder(new LocusId(id));    }}])', 1), ('([1:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[XTS]:[1]:method_text:[        assertTextAndValue(findNodeByResourceId(saveRequest.structure, ID_OUTPUT), ""10:40"");    }}])', 1), ('([1:/android/graphics/cts/PaintFlagsDrawFilterTest.java]:[XTS]:[1]:method_text:[assertTrue(rect.top >= TEXT_Y);    }    // Tests that FILTER_BITMAP_FLAG is handled properly.   ])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[AES]:[1]:method_text:[      EXPECTED_ALGORITHMS = ObjectArrays.concat(EXPECTED_ALGORITHMS, ""DESede"");        }    }   ])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[AES]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[XTS]:[1]:method_text:[xt(context, msg);    }    /**     * Verify the selinux context of the app data type.     */   ])', 1), ('([1:/android/security/SELinuxTargetSdkTest.java]:[XTS]:[1]:method_text:[9,c256,c512,c768\\n"" +            ""Actual value: "";        appDataContext(context, msg);    }   ])', 1), ('([3:/android/autofillservice/cts/testcore/CannedFillResponse.java]:[XTS]:[3]:method_text:[ {        void decorate(SaveInfo.Builder builder, Function<String, ViewNode> nodeResolver);    }}])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[should match the original plaintext."",                plaintext2, plaintext.getBytes());    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[xpectedSecret.getEncoded()),                Arrays.toString(actualSecret.getEncoded()));    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[6]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[4]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([1:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[XTS]:[1]:method_text:[own(finalSelection.getEvents().get(0), NULL_DATASET_ID, ""activity"",                ""A"");    }   ])', 1), ('([1:/android/autofillservice/cts/commontests/FillEventHistoryCommonTestCase.java]:[XTS]:[1]:method_text:[d, the save dialog was not shown because all     * fields matched contents of datasets.     */   ])', 1), ('([12:/android/mediav2/cts/ExtractorTest.java]:[XTS]:[12]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([1:/android/text/method/cts/ReplacementTransformationMethodTest.java]:[XTS]:[1]:method_text:[tivityRule.getActivity());        mEditText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10);    }   ])', 1), ('([1:/android/graphics/cts/Paint_TextBoundsTest.java]:[XTS]:[1]:method_text:[ce(typeface);        paint.setTextSize(100f);  // Make 1em = 100px        return paint;    }   ])', 1), ('([3:/android/autofillservice/cts/saveui/CustomDescriptionTest.java]:[XTS]:[3]:method_text:[Bot.saveForAutofill(true, SAVE_DATA_TYPE_GENERIC);        sReplier.getNextSaveRequest();    }   ])', 1), ('([2:/android/autofillservice/cts/saveui/CustomDescriptionTest.java]:[XTS]:[2]:method_text:[        mActivity.tapLogin();        assertSaveUiIsShownWithTwoLines(""batch updated"");    }   ])', 1), ('([2:/android/autofillservice/cts/saveui/CustomDescriptionTest.java]:[XTS]:[2]:method_text:[);        mActivity.tapLogin();        assertSaveUiIsShownWithTwoLines(""transformed"");    }   ])', 1), ('([2:/android/autofillservice/cts/saveui/CustomDescriptionTest.java]:[XTS]:[2]:method_text:[xt = matchFirst ? ""polo"" : ""POLO"";        assertSaveUiIsShownWithTwoLines(expectedText);    }   ])', 1), ('([6:/android/text/cts/LayoutTest.java]:[XTS]:[6]:method_text:[      assertEquals(0f, widthZero, 0.0f);        assertTrue(widthShort > widthPartShort);    }   ])', 1), ('([2:/android/text/cts/LayoutTest.java]:[XTS]:[2]:method_text:[       assertTrue(widthLonger > widthShort);        assertTrue(widthLongest > widthLonger);    }}])', 1), ('([4:/android/widget/cts/SearchViewTest.java]:[XTS]:[4]:method_text:[mit(""gamma"");        verifyNoMoreInteractions(mockQueryTextListener);    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/SearchViewTest.java]:[XTS]:[3]:method_text:[nce()).onQueryTextSubmit(""beta"");        verifyNoMoreInteractions(mockQueryTextListener);    }}])', 1), ('([1:/com/android/cts/managedprofile/NfcTest.java]:[XTS]:[1]:method_text:[sertFalse(""Nfc beam activity should not be resolved"", isNfcBeamActivityResolved(intent));    }   ])', 1), ('([2:/com/android/cts/managedprofile/NfcTest.java]:[XTS]:[2]:method_text:[tyInfo.name)) {                return true;            }        }        return false;    }}])', 1), ('([3:/android/autofillservice/cts/servicebehavior/ValidatorTest.java]:[XTS]:[3]:method_text:[).findByAutofillId(id);        assertThat(validator.isValid(valueFinder)).isEqualTo(valid);    }}])', 1), ('([4:/android/telecom/cts/TestUtils.java]:[XTS]:[4]:method_text:[tentResolver, Uri deleteUri) {        return contentResolver.delete(deleteUri, null, null);    }}])', 1), ('([1:/com/android/cts/input/VirtualInputDevice.java]:[XTS]:[1]:method_text:[        if (deviceId == mDeviceId) {            mDeviceRemovedSignal.countDown();        }    }}])', 1), ('([3:/android/media/cts/StubMediaRoute2ProviderService.java]:[XTS]:[3]:method_text:[methods[i].getDeclaringClass() != Proxy.class;            }        }        return false;    }}])', 1), ('([14:/android/accessibilityservice/cts/AccessibilityTextActionTest.java]:[XTS]:[14]:method_text:[;        assertEquals(TypedValue.COMPLEX_UNIT_SP, extraRenderingInfo.getTextSizeUnit());    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[AES]:[1]:method_text:[vents.size() + "" events):"");        events.forEach((event) -> Log.d(TAG, toString(event)));    }}])', 1), ('([2:/com/android/cts/verifier/nfc/offhost/UiccTransactionEvent2EmulatorActivity.java]:[XTS]:[2]:method_text:[utton().setEnabled(false);                    }                });            }        }    }}])', 1), ('([1:/android/uirendering/cts/testclasses/PathTests.java]:[XTS]:[1]:method_text:[y(),                        R.drawable.text_path_with_offset, new MSSIMComparer(0.89)));    }   ])', 1), ('([2:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[AES]:[2]:method_text:[iometricManager mBiometricManager;        private KeyguardManager mKeyguardManager;        private])', 1), ('([1:/android/text/cts/StaticLayoutLineBreakingVariantsTest.java]:[XTS]:[1]:method_text:[inal String SAMPLE_TEXT =            ""\\u30D0\\u30C3\\u30C6\\u30EA\\u30FC\\u30BB\\u30FC\\u30D0\\u30FC"";   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[XTS]:[1]:method_text:[(""4815162342"");        } finally {            mUiBot.resetScreenResolution();        }    }   ])', 1), ('([1:/android/autofillservice/cts/SessionLifecycleTest.java]:[XTS]:[1]:method_text:[quest.structure,                ID_USERNAME);        assertTextAndValue(username, ""dude"");    }}])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java]:[XTS]:[6]:method_text:[T_MS);    }    private String getString(int id) {        return mActivity.getString(id);    }}])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[AES]:[2]:method_text:[ } finally {                keyStore.deleteEntry(keystoreAlias);            }        }    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[re.CIPHERSUITE_ECDHE_HKDF_ECDSA_WITH_AES_256_GCM_SHA256);        assertNull(credential);    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[redential returns the expected.        assertNull(store.deleteCredentialByName(""test""));    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[he credential is still there        assertNotNull(store.deleteCredentialByName(""test""));    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[;            assertTrue(false);        }        store.deleteCredentialByName(""test"");    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[P2 bad   -> OK    // - ACP1 bad,  ACP2 good  -> OK    // - ACP1 good, ACP2 good  -> OK    //   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[getEntry(ns, ""Entry not even requested""));        store.deleteCredentialByName(""test"");    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[ + ""  }\\n""                + ""}"", pretty);        store.deleteCredentialByName(""test"");    }   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[AES]:[1]:method_text:[til.getStringEntry(rd, updNs, ""last_name""));        store.deleteCredentialByName(""test"");    }}])', 1)]"	https://github.com	""	[('XTS', 35), ('AES', 21)]	[('[android.security.identity.cts.ProvisioningTest isHalImplemented CtsIdentityTestCases]', 3), ('[android.graphics.fonts.NativeSystemFontTest testMatchFamilyStyleCharacter_notCrash CtsGraphicsTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledThenReEnabledByDeviceConfig CtsContentCaptureServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.TimePickerTestCase testAutoFillAndSave CtsAutoFillServiceTestCases]', 1), ('[android.graphics.cts.PaintFlagsDrawFilterTest testPaintFlagsDrawFilter CtsGraphicsTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testTranslateKeyAcceptsAndroidKeystoreKeys CtsKeystoreTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testAppDomainContext CtsSelinuxEphemeralTestCases]', 1), ('[android.security.SELinuxTargetSdkTest testAppDataContext CtsSelinuxEphemeralTestCases]', 1), ('[android.autofillservice.cts.testcore.CannedFillResponse isNotNull CtsAutoFillServiceTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedWithSameGeneratedSecretKey CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_KeyOperations_Wrap_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_AES CtsKeystoreTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testEventsFromPreviousSessionIsDiscarded CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.commontests.FillEventHistoryCommonTestCase testContextCommitted_noSaveUi_whileFieldsFailedValidation CtsAutoFillServiceTestCases]', 1), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 1), ('[android.autofillservice.cts.saveui.CustomDescriptionTest testSanitizationBeforeBatchUpdates CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.saveui.CustomDescriptionTest testSanitizationBeforeTransformations CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.saveui.CustomDescriptionTest assertSaveUiWithoutCustomDescriptionIsShown CtsAutoFillServiceTestCases]', 1), ('[android.text.cts.LayoutTest testGetDesiredWidthRange CtsTextTestCases]', 1), ('[android.text.cts.LayoutTest testGetDesiredWidth CtsTextTestCases]', 1), ('[android.widget.cts.SearchViewTest testAccessQuery CtsWidgetTestCases]', 1), ('[android.widget.cts.SearchViewTest testEnterKey CtsWidgetTestCases]', 1), ('[com.android.cts.managedprofile.NfcTest testNfcShareDisabled None]', 1), ('[com.android.cts.managedprofile.NfcTest testNfcShareEnabled None]', 1), ('[android.autofillservice.cts.servicebehavior.ValidatorTest testDontShowUiWhenValidatorFails CtsAutoFillServiceTestCases]', 1), ('[android.telecom.cts.TestUtils isPresent CtsTelecomTestCases]', 1), ('[android.media.cts.StubMediaRoute2ProviderService ArrayList CtsMediaTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityTextActionTest testExtraRendering_textViewShouldProvideExtraDataTextSizeWhenRequested CtsAccessibilityServiceTestCases]', 1), ('[com.android.cts.deviceandprofileowner.SecurityLoggingTest testSetDelegateScope_noDelegation None]', 1), ('[android.autofillservice.cts.inline.InlineLoginActivityTest testAutofill_disjointDatasets CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.inline.InlineLoginActivityTest testAutofill_selectDatasetThenHideInlineSuggestion CtsAutoFillServiceTestCases]', 1), ('[com.android.cts.verifier.nfc.offhost.UiccTransactionEvent2EmulatorActivity setPassFailButtonClickListeners None]', 1), ('[android.uirendering.cts.testclasses.PathTests testTextPathWithOffset CtsUiRenderingTestCases]', 1), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest setPassFailButtonClickListeners None]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testDatasetAuthResponseWhileAutofilledAppIsLifecycled CtsAutoFillServiceTestCases]', 1), ('[android.autofillservice.cts.SessionLifecycleTest testSaveRemainsWhenAutofilledAppIsKilled CtsAutoFillServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityTextTraversalTest testSelectionPositionForNonEditableView CtsAccessibilityServiceTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testAesAttestation CtsKeystoreTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest nonExistent CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieve CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveMultipleTimes CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveWithFiltering CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveElementWithNoACP CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAndRetrieveWithEntryNotInRequest CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest nonExistentEntries CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testProvisionAcpIdNotStartingAtZero CtsIdentityTestCases]', 1), ('[android.security.identity.cts.ProvisioningTest testUpdateCredential CtsIdentityTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-6	5.1/H-1-6	05010000.720106	"""[5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p@30 fps resolution.  | [5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p@30fps resolution. *Only 2 instances are required if VP9 codec is present. """	""	""	AVC HEVC VP9	""	""	""	""	[('android.media.cts.EncodeDecodeTest', 18), ('android.mediav2.cts.ExtractorTest', 12), ('android.media.cts.MediaCodecListTest', 10), ('android.media.cts.MediaExtractorTest', 4), ('android.mediastress.cts.NativeMediaTest', 1), ('android.mediastress.cts.HEVCR720pAacShortPlayerTest', 1), ('android.media.metrics.cts.MediaMetricsAtomHostSideTests', 1)]	[('getSimpleName', 3), ('length', 3), ('getSize', 3), ('close', 3), ('validateKeyValuePairs', 3), ('MediaExtractor', 3), ('getTrackCount', 3), ('release', 3), ('input', 3)]	[('CtsMediaTestCases', 32), ('CtsMediaV2TestCases', 12), ('CtsMediaStressTestCases', 2)]	""	android.mediapc.cts.MultiTranscoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiTranscoderPerfTest.java	[('(26,AVC,/android/media/cts/EncodeDecodeTest.java)', 1), ('(1,AVC,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(1,HEVC,/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java)', 1), ('(2,AVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(5,HEVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(10,AVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(7,HEVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(6,VP9,/android/media/cts/MediaCodecListTest.java)', 1), ('(1,AVC,/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java)', 1), ('(71,AVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(45,HEVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(25,VP9,/android/mediav2/cts/ExtractorTest.java)', 1)]	"[('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, false, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, true, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([5:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[5]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[76, 144, 1000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[20, 240, 2000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 144, 1000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 240, 2000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[of byte[] buffers and decoded into Surfaces.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([4:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[4]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([1:/android/mediastress/cts/NativeMediaTest.java]:[AVC]:[1]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([1:/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java]:[HEVC]:[1]:method_text:[""bbb_short.fmpeg.1280x720.mp4.libx265_6500kbps_30fps.libfaac_stereo_128kbps_48000hz.mp4""    };   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[AVC]:[2]:method_text:[aExtractor for profile-level (Dvav1 10.0/Uhd30)    @SmallTest    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvheSt/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvavSe/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[1]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([4:/android/media/cts/MediaCodecListTest.java]:[AVC]:[4]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[                  pp2 != pp && pp2.covers(pp));                }            }        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([3:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[3]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java]:[AVC]:[1]:method_text:[                .build();        s.reportTrackChangeEvent(e);        resetProperties();    }   ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[4]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([8:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[8]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([35:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[35]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([24:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[24]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([18:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[18]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([20:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[20]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([12:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[12]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([6:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[6]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1)]"	""	""	[('AVC', 29), ('HEVC', 11), ('VP9', 7)]	[('[android.media.cts.MediaCodecListTest testRequiredMediaCodecList CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testInputChannelLimits CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 3), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testDataSourceNative CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate CtsMediaV2TestCases]', 3), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvavSe CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheDtr CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheSt CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testVideoPerformancePointsSanity CtsMediaTestCases]', 1), ('[android.media.metrics.cts.MediaMetricsAtomHostSideTests testTrackChangeEvent_audio None]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-5	5.1/H-1-5	05010000.720105	"""[5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.  | [5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. """	""	""	CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances() VideoCapabilities.getSupportedPerformancePoints getSupportedPerformancePoints()	""	""	""	""	[('android.mediapc.cts.MultiDecoderPairPerfTest', 4), ('android.mediapc.cts.MultiEncoderPerfTest', 4), ('android.mediapc.cts.MultiTranscoderPerfTest', 4), ('android.mediapc.cts.MultiEncoderPairPerfTest', 4), ('android.mediapc.cts.MultiDecoderPerfTest', 4), ('android.mediapc.cts.MultiCodecPerfTestBase', 2), ('android.media.cts.MediaCodecListTest', 1), ('com.android.compatibility.common.util.MediaUtils', 1), ('android.media.cts.EncoderTest', 1), ('android.video.cts.CodecPerformanceTestBase', 1), ('android.media.cts.MediaCodecCapabilitiesTest', 1), ('android.media.cts.DecoderTest', 1)]	[('getSimpleName', 23), ('getMaxSupportedInstances', 20), ('getSupportedPerformancePoints', 20), ('inputParams', 20), ('size', 16), ('release', 2), ('getMediaDirString', 1), ('prologue', 1), ('MediaExtractor', 1), ('getTrackCount', 1), ('getCodecInfos', 1)]	[('CtsMediaPerformanceClassTestCases', 22), ('CtsMediaTestCases', 4), ('CtsVideoTestCases', 1)]	""	android.mediapc.cts.MultiTranscoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiTranscoderPerfTest.java	[('(2,getSupportedPerformancePoints(),/android/media/cts/MediaCodecListTest.java)', 1), ('(1,getSupportedPerformancePoints(),/com/android/compatibility/common/util/MediaUtils.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/EncoderTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/video/cts/CodecPerformanceTestBase.java)', 1), ('(2,getMaxSupportedInstances(),/android/media/cts/MediaCodecCapabilitiesTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/DecoderTest.java)', 1)]	"[('([2:/android/media/cts/MediaCodecListTest.java]:[getSupportedPerformancePoints()]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/com/android/compatibility/common/util/MediaUtils.java]:[getSupportedPerformancePoints()]:[1]:method_text:[     *  -------------------------------------- END --------------------------------------     */}])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}])', 1), ('([1:/android/video/cts/CodecPerformanceTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[SawDecOutputEOS = true;        }        mDecoder.releaseOutputBuffer(bufferIndex, render);    }}])', 1), ('([2:/android/media/cts/MediaCodecCapabilitiesTest.java]:[getMaxSupportedInstances()]:[2]:method_text:[/media_codecs.xml: \\n"";           fail(failMessage + xmlOverrides.toString());        }    }   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getMaxSupportedInstances()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/media/cts/DecoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[       continue;            }            return true;        }        return false;    }   ])', 1)]"	""	""	[('getSupportedPerformancePoints()', 9), ('getMaxSupportedInstances()', 9), ('CodecCapabilities.getMaxSupportedInstances', 5), ('VideoCapabilities.getSupportedPerformancePoints', 5)]	[('[android.mediapc.cts.MultiCodecPerfTestBase isSPerfClass CtsMediaPerformanceClassTestCases]', 2), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 1), ('[com.android.compatibility.common.util.MediaUtils getTestName None]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[android.video.cts.CodecPerformanceTestBase isEncoder CtsVideoTestCases]', 1), ('[android.media.cts.MediaCodecCapabilitiesTest testGetMaxSupportedInstances CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testTunneledAudioTimestampProgressVp9 CtsMediaTestCases]', 1)]	True	""	""	""	""	""	""	""	""
7.4.1  . Telephony	7.4.1	C-4-1	7.4.1/C-4-1	07040100.670401	"""C-4-1] MUST NOT report ‘NETWORK_TYPE_IWLAN’ via NetworkRegistrationInfo#getAccessNetworkTechnology() when NetworkRegistrationInfo#getTransportType() is reported as ‘TRANSPORT_TYPE_WWAN’ for the same NetworkRegistrationInfo instance. If device implementations support a single IP Multimedia Subsystem (IMS) registration for both multimedia telephony service (MMTEL) and rich communication service (RCS) features and are expected to comply with cellular carrier requirements regarding using a single IMS registration for all IMS signalling traffic, they:"""	""	""	IMS MMTEL NETWORK_TYPE_IWLAN RCS getTransportType() TRANSPORT_TYPE_WWAN getAccessNetworkTechnology()	""	""	""	""	[('android.telephony.ims.cts.ImsSsDataTest', 14), ('android.telephony.ims.cts.ImsRcsManagerTest', 4), ('android.hdmicec.cts.tv.HdmiCecAudioReturnChannelControlTest', 3), ('android.telephonyprovider.cts.ServiceStateTest', 3), ('android.telephony.ims.cts.TestImsService', 3), ('android.telephony.ims.cts.TestAcsClient', 2), ('android.telephony.cts.ImsiEncryptionInfoTest', 2), ('android.telephony.ims.cts.TestSipTransport', 2), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('android.media.cts.MediaExtractorTest', 1), ('android.provider.cts.simphonebook.SimPhonebookContract_SimRecordsMultiSimTest', 1), ('android.media.cts.VideoEncoderTest', 1), ('android.telephony.ims.cts.TestImsSmsImpl', 1), ('dot.junit.opcodes.monitor_exit.Test_monitor_exit', 1), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 1), ('android.location.cts.gnss.asn1.supl2.supl_init.FormatIndicator', 1), ('android.media.cts.MediaMuxerTest', 1), ('android.appsecurity.cts.AdoptableHostTest', 1), ('android.telephony3.cts.TelephonyManagerTest', 1), ('com.android.cts.deviceandprofileowner.DeviceIdentifiersTest', 1), ('android.telephony.ims.cts.TestSipDelegate', 1), ('com.android.cts.verifier.usb.device.UsbDeviceTestActivity', 1), ('com.android.cts.verifier.audio.ProAudioActivity', 1), ('android.server.wm.WindowInsetsAnimationImeTests', 1)]	[('countDown', 6), ('getApplicationContext', 2), ('getSubscriptionId', 2), ('getViaBranchParameter', 2), ('getSimpleName', 2), ('Object', 2), ('getDelegates', 2), ('stream', 2), ('findFirst', 2), ('getCount', 2), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1), ('setUp', 1), ('getContentResolver', 1), ('getSubscriptionInfoForRemovableSims', 1), ('getSmsFormat', 1), ('onReady', 1), ('waitForMessageSentLatch', 1), ('waitForMessageSentLatchSuccess', 1), ('waitForOnReadyLatch', 1), ('cect_11_1_17_1_DutSendsRequestArcInitiation', 1), ('cect_11_1_17_3_DutSendsRequestArcTermination', 1), ('cect_11_1_17_5_NonAdjacentDeviceArcInitiation', 1), ('getPhysicalAddress', 1), ('getDevice', 1), ('getAssignedValue', 1), ('now', 1), ('nanoTime', 1), ('getMaxPacketSize', 1), ('getPassButton', 1), ('IntentFilter', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getApplicationInfo', 1), ('getSerialNumber', 1), ('close', 1), ('Thread', 1), ('run', 1), ('start', 1), ('getProductName', 1), ('ProAudioActivity', 1), ('super', 1)]	[('CtsTelephonyTestCases', 29), ('CtsMediaTestCases', 3), ('CtsHdmiCecHostTestCases', 3), ('CtsTelephonyProviderTestCases', 3), ('CtsUsageStatsTestCases', 1), ('CtsSimPhonebookProviderTestCases', 1), ('CtsWifiTestCases', 1), ('CtsLocationGnssTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsTelephony3TestCases', 1), ('CtsWindowManagerDeviceTestCases', 1)]	""	android.telephony.cts.TelephonyManagerTest	testIWlanServiceState()	CtsTelephonyTestCases	/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java	[('(4,getTransportType(),/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(5,RCS,/android/media/cts/MediaExtractorTest.java)', 1), ('(6,IMS,/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsMultiSimTest.java)', 1), ('(1,IMS,/android/media/cts/VideoEncoderTest.java)', 1), ('(19,IMS,/android/telephony/ims/cts/TestImsSmsImpl.java)', 1), ('(48,IMS,/android/telephony/ims/cts/ImsRcsManagerTest.java)', 1), ('(16,RCS,/android/telephony/ims/cts/ImsRcsManagerTest.java)', 1), ('(5,RCS,/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java)', 1), ('(11,IMS,/android/telephony/ims/cts/TestAcsClient.java)', 1), ('(7,RCS,/android/telephony/ims/cts/TestAcsClient.java)', 1), ('(4,IMS,/android/telephony/cts/ImsiEncryptionInfoTest.java)', 1), ('(1,IMS,/dot/junit/opcodes/monitor_exit/Test_monitor_exit.java)', 1), ('(1,IMS,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,IMS,/android/location/cts/gnss/asn1/supl2/supl_init/FormatIndicator.java)', 1), ('(18,RCS,/android/media/cts/MediaMuxerTest.java)', 1), ('(2,IMS,/android/appsecurity/cts/AdoptableHostTest.java)', 1), ('(193,IMS,/android/telephony/ims/cts/ImsSsDataTest.java)', 1), ('(2,IMS,/android/telephony3/cts/TelephonyManagerTest.java)', 1), ('(3,IMS,/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java)', 1), ('(19,IMS,/android/telephony/ims/cts/TestSipDelegate.java)', 1), ('(3,TRANSPORT_TYPE_WWAN,/android/telephonyprovider/cts/ServiceStateTest.java)', 1), ('(2,IMS,/com/android/cts/verifier/usb/device/UsbDeviceTestActivity.java)', 1), ('(10,IMS,/android/telephony/ims/cts/TestSipTransport.java)', 1), ('(1,RCS,/android/telephony/ims/cts/TestSipTransport.java)', 1), ('(63,IMS,/com/android/cts/verifier/audio/ProAudioActivity.java)', 1), ('(9,IMS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(71,IMS,/android/telephony/ims/cts/TestImsService.java)', 1), ('(21,MMTEL,/android/telephony/ims/cts/TestImsService.java)', 1), ('(28,RCS,/android/telephony/ims/cts/TestImsService.java)', 1)]	"[('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[Data = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeIcb());    }   ])', 2), ('([4:/android/app/usage/cts/NetworkUsageStatsTest.java]:[getTransportType()]:[4]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([5:/android/media/cts/MediaExtractorTest.java]:[RCS]:[5]:method_text:[ak;            }        }        assertTrue(""could not read alac mov"", totalSize > 0);    }   ])', 1), ('([6:/android/provider/cts/simphonebook/SimPhonebookContract_SimRecordsMultiSimTest.java]:[IMS]:[6]:method_text:[.get(0).getSubscriptionId();        mSubscriptionId2 = infos.get(1).getSubscriptionId();    }   ])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[IMS]:[1]:method_text:[G-4 are not defined for 720p or 1080p    // test for it, in case device claims support for it.   ])', 1), ('([19:/android/telephony/ims/cts/TestImsSmsImpl.java]:[IMS]:[19]:method_text:[terruptedException e) {            // complete = false        }        return complete;    }}])', 1), ('([15:/android/telephony/ims/cts/ImsRcsManagerTest.java]:[IMS]:[15]:method_text:[ SIM in the device!"");        }    }    /**     * Test Permissions on various APIs.     */   ])', 1), ('([33:/android/telephony/ims/cts/ImsRcsManagerTest.java]:[IMS]:[33]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([2:/android/telephony/ims/cts/ImsRcsManagerTest.java]:[RCS]:[2]:method_text:[ SIM in the device!"");        }    }    /**     * Test Permissions on various APIs.     */   ])', 1), ('([14:/android/telephony/ims/cts/ImsRcsManagerTest.java]:[RCS]:[14]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([2:/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java]:[RCS]:[2]:method_text:[d>}     * message to the Audio System when ARC is initiated.     */    @Ignore(""b/174813656"")   ])', 1), ('([2:/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java]:[RCS]:[2]:method_text:[>}     * message to the Audio System when ARC is terminated.     */    @Ignore(""b/174813656"")   ])', 1), ('([1:/android/hdmicec/cts/tv/HdmiCecAudioReturnChannelControlTest.java]:[RCS]:[1]:method_text:[            return true;        } catch (Exception e) {            return false;        }    }}])', 1), ('([11:/android/telephony/ims/cts/TestAcsClient.java]:[IMS]:[11]:method_text:[fyPreProvisioning(byte[] conf) {        mImsConfigImpl.notifyPreProvisioningReceived(conf);    }}])', 1), ('([7:/android/telephony/ims/cts/TestAcsClient.java]:[RCS]:[7]:method_text:[fyPreProvisioning(byte[] conf) {        mImsConfigImpl.notifyPreProvisioningReceived(conf);    }}])', 1), ('([2:/android/telephony/cts/ImsiEncryptionInfoTest.java]:[IMS]:[2]:method_text:[XD57aGJRvQS4pxkP8ANhM="";    /**     * Tests the parceling/un-parceling of the object.     */   ])', 1), ('([2:/android/telephony/cts/ImsiEncryptionInfoTest.java]:[IMS]:[2]:method_text:[Factory.getInstance(""X.509"");        return cf.generateCertificate(istream).getPublicKey();    }}])', 1), ('([1:/dot/junit/opcodes/monitor_exit/Test_monitor_exit.java]:[IMS]:[1]:method_text:[MonitorStateException imse) {            // expected            t.result = true;        }    }}])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[IMS]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/location/cts/gnss/asn1/supl2/supl_init/FormatIndicator.java]:[IMS]:[1]:method_text:[String toIndentedString(String indent) {    return ""FormatIndicator = "" + getValue() + "";\\n"";  }}])', 1), ('([18:/android/media/cts/MediaMuxerTest.java]:[RCS]:[18]:method_text:[dvance) {            fail(""either audio track has not reached its last sample"");        }    }}])', 1), ('([2:/android/appsecurity/cts/AdoptableHostTest.java]:[IMS]:[2]:method_text:[0);        }        assertTrue(""Volumes are not ready: "" + result, noCheckingEjecting);    }   ])', 1), ('([10:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[10]:method_text:[l.ArrayList;import java.util.List;@RunWith(AndroidJUnit4.class)public class ImsSsDataTest {   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[rcel(parcel);        parcel.recycle();        assertTrue(unparceledData.isTypeClip());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[rue(unparceledData.isTypeCf());        assertTrue(unparceledData.isTypeUnConditional());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[dData = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeCw());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeColr());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeColp());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeClir());    }   ])', 1), ('([44:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[44]:method_text:[a = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeBarring());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[msSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeInterrogation());    }   ])', 1), ('([18:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[18]:method_text:[equestType());        assertEquals(ImsSsData.SS_CFU, unparceledData.getServiceType());    }   ])', 1), ('([17:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[17]:method_text:[nfo.getNumber());        assertEquals(info.getTimeSeconds(), testInfo.getTimeSeconds());    }   ])', 1), ('([23:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[23]:method_text:[a.CREATOR.createFromParcel(parcel);        parcel.recycle();        return unparceledData;    }}])', 1), ('([2:/android/telephony3/cts/TelephonyManagerTest.java]:[IMS]:[2]:method_text:[ce identifiers, caught ""                    + ""SecurityException instead: "" + e);        }    }}])', 1), ('([3:/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java]:[IMS]:[3]:method_text:[permission must be able to access ""                    + ""the device IDs: "" + e);        }    }}])', 1), ('([19:/android/telephony/ims/cts/TestSipDelegate.java]:[IMS]:[19]:method_text:[    public void notifyOnDestroyed(int reason) {        mStateCallback.onDestroyed(reason);    }}])', 1), ('([1:/android/telephonyprovider/cts/ServiceStateTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[ifies that when data network type changed, the observer should receive the notification.     */   ])', 1), ('([1:/android/telephonyprovider/cts/ServiceStateTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[     * Verifies that the duplex mode is valid and matches ServiceState#getDuplexMode().     */   ])', 1), ('([1:/android/telephonyprovider/cts/ServiceStateTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[  * Verifies that the data reg state is valid and matches ServiceState#getDataRegState()     */   ])', 1), ('([2:/com/android/cts/verifier/usb/device/UsbDeviceTestActivity.java]:[IMS]:[2]:method_text:[     unregisterReceiver(mUsbDevicePermissionReceiver);        }        super.onDestroy();    }}])', 1), ('([10:/android/telephony/ims/cts/TestSipTransport.java]:[IMS]:[10]:method_text:[ex) {        synchronized (mLock) {            sLatches[latchIndex].countDown();        }    }}])', 1), ('([1:/android/telephony/ims/cts/TestSipTransport.java]:[RCS]:[1]:method_text:[ex) {        synchronized (mLock) {            sLatches[latchIndex].countDown();        }    }}])', 1), ('([63:/com/android/cts/verifier/audio/ProAudioActivity.java]:[IMS]:[63]:method_text:[audio_proaudio_NA));            }            calculatePass();            break;        }    }}])', 1), ('([9:/android/server/wm/WindowInsetsAnimationImeTests.java]:[IMS]:[9]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([71:/android/telephony/ims/cts/TestImsService.java]:[IMS]:[71]:method_text:[;        }    }    public ImsConfigImplBase getConfig() {        return mTestImsConfig;    }}])', 1), ('([21:/android/telephony/ims/cts/TestImsService.java]:[MMTEL]:[21]:method_text:[;        }    }    public ImsConfigImplBase getConfig() {        return mTestImsConfig;    }}])', 1), ('([28:/android/telephony/ims/cts/TestImsService.java]:[RCS]:[28]:method_text:[;        }    }    public ImsConfigImplBase getConfig() {        return mTestImsConfig;    }}])', 1)]"	""	""	[('IMS', 34), ('RCS', 10), ('TRANSPORT_TYPE_WWAN', 3), ('getTransportType()', 1), ('MMTEL', 1)]	[('[android.telephony.ims.cts.TestImsService TestImsRegistration CtsTelephonyTestCases]', 3), ('[android.telephony.ims.cts.ImsRcsManagerTest beforeAllTests CtsTelephonyTestCases]', 2), ('[android.telephony.ims.cts.ImsRcsManagerTest testMethodPermissions CtsTelephonyTestCases]', 2), ('[android.hdmicec.cts.tv.HdmiCecAudioReturnChannelControlTest isTrue CtsHdmiCecHostTestCases]', 2), ('[android.telephony.ims.cts.TestAcsClient TestAcsClient CtsTelephonyTestCases]', 2), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[android.media.cts.MediaExtractorTest testGetAudioPresentations CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9Surf480p CtsMediaTestCases]', 1), ('[android.telephony.cts.ImsiEncryptionInfoTest testParcel CtsTelephonyTestCases]', 1), ('[dot.junit.opcodes.monitor_exit.Test_monitor_exit testVFE5 None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 1), ('[android.location.cts.gnss.asn1.supl2.supl_init.FormatIndicator isExtensionValue CtsLocationGnssTestCases]', 1), ('[android.media.cts.MediaMuxerTest testTimestampsStartOffsetNegativeAudioVideo CtsMediaTestCases]', 1), ('[android.appsecurity.cts.AdoptableHostTest testFeatureConsistent CtsAppSecurityHostTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testParcelUnparcel CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeCF CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeCW CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeColr CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeColp CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeClir CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeIcb CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeIcbAnon CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeBarring CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testRequestTypeInterrogation CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testConstructor CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testSetCallForwardingInfo CtsTelephonyTestCases]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testSetSuppServiceInfo CtsTelephonyTestCases]', 1), ('[android.telephony3.cts.TelephonyManagerTest testDeviceIdentifiersAreNotAccessible CtsTelephony3TestCases]', 1), ('[com.android.cts.deviceandprofileowner.DeviceIdentifiersTest testProfileOwnerCanGetDeviceIdentifiersWithPermission None]', 1), ('[android.telephony.ims.cts.TestSipDelegate isEmpty CtsTelephonyTestCases]', 1), ('[android.telephonyprovider.cts.ServiceStateTest testDataNetworkType_noChangeObserved CtsTelephonyProviderTestCases]', 1), ('[android.telephonyprovider.cts.ServiceStateTest testDataNetworkType_changeObserved CtsTelephonyProviderTestCases]', 1), ('[android.telephonyprovider.cts.ServiceStateTest testGetDuplexMode_noChangeObserved CtsTelephonyProviderTestCases]', 1), ('[com.android.cts.verifier.usb.device.UsbDeviceTestActivity getAccessoryList None]', 1), ('[com.android.cts.verifier.audio.ProAudioActivity isHDMIValid None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite CtsWindowManagerDeviceTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-8	5.1/H-1-8	05010000.720108	"""[5.1/H-1-8] MUST have a codec initialization latency of 50 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load.Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization.  | [5.1/H-1-8] MUST have a codec initialization latency of 40 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. """	""	""	load.Load	""	""	""	""	""	""	""	""	android.mediapc.cts.EncoderInitializationLatencyTest	testInitializationLatency()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/EncoderInitializationLatencyTest.java	""	""	""	""	""	""	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-4	5.1/H-1-4	05010000.720104	"""[5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps.  | [5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30fps. *Only 2 instances are required if VP9 codec is present. """	""	""	AVC HEVC VP9	""	""	""	""	[('android.media.cts.EncodeDecodeTest', 18), ('android.mediav2.cts.ExtractorTest', 12), ('android.media.cts.MediaCodecListTest', 10), ('android.media.cts.MediaExtractorTest', 4), ('android.mediastress.cts.NativeMediaTest', 1), ('android.mediastress.cts.HEVCR720pAacShortPlayerTest', 1), ('android.media.metrics.cts.MediaMetricsAtomHostSideTests', 1)]	[('getSimpleName', 3), ('length', 3), ('getSize', 3), ('close', 3), ('validateKeyValuePairs', 3), ('MediaExtractor', 3), ('getTrackCount', 3), ('release', 3), ('input', 3)]	[('CtsMediaTestCases', 32), ('CtsMediaV2TestCases', 12), ('CtsMediaStressTestCases', 2)]	""	android.mediapc.cts.MultiEncoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java	[('(26,AVC,/android/media/cts/EncodeDecodeTest.java)', 1), ('(1,AVC,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(1,HEVC,/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java)', 1), ('(2,AVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(5,HEVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(10,AVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(7,HEVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(6,VP9,/android/media/cts/MediaCodecListTest.java)', 1), ('(1,AVC,/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java)', 1), ('(71,AVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(45,HEVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(25,VP9,/android/mediav2/cts/ExtractorTest.java)', 1)]	"[('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, false, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, true, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([5:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[5]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[76, 144, 1000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[20, 240, 2000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 144, 1000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 240, 2000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[of byte[] buffers and decoded into Surfaces.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([4:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[4]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([1:/android/mediastress/cts/NativeMediaTest.java]:[AVC]:[1]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([1:/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java]:[HEVC]:[1]:method_text:[""bbb_short.fmpeg.1280x720.mp4.libx265_6500kbps_30fps.libfaac_stereo_128kbps_48000hz.mp4""    };   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[AVC]:[2]:method_text:[aExtractor for profile-level (Dvav1 10.0/Uhd30)    @SmallTest    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvheSt/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvavSe/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[1]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([4:/android/media/cts/MediaCodecListTest.java]:[AVC]:[4]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[                  pp2 != pp && pp2.covers(pp));                }            }        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([3:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[3]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java]:[AVC]:[1]:method_text:[                .build();        s.reportTrackChangeEvent(e);        resetProperties();    }   ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[4]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([8:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[8]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([35:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[35]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([24:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[24]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([18:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[18]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([20:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[20]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([12:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[12]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([6:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[6]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1)]"	""	""	[('AVC', 29), ('HEVC', 11), ('VP9', 7)]	[('[android.media.cts.MediaCodecListTest testRequiredMediaCodecList CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testInputChannelLimits CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 3), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testDataSourceNative CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate CtsMediaV2TestCases]', 3), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvavSe CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheDtr CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheSt CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testVideoPerformancePointsSanity CtsMediaTestCases]', 1), ('[android.media.metrics.cts.MediaMetricsAtomHostSideTests testTrackChangeEvent_audio None]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.3	H-1-1	5.3/H-1-1	05030000.720101	"""[5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback.  | [5.3/H-1-1] MUST NOT drop more than 2 frames in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. """	""	""	AAC	""	""	""	""	[('android.mediav2.cts.ExtractorTest', 8), ('android.media.cts.NativeDecoderTest', 8), ('android.media.cts.MediaCodecListTest', 4), ('android.hardware.camera2.cts.CameraDeviceTest', 3), ('com.android.cts.appdataisolation.appa.AppATests', 3), ('android.media.cts.MediaMuxerTest', 3), ('android.mediastress.cts.NativeMediaTest', 2), ('android.hardware.camera2.cts.FlashlightTest', 2), ('android.hardware.camera2.cts.CameraManagerTest', 2), ('com.android.cts.isolatedsplitapp.feature_b.FeatureBActivity', 1), ('com.android.cts.verifier.camera.fov.PhotoCaptureActivity', 1), ('android.mediastress.cts.HEVCR720pAacShortPlayerTest', 1), ('android.media.cts.MediaExtractorTest', 1), ('com.android.cts.usespermissiondiffcertapp.Utils', 1), ('android.mediav2.cts.MuxerUnitTest', 1), ('android.mediastress.cts.H264R1080pAacLongPlayerTest', 1), ('com.android.cts.isolatedsplitapp.feature_a.FeatureAActivity', 1), ('android.hardware.camera2.cts.helpers.CameraSessionUtils', 1), ('android.security.cts.TestMedi', 1), ('android.mediastress.cts.NativeMediaActivity', 1), ('android.taskswitching.appa.AppAActivity', 1), ('android.telephony.cts.TelephonyRegistryManagerTest', 1)]	[('Intent', 7), ('setUp', 7), ('getContext', 4), ('poll', 3), ('getLayoutInflater', 2), ('getSimpleName', 2), ('getItemCount', 2), ('getUri', 2), ('toString', 2), ('never', 2), ('tearDown', 2), ('getMediaDirString', 2), ('getStateWaiter', 2), ('getWindow', 2), ('getExternalCacheDir', 1), ('getReportedFovDegrees', 1), ('getNumberOfCameras', 1), ('getHolder', 1), ('getTargetContext', 1), ('Bundle', 1), ('getContentResolver', 1), ('getPackageName', 1), ('clearPrimaryClip', 1), ('getCacheDir', 1), ('BlockingStateCallback', 1), ('anyInt', 1), ('length', 1), ('getSize', 1), ('close', 1), ('validateKeyValuePairs', 1), ('MediaExtractor', 1), ('getTrackCount', 1), ('release', 1), ('input', 1), ('hasFlash', 1), ('getIntent', 1), ('onSurfaceCreated', 1), ('Runnable', 1), ('run', 1), ('createEngine', 1), ('setSurfaceForNative', 1), ('getMediaString', 1), ('getPackageManager', 1), ('getStatSize', 1)]	[('CtsMediaTestCases', 16), ('CtsMediaV2TestCases', 9), ('CtsCameraTestCases', 7), ('CtsMediaStressTestCases', 5), ('CtsSecurityBulletinHostTestCases', 1), ('CtsTelephonyTestCases', 1)]	""	android.mediapc.cts.FrameDropTest	testDecodeToSurface()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/FrameDropTest.java	[('(2,AAC,/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java)', 1), ('(5,AAC,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(2,AAC,/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java)', 1), ('(11,AAC,/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java)', 1), ('(2,AAC,/android/media/cts/MediaExtractorTest.java)', 1), ('(21,AAC,/android/media/cts/MediaCodecListTest.java)', 1), ('(2,AAC,/com/android/cts/usespermissiondiffcertapp/Utils.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(46,AAC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(4,AAC,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,AAC,/android/mediav2/cts/MuxerUnitTest.java)', 1), ('(3,AAC,/android/mediastress/cts/H264R1080pAacLongPlayerTest.java)', 1), ('(21,AAC,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,AAC,/com/android/cts/isolatedsplitapp/feature_a/FeatureAActivity.java)', 1), ('(9,AAC,/android/hardware/camera2/cts/helpers/CameraSessionUtils.java)', 1), ('(1,AAC,/android/security/cts/TestMedia.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(9,AAC,/android/mediastress/cts/NativeMediaActivity.java)', 1), ('(13,AAC,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(15,AAC,/android/media/cts/MediaMuxerTest.java)', 1), ('(1,AAC,/android/taskswitching/appa/AppAActivity.java)', 1), ('(3,AAC,/android/telephony/cts/TelephonyRegistryManagerTest.java)', 1)]	"[('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[estName.getMethodName() + "" failed for mime: "" + mMime, isOk);        }        @SmallTest       ])', 2), ('([2:/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java]:[AAC]:[2]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_b_textview, linearLayout);    }}])', 1), ('([2:/android/mediastress/cts/NativeMediaTest.java]:[AAC]:[2]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([3:/android/mediastress/cts/NativeMediaTest.java]:[AAC]:[3]:method_text:[us); // null means time-out        Assert.assertEquals(expectAlive, status.booleanValue());    }}])', 1), ('([2:/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java]:[AAC]:[2]:method_text:[           "": "" + e.getMessage(), Toast.LENGTH_LONG).show();        }        return false;    }}])', 1), ('([11:/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java]:[AAC]:[11]:method_text:[""bbb_short.fmpeg.1280x720.mp4.libx265_6500kbps_30fps.libfaac_stereo_128kbps_48000hz.mp4""    };   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[AAC]:[2]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([4:/android/media/cts/MediaCodecListTest.java]:[AAC]:[4]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([8:/android/media/cts/MediaCodecListTest.java]:[AAC]:[8]:method_text:[        assertNotNull(""Profile "" + profile + "" must be supported."", codecName);        }    }   ])', 1), ('([7:/android/media/cts/MediaCodecListTest.java]:[AAC]:[7]:method_text:[        assertNotNull(""Profile "" + profile + "" must be supported."", codecName);        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AAC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/com/android/cts/usespermissiondiffcertapp/Utils.java]:[AAC]:[2]:method_text:[N_VERIFY_OUTGOING_PERSISTED);        intent.putExtra(EXTRA_URI, uri);        call(intent);    }}])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[2]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                cam1Cb = null;            }        }    }   ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[5]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([7:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[7]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[te point for a given         * choice of timestamp and mode.         */        @LargeTest       ])', 1), ('([1:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[1]:method_text:[estName.getMethodName() + "" failed for mime: "" + mMime, isOk);        }        @LargeTest       ])', 1), ('([26:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[26]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AAC]:[4]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[1]:method_text:[sc/profiles/cur/""+ getCurrentUserId() + ""/""                + mContext.getPackageName());    }   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[1]:method_text:[tDirIsAccessible(""/data/misc/profiles/ref/""                + mContext.getPackageName());    }   ])', 1), ('([2:/com/android/cts/appdataisolation/appa/AppATests.java]:[AAC]:[2]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([1:/android/mediav2/cts/MuxerUnitTest.java]:[AAC]:[1]:method_text:[/ expected            } finally {                muxer.release();            }        }       ])', 1), ('([3:/android/mediastress/cts/H264R1080pAacLongPlayerTest.java]:[AAC]:[3]:method_text:[bb_full.ffmpeg.1920x1080.mp4.libx264_10000kbps_30fps.libfaac_stereo_192kbps_48000Hz.mp4""    };   ])', 1), ('([9:/android/media/cts/NativeDecoderTest.java]:[AAC]:[9]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([2:/android/media/cts/NativeDecoderTest.java]:[AAC]:[2]:method_text:[     if (testsRun == 0) {            MediaUtils.skipTest(""no decoders found"");        }    }   ])', 1), ('([5:/android/media/cts/NativeDecoderTest.java]:[AAC]:[5]:method_text:[e,            int fd, long startOffset, long length);    @Presubmit    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[p4_h264_1000kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[3gp_h263_300kbps_25fps_aac_stereo_128kbps_11025hz.3gp"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[p4_mpeg2_105kbps_25fps_aac_stereo_128kbps_44100hz.mp4"", false);    }    @NonMediaMainlineTest   ])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[AAC]:[1]:method_text:[erNative(int in, long inoffset, long insize,            int out, boolean webm);    @Presubmit   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/feature_a/FeatureAActivity.java]:[AAC]:[1]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_a_textview, linearLayout);    }}])', 1), ('([9:/android/hardware/camera2/cts/helpers/CameraSessionUtils.java]:[AAC]:[9]:method_text:[onstructor for noninstantiability    private CameraSessionUtils() { throw new AssertionError(); }}])', 1), ('([1:/android/security/cts/TestMedia.java]:[AAC]:[1]:method_text:[ in self (Android P),     *                          SIGABRT in self (Android Q onward)     */   ])', 1), ('([1:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[1]:method_text:[f (info.hasFlash()) {                mFlashCameraIdList.add(id);            }        }    }   ])', 1), ('([3:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[3]:method_text:[ble e) {                    fail(e.getMessage());                }            }        }    }}])', 1), ('([9:/android/mediastress/cts/NativeMediaActivity.java]:[AAC]:[9]:method_text:[ad jni on initialization */    static {         System.loadLibrary(""ctsmediastress_jni"");    }}])', 1), ('([9:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[9]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);        return -1; // unreachable    }   ])', 1), ('([4:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[4]:method_text:[pening the same device multiple times and make sure the right     * error state is set.     */   ])', 1), ('([9:/android/media/cts/MediaMuxerTest.java]:[AAC]:[9]:method_text:[neAndVerify(source, outputFilePath, 1, 180, MediaMuxer.OutputFormat.MUXER_OUTPUT_MPEG_4);    }   ])', 1), ('([4:/android/media/cts/MediaMuxerTest.java]:[AAC]:[4]:method_text:[e frame     * drops as in b/63590381 and b/64949961 while B Frames encoding is enabled.     */   ])', 1), ('([2:/android/media/cts/MediaMuxerTest.java]:[AAC]:[2]:method_text:[dvance) {            fail(""either audio track has not reached its last sample"");        }    }}])', 1), ('([1:/android/taskswitching/appa/AppAActivity.java]:[AAC]:[1]:method_text:[    getIntent().<RemoteCallback>getParcelableExtra(""callback"").sendResult(null);        });    }}])', 1), ('([3:/android/telephony/cts/TelephonyRegistryManagerTest.java]:[AAC]:[3]:method_text:[queue.poll(TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);        assertEquals(testValue, result);    }}])', 1)]"	""	""	[('AAC', 48)]	[('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[android.mediastress.cts.NativeMediaTest testDefaultPlay CtsMediaStressTestCases]', 1), ('[com.android.cts.verifier.camera.fov.PhotoCaptureActivity OnClickListener None]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testRequiredMediaCodecList CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testFindDecoderWithAacProfile CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testFindEncoderWithAacProfile CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testInputChannelLimits CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice CtsCameraTestCases]', 1), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testDataSourceNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtract CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testSeekToZero CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtractNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testSeekToZeroNative CtsMediaV2TestCases]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate CtsMediaV2TestCases]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppACurProfileDataAccessible None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppARefProfileDataAccessible None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAUnlockDeviceAndVerifyCeDeExternalDataExist None]', 1), ('[android.mediav2.cts.MuxerUnitTest testIfCorruptMediaFormatIsRejected CtsMediaV2TestCases]', 1), ('[android.media.cts.NativeDecoderTest SKIP_testExtractor CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSource CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSourceAudioOnly CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testDataSourceWithCallback CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerAvc CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerH263 CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerVp9Hdr CtsMediaTestCases]', 1), ('[android.media.cts.NativeDecoderTest testMuxerMpeg4 CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.helpers.CameraSessionUtils getMockCaptureListener None]', 1), ('[android.security.cts.TestMedi testPocCVE_2020_0451 CtsSecurityBulletinHostTestCases]', 1), ('[android.hardware.camera2.cts.FlashlightTest testTorchModeExceptions CtsCameraTestCases]', 1), ('[android.mediastress.cts.NativeMediaActivity exists CtsMediaStressTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest NoopCameraListener CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerOpenAllCameras CtsCameraTestCases]', 1), ('[android.media.cts.MediaMuxerTest SKIP_testVideoAudio CtsMediaTestCases]', 1), ('[android.media.cts.MediaMuxerTest testWebmOutput CtsMediaTestCases]', 1), ('[android.media.cts.MediaMuxerTest testTimestampsStartOffsetNegativeAudioVideo CtsMediaTestCases]', 1), ('[android.taskswitching.appa.AppAActivity getListView None]', 1), ('[android.telephony.cts.TelephonyRegistryManagerTest testNotifyDataActivityChanged CtsTelephonyTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-1	5.1/H-1-1	05010000.720101	"""[5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.  | [5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. """	""	""	CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances() VideoCapabilities.getSupportedPerformancePoints getSupportedPerformancePoints()	""	""	""	""	[('android.mediapc.cts.MultiDecoderPairPerfTest', 4), ('android.mediapc.cts.MultiEncoderPerfTest', 4), ('android.mediapc.cts.MultiTranscoderPerfTest', 4), ('android.mediapc.cts.MultiEncoderPairPerfTest', 4), ('android.mediapc.cts.MultiDecoderPerfTest', 4), ('android.mediapc.cts.MultiCodecPerfTestBase', 2), ('android.media.cts.MediaCodecListTest', 1), ('com.android.compatibility.common.util.MediaUtils', 1), ('android.media.cts.EncoderTest', 1), ('android.video.cts.CodecPerformanceTestBase', 1), ('android.media.cts.MediaCodecCapabilitiesTest', 1), ('android.media.cts.DecoderTest', 1)]	[('getSimpleName', 23), ('getMaxSupportedInstances', 20), ('getSupportedPerformancePoints', 20), ('inputParams', 20), ('size', 16), ('release', 2), ('getMediaDirString', 1), ('prologue', 1), ('MediaExtractor', 1), ('getTrackCount', 1), ('getCodecInfos', 1)]	[('CtsMediaPerformanceClassTestCases', 22), ('CtsMediaTestCases', 4), ('CtsVideoTestCases', 1)]	""	android.mediapc.cts.MultiDecoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiDecoderPerfTest.java	[('(2,getSupportedPerformancePoints(),/android/media/cts/MediaCodecListTest.java)', 1), ('(1,getSupportedPerformancePoints(),/com/android/compatibility/common/util/MediaUtils.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/EncoderTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/video/cts/CodecPerformanceTestBase.java)', 1), ('(2,getMaxSupportedInstances(),/android/media/cts/MediaCodecCapabilitiesTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/DecoderTest.java)', 1)]	"[('([2:/android/media/cts/MediaCodecListTest.java]:[getSupportedPerformancePoints()]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/com/android/compatibility/common/util/MediaUtils.java]:[getSupportedPerformancePoints()]:[1]:method_text:[     *  -------------------------------------- END --------------------------------------     */}])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}])', 1), ('([1:/android/video/cts/CodecPerformanceTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[SawDecOutputEOS = true;        }        mDecoder.releaseOutputBuffer(bufferIndex, render);    }}])', 1), ('([2:/android/media/cts/MediaCodecCapabilitiesTest.java]:[getMaxSupportedInstances()]:[2]:method_text:[/media_codecs.xml: \\n"";           fail(failMessage + xmlOverrides.toString());        }    }   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getMaxSupportedInstances()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/media/cts/DecoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[       continue;            }            return true;        }        return false;    }   ])', 1)]"	""	""	[('getSupportedPerformancePoints()', 9), ('getMaxSupportedInstances()', 9), ('CodecCapabilities.getMaxSupportedInstances', 5), ('VideoCapabilities.getSupportedPerformancePoints', 5)]	[('[android.mediapc.cts.MultiCodecPerfTestBase isSPerfClass CtsMediaPerformanceClassTestCases]', 2), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 1), ('[com.android.compatibility.common.util.MediaUtils getTestName None]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[android.video.cts.CodecPerformanceTestBase isEncoder CtsVideoTestCases]', 1), ('[android.media.cts.MediaCodecCapabilitiesTest testGetMaxSupportedInstances CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testTunneledAudioTimestampProgressVp9 CtsMediaTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-3	5.1/H-1-3	05010000.720103	"""[5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods.  | [5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. """	""	""	CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances() VideoCapabilities.getSupportedPerformancePoints getSupportedPerformancePoints()	""	""	""	""	[('android.mediapc.cts.MultiDecoderPairPerfTest', 4), ('android.mediapc.cts.MultiEncoderPerfTest', 4), ('android.mediapc.cts.MultiTranscoderPerfTest', 4), ('android.mediapc.cts.MultiEncoderPairPerfTest', 4), ('android.mediapc.cts.MultiDecoderPerfTest', 4), ('android.mediapc.cts.MultiCodecPerfTestBase', 2), ('android.media.cts.MediaCodecListTest', 1), ('com.android.compatibility.common.util.MediaUtils', 1), ('android.media.cts.EncoderTest', 1), ('android.video.cts.CodecPerformanceTestBase', 1), ('android.media.cts.MediaCodecCapabilitiesTest', 1), ('android.media.cts.DecoderTest', 1)]	[('getSimpleName', 23), ('getMaxSupportedInstances', 20), ('getSupportedPerformancePoints', 20), ('inputParams', 20), ('size', 16), ('release', 2), ('getMediaDirString', 1), ('prologue', 1), ('MediaExtractor', 1), ('getTrackCount', 1), ('getCodecInfos', 1)]	[('CtsMediaPerformanceClassTestCases', 22), ('CtsMediaTestCases', 4), ('CtsVideoTestCases', 1)]	""	android.mediapc.cts.MultiEncoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java	[('(2,getSupportedPerformancePoints(),/android/media/cts/MediaCodecListTest.java)', 1), ('(1,getSupportedPerformancePoints(),/com/android/compatibility/common/util/MediaUtils.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiTranscoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/EncoderTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/video/cts/CodecPerformanceTestBase.java)', 1), ('(2,getMaxSupportedInstances(),/android/media/cts/MediaCodecCapabilitiesTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiCodecPerfTestBase.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/DecoderTest.java)', 1)]	"[('([2:/android/media/cts/MediaCodecListTest.java]:[getSupportedPerformancePoints()]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/com/android/compatibility/common/util/MediaUtils.java]:[getSupportedPerformancePoints()]:[1]:method_text:[     *  -------------------------------------- END --------------------------------------     */}])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiTranscoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ceed in     * transcoding/decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/media/cts/EncoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[            muxer.stop();            muxer.release();            muxer = null;        }    }}])', 1), ('([1:/android/video/cts/CodecPerformanceTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[SawDecOutputEOS = true;        }        mDecoder.releaseOutputBuffer(bufferIndex, render);    }}])', 1), ('([2:/android/media/cts/MediaCodecCapabilitiesTest.java]:[getMaxSupportedInstances()]:[2]:method_text:[/media_codecs.xml: \\n"";           fail(failMessage + xmlOverrides.toString());        }    }   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[sessions succeed in decoding     * with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getMaxSupportedInstances()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/mediapc/cts/MultiCodecPerfTestBase.java]:[getSupportedPerformancePoints()]:[1]:method_text:[minOfMaxFrameRates / 30.0),                (int) (minOfMaxMacroBlockRates / 3600.0 / 30)));    }}])', 1), ('([1:/android/media/cts/DecoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[       continue;            }            return true;        }        return false;    }   ])', 1)]"	""	""	[('getSupportedPerformancePoints()', 9), ('getMaxSupportedInstances()', 9), ('CodecCapabilities.getMaxSupportedInstances', 5), ('VideoCapabilities.getSupportedPerformancePoints', 5)]	[('[android.mediapc.cts.MultiCodecPerfTestBase isSPerfClass CtsMediaPerformanceClassTestCases]', 2), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 1), ('[com.android.compatibility.common.util.MediaUtils getTestName None]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[android.video.cts.CodecPerformanceTestBase isEncoder CtsVideoTestCases]', 1), ('[android.media.cts.MediaCodecCapabilitiesTest testGetMaxSupportedInstances CtsMediaTestCases]', 1), ('[android.media.cts.DecoderTest testTunneledAudioTimestampProgressVp9 CtsMediaTestCases]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.1  . Media	5.1	H-1-2	5.1/H-1-2	05010000.720102	"""[5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps.  | [5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30 fps. *Only 2 instances are required if VP9 codec is present. """	""	""	AVC HEVC VP9	""	""	""	""	[('android.media.cts.EncodeDecodeTest', 18), ('android.mediav2.cts.ExtractorTest', 12), ('android.media.cts.MediaCodecListTest', 10), ('android.media.cts.MediaExtractorTest', 4), ('android.mediastress.cts.NativeMediaTest', 1), ('android.mediastress.cts.HEVCR720pAacShortPlayerTest', 1), ('android.media.metrics.cts.MediaMetricsAtomHostSideTests', 1)]	[('getSimpleName', 3), ('length', 3), ('getSize', 3), ('close', 3), ('validateKeyValuePairs', 3), ('MediaExtractor', 3), ('getTrackCount', 3), ('release', 3), ('input', 3)]	[('CtsMediaTestCases', 32), ('CtsMediaV2TestCases', 12), ('CtsMediaStressTestCases', 2)]	""	android.mediapc.cts.MultiDecoderPerfTest	test720p()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiDecoderPerfTest.java	[('(26,AVC,/android/media/cts/EncodeDecodeTest.java)', 1), ('(1,AVC,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(1,HEVC,/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java)', 1), ('(2,AVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(5,HEVC,/android/media/cts/MediaExtractorTest.java)', 1), ('(10,AVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(7,HEVC,/android/media/cts/MediaCodecListTest.java)', 1), ('(6,VP9,/android/media/cts/MediaCodecListTest.java)', 1), ('(1,AVC,/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java)', 1), ('(71,AVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(45,HEVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(25,VP9,/android/mediav2/cts/ExtractorTest.java)', 1)]	"[('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, false, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, true, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([5:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[5]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[76, 144, 1000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[20, 240, 2000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 144, 1000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 240, 2000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[of byte[] buffers and decoded into Surfaces.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([4:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[4]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([1:/android/mediastress/cts/NativeMediaTest.java]:[AVC]:[1]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([1:/android/mediastress/cts/HEVCR720pAacShortPlayerTest.java]:[HEVC]:[1]:method_text:[""bbb_short.fmpeg.1280x720.mp4.libx265_6500kbps_30fps.libfaac_stereo_128kbps_48000hz.mp4""    };   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[AVC]:[2]:method_text:[aExtractor for profile-level (Dvav1 10.0/Uhd30)    @SmallTest    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvheSt/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([2:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[2]:method_text:[// DolbyVisionMediaExtractor for profile-level (DvavSe/Fhd60).    @CddTest(requirement=""5.3.8"")   ])', 1), ('([1:/android/media/cts/MediaExtractorTest.java]:[HEVC]:[1]:method_text:[$FunctionalityTest[audio/ac4]        setDataSource(""multi0.mp4"");        readAllData();    }   ])', 1), ('([4:/android/media/cts/MediaCodecListTest.java]:[AVC]:[4]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[                  pp2 != pp && pp2.covers(pp));                }            }        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[AVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([3:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[3]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[HEVC]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[IMETYPE_VIDEO_H263, true)); // h263 encoder            }        }        return list;    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[              || supportedTypes.contains(MediaFormat.MIMETYPE_AUDIO_EAC3_JOC));        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[VP9]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([1:/android/media/metrics/cts/MediaMetricsAtomHostSideTests.java]:[AVC]:[1]:method_text:[                .build();        s.reportTrackChangeEvent(e);        resetProperties();    }   ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[4]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([8:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[8]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([35:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[35]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([24:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[24]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([18:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[18]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([20:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[20]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([12:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[12]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([6:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[6]:method_text:[t"", 0},            });            return exhaustiveArgsList;        }        @LargeTest       ])', 1)]"	""	""	[('AVC', 29), ('HEVC', 11), ('VP9', 7)]	[('[android.media.cts.MediaCodecListTest testRequiredMediaCodecList CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testInputChannelLimits CtsMediaTestCases]', 3), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints CtsMediaTestCases]', 3), ('[android.mediav2.cts.ExtractorTest isClosed CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testDataSourceNative CtsMediaV2TestCases]', 3), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate CtsMediaV2TestCases]', 3), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQCIF CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQVGA CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvavSe CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheDtr CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testDolbyVisionMediaExtractorProfileDvheSt CtsMediaTestCases]', 1), ('[android.media.cts.MediaExtractorTest testProgramStreamExtraction CtsMediaTestCases]', 1), ('[android.media.cts.MediaCodecListTest testVideoPerformancePointsSanity CtsMediaTestCases]', 1), ('[android.media.metrics.cts.MediaMetricsAtomHostSideTests testTrackChangeEvent_audio None]', 1)]	True	""	""	""	""	""	""	""	""
9.9.3  . Encryption Methods	9.9.3	C-1-12	9.9.3/C-1-12	09090300.670112	"""C-1-12] If the device has Advanced Encryption Standard (AES) instructions (such as ARMv8 Cryptography Extensions on ARM-based devices, or AES-NI on x86-based devices) then the AES-based options above for file name, file contents, and filesystem metadata encryption MUST be used, not Adiantum. | C-1-12] MUST be securely erased during bootloader unlock and lock as described here. SHOULD make preinstalled essential apps (e.g. Alarm, Phone, Messenger) Direct Boot aware. The upstream Android Open Source project provides a preferred implementation of File Based Encryption based on the Linux kernel &quot;fscrypt&quot; encryption feature, and of Metadata Encryption based on the Linux kernel &quot;dm-default-key&quot; feature. <h4 id=""994_resume_on_reboot"" """	""	""	AES ARM	""	""	""	""	[('android.media.cts.VideoEncoderTest', 98), ('android.keystore.cts.AndroidKeyStoreTest', 4), ('android.keystore.cts.SecretKeyFactoryTest', 2), ('com.android.server.cts.device.batterystats.BatteryStatsAlarmTest', 2), ('com.android.cts.splitapp.TestThemeHelper', 1), ('android.server.wm.AmProfileTests', 1), ('android.provider.cts.media.MediaStore_Audio_MediaTest', 1), ('android.dynamicmime.testapp.preferred.PreferredActivitiesTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('android.alarmmanager.cts.DumpLoggerRule', 1), ('android.media.cts.MediaCodecListTest', 1), ('android.smartspace.cts.SmartspaceConfigTest', 1), ('android.car.cts.CarPowerManagerTest', 1)]	[('setUp', 2), ('getCurrentPowerPolicy', 2), ('getPolicyId', 2), ('notifyAll', 2), ('get', 2), ('getTheme', 1), ('getMethodName', 1), ('supports3DES', 1), ('getSimpleName', 1), ('getMainExecutor', 1), ('getCar', 1), ('teardown', 1), ('getMediaDirString', 1), ('VideoStorage', 1), ('BufferInfo', 1), ('position', 1), ('reset', 1), ('Object', 1), ('iterator', 1), ('Callback', 1), ('hasNext', 1), ('next', 1), ('clear', 1), ('limit', 1), ('remaining', 1), ('getName', 1), ('getInputFormat', 1), ('start', 1), ('wait', 1), ('stop', 1), ('getCodecInfos', 1)]	[('CtsMediaTestCases', 99), ('CtsKeystoreTestCases', 6), ('CtsWindowManagerDeviceTestCases', 1), ('CtsProviderTestCases', 1), ('CtsLegacyNotification27TestCases', 1), ('CtsAlarmManagerTestCases', 1), ('CtsSmartspaceServiceTestCases', 1), ('CtsCarTestCases', 1)]	""	cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	validateEncryptionModes	""	tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	[('(12,ARM,/com/android/cts/splitapp/TestThemeHelper.java)', 1), ('(1,ARM,/android/server/wm/AmProfileTests.java)', 1), ('(2,ARM,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,ARM,/android/dynamicmime/testapp/preferred/PreferredActivitiesTest.java)', 1), ('(11,ARM,/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java)', 1), ('(2,ARM,/android/alarmmanager/cts/DumpLoggerRule.java)', 1), ('(2,AES,/android/keystore/cts/SecretKeyFactoryTest.java)', 1), ('(2,ARM,/android/media/cts/MediaCodecListTest.java)', 1), ('(14,AES,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(1,ARM,/android/smartspace/cts/SmartspaceConfigTest.java)', 1), ('(1,ARM,/android/car/cts/CarPowerManagerTest.java)', 1), ('(12,ARM,/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java)', 1), ('(206,ARM,/android/media/cts/VideoEncoderTest.java)', 1)]	"[('([12:/com/android/cts/splitapp/TestThemeHelper.java]:[ARM]:[12]:method_text:[ackground = view.getBackground();        assertDrawableColor(background, mColorBackground);    }}])', 1), ('([1:/android/server/wm/AmProfileTests.java]:[ARM]:[1]:method_text:[lFirstWord);        // Clean up.        executeShellCommand(""rm -f "" + OUTPUT_FILE_PATH);    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[ARM]:[2]:method_text:[ mContentResolver.delete(uri, null, null);            assertEquals(1, result);        }    }   ])', 1), ('([1:/android/dynamicmime/testapp/preferred/PreferredActivitiesTest.java]:[ARM]:[1]:method_text:[ng preferredActivity() {                return ACTIVITY_FIRST;            }        });    }   ])', 1), ('([11:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[ARM]:[11]:method_text:[t.getPackageName(),                InstrumentationRegistry.getInstrumentation(), false);    }   ])', 1), ('([2:/android/alarmmanager/cts/DumpLoggerRule.java]:[ARM]:[2]:method_text:[cription.getMethodName());        Log.i(mTag, SystemUtil.runShellCommand(""dumpsys alarm""));    }}])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[AES]:[1]:method_text:[      EXPECTED_ALGORITHMS = ObjectArrays.concat(EXPECTED_ALGORITHMS, ""DESede"");        }    }   ])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[AES]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[ARM]:[2]:method_text:[           ""some regular codecs are not listed in all codecs"", ix, mRegularInfos.length);    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[should match the original plaintext."",                plaintext2, plaintext.getBytes());    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[xpectedSecret.getEncoded()),                Arrays.toString(actualSecret.getEncoded()));    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[6]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[4]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([1:/android/smartspace/cts/SmartspaceConfigTest.java]:[ARM]:[1]:method_text:[lic class SmartspaceConfigTest {    private static final String TAG = ""SmartspaceTargetTest"";   ])', 1), ('([1:/android/car/cts/CarPowerManagerTest.java]:[ARM]:[1]:method_text:[lated power policy listeners are not invoked,     * when a new power policy is applied.     */   ])', 1), ('([4:/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java]:[ARM]:[4]:method_text:[ring TAG = ""BatteryStatsAlarmTest"";    /**     * Set and fire a wakeup alarm 3 times.     */   ])', 1), ('([8:/com/android/server/cts/device/batterystats/BatteryStatsAlarmTest.java]:[ARM]:[8]:method_text:[     assertTrue(""Didn\'t receive all broadcasts."", latch.await(60 * 1000, TimeUnit.SECONDS));    }}])', 1), ('([10:/android/media/cts/VideoEncoderTest.java]:[ARM]:[10]:method_text:[ame(), mime, caps));        }        return result.toArray(new Encoder[result.size()]);    }   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265FlexNearMinMin()   { nearminmin(googH265(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265SurfNearMinMin()   { nearminmin(googH265(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264FlexNearMinMin()   { nearminmin(googH264(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264SurfNearMinMin()   { nearminmin(googH264(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263FlexNearMinMin()   { nearminmin(googH263(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263SurfNearMinMin()   { nearminmin(googH263(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4FlexNearMinMin()  { nearminmin(googMpeg4(),  true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4SurfNearMinMin()  { nearminmin(googMpeg4(),  false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8FlexNearMinMin()    { nearminmin(googVP8(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8SurfNearMinMin()    { nearminmin(googVP8(),    false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP9FlexNearMinMin()    { nearminmin(googVP9(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[P9SurfNearMinMin()    { nearminmin(googVP9(),    false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH265FlexNearMinMin()  { nearminmin(otherH265(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH265SurfNearMinMin()  { nearminmin(otherH265(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH264FlexNearMinMin()  { nearminmin(otherH264(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH264SurfNearMinMin()  { nearminmin(otherH264(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH263FlexNearMinMin()  { nearminmin(otherH263(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH263SurfNearMinMin()  { nearminmin(otherH263(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erMpeg4FlexNearMinMin() { nearminmin(otherMpeg4(), true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rMpeg4SurfNearMinMin() { nearminmin(otherMpeg4(), false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP8FlexNearMinMin()   { nearminmin(otherVP8(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rVP8SurfNearMinMin()   { nearminmin(otherVP8(),   false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP9FlexNearMinMin()   { nearminmin(otherVP9(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testOtherVP9SurfNearMinMin()   { nearminmin(otherVP9(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265FlexNearMinMax()   { nearminmax(googH265(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265SurfNearMinMax()   { nearminmax(googH265(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264FlexNearMinMax()   { nearminmax(googH264(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264SurfNearMinMax()   { nearminmax(googH264(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263FlexNearMinMax()   { nearminmax(googH263(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263SurfNearMinMax()   { nearminmax(googH263(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4FlexNearMinMax()  { nearminmax(googMpeg4(),  true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4SurfNearMinMax()  { nearminmax(googMpeg4(),  false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8FlexNearMinMax()    { nearminmax(googVP8(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8SurfNearMinMax()    { nearminmax(googVP8(),    false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP9FlexNearMinMax()    { nearminmax(googVP9(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[P9SurfNearMinMax()    { nearminmax(googVP9(),    false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH265FlexNearMinMax()  { nearminmax(otherH265(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH265SurfNearMinMax()  { nearminmax(otherH265(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH264FlexNearMinMax()  { nearminmax(otherH264(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH264SurfNearMinMax()  { nearminmax(otherH264(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH263FlexNearMinMax()  { nearminmax(otherH263(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH263SurfNearMinMax()  { nearminmax(otherH263(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erMpeg4FlexNearMinMax() { nearminmax(otherMpeg4(), true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rMpeg4SurfNearMinMax() { nearminmax(otherMpeg4(), false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP8FlexNearMinMax()   { nearminmax(otherVP8(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rVP8SurfNearMinMax()   { nearminmax(otherVP8(),   false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP9FlexNearMinMax()   { nearminmax(otherVP9(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testOtherVP9SurfNearMinMax()   { nearminmax(otherVP9(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265FlexNearMaxMin()   { nearmaxmin(googH265(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265SurfNearMaxMin()   { nearmaxmin(googH265(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264FlexNearMaxMin()   { nearmaxmin(googH264(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264SurfNearMaxMin()   { nearmaxmin(googH264(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263FlexNearMaxMin()   { nearmaxmin(googH263(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263SurfNearMaxMin()   { nearmaxmin(googH263(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4FlexNearMaxMin()  { nearmaxmin(googMpeg4(),  true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4SurfNearMaxMin()  { nearmaxmin(googMpeg4(),  false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8FlexNearMaxMin()    { nearmaxmin(googVP8(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8SurfNearMaxMin()    { nearmaxmin(googVP8(),    false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP9FlexNearMaxMin()    { nearmaxmin(googVP9(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[P9SurfNearMaxMin()    { nearmaxmin(googVP9(),    false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH265FlexNearMaxMin()  { nearmaxmin(otherH265(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH265SurfNearMaxMin()  { nearmaxmin(otherH265(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH264FlexNearMaxMin()  { nearmaxmin(otherH264(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH264SurfNearMaxMin()  { nearmaxmin(otherH264(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH263FlexNearMaxMin()  { nearmaxmin(otherH263(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH263SurfNearMaxMin()  { nearmaxmin(otherH263(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erMpeg4FlexNearMaxMin() { nearmaxmin(otherMpeg4(), true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rMpeg4SurfNearMaxMin() { nearmaxmin(otherMpeg4(), false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP8FlexNearMaxMin()   { nearmaxmin(otherVP8(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rVP8SurfNearMaxMin()   { nearmaxmin(otherVP8(),   false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP9FlexNearMaxMin()   { nearmaxmin(otherVP9(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testOtherVP9SurfNearMaxMin()   { nearmaxmin(otherVP9(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265FlexNearMaxMax()   { nearmaxmax(googH265(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH265SurfNearMaxMax()   { nearmaxmax(googH265(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264FlexNearMaxMax()   { nearmaxmax(googH264(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH264SurfNearMaxMax()   { nearmaxmax(googH264(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263FlexNearMaxMax()   { nearmaxmax(googH263(),   true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogH263SurfNearMaxMax()   { nearmaxmax(googH263(),   false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4FlexNearMaxMax()  { nearmaxmax(googMpeg4(),  true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogMpeg4SurfNearMaxMax()  { nearmaxmax(googMpeg4(),  false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8FlexNearMaxMax()    { nearmaxmax(googVP8(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP8SurfNearMaxMax()    { nearmaxmax(googVP8(),    false /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testGoogVP9FlexNearMaxMax()    { nearmaxmax(googVP9(),    true /* flex */); }    ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[P9SurfNearMaxMax()    { nearmaxmax(googVP9(),    false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH265FlexNearMaxMax()  { nearmaxmax(otherH265(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH265SurfNearMaxMax()  { nearmaxmax(otherH265(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH264FlexNearMaxMax()  { nearmaxmax(otherH264(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH264SurfNearMaxMax()  { nearmaxmax(otherH264(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erH263FlexNearMaxMax()  { nearmaxmax(otherH263(),  true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rH263SurfNearMaxMax()  { nearmaxmax(otherH263(),  false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erMpeg4FlexNearMaxMax() { nearmaxmax(otherMpeg4(), true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rMpeg4SurfNearMaxMax() { nearmaxmax(otherMpeg4(), false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP8FlexNearMaxMax()   { nearmaxmax(otherVP8(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[rVP8SurfNearMaxMax()   { nearmaxmax(otherVP8(),   false /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[erVP9FlexNearMaxMax()   { nearmaxmax(otherVP9(),   true /* flex */); }    @NonMediaMainlineTest   ])', 1), ('([2:/android/media/cts/VideoEncoderTest.java]:[ARM]:[2]:method_text:[public void testOtherVP9SurfNearMaxMax()   { nearmaxmax(otherVP9(),   false /* flex */); }    ])', 1), ('([4:/android/media/cts/VideoEncoderTest.java]:[ARM]:[4]:method_text:[ + ""x"" + height + "" "" +                    frameRate + ""fps "" + bitRate + ""bps"");        }    }}])', 1)]"	""	""	[('ARM', 109), ('AES', 6)]	[('[com.android.cts.splitapp.TestThemeHelper isNotNull None]', 1), ('[android.server.wm.AmProfileTests testAmStartStartProfilerSamplingStreaming CtsWindowManagerDeviceTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_MediaTest testStoreAudioMedia CtsProviderTestCases]', 1), ('[android.dynamicmime.testapp.preferred.PreferredActivitiesTest testClearGroup None]', 1), ('[android.app.notification.legacy.cts.LegacyNotificationManagerTest testPrePCannotToggleAlarmsAndMediaTest CtsLegacyNotification27TestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testTranslateKeyAcceptsAndroidKeystoreKeys CtsKeystoreTestCases]', 1), ('[android.media.cts.MediaCodecListTest testRegularMediaCodecListIsASubsetOfAll CtsMediaTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedWithSameGeneratedSecretKey CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_KeyOperations_Wrap_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_AES CtsKeystoreTestCases]', 1), ('[com.android.server.cts.device.batterystats.BatteryStatsAlarmTest testAlarms None]', 1), ('[android.media.cts.VideoEncoderTest isEncoder CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9FlexNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9SurfNearMinMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9FlexNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9SurfNearMinMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9FlexNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9SurfNearMaxMin CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH265SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH264SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogH263SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogMpeg4SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP8SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testGoogVP9SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH265SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH264SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherH263SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherMpeg4SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9FlexNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9SurfNearMaxMax CtsMediaTestCases]', 1), ('[android.media.cts.VideoEncoderTest testVP8Surf1080p30fps10Mbps CtsMediaTestCases]', 1)]	True	""	""	Found annotation reference in comments of .cpp files	""	""	""	""	2
9.9.3  . Encryption Methods	9.9.3	C-1-6	9.9.3/C-1-6	09090300.670106	"""C-1-6] MUST encrypt file names using AES-256-CBC-CTS or Adiantum."""	""	""	CTS CBC AES	""	""	""	""	[('android.contentcaptureservice.cts.ChildlessActivityTest', 16), ('android.media.cts.EncodeDecodeTest', 3), ('com.android.cts.verifier.sensors.MotionIndicatorView', 2), ('android.transition.cts.TransitionTest', 2), ('android.provider.cts.media.MediaStore_Audio_MediaTest', 2), ('com.android.cts.intent.receiver.IntentReceiverActivity', 1), ('android.graphics.drawable.cts.DrawableContainerTest', 1), ('android.view.textclassifier.cts.TextClassificationManagerTest', 1), ('android.location.cts.gnss.asn1.supl2.rrlp_components.SeqOfOTD_MsrsOfOtherSets', 1), ('com.android.cts.managedprofile.ComponentDisablingActivity', 1), ('android.mediadrm.cts.MediaDrmTest', 1), ('android.video.cts.CodecTestActivity', 1), ('android.hardware.cts.CameraCtsActivity', 1), ('com.android.cts.splitapp.TestThemeHelper', 1), ('android.renderscript.cts.ForEachTest', 1), ('android.keystore.cts.KeyAgreementTest', 1), ('com.android.cts.verifier.p2p.GoTestActivity', 1), ('android.content.pm.cts.shortcut.multiuser.MainActivity', 1), ('android.telecom.cts.NewOutgoingCallBroadcastReceiver', 1), ('android.app.cts.AlertDialog_BuilderTest', 1), ('android.server.wm.AmProfileTests', 1), ('android.appsecurity.cts.Utils', 1), ('android.media.cts.CameraProfileTest', 1), ('android.security.cts.BitmapFactoryDecodeStreamTest', 1), ('CanInteractAcrossProfilesChangedReceiver', 1), ('android.systemui.cts.audiorecorder.base.BaseAudioRecorderService', 1), ('android.inputmethodservice.cts.devicetest.NoOpDeviceTest', 1), ('android.transition.cts.SceneTest', 1), ('android.dynamicmime.cts.PreferredActivitiesTestCases', 1), ('android.widget.cts.RemoteViewsThemeColorsTest', 1), ('android.location.cts.gnss.asn1.supl2.supl_triggered_response.RepMode', 1), ('java.android.signature.cts.api.HiddenApiTest', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.server.wm.lifecycle.ActivityLifecycleKeyguardTests', 1), ('android.permission.cts.ActivityPermissionRationaleTest', 1), ('android.view.cts.ViewPaddingTest', 1), ('com.android.cts.deviceandprofileowner.AssistScreenCaptureDisabledTest', 1), ('android.hardware.cts.helpers.sensorverification.GyroscopeIntegrationVerification', 1), ('android.renderscript.cts.AllocationByteBufferTest', 1), ('com.android.cts.isolatedsplitapp.feature_b.FeatureBActivity', 1), ('com.android.cts.usespermissiondiffcertapp.UriGrantsClipboardTest', 1), ('android.widget.cts.PopupWindowCtsActivity', 1), ('android.autofillservice.cts.commontests.TimePickerTestCase', 1), ('android.carrierapi.cts.BaseCarrierApiTest', 1), ('com.android.cts.verifier.sensors.HeartRateMonitorTestActivity', 1), ('android.view.cts.surfacevalidator.LocalMediaProjectionService', 1), ('android.mediastress.cts.NativeMediaTest', 1), ('com.android.cts.verifier.camera.fov.PhotoCaptureActivity', 1), ('android.location.cts.gnss.asn1.supl2.ver2_ulp_components.ApplicationID', 1), ('com.android.cts.deviceandprofileowner.EnrollmentSpecificIdTest', 1), ('com.android.cts.deviceadminservice.ComponentController', 1), ('android.widget.cts.ToolbarTest', 1), ('android.content.sync.cts.StubAuthenticator', 1), ('com.android.cts.verifier.qstiles.InteractiveVerifierActivity', 1)]	[('setUp', 9), ('setup', 7), ('getInstrumentation', 6), ('getContentResolver', 5), ('getTargetContext', 5), ('getContext', 5), ('getIntent', 4), ('getAction', 4), ('Intent', 4), ('getSimpleName', 4), ('getHolder', 4), ('onCreate', 3), ('super', 2), ('getTag', 2), ('getName', 2), ('myUserHandle', 2), ('getPackageManager', 2), ('lock', 2), ('unlock', 2), ('getActivity', 2), ('getCurrentUser', 2), ('getDevice', 2), ('getUiAutomation', 2), ('clone', 2), ('startForeground', 2), ('onDestroy', 2), ('createNotificationIcon', 2), ('Bundle', 2), ('getClipData', 1), ('getUri', 1), ('start', 1), ('getLooper', 1), ('waitForNotify', 1), ('quit', 1), ('getConstants', 1), ('SeqOfOTD_MsrsOfOtherSets', 1), ('getClass', 1), ('getOpenSessionCount', 1), ('getMaxSessionCount', 1), ('close', 1), ('ReentrantLock', 1), ('newCondition', 1), ('getSurface', 1), ('getLayoutParams', 1), ('getSurfaceView', 1), ('getTheme', 1), ('forEach', 1), ('getReadyMsgId', 1), ('getData', 1), ('setUpClass', 1), ('tearDownClass', 1), ('getIDevice', 1), ('size', 1), ('keySet', 1), ('getApplicationContext', 1), ('getPackageName', 1), ('getIdentifier', 1), ('getMainLooper', 1), ('buildNotification', 1), ('getAssignedValue', 1), ('init', 1), ('loadFilters', 1), ('unInstallApp', 1), ('clearData', 1), ('getUserId', 1), ('getSensor', 1), ('getType', 1), ('getSensorAxesCount', 1), ('toString', 1), ('data', 1), ('getSharedVolumeNames', 1), ('getByteBuffer', 1), ('getStride', 1), ('destroy', 1), ('getLayoutInflater', 1), ('notifyAll', 1), ('waitForConfigurationChanged', 1), ('LocalBinder', 1), ('getService', 1), ('recycle', 1), ('build', 1), ('getExternalCacheDir', 1), ('getReportedFovDegrees', 1), ('getNumberOfCameras', 1), ('ApplicationID', 1), ('enableComponent', 1), ('myUserId', 1), ('getMainToolbar', 1), ('getIBinder', 1), ('autoStart', 1), ('next', 1)]	[('CtsContentCaptureServiceTestCases', 16), ('CtsMediaTestCases', 4), ('CtsLocationGnssTestCases', 3), ('CtsTransitionTestCases', 3), ('CtsWidgetTestCases', 3), ('CtsRenderscriptTestCases', 2), ('CtsWindowManagerDeviceTestCases', 2), ('CtsProviderTestCases', 2), ('CtsGraphicsTestCases', 1), ('CtsTextClassifierTestCases', 1), ('CtsMediaDrmTestCases', 1), ('CtsVideoTestCases', 1), ('CtsCameraTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsTelecomTestCases', 1), ('CtsAppTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsSecurityTestCases', 1), ('CtsDynamicMimeHostTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsViewTestCases', 1), ('CtsSensorTestCases', 1), ('CtsAutoFillServiceTestCases', 1), ('CtsCarrierApiTestCases', 1), ('CtsMediaStressTestCases', 1)]	""	cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	validateEncryptionModes	""	tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	[('(11,CTS,/com/android/cts/intent/receiver/IntentReceiverActivity.java)', 1), ('(2,CTS,/android/graphics/drawable/cts/DrawableContainerTest.java)', 1), ('(1,CTS,/android/view/textclassifier/cts/TextClassificationManagerTest.java)', 1), ('(6,CTS,/android/location/cts/gnss/asn1/supl2/rrlp_components/SeqOfOTD_MsrsOfOtherSets.java)', 1), ('(1,CTS,/com/android/cts/managedprofile/ComponentDisablingActivity.java)', 1), ('(2,CTS,/android/mediadrm/cts/MediaDrmTest.java)', 1), ('(1,CTS,/android/video/cts/CodecTestActivity.java)', 1), ('(3,CTS,/android/hardware/cts/CameraCtsActivity.java)', 1), ('(4,CTS,/com/android/cts/splitapp/TestThemeHelper.java)', 1), ('(1,CTS,/android/renderscript/cts/ForEachTest.java)', 1), ('(2,CTS,/android/keystore/cts/KeyAgreementTest.java)', 1), ('(4,CTS,/com/android/cts/verifier/p2p/GoTestActivity.java)', 1), ('(1,CTS,/android/content/pm/cts/shortcut/multiuser/MainActivity.java)', 1), ('(1,CTS,/android/telecom/cts/NewOutgoingCallBroadcastReceiver.java)', 1), ('(1,CTS,/android/app/cts/AlertDialog_BuilderTest.java)', 1), ('(1,CTS,/android/server/wm/AmProfileTests.java)', 1), ('(1,CTS,/android/appsecurity/cts/Utils.java)', 1), ('(1,CTS,/android/media/cts/CameraProfileTest.java)', 1), ('(2,CTS,/android/security/cts/BitmapFactoryDecodeStreamTest.java)', 1), ('(1,CTS,/CanInteractAcrossProfilesChangedReceiver.java)', 1), ('(4,CTS,/android/systemui/cts/audiorecorder/base/BaseAudioRecorderService.java)', 1), ('(1,CTS,/android/inputmethodservice/cts/devicetest/NoOpDeviceTest.java)', 1), ('(1,CTS,/android/transition/cts/SceneTest.java)', 1), ('(1,CTS,/android/dynamicmime/cts/PreferredActivitiesTestCases.java)', 1), ('(4,CTS,/android/widget/cts/RemoteViewsThemeColorsTest.java)', 1), ('(5,CTS,/android/location/cts/gnss/asn1/supl2/supl_triggered_response/RepMode.java)', 1), ('(8,CTS,/java/android/signature/cts/api/HiddenApiTest.java)', 1), ('(3,CTS,/com/android/cts/verifier/sensors/MotionIndicatorView.java)', 1), ('(14,CTS,/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java)', 1), ('(1,CTS,/android/server/wm/lifecycle/ActivityLifecycleKeyguardTests.java)', 1), ('(6,CTS,/android/permission/cts/ActivityPermissionRationaleTest.java)', 1), ('(3,CTS,/android/transition/cts/TransitionTest.java)', 1), ('(44,CTS,/android/contentcaptureservice/cts/ChildlessActivityTest.java)', 1), ('(1,CTS,/android/view/cts/ViewPaddingTest.java)', 1), ('(2,CTS,/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java)', 1), ('(4,CTS,/android/media/cts/EncodeDecodeTest.java)', 1), ('(5,CTS,/android/hardware/cts/helpers/sensorverification/GyroscopeIntegrationVerification.java)', 1), ('(8,CTS,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,CTS,/android/renderscript/cts/AllocationByteBufferTest.java)', 1), ('(3,CTS,/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java)', 1), ('(11,CTS,/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java)', 1), ('(3,CTS,/android/widget/cts/PopupWindowCtsActivity.java)', 1), ('(13,CTS,/android/autofillservice/cts/commontests/TimePickerTestCase.java)', 1), ('(1,CTS,/android/carrierapi/cts/BaseCarrierApiTest.java)', 1), ('(4,CTS,/com/android/cts/verifier/sensors/HeartRateMonitorTestActivity.java)', 1), ('(1,CTS,/android/view/cts/surfacevalidator/LocalMediaProjectionService.java)', 1), ('(1,CTS,/android/mediastress/cts/NativeMediaTest.java)', 1), ('(9,CTS,/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java)', 1), ('(9,CTS,/android/location/cts/gnss/asn1/supl2/ver2_ulp_components/ApplicationID.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java)', 1), ('(1,CTS,/com/android/cts/deviceadminservice/ComponentController.java)', 1), ('(5,CTS,/android/widget/cts/ToolbarTest.java)', 1), ('(1,CTS,/android/content/sync/cts/StubAuthenticator.java)', 1), ('(5,CTS,/com/android/cts/verifier/qstiles/InteractiveVerifierActivity.java)', 1)]	"[('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[tSession4, DESTRUCTION);        assertLifecycleOrder(10, mainTestSession,  DESTRUCTION);    }   ])', 2), ('([11:/com/android/cts/intent/receiver/IntentReceiverActivity.java]:[CTS]:[11]:method_text:[putStream(uri));        writer.write(text);        writer.flush();        writer.close();    }}])', 1), ('([2:/android/graphics/drawable/cts/DrawableContainerTest.java]:[CTS]:[2]:method_text:[Container = mMockDrawableContainer;        assertNull(mDrawableContainer.getCurrent());    }   ])', 1), ('([1:/android/view/textclassifier/cts/TextClassificationManagerTest.java]:[CTS]:[1]:method_text:[cationManager.class);        mManager.setTextClassifier(null); // Resets the classifier.    }   ])', 1), ('([6:/android/location/cts/gnss/asn1/supl2/rrlp_components/SeqOfOTD_MsrsOfOtherSets.java]:[CTS]:[6]:method_text:[ernalIndent));    }    builder.append(indent).append(""];\\n"");    return builder.toString();  }}])', 1), ('([1:/com/android/cts/managedprofile/ComponentDisablingActivity.java]:[CTS]:[1]:method_text:[ckageManager.COMPONENT_ENABLED_STATE_DISABLED,                PackageManager.DONT_KILL_APP);    }])', 1), ('([2:/android/mediadrm/cts/MediaDrmTest.java]:[CTS]:[2]:method_text:[  assertThrows(() -> {            md.closeSession(null);        });        md.close();    }   ])', 1), ('([1:/android/video/cts/CodecTestActivity.java]:[CTS]:[1]:method_text:[ SurfaceView to a window."");        }    }    public Surface getSurface() { return mSurface; }}])', 1), ('([3:/android/hardware/cts/CameraCtsActivity.java]:[CTS]:[3]:method_text:[PUSH_BUFFERS);    }    public SurfaceView getSurfaceView() {        return mSurfaceView;    }}])', 1), ('([4:/com/android/cts/splitapp/TestThemeHelper.java]:[CTS]:[4]:method_text:[ackground = view.getBackground();        assertDrawableColor(background, mColorBackground);    }}])', 1), ('([1:/android/renderscript/cts/ForEachTest.java]:[CTS]:[1]:method_text:[    /**     * Test support for reflected forEach() as well as validation of parameters.     */   ])', 1), ('([2:/android/keystore/cts/KeyAgreementTest.java]:[CTS]:[2]:method_text:[s KeyAgreementTest {    private static final String PRIVATE_KEY_ALIAS = ""TemporaryPrivateKey"";   ])', 1), ('([4:/com/android/cts/verifier/p2p/GoTestActivity.java]:[CTS]:[4]:method_text:[  }    @Override    protected int getReadyMsgId() {        return R.string.p2p_go_ready;    }}])', 1), ('([1:/android/content/pm/cts/shortcut/multiuser/MainActivity.java]:[CTS]:[1]:method_text:[inish();    }    public static long getLastCreateTime() {        return sLastCreateTime;    }}])', 1), ('([1:/android/telecom/cts/NewOutgoingCallBroadcastReceiver.java]:[CTS]:[1]:method_text:[ {        sIsNewOutgoingCallBroadcastReceived = false;        sReceivedPhoneNumber = null;    }}])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[CTS]:[1]:method_text:[y();        mContext = activity;        PollingCheck.waitFor(activity::hasWindowFocus);    }   ])', 1), ('([1:/android/server/wm/AmProfileTests.java]:[CTS]:[1]:method_text:[ yes;     *    sampling-based profiling? no;     *    using streaming output mode? no.     */   ])', 1), ('([1:/android/appsecurity/cts/Utils.java]:[CTS]:[1]:method_text:[!= null) {            output = output.trim();        }        return ""1"".equals(output);    }}])', 1), ('([1:/android/media/cts/CameraProfileTest.java]:[CTS]:[1]:method_text:[     assertTrue(high >= 0 && high <= 100);        assertTrue(low <= mid && mid <= high);    }   ])', 1), ('([2:/android/security/cts/BitmapFactoryDecodeStreamTest.java]:[CTS]:[2]:method_text:[ed PNG image with incorrect     * npTc chunk.     */    @AsbSecurityTest(cveBugId = 19151999)   ])', 1), ('([1:/CanInteractAcrossProfilesChangedReceiver.java]:[CTS]:[1]:method_text:[ + ""#"" + intent.getAction()                + ""#"" + Process.myUserHandle().getIdentifier());    }}])', 1), ('([4:/android/systemui/cts/audiorecorder/base/BaseAudioRecorderService.java]:[CTS]:[4]:method_text:[emService(Context.NOTIFICATION_SERVICE);        manager.createNotificationChannel(channel);    }}])', 1), ('([1:/android/inputmethodservice/cts/devicetest/NoOpDeviceTest.java]:[CTS]:[1]:method_text:[idJUnit4.class)public class NoOpDeviceTest {    /** Does nothing but just wait 15 seconds. */   ])', 1), ('([1:/android/transition/cts/SceneTest.java]:[CTS]:[1]:method_text:[aseTransitionTest {    /**     * Test Scene(ViewGroup) with enterAction and exitAction     */   ])', 1), ('([1:/android/dynamicmime/cts/PreferredActivitiesTestCases.java]:[CTS]:[1]:method_text:[cuteShellCommand(""input keyevent KEYCODE_WAKEUP"");        getDevice().disableKeyguard();    }   ])', 1), ('([4:/android/widget/cts/RemoteViewsThemeColorsTest.java]:[CTS]:[4]:method_text:[ntext();        mRemoteViews = new RemoteViews(PACKAGE_NAME, R.layout.remoteviews_good);    }   ])', 1), ('([5:/android/location/cts/gnss/asn1/supl2/supl_triggered_response/RepMode.java]:[CTS]:[5]:method_text:[ public String toIndentedString(String indent) {    return ""RepMode = "" + getValue() + "";\\n"";  }}])', 1), ('([8:/java/android/signature/cts/api/HiddenApiTest.java]:[CTS]:[8]:method_text:[c Predicate<DexMember> FIELD_FILTER =            dexMember -> (dexMember instanceof DexField);   ])', 1), ('([1:/com/android/cts/verifier/sensors/MotionIndicatorView.java]:[CTS]:[1]:method_text:[hat draws the user prompt * * The following piece of code should show how to use this view. * * ])', 1), ('([2:/com/android/cts/verifier/sensors/MotionIndicatorView.java]:[CTS]:[2]:method_text:[Value() {        // ensure float division        return ((float)(mLastData - mLow))/mStep;    }}])', 1), ('([14:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[CTS]:[14]:method_text:[ /**     * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.     */   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleKeyguardTests.java]:[CTS]:[1]:method_text:[on.Group3public class ActivityLifecycleKeyguardTests extends ActivityLifecycleClientTestBase {   ])', 1), ('([6:/android/permission/cts/ActivityPermissionRationaleTest.java]:[CTS]:[6]:method_text:[E_NAME, PERMISSION_NAME,                PackageManager.FLAG_PERMISSION_POLICY_FIXED, 0);    }   ])', 1), ('([2:/android/transition/cts/TransitionTest.java]:[CTS]:[2]:method_text:[ enough that devices can catch it without trouble.        mTransition.setDuration(1000);    }   ])', 1), ('([1:/android/transition/cts/TransitionTest.java]:[CTS]:[1]:method_text:[ransition.cts.BaseTransitionTest$TestTransition"",                mTransition.getName());    }   ])', 1), ('([25:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[25]:method_text:[    public void resetActivityStaticState() {        ChildlessActivity.onRootView(null);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[ Log.v(TAG, ""session id: "" + session.id);        activity.assertDefaultEvents(session);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[ service.getFinishedSession(sessionId2);        activity2.assertDefaultEvents(session2);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[service.getFinishedSession(sessionId2);        activity2.assertDefaultEvents(session2);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[a        // child that is important.        assertNoViewLevelEvents(session, activity);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[ssertSessionPaused(events, 11);        // TODO(b/122315042): assert parents disappeared    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[Id());        assertViewTreeFinished(events, 4);        assertSessionPaused(events, 5);    }   ])', 1), (""([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[rom the main session, but they're not nested     * neither have views attached to them.     */   ])"", 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[     * Tests scenario where new sessions with children are added from the main session.     */   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[ssSiblingSessions()}, except for session nesting (and     * order of lifecycle events).     */   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[om different session are removed in sequence - they should not     * have been batched.     */   ])', 1), ('([2:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[2]:method_text:[               throw new IllegalArgumentException(""invalid reason: "" + reason);        }    }   ])', 1), ('([1:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[1]:method_text:[   watcher.waitFor(DESTROYED);        assertThat(service.getAllSessionIds()).isEmpty();    }   ])', 1), ('([4:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[CTS]:[4]:method_text:[sion = service2.getOnlyFinishedSession();        activity2.assertDefaultEvents(session);    }   ])', 1), ('([1:/android/view/cts/ViewPaddingTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java]:[CTS]:[2]:method_text:[Before    public void setup() {        mContext = InstrumentationRegistry.getContext();    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[CTS]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[CTS]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[CTS]:[2]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([5:/android/hardware/cts/helpers/sensorverification/GyroscopeIntegrationVerification.java]:[CTS]:[5]:method_text:[mestampDeltaNs / ONE_SECOND_AS_NANOS;        }        mLastTimestampNs = eventTimestampNs;    }}])', 1), ('([7:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[CTS]:[7]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[CTS]:[1]:method_text:[          out.write((int) 42);            }            return session.publish();        }    }}])', 1), ('([1:/android/renderscript/cts/AllocationByteBufferTest.java]:[CTS]:[1]:method_text:[/Make sure dimY is larger than 1;        testByteBufferHelper(dt, byteSize, dimX, dimY);    }   ])', 1), ('([3:/com/android/cts/isolatedsplitapp/feature_b/FeatureBActivity.java]:[CTS]:[3]:method_text:[ase_layout);        getLayoutInflater().inflate(R.layout.feature_b_textview, linearLayout);    }}])', 1), ('([11:/com/android/cts/usespermissiondiffcertapp/UriGrantsClipboardTest.java]:[CTS]:[11]:method_text:[ static Context getContext() {        return InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([3:/android/widget/cts/PopupWindowCtsActivity.java]:[CTS]:[3]:method_text:[nterruptedException {        synchronized (this) {            this.wait(10000);        }    }}])', 1), ('([13:/android/autofillservice/cts/commontests/TimePickerTestCase.java]:[CTS]:[13]:method_text:[ty>        extends AutoFillServiceTestCase.AutoActivityLaunch<A> {    protected A mActivity;   ])', 1), ('([1:/android/carrierapi/cts/BaseCarrierApiTest.java]:[CTS]:[1]:method_text:[).hasCarrierPrivileges())                .isTrue();        mPreconditionsSatisfied = true;    }}])', 1), ('([4:/com/android/cts/verifier/sensors/HeartRateMonitorTestActivity.java]:[CTS]:[4]:method_text:[}        @Override        public void onAccuracyChanged(Sensor sensor, int i) {        }    }}])', 1), ('([1:/android/view/cts/surfacevalidator/LocalMediaProjectionService.java]:[CTS]:[1]:method_text:[ContentText(""Context"")                .build();        startForeground(2, notification);    }}])', 1), ('([1:/android/mediastress/cts/NativeMediaTest.java]:[CTS]:[1]:method_text:[TIME_MS = 4000;    public NativeMediaTest() {        super(NativeMediaActivity.class);    }   ])', 1), ('([9:/com/android/cts/verifier/camera/fov/PhotoCaptureActivity.java]:[CTS]:[9]:method_text:[           "": "" + e.getMessage(), Toast.LENGTH_LONG).show();        }        return false;    }}])', 1), ('([9:/android/location/cts/gnss/asn1/supl2/ver2_ulp_components/ApplicationID.java]:[CTS]:[9]:method_text:[     }      }    }    builder.append(indent).append(""};\\n"");    return builder.toString();  }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java]:[CTS]:[1]:method_text:[ {        super.setUp();        mUiAutomation = getInstrumentation().getUiAutomation();    }   ])', 1), ('([1:/com/android/cts/deviceadminservice/ComponentController.java]:[CTS]:[1]:method_text:[ + UserHandle.myUserId() + "", component="" + cn                + "", enabled="" + enabled);    }   ])', 1), ('([5:/android/widget/cts/ToolbarTest.java]:[CTS]:[5]:method_text:[ctivity = mActivityRule.getActivity();        mMainToolbar = mActivity.getMainToolbar();    }   ])', 1), ('([1:/android/content/sync/cts/StubAuthenticator.java]:[CTS]:[1]:method_text:[lt.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, true);            return result;        }    }}])', 1), ('([5:/com/android/cts/verifier/qstiles/InteractiveVerifierActivity.java]:[CTS]:[5]:method_text:[hrowable();        stackTrace.fillInStackTrace();        Log.e(TAG, message, stackTrace);    }}])', 1)]"	""	""	[('CTS', 74)]	[('[com.android.cts.intent.receiver.IntentReceiverActivity finish None]', 1), ('[android.graphics.drawable.cts.DrawableContainerTest LevelListDrawable CtsGraphicsTestCases]', 1), ('[android.location.cts.gnss.asn1.supl2.rrlp_components.SeqOfOTD_MsrsOfOtherSets isTagImplicit CtsLocationGnssTestCases]', 1), ('[android.video.cts.CodecTestActivity waitTillSurfaceIsCreated CtsVideoTestCases]', 1), ('[com.android.cts.splitapp.TestThemeHelper isNotNull None]', 1), ('[android.content.pm.cts.shortcut.multiuser.MainActivity currentTimeMillis None]', 1), ('[android.telecom.cts.NewOutgoingCallBroadcastReceiver isNewOutgoingCallBroadcastReceived CtsTelecomTestCases]', 1), ('[android.appsecurity.cts.Utils CollectingTestListener CtsAppSecurityHostTestCases]', 1), ('[android.systemui.cts.audiorecorder.base.BaseAudioRecorderService isRecording None]', 1), ('[android.dynamicmime.cts.PreferredActivitiesTestCases disableKeyguard CtsDynamicMimeHostTestCases]', 1), ('[android.widget.cts.RemoteViewsThemeColorsTest generateColorList CtsWidgetTestCases]', 1), ('[android.location.cts.gnss.asn1.supl2.supl_triggered_response.RepMode isExtensionValue CtsLocationGnssTestCases]', 1), ('[com.android.cts.verifier.sensors.MotionIndicatorView testUI None]', 1), ('[android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.transition.cts.TransitionTest testName CtsTransitionTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest ChildlessActivityTest CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testDefaultLifecycle CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testLaunchAnotherActivity CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testLaunchAnotherActivity_onTopOfIt CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testAddAndRemoveNoImportantChild CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testAddAndRemoveImportantChild CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testAddImportantChildAfterSessionStarted CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testAddAndRemoveImportantChildOnDifferentSession CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testDinamicallyManageChildlessSiblingSessions CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testDinamicallyAddOneChildOnAnotherSession_autoCloseSession CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testDinamicallyManageSiblingSessions CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testNestedSessions_simplestScenario CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testDinamicallyManageChildlessNestedSessions CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testRemoveChildrenFromDifferentSessions CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledBySettings CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledThenReEnabledBySettings CtsContentCaptureServiceTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p CtsMediaTestCases]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk CtsMediaTestCases]', 1), ('[android.provider.cts.media.MediaStore_Audio_MediaTest testMediaWithSubtitles CtsProviderTestCases]', 1), ('[android.carrierapi.cts.BaseCarrierApiTest werePreconditionsSatisfied CtsCarrierApiTestCases]', 1), ('[com.android.cts.verifier.sensors.HeartRateMonitorTestActivity setPassFailButtonClickListeners None]', 1), ('[android.mediastress.cts.NativeMediaTest NativeMediaTest CtsMediaStressTestCases]', 1), ('[com.android.cts.verifier.camera.fov.PhotoCaptureActivity OnClickListener None]', 1), ('[android.location.cts.gnss.asn1.supl2.ver2_ulp_components.ApplicationID isTagImplicit CtsLocationGnssTestCases]', 1), ('[com.android.cts.verifier.qstiles.InteractiveVerifierActivity test None]', 1)]	True	""	""	Found annotation reference in comments of .cpp files	""	""	""	""	2
9.9.3  . Encryption Methods	9.9.3	C-1-14	9.9.3/C-1-14	09090300.670114	"""C-1-14] MUST NOT use the same File Based Encryption (FBE) keys or subkeys for different cryptographic purposes (e.g. for both encryption and key derivation, or for two different encryption algorithms)."""	""	""	FBE	""	""	""	""	[('android.appsecurity.cts.DirectBootHostTest', 5), ('android.appsecurity.cts.AppDataIsolationTests', 3), ('android.cts.statsdatom.bluetooth.BluetoothStatsTests', 2), ('android.cts.statsdatom.statsd.UidAtomTests', 1), ('com.android.cts.devicepolicy.BaseDevicePolicyTest', 1), ('android.renderscript.cts.generated.TestCross', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi30', 1), ('android.content.cts.ContextTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25', 1), ('com.android.cts.managedprofile.ResetPasswordWithTokenTest', 1), ('android.hdmicec.cts.audio.HdmiCecSystemAudioModeTest', 1), ('android.renderscript.cts.generated.TestMad', 1), ('android.view.inputmethod.cts.InputMethodInfoTest', 1), ('android.cts.statsdatom.lib.AtomTestUtils', 1), ('android.location.cts.gnss.GnssMeasurementWhenNoLocationTest', 1), ('android.keystore.cts.SignatureTest', 1), ('android.cts.statsdatom.wifi.WifiStatsTests', 1), ('android.security.cts.Poc17_09', 1), ('android.text.cts.FontCoverageTest', 1), ('android.graphics.cts.ColorTest', 1), ('android.keystore.cts.CipherTest', 1), ('android.cts.statsdatom.statsd.AtomTestCase', 1), ('android.uirendering.cts.testclasses.ColorFilterAlphaTest', 1), ('android.renderscript.cts.generated.TestNativeExp', 1), ('android.provider.cts.contacts.hostside.ShadowCallLogTest', 1), ('android.cts.statsdatom.statsd.DeviceAtomTestCase', 1), ('com.android.cts.verifier.streamquality.StreamingVideoActivity', 1)]	[('destroy', 86), ('toString', 62), ('getDevice', 24), ('StringBuilder', 20), ('setUp', 15), ('tearDown', 12), ('hashCode', 5), ('ArgumentsFloatFloatFloatFloat', 4), ('ArgumentsHalfHalfHalfHalf', 4), ('getInstrumentation', 4), ('ArgumentsFloatFloat', 4), ('ArgumentsHalfHalf', 4), ('getBuild', 3), ('getContext', 3), ('getTargetContext', 3), ('ArgumentsFloatNFloatNFloatN', 2), ('ArgumentsHalfNHalfNHalfN', 2), ('wakeUpDevice', 2), ('getName', 2), ('createMultiRectBitmap', 2), ('Paint', 2), ('getMaxNumberOfUsersSupported', 1), ('getInstalledPackageNames', 1), ('ensurePrimaryUserHasNoPassword', 1), ('getCurrentUser', 1), ('checkCrossFloat3Float3Float3', 1), ('checkCrossFloat4Float4Float4', 1), ('checkCrossHalf3Half3Half3', 1), ('checkCrossHalf4Half4Half4', 1), ('getBytes', 1), ('cect_11_2_15_6_SystemAudioModeOffBeforeStandby', 1), ('sendSystemAudioModeInitiation', 1), ('sendDeviceToSleep', 1), ('checkMadFloatFloatFloatFloat', 1), ('checkMadFloat2Float2Float2Float2', 1), ('checkMadFloat3Float3Float3Float3', 1), ('checkMadFloat4Float4Float4Float4', 1), ('checkMadHalfHalfHalfHalf', 1), ('checkMadHalf2Half2Half2Half2', 1), ('checkMadHalf3Half3Half3Half3', 1), ('checkMadHalf4Half4Half4Half4', 1), ('ordinal', 1), ('HashMap', 1), ('Builder', 1), ('build', 1), ('toLanguageTag', 1), ('resourceColor', 1), ('getResources', 1), ('TypedValue', 1), ('getDeclaredFields', 1), ('getDeclaredAnnotations', 1), ('supports3DES', 1), ('DeviceLockSession', 1), ('LockScreenSession', 1), ('setLockCredential', 1), ('performDeviceLock', 1), ('sleepDevice', 1), ('getAbi', 1), ('configs', 1), ('getActivity', 1), ('getWindow', 1), ('CanvasClient', 1), ('checkNativeExpFloatFloat', 1), ('checkNativeExpFloat2Float2', 1), ('checkNativeExpFloat3Float3', 1), ('checkNativeExpFloat4Float4', 1), ('checkNativeExpHalfHalf', 1), ('checkNativeExpHalf2Half2', 1), ('checkNativeExpHalf3Half3', 1), ('checkNativeExpHalf4Half4', 1)]	[('CtsAppSecurityHostTestCases', 8), ('CtsStatsdAtomHostTestCases', 7), ('CtsDevicePolicyManagerTestCases', 3), ('CtsRenderscriptTestCases', 3), ('CtsKeystoreTestCases', 2), ('CtsContentTestCases', 1), ('CtsHdmiCecHostTestCases', 1), ('CtsInputMethodTestCases', 1), ('CtsLocationGnssTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsTextTestCases', 1), ('CtsGraphicsTestCases', 1), ('CtsUiRenderingTestCases', 1), ('CtsCallLogTestCases', 1)]	""	cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	FileBasedEncryptionPolicyTest_allowedPolicy	""	tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	[('(1,FBE,/android/cts/statsdatom/statsd/UidAtomTests.java)', 1), ('(2,FBE,/com/android/cts/devicepolicy/BaseDevicePolicyTest.java)', 1), ('(1,FBE,/android/renderscript/cts/generated/TestCross.java)', 1), ('(12,FBE,/android/appsecurity/cts/AppDataIsolationTests.java)', 1), ('(1,FBE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi30.java)', 1), ('(2,FBE,/android/content/cts/ContextTest.java)', 1), ('(1,FBE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java)', 1), ('(1,FBE,/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java)', 1), ('(1,FBE,/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java)', 1), ('(2,FBE,/android/renderscript/cts/generated/TestMad.java)', 1), ('(5,FBE,/android/view/inputmethod/cts/InputMethodInfoTest.java)', 1), ('(2,FBE,/android/cts/statsdatom/lib/AtomTestUtils.java)', 1), ('(3,FBE,/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java)', 1), ('(1,FBE,/android/keystore/cts/SignatureTest.java)', 1), ('(1,FBE,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(8,FBE,/android/security/cts/Poc17_09.java)', 1), ('(2,FBE,/android/text/cts/FontCoverageTest.java)', 1), ('(2,FBE,/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java)', 1), ('(3,FBE,/android/graphics/cts/ColorTest.java)', 1), ('(2,FBE,/android/keystore/cts/CipherTest.java)', 1), ('(17,FBE,/android/appsecurity/cts/DirectBootHostTest.java)', 1), ('(2,FBE,/android/cts/statsdatom/statsd/AtomTestCase.java)', 1), ('(1,FBE,/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java)', 1), ('(1,FBE,/android/renderscript/cts/generated/TestNativeExp.java)', 1), ('(8,FBE,/android/provider/cts/contacts/hostside/ShadowCallLogTest.java)', 1), ('(1,FBE,/android/cts/statsdatom/statsd/DeviceAtomTestCase.java)', 1), ('(1,FBE,/com/android/cts/verifier/streamquality/StreamingVideoActivity.java)', 1)]	"[('([1:/android/cts/statsdatom/statsd/UidAtomTests.java]:[FBE]:[1]:method_text:[e_package_whitelist %s"",                        origWhitelist));            }        }    }   ])', 1), ('([2:/com/android/cts/devicepolicy/BaseDevicePolicyTest.java]:[FBE]:[2]:method_text:[hrows InterruptedException {        CLog.d(""Sleeping %d ms"");        Thread.sleep(timeMs);    }}])', 1), ('([1:/android/renderscript/cts/generated/TestCross.java]:[FBE]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[2]:method_text:[  getDevice().uninstallPackage(APPA_PKG);        getDevice().uninstallPackage(APPB_PKG);    }   ])', 1), ('([5:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[5]:method_text:[          }                getDevice().waitForDeviceAvailable();            }        }    }   ])', 1), ('([5:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[5]:method_text:[    return false;        }        fail(""Unknown FBE mode: "" + mode);        return false;    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi30.java]:[FBE]:[1]:method_text:[ws Exception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId);    }}])', 1), ('([2:/android/content/cts/ContextTest.java]:[FBE]:[2]:method_text:[ that apps can go through a     * backup/restore cycle between FBE and non-FBE devices.     */   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[FBE]:[1]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[FBE]:[1]:method_text:[ordBeforeUnlock} and will be called by the hostside logic     * before it is exercised.     */   ])', 1), ('([1:/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java]:[FBE]:[1]:method_text:[ly to a <Give System Audio Mode Status>    * message when the System Audio Mode is ""Off"".    */  ])', 1), ('([2:/android/renderscript/cts/generated/TestMad.java]:[FBE]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([5:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[FBE]:[5]:method_text:[() : """";            }        } catch (IOException e) {            return """";        }    }   ])', 1), ('([2:/android/cts/statsdatom/lib/AtomTestUtils.java]:[FBE]:[2]:method_text:[        data.subList(lastStateIdx + 1, data.size()).clear();    }    private AtomTestUtils() {}}])', 1), ('([3:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[FBE]:[3]:method_text:[ {                TestUtils.setAirplaneModeOn(getContext(), false);            }        }    }}])', 1), ('([1:/android/keystore/cts/SignatureTest.java]:[FBE]:[1]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[FBE]:[1]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([8:/android/security/cts/Poc17_09.java]:[FBE]:[8]:method_text:[                             )==139);    }    /**     * b/38195738     * b/36590192     */   ])', 1), ('([2:/android/text/cts/FontCoverageTest.java]:[FBE]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[FBE]:[1]:method_text:[t(a1.getIsFirstMatch()).isFalse();        assertThat(a1.getIsOpportunistic()).isFalse();    }   ])', 1), ('([1:/android/cts/statsdatom/bluetooth/BluetoothStatsTests.java]:[FBE]:[1]:method_text:[at(a1.getIsFirstMatch()).isFalse();        assertThat(a1.getIsOpportunistic()).isTrue();    }   ])', 1), ('([3:/android/graphics/cts/ColorTest.java]:[FBE]:[3]:method_text:[droid.R.color"",                colors.length + systemColors.length, numPublicApiColors);    }   ])', 1), ('([2:/android/keystore/cts/CipherTest.java]:[FBE]:[2]:method_text:[ close() throws Exception {            mLockCredential.close();        }    }    @Presubmit   ])', 1), ('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[1]:method_text:[allPackage(OTHER_PKG);    }    /**     * Automotive devices MUST support native FBE.     */   ])', 1), ('([4:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[4]:method_text:[equals(getFbeMode()));    }    /**     * If device has native FBE, verify lifecycle.     */   ])', 1), (""([3:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[3]:method_text:[    /**     * If device doesn't have native FBE, enable emulation and verify lifecycle.     */   ])"", 1), (""([3:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[3]:method_text:[ATED);    }    /**     * If device doesn't have native FBE, verify normal lifecycle.     */   ])"", 1), ('([6:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[6]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}])', 1), ('([2:/android/cts/statsdatom/statsd/AtomTestCase.java]:[FBE]:[2]:method_text:[estamp is not truncated"")                .that(timestampNs % fiveMinutesInNs).isEqualTo(0);    }}])', 1), ('([1:/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java]:[FBE]:[1]:method_text:[R_COLOR, mConfig.mode));            canvas.drawBitmap(mBitmap, 0, 0, mPaint);        }    };   ])', 1), ('([1:/android/renderscript/cts/generated/TestNativeExp.java]:[FBE]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/provider/cts/contacts/hostside/ShadowCallLogTest.java]:[FBE]:[8]:method_text:[ != null) {            output = output.trim();        }        return ""1"".equals(output);    }}])', 1), ('([1:/android/cts/statsdatom/statsd/DeviceAtomTestCase.java]:[FBE]:[1]:method_text:[tings put global netstats_combine_subtype_enabled ""                + (enable ? ""1"" : ""0""));    }}])', 1), ('([1:/com/android/cts/verifier/streamquality/StreamingVideoActivity.java]:[FBE]:[1]:method_text:[ {                    urlConnection.disconnect();                }            }        }    }}])', 1)]"	""	""	[('FBE', 34)]	[('[android.cts.statsdatom.statsd.UidAtomTests testGpsScan CtsStatsdAtomHostTestCases]', 1), ('[com.android.cts.devicepolicy.BaseDevicePolicyTest isHeadlessSystemUserMode CtsDevicePolicyManagerTestCases]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testDirectBootModeWorks CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testAppUnableToAccessOtherUserAppDataDirApi29 CtsAppSecurityHostTestCases]', 1), ('[android.content.cts.ContextTest testContextParams_Inherit CtsContentTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodInfoTest testAtLeastOneEncryptionAwareInputMethodIsAvailable CtsInputMethodTestCases]', 1), ('[android.cts.statsdatom.lib.AtomTestUtils getReportMetricListData CtsStatsdAtomHostTestCases]', 1), ('[android.location.cts.gnss.GnssMeasurementWhenNoLocationTest testGnssMeasurementWhenNoLocation CtsLocationGnssTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.security.cts.Poc17_09 testPocCve_2017_6983 CtsSecurityBulletinHostTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleUnoptimizedScan CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.bluetooth.BluetoothStatsTests testBleOpportunisticScan CtsStatsdAtomHostTestCases]', 1), ('[android.keystore.cts.CipherTest isDeviceLocked CtsKeystoreTestCases]', 1), ('[android.appsecurity.cts.DirectBootHostTest testAutomotiveNativeFbe CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNative CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootEmulated CtsAppSecurityHostTestCases]', 1), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone CtsAppSecurityHostTestCases]', 1), ('[android.cts.statsdatom.statsd.AtomTestCase getReportList CtsStatsdAtomHostTestCases]', 1), ('[android.provider.cts.contacts.hostside.ShadowCallLogTest testDirectBootCallLog CtsCallLogTestCases]', 1), ('[android.cts.statsdatom.statsd.DeviceAtomTestCase installTestApp CtsStatsdAtomHostTestCases]', 1), ('[com.android.cts.verifier.streamquality.StreamingVideoActivity setPassFailButtonClickListeners None]', 1)]	True	""	""	Found annotation reference in comments of .cpp files	""	""	""	""	2
9.9.3  . Encryption Methods	9.9.3	C-1-15	9.9.3/C-1-15	09090300.670115	"""C-1-15] MUST ensure that all non-deleted blocks of encrypted file contents on persistent storage were encrypted using combinations of encryption key and initialization vector (IV) that depend on both the file and the offset within the file. In addition, all such combinations MUST be distinct, except where the encryption is done using inline encryption hardware that only supports an IV length of 32 bits."""	Test Available, incomplete.	""	""	""	""	""	""	""	""	""	""	cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	validateEncryptionFlags	""	tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	""	""	""	""	""	""	True	""	""	Found annotation reference in comments of .cpp files	""	""	""	""	1
2.2.1  . Hardware	7.1.1.1	H-0-2	7.1.1.1/H-0-2	07010101.720002	"""[7.1.1.1/H-0-2] MUST support GPU composition of graphic buffers at least as large as the highest resolution of any built-in display. If Handheld device implementations support software screen rotation, they: """	""	""	GPU	""	""	""	""	[('com.android.server.cts.GraphicsStatsValidationTest', 3), ('android.appmanifest.cts.UsesNativeLibraryTestCase', 3), ('android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest', 2), ('android.graphics.cts.BitmapTest', 2), ('android.graphics.cts.CameraGpuTest', 2), ('android.security.cts.Poc17_01', 2), ('GLtestLib', 1), ('android.view.cts.surfacevalidator.SurfacePixelValidator2', 1), ('com.android.cts.verifier.audio.sources.BlipAudioSource', 1), ('android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test', 1), ('android.renderscript.cts.refocus.RefocusTest', 1), ('android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest', 1), ('android.hardware.camera2.cts.CameraExtensionSessionTest', 1), ('android.view.cts.PixelCopyTest', 1), ('android.hardware.nativehardware.cts.HardwareBufferVrTest', 1), ('android.appsecurity.cts.KeySetHostTest', 1), ('android.graphics.cts.CameraGpuCtsActivity', 1), ('com.android.cts.verifier.wifiaware.TestListActivity', 1), ('android.graphics.gpuprofiling.cts.CtsFrameTracerDataSourceTest', 1), ('com.android.cts.deviceowner.HardwarePropertiesManagerTest', 1), ('android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest', 1), ('android.opengl.cts.Egl14Utils', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.view.cts.ASurfaceControlTest', 1), ('android.hardware.cts.HardwareBufferTest', 1), ('android.graphics.cts.BasicVulkanGpuTest', 1), ('GPUStressTestActivity', 1), ('android.graphics.cts.MediaVulkanGpuTest', 1), ('com.android.cts.verifier.wifiaware.DiscoveryRangingPublishTestActivity', 1), ('android.hardware.camera2.cts.RobustnessTest', 1), ('android.openglperf.cts.TextureTestRenderer', 1), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 1), ('android.media.cts.PresentationSyncTest', 1), ('android.openglperf.cts.GLSurfaceViewCustom', 1), ('android.app.uiautomation.cts.UiAutomationTest', 1), ('android.gpuprofiling.GpuRenderStagesDeviceActivity', 1), ('android.dumpsys.cts.GfxInfoDumpsysTest', 1), ('android.hardware.cts.helpers.SensorRatePermissionDirectReportTestHelper', 1), ('android.graphics.cts.CameraVulkanGpuTest', 1), ('android.graphics.cts.SyncTest', 1), ('android.view.cts.FrameMetricsListenerTest', 1), ('com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest', 1), ('android.deviceconfig.cts.DeviceConfigApiPermissionTests', 1), ('com.android.cts.deviceowner.VrTemperatureTest', 1), ('android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test', 1)]	[('getDevice', 11), ('onResume', 10), ('onPause', 10), ('getRenderMode', 6), ('start', 5), ('checkRenderThreadState', 5), ('currentThread', 5), ('getId', 5), ('setUp', 4), ('init', 4), ('requestRender', 4), ('eglGetError', 4), ('get', 4), ('getWidth', 3), ('getHolder', 3), ('destroySurfaceImp', 3), ('stream', 3), ('onDestroy', 2), ('run', 2), ('cleanup', 2), ('tearDown', 2), ('getWindow', 2), ('getHeight', 2), ('finalize', 2), ('requestExitAndWait', 2), ('onAttachedToWindow', 2), ('onDetachedFromWindow', 2), ('createSurface', 2), ('destroySurface', 2), ('getSimpleName', 2), ('nativeInitVulkan', 2), ('step', 1), ('Object', 1), ('BlipAudioSource', 1), ('super', 1), ('trigger', 1), ('getOverrideConfig', 1), ('countDown', 1), ('nCreateRenderer', 1), ('release', 1), ('Renderer', 1), ('getPackageManager', 1), ('getMessage', 1), ('Egl14Utils', 1), ('getMajorVersion', 1), ('find', 1), ('turnScreenOn', 1), ('data', 1), ('getIntent', 1), ('getExtras', 1), ('getApplication', 1), ('getFramePixels', 1), ('getContext', 1), ('getAssets', 1), ('Runnable', 1), ('handleDpadCenter', 1), ('glError', 1), ('getDebugFlags', 1), ('getPreserveEGLContextOnPause', 1), ('DefaultContextFactory', 1), ('DefaultWindowSurfaceFactory', 1), ('MyRenderer', 1), ('surfaceCreated', 1), ('surfaceDestroyed', 1), ('glLoadIdentity', 1), ('eglSwapBuffers', 1), ('onEglSwapBuffers', 1), ('getEGL', 1), ('createGL', 1), ('getGL', 1), ('LogWriter', 1), ('swap', 1), ('trim', 1), ('matches', 1), ('size', 1), ('getType', 1), ('setup', 1), ('teardown', 1)]	[('CtsGraphicsTestCases', 9), ('CtsShortcutManagerTestCases', 3), ('CtsViewTestCases', 3), ('CtsIncidentHostTestCases', 3), ('CtsCameraTestCases', 2), ('CtsGpuProfilingDataTestCases', 2), ('CtsSensorTestCases', 2), ('CtsOpenGlPerfTestCases', 2), ('CtsSecurityBulletinHostTestCases', 2), ('CtsRenderscriptTestCases', 1), ('CtsNativeHardwareTestCases', 1), ('CtsAppSecurityHostTestCases', 1), ('CtsOpenGLTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsSustainedPerformanceHostTestCases', 1), ('CtsMediaTestCases', 1), ('CtsUiAutomationTestCases', 1), ('CtsDumpsysHostTestCases', 1), ('CtsDeviceConfigTestCases', 1)]	""	android.mediapc.cts.PerformanceClassTest	testMinimumMemory()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/PerformanceClassTest.java	[('(1,GPU,/GLtestLib.java)', 1), ('(2,GPU,/android/view/cts/surfacevalidator/SurfacePixelValidator2.java)', 1), ('(4,GPU,/com/android/cts/verifier/audio/sources/BlipAudioSource.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(2,GPU,/android/graphics/cts/CameraGpuCtsActivity.java)', 1), ('(2,GPU,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(1,GPU,/android/opengl/cts/Egl14Utils.java)', 1), ('(8,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 1), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 1), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 1), ('(2,GPU,/GPUStressTestActivity.java)', 1), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(1,GPU,/android/openglperf/cts/TextureTestRenderer.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(3,GPU,/android/openglperf/cts/GLSurfaceViewCustom.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(5,GPU,/android/gpuprofiling/GpuRenderStagesDeviceActivity.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(1,GPU,/android/dumpsys/cts/GfxInfoDumpsysTest.java)', 1), ('(1,GPU,/android/hardware/cts/helpers/SensorRatePermissionDirectReportTestHelper.java)', 1), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(3,GPU,/android/security/cts/Poc17_01.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(1,GPU,/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1)]	"[('([1:/GLtestLib.java]:[GPU]:[1]:method_text:[     public static native void init(int width, int height);     public static native void step();}])', 1), ('([2:/android/view/cts/surfacevalidator/SurfacePixelValidator2.java]:[GPU]:[2]:method_text:[);            }        }        mImageReader.close();        mWorkerThread.quitSafely();    }}])', 1), ('([4:/com/android/cts/verifier/audio/sources/BlipAudioSource.java]:[GPU]:[4]:method_text:[Chans);            mNumPendingPulseFrames -= numFrames;        }        return numFrames;    }}])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[at=PNG,""                + ""icon_quality=100"";    }    @AsbSecurityTest(cveBugId = 109824443)   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([2:/android/graphics/cts/CameraGpuCtsActivity.java]:[GPU]:[2]:method_text:[ive void nDestroyRenderer(long renderer);    private static native int nDrawFrame(long renderer);}])', 1), ('([2:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[GPU]:[2]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([1:/android/opengl/cts/Egl14Utils.java]:[GPU]:[1]:method_text:[tureSize > 0 ? maxTextureSize : retrieveCapableTextureSize();        return maxTextureSize;    }}])', 1), ('([1:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[1]:method_text:[eyevent KEYCODE_WAKEUP"");        getDevice().executeShellCommand(""wm dismiss-keyguard"");    }   ])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            origRefreshRate[1] = """";        }        return origRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 1), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 1), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 1), ('([2:/GPUStressTestActivity.java]:[GPU]:[2]:method_text:[   @Override protected void onResume() {        super.onResume();        mView.onResume();    }}])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java]:[GPU]:[1]:method_text:[iscovery_ranging_publish,                R.string.aware_discovery_ranging_publish_info, 0);    }}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([1:/android/openglperf/cts/TextureTestRenderer.java]:[GPU]:[1]:method_text:[ + error);            throw new IllegalStateException(op + "": glError "" + error);        }    }}])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([3:/android/openglperf/cts/GLSurfaceViewCustom.java]:[GPU]:[3]:method_text:[ugFlags;    private int mEGLContextClientVersion;    private boolean mPreserveEGLContextOnPause;}])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([5:/android/gpuprofiling/GpuRenderStagesDeviceActivity.java]:[GPU]:[5]:method_text:[G, ""GpuProfilingData activity complete"");    }    private static native int nativeInitVulkan();}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([1:/android/dumpsys/cts/GfxInfoDumpsysTest.java]:[GPU]:[1]:method_text:[  foundAtLeastOneRow = true;            }        }        assertTrue(foundAtLeastOneRow);    }}])', 1), ('([1:/android/hardware/cts/helpers/SensorRatePermissionDirectReportTestHelper.java]:[GPU]:[1]:method_text:[edMemorySize);        eventPool.reset();        byteBuffer.clear();        return events;    }}])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 1), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([1:/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java]:[GPU]:[1]:method_text:[ * -> Exclude deprecated ApkInstaller.     * -> Check if host-side tests are non empty.     */   ])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1)]"	""	""	[('GPU', 53)]	[('[android.view.cts.surfacevalidator.SurfacePixelValidator2 OnImageAvailableListener None]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus CtsRenderscriptTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions CtsCameraTestCases]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop CtsViewTestCases]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr CtsNativeHardwareTestCases]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey CtsAppSecurityHostTestCases]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher CtsShortcutManagerTestCases]', 1), ('[android.graphics.cts.CameraGpuCtsActivity waitToFinishRendering CtsGraphicsTestCases]', 1), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 1), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty CtsGpuProfilingDataTestCases]', 1), ('[android.opengl.cts.Egl14Utils createEglDisplay CtsOpenGLTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest killTestApp CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame CtsIncidentHostTestCases]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame CtsIncidentHostTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop CtsSensorTestCases]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent CtsViewTestCases]', 1), ('[android.hardware.cts.HardwareBufferTest testIsSupported CtsHardwareTestCases]', 1), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails CtsGraphicsTestCases]', 1), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter CtsGraphicsTestCases]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering CtsGraphicsTestCases]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables CtsCameraTestCases]', 1), ('[android.openglperf.cts.TextureTestRenderer TextureTestRenderer CtsOpenGlPerfTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis CtsSustainedPerformanceHostTestCases]', 1), ('[android.media.cts.PresentationSyncTest testThroughput CtsMediaTestCases]', 1), ('[android.openglperf.cts.GLSurfaceViewCustom finish CtsOpenGlPerfTestCases]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException CtsUiAutomationTestCases]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.dumpsys.cts.GfxInfoDumpsysTest testGfxinfoFramestats CtsDumpsysHostTestCases]', 1), ('[android.hardware.cts.helpers.SensorRatePermissionDirectReportTestHelper toList CtsSensorTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 CtsSecurityBulletinHostTestCases]', 1), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 CtsSecurityBulletinHostTestCases]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount CtsViewTestCases]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission CtsDeviceConfigTestCases]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1)]	True	""	""	""	""	""	""	""	""
2.2.7.3  . Hardware	7.1.1.3	H-1-1	7.1.1.3/H-1-1	07010103.720101	"""[7.1.1.3/H-1-1] MUST have screen density of at least 400 dpi. """	""	""	""	""	""	""	""	""	""	""	""	android.mediapc.cts.PerformanceClassTest	testMinimumMemory()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/PerformanceClassTest.java	""	""	""	""	""	""	True	""	""	""	""	""	""	""	""
2.2.7.3  . Hardware	7.1.1.3	H-2-1	7.1.1.3/H-2-1	07010103.720201	"""[7.1.1.3/H-2-1] MUST have screen density of at least 400 dpi. """	""	""	""	""	""	""	""	""	""	""	""	android.mediapc.cts.PerformanceClassTest	testMinimumMemory()	CtsMediaPerformanceClassTestCases	/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/PerformanceClassTest.java	""	""	""	""	""	""	True	""	""	""	""	""	""	""	""
2.5.1  . Hardware	7.1.4.1	A-0-1	7.1.4.1/A-0-1	07010401.650001	"""[7.1.4.1/A-0-1] MUST declare OpenGL ES 3.1 or higher. """	""	""	""	""	""	""	""	""	""	""	""	android.dpi.cts.ConfigurationTests	testAutomotiveMinimumScreenSize	CtsDpiTestCases	""	""	""	""	""	""	""	""	""	""	section id changed from 7.1.1.1 in CDD-11	""	""	""	""	""
2.5.1  . Hardware	7.1.4.1	A-0-2	7.1.4.1/A-0-2	07010401.650002	"""[7.1.4.1/A-0-2] MUST support Vulkan 1.1. """	""	""	""	""	""	""	""	""	""	""	""	cts/tests/tests/graphics/jni/VulkanPreTransformTestHelpers.cpp	""	""	""	""	""	""	""	""	""	""	""	""	section id changed from 7.1.1.1 in CDD-11	""	""	""	""	""
2.5.1  . Hardware	7.1.4.1	A-0-3	7.1.4.1/A-0-3	07010401.650003	"""[7.1.4.1/A-0-3] MUST include Vulkan loader and export all symbols. If Automotive device implementations include a 3-axis accelerometer, they: """	Test missing	""	car Vulkan	""	""	""	""	""	""	""	""	""	""	""	""	""	"public void test/*
 *.
 */

/*
 * This file references fs_error.png, fs_good.png, fs_indeterminate.png,
 * and fs_warning.png which are licensed under Creative Commons 3.0
 * by fatcow.com.
 * http://www.fatcow.com/free-icons/
 * http://creativecommons.org/licenses/by/3.0/us/
 */

package com.android.cts.verifier.features;

import com.android.cts.verifier.PassFailButtons;
import com.android.cts.verifier.R;

import android.content.pm.FeatureInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.SimpleAdapter;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;

public class FeatureSummaryActivity extends PassFailButtons.ListActivity {
    /**
     * Simple storage class for data about an Android feature.
     */
    static class Feature {
        /**
         * The name of the feature. Should be one of the PackageManager.FEATURE*
         * constants.
         */
        public String name;

        /**
         * Indicates whether the field is present on the current device.
         */
        public boolean present;

        /**
         * Indicates whether the field is required for the current device.
         */
        public boolean required;

        /**
         * Constructor does not include 'present' because that's a detected
         * value, and not set during creation.
         *
         * @param name value for this.name
         * @param required value for this.required
         */
        public Feature(String name, boolean required) {
            this.name = name;
            this.required = required;
            this.present = false;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            } else if (o == null || !(o instanceof Feature)) {
                return false;
            } else {
                Feature feature = (Feature) o;
                return name.equals(feature.name);
            }
        }

        @Override
        public int hashCode() {
            return name.hashCode();
        }
    }

    public static final Feature[] ALL_ECLAIR_FEATURES = {
            new Feature(PackageManager.FEATURE_CAMERA, true),
            new Feature(PackageManager.FEATURE_CAMERA_AUTOFOCUS, false),
            new Feature(PackageManager.FEATURE_CAMERA_FLASH, false),
            new Feature(PackageManager.FEATURE_LIVE_WALLPAPER, false),
            new Feature(PackageManager.FEATURE_SENSOR_LIGHT, false),
            new Feature(PackageManager.FEATURE_SENSOR_PROXIMITY, false),
            new Feature(PackageManager.FEATURE_TELEPHONY, false),
            new Feature(PackageManager.FEATURE_TELEPHONY_CDMA, false),
            new Feature(PackageManager.FEATURE_TELEPHONY_GSM, false),
    };

    public static final Feature[] ALL_FROYO_FEATURES = {
            new Feature(""android.hardware.bluetooth"", true),
            new Feature(""android.hardware.location"", true),
            new Feature(""android.hardware.location.gps"", true),
            new Feature(""android.hardware.location.network"", true),
            new Feature(""android.hardware.microphone"", true),
            new Feature(""android.hardware.sensor.accelerometer"", true),
            new Feature(""android.hardware.sensor.compass"", true),
            new Feature(""android.hardware.touchscreen"", true),
            new Feature(""android.hardware.touchscreen.multitouch"", false),
            new Feature(""android.hardware.touchscreen.multitouch.distinct"", false),
            new Feature(""android.hardware.wifi"", false),
    };

    public static final Feature[] ALL_GINGERBREAD_FEATURES = {
            // Required features in prior releases that became optional in GB
            new Feature(""android.hardware.bluetooth"", false),
            new Feature(""android.hardware.camera"", false),
            new Feature(""android.hardware.location.gps"", false),
            new Feature(""android.hardware.microphone"", false),
            new Feature(""android.hardware.sensor.accelerometer"", false),
            new Feature(""android.hardware.sensor.compass"", false),

            // New features in GB
            new Feature(""android.hardware.audio.low_latency"", false),
            new Feature(""android.hardware.camera.front"", false),
            new Feature(""android.hardware.nfc"", false),
            new Feature(""android.hardware.sensor.barometer"", false),
            new Feature(""android.hardware.sensor.gyroscope"", false),
            new Feature(""android.hardware.touchscreen.multitouch.jazzhand"", false),
            new Feature(""android.software.sip"", false),
            new Feature(""android.software.sip.voip"", false),
    };

    public static final Feature[] ALL_GINGERBREAD_MR1_FEATURES = {
            new Feature(""android.hardware.usb.accessory"", false),
    };

    public static final Feature[] ALL_HONEYCOMB_FEATURES = {
            // Required features in prior releases that became optional in HC
            new Feature(""android.hardware.touchscreen"", false),

            new Feature(""android.hardware.faketouch"", true),
    };

    public static final Feature[] ALL_HONEYCOMB_MR1_FEATURES = {
            new Feature(""android.hardware.usb.host"", false),
            new Feature(""android.hardware.usb.accessory"", false),
    };

    public static final Feature[] ALL_HONEYCOMB_MR2_FEATURES = {
            new Feature(""android.hardware.faketouch.multitouch.distinct"", false),
            new Feature(""android.hardware.faketouch.multitouch.jazzhand"", false),
            new Feature(""android.hardware.screen.landscape"", false),
            new Feature(""android.hardware.screen.portrait"", false),
    };

    public static final Feature[] ALL_ICE_CREAM_SANDWICH_FEATURES = {
            new Feature(PackageManager.FEATURE_WIFI_DIRECT, false),
    };

    public static final Feature[] ALL_JELLY_BEAN_FEATURES = {
            // Required features in prior releases that became optional
            new Feature(PackageManager.FEATURE_FAKETOUCH, false),

            //new feature in JB
            new Feature(PackageManager.FEATURE_TELEVISION, false),
    };

    public static final Feature[] ALL_JELLY_BEAN_MR2_FEATURES = {
            new Feature(""android.software.app_widgets"", false),
            new Feature(""android.software.input_methods"", false),
            new Feature(""android.software.home_screen"", false),
            new Feature(""android.hardware.bluetooth_le"", false),
            new Feature(""android.hardware.camera.any"", false),
    };

    public static final Feature[] ALL_KITKAT_FEATURES = {
            new Feature(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION, false),
            new Feature(PackageManager.FEATURE_CONSUMER_IR, false),
            new Feature(PackageManager.FEATURE_DEVICE_ADMIN, false),
            new Feature(PackageManager.FEATURE_SENSOR_STEP_COUNTER, false),
            new Feature(PackageManager.FEATURE_SENSOR_STEP_DETECTOR, false),
    };

    public static final Feature[] ALL_KITKAT_WATCH_FEATURES = {
            new Feature(PackageManager.FEATURE_SENSOR_HEART_RATE, false),
            new Feature(PackageManager.FEATURE_BACKUP, false),
            new Feature(PackageManager.FEATURE_PRINTING, false),
            new Feature(PackageManager.FEATURE_WATCH, false),
            new Feature(PackageManager.FEATURE_WEBVIEW, false),
            new Feature(PackageManager.FEATURE_CAMERA_EXTERNAL, false),
    };

    public static final Feature[] ALL_LOLLIPOP_FEATURES = {
            // New features in L
            new Feature(PackageManager.FEATURE_AUDIO_OUTPUT, false),
            new Feature(PackageManager.FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING, false),
            new Feature(PackageManager.FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR, false),
            new Feature(PackageManager.FEATURE_CAMERA_CAPABILITY_RAW, false),
            new Feature(PackageManager.FEATURE_CAMERA_LEVEL_FULL, false),
            new Feature(PackageManager.FEATURE_CONNECTION_SERVICE, false),
            new Feature(PackageManager.FEATURE_GAMEPAD, false),
            new Feature(PackageManager.FEATURE_LEANBACK, false),
            new Feature(PackageManager.FEATURE_LIVE_TV, false),
            new Feature(PackageManager.FEATURE_MANAGED_USERS, false),
            new Feature(PackageManager.FEATURE_OPENGLES_EXTENSION_PACK, false),
            new Feature(PackageManager.FEATURE_SECURELY_REMOVES_USERS, false),
            new Feature(PackageManager.FEATURE_SENSOR_AMBIENT_TEMPERATURE, false),
            new Feature(PackageManager.FEATURE_SENSOR_HEART_RATE_ECG, false),
            new Feature(PackageManager.FEATURE_SENSOR_RELATIVE_HUMIDITY, false),
            new Feature(PackageManager.FEATURE_VERIFIED_BOOT, false),

            // Features explicitly made optional in L
            new Feature(PackageManager.FEATURE_LOCATION_NETWORK, false),

            // New hidden features in L
            new Feature(""android.hardware.ethernet"", false),
            new Feature(""android.hardware.hdmi.cec"", false),
            new Feature(""android.software.leanback_only"", false),
            new Feature(""android.software.voice_recognizers"", false),
    };

    public static final Feature[] ALL_MNC_FEATURES = {
            new Feature(PackageManager.FEATURE_MIDI, false),
            new Feature(PackageManager.FEATURE_AUDIO_PRO, false),
            new Feature(PackageManager.FEATURE_AUTOMOTIVE, false),
            new Feature(PackageManager.FEATURE_HIFI_SENSORS, false),
            new Feature(PackageManager.FEATURE_FINGERPRINT, false),
    };

    public static final Feature[] ALL_NYC_FEATURES = {
            new Feature(PackageManager.FEATURE_VR_MODE, false),
            new Feature(PackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE, false),
            new Feature(PackageManager.FEATURE_VULKAN_HARDWARE_VERSION, false),
            new Feature(PackageManager.FEATURE_VULKAN_HARDWARE_LEVEL, false),
            new Feature(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION_NFCF, false),
            new Feature(PackageManager.FEATURE_PICTURE_IN_PICTURE, false),
            new Feature(PackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT, false),
            // FEATURE_FILE_BASED_ENCRYPTION is hide
            new Feature(""android.software.file_based_encryption"", false),
    };

    public static final Feature[] ALL_O_FEATURES = {
            new Feature(PackageManager.FEATURE_VULKAN_HARDWARE_COMPUTE, false),
            // FEATURE_TELEPHONY_CARRIERLOCK is SystemApi
            new Feature(""android.hardware.telephony.carrierlock"", false),
            new Feature(PackageManager.FEATURE_WIFI_AWARE, false),
            new Feature(PackageManager.FEATURE_EMBEDDED, false),
            new Feature(PackageManager.FEATURE_COMPANION_DEVICE_SETUP, false),
            new Feature(PackageManager.FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS, false),
            new Feature(PackageManager.FEATURE_VR_HEADTRACKING, false),
            // FEATURE_CTS is hide
            new Feature(""android.software.cts"", false),
            new Feature(PackageManager.FEATURE_WIFI_AWARE, false),
    };

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fs_main);
        setPassFailButtonClickListeners();
        setInfoResources(R.string.feature_summary, R.string.feature_summary_info, R.layout.fs_info);

        // some values used to detect warn-able conditions involving multiple
        // features
        boolean hasWifi = false;
        boolean hasTelephony = false;
        boolean hasBluetooth = false;
        boolean hasIllegalFeature = false;
        boolean hasTelevision = false;

        // get list of all features device thinks it has, & store in a HashMap
        // for fast lookups
        HashMap<String, String> actualFeatures = new HashMap<String, String>();
        for (FeatureInfo fi : getPackageManager().getSystemAvailableFeatures()) {
            actualFeatures.put(fi.name, fi.name);
        }

        // data structure that the SimpleAdapter will use to populate ListView
        ArrayList<HashMap<String, Object>> listViewData = new ArrayList<HashMap<String, Object>>();

        // roll over all known features & check whether device reports them
        boolean present = false;
        int statusIcon;
        Set<Feature> features = new LinkedHashSet<Feature>();

        // add features from latest to last so that the latest requirements are put in the set first
        int apiVersion = Build.VERSION.SDK_INT;
        if (apiVersion >= Build.VERSION_CODES.O) {
            Collections.addAll(features, ALL_O_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.N) {
            Collections.addAll(features, ALL_NYC_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.M) {
            Collections.addAll(features, ALL_MNC_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.LOLLIPOP) {
            Collections.addAll(features, ALL_LOLLIPOP_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.KITKAT_WATCH) {
            Collections.addAll(features, ALL_KITKAT_WATCH_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.KITKAT) {
            Collections.addAll(features, ALL_KITKAT_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            Collections.addAll(features, ALL_JELLY_BEAN_MR2_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.JELLY_BEAN) {
            Collections.addAll(features, ALL_JELLY_BEAN_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            Collections.addAll(features, ALL_ICE_CREAM_SANDWICH_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            Collections.addAll(features, ALL_HONEYCOMB_MR2_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.HONEYCOMB_MR1) {
            Collections.addAll(features, ALL_HONEYCOMB_MR1_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.HONEYCOMB) {
            Collections.addAll(features, ALL_HONEYCOMB_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.GINGERBREAD_MR1) {
            Collections.addAll(features, ALL_GINGERBREAD_MR1_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.GINGERBREAD) {
            Collections.addAll(features, ALL_GINGERBREAD_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.FROYO) {
            Collections.addAll(features, ALL_FROYO_FEATURES);
        }
        if (apiVersion >= Build.VERSION_CODES.ECLAIR_MR1) {
            Collections.addAll(features, ALL_ECLAIR_FEATURES);
        }

        hasTelevision = getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEVISION);
        for (Feature f : features) {
            HashMap<String, Object> row = new HashMap<String, Object>();
            listViewData.add(row);
            present = actualFeatures.containsKey(f.name);
            if (present) {
                // device reports it -- yay! set the happy icon
                hasWifi = hasWifi || PackageManager.FEATURE_WIFI.equals(f.name);
                hasTelephony = hasTelephony || PackageManager.FEATURE_TELEPHONY.equals(f.name);
                hasBluetooth = hasBluetooth || PackageManager.FEATURE_BLUETOOTH.equals(f.name);
                statusIcon = R.drawable.fs_good;
                actualFeatures.remove(f.name);
            } else if (!present && f.required) {
                // it's required, but device doesn't report it. Boo, set the
                // bogus icon
                statusIcon = R.drawable.fs_error;
                if (hasTelevision && PackageManager.FEATURE_LOCATION.equals(f.name)) {
                    statusIcon = R.drawable.fs_indeterminate;
                }
            } else {
                // device doesn't report it, but it's not req'd, so can't tell
                // if there's a problem
                statusIcon = R.drawable.fs_indeterminate;
            }
            row.put(""feature"", f.name);
            row.put(""icon"", statusIcon);
        }

        // now roll over any remaining features (which are non-standard)
        for (String feature : actualFeatures.keySet()) {
            if (feature == null || """".equals(feature))
                continue;
            HashMap<String, Object> row = new HashMap<String, Object>();
            listViewData.add(row);
            row.put(""feature"", feature);
            if (feature.startsWith(""android"")) { // intentionally not ""android.""
                // sorry, you're not allowed to squat in the official namespace;
                // set bogus icon
                row.put(""icon"", R.drawable.fs_error);
                hasIllegalFeature = true;
            } else {
                // non-standard features are okay, but flag them just in case
                row.put(""icon"", R.drawable.fs_warning);
            }
        }

        // sort the ListView's data to group by icon type, for easier reading by
        // humans
        final HashMap<Integer, Integer> idMap = new HashMap<Integer, Integer>();
        idMap.put(R.drawable.fs_error, 0);
        idMap.put(R.drawable.fs_warning, 1);
        idMap.put(R.drawable.fs_indeterminate, 2);
        idMap.put(R.drawable.fs_good, 3);
        Collections.sort(listViewData, new Comparator<HashMap<String, Object>>() {
            public int compare(HashMap<String, Object> left, HashMap<String, Object> right) {
                int leftId = idMap.get(left.get(""icon""));
                int rightId = idMap.get(right.get(""icon""));
                if (leftId == rightId) {
                    return ((String) left.get(""feature"")).compareTo((String) right.get(""feature""));
                }
                if (leftId < rightId)
                    return -1;
                return 1;
            }
        });

        // Set up the SimpleAdapter used to populate the ListView
        SimpleAdapter adapter = new SimpleAdapter(this, listViewData, R.layout.fs_row,
                new String[] {
                        ""feature"", ""icon""
                }, new int[] {
                        R.id.fs_feature, R.id.fs_icon
                });
        adapter.setViewBinder(new SimpleAdapter.ViewBinder() {
            public boolean setViewValue(View view, Object data, String repr) {
                try {
                    if (view instanceof ImageView) {
                        ((ImageView) view).setImageResource((Integer) data);
                    } else if (view instanceof TextView) {
                        ((TextView) view).setText((String) data);
                    } else {
                        return false;
                    }
                    return true;
                } catch (ClassCastException e) {
                    return false;
                }
            }
        });
        setListAdapter(adapter);

        // finally, check for our second-order error cases and set warning text
        // if necessary
        StringBuffer sb = new StringBuffer();
        if (hasIllegalFeature) {
            sb.append(getResources().getString(R.string.fs_disallowed)).append(""\n"");
        }

        if (!hasWifi && !hasTelephony && !hasBluetooth) {
            sb.append(getResources().getString(R.string.fs_missing_wifi_telephony)).append(""\n"");
        }

        String warnings = sb.toString().trim();
        if (warnings == null || """".equals(warnings)) {
            ((TextView) (findViewById(R.id.fs_warnings))).setVisibility(View.GONE);
        } else {
            ((TextView) (findViewById(R.id.fs_warnings))).setText(warnings);
        }
    }
}"	""	""	car Vulkan	""	""	""	""	""	""	""	""	""	""
7.3.2  . Magnetometer	7.3.2	C-1-10	7.3.2/C-1-10	07030200.670110	"""C-1-10] MUST implement the TYPE_MAGNETIC_FIELD_UNCALIBRATED sensor. If device implementations include a 3-axis magnetometer, an accelerometer sensor, and a 3-axis gyroscope sensor, they:"""	""	""	TYPE_MAGNETIC_FIELD_UNCALIBRATED	""	""	""	""	""	""	""	""	android.hardware.cts.SensorSupportTest	testSupportsMagneticFieldUncalibrated	CtsSensorTestCases	/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorSupportTest.java	""	"public void testSupportsMagneticFieldUncalibrated() {
        checkHifiVrSensorSupport(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED);
    }

    @CddTest(requirement=""7.3.9/C-2-7"")"	""	""	TYPE_MAGNETIC_FIELD_UNCALIBRATED	""	""	""	""	""	""	""	""	""	""
7.3.8  . Proximity Sensor	7.3.8	C-1-4	7.3.8/C-1-4	07030800.670104	"""C-1-4] MUST report a maximum range and resolution of 5. <h4 id=""739_high_fidelity_sensors"" """	Test Incomplete	""	sensor proximity	""	""	""	""	""	""	""	""	android.hardware.cts.SensorParameterRangeTest	testProximityFifoLength	CtsSensorTestCases	/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java	""	"public void testProximityFifoLength() throws Throwable {
        if (!mHasHifiSensors || !mHasProximitySensor) return;
        checkMinFifoLength(Sensor.TYPE_PROXIMITY, PROXIMITY_SENSOR_MIN_FIFO_LENGTH);
    }"	""	""	sensor proximity	""	""	""	""	No test for the proximity sensors range and resolution found.	tbd	""	""	""	""
7.3.8  . Proximity Sensor	7.3.8	C-1-3	7.3.8/C-1-3	07030800.670103	"""C-1-3] MUST use 0 centimeters as the near reading and 5 centimeters as the far reading."""	Test Incomplete	""	""	""	""	""	""	""	""	""	""	android.hardware.cts.SensorParameterRangeTest	testProximityFifoLength	CtsSensorTestCases	/home/gpoor/cts-12-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java	""	"public void testProximityFifoLength() throws Throwable {
        if (!mHasHifiSensors || !mHasProximitySensor) return;
        checkMinFifoLength(Sensor.TYPE_PROXIMITY, PROXIMITY_SENSOR_MIN_FIFO_LENGTH);
    }"	""	""	sensor proximity	""	""	""	""	No test for the proximity sensors range and resolution found.	tbd	""	""	""	""
7.4.1  . Telephony	7.4.1	C-5-2	7.4.1/C-5-2	07040100.670502	"""C-5-2] MUST declare the android.hardware.telephony.ims.singlereg feature flag and provide a complete implementation of the SipTransport API, the GbaService API, dedicated bearer indications using the IRadio 1.6 HAL, and provisioning via Auto Configuration Server (ACS) or other proprietary provisioning mechanism using the IMS Configuration API. <h5 id=""7411_number_blocking_compatibility"" """	Test Available	""	singlereg android.hardware.telephony.ims.singlereg	""	""	""	""	""	""	""	""	android.telephony.ims.cts.SipDelegateManagerTest	connectTestImsServiceWithSipTransportAndConfig	CtsTelephonyTestCases	/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/SipDelegateManagerTest.java	""	"/*
 *.
 */

package android.telephony.ims.cts;

import static junit.framework.Assert.assertNotNull;
import static junit.framework.Assert.assertTrue;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import static java.nio.charset.StandardCharsets.UTF_8;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.InetAddresses;
import android.net.Uri;
import android.os.Parcel;
import android.os.PersistableBundle;
import android.telephony.CarrierConfigManager;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.telephony.ims.DelegateRegistrationState;
import android.telephony.ims.DelegateRequest;
import android.telephony.ims.FeatureTagState;
import android.telephony.ims.ImsException;
import android.telephony.ims.ImsManager;
import android.telephony.ims.ImsService;
import android.telephony.ims.ImsStateCallback;
import android.telephony.ims.SipDelegateConfiguration;
import android.telephony.ims.SipDelegateManager;
import android.telephony.ims.SipMessage;
import android.telephony.ims.feature.ImsFeature;
import android.telephony.ims.stub.ImsFeatureConfiguration;
import android.util.ArraySet;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.platform.app.InstrumentationRegistry;

import com.android.compatibility.common.util.ShellIdentityUtils;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.net.InetSocketAddress;
import java.util.Arrays;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

/**
 * CTS tests for {@link SipDelegateManager} API.
 */
@RunWith(AndroidJUnit4.class)
public class SipDelegateManagerTest {
    private static final String MMTEL_TAG =
            ""+g.3gpp.iari-ref=\""urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\"""";
    private static final String ONE_TO_ONE_CHAT_TAG =
            ""+g.3gpp.icsi-ref=\""urn%3Aurn-7%3A3gppservice.ims.icsi.oma.cpm.msg\"""";
    private static final String GROUP_CHAT_TAG =
            ""+g.3gpp.icsi-ref=\""urn%3Aurn-7%3A3gppservice.ims.icsi.oma.cpm.session\"""";
    private static final String FILE_TRANSFER_HTTP_TAG =
            ""+g.3gpp.iari-ref=\""urn%3Aurn-7%3A3gppapplication.ims.iari.rcs.fthttp\"""";

    private static final String[] DEFAULT_FEATURE_TAGS = {
            ONE_TO_ONE_CHAT_TAG, GROUP_CHAT_TAG, FILE_TRANSFER_HTTP_TAG};

    private static class CarrierConfigReceiver extends BroadcastReceiver {
        private CountDownLatch mLatch = new CountDownLatch(1);
        private final int mSubId;

        CarrierConfigReceiver(int subId) {
            mSubId = subId;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            if (CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED.equals(intent.getAction())) {
                int subId = intent.getIntExtra(CarrierConfigManager.EXTRA_SUBSCRIPTION_INDEX, -1);
                if (mSubId == subId) {
                    mLatch.countDown();
                }
            }
        }

        void clearQueue() {
            mLatch = new CountDownLatch(1);
        }

        void waitForCarrierConfigChanged() throws Exception {
            mLatch.await(5000, TimeUnit.MILLISECONDS);
        }
    }

    /**
     * Encapsulates the interfaces created during SipDelegateManager testing.
     */
    public class TransportInterfaces {
        public final DelegateRequest request;
        public final Set<FeatureTagState> deniedTags;
        public final SipDelegateManager manager;
        public TestSipTransport transport;
        public TestImsRegistration reg;
        public TestSipDelegate delegate;
        public TestSipDelegateConnection delegateConn;
        private final int mDelegateIndex;

        public TransportInterfaces(DelegateRequest request, Set<FeatureTagState>  deniedTags,
                int delegateIndex) {
            this.request = request;
            this.deniedTags = deniedTags;
            manager = getSipDelegateManager();
            mDelegateIndex = delegateIndex;
        }

        public void connect() throws Exception {
            assertTrue(sServiceConnector.setDefaultSmsApp());
            connectTestImsServiceWithSipTransportAndConfig();

            transport = sServiceConnector.getCarrierService().getSipTransport();
            reg = sServiceConnector.getCarrierService().getImsRegistration();
            delegateConn = new TestSipDelegateConnection(request);

            delegate = createSipDelegateConnectionAndVerify(manager, delegateConn,
                    transport, deniedTags, mDelegateIndex);
            assertNotNull(delegate);
            // ensure we got a callback for initial reg state.
            verifyUpdateRegistrationCalled(reg);

            InetSocketAddress localAddr = new InetSocketAddress(
                    InetAddresses.parseNumericAddress(""1.1.1.1""), 80);
            InetSocketAddress serverAddr = new InetSocketAddress(
                    InetAddresses.parseNumericAddress(""2.2.2.2""), 81);
            SipDelegateConfiguration c = new SipDelegateConfiguration.Builder(1,
                    SipDelegateConfiguration.SIP_TRANSPORT_TCP, localAddr, serverAddr).build();
            // send first SIP config and verify
            verifyRegisteredAndSendSipConfig(delegateConn, delegate, request.getFeatureTags(),
                    deniedTags, c);
        }

        /**
         * Create a connection between fake app interface and fake ImsService impl and set up the
         * framework to accept incoming/outgoing messages. Once done, verify the transport is open.
         */
        public void connectAndVerify() throws Exception {
            connect();

            // Verify message transport is open.
            verifyOutgoingTransport(delegateConn, delegate);
            verifyIncomingTransport(delegateConn, delegate);
        }
    }

    private static int sTestSlot = 0;
    private static int sTestSub = SubscriptionManager.INVALID_SUBSCRIPTION_ID;
    private static ImsServiceConnector sServiceConnector;
    private static CarrierConfigReceiver sReceiver;

    @BeforeClass
    public static void beforeAllTests() throws Exception {
        // First, only populate test slot/sub
        if (!ImsUtils.shouldTestTelephony()) {
            return;
        }

        TelephonyManager tm = (TelephonyManager) getContext()
                .getSystemService(Context.TELEPHONY_SERVICE);
        sTestSub = ImsUtils.getPreferredActiveSubId();
        sTestSlot = SubscriptionManager.getSlotIndex(sTestSub);
        if (tm.getSimState(sTestSlot) != TelephonyManager.SIM_STATE_READY) {
            return;
        }
        // Next, only start tests that require ImsResolver to bind to test ImsService if
        // feature FEATURE_TELEPHONY_IMS is supported on this device.
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        sServiceConnector = new ImsServiceConnector(InstrumentationRegistry.getInstrumentation());
        // Remove all live ImsServices until after these tests are done
        sServiceConnector.clearAllActiveImsServices(sTestSlot);

        sReceiver = new CarrierConfigReceiver(sTestSub);
        IntentFilter filter = new IntentFilter(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED);
        // ACTION_CARRIER_CONFIG_CHANGED is sticky, so we will get a callback right away.
        InstrumentationRegistry.getInstrumentation().getContext()
                .registerReceiver(sReceiver, filter);

        if (!ImsUtils.shouldTestImsSingleRegistration()) {
            // override FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION setting for this test to enable
            // APIs.
            sServiceConnector.setDeviceSingleRegistrationEnabled(true);
        }

        setFeatureTagsCarrierAllowed(DEFAULT_FEATURE_TAGS);
    }

    @AfterClass
    public static void afterAllTests() throws Exception {
        // Only clean up ImsResolver overrides if feature FEATURE_TELEPHONY_IMS is supported.
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }

        // Restore all ImsService configurations that existed before the test.
        if (sServiceConnector != null) {
            sServiceConnector.disconnectServices();
        }
        sServiceConnector = null;

        // Ensure there are no CarrierConfig overrides as well as reset the ImsResolver in case the
        // ImsService override changed in CarrierConfig while we were overriding it.
        overrideCarrierConfig(null);

        if (sReceiver != null) {
            InstrumentationRegistry.getInstrumentation().getContext().unregisterReceiver(sReceiver);
            sReceiver = null;
        }
    }

    @Before
    public void beforeTest() {
        if (!ImsUtils.shouldTestTelephony()) {
            return;
        }
        TelephonyManager tm = (TelephonyManager) InstrumentationRegistry.getInstrumentation()
                .getContext().getSystemService(Context.TELEPHONY_SERVICE);
        if (tm.getSimState(sTestSlot) != TelephonyManager.SIM_STATE_READY) {
            fail(""This test requires that there is a SIM in the device!"");
        }
        // Correctness check: ensure that the subscription hasn't changed between tests.
        int[] subs = SubscriptionManager.getSubId(sTestSlot);

        if (subs == null) {
            fail(""This test requires there is an active subscription in slot "" + sTestSlot);
        }
        boolean isFound = false;
        for (int sub : subs) {
            isFound |= (sTestSub == sub);
        }
        if (!isFound) {
            fail(""Invalid state found: the test subscription in slot "" + sTestSlot + "" changed ""
                    + ""during this test."");
        }
    }

    @After
    public void afterTest() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        // Unbind the ImsService after the test completes only if feature FEATURE_TELEPHONY_IMS
        // is enabled.
        if (sServiceConnector != null) {
            sServiceConnector.disconnectCarrierImsService();
            sServiceConnector.restoreDefaultSmsApp();
        }
    }"	""	""	singlereg	""	""	""	""	""	""	""	""	""	""
7.4.1  . Telephony	7.4.1	C-5-1	7.4.1/C-5-1	07040100.670501	"""C-5-1] MUST declare the android.hardware.telephony.ims feature flag and provide a complete implementation of the ImsService API for both MMTEL and RCS User Capability Exchange API."""	Test Available	""	RCS MMTEL android.hardware.telephony.ims	""	""	""	""	""	""	""	""	android.telephony.ims.cts.ImsServiceTest	testCarrierImsServiceBindRcsChangeToMmtel	CtsTelephonyTestCases	/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java	""	"public void testCarrierImsServiceBindRcsChangeToMmtel() throws Exception {
        if (!ImsUtils.shouldTestImsService()) {
            return;
        }
        // Connect to the ImsService with the RCS feature.
        assertTrue(sServiceConnector.connectCarrierImsService(new ImsFeatureConfiguration.Builder()
                .addFeature(sTestSlot, ImsFeature.FEATURE_RCS)
                .build()));
        // The RcsFeature is created when the ImsService is bound. If it wasn't created, then the
        // Framework did not call it.
        assertTrue(sServiceConnector.getCarrierService().waitForLatchCountdown(
                TestImsService.LATCH_CREATE_RCS));

        // Change the supported feature to MMTEl
        sServiceConnector.getCarrierService().getImsService().onUpdateSupportedImsFeatures(
                new ImsFeatureConfiguration.Builder()
                .addFeature(sTestSlot, ImsFeature.FEATURE_MMTEL).build());

        // createMmTelFeature should be called.
        assertTrue(sServiceConnector.getCarrierService().waitForLatchCountdown(
                TestImsService.LATCH_CREATE_MMTEL));

        // Wait for the framework to set the capabilities on the ImsService
        sServiceConnector.getCarrierService().waitForLatchCountdown(
                TestImsService.LATCH_MMTEL_CAP_SET);
    }"	""	""	RCS MMTEL	""	""	""	""	""	""	""	""	""	""
7.4.2  . IEEE 802.11	7.4.2	C-1-10	7.4.2/C-1-10	07040200.670110	"""C-1-10] MUST randomize Probe request sequence number between the last probe request of a scan and the first probe request of the next scan."""	Test Available	""	scan probe	""	""	""	""	""	""	""	""	android.net.wifi.cts.ConnectedNetworkScorerTest	isNotNull	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java	""	"/*
 *.
 */

package android.net.wifi.cts;

import static android.Manifest.permission.CONNECTIVITY_INTERNAL;
import static android.Manifest.permission.NETWORK_SETTINGS;
import static android.Manifest.permission.READ_WIFI_CREDENTIAL;
import static android.Manifest.permission.WIFI_UPDATE_USABILITY_STATS_SCORE;
import static android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID;
import static android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PRIVATE;
import static android.net.wifi.WifiUsabilityStatsEntry.ContentionTimeStats;
import static android.net.wifi.WifiUsabilityStatsEntry.RadioStats;
import static android.net.wifi.WifiUsabilityStatsEntry.RateStats;
import static android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_FAILURE;
import static android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_NO_PROBE;
import static android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_SUCCESS;
import static android.net.wifi.WifiUsabilityStatsEntry.PROBE_STATUS_UNKNOWN;
import static android.net.wifi.WifiUsabilityStatsEntry.WME_ACCESS_CATEGORY_BE;
import static android.net.wifi.WifiUsabilityStatsEntry.WME_ACCESS_CATEGORY_BK;
import static android.net.wifi.WifiUsabilityStatsEntry.WME_ACCESS_CATEGORY_VI;
import static android.net.wifi.WifiUsabilityStatsEntry.WME_ACCESS_CATEGORY_VO;
import static android.os.Process.myUid;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import android.annotation.NonNull;
import android.app.UiAutomation;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiNetworkSpecifier;
import android.net.wifi.WifiNetworkSuggestion;
import android.net.wifi.WifiUsabilityStatsEntry;
import android.net.wifi.WifiConnectedSessionInfo;
import android.os.Build;
import android.platform.test.annotations.AppModeFull;
import android.support.test.uiautomator.UiDevice;
import android.telephony.TelephonyManager;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;
import androidx.test.filters.SdkSuppress;
import androidx.test.platform.app.InstrumentationRegistry;

import com.android.compatibility.common.util.ApiLevelUtil;
import com.android.compatibility.common.util.PollingCheck;
import com.android.compatibility.common.util.PropertyUtil;
import com.android.compatibility.common.util.ShellIdentityUtils;

import com.google.common.collect.Range;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * Tests for wifi connected network scorer interface and usability stats.
 */
@AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")
@LargeTest
@RunWith(AndroidJUnit4.class)
public class ConnectedNetworkScorerTest extends WifiJUnit4TestBase {
    private Context mContext;
    private WifiManager mWifiManager;
    private ConnectivityManager mConnectivityManager;
    private UiDevice mUiDevice;
    private TestHelper mTestHelper;
    private TelephonyManager mTelephonyManager;

    private boolean mWasVerboseLoggingEnabled;

    private static final int WIFI_CONNECT_TIMEOUT_MILLIS = 30_000;
    private static final int TIMEOUT = 12_000;
    private static final int WAIT_DURATION = 5_000;

    @Before
    public void setUp() throws Exception {
        mContext = InstrumentationRegistry.getInstrumentation().getContext();

        // skip the test if WiFi is not supported
        assumeTrue(WifiFeature.isWifiSupported(mContext));

        mWifiManager = mContext.getSystemService(WifiManager.class);
        assertThat(mWifiManager).isNotNull();

        mConnectivityManager = mContext.getSystemService(ConnectivityManager.class);

        // turn on verbose logging for tests
        mWasVerboseLoggingEnabled = ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.isVerboseLoggingEnabled());
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setVerboseLoggingEnabled(true));

        // enable Wifi
        if (!mWifiManager.isWifiEnabled()) {
            ShellIdentityUtils.invokeWithShellPermissions(() -> mWifiManager.setWifiEnabled(true));
        }
        PollingCheck.check(""Wifi not enabled"", TIMEOUT, () -> mWifiManager.isWifiEnabled());

        // turn screen on
        mUiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());

        mTestHelper = new TestHelper(mContext, mUiDevice);
        mTestHelper.turnScreenOn();

        // Clear any existing app state before each test.
        if (WifiBuildCompat.isPlatformOrWifiModuleAtLeastS(mContext)) {
            ShellIdentityUtils.invokeWithShellPermissions(
                    () -> mWifiManager.removeAppState(myUid(), mContext.getPackageName()));
        }

        // check we have >= 1 saved network
        List<WifiConfiguration> savedNetworks = ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.getConfiguredNetworks());
        assertWithMessage(""Need at least one saved network"").that(savedNetworks).isNotEmpty();

        // ensure Wifi is connected
        ShellIdentityUtils.invokeWithShellPermissions(() -> mWifiManager.reconnect());
        PollingCheck.check(
                ""Wifi not connected"",
                WIFI_CONNECT_TIMEOUT_MILLIS,
                () -> mWifiManager.getConnectionInfo().getNetworkId() != -1);
        mTelephonyManager = mContext.getSystemService(TelephonyManager.class);
    }

    @After
    public void tearDown() throws Exception {
        if (!WifiFeature.isWifiSupported(mContext)) return;
        if (!mWifiManager.isWifiEnabled()) {
            ShellIdentityUtils.invokeWithShellPermissions(() -> mWifiManager.setWifiEnabled(true));
        }
        mTestHelper.turnScreenOff();
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setVerboseLoggingEnabled(mWasVerboseLoggingEnabled));
    }

    private static class TestUsabilityStatsListener implements
            WifiManager.OnWifiUsabilityStatsListener {
        private final CountDownLatch mCountDownLatch;
        public int seqNum;
        public boolean isSameBssidAndFre;
        public WifiUsabilityStatsEntry statsEntry;

        TestUsabilityStatsListener(CountDownLatch countDownLatch) {
            mCountDownLatch = countDownLatch;
        }

        @Override
        public void onWifiUsabilityStats(int seqNum, boolean isSameBssidAndFreq,
                WifiUsabilityStatsEntry statsEntry) {
            this.seqNum = seqNum;
            this.isSameBssidAndFre = isSameBssidAndFreq;
            this.statsEntry = statsEntry;
            mCountDownLatch.countDown();
        }
    }

    /**
     * Tests the {@link android.net.wifi.WifiUsabilityStatsEntry} retrieved from
     * {@link WifiManager.OnWifiUsabilityStatsListener}.
     */"	""	""	probe	""	""	""	""	""	""	""	""	""	""
7.4.2  . IEEE 802.11	7.4.2	C-1-9	7.4.2/C-1-9	07040200.670109	"""C-1-9] MUST iterate probe request sequence number as normal (sequentially) between the probe requests in a scan."""	Test Available	""	probe scan	""	""	""	""	""	""	""	""	android.net.wifi.cts.ConnectedNetworkScorerTest	testWifiUsabilityStatsEntry	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java	""	"public void testWifiUsabilityStatsEntry() throws Exception {
        // Usability stats collection only supported by vendor version Q and above.
        if (!PropertyUtil.isVendorApiLevelAtLeast(Build.VERSION_CODES.Q)) {
            return;
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        UiAutomation uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        TestUsabilityStatsListener usabilityStatsListener =
                new TestUsabilityStatsListener(countDownLatch);
        try {
            uiAutomation.adoptShellPermissionIdentity();
            mWifiManager.addOnWifiUsabilityStatsListener(
                    Executors.newSingleThreadExecutor(), usabilityStatsListener);
            // Wait for new usability stats (while connected & screen on this is triggered
            // by platform periodically).
            assertThat(countDownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)).isTrue();

            assertThat(usabilityStatsListener.statsEntry).isNotNull();
            WifiUsabilityStatsEntry statsEntry = usabilityStatsListener.statsEntry;

            assertThat(statsEntry.getTimeStampMillis()).isGreaterThan(0L);
            assertThat(statsEntry.getRssi()).isLessThan(0);
            assertThat(statsEntry.getLinkSpeedMbps()).isAtLeast(0);
            assertThat(statsEntry.getTotalTxSuccess()).isAtLeast(0L);
            assertThat(statsEntry.getTotalTxRetries()).isAtLeast(0L);
            assertThat(statsEntry.getTotalTxBad()).isAtLeast(0L);
            assertThat(statsEntry.getTotalRxSuccess()).isAtLeast(0L);
            if (mWifiManager.isEnhancedPowerReportingSupported()) {
                assertThat(statsEntry.getTotalRadioOnTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalRadioTxTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalRadioRxTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalNanScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalBackgroundScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalRoamScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalPnoScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalHotspot2ScanTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalCcaBusyFreqTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalRadioOnTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalRadioOnFreqTimeMillis()).isAtLeast(0L);
                assertThat(statsEntry.getTotalBeaconRx()).isAtLeast(0L);
                assertThat(statsEntry.getProbeStatusSinceLastUpdate())
                        .isAnyOf(PROBE_STATUS_SUCCESS,
                                PROBE_STATUS_FAILURE,
                                PROBE_STATUS_NO_PROBE,
                                PROBE_STATUS_UNKNOWN);
                // -1 is default value for some of these fields if they're not available.
                assertThat(statsEntry.getProbeElapsedTimeSinceLastUpdateMillis()).isAtLeast(-1);
                assertThat(statsEntry.getProbeMcsRateSinceLastUpdate()).isAtLeast(-1);
                assertThat(statsEntry.getRxLinkSpeedMbps()).isAtLeast(-1);
                if (ApiLevelUtil.isAtLeast(Build.VERSION_CODES.S)) {
                    try {
                        assertThat(statsEntry.getTimeSliceDutyCycleInPercent())
                                .isIn(Range.closed(0, 100));
                    } catch (NoSuchElementException e) {
                        // pass - Device does not support the field.
                    }
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BE).getContentionTimeMinMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BE).getContentionTimeMaxMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BE).getContentionTimeAvgMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BE).getContentionNumSamples()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BK).getContentionTimeMinMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BK).getContentionTimeMaxMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BK).getContentionTimeAvgMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_BK).getContentionNumSamples()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VI).getContentionTimeMinMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VI).getContentionTimeMaxMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VI).getContentionTimeAvgMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VI).getContentionNumSamples()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VO).getContentionTimeMinMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VO).getContentionTimeMaxMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VO).getContentionTimeAvgMicros()).isAtLeast(0);
                    assertThat(statsEntry.getContentionTimeStats(
                            WME_ACCESS_CATEGORY_VO).getContentionNumSamples()).isAtLeast(0);
                    // This is to add CTS test for the constructor function.
                    ContentionTimeStats contentionStats = new ContentionTimeStats(2, 1, 4, 10);
                    assertEquals(2, contentionStats.getContentionTimeMinMicros());
                    assertEquals(1, contentionStats.getContentionTimeMaxMicros());
                    assertEquals(4, contentionStats.getContentionTimeAvgMicros());
                    assertEquals(10, contentionStats.getContentionNumSamples());
                    assertThat(statsEntry.getChannelUtilizationRatio()).isIn(Range.closed(0, 255));
                    if (mTelephonyManager != null) {
                        boolean isCellularDataAvailable =
                                mTelephonyManager.getDataState() == TelephonyManager.DATA_CONNECTED;
                        assertEquals(isCellularDataAvailable, statsEntry.isCellularDataAvailable());
                    } else {
                        assertFalse(statsEntry.isCellularDataAvailable());
                    }
                    statsEntry.isWifiScoringEnabled();
                    statsEntry.isThroughputSufficient();
                    RateStats rateStats = new RateStats(WifiUsabilityStatsEntry.WIFI_PREAMBLE_VHT,
                            WifiUsabilityStatsEntry.WIFI_SPATIAL_STREAMS_TWO,
                            WifiUsabilityStatsEntry.WIFI_BANDWIDTH_40_MHZ,
                            2, 20, 100, 200, 5, 10);
                    assertThat(statsEntry.getRateStats()).isNotNull();
                    if(statsEntry.getRateStats().size() > 0) {
                        assertThat(statsEntry.getRateStats().get(0).getPreamble()).isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getNumberOfSpatialStreams())
                                .isAtLeast(1);
                        assertThat(statsEntry.getRateStats().get(0).getBandwidthInMhz())
                                .isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getRateMcsIdx()).isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getBitRateInKbps())
                                .isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getTxMpdu()).isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getRxMpdu()).isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getMpduLost()).isAtLeast(0);
                        assertThat(statsEntry.getRateStats().get(0).getRetries()).isAtLeast(0);
                    }
                    RadioStats radioStat = new RadioStats(0, 10, 11, 12, 13, 14, 15, 16, 17, 18);
                    assertThat(statsEntry.getWifiLinkLayerRadioStats()).isNotNull();
                    int numRadios = statsEntry.getWifiLinkLayerRadioStats().size();
                    for (int i = 0; i < numRadios; i++) {
                        RadioStats radioStats = statsEntry.getWifiLinkLayerRadioStats().get(i);
                        assertThat(radioStats.getRadioId()).isAtLeast(0);
                        assertThat(radioStats.getTotalRadioOnTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalRadioTxTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalRadioRxTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalScanTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalNanScanTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalBackgroundScanTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalRoamScanTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalPnoScanTimeMillis()).isAtLeast(0);
                        assertThat(radioStats.getTotalHotspot2ScanTimeMillis()).isAtLeast(0);
                    }
                }
                // no longer populated, return default value.
                assertThat(statsEntry.getCellularDataNetworkType())
                        .isAnyOf(TelephonyManager.NETWORK_TYPE_UNKNOWN,
                                TelephonyManager.NETWORK_TYPE_GPRS,
                                TelephonyManager.NETWORK_TYPE_EDGE,
                                TelephonyManager.NETWORK_TYPE_UMTS,
                                TelephonyManager.NETWORK_TYPE_CDMA,
                                TelephonyManager.NETWORK_TYPE_EVDO_0,
                                TelephonyManager.NETWORK_TYPE_EVDO_A,
                                TelephonyManager.NETWORK_TYPE_1xRTT,
                                TelephonyManager.NETWORK_TYPE_HSDPA,
                                TelephonyManager.NETWORK_TYPE_HSUPA,
                                TelephonyManager.NETWORK_TYPE_HSPA,
                                TelephonyManager.NETWORK_TYPE_IDEN,
                                TelephonyManager.NETWORK_TYPE_EVDO_B,
                                TelephonyManager.NETWORK_TYPE_LTE,
                                TelephonyManager.NETWORK_TYPE_EHRPD,
                                TelephonyManager.NETWORK_TYPE_HSPAP,
                                TelephonyManager.NETWORK_TYPE_GSM,
                                TelephonyManager.NETWORK_TYPE_TD_SCDMA,
                                TelephonyManager.NETWORK_TYPE_IWLAN,
                                TelephonyManager.NETWORK_TYPE_NR);
                assertThat(statsEntry.getCellularSignalStrengthDbm()).isAtMost(0);
                assertThat(statsEntry.getCellularSignalStrengthDb()).isAtMost(0);
                assertThat(statsEntry.isSameRegisteredCell()).isFalse();
            }
        } finally {
            mWifiManager.removeOnWifiUsabilityStatsListener(usabilityStatsListener);
            uiAutomation.dropShellPermissionIdentity();
        }
    }

    /**
     * Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}
     */"	""	""	probe scan	""	""	""	""	Hard to tell whether randomness is being tested. Example of lack of certainty.	tbd	""	""	""	""
7.4.2  . IEEE 802.11	7.4.2	C-1-7	7.4.2/C-1-7	07040200.670107	"""C-1-7] MUST randomize the source MAC address and sequence number of probe request frames, once at the beginning of each scan, while STA is disconnected."""	Test Available	""	frames random STA MAC	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testIsApMacRandomizationSupported	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testIsApMacRandomizationSupported() throws Exception {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        mWifiManager.isApMacRandomizationSupported();
    }

    /**
     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.
     */"	""	""	random MAC	""	""	""	""	""	""	""	""	""	""
7.4.2  . IEEE 802.11	7.4.2	C-1-8	7.4.2/C-1-8	07040200.670108	"""C-1-8] MUST use one consistent MAC address (SHOULD NOT randomize MAC address halfway through a scan)."""	Test Available	""	frames scan MAC random	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testIsConnectedMacRandomizationSupported	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testIsConnectedMacRandomizationSupported() throws Exception {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        mWifiManager.isConnectedMacRandomizationSupported();
    }

    /**
     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.
     */"	""	""	MAC random	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-3-1	7.4.2.4/C-3-1	07040204.670301	"""C-3-1] MUST enable Passpoint by default. <h5 id=""7425_wi-fi_location_wi-fi_round_trip_time_-_rtt"" """	Test Enabled	""	enable default passpoint	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testAllowAutojoinPasspoint	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testAllowAutojoinPasspoint() throws Exception {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }

        PasspointConfiguration passpointConfiguration = createPasspointConfiguration();
        UiAutomation uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        try {
            uiAutomation.adoptShellPermissionIdentity();
            mWifiManager.addOrUpdatePasspointConfiguration(passpointConfiguration);
            // Turn off auto-join
            mWifiManager.allowAutojoinPasspoint(
                    passpointConfiguration.getHomeSp().getFqdn(), false);
            // Turn on auto-join
            mWifiManager.allowAutojoinPasspoint(
                    passpointConfiguration.getHomeSp().getFqdn(), true);
        } finally {
            mWifiManager.removePasspointConfiguration(passpointConfiguration.getHomeSp().getFqdn());
            uiAutomation.dropShellPermissionIdentity();
        }
    }

    /**
     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.
     */"	""	""	passpoint	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-4	7.4.2.4/C-1-4	07040204.670104	"""C-1-4] MUST declare android.hardware.wifi.passpoint feature flag."""	Test Available	""	passpoint android.hardware.wifi.passpoint feature flag	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testPasspointCapability	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testPasspointCapability() {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        PackageManager packageManager = mContext.getPackageManager();
        assertTrue(""Passpoint must be supported"",
                packageManager.hasSystemFeature(PackageManager.FEATURE_WIFI_PASSPOINT));
    }

    /**
     * Validate add and remove SuggestionUserApprovalStatusListener. And verify the listener's
     * stickiness.
     */"	""	""	passpoint feature	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-5	7.4.2.4/C-1-5	07040204.670105	"""C-1-5] MUST follow the AOSP implementation to discover, match and associate to Passpoint networks."""	Test Available	""	passpoint discover aosp	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testPasspointCapability	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testPasspointCapability() {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        PackageManager packageManager = mContext.getPackageManager();
        assertTrue(""Passpoint must be supported"",
                packageManager.hasSystemFeature(PackageManager.FEATURE_WIFI_PASSPOINT));
    }

    /**
     * Validate add and remove SuggestionUserApprovalStatusListener. And verify the listener's
     * stickiness.
     */"	""	""	passpoint	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-6	7.4.2.4/C-1-6	07040204.670106	"""C-1-6] MUST support at least the following subset of device provisioning protocols as defined in the Wi-Fi Alliance Passpoint R2: EAP-TTLS authentication and SOAP-XML."""	Test Available	""	EAP passpoint XML TTLS SOAP	""	""	""	""	""	""	""	""	android.net.wifi.passpoint.cts.PasspointConfigurationTest	testSetGetDecoratedIdentityPrefix	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java	""	"public void testSetGetDecoratedIdentityPrefix() throws Exception {
        PasspointConfiguration config = createConfig();
        assertNull(config.getDecoratedIdentityPrefix());
        config.setDecoratedIdentityPrefix(TEST_DECORATED_IDENTITY_PREFIX);
        assertEquals(TEST_DECORATED_IDENTITY_PREFIX, config.getDecoratedIdentityPrefix());

    }

    /**
     * Helper function for generating user credential for testing.
     *
     * @return {@link Credential}
     */
    private static Credential createCredentialWithUserCredential(String username, String password) {
        Credential.UserCredential userCred = new Credential.UserCredential();
        userCred.setUsername(username);
        userCred.setPassword(password);
        userCred.setEapType(EAP_TTLS);
        userCred.setNonEapInnerMethod(""MS-CHAP"");
        return createCredential(userCred, null, null, null, null, FakeKeys.CA_CERT0);
    }

    /**
     * Helper function for generating Credential for testing.
     *
     * @param userCred               Instance of UserCredential
     * @param certCred               Instance of CertificateCredential
     * @param simCred                Instance of SimCredential
     * @param clientCertificateChain Chain of client certificates
     * @param clientPrivateKey       Client private key
     * @param caCerts                CA certificates
     * @return {@link Credential}
     */
    private static Credential createCredential(Credential.UserCredential userCred,
            Credential.CertificateCredential certCred,
            Credential.SimCredential simCred,
            X509Certificate[] clientCertificateChain, PrivateKey clientPrivateKey,
            X509Certificate... caCerts) {
        Credential cred = new Credential();
        cred.setRealm(""realm"");
        cred.setUserCredential(userCred);
        cred.setCertCredential(certCred);
        cred.setSimCredential(simCred);
        cred.setCaCertificate(caCerts[0]);
        cred.setClientCertificateChain(clientCertificateChain);
        cred.setClientPrivateKey(clientPrivateKey);
        return cred;
    }

    /**
     * Helper function for generating certificate credential for testing.
     *
     * @return {@link Credential}
     */
    private static Credential createCredentialWithCertificateCredential(Boolean useCaCert0,
            Boolean useCert0)
            throws NoSuchAlgorithmException, CertificateEncodingException {
        Credential.CertificateCredential certCred = new Credential.CertificateCredential();
        certCred.setCertType(""x509v3"");
        if (useCert0) {
            certCred.setCertSha256Fingerprint(
                    MessageDigest.getInstance(""SHA-256"").digest(FakeKeys.CLIENT_CERT.getEncoded()));
        } else {
            certCred.setCertSha256Fingerprint(MessageDigest.getInstance(""SHA-256"")
                    .digest(FakeKeys.CLIENT_SUITE_B_RSA3072_CERT.getEncoded()));
        }
        return createCredential(null, certCred, null, new X509Certificate[]{FakeKeys.CLIENT_CERT},
                FakeKeys.RSA_KEY1, useCaCert0 ? FakeKeys.CA_CERT0 : FakeKeys.CA_CERT1);
    }

    /**
     * Helper function for creating a {@link PasspointConfiguration} for testing.
     *
     * @return {@link PasspointConfiguration}
     */
    private static PasspointConfiguration createConfig() {
        PasspointConfiguration config = new PasspointConfiguration();
        config.setHomeSp(createHomeSp());
        config.setCredential(createCredential());
        Map<String, byte[]> trustRootCertList = new HashMap<>();
        trustRootCertList.put(""trustRoot.cert1.com"",
                new byte[CERTIFICATE_FINGERPRINT_BYTES]);
        trustRootCertList.put(""trustRoot.cert2.com"",
                new byte[CERTIFICATE_FINGERPRINT_BYTES]);
        return config;
    }

    /**
     * Utility function for creating a {@link android.net.wifi.hotspot2.pps.HomeSp} for testing.
     *
     * @return {@link android.net.wifi.hotspot2.pps.HomeSp}
     */
    private static HomeSp createHomeSp() {
        HomeSp homeSp = new HomeSp();
        homeSp.setFqdn(""fqdn"");
        homeSp.setFriendlyName(""friendly name"");
        homeSp.setRoamingConsortiumOis(new long[]{0x55, 0x66});
        return homeSp;
    }

    /**
     * Utility function for creating a {@link android.net.wifi.hotspot2.pps.Credential} for
     * testing..
     *
     * @return {@link android.net.wifi.hotspot2.pps.Credential}
     */
    private static Credential createCredential() {
        Credential cred = new Credential();
        cred.setRealm(""realm"");
        cred.setUserCredential(null);
        cred.setCertCredential(null);
        cred.setSimCredential(new Credential.SimCredential());
        cred.getSimCredential().setImsi(""1234*"");
        cred.getSimCredential().setEapType(EAP_SIM);
        cred.setCaCertificate(null);
        cred.setClientCertificateChain(null);
        cred.setClientPrivateKey(null);
        return cred;
    }
}"	""	""	EAP passpoint TTLS	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-7	7.4.2.4/C-1-7	07040204.670107	"""C-1-7] MUST process the AAA server certificate as described in Hotspot 2.0 R3 specification."""	Test Available	""	AAA hotspot passpoint cert	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	ProvisioningCallback	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void test/*
 *.
 */

package android.net.wifi.cts;

import static android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED;
import static android.net.NetworkCapabilities.TRANSPORT_WIFI;
import static android.net.wifi.WifiAvailableChannel.OP_MODE_SAP;
import static android.net.wifi.WifiAvailableChannel.OP_MODE_STA;
import static android.net.wifi.WifiConfiguration.INVALID_NETWORK_ID;
import static android.net.wifi.WifiManager.COEX_RESTRICTION_SOFTAP;
import static android.net.wifi.WifiManager.COEX_RESTRICTION_WIFI_AWARE;
import static android.net.wifi.WifiManager.COEX_RESTRICTION_WIFI_DIRECT;
import static android.net.wifi.WifiScanner.WIFI_BAND_24_GHZ;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.assertNotEquals;

import android.annotation.NonNull;
import android.app.UiAutomation;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.ConnectivityManager;
import android.net.MacAddress;
import android.net.Network;
import android.net.NetworkCapabilities;
import android.net.NetworkInfo;
import android.net.NetworkRequest;
import android.net.TetheringManager;
import android.net.Uri;
import android.net.wifi.CoexUnsafeChannel;
import android.net.wifi.ScanResult;
import android.net.wifi.SoftApCapability;
import android.net.wifi.SoftApConfiguration;
import android.net.wifi.SoftApInfo;
import android.net.wifi.WifiAvailableChannel;
import android.net.wifi.WifiClient;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiManager.SubsystemRestartTrackingCallback;
import android.net.wifi.WifiManager.WifiLock;
import android.net.wifi.WifiNetworkConnectionStatistics;
import android.net.wifi.WifiNetworkSuggestion;
import android.net.wifi.hotspot2.ConfigParser;
import android.net.wifi.hotspot2.OsuProvider;
import android.net.wifi.hotspot2.PasspointConfiguration;
import android.net.wifi.hotspot2.ProvisioningCallback;
import android.net.wifi.hotspot2.pps.Credential;
import android.net.wifi.hotspot2.pps.HomeSp;
import android.os.Build;
import android.os.Handler;
import android.os.HandlerExecutor;
import android.os.HandlerThread;
import android.os.Process;
import android.os.SystemClock;
import android.os.UserHandle;
import android.platform.test.annotations.AppModeFull;
import android.platform.test.annotations.AsbSecurityTest;
import android.provider.Settings;
import android.support.test.uiautomator.UiDevice;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.ArraySet;
import android.util.Log;
import android.util.SparseArray;
import android.util.SparseIntArray;

import androidx.test.filters.SdkSuppress;
import androidx.test.platform.app.InstrumentationRegistry;

import com.android.compatibility.common.util.ApiLevelUtil;
import com.android.compatibility.common.util.FeatureUtil;
import com.android.compatibility.common.util.PollingCheck;
import com.android.compatibility.common.util.PropertyUtil;
import com.android.compatibility.common.util.ShellIdentityUtils;
import com.android.compatibility.common.util.SystemUtil;
import com.android.compatibility.common.util.ThrowingRunnable;
import com.android.modules.utils.build.SdkLevel;
import com.android.net.module.util.MacAddressUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Constructor;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

@AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")
public class WifiManagerTest extends WifiJUnit3TestBase {
    private static class MySync {
        int expectedState = STATE_NULL;
    }

    private WifiManager mWifiManager;
    private ConnectivityManager mConnectivityManager;
    private TetheringManager mTetheringManager;
    private WifiLock mWifiLock;
    private static MySync mMySync;
    private List<ScanResult> mScanResults = null;
    private NetworkInfo mNetworkInfo =
            new NetworkInfo(ConnectivityManager.TYPE_WIFI, TelephonyManager.NETWORK_TYPE_UNKNOWN,
                    ""wifi"", ""unknown"");
    private final Object mLock = new Object();
    private UiDevice mUiDevice;
    private boolean mWasVerboseLoggingEnabled;
    private boolean mWasScanThrottleEnabled;
    private SoftApConfiguration mOriginalSoftApConfig = null;

    // Please refer to WifiManager
    private static final int MIN_RSSI = -100;
    private static final int MAX_RSSI = -55;

    private static final int STATE_NULL = 0;
    private static final int STATE_WIFI_CHANGING = 1;
    private static final int STATE_WIFI_ENABLED = 2;
    private static final int STATE_WIFI_DISABLED = 3;
    private static final int STATE_SCANNING = 4;
    private static final int STATE_SCAN_DONE = 5;

    private static final String TAG = ""WifiManagerTest"";
    private static final String SSID1 = ""\""WifiManagerTest\"""";
    // A full single scan duration is about 6-7 seconds if country code is set
    // to US. If country code is set to world mode (00), we would expect a scan
    // duration of roughly 8 seconds. So we set scan timeout as 9 seconds here.
    private static final int SCAN_TEST_WAIT_DURATION_MS = 9000;
    private static final int TEST_WAIT_DURATION_MS = 10_000;
    private static final int WIFI_CONNECT_TIMEOUT_MILLIS = 30_000;
    private static final int WAIT_MSEC = 60;
    private static final int DURATION_SCREEN_TOGGLE = 2000;
    private static final int DURATION_SETTINGS_TOGGLE = 1_000;
    private static final int WIFI_SCAN_TEST_CACHE_DELAY_MILLIS = 3 * 60 * 1000;

    private static final int ENFORCED_NUM_NETWORK_SUGGESTIONS_PER_APP = 50;

    private static final String TEST_PAC_URL = ""http://www.example.com/proxy.pac"";
    private static final String MANAGED_PROVISIONING_PACKAGE_NAME
            = ""com.android.managedprovisioning"";

    private static final String TEST_SSID_UNQUOTED = ""testSsid1"";
    private static final String TEST_IP_ADDRESS = ""192.168.5.5"";
    private static final String TEST_MAC_ADDRESS = ""aa:bb:cc:dd:ee:ff"";
    private static final MacAddress TEST_MAC = MacAddress.fromString(TEST_MAC_ADDRESS);
    private static final String TEST_PASSPHRASE = ""passphrase"";
    private static final String PASSPOINT_INSTALLATION_FILE_WITH_CA_CERT =
            ""assets/ValidPasspointProfile.base64"";
    private static final String TYPE_WIFI_CONFIG = ""application/x-wifi-config"";
    private static final String TEST_PSK_CAP = ""[RSN-PSK-CCMP]"";
    private static final String TEST_BSSID = ""00:01:02:03:04:05"";
    private static final String TEST_COUNTRY_CODE = ""JP"";
    private static final String TEST_DOM_SUBJECT_MATCH = ""domSubjectMatch"";
    private static final int TEST_SUB_ID = 2;

    private IntentFilter mIntentFilter;
    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            final String action = intent.getAction();
            if (action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION)) {

                synchronized (mMySync) {
                    if (intent.getBooleanExtra(WifiManager.EXTRA_RESULTS_UPDATED, false)) {
                        mScanResults = mWifiManager.getScanResults();
                    } else {
                        mScanResults = null;
                    }
                    mMySync.expectedState = STATE_SCAN_DONE;
                    mMySync.notifyAll();
                }
            } else if (action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION)) {
                int newState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE,
                        WifiManager.WIFI_STATE_UNKNOWN);
                synchronized (mMySync) {
                    if (newState == WifiManager.WIFI_STATE_ENABLED) {
                        Log.d(TAG, ""*** New WiFi state is ENABLED ***"");
                        mMySync.expectedState = STATE_WIFI_ENABLED;
                        mMySync.notifyAll();
                    } else if (newState == WifiManager.WIFI_STATE_DISABLED) {
                        Log.d(TAG, ""*** New WiFi state is DISABLED ***"");
                        mMySync.expectedState = STATE_WIFI_DISABLED;
                        mMySync.notifyAll();
                    }
                }
            } else if (action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION)) {
                synchronized (mMySync) {
                    mNetworkInfo =
                            (NetworkInfo) intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);
                    if (mNetworkInfo.getState() == NetworkInfo.State.CONNECTED)
                        mMySync.notifyAll();
                }
            }
        }
    };
    // Initialize with an invalid status value (0)
    private int mProvisioningStatus = 0;
    // Initialize with an invalid status value (0)
    private int mProvisioningFailureStatus = 0;
    private boolean mProvisioningComplete = false;
    private ProvisioningCallback mProvisioningCallback = new ProvisioningCallback() {
        @Override
        public void onProvisioningFailure(int status) {
            synchronized (mLock) {
                mProvisioningFailureStatus = status;
                mLock.notify();
            }
        }

        @Override
        public void onProvisioningStatus(int status) {
            synchronized (mLock) {
                mProvisioningStatus = status;
                mLock.notify();
            }
        }

        @Override
        public void onProvisioningComplete() {
            mProvisioningComplete = true;
        }
    };
    private int mSubsystemRestartStatus = 0; // 0: nada, 1: restarting, 2: restarted
    private SubsystemRestartTrackingCallback mSubsystemRestartTrackingCallback =
            new SubsystemRestartTrackingCallback() {
                @Override
                public void onSubsystemRestarting() {
                    synchronized (mLock) {
                        mSubsystemRestartStatus = 1;
                        mLock.notify();
                    }
                }

                @Override
                public void onSubsystemRestarted() {
                    synchronized (mLock) {
                        mSubsystemRestartStatus = 2;
                        mLock.notify();
                    }
                }
            };
    private static final String TEST_SSID = ""TEST SSID"";
    private static final String TEST_FRIENDLY_NAME = ""Friendly Name"";
    private static final Map<String, String> TEST_FRIENDLY_NAMES =
            new HashMap<String, String>() {
                {
                    put(""en"", TEST_FRIENDLY_NAME);
                    put(""kr"", TEST_FRIENDLY_NAME + 2);
                    put(""jp"", TEST_FRIENDLY_NAME + 3);
                }
            };
    private static final String TEST_SERVICE_DESCRIPTION = ""Dummy Service"";
    private static final Uri TEST_SERVER_URI = Uri.parse(""https://test.com"");
    private static final String TEST_NAI = ""test.access.com"";
    private static final List<Integer> TEST_METHOD_LIST =
            Arrays.asList(1 /* METHOD_SOAP_XML_SPP */);
    private final HandlerThread mHandlerThread = new HandlerThread(""WifiManagerTest"");
    protected final Executor mExecutor;
    {
        mHandlerThread.start();
        mExecutor = new HandlerExecutor(new Handler(mHandlerThread.getLooper()));
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }
        mMySync = new MySync();
        mIntentFilter = new IntentFilter();
        mIntentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
        mIntentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
        mIntentFilter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
        mIntentFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);
        mIntentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
        mIntentFilter.addAction(WifiManager.RSSI_CHANGED_ACTION);
        mIntentFilter.addAction(WifiManager.NETWORK_IDS_CHANGED_ACTION);
        mIntentFilter.addAction(WifiManager.ACTION_PICK_WIFI_NETWORK);

        mContext.registerReceiver(mReceiver, mIntentFilter);
        mWifiManager = (WifiManager) getContext().getSystemService(Context.WIFI_SERVICE);
        mConnectivityManager = getContext().getSystemService(ConnectivityManager.class);
        mTetheringManager = getContext().getSystemService(TetheringManager.class);
        assertNotNull(mWifiManager);
        assertNotNull(mTetheringManager);

        // turn on verbose logging for tests
        mWasVerboseLoggingEnabled = ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.isVerboseLoggingEnabled());
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setVerboseLoggingEnabled(true));
        // Disable scan throttling for tests.
        mWasScanThrottleEnabled = ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.isScanThrottleEnabled());
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setScanThrottleEnabled(false));

        mWifiLock = mWifiManager.createWifiLock(TAG);
        mWifiLock.acquire();
        // enable Wifi
        if (!mWifiManager.isWifiEnabled()) setWifiEnabled(true);
        PollingCheck.check(""Wifi not enabled"", TEST_WAIT_DURATION_MS,
                () -> mWifiManager.isWifiEnabled());

        mUiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation());
        turnScreenOnNoDelay();

        synchronized (mMySync) {
            mMySync.expectedState = STATE_NULL;
        }

        List<WifiConfiguration> savedNetworks = ShellIdentityUtils.invokeWithShellPermissions(
                mWifiManager::getConfiguredNetworks);
        assertFalse(""Need at least one saved network"", savedNetworks.isEmpty());

        // Get original config for restore
        mOriginalSoftApConfig = ShellIdentityUtils.invokeWithShellPermissions(
                mWifiManager::getSoftApConfiguration);
    }

    @Override
    protected void tearDown() throws Exception {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            super.tearDown();
            return;
        }
        if (!mWifiManager.isWifiEnabled())
            setWifiEnabled(true);
        mWifiLock.release();
        mContext.unregisterReceiver(mReceiver);
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setScanThrottleEnabled(mWasScanThrottleEnabled));
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setVerboseLoggingEnabled(mWasVerboseLoggingEnabled));
        // restore original softap config
        ShellIdentityUtils.invokeWithShellPermissions(
                () -> mWifiManager.setSoftApConfiguration(mOriginalSoftApConfig));
        Thread.sleep(TEST_WAIT_DURATION_MS);
        super.tearDown();
    }

    private void setWifiEnabled(boolean enable) throws Exception {
        synchronized (mMySync) {
            if (mWifiManager.isWifiEnabled() != enable) {
                // the new state is different, we expect it to change
                mMySync.expectedState = STATE_WIFI_CHANGING;
            } else {
                mMySync.expectedState = (enable ? STATE_WIFI_ENABLED : STATE_WIFI_DISABLED);
            }
            // now trigger the change using shell commands.
            SystemUtil.runShellCommand(""svc wifi "" + (enable ? ""enable"" : ""disable""));
            waitForExpectedWifiState(enable);
        }
    }

    private void waitForExpectedWifiState(boolean enabled) throws InterruptedException {
        synchronized (mMySync) {
            long timeout = System.currentTimeMillis() + TEST_WAIT_DURATION_MS;
            int expected = (enabled ? STATE_WIFI_ENABLED : STATE_WIFI_DISABLED);
            while (System.currentTimeMillis() < timeout
                    && mMySync.expectedState != expected) {
                mMySync.wait(WAIT_MSEC);
            }
        }
    }

    // Get the current scan status from sticky broadcast.
    private boolean isScanCurrentlyAvailable() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(WifiManager.ACTION_WIFI_SCAN_AVAILABILITY_CHANGED);
        Intent intent = mContext.registerReceiver(null, intentFilter);
        assertNotNull(intent);
        if (intent.getAction().equals(WifiManager.ACTION_WIFI_SCAN_AVAILABILITY_CHANGED)) {
            return intent.getBooleanExtra(WifiManager.EXTRA_SCAN_AVAILABLE, false);
        }
        return false;
    }

    private void startScan() throws Exception {
        synchronized (mMySync) {
            mMySync.expectedState = STATE_SCANNING;
            mScanResults = null;
            assertTrue(mWifiManager.startScan());
            long timeout = System.currentTimeMillis() + SCAN_TEST_WAIT_DURATION_MS;
            while (System.currentTimeMillis() < timeout && mMySync.expectedState == STATE_SCANNING)
                mMySync.wait(WAIT_MSEC);
        }
    }

    private void waitForNetworkInfoState(NetworkInfo.State state, int timeoutMillis)
            throws Exception {
        synchronized (mMySync) {
            if (mNetworkInfo.getState() == state) return;
            long timeout = System.currentTimeMillis() + timeoutMillis;
            while (System.currentTimeMillis() < timeout
                    && mNetworkInfo.getState() != state)
                mMySync.wait(WAIT_MSEC);
            assertEquals(state, mNetworkInfo.getState());
        }
    }

    private void waitForConnection() throws Exception {
        waitForNetworkInfoState(NetworkInfo.State.CONNECTED, WIFI_CONNECT_TIMEOUT_MILLIS);
    }

    private void waitForDisconnection() throws Exception {
        waitForNetworkInfoState(NetworkInfo.State.DISCONNECTED, TEST_WAIT_DURATION_MS);
    }

    private void ensureNotNetworkInfoState(NetworkInfo.State state) throws Exception {
        synchronized (mMySync) {
            long timeout = System.currentTimeMillis() + TEST_WAIT_DURATION_MS + WAIT_MSEC;
            while (System.currentTimeMillis() < timeout) {
                assertNotEquals(state, mNetworkInfo.getState());
                mMySync.wait(WAIT_MSEC);
            }
        }
    }

    private void ensureNotConnected() throws Exception {
        ensureNotNetworkInfoState(NetworkInfo.State.CONNECTED);
    }

    private void ensureNotDisconnected() throws Exception {
        ensureNotNetworkInfoState(NetworkInfo.State.DISCONNECTED);
    }

    private boolean existSSID(String ssid) {
        for (final WifiConfiguration w : mWifiManager.getConfiguredNetworks()) {
            if (w.SSID.equals(ssid))
                return true;
        }
        return false;
    }

    private int findConfiguredNetworks(String SSID, List<WifiConfiguration> networks) {
        for (final WifiConfiguration w : networks) {
            if (w.SSID.equals(SSID))
                return networks.indexOf(w);
        }
        return -1;
    }

    /**
     * Test creation of WifiManager Lock.
     */"	""	""	hotspot passpoint cert	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-8	7.4.2.4/C-1-8	07040204.670108	"""C-1-8] MUST support user control of provisioning through the Wi-Fi picker."""	Test Available	""	view picker passpoint wifi button	""	""	""	""	""	""	""	""	android.net.wifi.cts.WifiManagerTest	testAddOrUpdatePasspointConfiguration	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java	""	"public void testAddOrUpdatePasspointConfiguration() throws Exception {
        if (!WifiFeature.isWifiSupported(getContext())) {
            // skip the test if WiFi is not supported
            return;
        }

        // Create and install a Passpoint configuration
        PasspointConfiguration passpointConfiguration = createPasspointConfiguration();
        UiAutomation uiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
        try {
            uiAutomation.adoptShellPermissionIdentity();
            mWifiManager.addOrUpdatePasspointConfiguration(passpointConfiguration);

            // Compare configurations
            List<PasspointConfiguration> configurations = mWifiManager.getPasspointConfigurations();
            assertNotNull(""The installed passpoint profile is missing"", configurations);
            assertEquals(passpointConfiguration, getTargetPasspointConfiguration(configurations,
                    passpointConfiguration.getUniqueId()));
        } finally {
            // Clean up
            mWifiManager.removePasspointConfiguration(passpointConfiguration.getHomeSp().getFqdn());
            uiAutomation.dropShellPermissionIdentity();
        }
    }

    /**
     * Tests {@link WifiManager#setPasspointMeteredOverride(String, int)}
     * adds a Passpoint configuration correctly, check the default metered setting. Use API change
     * metered override, verify Passpoint configuration changes with it.
     */"	""	""	passpoint wifi	""	""	""	""	""	""	""	""	""	""
7.4.2.4  . Wi	7.4.2.4	C-1-9	7.4.2.4/C-1-9	07040204.670109	"""C-1-9] MUST keep Passpoint configurations persistent across reboots."""	Test Available	""	config reboot passpoint	""	""	""	""	""	""	""	""	android.net.wifi.passpoint.cts.PasspointConfigurationTest	testSetGetDecoratedIdentityPrefix	CtsWifiTestCases	/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java	""	"public void testSetGetDecoratedIdentityPrefix() throws Exception {
        PasspointConfiguration config = createConfig();
        assertNull(config.getDecoratedIdentityPrefix());
        config.setDecoratedIdentityPrefix(TEST_DECORATED_IDENTITY_PREFIX);
        assertEquals(TEST_DECORATED_IDENTITY_PREFIX, config.getDecoratedIdentityPrefix());

    }

    /**
     * Helper function for generating user credential for testing.
     *
     * @return {@link Credential}
     */
    private static Credential createCredentialWithUserCredential(String username, String password) {
        Credential.UserCredential userCred = new Credential.UserCredential();
        userCred.setUsername(username);
        userCred.setPassword(password);
        userCred.setEapType(EAP_TTLS);
        userCred.setNonEapInnerMethod(""MS-CHAP"");
        return createCredential(userCred, null, null, null, null, FakeKeys.CA_CERT0);
    }

    /**
     * Helper function for generating Credential for testing.
     *
     * @param userCred               Instance of UserCredential
     * @param certCred               Instance of CertificateCredential
     * @param simCred                Instance of SimCredential
     * @param clientCertificateChain Chain of client certificates
     * @param clientPrivateKey       Client private key
     * @param caCerts                CA certificates
     * @return {@link Credential}
     */
    private static Credential createCredential(Credential.UserCredential userCred,
            Credential.CertificateCredential certCred,
            Credential.SimCredential simCred,
            X509Certificate[] clientCertificateChain, PrivateKey clientPrivateKey,
            X509Certificate... caCerts) {
        Credential cred = new Credential();
        cred.setRealm(""realm"");
        cred.setUserCredential(userCred);
        cred.setCertCredential(certCred);
        cred.setSimCredential(simCred);
        cred.setCaCertificate(caCerts[0]);
        cred.setClientCertificateChain(clientCertificateChain);
        cred.setClientPrivateKey(clientPrivateKey);
        return cred;
    }

    /**
     * Helper function for generating certificate credential for testing.
     *
     * @return {@link Credential}
     */
    private static Credential createCredentialWithCertificateCredential(Boolean useCaCert0,
            Boolean useCert0)
            throws NoSuchAlgorithmException, CertificateEncodingException {
        Credential.CertificateCredential certCred = new Credential.CertificateCredential();
        certCred.setCertType(""x509v3"");
        if (useCert0) {
            certCred.setCertSha256Fingerprint(
                    MessageDigest.getInstance(""SHA-256"").digest(FakeKeys.CLIENT_CERT.getEncoded()));
        } else {
            certCred.setCertSha256Fingerprint(MessageDigest.getInstance(""SHA-256"")
                    .digest(FakeKeys.CLIENT_SUITE_B_RSA3072_CERT.getEncoded()));
        }
        return createCredential(null, certCred, null, new X509Certificate[]{FakeKeys.CLIENT_CERT},
                FakeKeys.RSA_KEY1, useCaCert0 ? FakeKeys.CA_CERT0 : FakeKeys.CA_CERT1);
    }

    /**
     * Helper function for creating a {@link PasspointConfiguration} for testing.
     *
     * @return {@link PasspointConfiguration}
     */
    private static PasspointConfiguration createConfig() {
        PasspointConfiguration config = new PasspointConfiguration();
        config.setHomeSp(createHomeSp());
        config.setCredential(createCredential());
        Map<String, byte[]> trustRootCertList = new HashMap<>();
        trustRootCertList.put(""trustRoot.cert1.com"",
                new byte[CERTIFICATE_FINGERPRINT_BYTES]);
        trustRootCertList.put(""trustRoot.cert2.com"",
                new byte[CERTIFICATE_FINGERPRINT_BYTES]);
        return config;
    }

    /**
     * Utility function for creating a {@link android.net.wifi.hotspot2.pps.HomeSp} for testing.
     *
     * @return {@link android.net.wifi.hotspot2.pps.HomeSp}
     */
    private static HomeSp createHomeSp() {
        HomeSp homeSp = new HomeSp();
        homeSp.setFqdn(""fqdn"");
        homeSp.setFriendlyName(""friendly name"");
        homeSp.setRoamingConsortiumOis(new long[]{0x55, 0x66});
        return homeSp;
    }

    /**
     * Utility function for creating a {@link android.net.wifi.hotspot2.pps.Credential} for
     * testing..
     *
     * @return {@link android.net.wifi.hotspot2.pps.Credential}
     */
    private static Credential createCredential() {
        Credential cred = new Credential();
        cred.setRealm(""realm"");
        cred.setUserCredential(null);
        cred.setCertCredential(null);
        cred.setSimCredential(new Credential.SimCredential());
        cred.getSimCredential().setImsi(""1234*"");
        cred.getSimCredential().setEapType(EAP_SIM);
        cred.setCaCertificate(null);
        cred.setClientCertificateChain(null);
        cred.setClientPrivateKey(null);
        return cred;
    }
}"	""	""	config passpoint	""	""	""	""	""	""	""	""	""	""
7.4.2.5  . Wi	7.4.2.5	C-1-4	7.4.2.5/C-1-4	07040205.670104	"""C-1-4] MUST be accurate to within 2 meters at 80 MHz bandwidth at the 68th percentile (as calculated with the Cumulative Distribution Function). <h5 id=""7426_wi-fi_keepalive_offload"" """	Manually testable	wifi	""	passpoint 80	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	Only manually testable requires physical distance from wifi source.	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-7	7.5/H-1-7	07050000.720107	"""[7.5/H-1-7] For apps targeting API level 31 or higher, the camera device MUST NOT support JPEG capture resolutions smaller than 1080p for both primary cameras. """	""	""	JPEG MEDIA_PERFORMANCE_CLASS 1080	Test Available	""	""	""	""	""	""	""	android.camera.cts.api31test.SPerfClassTest	testSPerfClassJpegSizes	CtsCameraApi31TestCases	/home/gpoor/cts-12-source/cts/tests/camera/api31test/src/android/camera/cts/api31test/SPerfClassTest.java	""	"public void testSPerfClassJpegSizes() throws Exception {
        boolean isSPerfClass = CameraTestUtils.isSPerfClass();
        if (!isSPerfClass) {
            return;
        }

        for (int i = 0; i < mCameraIds.length; i++) {
            testSPerfClassJpegSizesByCamera(mCameraIds[i]);
        }
    }
}"	""	""	JPEG	""	section	""	""	""	""	""	""	""	4
2.2.7.2  . Camera	7.5	H-1-6	7.5/H-1-6	07050000.720106	"""[7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 600ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | [7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 500 ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. """	""	""	ITS startup android.os.Build.VERSION_CODES.S latency CTS android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS 3000 600	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.PerformanceTest	testCameraLaunch	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java	""	"public void testCameraLaunch() throws Exception {
        double[] avgCameraLaunchTimes = new double[mTestRule.getCameraIdsUnderTest().length];

        int counter = 0;
        for (String id : mTestRule.getCameraIdsUnderTest()) {
            // Do NOT move these variables to outer scope
            // They will be passed to DeviceReportLog and their references will be stored
            String streamName = ""test_camera_launch"";
            mReportLog = new DeviceReportLog(REPORT_LOG_NAME, streamName);
            mReportLog.addValue(""camera_id"", id, ResultType.NEUTRAL, ResultUnit.NONE);
            double[] cameraOpenTimes = new double[NUM_TEST_LOOPS];
            double[] configureStreamTimes = new double[NUM_TEST_LOOPS];
            double[] startPreviewTimes = new double[NUM_TEST_LOOPS];
            double[] stopPreviewTimes = new double[NUM_TEST_LOOPS];
            double[] cameraCloseTimes = new double[NUM_TEST_LOOPS];
            double[] cameraLaunchTimes = new double[NUM_TEST_LOOPS];
            try {
                CameraCharacteristics ch =
                        mTestRule.getCameraManager().getCameraCharacteristics(id);
                mTestRule.setStaticInfo(new StaticMetadata(ch));
                boolean isColorOutputSupported = mTestRule.getStaticInfo().isColorOutputSupported();
                if (isColorOutputSupported) {
                    initializeImageReader(id, ImageFormat.YUV_420_888);
                } else {
                    assertTrue(""Depth output must be supported if regular output isn't!"",
                            mTestRule.getStaticInfo().isDepthOutputSupported());
                    initializeImageReader(id, ImageFormat.DEPTH16);
                }

                SimpleImageListener imageListener = null;
                long startTimeMs, openTimeMs, configureTimeMs, previewStartedTimeMs;
                for (int i = 0; i < NUM_TEST_LOOPS; i++) {
                    try {
                        // Need create a new listener every iteration to be able to wait
                        // for the first image comes out.
                        imageListener = new SimpleImageListener();
                        mTestRule.getReader().setOnImageAvailableListener(
                                imageListener, mTestRule.getHandler());
                        startTimeMs = SystemClock.elapsedRealtime();

                        // Blocking open camera
                        simpleOpenCamera(id);
                        openTimeMs = SystemClock.elapsedRealtime();
                        cameraOpenTimes[i] = openTimeMs - startTimeMs;

                        // Blocking configure outputs.
                        CaptureRequest previewRequest =
                                configureReaderAndPreviewOutputs(id, isColorOutputSupported);
                        configureTimeMs = SystemClock.elapsedRealtime();
                        configureStreamTimes[i] = configureTimeMs - openTimeMs;

                        // Blocking start preview (start preview to first image arrives)
                        SimpleCaptureCallback resultListener =
                                new SimpleCaptureCallback();
                        blockingStartPreview(id, resultListener, previewRequest, imageListener);
                        previewStartedTimeMs = SystemClock.elapsedRealtime();
                        startPreviewTimes[i] = previewStartedTimeMs - configureTimeMs;
                        cameraLaunchTimes[i] = previewStartedTimeMs - startTimeMs;

                        // Let preview on for a couple of frames
                        CameraTestUtils.waitForNumResults(resultListener, NUM_RESULTS_WAIT,
                                WAIT_FOR_RESULT_TIMEOUT_MS);

                        // Blocking stop preview
                        startTimeMs = SystemClock.elapsedRealtime();
                        blockingStopRepeating();
                        stopPreviewTimes[i] = SystemClock.elapsedRealtime() - startTimeMs;
                    }
                    finally {
                        // Blocking camera close
                        startTimeMs = SystemClock.elapsedRealtime();
                        mTestRule.closeDevice(id);
                        cameraCloseTimes[i] = SystemClock.elapsedRealtime() - startTimeMs;
                    }
                }

                avgCameraLaunchTimes[counter] = Stat.getAverage(cameraLaunchTimes);
                // Finish the data collection, report the KPIs.
                // ReportLog keys have to be lowercase underscored format.
                mReportLog.addValues(""camera_open_time"", cameraOpenTimes, ResultType.LOWER_BETTER,
                        ResultUnit.MS);
                mReportLog.addValues(""camera_configure_stream_time"", configureStreamTimes,
                        ResultType.LOWER_BETTER, ResultUnit.MS);
                mReportLog.addValues(""camera_start_preview_time"", startPreviewTimes,
                        ResultType.LOWER_BETTER, ResultUnit.MS);
                mReportLog.addValues(""camera_camera_stop_preview"", stopPreviewTimes,
                        ResultType.LOWER_BETTER, ResultUnit.MS);
                mReportLog.addValues(""camera_camera_close_time"", cameraCloseTimes,
                        ResultType.LOWER_BETTER, ResultUnit.MS);
                mReportLog.addValues(""camera_launch_time"", cameraLaunchTimes,
                        ResultType.LOWER_BETTER, ResultUnit.MS);
            }
            finally {
                mTestRule.closeDefaultImageReader();
                closePreviewSurface();
            }
            counter++;
            mReportLog.submit(mInstrumentation);

            if (VERBOSE) {
                Log.v(TAG, ""Camera "" + id + "" device open times(ms): ""
                        + Arrays.toString(cameraOpenTimes)
                        + "". Average(ms): "" + Stat.getAverage(cameraOpenTimes)
                        + "". Min(ms): "" + Stat.getMin(cameraOpenTimes)
                        + "". Max(ms): "" + Stat.getMax(cameraOpenTimes));
                Log.v(TAG, ""Camera "" + id + "" configure stream times(ms): ""
                        + Arrays.toString(configureStreamTimes)
                        + "". Average(ms): "" + Stat.getAverage(configureStreamTimes)
                        + "". Min(ms): "" + Stat.getMin(configureStreamTimes)
                        + "". Max(ms): "" + Stat.getMax(configureStreamTimes));
                Log.v(TAG, ""Camera "" + id + "" start preview times(ms): ""
                        + Arrays.toString(startPreviewTimes)
                        + "". Average(ms): "" + Stat.getAverage(startPreviewTimes)
                        + "". Min(ms): "" + Stat.getMin(startPreviewTimes)
                        + "". Max(ms): "" + Stat.getMax(startPreviewTimes));
                Log.v(TAG, ""Camera "" + id + "" stop preview times(ms): ""
                        + Arrays.toString(stopPreviewTimes)
                        + "". Average(ms): "" + Stat.getAverage(stopPreviewTimes)
                        + "". nMin(ms): "" + Stat.getMin(stopPreviewTimes)
                        + "". nMax(ms): "" + Stat.getMax(stopPreviewTimes));
                Log.v(TAG, ""Camera "" + id + "" device close times(ms): ""
                        + Arrays.toString(cameraCloseTimes)
                        + "". Average(ms): "" + Stat.getAverage(cameraCloseTimes)
                        + "". Min(ms): "" + Stat.getMin(cameraCloseTimes)
                        + "". Max(ms): "" + Stat.getMax(cameraCloseTimes));
                Log.v(TAG, ""Camera "" + id + "" camera launch times(ms): ""
                        + Arrays.toString(cameraLaunchTimes)
                        + "". Average(ms): "" + Stat.getAverage(cameraLaunchTimes)
                        + "". Min(ms): "" + Stat.getMin(cameraLaunchTimes)
                        + "". Max(ms): "" + Stat.getMax(cameraLaunchTimes));
            }
        }
        if (mTestRule.getCameraIdsUnderTest().length != 0) {
            String streamName = ""test_camera_launch_average"";
            mReportLog = new DeviceReportLog(REPORT_LOG_NAME, streamName);
            mReportLog.setSummary(""camera_launch_average_time_for_all_cameras"",
                    Stat.getAverage(avgCameraLaunchTimes), ResultType.LOWER_BETTER, ResultUnit.MS);
            mReportLog.submit(mInstrumentation);
        }
    }

    /**
     * Test camera capture KPI for YUV_420_888, PRIVATE, JPEG, RAW and RAW+JPEG
     * formats: the time duration between sending out a single image capture request
     * and receiving image data and capture result.
     * <p>
     * It enumerates the following metrics: capture latency, computed by
     * measuring the time between sending out the capture request and getting
     * the image data; partial result latency, computed by measuring the time
     * between sending out the capture request and getting the partial result;
     * capture result latency, computed by measuring the time between sending
     * out the capture request and getting the full capture result.
     * </p>
     */"	""	""	latency	""	section	""	""	""	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-5	7.5/H-1-5	07050000.720105	"""[7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras.  | [7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000 ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. """	Test Available	""	ITS latency 1080p CTS 1000ms resolution PerformanceTest MEDIA_PERFORMANCE_CLASS JPEG capture	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.PerformanceTest	testReprocessingLatency	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java	""	"public void testReprocessingLatency() throws Exception {
        for (String id : mTestRule.getCameraIdsUnderTest()) {
            for (int format : REPROCESS_FORMATS) {
                if (!isReprocessSupported(id, format)) {
                    continue;
                }

                try {
                    mTestRule.openDevice(id);
                    String streamName = ""test_reprocessing_latency"";
                    mReportLog = new DeviceReportLog(REPORT_LOG_NAME, streamName);
                    mReportLog.addValue(""camera_id"", id, ResultType.NEUTRAL, ResultUnit.NONE);
                    mReportLog.addValue(""format"", format, ResultType.NEUTRAL, ResultUnit.NONE);
                    reprocessingPerformanceTestByCamera(format, /*asyncMode*/false,
                            /*highQuality*/false);
                } finally {
                    closeReaderWriters();
                    mTestRule.closeDevice(id);
                    closePreviewSurface();
                    mReportLog.submit(mInstrumentation);
                }
            }
        }
    }

    /**
     * Test reprocessing throughput with default NR and edge options,
     * i.e., how many frames can be reprocessed during a given amount of time.
     *
     */"	""	""	latency PerformanceTest	""	section	""	""	""	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-4	7.5/H-1-4	07050000.720104	"""[7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras.  | [7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras. """	Test Available	""	MEDIA_PERFORMANCE_CLASS SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME CameraMetadata.SENSOR	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest	testCameraPerfClassCharacteristics	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java	""	"@CddTest(requirement=""7.5"")
    public void testCameraPerfClassCharacteristics() throws Exception {
        if (mAdoptShellPerm) {
            // Skip test for system camera. Performance class is only applicable for public camera
            // ids.
            return;
        }
        boolean isRPerfClass = CameraTestUtils.isRPerfClass();
        boolean isSPerfClass = CameraTestUtils.isSPerfClass();
        if (!isRPerfClass && !isSPerfClass) {
            return;
        }

        boolean hasPrimaryRear = false;
        boolean hasPrimaryFront = false;
        for (int i = 0; i < mCameraIdsUnderTest.length; i++) {
            String cameraId = mCameraIdsUnderTest[i];
            boolean isPrimaryRear = CameraTestUtils.isPrimaryRearFacingCamera(
                    mCameraManager, cameraId);
            boolean isPrimaryFront = CameraTestUtils.isPrimaryFrontFacingCamera(
                    mCameraManager, cameraId);
            if (!isPrimaryRear && !isPrimaryFront) {
                continue;
            }

            CameraCharacteristics c = mCharacteristics.get(i);
            StaticMetadata staticInfo = mAllStaticInfo.get(cameraId);

            // H-1-1, H-1-2
            Size pixelArraySize = CameraTestUtils.getValueNotNull(
                    c, CameraCharacteristics.SENSOR_INFO_PIXEL_ARRAY_SIZE);
            long sensorResolution = pixelArraySize.getHeight() * pixelArraySize.getWidth();
            StreamConfigurationMap config = staticInfo.getValueFromKeyNonNull(
                    CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            assertNotNull(""No stream configuration map found for ID "" + cameraId, config);
            List<Size> videoSizes = CameraTestUtils.getSupportedVideoSizes(cameraId,
                    mCameraManager, null /*bound*/);

            if (isPrimaryRear) {
                hasPrimaryRear = true;
                mCollector.expectTrue(""Primary rear camera resolution should be at least "" +
                        MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                        sensorResolution,
                        sensorResolution >= MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION);

                // 4K @ 30fps
                boolean supportUHD = videoSizes.contains(UHD);
                boolean supportDC4K = videoSizes.contains(DC4K);
                mCollector.expectTrue(""Primary rear camera should support 4k video recording"",
                        supportUHD || supportDC4K);
                if (supportUHD || supportDC4K) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, supportDC4K ? DC4K : UHD);
                    mCollector.expectTrue(""Primary rear camera should support 4k video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            } else {
                hasPrimaryFront = true;
                if (isSPerfClass) {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION);
                } else {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION);
                }
                // 1080P @ 30fps
                boolean supportFULLHD = videoSizes.contains(FULLHD);
                mCollector.expectTrue(""Primary front camera should support 1080P video recording"",
                        supportFULLHD);
                if (supportFULLHD) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, FULLHD);
                    mCollector.expectTrue(""Primary front camera should support 1080P video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            }

            String facingString = hasPrimaryRear ? ""rear"" : ""front"";
            // H-1-3
            if (isSPerfClass || (isRPerfClass && isPrimaryRear)) {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least FULL, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastFull());
            } else {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least LIMITED, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastLimited());
            }

            // H-1-4
            Integer timestampSource = c.get(CameraCharacteristics.SENSOR_INFO_TIMESTAMP_SOURCE);
            mCollector.expectTrue(
                    ""Primary "" + facingString + "" camera should support real-time timestamp source"",
                    timestampSource != null &&
                    timestampSource.equals(CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME));

            // H-1-8
            if (isSPerfClass && isPrimaryRear) {
                mCollector.expectTrue(""Primary rear camera should support RAW capability"",
                        staticInfo.isCapabilitySupported(RAW));
            }
        }
        mCollector.expectTrue(""There must be a primary rear camera for performance class."",
                hasPrimaryRear);
        mCollector.expectTrue(""There must be a primary front camera for performance class."",
                hasPrimaryFront);
    }

    /**
     * Get lens distortion coefficients, as a list of 6 floats; returns null if no valid
     * distortion field is available
     */
    private float[] getLensDistortion(CameraCharacteristics c) {
        float[] distortion = null;
        float[] newDistortion = c.get(CameraCharacteristics.LENS_DISTORTION);
        if (Build.VERSION.DEVICE_INITIAL_SDK_INT > Build.VERSION_CODES.O_MR1 || newDistortion != null) {
            // New devices need to use fixed radial distortion definition; old devices can
            // opt-in to it
            if (newDistortion != null && newDistortion.length == 5) {
                distortion = new float[6];
                distortion[0] = 1.0f;
                for (int i = 1; i < 6; i++) {
                    distortion[i] = newDistortion[i-1];
                }
            }
        } else {
            // Select old field only if on older first SDK and new definition not available
            distortion = c.get(CameraCharacteristics.LENS_RADIAL_DISTORTION);
        }
        return distortion;
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(Size[] goodSizes) {
        return findInvalidSize(Arrays.asList(goodSizes));
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(List<Size> goodSizes) {
        Size invalidSize = new Size(goodSizes.get(0).getWidth() + 1, goodSizes.get(0).getHeight());
        while(goodSizes.contains(invalidSize)) {
            invalidSize = new Size(invalidSize.getWidth() + 1, invalidSize.getHeight());
        }
        return invalidSize;
    }

    /**
     * Check key is present in characteristics if the hardware level is at least {@code hwLevel};
     * check that the key is present if the actual capabilities are one of {@code capabilities}.
     *
     * @return value of the {@code key} from {@code c}
     */
    private <T> T expectKeyAvailable(CameraCharacteristics c, CameraCharacteristics.Key<T> key,
            int hwLevel, int... capabilities) {

        Integer actualHwLevel = c.get(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL);
        assertNotNull(""android.info.supportedHardwareLevel must never be null"", actualHwLevel);

        int[] actualCapabilities = c.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES);
        assertNotNull(""android.request.availableCapabilities must never be null"",
                actualCapabilities);

        List<Key<?>> allKeys = c.getKeys();

        T value = c.get(key);

        // For LIMITED-level targeted keys, rely on capability check, not level
        if ((compareHardwareLevel(actualHwLevel, hwLevel) >= 0) && (hwLevel != LIMITED)) {
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for this hardware level "" +
                            ""(required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    value != null);
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for this "" +
                            ""hardware level (required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    allKeys.contains(key));
        } else if (arrayContainsAnyOf(actualCapabilities, capabilities)) {
            if (!(hwLevel == LIMITED && compareHardwareLevel(actualHwLevel, hwLevel) < 0)) {
                // Don't enforce LIMITED-starting keys on LEGACY level, even if cap is defined
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for these capabilities "" +
                            ""(required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    value != null);
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for "" +
                            ""these capabilities (required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    allKeys.contains(key));
            }
        } else {
            if (actualHwLevel == LEGACY && hwLevel != OPT) {
                if (value != null || allKeys.contains(key)) {
                    Log.w(TAG, String.format(
                            ""Key (%s) is not required for LEGACY devices but still appears"",
                            key.getName()));
                }
            }
            // OK: Key may or may not be present.
        }
        return value;
    }

    private static boolean arrayContains(int[] arr, int needle) {
        if (arr == null) {
            return false;
        }

        for (int elem : arr) {
            if (elem == needle) {
                return true;
            }
        }

        return false;
    }

    private static <T> boolean arrayContains(T[] arr, T needle) {
        if (arr == null) {
            return false;
        }

        for (T elem : arr) {
            if (elem.equals(needle)) {
                return true;
            }
        }

        return false;
    }

    private static boolean arrayContainsAnyOf(int[] arr, int[] needles) {
        for (int needle : needles) {
            if (arrayContains(arr, needle)) {
                return true;
            }
        }
        return false;
    }

    /**
     * The key name has a prefix of either ""android."" or a valid TLD; other prefixes are not valid.
     */
    private static void assertKeyPrefixValid(String keyName) {
        assertStartsWithAndroidOrTLD(
                ""All metadata keys must start with 'android.' (built-in keys) "" +
                ""or valid TLD (vendor-extended keys)"", keyName);
    }

    private static void assertTrueForKey(String msg, CameraCharacteristics.Key<?> key,
            boolean actual) {
        assertTrue(msg + "" (key = '"" + key.getName() + ""')"", actual);
    }

    private static <T> void assertOneOf(String msg, T[] expected, T actual) {
        for (int i = 0; i < expected.length; ++i) {
            if (Objects.equals(expected[i], actual)) {
                return;
            }
        }

        fail(String.format(""%s: (expected one of %s, actual %s)"",
                msg, Arrays.toString(expected), actual));
    }

    private static <T> void assertStartsWithAndroidOrTLD(String msg, String keyName) {
        String delimiter = ""."";
        if (keyName.startsWith(PREFIX_ANDROID + delimiter)) {
            return;
        }
        Pattern tldPattern = Pattern.compile(Patterns.TOP_LEVEL_DOMAIN_STR);
        Matcher match = tldPattern.matcher(keyName);
        if (match.find(0) && (0 == match.start()) && (!match.hitEnd())) {
            if (keyName.regionMatches(match.end(), delimiter, 0, delimiter.length())) {
                return;
            }
        }

        fail(String.format(""%s: (expected to start with %s or valid TLD, but value was %s)"",
                msg, PREFIX_ANDROID + delimiter, keyName));
    }

    /** Return a positive int if left > right, 0 if left==right, negative int if left < right */
    private static int compareHardwareLevel(int left, int right) {
        return remapHardwareLevel(left) - remapHardwareLevel(right);
    }

    /** Remap HW levels worst<->best, 0 = LEGACY, 1 = LIMITED, 2 = FULL, ..., N = LEVEL_N */
    private static int remapHardwareLevel(int level) {
        switch (level) {
            case OPT:
                return Integer.MAX_VALUE;
            case LEGACY:
                return 0; // lowest
            case EXTERNAL:
                return 1; // second lowest
            case LIMITED:
                return 2;
            case FULL:
                return 3; // good
            case LEVEL_3:
                return 4;
            default:
                fail(""Unknown HW level: "" + level);
        }
        return -1;
    }

    private static String toStringHardwareLevel(int level) {
        switch (level) {
            case LEGACY:
                return ""LEGACY"";
            case LIMITED:
                return ""LIMITED"";
            case FULL:
                return ""FULL"";
            case EXTERNAL:
                return ""EXTERNAL"";
            default:
                if (level >= LEVEL_3) {
                    return String.format(""LEVEL_%d"", level);
                }
        }

        // unknown
        Log.w(TAG, ""Unknown hardware level "" + level);
        return Integer.toString(level);
    }
}"	""	""	SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME CameraMetadata.SENSOR	""	section	""	""	""	""	""	""	""	3
2.2.7.2  . Camera	7.5	H-1-3	7.5/H-1-3	07050000.720103	"""[7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for back primary and LIMITED or better for front primary camera.  | [7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for both primary cameras. """	""	""	android.info.supportedHardwareLevel LIMITED MEDIA_PERFORMANCE_CLASS FULL	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest	testCameraPerfClassCharacteristics	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java	""	"@CddTest(requirement=""7.5"")
    public void testCameraPerfClassCharacteristics() throws Exception {
        if (mAdoptShellPerm) {
            // Skip test for system camera. Performance class is only applicable for public camera
            // ids.
            return;
        }
        boolean isRPerfClass = CameraTestUtils.isRPerfClass();
        boolean isSPerfClass = CameraTestUtils.isSPerfClass();
        if (!isRPerfClass && !isSPerfClass) {
            return;
        }

        boolean hasPrimaryRear = false;
        boolean hasPrimaryFront = false;
        for (int i = 0; i < mCameraIdsUnderTest.length; i++) {
            String cameraId = mCameraIdsUnderTest[i];
            boolean isPrimaryRear = CameraTestUtils.isPrimaryRearFacingCamera(
                    mCameraManager, cameraId);
            boolean isPrimaryFront = CameraTestUtils.isPrimaryFrontFacingCamera(
                    mCameraManager, cameraId);
            if (!isPrimaryRear && !isPrimaryFront) {
                continue;
            }

            CameraCharacteristics c = mCharacteristics.get(i);
            StaticMetadata staticInfo = mAllStaticInfo.get(cameraId);

            // H-1-1, H-1-2
            Size pixelArraySize = CameraTestUtils.getValueNotNull(
                    c, CameraCharacteristics.SENSOR_INFO_PIXEL_ARRAY_SIZE);
            long sensorResolution = pixelArraySize.getHeight() * pixelArraySize.getWidth();
            StreamConfigurationMap config = staticInfo.getValueFromKeyNonNull(
                    CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            assertNotNull(""No stream configuration map found for ID "" + cameraId, config);
            List<Size> videoSizes = CameraTestUtils.getSupportedVideoSizes(cameraId,
                    mCameraManager, null /*bound*/);

            if (isPrimaryRear) {
                hasPrimaryRear = true;
                mCollector.expectTrue(""Primary rear camera resolution should be at least "" +
                        MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                        sensorResolution,
                        sensorResolution >= MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION);

                // 4K @ 30fps
                boolean supportUHD = videoSizes.contains(UHD);
                boolean supportDC4K = videoSizes.contains(DC4K);
                mCollector.expectTrue(""Primary rear camera should support 4k video recording"",
                        supportUHD || supportDC4K);
                if (supportUHD || supportDC4K) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, supportDC4K ? DC4K : UHD);
                    mCollector.expectTrue(""Primary rear camera should support 4k video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            } else {
                hasPrimaryFront = true;
                if (isSPerfClass) {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION);
                } else {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION);
                }
                // 1080P @ 30fps
                boolean supportFULLHD = videoSizes.contains(FULLHD);
                mCollector.expectTrue(""Primary front camera should support 1080P video recording"",
                        supportFULLHD);
                if (supportFULLHD) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, FULLHD);
                    mCollector.expectTrue(""Primary front camera should support 1080P video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            }

            String facingString = hasPrimaryRear ? ""rear"" : ""front"";
            // H-1-3
            if (isSPerfClass || (isRPerfClass && isPrimaryRear)) {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least FULL, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastFull());
            } else {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least LIMITED, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastLimited());
            }

            // H-1-4
            Integer timestampSource = c.get(CameraCharacteristics.SENSOR_INFO_TIMESTAMP_SOURCE);
            mCollector.expectTrue(
                    ""Primary "" + facingString + "" camera should support real-time timestamp source"",
                    timestampSource != null &&
                    timestampSource.equals(CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME));

            // H-1-8
            if (isSPerfClass && isPrimaryRear) {
                mCollector.expectTrue(""Primary rear camera should support RAW capability"",
                        staticInfo.isCapabilitySupported(RAW));
            }
        }
        mCollector.expectTrue(""There must be a primary rear camera for performance class."",
                hasPrimaryRear);
        mCollector.expectTrue(""There must be a primary front camera for performance class."",
                hasPrimaryFront);
    }

    /**
     * Get lens distortion coefficients, as a list of 6 floats; returns null if no valid
     * distortion field is available
     */
    private float[] getLensDistortion(CameraCharacteristics c) {
        float[] distortion = null;
        float[] newDistortion = c.get(CameraCharacteristics.LENS_DISTORTION);
        if (Build.VERSION.DEVICE_INITIAL_SDK_INT > Build.VERSION_CODES.O_MR1 || newDistortion != null) {
            // New devices need to use fixed radial distortion definition; old devices can
            // opt-in to it
            if (newDistortion != null && newDistortion.length == 5) {
                distortion = new float[6];
                distortion[0] = 1.0f;
                for (int i = 1; i < 6; i++) {
                    distortion[i] = newDistortion[i-1];
                }
            }
        } else {
            // Select old field only if on older first SDK and new definition not available
            distortion = c.get(CameraCharacteristics.LENS_RADIAL_DISTORTION);
        }
        return distortion;
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(Size[] goodSizes) {
        return findInvalidSize(Arrays.asList(goodSizes));
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(List<Size> goodSizes) {
        Size invalidSize = new Size(goodSizes.get(0).getWidth() + 1, goodSizes.get(0).getHeight());
        while(goodSizes.contains(invalidSize)) {
            invalidSize = new Size(invalidSize.getWidth() + 1, invalidSize.getHeight());
        }
        return invalidSize;
    }

    /**
     * Check key is present in characteristics if the hardware level is at least {@code hwLevel};
     * check that the key is present if the actual capabilities are one of {@code capabilities}.
     *
     * @return value of the {@code key} from {@code c}
     */
    private <T> T expectKeyAvailable(CameraCharacteristics c, CameraCharacteristics.Key<T> key,
            int hwLevel, int... capabilities) {

        Integer actualHwLevel = c.get(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL);
        assertNotNull(""android.info.supportedHardwareLevel must never be null"", actualHwLevel);

        int[] actualCapabilities = c.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES);
        assertNotNull(""android.request.availableCapabilities must never be null"",
                actualCapabilities);

        List<Key<?>> allKeys = c.getKeys();

        T value = c.get(key);

        // For LIMITED-level targeted keys, rely on capability check, not level
        if ((compareHardwareLevel(actualHwLevel, hwLevel) >= 0) && (hwLevel != LIMITED)) {
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for this hardware level "" +
                            ""(required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    value != null);
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for this "" +
                            ""hardware level (required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    allKeys.contains(key));
        } else if (arrayContainsAnyOf(actualCapabilities, capabilities)) {
            if (!(hwLevel == LIMITED && compareHardwareLevel(actualHwLevel, hwLevel) < 0)) {
                // Don't enforce LIMITED-starting keys on LEGACY level, even if cap is defined
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for these capabilities "" +
                            ""(required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    value != null);
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for "" +
                            ""these capabilities (required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    allKeys.contains(key));
            }
        } else {
            if (actualHwLevel == LEGACY && hwLevel != OPT) {
                if (value != null || allKeys.contains(key)) {
                    Log.w(TAG, String.format(
                            ""Key (%s) is not required for LEGACY devices but still appears"",
                            key.getName()));
                }
            }
            // OK: Key may or may not be present.
        }
        return value;
    }

    private static boolean arrayContains(int[] arr, int needle) {
        if (arr == null) {
            return false;
        }

        for (int elem : arr) {
            if (elem == needle) {
                return true;
            }
        }

        return false;
    }

    private static <T> boolean arrayContains(T[] arr, T needle) {
        if (arr == null) {
            return false;
        }

        for (T elem : arr) {
            if (elem.equals(needle)) {
                return true;
            }
        }

        return false;
    }

    private static boolean arrayContainsAnyOf(int[] arr, int[] needles) {
        for (int needle : needles) {
            if (arrayContains(arr, needle)) {
                return true;
            }
        }
        return false;
    }

    /**
     * The key name has a prefix of either ""android."" or a valid TLD; other prefixes are not valid.
     */
    private static void assertKeyPrefixValid(String keyName) {
        assertStartsWithAndroidOrTLD(
                ""All metadata keys must start with 'android.' (built-in keys) "" +
                ""or valid TLD (vendor-extended keys)"", keyName);
    }

    private static void assertTrueForKey(String msg, CameraCharacteristics.Key<?> key,
            boolean actual) {
        assertTrue(msg + "" (key = '"" + key.getName() + ""')"", actual);
    }

    private static <T> void assertOneOf(String msg, T[] expected, T actual) {
        for (int i = 0; i < expected.length; ++i) {
            if (Objects.equals(expected[i], actual)) {
                return;
            }
        }

        fail(String.format(""%s: (expected one of %s, actual %s)"",
                msg, Arrays.toString(expected), actual));
    }

    private static <T> void assertStartsWithAndroidOrTLD(String msg, String keyName) {
        String delimiter = ""."";
        if (keyName.startsWith(PREFIX_ANDROID + delimiter)) {
            return;
        }
        Pattern tldPattern = Pattern.compile(Patterns.TOP_LEVEL_DOMAIN_STR);
        Matcher match = tldPattern.matcher(keyName);
        if (match.find(0) && (0 == match.start()) && (!match.hitEnd())) {
            if (keyName.regionMatches(match.end(), delimiter, 0, delimiter.length())) {
                return;
            }
        }

        fail(String.format(""%s: (expected to start with %s or valid TLD, but value was %s)"",
                msg, PREFIX_ANDROID + delimiter, keyName));
    }

    /** Return a positive int if left > right, 0 if left==right, negative int if left < right */
    private static int compareHardwareLevel(int left, int right) {
        return remapHardwareLevel(left) - remapHardwareLevel(right);
    }

    /** Remap HW levels worst<->best, 0 = LEGACY, 1 = LIMITED, 2 = FULL, ..., N = LEVEL_N */
    private static int remapHardwareLevel(int level) {
        switch (level) {
            case OPT:
                return Integer.MAX_VALUE;
            case LEGACY:
                return 0; // lowest
            case EXTERNAL:
                return 1; // second lowest
            case LIMITED:
                return 2;
            case FULL:
                return 3; // good
            case LEVEL_3:
                return 4;
            default:
                fail(""Unknown HW level: "" + level);
        }
        return -1;
    }

    private static String toStringHardwareLevel(int level) {
        switch (level) {
            case LEGACY:
                return ""LEGACY"";
            case LIMITED:
                return ""LIMITED"";
            case FULL:
                return ""FULL"";
            case EXTERNAL:
                return ""EXTERNAL"";
            default:
                if (level >= LEVEL_3) {
                    return String.format(""LEVEL_%d"", level);
                }
        }

        // unknown
        Log.w(TAG, ""Unknown hardware level "" + level);
        return Integer.toString(level);
    }
}"	""	""	android.info.supportedHardwareLevel LIMITED FULL	""	section	""	""	""	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-2	7.5/H-1-2	07050000.720102	"""[7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 4 megapixels supporting video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID.  | [7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 5 megapixels and support video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID. """	""	""	cdd MEDIA_PERFORMANCE_CLASS front 4k@30fps minimum 12 resolution	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest	testCameraPerfClassCharacteristics	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java	""	"/*
 *.
 */

package android.hardware.camera2.cts;

import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraCharacteristics.Key;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CameraMetadata;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.cts.helpers.CameraErrorCollector;
import android.hardware.camera2.cts.helpers.StaticMetadata;
import android.hardware.camera2.cts.testcases.Camera2AndroidTestCase;
import android.hardware.camera2.params.BlackLevelPattern;
import android.hardware.camera2.params.ColorSpaceTransform;
import android.hardware.camera2.params.RecommendedStreamConfigurationMap;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.CamcorderProfile;
import android.media.ImageReader;
import android.os.Build;
import android.util.ArraySet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Rational;
import android.util.Range;
import android.util.Size;
import android.util.Pair;
import android.util.Patterns;
import android.view.Display;
import android.view.Surface;
import android.view.WindowManager;

import com.android.compatibility.common.util.CddTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Set;

import org.junit.runners.Parameterized;
import org.junit.runner.RunWith;
import org.junit.Test;

import static android.hardware.camera2.cts.helpers.AssertHelpers.*;
import static android.hardware.camera2.cts.CameraTestUtils.SimpleCaptureCallback;
import static android.hardware.cts.helpers.CameraUtils.matchParametersToCharacteristics;

import static junit.framework.Assert.*;

import static org.mockito.Mockito.*;

/**
 * Extended tests for static camera characteristics.
 */
@RunWith(Parameterized.class)
public class ExtendedCameraCharacteristicsTest extends Camera2AndroidTestCase {
    private static final String TAG = ""ExChrsTest""; // must be short so next line doesn't throw
    private static final boolean VERBOSE = Log.isLoggable(TAG, Log.VERBOSE);

    private static final String PREFIX_ANDROID = ""android"";

    /*
     * Constants for static RAW metadata.
     */
    private static final int MIN_ALLOWABLE_WHITELEVEL = 32; // must have sensor bit depth > 5

    private List<CameraCharacteristics> mCharacteristics;

    private static final Size FULLHD = new Size(1920, 1080);
    private static final Size FULLHD_ALT = new Size(1920, 1088);
    private static final Size HD = new Size(1280, 720);
    private static final Size VGA = new Size(640, 480);
    private static final Size QVGA = new Size(320, 240);
    private static final Size UHD = new Size(3840, 2160);
    private static final Size DC4K = new Size(4096, 2160);

    private static final long MIN_BACK_SENSOR_RESOLUTION = 2000000;
    private static final long MIN_FRONT_SENSOR_RESOLUTION = VGA.getHeight() * VGA.getWidth();
    private static final long LOW_LATENCY_THRESHOLD_MS = 200;
    private static final float LATENCY_TOLERANCE_FACTOR = 1.1f; // 10% tolerance
    private static final int MAX_NUM_IMAGES = 5;
    private static final long PREVIEW_RUN_MS = 500;
    private static final long FRAME_DURATION_30FPS_NSEC = (long) 1e9 / 30;

    private static final long MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION = 12000000;
    private static final long MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION = 5000000;
    private static final long MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION = 4000000;

    private static final long MIN_UHR_SENSOR_RESOLUTION = 24000000;
    /*
     * HW Levels short hand
     */
    private static final int LEGACY = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY;
    private static final int LIMITED = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED;
    private static final int FULL = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_FULL;
    private static final int LEVEL_3 = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_3;
    private static final int EXTERNAL = CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL;
    private static final int OPT = Integer.MAX_VALUE;  // For keys that are optional on all hardware levels.

    /*
     * Capabilities short hand
     */
    private static final int NONE = -1;
    private static final int BC =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE;
    private static final int MANUAL_SENSOR =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR;
    private static final int MANUAL_POSTPROC =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING;
    private static final int RAW =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_RAW;
    private static final int YUV_REPROCESS =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING;
    private static final int OPAQUE_REPROCESS =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING;
    private static final int CONSTRAINED_HIGH_SPEED =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO;
    private static final int MONOCHROME =
            CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME;
    private static final int HIGH_SPEED_FPS_LOWER_MIN = 30;
    private static final int HIGH_SPEED_FPS_UPPER_MIN = 120;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mCharacteristics = new ArrayList<>();
        for (int i = 0; i < mAllCameraIds.length; i++) {
            mCharacteristics.add(mAllStaticInfo.get(mAllCameraIds[i]).getCharacteristics());
        }
    }

    @Override
    public void tearDown() throws Exception {
        super.tearDown();
        mCharacteristics = null;
    }

    /**
     * Test that the available stream configurations contain a few required formats and sizes.
     */
    @CddTest(requirement=""7.5.1/C-1-2"")"	""	""	cdd front 12 resolution	""	section	""	""	""	""	""	""	""	""
2.2.7.2  . Camera	7.5	H-1-1	7.5/H-1-1	07050000.720101	"""[7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID.  | [7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID. """	""	""	cdd rear MEDIA_PERFORMANCE_CLASS 4k@30fps minimum 12 resolution	""	""	""	""	""	""	""	""	android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest	testCameraPerfClassCharacteristics	CtsCameraTestCases	/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java	""	"@CddTest(requirement=""7.5"")
    public void testCameraPerfClassCharacteristics() throws Exception {
        if (mAdoptShellPerm) {
            // Skip test for system camera. Performance class is only applicable for public camera
            // ids.
            return;
        }
        boolean isRPerfClass = CameraTestUtils.isRPerfClass();
        boolean isSPerfClass = CameraTestUtils.isSPerfClass();
        if (!isRPerfClass && !isSPerfClass) {
            return;
        }

        boolean hasPrimaryRear = false;
        boolean hasPrimaryFront = false;
        for (int i = 0; i < mCameraIdsUnderTest.length; i++) {
            String cameraId = mCameraIdsUnderTest[i];
            boolean isPrimaryRear = CameraTestUtils.isPrimaryRearFacingCamera(
                    mCameraManager, cameraId);
            boolean isPrimaryFront = CameraTestUtils.isPrimaryFrontFacingCamera(
                    mCameraManager, cameraId);
            if (!isPrimaryRear && !isPrimaryFront) {
                continue;
            }

            CameraCharacteristics c = mCharacteristics.get(i);
            StaticMetadata staticInfo = mAllStaticInfo.get(cameraId);

            // H-1-1, H-1-2
            Size pixelArraySize = CameraTestUtils.getValueNotNull(
                    c, CameraCharacteristics.SENSOR_INFO_PIXEL_ARRAY_SIZE);
            long sensorResolution = pixelArraySize.getHeight() * pixelArraySize.getWidth();
            StreamConfigurationMap config = staticInfo.getValueFromKeyNonNull(
                    CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            assertNotNull(""No stream configuration map found for ID "" + cameraId, config);
            List<Size> videoSizes = CameraTestUtils.getSupportedVideoSizes(cameraId,
                    mCameraManager, null /*bound*/);

            if (isPrimaryRear) {
                hasPrimaryRear = true;
                mCollector.expectTrue(""Primary rear camera resolution should be at least "" +
                        MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                        sensorResolution,
                        sensorResolution >= MIN_BACK_SENSOR_PERF_CLASS_RESOLUTION);

                // 4K @ 30fps
                boolean supportUHD = videoSizes.contains(UHD);
                boolean supportDC4K = videoSizes.contains(DC4K);
                mCollector.expectTrue(""Primary rear camera should support 4k video recording"",
                        supportUHD || supportDC4K);
                if (supportUHD || supportDC4K) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, supportDC4K ? DC4K : UHD);
                    mCollector.expectTrue(""Primary rear camera should support 4k video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            } else {
                hasPrimaryFront = true;
                if (isSPerfClass) {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_S_PERF_CLASS_RESOLUTION);
                } else {
                    mCollector.expectTrue(""Primary front camera resolution should be at least "" +
                            MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION + "" pixels, is ""+
                            sensorResolution,
                            sensorResolution >= MIN_FRONT_SENSOR_R_PERF_CLASS_RESOLUTION);
                }
                // 1080P @ 30fps
                boolean supportFULLHD = videoSizes.contains(FULLHD);
                mCollector.expectTrue(""Primary front camera should support 1080P video recording"",
                        supportFULLHD);
                if (supportFULLHD) {
                    long minFrameDuration = config.getOutputMinFrameDuration(
                            android.media.MediaRecorder.class, FULLHD);
                    mCollector.expectTrue(""Primary front camera should support 1080P video @ 30fps"",
                            minFrameDuration < (1e9 / 29.9));
                }
            }

            String facingString = hasPrimaryRear ? ""rear"" : ""front"";
            // H-1-3
            if (isSPerfClass || (isRPerfClass && isPrimaryRear)) {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least FULL, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastFull());
            } else {
                mCollector.expectTrue(""Primary "" + facingString +
                        "" camera should be at least LIMITED, but is "" +
                        toStringHardwareLevel(staticInfo.getHardwareLevelChecked()),
                        staticInfo.isHardwareLevelAtLeastLimited());
            }

            // H-1-4
            Integer timestampSource = c.get(CameraCharacteristics.SENSOR_INFO_TIMESTAMP_SOURCE);
            mCollector.expectTrue(
                    ""Primary "" + facingString + "" camera should support real-time timestamp source"",
                    timestampSource != null &&
                    timestampSource.equals(CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME));

            // H-1-8
            if (isSPerfClass && isPrimaryRear) {
                mCollector.expectTrue(""Primary rear camera should support RAW capability"",
                        staticInfo.isCapabilitySupported(RAW));
            }
        }
        mCollector.expectTrue(""There must be a primary rear camera for performance class."",
                hasPrimaryRear);
        mCollector.expectTrue(""There must be a primary front camera for performance class."",
                hasPrimaryFront);
    }

    /**
     * Get lens distortion coefficients, as a list of 6 floats; returns null if no valid
     * distortion field is available
     */
    private float[] getLensDistortion(CameraCharacteristics c) {
        float[] distortion = null;
        float[] newDistortion = c.get(CameraCharacteristics.LENS_DISTORTION);
        if (Build.VERSION.DEVICE_INITIAL_SDK_INT > Build.VERSION_CODES.O_MR1 || newDistortion != null) {
            // New devices need to use fixed radial distortion definition; old devices can
            // opt-in to it
            if (newDistortion != null && newDistortion.length == 5) {
                distortion = new float[6];
                distortion[0] = 1.0f;
                for (int i = 1; i < 6; i++) {
                    distortion[i] = newDistortion[i-1];
                }
            }
        } else {
            // Select old field only if on older first SDK and new definition not available
            distortion = c.get(CameraCharacteristics.LENS_RADIAL_DISTORTION);
        }
        return distortion;
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(Size[] goodSizes) {
        return findInvalidSize(Arrays.asList(goodSizes));
    }

    /**
     * Create an invalid size that's close to one of the good sizes in the list, but not one of them
     */
    private Size findInvalidSize(List<Size> goodSizes) {
        Size invalidSize = new Size(goodSizes.get(0).getWidth() + 1, goodSizes.get(0).getHeight());
        while(goodSizes.contains(invalidSize)) {
            invalidSize = new Size(invalidSize.getWidth() + 1, invalidSize.getHeight());
        }
        return invalidSize;
    }

    /**
     * Check key is present in characteristics if the hardware level is at least {@code hwLevel};
     * check that the key is present if the actual capabilities are one of {@code capabilities}.
     *
     * @return value of the {@code key} from {@code c}
     */
    private <T> T expectKeyAvailable(CameraCharacteristics c, CameraCharacteristics.Key<T> key,
            int hwLevel, int... capabilities) {

        Integer actualHwLevel = c.get(CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL);
        assertNotNull(""android.info.supportedHardwareLevel must never be null"", actualHwLevel);

        int[] actualCapabilities = c.get(CameraCharacteristics.REQUEST_AVAILABLE_CAPABILITIES);
        assertNotNull(""android.request.availableCapabilities must never be null"",
                actualCapabilities);

        List<Key<?>> allKeys = c.getKeys();

        T value = c.get(key);

        // For LIMITED-level targeted keys, rely on capability check, not level
        if ((compareHardwareLevel(actualHwLevel, hwLevel) >= 0) && (hwLevel != LIMITED)) {
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for this hardware level "" +
                            ""(required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    value != null);
            mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for this "" +
                            ""hardware level (required minimal HW level %s, actual HW level %s)"",
                            key.getName(), toStringHardwareLevel(hwLevel),
                            toStringHardwareLevel(actualHwLevel)),
                    allKeys.contains(key));
        } else if (arrayContainsAnyOf(actualCapabilities, capabilities)) {
            if (!(hwLevel == LIMITED && compareHardwareLevel(actualHwLevel, hwLevel) < 0)) {
                // Don't enforce LIMITED-starting keys on LEGACY level, even if cap is defined
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics for these capabilities "" +
                            ""(required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    value != null);
                mCollector.expectTrue(
                    String.format(""Key (%s) must be in characteristics list of keys for "" +
                            ""these capabilities (required capabilities %s, actual capabilities %s)"",
                            key.getName(), Arrays.toString(capabilities),
                            Arrays.toString(actualCapabilities)),
                    allKeys.contains(key));
            }
        } else {
            if (actualHwLevel == LEGACY && hwLevel != OPT) {
                if (value != null || allKeys.contains(key)) {
                    Log.w(TAG, String.format(
                            ""Key (%s) is not required for LEGACY devices but still appears"",
                            key.getName()));
                }
            }
            // OK: Key may or may not be present.
        }
        return value;
    }

    private static boolean arrayContains(int[] arr, int needle) {
        if (arr == null) {
            return false;
        }

        for (int elem : arr) {
            if (elem == needle) {
                return true;
            }
        }

        return false;
    }

    private static <T> boolean arrayContains(T[] arr, T needle) {
        if (arr == null) {
            return false;
        }

        for (T elem : arr) {
            if (elem.equals(needle)) {
                return true;
            }
        }

        return false;
    }

    private static boolean arrayContainsAnyOf(int[] arr, int[] needles) {
        for (int needle : needles) {
            if (arrayContains(arr, needle)) {
                return true;
            }
        }
        return false;
    }

    /**
     * The key name has a prefix of either ""android."" or a valid TLD; other prefixes are not valid.
     */
    private static void assertKeyPrefixValid(String keyName) {
        assertStartsWithAndroidOrTLD(
                ""All metadata keys must start with 'android.' (built-in keys) "" +
                ""or valid TLD (vendor-extended keys)"", keyName);
    }

    private static void assertTrueForKey(String msg, CameraCharacteristics.Key<?> key,
            boolean actual) {
        assertTrue(msg + "" (key = '"" + key.getName() + ""')"", actual);
    }

    private static <T> void assertOneOf(String msg, T[] expected, T actual) {
        for (int i = 0; i < expected.length; ++i) {
            if (Objects.equals(expected[i], actual)) {
                return;
            }
        }

        fail(String.format(""%s: (expected one of %s, actual %s)"",
                msg, Arrays.toString(expected), actual));
    }

    private static <T> void assertStartsWithAndroidOrTLD(String msg, String keyName) {
        String delimiter = ""."";
        if (keyName.startsWith(PREFIX_ANDROID + delimiter)) {
            return;
        }
        Pattern tldPattern = Pattern.compile(Patterns.TOP_LEVEL_DOMAIN_STR);
        Matcher match = tldPattern.matcher(keyName);
        if (match.find(0) && (0 == match.start()) && (!match.hitEnd())) {
            if (keyName.regionMatches(match.end(), delimiter, 0, delimiter.length())) {
                return;
            }
        }

        fail(String.format(""%s: (expected to start with %s or valid TLD, but value was %s)"",
                msg, PREFIX_ANDROID + delimiter, keyName));
    }

    /** Return a positive int if left > right, 0 if left==right, negative int if left < right */
    private static int compareHardwareLevel(int left, int right) {
        return remapHardwareLevel(left) - remapHardwareLevel(right);
    }

    /** Remap HW levels worst<->best, 0 = LEGACY, 1 = LIMITED, 2 = FULL, ..., N = LEVEL_N */
    private static int remapHardwareLevel(int level) {
        switch (level) {
            case OPT:
                return Integer.MAX_VALUE;
            case LEGACY:
                return 0; // lowest
            case EXTERNAL:
                return 1; // second lowest
            case LIMITED:
                return 2;
            case FULL:
                return 3; // good
            case LEVEL_3:
                return 4;
            default:
                fail(""Unknown HW level: "" + level);
        }
        return -1;
    }

    private static String toStringHardwareLevel(int level) {
        switch (level) {
            case LEGACY:
                return ""LEGACY"";
            case LIMITED:
                return ""LIMITED"";
            case FULL:
                return ""FULL"";
            case EXTERNAL:
                return ""EXTERNAL"";
            default:
                if (level >= LEVEL_3) {
                    return String.format(""LEVEL_%d"", level);
                }
        }

        // unknown
        Log.w(TAG, ""Unknown hardware level "" + level);
        return Integer.toString(level);
    }
}"	""	""	cdd rear resolution	""	""	""	""	""	""	""	""	""	""
7.4.3  . Bluetooth	7.4.3	C-6-2	7.4.3/C-6-2	07040300.670602	"""C-6-2] MUST gate Bluetooth access behind the android.permission.ACCESS_FINE_LOCATION. <h4 id=""744_near-field_communications"" """	""	""	ACCESS_FINE_LOCATION BluetoothRestrictionTest android.permission.ACCESS	""	""	""	""	""	""	""	""	com.android.cts.devicepolicy.DeviceOwnerTest	testBluetoothRestriction	CtsDevicePolicyManagerTestCases	/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java	""	"public void testBluetoothRestriction() throws Exception {
        executeDeviceOwnerTest(""BluetoothRestrictionTest"");
    }"	""	""	BluetoothRestrictionTest	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-2-3	8.2/H-2-3	08020000.720203	"""[8.2/H-2-3] MUST ensure a sequential read performance of at least 250 MB/s. """	""	""	update sequential	""	""	""	""	""	""	""	""	android.filesystem.cts.SequentialRWTest	testSingleSequentialWrite	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/SequentialRWTest.java	""	"public void testSingleSequentialWrite() throws Exception {
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        final int numberOfFiles =(int)(fileSize / BUFFER_SIZE);
        String streamName = ""test_single_sequential_write"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        report.addValue(""files"", numberOfFiles, ResultType.NEUTRAL, ResultUnit.COUNT);
        final byte[] data = FileUtil.generateRandomData(BUFFER_SIZE);
        final File[] files = FileUtil.createNewFiles(getContext(), DIR_SEQ_WR,
                numberOfFiles);
        double[] rdAmount = new double[numberOfFiles];
        double[] wrAmount = new double[numberOfFiles];
        double[] times = FileUtil.measureIO(numberOfFiles, rdAmount, wrAmount, new MeasureRun() {

            @Override
            public void run(int i) throws IOException {
                FileUtil.writeFile(files[i], data, false);
            }
        });
        double[] mbps = Stat.calcRatePerSecArray((double)BUFFER_SIZE / 1024 / 1024, times);
        report.addValues(""write_throughput"", mbps, ResultType.HIGHER_BETTER, ResultUnit.MBPS);
        report.addValues(""write_amount"", wrAmount, ResultType.NEUTRAL, ResultUnit.BYTE);
        Stat.StatResult stat = Stat.getStat(mbps);
        report.setSummary(""write_throughput_average"", stat.mAverage, ResultType.HIGHER_BETTER,
                ResultUnit.MBPS);
        Log.v(TAG, ""sequential write "" + stat.mAverage + "" MBPS"");
        report.submit(getInstrumentation());

        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + stat.mAverage + "" is less than target ("" + MIN_WRITE_MBPS +
                       "" MBPS)"", stat.mAverage >= MIN_WRITE_MBPS);
        }
    }"	""	""	sequential	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-2-4	8.2/H-2-4	08020000.720204	"""[8.2/H-2-4] MUST ensure a random read performance of at least 40 MB/s. <h3 id=""23_television_requirements"" """	""	""	random read	""	""	""	""	""	""	""	""	android.filesystem.cts.RandomRWTest	testRandomRead	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java	""	"public void testRandomRead() throws Exception {
        final int READ_BUFFER_SIZE = 4 * 1024;
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), READ_BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        String streamName = ""test_random_read"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        double mbps = FileUtil.doRandomReadTest(getContext(), DIR_RANDOM_RD, report, fileSize,
                READ_BUFFER_SIZE);
        report.submit(getInstrumentation());
        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + mbps + "" is less than target ("" + MIN_READ_MBPS + "" MBPS)"",
                       mbps >= MIN_READ_MBPS);
        }
    }

    // It is taking too long in some device, and thus cannot run multiple times
    @CddTest(requirement=""8.2"")"	""	""	random read	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-2-2	8.2/H-2-2	08020000.720202	"""[8.2/H-2-2] MUST ensure a random write performance of at least 10 MB/s. """	""	""	update random	""	""	""	""	""	""	""	""	android.filesystem.cts.RandomRWTest	testRandomUpdate	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java	""	"public void testRandomUpdate() throws Exception {
        final int WRITE_BUFFER_SIZE = 4 * 1024;
        final long usableSpace = Environment.getDataDirectory().getUsableSpace();
        long fileSize = 256 * 1024 * 1024;
        while (usableSpace < fileSize) {
            fileSize = fileSize / 2;
        }
        String streamName = ""test_random_update"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        double mbps = -1;
        // this is in-fact true
        if (fileSize > FileUtil.BUFFER_SIZE) {
            mbps = FileUtil.doRandomWriteTest(getContext(), DIR_RANDOM_WR, report, fileSize,
                WRITE_BUFFER_SIZE);
        }
        report.submit(getInstrumentation());
        if (MediaPerformanceClassUtils.isPerfClass()) {
            // for performance class devices we must be able to write 256MB
            assertTrue(""measured "" + mbps + "" is less than target ("" + MIN_WRITE_MBPS + "" MBPS)"",
                       mbps >= MIN_WRITE_MBPS);
        }
    }
}"	""	""	update random	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-2-1	8.2/H-2-1	08020000.720201	"""[8.2/H-2-1] MUST ensure a sequential write performance of at least 125 MB/s. """	""	""	update sequential	""	""	""	""	""	""	""	""	android.filesystem.cts.SequentialRWTest	testSingleSequentialWrite	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/SequentialRWTest.java	""	"public void testSingleSequentialWrite() throws Exception {
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        final int numberOfFiles =(int)(fileSize / BUFFER_SIZE);
        String streamName = ""test_single_sequential_write"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        report.addValue(""files"", numberOfFiles, ResultType.NEUTRAL, ResultUnit.COUNT);
        final byte[] data = FileUtil.generateRandomData(BUFFER_SIZE);
        final File[] files = FileUtil.createNewFiles(getContext(), DIR_SEQ_WR,
                numberOfFiles);
        double[] rdAmount = new double[numberOfFiles];
        double[] wrAmount = new double[numberOfFiles];
        double[] times = FileUtil.measureIO(numberOfFiles, rdAmount, wrAmount, new MeasureRun() {

            @Override
            public void run(int i) throws IOException {
                FileUtil.writeFile(files[i], data, false);
            }
        });
        double[] mbps = Stat.calcRatePerSecArray((double)BUFFER_SIZE / 1024 / 1024, times);
        report.addValues(""write_throughput"", mbps, ResultType.HIGHER_BETTER, ResultUnit.MBPS);
        report.addValues(""write_amount"", wrAmount, ResultType.NEUTRAL, ResultUnit.BYTE);
        Stat.StatResult stat = Stat.getStat(mbps);
        report.setSummary(""write_throughput_average"", stat.mAverage, ResultType.HIGHER_BETTER,
                ResultUnit.MBPS);
        Log.v(TAG, ""sequential write "" + stat.mAverage + "" MBPS"");
        report.submit(getInstrumentation());

        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + stat.mAverage + "" is less than target ("" + MIN_WRITE_MBPS +
                       "" MBPS)"", stat.mAverage >= MIN_WRITE_MBPS);
        }
    }"	""	""	sequential	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-1-1	8.2/H-1-1	08020000.720101	"""[8.2/H-1-1] MUST ensure a sequential write performance of at least 100 MB/s. """	""	""	update sequential	""	""	""	""	""	""	""	""	android.filesystem.cts.SequentialRWTest	testSingleSequentialWrite	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/SequentialRWTest.java	""	"public void testSingleSequentialWrite() throws Exception {
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        final int numberOfFiles =(int)(fileSize / BUFFER_SIZE);
        String streamName = ""test_single_sequential_write"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        report.addValue(""files"", numberOfFiles, ResultType.NEUTRAL, ResultUnit.COUNT);
        final byte[] data = FileUtil.generateRandomData(BUFFER_SIZE);
        final File[] files = FileUtil.createNewFiles(getContext(), DIR_SEQ_WR,
                numberOfFiles);
        double[] rdAmount = new double[numberOfFiles];
        double[] wrAmount = new double[numberOfFiles];
        double[] times = FileUtil.measureIO(numberOfFiles, rdAmount, wrAmount, new MeasureRun() {

            @Override
            public void run(int i) throws IOException {
                FileUtil.writeFile(files[i], data, false);
            }
        });
        double[] mbps = Stat.calcRatePerSecArray((double)BUFFER_SIZE / 1024 / 1024, times);
        report.addValues(""write_throughput"", mbps, ResultType.HIGHER_BETTER, ResultUnit.MBPS);
        report.addValues(""write_amount"", wrAmount, ResultType.NEUTRAL, ResultUnit.BYTE);
        Stat.StatResult stat = Stat.getStat(mbps);
        report.setSummary(""write_throughput_average"", stat.mAverage, ResultType.HIGHER_BETTER,
                ResultUnit.MBPS);
        Log.v(TAG, ""sequential write "" + stat.mAverage + "" MBPS"");
        report.submit(getInstrumentation());

        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + stat.mAverage + "" is less than target ("" + MIN_WRITE_MBPS +
                       "" MBPS)"", stat.mAverage >= MIN_WRITE_MBPS);
        }
    }"	""	""	sequential	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-1-2	8.2/H-1-2	08020000.720102	"""[8.2/H-1-2] MUST ensure a random write performance of at least 10 MB/s. """	""	""	update random	""	""	""	""	""	""	""	""	android.filesystem.cts.RandomRWTest	testRandomUpdate	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java	""	"public void testRandomUpdate() throws Exception {
        final int WRITE_BUFFER_SIZE = 4 * 1024;
        final long usableSpace = Environment.getDataDirectory().getUsableSpace();
        long fileSize = 256 * 1024 * 1024;
        while (usableSpace < fileSize) {
            fileSize = fileSize / 2;
        }
        String streamName = ""test_random_update"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        double mbps = -1;
        // this is in-fact true
        if (fileSize > FileUtil.BUFFER_SIZE) {
            mbps = FileUtil.doRandomWriteTest(getContext(), DIR_RANDOM_WR, report, fileSize,
                WRITE_BUFFER_SIZE);
        }
        report.submit(getInstrumentation());
        if (MediaPerformanceClassUtils.isPerfClass()) {
            // for performance class devices we must be able to write 256MB
            assertTrue(""measured "" + mbps + "" is less than target ("" + MIN_WRITE_MBPS + "" MBPS)"",
                       mbps >= MIN_WRITE_MBPS);
        }
    }
}"	""	""	update random	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-1-3	8.2/H-1-3	08020000.720103	"""[8.2/H-1-3] MUST ensure a sequential read performance of at least 200 MB/s. """	""	""	read sequential	""	""	""	""	""	""	""	""	android.filesystem.cts.SequentialRWTest	testSingleSequentialRead	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/SequentialRWTest.java	""	"public void testSingleSequentialRead() throws Exception {
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        long start = System.currentTimeMillis();
        final File file = FileUtil.createNewFilledFile(getContext(),
                DIR_SEQ_RD, fileSize);
        long finish = System.currentTimeMillis();
        String streamName = ""test_single_sequential_read"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        report.addValue(""file_size"", fileSize, ResultType.NEUTRAL, ResultUnit.NONE);
        report.addValue(""write_throughput"",
                Stat.calcRatePerSec((double)fileSize / 1024 / 1024, finish - start),
                ResultType.HIGHER_BETTER, ResultUnit.MBPS);

        final int NUMBER_READ = 10;

        final byte[] data = new byte[BUFFER_SIZE];
        double[] times = MeasureTime.measure(NUMBER_READ, new MeasureRun() {

            @Override
            public void run(int i) throws IOException {
                final FileInputStream in = new FileInputStream(file);
                long read = 0;
                while (read < fileSize) {
                    in.read(data);
                    read += BUFFER_SIZE;
                }
                in.close();
            }
        });
        double[] mbps = Stat.calcRatePerSecArray((double)fileSize / 1024 / 1024, times);
        report.addValues(""read_throughput"", mbps, ResultType.HIGHER_BETTER, ResultUnit.MBPS);
        Stat.StatResult stat = Stat.getStat(mbps);
        report.setSummary(""read_throughput_average"", stat.mAverage, ResultType.HIGHER_BETTER,
                ResultUnit.MBPS);
        Log.v(TAG, ""sequential read "" + stat.mAverage + "" MBPS"");
        report.submit(getInstrumentation());

        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + stat.mAverage + "" is less than target ("" + MIN_READ_MBPS +
                       "" MBPS)"", stat.mAverage >= MIN_READ_MBPS);
        }
    }
}"	""	""	read sequential	""	""	""	""	""	""	""	""	""	""
2.2.7.4  . Performance	8.2	H-1-4	8.2/H-1-4	08020000.720104	"""[8.2/H-1-4] MUST ensure a random read performance of at least 25 MB/s. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: """	""	""	VERSION_CODES read android.os.Build.VERSION MEDIA_PERFORMANCE_CLASS random android.os.Build.VERSION_CODES.MEDIA	""	""	""	""	""	""	""	""	android.filesystem.cts.RandomRWTest	testRandomRead	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java	""	"public void testRandomRead() throws Exception {
        final int READ_BUFFER_SIZE = 4 * 1024;
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), READ_BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        String streamName = ""test_random_read"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        double mbps = FileUtil.doRandomReadTest(getContext(), DIR_RANDOM_RD, report, fileSize,
                READ_BUFFER_SIZE);
        report.submit(getInstrumentation());
        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + mbps + "" is less than target ("" + MIN_READ_MBPS + "" MBPS)"",
                       mbps >= MIN_READ_MBPS);
        }
    }

    // It is taking too long in some device, and thus cannot run multiple times
    @CddTest(requirement=""8.2"")"	""	""	read random	""	""	""	""	""	""	""	""	""	""