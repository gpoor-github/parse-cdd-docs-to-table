"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-2-1"	Test available	"[('android.controls.cts.CtsControlsServiceTest', 2)]"	"[('setUp', 1), ('CtsControlsService', 1)]"	"[('CtsControlsDeviceTestCases', 2)]"	""	"3.8.16/H-2-1"	""">3.8.16/H-2-1] MUST report null for the ControlsProviderService and the Control APIs. [<a href=""#3_8_user_interface_compatibility"""""	"03081600.720201"	"ControlsProviderService"	"ControlsProviderService"	""	""	"[('ControlsProviderService', 2)]"	""	"[('[android.controls.cts.CtsControlsServiceTest testRequestAddControl CtsControlsDeviceTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/controls/src/android/controls/cts/CtsControlsServiceTest.java', 2)]"	"[('/android/controls/cts/CtsControlsServiceTest.java', 3)]"	"[('([1:/android/controls/cts/CtsControlsServiceTest.java]:[ControlsProviderService]:[1]:method_text:[   @Before     public void setUp() {         mControlsService = new CtsControlsService();     }     ])', 1), ('([1:/android/controls/cts/CtsControlsServiceTest.java]:[ControlsProviderService]:[1]:method_text:[on(), t2.getActionDescription());         assertRangeTemplate(t1.getRange(), t2.getRange());     } }])', 1)]"	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-2-2"	Test missing	"[('android.accessibilityservice.cts.AccessibilityWindowQueryTest', 10), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 7), ('android.accessibilityservice.cts.AccessibilityWindowReportingTest', 5), ('android.accessibilityservice.cts.AccessibilityGestureDetectorTest', 5), ('android.accessibilityservice.cts.AccessibilityButtonTest', 2), ('android.accessibilityservice.cts.AccessibilityEmbeddedDisplayTest', 2), ('android.view.accessibility.cts.AccessibilityServiceInfoTest', 2), ('android.accessibilityservice.cts.AccessibilityOverlayTest', 2), ('android.accessibilityservice.cts.TouchExplorerTest', 2), ('android.accessibilityservice.cts.AccessibilityButtonSdk29Test', 2), ('android.accessibilityservice.cts.AccessibilityServiceInfoTest', 2), ('android.accessibilityservice.cts.AccessibilityGestureDispatchTest', 2), ('android.accessibilityservice.cts.AccessibilityEmbeddedHierarchyTest', 2), ('android.accessibilityservice.cts.MagnificationGestureHandlerTest', 1), ('android.view.accessibility.cts.AccessibilityShortcutTest', 1), ('android.accessibilityservice.cts.AccessibilityTakeScreenshotTest', 1), ('android.accessibilityservice.cts.AccessibilityFingerprintGestureTest', 1), ('android.accessibilityservice.cts.AccessibilityTextTraversalTest', 1), ('android.accessibilityservice.cts.AccessibilityGlobalActionsTest', 1), ('android.accessibility.cts.common.InstrumentedAccessibilityServiceTestRule', 1), ('android.view.accessibility.cts.AccessibilityManagerTest', 1), ('android.accessibilityservice.cts.AccessibilityVolumeTest', 1), ('android.view.accessibility.cts.AccessibilityNodeInfoTest', 1), ('android.accessibilityservice.cts.AccessibilityTextActionTest', 1), ('android.accessibilityservice.cts.AccessibilityViewTreeReportingTest', 1), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 1), ('android.accessibilityservice.cts.AccessibilitySystemActionTest', 1), ('android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest', 1)]"	"[('AccessibilityDumpOnFailureRule', 20), ('getInstrumentation', 19), ('oneTimeSetup', 14), ('getContext', 11), ('getUiAutomation', 9), ('setUp', 9), ('getServiceInfo', 8), ('getPackageManager', 6), ('finalTearDown', 5), ('destroy', 4), ('getService', 3), ('AccessibilityButtonCallback', 1), ('getAccessibilityButtonController', 1), ('oneTimeSetUp', 1), ('AccessibilityShortcutSettingsRule', 1), ('putWindowInPictureInPicture_generatesEventAndReportsProperty', 1), ('enterPictureInPictureMode', 1), ('getEventType', 1), ('getWindows', 1), ('size', 1), ('CancellationSignal', 1), ('getFingerprintGestureController', 1), ('getSimpleName', 1)]"	"[('CtsAccessibilityServiceTestCases', 52), ('CtsAccessibilityTestCases', 5), ('CtsAccessibilityServiceSdk29TestCases', 2)]"	""	"3.8.16/H-2-2"	""">3.8.16/H-2-2] MUST declare the feature flag android.software.controls and set it to false. Handheld device implementations: [<a href=""#3_10_accessibility"""""	"03081600.720202"	"flag android.software.controls feature"	"feature flag"	""	""	"[('flag', 41), ('feature', 19)]"	"accessibility"	"[('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest perDisplayFocusEnabled CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.TouchExplorerTest EventCapturingClickListener CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest postTestTearDown CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.AccessibilityGestureDetectorTest DisplayMetrics CtsAccessibilityServiceTestCases]', 2), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testInterrupt_notifiesService CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEmbeddedDisplayTest testA11yWindowNotifyWhenResizeWindowInActivityViewAfterServiceOffAndOn CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEmbeddedDisplayTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.MagnificationGestureHandlerTest EventCapturingTouchListener CtsAccessibilityServiceTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityServiceInfoTest testAccessibilityServiceInfoForEnabledService CtsAccessibilityTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityOverlayTest testA11yServiceShowsOverlayOnVirtualDisplay_shouldAppear CtsAccessibilityServiceTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityShortcutTest postTestTearDown CtsAccessibilityTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testChangeAccessibilityFocusWindow_getEvent CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testGetAnchorForDropDownForAutoCompleteTextView_returnsTextViewNode CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest isInPictureInPictureMode CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityTakeScreenshotTest testTakeScreenshotWithSecureWindow_GetScreenshotAndVerifyBitmap CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testNoWindowsAccessIfFlagNotSet CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testTraverseAllWindows CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testTraverseWindowFromEvent CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testInteractWithAppWindow CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testSingleAccessibilityFocusAcrossWindows CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testObjectContract CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testGetWindowsOnAllDisplays_resultIsSortedByLayerDescending CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowQueryTest testFindPictureInPictureWindow CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown CtsAccessibilityServiceSdk29TestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test testUpdateRequestAccessibilityButtonFlag_succeeds CtsAccessibilityServiceSdk29TestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityTextTraversalTest testTextEditingActions CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGlobalActionsTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibility.cts.common.InstrumentedAccessibilityServiceTestRule testWithEnabledAccessibilityService None]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityVolumeTest isVolumeFixed CtsAccessibilityServiceTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityNodeInfoTest testIsHeadingTakesOldApiIntoAccount CtsAccessibilityTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityTextActionTest testImageSpan_accessibilityServiceShouldSeeContentDescription CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityServiceInfoTest testFeedbackTypeToString CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityServiceInfoTest testFlagToString CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testUnhideView_receiveSubtreeEvent CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityMagnificationTest testA11yNodeInfoVisibility_whenOutOfMagnifiedArea_shouldVisible CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest testClickAt_producesDownThenUp CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDispatchTest MyTouchListener CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilitySystemActionTest dropShellPermissionIdentity CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDetectorTest testRecognizeGesturePathOnVirtualDisplay CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDetectorTest testVerifyGestureTouchEventOnVirtualDisplay CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityGestureDetectorTest testDispatchGesture_privateDisplay_gestureCancelled CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityFocusAndInputFocusSyncTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEmbeddedHierarchyTest postTestTearDown CtsAccessibilityServiceTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEmbeddedHierarchyTest testEmbeddedViewIsInvisibleAfterMovingOutOfScreen CtsAccessibilityServiceTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java', 10), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 7), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 5), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java', 5), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEmbeddedDisplayTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityServiceInfoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityOverlayTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/TouchExplorerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityServiceInfoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEmbeddedHierarchyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/MagnificationGestureHandlerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityShortcutTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityTakeScreenshotTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityFingerprintGestureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityGlobalActionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/common/src/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityVolumeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityNodeInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityTextActionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySystemActionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java', 1)]"	"[('/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java', 12), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 9), ('/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 7), ('/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java', 7), ('/android/accessibilityservice/cts/AccessibilityEmbeddedDisplayTest.java', 4), ('/android/accessibilityservice/cts/TouchExplorerTest.java', 4), ('/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java', 4), ('/android/accessibilityservice/cts/AccessibilityEmbeddedHierarchyTest.java', 4), ('/android/accessibilityservice/cts/AccessibilityButtonTest.java', 3), ('/android/view/accessibility/cts/AccessibilityServiceInfoTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityOverlayTest.java', 3), ('/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 3), ('/android/accessibilityservice/cts/AccessibilityServiceInfoTest.java', 3), ('/android/accessibilityservice/cts/MagnificationGestureHandlerTest.java', 2), ('/android/view/accessibility/cts/AccessibilityShortcutTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityTakeScreenshotTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityFingerprintGestureTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityGlobalActionsTest.java', 2), ('/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java', 2), ('/android/view/accessibility/cts/AccessibilityManagerTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityVolumeTest.java', 2), ('/android/view/accessibility/cts/AccessibilityNodeInfoTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityTextActionTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/android/accessibilityservice/cts/AccessibilitySystemActionTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java', 2)]"	"[('([2:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[2]:method_text:[   } finally {             clearAccessInteractiveWindowsFlag();         }     }      @MediumTest    ])', 3), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[flag]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[flag]:[1]:method_text:[        } finally {             service.disableSelfAndRemove();         }     }      @MediumTest    ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[flag]:[3]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));     }      @MediumTest    ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[flag]:[4]:method_text:[tic int getCurrentUser() {         return android.os.Process.myUserHandle().getIdentifier();     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[feature]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);     }      @MediumTest     @Presubmit    ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[feature]:[4]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[feature]:[2]:method_text:[tic int getCurrentUser() {         return android.os.Process.myUserHandle().getIdentifier();     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[flag]:[1]:method_text:[le.getService();         mButtonController = mService.getAccessibilityButtonController();     }     ])', 1), ('([10:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[flag]:[10]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                         == FLAG_REQUEST_ACCESSIBILITY_BUTTON);     } }])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityEmbeddedDisplayTest.java]:[flag]:[8]:method_text:[eState);             setContentView(R.layout.accessibility_embedded_display_test);         }     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEmbeddedDisplayTest.java]:[feature]:[1]:method_text:[l.runWithShellPermissionIdentity(() -> mActivityView.release());         }     }      @Presubmit    ])', 1), ('([4:/android/accessibilityservice/cts/MagnificationGestureHandlerTest.java]:[feature]:[4]:method_text:[asTouchscreen) return;          setMagnificationEnabled(mOriginalIsMagnificationEnabled);     }     ])', 1), ('([13:/android/view/accessibility/cts/AccessibilityServiceInfoTest.java]:[flag]:[13]:method_text:[can retrieve      * window content.      */     @MediumTest     @SuppressWarnings(""deprecation"")    ])', 1), ('([9:/android/view/accessibility/cts/AccessibilityServiceInfoTest.java]:[flag]:[9]:method_text:[s(/* expected= */ 1000,                 speakingService.getNonInteractiveUiTimeoutMillis());     } }])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityOverlayTest.java]:[flag]:[3]:method_text:[   }      @Before     public void setUp() {         mService = mServiceRule.getService();     }     ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityOverlayTest.java]:[flag]:[3]:method_text:[               return window;                 }             }         }         return null;     } }])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[flag]:[2]:method_text:[        sInstrumentation.runOnMainSync(() -> mShortcutTargetActivity.finish());         }     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[flag]:[2]:method_text:[getResources()                 .getBoolean(android.R.bool.config_perDisplayFocusEnabled);     }     ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[flag]:[4]:method_text:[REQUEST_TOUCH_EXPLORATION_MODE;             sUiAutomation.setServiceInfo(info);         }     }     ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[flag]:[4]:method_text:[ = mActivity.getWindow().getDecorView().getWindowToken();         });         return params;     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[feature]:[1]:method_text:[getResources()                 .getBoolean(android.R.bool.config_perDisplayFocusEnabled);     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[feature]:[2]:method_text:[reWindows++;             }         }         assertTrue(numPictureInPictureWindows >= 1);     }     ])', 1), ('([1:/android/accessibilityservice/cts/TouchExplorerTest.java]:[flag]:[1]:method_text:[            .run();     }      /** Test a slow swipe which should initiate touch exploration. */    ])', 1), ('([4:/android/accessibilityservice/cts/TouchExplorerTest.java]:[feature]:[4]:method_text:[            .run();     }      /** Test a slow swipe which should initiate touch exploration. */    ])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityTakeScreenshotTest.java]:[flag]:[8]:method_text:[tmap = Bitmap.wrapHardwareBuffer(hardwareBuffer, colorSpace);         assertNotNull(bitmap);     } }])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[2]:method_text:[nscreen(                 sInstrumentation, sUiAutomation, mActivityRule);     }      @MediumTest    ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[4]:method_text:[ow cannot be accessed.         assertNull(event.getSource().getWindow());     }      @MediumTest    ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[1]:method_text:[ocusCleared();             clearAccessInteractiveWindowsFlag();         }     }      @MediumTest    ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[4]:method_text:[MPORTANT_VIEWS;             sUiAutomation.setServiceInfo(info);         }     }      @MediumTest    ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[flag]:[16]:method_text:[            return false;                 }             }             return true;         }     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[feature]:[1]:method_text:[nscreen(                 sInstrumentation, sUiAutomation, mActivityRule);     }      @MediumTest    ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityWindowQueryTest.java]:[feature]:[2]:method_text:[reWindows++;             }         }         assertTrue(numPictureInPictureWindows >= 1);     }     ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityFingerprintGestureTest.java]:[feature]:[3]:method_text:[ontroller =                 mFingerprintGestureService.getFingerprintGestureController();     }     ])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[flag]:[8]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                 == FLAG_REQUEST_ACCESSIBILITY_BUTTON);     }     ])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[flag]:[6]:method_text:[ should succeed"",                 mService.getServiceInfo().flags == mServiceInfo.flags);     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java]:[feature]:[2]:method_text:[        // Verify the content.         assertTrue(TextUtils.isEmpty(editText.getText()));     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityGlobalActionsTest.java]:[flag]:[2]:method_text:[.         homeScreenOrBust(sInstrumentation.getContext(), sUiAutomation);     }      @MediumTest    ])', 1), ('([1:/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java]:[flag]:[1]:method_text:[valuate();             } finally {                 disableService();             }         }     } }])', 1), ('([5:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[flag]:[5]:method_text:[;         } catch (IOException e) {             fail(""Fail to run shell command"");         }     } }])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityVolumeTest.java]:[feature]:[4]:method_text:[eamMaxVolume(AudioManager.STREAM_ACCESSIBILITY);         mFixedA11yVolume = (MIN == MAX);     }     ])', 1), ('([1:/android/view/accessibility/cts/AccessibilityNodeInfoTest.java]:[flag]:[1]:method_text:[ reset"", info.isTextEntryKey());     }      private static class MockBinder extends Binder {     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityTextActionTest.java]:[flag]:[1]:method_text:[       assertEquals(contentDescription, replacementSpanFromA11y.getContentDescription());     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityServiceInfoTest.java]:[flag]:[1]:method_text:[   /**      * Tests whether a flag is correctly transformed to a string.      */     @MediumTest    ])', 1), ('([36:/android/accessibilityservice/cts/AccessibilityServiceInfoTest.java]:[flag]:[36]:method_text:[eractiveUiTimeoutMillis(),                 receivedInfo.getNonInteractiveUiTimeoutMillis());     } }])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[flag]:[4]:method_text:[hildDrawingOrder(int childCount, int i) {             return childDrawingOrder[i];         }     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[flag]:[1]:method_text:[ayoutParams));         // Waiting for UI refresh         mInstrumentation.waitForIdleSync();     } }])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[flag]:[1]:method_text:[me() + ViewConfiguration.getLongPressTimeout()                 > clickUp.getEventTime());     }     ])', 1), ('([9:/android/accessibilityservice/cts/AccessibilityGestureDispatchTest.java]:[feature]:[9]:method_text:[ServiceRule.enableService();          mMotionEvents.clear();         mGotUpEvent = false;     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilitySystemActionTest.java]:[flag]:[2]:method_text:[    @After     public void tearDown() throws Exception {         mService.setLatch(null);     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[flag]:[2]:method_text:[    // Start stub accessibility service.         mService = mServiceRule.enableService();     }     ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[feature]:[4]:method_text:[    // Start stub accessibility service.         mService = mServiceRule.enableService();     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[feature]:[2]:method_text:[.lineTo(startPoint.x + delta2.x, startPoint.y + delta2.y);         }         return path;     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[feature]:[2]:method_text:[_TOUCH_INTERACTION_START,                 AccessibilityEvent.TYPE_TOUCH_INTERACTION_END);     }     ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityGestureDetectorTest.java]:[feature]:[2]:method_text:[er), dy),                             STROKE_MS));         }         return builder.build();     } }])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityFocusAndInputFocusSyncTest.java]:[flag]:[4]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);     }      @MediumTest     @Presubmit    ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEmbeddedHierarchyTest.java]:[flag]:[2]:method_text:[Automation,                 mActivityRule);         mActivity.waitForEmbeddedHierarchy();     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEmbeddedHierarchyTest.java]:[feature]:[1]:method_text:[     return !boundsInScreen.isEmpty();                     }, DEFAULT_TIMEOUT_MS);         }     } }])', 1)]"	""	""	""	""	""
"203:629423) 7.4.5.2  . IPv6"	"7.4.5.2"	"C-4-1"	""	"[('android.net.cts.IpSecManagerTest', 22), ('android.net.cts.DnsResolverTest', 5), ('com.android.cts.net.ProcNetTest', 4), ('android.net.ipv6.cts.PingTest', 2), ('android.net.ipsec.ike.cts.IkeIdentificationTest', 2), ('android.net.cts.DnsTest', 2), ('android.net.cts.IpSecManagerTunnelTest', 2), ('android.net.ipsec.ike.cts.ChildSessionParamsTest', 2), ('android.net.ipsec.ike.cts.IkeSessionParamsTest', 2), ('com.android.cts.deviceowner.NetworkLoggingTest', 2), ('android.net.cts.ConnectivityManagerTest', 2), ('android.hardware.camera2.cts.ImageReaderTest', 2), ('android.net.cts.Ikev2VpnTest', 2), ('android.media.cts.SoundPoolTest', 1), ('android.net.cts.MacAddressTest', 1), ('android.net.cts.IpSecBaseTest', 1), ('com.android.cts.delegate.NetworkLoggingDelegateTest', 1), ('android.security.cts.KernelSettingsTest', 1), ('android.net.ipsec.ike.cts.IkeSessionDigitalSignatureTest', 1), ('android.net.cts.InetAddressesTest', 1), ('android.hardware.cts.SensorDirectReportTest', 1), ('android.net.ipsec.ike.cts.IkeSessionPskTest', 1), ('android.hardware.camera2.cts.ImageWriterTest', 1), ('android.host.systemui.TvMicrophoneCaptureIndicatorTest', 1), ('android.media.cts.VideoCodecTest', 1), ('android.permission.cts.FileSystemPermissionTest', 1), ('android.app.usage.cts.NetworkUsageStatsTest', 1), ('android.appsecurity.cts.listeningports.ListeningPortsTest', 1), ('com.android.cts.net.hostside.MixedModesTest', 1), ('android.telephony.cts.TelephonyManagerTest', 1)]"	"[('setUp', 11), ('tearDown', 7), ('getContext', 5), ('trim', 4), ('getHostAddress', 3), ('getPort', 3), ('getSoftLifetimeSeconds', 3), ('build', 3), ('getWho', 3), ('getAddress', 2), ('getSimpleName', 2), ('getBytes', 2), ('receive', 2), ('close', 2), ('getSaProposals', 2), ('getHardLifetimeSeconds', 2), ('getInboundTrafficSelectors', 2), ('getOutboundTrafficSelectors', 2), ('size', 2), ('countDown', 2), ('getInstrumentation', 2), ('buildIkeSaProposalWithNormalModeCipher', 2), ('createEapOnlySafeMethodsBuilder', 2), ('getSysctlDirs', 2), ('Random', 1), ('createPingSocket', 1), ('random', 1), ('InetSocketAddress', 1), ('getScopeId', 1), ('getScopedInterface', 1), ('flip', 1), ('buildChildSaProposalWithCombinedModeCipher', 1), ('setUpCertsBeforeClass', 1), ('buildIkeSaProposalWithCombinedModeCipher', 1), ('validNumericAddressesAndStringRepresentation', 1), ('invalidNumericAddresses', 1), ('createDirectChannel', 1), ('getHighestDirectReportRateLevel', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('getCount', 1), ('getNetworkType', 1), ('getTransportType', 1), ('getMetered', 1)]"	"[('CtsIkeTestCases', 8), ('CtsCameraTestCases', 3), ('CtsMediaTestCases', 2), ('CtsSecurityTestCases', 1), ('CtsSensorTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsUsageStatsTestCases', 1), ('CtsTelephonyTestCases', 1)]"	""	"7.4.5.2/C-4-1"	"""C-4-1] MUST simultaneously meet the above requirements on each network when the device is simultaneously connected to more than one network type. <h5 id="""	"07040502.670401"	"simultaneously ipv6"	"simultaneously ipv6"	""	""	"[('ipv6', 59), ('simultaneously', 9)]"	""	"[('[android.net.ipv6.cts.PingTest testLoopbackPing None]', 1), ('[android.net.ipsec.ike.cts.IkeIdentificationTest testIkeIpv6AddrIdentification CtsIkeTestCases]', 1), ('[android.net.cts.DnsTest testNativeDns None]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1), ('[android.media.cts.SoundPoolTest testAutoPauseResume CtsMediaTestCases]', 1), ('[android.net.cts.MacAddressTest testLinkLocalFromMacGeneration None]', 1), ('[android.net.cts.IpSecManagerTunnelTest testSecurityExceptionCreateTunnelInterfaceWithoutAppop None]', 1), ('[android.net.cts.IpSecManagerTunnelTest testSecurityExceptionBuildTunnelTransformWithoutAppop None]', 1), ('[android.net.cts.IpSecBaseTest currentTimeMillis None]', 1), ('[android.net.ipsec.ike.cts.ChildSessionParamsTest testBuildChildSessionParamsWithConfigReq CtsIkeTestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionParamsTest tearDownTestNetwork CtsIkeTestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionParamsTest testSetPcscfConfigRequests CtsIkeTestCases]', 1), ('[android.security.cts.KernelSettingsTest testNoIcmpRedirects CtsSecurityTestCases]', 1), ('[android.hardware.cts.SensorDirectReportTest isDirectChannelTypeSupported CtsSensorTestCases]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 CtsIkeTestCases]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testNetworkLoggingAndRetrieval None]', 1), ('[com.android.cts.net.ProcNetTest testProcSysctls None]', 1), ('[com.android.cts.net.ProcNetTest testAcceptRaRtInfoMinMaxPlen None]', 1), ('[com.android.cts.net.ProcNetTest testRouterSolicitations None]', 1), ('[android.net.cts.DnsResolverTest testCancelBeforeQuery None]', 1), ('[android.net.cts.DnsResolverTest testQueryForInetAddressIpv6 None]', 1), ('[android.net.cts.DnsResolverTest testQueryForInetAddressIpv6Inline None]', 1), ('[android.net.cts.DnsResolverTest testQueryCancelForInetAddress None]', 1), ('[android.net.cts.DnsResolverTest testPrivateDnsBypass None]', 1), ('[android.host.systemui.TvMicrophoneCaptureIndicatorTest testIndicatorShownWhileRecordingUsingBothApisSimultaneously None]', 1), ('[android.net.cts.ConnectivityManagerTest testOpenConnection None]', 1), ('[android.net.cts.ConnectivityManagerTest testCreateTcpKeepalive None]', 1), ('[android.media.cts.VideoCodecTest testBasic CtsMediaTestCases]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected CtsCameraTestCases]', 1), ('[android.permission.cts.FileSystemPermissionTest testProcQtaguidStatsSane CtsPermissionTestCases]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.cts.Ikev2VpnTest testStartVpnProfileNoPreviousConsent None]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault CtsUsageStatsTestCases]', 1), ('[android.net.cts.IpSecManagerTest testIkeOverUdpEncapSocket None]', 1), ('[android.net.cts.IpSecManagerTest testInterfaceCountersUdp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacMd5Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacMd5Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha1Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha1Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha256Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha256Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha384Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha384Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha512Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesCbcHmacSha512Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm64Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm64Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm96Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm96Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm128Tcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAesGcm128Udp6 None]', 1), ('[android.net.cts.IpSecManagerTest testCryptUdp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAuthUdp6 None]', 1), ('[android.net.cts.IpSecManagerTest testCryptTcp6 None]', 1), ('[android.net.cts.IpSecManagerTest testAuthTcp6 None]', 1), ('[com.android.cts.net.hostside.MixedModesTest registerBroadcastReceiver None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims CtsTelephonyTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecManagerTest.java', 22), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/ProcNetTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/ipv6/cts/PingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeIdentificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecManagerTunnelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionParamsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/MacAddressTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpSecBaseTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/KernelSettingsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/InetAddressesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageWriterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/systemui/src/android/host/systemui/TvMicrophoneCaptureIndicatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoCodecTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ListeningPortsApp/src/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/MixedModesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1)]"	"[('/android/net/cts/IpSecManagerTest.java', 23), ('/android/net/cts/DnsResolverTest.java', 6), ('/com/android/cts/net/ProcNetTest.java', 5), ('/android/net/ipv6/cts/PingTest.java', 3), ('/android/net/ipsec/ike/cts/IkeIdentificationTest.java', 3), ('/android/net/cts/DnsTest.java', 3), ('/android/net/cts/IpSecManagerTunnelTest.java', 3), ('/android/net/ipsec/ike/cts/ChildSessionParamsTest.java', 3), ('/android/net/ipsec/ike/cts/IkeSessionParamsTest.java', 3), ('/com/android/cts/deviceowner/NetworkLoggingTest.java', 3), ('/android/net/cts/ConnectivityManagerTest.java', 3), ('/android/hardware/camera2/cts/ImageReaderTest.java', 3), ('/android/net/cts/Ikev2VpnTest.java', 3), ('/android/media/cts/SoundPoolTest.java', 2), ('/android/net/cts/MacAddressTest.java', 2), ('/android/net/cts/IpSecBaseTest.java', 2), ('/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 2), ('/android/security/cts/KernelSettingsTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 2), ('/android/net/cts/InetAddressesTest.java', 2), ('/android/hardware/cts/SensorDirectReportTest.java', 2), ('/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 2), ('/android/hardware/camera2/cts/ImageWriterTest.java', 2), ('/android/host/systemui/TvMicrophoneCaptureIndicatorTest.java', 2), ('/android/media/cts/VideoCodecTest.java', 2), ('/android/permission/cts/FileSystemPermissionTest.java', 2), ('/android/app/usage/cts/NetworkUsageStatsTest.java', 2), ('/android/appsecurity/cts/listeningports/ListeningPortsTest.java', 2), ('/com/android/cts/net/hostside/MixedModesTest.java', 2), ('/android/telephony/cts/TelephonyManagerTest.java', 2)]"	"[('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[);         checkTransform(IPPROTO_TCP, IPV6_LOOPBACK, crypt, auth, null, false, 1, true);     }     ])', 5), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[);         checkTransform(IPPROTO_UDP, IPV6_LOOPBACK, crypt, auth, null, false, 1, true);     }     ])', 5), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[       checkTransform(IPPROTO_TCP, IPV6_LOOPBACK, null, null, authCrypt, false, 1, true);     }     ])', 3), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[       checkTransform(IPPROTO_UDP, IPV6_LOOPBACK, null, null, authCrypt, false, 1, true);     }     ])', 3), ('([7:/android/net/ipv6/cts/PingTest.java]:[ipv6]:[7]:method_text:[  }      /**      * Sends NUM_PACKETS random ping packets to ::1 and checks the replies.      */    ])', 1), (""([6:/android/net/ipv6/cts/PingTest.java]:[ipv6]:[6]:method_text:[  // Check closing the socket doesn't raise an exception.             Os.close(s);         }     } }])"", 1), ('([1:/android/net/ipsec/ike/cts/IkeIdentificationTest.java]:[ipv6]:[1]:method_text:[l;  @RunWith(AndroidJUnit4.class) public final class IkeIdentificationTest extends IkeTestBase {    ])', 1), ('([6:/android/net/ipsec/ike/cts/IkeIdentificationTest.java]:[ipv6]:[6]:method_text:[ication(IPV6_ADDRESS_LOCAL);         assertEquals(IPV6_ADDRESS_LOCAL, ikeId.ipv6Address);     }     ])', 1), ('([2:/android/net/cts/DnsTest.java]:[ipv6]:[2]:method_text:[     */     @SkipPresubmit(reason = ""IPv6 support may be missing on presubmit virtual hardware"")    ])', 1), ('([12:/android/net/cts/DnsTest.java]:[ipv6]:[12]:method_text:[ECONDS));         } finally {             mCm.unregisterNetworkCallback(callback);         }     } }])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[simultaneously]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);         }         mSoundPool.stop(stream);     } }])', 1), ('([1:/android/net/cts/MacAddressTest.java]:[ipv6]:[1]:method_text:[rtTrue(llv6.isLinkLocalAddress());         assertArrayEquals(inet6ll, llv6.getAddress());     }     ])', 1), ('([1:/android/net/cts/IpSecManagerTunnelTest.java]:[ipv6]:[1]:method_text:[Tunnel creation without appop"");         } catch (SecurityException expected) {         }     }     ])', 1), ('([1:/android/net/cts/IpSecManagerTunnelTest.java]:[ipv6]:[1]:method_text:[ dstOuter, encapPort, espPayload).getPacketBytes();     }      // Transport-in-Tunnel mode tests    ])', 1), ('([2:/android/net/cts/IpSecBaseTest.java]:[ipv6]:[2]:method_text:[uildIpSecTransform(InstrumentationRegistry.getContext(), spi, null, localAddr);         }     }     ])', 1), ('([2:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[ipv6]:[2]:method_text:[BOUND_V4_TS, OUTBOUND_V6_TS),                 childParams.getOutboundTrafficSelectors());     }     ])', 1), ('([12:/android/net/ipsec/ike/cts/ChildSessionParamsTest.java]:[ipv6]:[12]:method_text:[any expected address is not found in result         assertTrue(expectedAddresses.isEmpty());     } }])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[ipv6]:[1]:method_text:[tDown = new CountDownLatch(1);         NetworkLogsReceiver.mExceptionFromReceiver = null;     }     ])', 1), ('([4:/android/net/ipsec/ike/cts/IkeSessionParamsTest.java]:[ipv6]:[4]:method_text:[kConfig);         assertArrayEquals(IKE_PSK, ((IkeAuthPskConfig) remoteConfig).getPsk());     }     ])', 1), ('([5:/android/net/ipsec/ike/cts/IkeSessionParamsTest.java]:[ipv6]:[5]:method_text:[);             }         }         assertEquals(EXPECTED_PCSCF_SERVERS, resultAddresses);     }     ])', 1), ('([2:/android/security/cts/KernelSettingsTest.java]:[ipv6]:[2]:method_text:[ finally {             if (in != null) {                 in.close();             }         }     } }])', 1), ('([2:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[ipv6]:[2]:method_text:[ecutor,                 mIkeSessionCallback,                 mFirstChildSessionCallback);     }     ])', 1), ('([2:/android/net/cts/InetAddressesTest.java]:[ipv6]:[2]:method_text:[22]"",         };     }      @Parameters(method = ""validNumericAddressesAndStringRepresentation"")    ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[simultaneously]:[1]:method_text:[ChannelSecondary = null;         }          freeSharedMemory();         super.tearDown();     }     ])', 1), ('([3:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[ipv6]:[3]:method_text:[p);         verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);     }     ])', 1), (""([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[ipv6]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([5:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[ipv6]:[5]:method_text:[s addr) {         return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));     } }])', 1), ('([6:/com/android/cts/net/ProcNetTest.java]:[ipv6]:[6]:method_text:[ Checks that SPI default timeouts are overridden, and set to a reasonable length of time      */    ])', 1), ('([1:/com/android/cts/net/ProcNetTest.java]:[ipv6]:[1]:method_text:[  * Verify that accept_ra_rt_info_{min,max}_plen exists and is set to the expected value      */    ])', 1), ('([2:/com/android/cts/net/ProcNetTest.java]:[ipv6]:[2]:method_text:[nd verify that router_solicitation_max_interval exists and is in an acceptable interval.      */    ])', 1), ('([3:/com/android/cts/net/ProcNetTest.java]:[ipv6]:[3]:method_text:[rue(lowerBoundSec <= interval);             assertTrue(interval <= upperBoundSec);         }     } }])', 1), ('([1:/android/hardware/camera2/cts/ImageWriterTest.java]:[simultaneously]:[1]:method_text:[. This validates the ImageWriter explicit buffer copy      * interface.</li>      * </p>      */    ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[ipv6]:[1]:method_text:[solver.DnsException error) {             mErrorMsg = mMsg + error.getMessage();         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[ipv6]:[2]:method_text:[ForInetAddressIpv6() throws Exception {         doTestQueryForInetAddressIpv6(mExecutor);     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[ipv6]:[2]:method_text:[ssIpv6Inline() throws Exception {         doTestQueryForInetAddressIpv6(mExecutorInline);     }     ])', 1), ('([4:/android/net/cts/DnsResolverTest.java]:[ipv6]:[4]:method_text:[         assertTrue(msg + "" returned Ipv4 results"", !callback.hasIpv4Answer());         }     }     ])', 1), ('([2:/android/net/cts/DnsResolverTest.java]:[ipv6]:[2]:method_text:[   queryV6 ? !callback.hasIpv4Answer() : !callback.hasIpv6Answer());             }         }     } }])', 1), ('([1:/android/host/systemui/TvMicrophoneCaptureIndicatorTest.java]:[simultaneously]:[1]:method_text:[              collectWindowStates(window.getWindowContainer(), out);             }         }     } }])', 1), ('([2:/android/net/cts/ConnectivityManagerTest.java]:[ipv6]:[2]:method_text:[in the current API version"");         } catch (UnsupportedOperationException expected) {}     }     ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[ipv6]:[1]:method_text:[fter iterations.      */     @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")    ])', 1), ('([1:/android/media/cts/VideoCodecTest.java]:[simultaneously]:[1]:method_text:[                         "" for bitrate "" + TEST_BITRATES_SET[i]);             }         }     }     ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[simultaneously]:[1]:method_text:[ }      @Override     public void tearDown() throws Exception {         super.tearDown();     }     ])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[simultaneously]:[2]:method_text:[.      */     private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer); }])', 1), ('([1:/android/permission/cts/FileSystemPermissionTest.java]:[ipv6]:[1]:method_text:[ assertFileOwnedBy(f, ""root"");         assertFileOwnedByGroup(f, ""root"");     }      @MediumTest    ])', 1), ('([2:/android/net/cts/Ikev2VpnTest.java]:[ipv6]:[2]:method_text:[EST_MTU, profile.getMaxMtu());         assertFalse(profile.isRestrictedToTestNetworks());     }     ])', 1), ('([7:/android/net/cts/Ikev2VpnTest.java]:[ipv6]:[7]:method_text:[ != null) {                 tnm.teardownTestNetwork(testNetwork);             }         }     }     ])', 1), ('([1:/android/app/usage/cts/NetworkUsageStatsTest.java]:[ipv6]:[1]:method_text:[er) -> telephonyManager.getSubscriberId());         }         return """";     }      @AppModeFull    ])', 1), ('([2:/android/appsecurity/cts/listeningports/ListeningPortsTest.java]:[ipv6]:[2]:method_text:[e file and the boolean      * values are received as parameters from the host side test.      */    ])', 1), ('([3:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[3]:method_text:[, 96);     //     checkTransform(IPPROTO_TCP, IPV4_LOOPBACK, crypt, auth, true, 1000);     // }     ])', 1), ('([1:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[1]:method_text:[       checkTransform(IPPROTO_UDP, IPV6_LOOPBACK, crypt, auth, null, false, 1000, false);     }     ])', 1), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[);         checkTransform(IPPROTO_UDP, IPV6_LOOPBACK, crypt, null, null, false, 1, true);     }     ])', 1), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[e);         checkTransform(IPPROTO_UDP, IPV6_LOOPBACK, null, auth, null, false, 1, true);     }     ])', 1), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[);         checkTransform(IPPROTO_TCP, IPV6_LOOPBACK, crypt, null, null, false, 1, true);     }     ])', 1), ('([2:/android/net/cts/IpSecManagerTest.java]:[ipv6]:[2]:method_text:[e);         checkTransform(IPPROTO_TCP, IPV6_LOOPBACK, null, auth, null, false, 1, true);     }     ])', 1), ('([1:/com/android/cts/net/hostside/MixedModesTest.java]:[simultaneously]:[1]:method_text:[etworks.      */     @RequiredProperties({DATA_SAVER_MODE, BATTERY_SAVER_MODE, METERED_NETWORK})    ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[simultaneously]:[2]:method_text:[or a valid MAC address      * if only a WiFi device. At least one of them must be valid.      */    ])', 1)]"	""	""	""	""	""
"256:742768) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-3"	Not testable	"[('android.cts.statsd.atom.AtomTestCase', 1)]"	"[('setUp', 2), ('hashCode', 1)]"	""	""	"9.8.10/C-1-3"	"""C-1-3] MUST generate requested reports containing at least the following information: TelephonyDebugService dump TelephonyRegistry dump WifiService dump ConnectivityService dump A dump of the calling package's CarrierService instance (if bound) Radio log buffer """	"09081000.670103"	"TelephonyDebugService"	"TelephonyDebugService"	""	""	"[('TelephonyDebugService', 1)]"	""	"[('[android.cts.statsd.atom.AtomTestCase getReportList None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/AtomTestCase.java', 1)]"	"[('/android/cts/statsd/atom/AtomTestCase.java', 2)]"	"[('([2:/android/cts/statsd/atom/AtomTestCase.java]:[TelephonyDebugService]:[2]:method_text:[estamp is not truncated"")                 .that(timestampNs % fiveMinutesInNs).isEqualTo(0);     } }])', 1)]"	""	""	""	""	""
