"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-3-2"	""	"[('android.nfc.cts.NfcPreferredPaymentTest', 8)]"	"[('supportsHardware', 4), ('getContext', 4), ('getPackageManager', 2), ('setUp', 2), ('getContentResolver', 2), ('flattenToString', 2), ('tearDown', 2)]"	"[('CtsNfcTestCases', 8)]"	""	"3.2.3.5/C-3-2"	"""C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK. If device implementations report android.hardware.nfc, they: """	"03020305.670302"	"Payment android.nfc.cardemulation.action.ACTION Service android.hardware.nfc ACTION_CHANGE_DEFAULT"	"Payment Service"	""	""	"[('Payment', 4), ('Service', 4)]"	"nfc"	"[('[android.nfc.cts.NfcPreferredPaymentTest testAidsForPreferredPaymentService CtsNfcTestCases]', 2), ('[android.nfc.cts.NfcPreferredPaymentTest testRouteDestinationForPreferredPaymentService CtsNfcTestCases]', 2), ('[android.nfc.cts.NfcPreferredPaymentTest testDescriptionForPreferredPaymentService CtsNfcTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/nfc/src/android/nfc/cts/NfcPreferredPaymentTest.java', 8)]"	"[('/android/nfc/cts/NfcPreferredPaymentTest.java', 10)]"	"[('([3:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Payment]:[3]:method_text:[void tearDown() throws Exception {     }      /** Tests getAidsForPreferredPaymentService API */    ])', 1), ('([5:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Payment]:[5]:method_text:[tion "" + e);         }     }      /** Tests getRouteDestinationForPreferredPaymentService API */    ])', 1), ('([5:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Payment]:[5]:method_text:[Exception "" + e);         }     }      /** Tests getDescriptionForPreferredPaymentService API */    ])', 1), ('([4:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Payment]:[4]:method_text:[);         } catch (Exception e) {             fail(""Unexpected Exception "" + e);         }     }  }])', 1), ('([5:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Service]:[5]:method_text:[void tearDown() throws Exception {     }      /** Tests getAidsForPreferredPaymentService API */    ])', 1), ('([4:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Service]:[4]:method_text:[tion "" + e);         }     }      /** Tests getRouteDestinationForPreferredPaymentService API */    ])', 1), ('([4:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Service]:[4]:method_text:[Exception "" + e);         }     }      /** Tests getDescriptionForPreferredPaymentService API */    ])', 1), ('([3:/android/nfc/cts/NfcPreferredPaymentTest.java]:[Service]:[3]:method_text:[);         } catch (Exception e) {             fail(""Unexpected Exception "" + e);         }     }  }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-5-2"	""	"[('android.bluetooth.cts.AdvertiseDataTest', 10), ('android.bluetooth.cts.AdvertiseSettingsTest', 5), ('android.bluetooth.cts.AdvertiseCallbackTest', 3), ('android.bluetooth.cts.ScanRecordTest', 1), ('android.bluetooth.cts.ScanSettingsTest', 1)]"	"[('setUp', 1), ('Builder', 1)]"	"[('CtsBluetoothTestCases', 20)]"	""	"3.2.3.5/C-5-2"	"C-5-2] MUST honor the ‘n.REQUEST_DISCOVERABLE’ intent and show a system activity that requests discoverable mode. If device implementations support the DND feature, they: 2.3.5/C-5-2"""	"03020305.670502"	"advertise REQUEST_DISCOVERABLE"	"advertise"	"DND"	""	"[('advertise', 20)]"	"bluetooth"	"[('[android.bluetooth.cts.AdvertiseCallbackTest MockAdvertiser CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest testAdvertiseSuccess CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest testAdvertiseFailure CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanRecordTest testParser CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testEmptyData CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testEmptyServiceUuid CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testEmptyManufacturerData CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testEmptyServiceData CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testServiceUuid CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testManufacturerData CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testServiceData CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testIncludeTxPower CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseDataTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDefaultSettings CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testIllegalTimeout CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseDataTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseSettingsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseCallbackTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanRecordTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanSettingsTest.java', 1)]"	"[('/android/bluetooth/cts/AdvertiseDataTest.java', 11), ('/android/bluetooth/cts/AdvertiseSettingsTest.java', 6), ('/android/bluetooth/cts/AdvertiseCallbackTest.java', 4), ('/android/bluetooth/cts/ScanRecordTest.java', 2), ('/android/bluetooth/cts/ScanSettingsTest.java', 2)]"	"[('([12:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[advertise]:[12]:method_text:[vate final BleAdvertiseCallback mAdvertiseCallback = new BleAdvertiseCallback();      @SmallTest    ])', 1), ('([7:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[advertise]:[7]:method_text:[_TYPE_SUCCESS;         mMockAdvertiser.startAdvertise(mAdvertiseCallback);     }      @SmallTest    ])', 1), ('([34:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[advertise]:[34]:method_text:[rtEquals(AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED, error);             }         }     } }])', 1), ('([1:/android/bluetooth/cts/ScanRecordTest.java]:[advertise]:[1]:method_text:[).get(uuid2));         TestUtils.assertArrayEquals(serviceData, data.getServiceData(uuid2));     } }])', 1), ('([8:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[8]:method_text:[oid setUp() {         mAdvertiseDataBuilder = new AdvertiseData.Builder();     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[sEmpty());         assertTrue(dataFromParcel.getServiceUuids().isEmpty());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[ceName());         assertTrue(dataFromParcel.getServiceUuids().isEmpty());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[yte[0], dataFromParcel.getManufacturerSpecificData().get(manufacturerId));     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[assertArrayEquals(new byte[0], dataFromParcel.getServiceData().get(uuid));     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[d));         assertTrue(dataFromParcel.getServiceUuids().contains(uuid2));     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[        dataFromParcel.getManufacturerSpecificData().get(manufacturerId));     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[assertArrayEquals(serviceData, dataFromParcel.getServiceData().get(uuid));     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[4]:method_text:[cel);         assertEquals(dataFromParcel.getIncludeTxPowerLevel(), true);     }      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseDataTest.java]:[advertise]:[2]:method_text:[ata = new AdvertiseData.Builder().build();         assertEquals(0, data.describeContents());     } }])', 1), ('([3:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[advertise]:[3]:method_text:[rtiseSettings}.  */ public class AdvertiseSettingsTest extends AndroidTestCase {      @SmallTest    ])', 1), ('([6:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[advertise]:[6]:method_text:[s(0, settings.getTimeout());         assertTrue(settings.isConnectable());     }      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[advertise]:[2]:method_text:[s.Builder().build();         assertEquals(0, settings.describeContents());     }      @SmallTest    ])', 1), ('([13:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[advertise]:[13]:method_text:[gsFromParcel.getTimeout());         assertFalse(settings.isConnectable());     }      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[advertise]:[2]:method_text:[s"");         } catch (IllegalArgumentException e) {             // nothing to do.         }      } }])', 1), ('([1:/android/bluetooth/cts/ScanSettingsTest.java]:[advertise]:[1]:method_text:[Millis());         assertEquals(ScanSettings.SCAN_MODE_LOW_LATENCY, settings.getScanMode());     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-5-1"	""	"[('android.bluetooth.cts.BluetoothLeScanTest', 7), ('android.bluetooth.cts.BasicAdapterTest', 6), ('android.bluetooth.cts.LeL2capSocketTest', 5), ('android.bluetooth.cts.AdvertiseSettingsTest', 5), ('android.bluetooth.cts.ScanCallbackTest', 4), ('android.bluetooth.cts.ScanSettingsTest', 4), ('android.bluetooth.cts.AdvertiseCallbackTest', 2), ('android.bluetooth.cts.HearingAidProfileTest', 2)]"	"[('setUp', 5), ('getContext', 3), ('getAdapter', 2), ('getDefaultAdapter', 2), ('MockScanner', 1), ('BleScanCallback', 1)]"	"[('CtsBluetoothTestCases', 35)]"	""	"3.2.3.5/C-5-1"	"C-5-1] MUST honor the ‘anmdroid.bluetooth.adapter.action.REQUEST_ENABLE’ intent and show a system activity to allow the user to turn on Bluetooth."	"03020305.670501"	"enable settings anmdroid.bluetooth.adapter.action.REQUEST dialog REQUEST_ENABLE"	"settings dialog enable"	"bluetooth"	""	"[('settings', 20), ('enable', 15)]"	"bluetooth"	"[('[android.bluetooth.cts.BluetoothLeScanTest isEnabled CtsBluetoothTestCases]', 2), ('[android.bluetooth.cts.BluetoothLeScanTest testScanFilter CtsBluetoothTestCases]', 2), ('[android.bluetooth.cts.ScanCallbackTest testScanSuccess CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testBatchScans CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testScanFail CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest MockAdvertiser CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest testAdvertiseFailure CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeScanTest testOpportunisticScan CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeScanTest testBatchScan CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BluetoothLeScanTest testStartScanPendingIntent CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.LeL2capSocketTest isEnabled CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.LeL2capSocketTest testOpenInsecureLeL2capServerSocketOnce CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.LeL2capSocketTest testOpenInsecureLeL2capServerSocketRepeatedly CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.LeL2capSocketTest testOpenSecureLeL2capServerSocketOnce CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.LeL2capSocketTest testOpenSecureLeL2capServerSocketRepeatedly CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDefaultSettings CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseSettingsTest testIllegalTimeout CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testDefaultSettings CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_checkBluetoothAddress CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_enableDisable CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_getAddress CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_setName_getName CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_getBondedDevices CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_listenUsingRfcommWithServiceRecord CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest isBleSupported CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.HearingAidProfileTest test_getConnectionStateChangedIntent CtsBluetoothTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BluetoothLeScanTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/LeL2capSocketTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseSettingsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanCallbackTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanSettingsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseCallbackTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/HearingAidProfileTest.java', 2)]"	"[('/android/bluetooth/cts/BluetoothLeScanTest.java', 9), ('/android/bluetooth/cts/BasicAdapterTest.java', 7), ('/android/bluetooth/cts/LeL2capSocketTest.java', 6), ('/android/bluetooth/cts/AdvertiseSettingsTest.java', 6), ('/android/bluetooth/cts/ScanCallbackTest.java', 5), ('/android/bluetooth/cts/ScanSettingsTest.java', 5), ('/android/bluetooth/cts/AdvertiseCallbackTest.java', 3), ('/android/bluetooth/cts/HearingAidProfileTest.java', 3)]"	"[('([2:/android/bluetooth/cts/LeL2capSocketTest.java]:[enable]:[2]:method_text:[(""IOException while opening and closing server socket: "" + exp);         }     }      @SmallTest    ])', 3), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[settings]:[1]:method_text:[canner();     private BleScanCallback mMockScanCallback = new BleScanCallback();      @SmallTest    ])', 1), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[settings]:[1]:method_text:[kScanner.startScan(new ScanSettings.Builder().build(), mMockScanCallback);     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/ScanCallbackTest.java]:[settings]:[4]:method_text:[N_TYPE_BATCH;         mMockScanner.startScan(settings, mMockScanCallback);     }      @SmallTest    ])', 1), ('([8:/android/bluetooth/cts/ScanCallbackTest.java]:[settings]:[8]:method_text:[ != SCAN_TYPE_FAIL) {                 fail(""scan should not fail"");             }         }      } }])', 1), ('([1:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[settings]:[1]:method_text:[vate final BleAdvertiseCallback mAdvertiseCallback = new BleAdvertiseCallback();      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[settings]:[2]:method_text:[rtEquals(AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED, error);             }         }     } }])', 1), ('([3:/android/bluetooth/cts/BluetoothLeScanTest.java]:[enable]:[3]:method_text:[t case for BLE scans. Checks BLE scan timestamp is within correct range.      */     @MediumTest    ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeScanTest.java]:[enable]:[1]:method_text:[ore explicit scan. //     * TODO(b/70865144): re-enable this test. //     */ //    @MediumTest //   ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeScanTest.java]:[settings]:[1]:method_text:[t case for BLE scans. Checks BLE scan timestamp is within correct range.      */     @MediumTest    ])', 1), ('([5:/android/bluetooth/cts/BluetoothLeScanTest.java]:[settings]:[5]:method_text:[ore explicit scan. //     * TODO(b/70865144): re-enable this test. //     */ //    @MediumTest //   ])', 1), ('([10:/android/bluetooth/cts/BluetoothLeScanTest.java]:[settings]:[10]:method_text:[ults().isEmpty()); //    }      /**      * Test case for BLE Batch scan.      */     @MediumTest    ])', 1), ('([5:/android/bluetooth/cts/BluetoothLeScanTest.java]:[settings]:[5]:method_text:[   }      /**      * Test case for starting a scan with a PendingIntent.      */     @MediumTest    ])', 1), ('([6:/android/bluetooth/cts/BluetoothLeScanTest.java]:[settings]:[6]:method_text:[BatchScanSupported() {         return mBluetoothAdapter.isOffloadedScanBatchingSupported();     }  }])', 1), ('([2:/android/bluetooth/cts/LeL2capSocketTest.java]:[enable]:[2]:method_text:[(mAdapter, mContext));         mAdapter = null;         super.tearDown();     }       @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/LeL2capSocketTest.java]:[enable]:[2]:method_text:[{             fail(""IOException while opening and closing server socket: "" + exp);         }     } }])', 1), ('([3:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[settings]:[3]:method_text:[rtiseSettings}.  */ public class AdvertiseSettingsTest extends AndroidTestCase {      @SmallTest    ])', 1), ('([10:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[settings]:[10]:method_text:[s(0, settings.getTimeout());         assertTrue(settings.isConnectable());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[settings]:[4]:method_text:[s.Builder().build();         assertEquals(0, settings.describeContents());     }      @SmallTest    ])', 1), ('([15:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[settings]:[15]:method_text:[gsFromParcel.getTimeout());         assertFalse(settings.isConnectable());     }      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[settings]:[2]:method_text:[s"");         } catch (IllegalArgumentException e) {             // nothing to do.         }      } }])', 1), ('([3:/android/bluetooth/cts/ScanSettingsTest.java]:[settings]:[3]:method_text:[@link ScanSettings}.  */ public class ScanSettingsTest extends AndroidTestCase {      @SmallTest    ])', 1), ('([10:/android/bluetooth/cts/ScanSettingsTest.java]:[settings]:[10]:method_text:[anResultType());         assertEquals(0, settings.getReportDelayMillis());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/ScanSettingsTest.java]:[settings]:[4]:method_text:[s.Builder().build();         assertEquals(0, settings.describeContents());     }      @SmallTest    ])', 1), ('([13:/android/bluetooth/cts/ScanSettingsTest.java]:[settings]:[13]:method_text:[Millis());         assertEquals(ScanSettings.SCAN_MODE_LOW_LATENCY, settings.getScanMode());     } }])', 1), ('([2:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[2]:method_text:[    ""DE:F0:FE:DC:B8:76""));     }      /** Checks enable(), disable(), getState(), isEnabled() */    ])', 1), ('([2:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[2]:method_text:[ext));             assertTrue(BTAdapterUtils.enableAdapter(adapter, mContext));         }     }     ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[1]:method_text:[ext));          assertTrue(BluetoothAdapter.checkBluetoothAddress(adapter.getAddress()));     }     ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[1]:method_text:[));         mIsAdapterNameChanged = false;         assertEquals(name, adapter.getName());     }     ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[1]:method_text:[       assertTrue(BluetoothAdapter.checkBluetoothAddress(device.getAddress()));         }     }     ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[enable]:[1]:method_text:[                mAdapterNameChangedlock.unlock();                 }             }         }     }; }])', 1), ('([6:/android/bluetooth/cts/HearingAidProfileTest.java]:[enable]:[6]:method_text:[Basic test case to make sure that Hearing Aid Profile Proxy can connect.      */     @MediumTest    ])', 1), ('([2:/android/bluetooth/cts/HearingAidProfileTest.java]:[enable]:[2]:method_text:[ t) {         try {             Thread.sleep(t);         } catch (InterruptedException e) {}     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-2-6"	""	"[('android.content.cts.AvailableIntentsTest', 6), ('android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest', 4), ('android.content.cts.ContentProviderTest', 4), ('android.content.cts.IntentTest', 2)]"	""	"[('CtsContentTestCases', 12), ('CtsShortcutManagerTestCases', 4)]"	""	"3.2.3.5/C-2-6"	"""C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages. """	"03020305.670206"	"SMS android.intent.action.VIEW android.intent.action.SENDTO SENDTO"	""	"VIEW"	""	"[('SMS', 10), ('android.intent.action.VIEW', 6)]"	"content"	"[('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testManifestDefinition CtsShortcutManagerTestCases]', 2), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest testDynamicIntents CtsShortcutManagerTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testShowCallSettings CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testShowRespondViaSmsSettings CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testChangeDefaultSmsApplication CtsContentTestCases]', 2), ('[android.content.cts.IntentTest testUris CtsContentTestCases]', 2), ('[android.content.cts.ContentProviderTest testAttachInfo CtsContentTestCases]', 2), ('[android.content.cts.ContentProviderTest testAccessReadPermission CtsContentTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java', 2)]"	"[('/android/content/cts/AvailableIntentsTest.java', 8), ('/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 6), ('/android/content/cts/ContentProviderTest.java', 6), ('/android/content/cts/IntentTest.java', 4)]"	"[('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[android.intent.action.VIEW]:[1]:method_text:[ assertEquals(0, i.getFlags());                      })                     ;         });     }     ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[android.intent.action.VIEW]:[2]:method_text:[AG_ACTIVITY_NEW_DOCUMENT, i.getFlags());                     })             ;         });     }     ])', 2), ('([2:/android/content/cts/AvailableIntentsTest.java]:[SMS]:[2]:method_text:[st ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS, it will display the respond by SMS preferences.      */    ])', 2), ('([2:/android/content/cts/AvailableIntentsTest.java]:[SMS]:[2]:method_text:[ assertCanBeHandled(intent);         }     }      /**      * Test start camera by intent      */    ])', 2), ('([2:/android/content/cts/AvailableIntentsTest.java]:[SMS]:[2]:method_text:[   assertCanBeHandled(new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT));         }     }     ])', 2), ('([3:/android/content/cts/IntentTest.java]:[android.intent.action.VIEW]:[3]:method_text:[ent + "" to android-app: uri"",                     androidAppSchemeUri, genUri);         }     }     ])', 2), ('([1:/android/content/cts/ContentProviderTest.java]:[SMS]:[1]:method_text:[);         assertEquals(info1.writePermission, mockContentProvider.getWritePermission());     }     ])', 2), ('([1:/android/content/cts/ContentProviderTest.java]:[SMS]:[1]:method_text:[ReadPermissionWrapper(null);         assertNull(mockContentProvider.getReadPermission());     }     ])', 2)]"	""	""	""	""	""
