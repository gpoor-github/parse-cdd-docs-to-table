Section	section_id	req_id	Test Availability	class_def	method	module	method_text	full_key	requirement	key_as_number	search_terms	manual_search_terms	not_search_terms	not_files	matched_terms	search_roots	qualified_method	max_matches	file_name	matched_files	methods_string	urls	protected
3_2_3_5_	3.2.3.5	C-2-6		[('com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest', 12), ('com.android.cts.devicepolicy.DeviceOwnerTest', 3), ('com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest', 2), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 2), ('com.android.cts.devicepolicy.ManagedProfileTest', 1), ('com.android.cts.managedprofile.LauncherAppsTest', 1), ('com.android.cts.devicepolicy.ManagedProfileProvisioningTest', 1)]	[('pressHome', 6), ('getContext', 4), ('setUp', 4), ('getDevice', 3), ('setupCrossProfileApps', 2), ('wakeupDeviceAndPressHome', 2), ('getInstrumentation', 2), ('wakeUp', 2), ('pressMenu', 2), ('readTargetUser', 2), ('getArguments', 2), ('addDynamicShortcuts', 1), ('getResources', 1), ('build', 1), ('tearDown', 1)]			3.2.3.5/C-2-6	"C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages. "	03020305.670206	android.intent.action.VIEW SENDTO 3.2.3.5/C-2-6 SMS VIEW android.intent.action.SENDTO 3.2.3.5 C-2-6				[('VIEW', 17), ('SMS', 5)]	devicepolicy	None:com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest.testCanStartMainActivity None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartActivityByIntentWithInteractAcrossProfilesPermission None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartActivityByIntentWithInteractAcrossUsersPermission None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartActivityByIntentWithInteractAcrossUsersFullPermission None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCannotStartActivityWithImplicitIntent None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartMainActivityByIntent None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartMainActivityByIntent_withOptionsBundle None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartNonMainActivityByIntent None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testStartActivityIntent_sameTaskByDefault None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartMainActivityByComponent None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartNonMainActivityByComponent None:com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest.testCanStartNotExportedActivityByIntent None:com.android.cts.devicepolicy.ManagedProfileTest.testCannotCallMethodsOnParentProfile None:com.android.cts.devicepolicy.DeviceOwnerTest.removeTestUsers None:com.android.cts.devicepolicy.DeviceOwnerTest.testDefaultSmsApplication None:com.android.cts.devicepolicy.DeviceOwnerTest.testProxyPacProxyTest None:com.android.cts.devicepolicy.ManagedProfileProvisioningTest.testWebview None:com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest.removeTestUsers None:com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest.testPersonalAppsSuspensionSms		/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java	[('/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java', 13), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 5), ('/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java', 3), ('/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 3), ('/com/android/cts/devicepolicy/ManagedProfileTest.java', 2), ('/com/android/cts/managedprofile/LauncherAppsTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java', 2)]	[('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[d in wrong user",                String.valueOf(mUserSerialNumber), textView.getText());    }   ])', 3), ('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[fail("unable to start main activity via CrossProfileApps#startActivity: " + e);        }    }   ])', 3), ('([2:/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java]:[VIEW]:[2]:method_text:[TargetUser);    }    @After    public void pressHome() {        mDevice.pressHome();    }   ])', 1), ('([6:/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java]:[VIEW]:[6]:method_text:[,                String.valueOf(mUserSerialNumber),                textView.getText());    }   ])', 1), ('([4:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[4]:method_text:[ @After    public void pressHome() throws RemoteException {        mDevice.pressHome();    }   ])', 1), ('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[ in wrong user",                String.valueOf(mUserSerialNumber), textView.getText());    }   ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[1]:method_text:[               nonMainActivityImplicitIntent, mTargetUser, /* callingActivity= */ null));    }   ])', 1), ('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[rify that the tasks     * are the same using the log messages printed by each activity.     */   ])', 1), ('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[ctivity(Intent, UserHandle, Activity)}. This can then be     * used by host-side tests.     */   ])', 1), ('([5:/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java]:[VIEW]:[5]:method_text:[("unable to start non-main activity via CrossProfileApps#startActivity: " + e);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[SMS]:[1]:method_text:[ight be useful for different kinds    // of tests (same applies to ComponentDisablingActivity).   ])', 1), ('([1:/com/android/cts/managedprofile/LauncherAppsTest.java]:[VIEW]:[1]:method_text:[ngletonList(s1));        shortcutManager.updateShortcuts(Collections.singletonList(s1));    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[SMS]:[5]:method_text:[tchUser(USER_SYSTEM);            removeTestUsers();        }        super.tearDown();    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[SMS]:[5]:method_text:[estSetDefaultSmsApplication");        getDevice().uninstallPackage(SIMPLE_SMS_APP_PKG);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[VIEW]:[1]:method_text:[S: WebView unsupported", mIsWatch);        executeDeviceOwnerTest("proxy.PacProxyTest");    }   ])', 1), ('([3:/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java]:[VIEW]:[3]:method_text:[ofile_accountCopy", mParentUserId);        mProfileUserId = getFirstManagedProfileUserId();    }}])', 1), ('([5:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[SMS]:[5]:method_text:[                           mUserId, DEVICE_ADMIN_PKG + "/" + ADMIN_RECEIVER_TEST_CLASS));    }   ])', 1), ('([13:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[SMS]:[13]:method_text:[          "cmd role remove-role-holder --user %d android.app.role.SMS %s", userId, app));    }   ])', 1)]		
3_2_3_5_	3.2.3.5	C-3-2						3.2.3.5/C-3-2	"C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK. If device implementations report android.hardware.nfc; they: "	03020305.670302	android.hardware.nfc C-3-2 3.2.3.5 android.nfc.cardemulation.action.ACTION ACTION_CHANGE_DEFAULT 3.2.3.5/C-3-2					devicepolicy							
3_2_3_5_	3.2.3.5	C-5-1						3.2.3.5/C-5-1	"C-5-1] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_ENABLE’ intent and show a system activity to allow the user to turn on Bluetooth. "	03020305.670501	REQUEST_ENABLE 3.2.3.5/C-5-1 3.2.3.5 android.bluetooth.adapter.action.REQUEST C-5-1					devicepolicy							
3_2_3_5_	3.2.3.5	C-5-2						3.2.3.5/C-5-2	"C-5-2] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_DISCOVERABLE’ intent and show a system activity that requests discoverable mode. If device implementations support the DND feature; they: "	03020305.670502	3.2.3.5 android.bluetooth.adapter.action.REQUEST REQUEST_DISCOVERABLE C-5-2 3.2.3.5/C-5-2 DND					devicepolicy							
3_2_3_5_	3.2.3.5	C-6-1						3.2.3.5/C-6-1	"C-6-1] MUST implement an activity that would respond to the intent ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS; which for implementations with UI_MODE_TYPE_NORMAL it MUST be an activity where the user can grant or deny the app access to DND policy configurations. If device implementations allow users to use third-party input methods on the device; they: "	03020305.670601	ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS MODE_TYPE_NORMAL 3.2.3.5/C-6-1 C-6-1 3.2.3.5 DND					devicepolicy							
3_2_3_5_	3.2.3.5	C-7-1						3.2.3.5/C-7-1	"C-7-1] MUST provide a user-accessible mechanism to add and configure third-party input methods in response to the android.settings.INPUT_METHOD_SETTINGS intent. If device implementations support third-party accessibility services; they: "	03020305.670701	android.settings.INPUT 3.2.3.5 INPUT_METHOD_SETTINGS C-7-1 3.2.3.5/C-7-1					devicepolicy							
3_2_3_5_	3.2.3.5	C-8-1						3.2.3.5/C-8-1	"C-8-1] MUST honor the android.settings.ACCESSIBILITY_SETTINGS intent to provide a user-accessible mechanism to enable and disable the third-party accessibility services alongside the preloaded accessibility services. If device implementations include support for Wi-Fi Easy Connect and expose the functionality to third-party apps; they: "	03020305.670801	C-8-1 android.settings.ACCESSIBILITY ACCESSIBILITY_SETTINGS 3.2.3.5 3.2.3.5/C-8-1					devicepolicy							
3_2_3_5_	3.2.3.5	C-9-1						3.2.3.5/C-9-1	"C-9-1] MUST implement the Settings#ACTION_PROCESS_WIFI_EASY_CONNECT_URI Intent APIs as described in the SDK documentation. If device implementations provide the data saver mode; they: *"	03020305.670901	3.2.3.5 3.2.3.5/C-9-1 ACTION_PROCESS_WIFI_EASY_CONNECT_URI C-9-1					devicepolicy							
3_2_3_5_	3.2.3.5	C-11-1		[('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 6), ('com.android.cts.devicepolicy.ManagedProfilePasswordTest', 5), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTest', 5), ('com.android.cts.devicepolicy.ManagedProfileRingtoneTest', 4), ('com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest', 3), ('com.android.cts.passwordcomplexity.GetPasswordComplexityTest', 2), ('com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest', 2), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25', 1), ('com.android.cts.devicepolicy.ManagedProfileTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('com.android.cts.devicepolicy.MixedDeviceOwnerTest', 1), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 1), ('com.android.cts.devicepolicy.ManagedProfileContactsTest', 1), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 1)]	[('getDevice', 25), ('tearDown', 7), ('setUp', 5), ('getPasswordComplexity', 3), ('getInstrumentation', 3), ('getContext', 3), ('clearScreenLock', 2), ('getName', 2), ('getPasswordComplexity_pattern4_low', 1), ('getPackage', 1), ('getUiAutomation', 1), ('getUserId', 1)]			3.2.3.5/C-11-1	"C-11-1] MUST have an activity that handles the Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS intent but MAY implement it as a no-op. If device implementations declare the support for camera via android.hardware.camera.any they: "	03020305.671101	ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET android.hardware.camera.any Settings.ACTION TINGS 3.2.3.5/C-11-1 3.2.3.5 C-11-1				[('TINGS', 33), ('Settings.ACTION', 1)]	devicepolicy	None:com.android.cts.devicepolicy.ManagedProfileRingtoneTest.testRingtoneSync None:com.android.cts.devicepolicy.ManagedProfileRingtoneTest.testRingtoneSyncAutoDisableRingtone None:com.android.cts.devicepolicy.ManagedProfileRingtoneTest.testRingtoneSyncAutoDisableNotification None:com.android.cts.devicepolicy.ManagedProfileRingtoneTest.testRingtoneSyncAutoDisableAlarm None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testSetKeyGrant None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testLockTaskAfterReboot_tryOpeningSettings None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testResetPasswordDeprecated None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testIsDeviceOrganizationOwnedWithManagedProfile None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testSecondaryLockscreen None:com.android.cts.devicepolicy.ManagedProfilePasswordTest.testResetPasswordTokenUsableAfterClearingLock None:com.android.cts.devicepolicy.ManagedProfilePasswordTest.testIsUsingUnifiedPassword None:com.android.cts.devicepolicy.ManagedProfilePasswordTest.testUnlockWorkProfile_deviceWidePassword None:com.android.cts.devicepolicy.ManagedProfilePasswordTest.testRebootDevice_unifiedPassword None:com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest.testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent None:com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest.dropShellPermissionIdentity None:com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest.testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent None:com.android.cts.devicepolicy.ManagedProfileTest.testSettingsIntents None:com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest.disableService None:com.android.cts.devicepolicy.MixedManagedProfileOwnerTest.removeTestUsers None:com.android.cts.devicepolicy.MixedManagedProfileOwnerTest.testAlwaysOnVpnUnsupportedPackageReplaced None:com.android.cts.devicepolicy.MixedManagedProfileOwnerTest.testSetSystemSetting None:com.android.cts.devicepolicy.MixedManagedProfileOwnerTest.testLockTaskAfterReboot_tryOpeningSettings None:com.android.cts.devicepolicy.MixedManagedProfileOwnerTest.testProfileOwnerCanGetDeviceIdentifiers None:com.android.cts.devicepolicy.DeviceOwnerTest.testCreateAndManageUser_LowStorage None:com.android.cts.devicepolicy.MixedDeviceOwnerTest.testDelegatedCertInstallerDeviceIdAttestation None:com.android.cts.devicepolicy.MixedProfileOwnerTest.testLockTaskAfterReboot_tryOpeningSettings None:com.android.cts.devicepolicy.ManagedProfileContactsTest.testManagedContactsPolicies None:com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest.testDelegatedCertInstallerDeviceIdAttestation		/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java	[('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 7), ('/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java', 6), ('/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 6), ('/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java', 5), ('/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java', 5), ('/com.android.cts.passwordcomplexity/GetPasswordComplexityTest.java', 3), ('/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java', 3), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 2), ('/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileContactsTest.java', 2), ('/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 2)]	[('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[       "testRingtoneSync", mProfileUserId);    }    // Test if setting RINGTONE disables sync   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[tRingtoneDisableSync", mProfileUserId);    }    // Test if setting NOTIFICATION disables sync   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[testNotificationDisableSync", mProfileUserId);    }    // Test if setting ALARM disables sync   ])', 1), ('([4:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[4]:method_text:[  CLog.d("Output for command " + command + ": " + getDevice().executeShellCommand(command));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ getDevice().executeShellCommand("input keyevent 3");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[4]:method_text:[teDeviceTestMethod(".LockTaskHostDrivenTest", "testCleanupLockTask_noAsserts");        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[iceTestMethod(".ResetPasswordTest", "testResetPasswordDeprecated");    }    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ "testCallingIsOrganizationOwnedWithManagedProfileExpectingFalse");    }    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[TINGS]:[1]:method_text:[    private static final String RESET_PASSWORD_TEST_DEFAULT_PASSWORD = "123456";    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[TINGS]:[1]:method_text:[    executeShellCommand("input keyevent KEYCODE_WAKEUP");        }    }    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[TINGS]:[1]:method_text:[        verifyUnifiedPassword(false);    }    @FlakyTest    @LargeTest    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[TINGS]:[1]:method_text:[_PASSWORD, mPrimaryUserId);        }    }    @FlakyTest    @LargeTest    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[TINGS]:[1]:method_text:[   // end.            pressPowerButton();        }    }    @LargeTest    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[TINGS]:[1]:method_text:[ getDevice().executeShellCommand("input keyevent 3");        }        super.tearDown();    }   ])', 1), ('([1:/com.android.cts.passwordcomplexity/GetPasswordComplexityTest.java]:[TINGS]:[1]:method_text:[   }    @After    public void tearDown() throws Exception {        clearScreenLock();    }   ])', 1), ('([4:/com.android.cts.passwordcomplexity/GetPasswordComplexityTest.java]:[TINGS]:[4]:method_text:[         }        }        assertEquals(expectedComplexity, mDpm.getPasswordComplexity());    }}])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[Settings.ACTION]:[1]:method_text:[ssertThat(intent.getData().getSchemeSpecificPart()).isEqualTo(mContext.getPackageName());    }   ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[TINGS]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[TINGS]:[1]:method_text:[ssertThat(intent.getData().getSchemeSpecificPart()).isEqualTo(mContext.getPackageName());    }   ])', 1), ('([2:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[TINGS]:[2]:method_text:[IntentsTest",                mProfileUserId);    }    /** Tests for the API helper class. */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java]:[TINGS]:[1]:method_text:[ic class ContentCaptureRestrictionsTest extends BaseDeviceAdminTest {    // TODO(b/123540602): use])', 1), ('([1:/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java]:[TINGS]:[1]:method_text:[ervice() {        runShellCommand("cmd content_capture set temporary-service %d", mUserId);    }}])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[s in the primary user when the policy     * is set on the profile owner.     */    @LargeTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[   super.testAlwaysOnVpnUnsupportedPackageReplaced();    }    @Override    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ // Managed profile owner cannot set currently whitelisted system settings.    }    @Override   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ngSettings() {        // Managed profiles are not allowed to use lock task    }    @Override   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[wnerCanGetDeviceIdentifiersWithPermission", mUserId);    }    @Override    @LockSettingsTest   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[TINGS]:[2]:method_text:[                    "settings delete global sys_storage_threshold_max_bytes");        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[TINGS]:[1]:method_text:[eKeyPairWithDeviceIdAttestationExpectingSuccess", mUserId));    }    @FlakyTest    @Override   ])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[TINGS]:[2]:method_text:[LockTaskAfterReboot_tryOpeningSettings();    }    @Override    @FlakyTest(bugId = 140932104)   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileContactsTest.java]:[TINGS]:[1]:method_text:[seDirectories_canNotAccessManagedDirectories",                    mParentUserId);        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[,                "testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess", mUserId);    }   ])', 1)]		
3_2_3_5_	3.2.3.5	C-12-1						3.2.3.5/C-12-1	"C-12-1] MUST honor the android.media.action.STILL_IMAGE_CAMERA and android.media.action.STILL_IMAGE_CAMERA_SECURE intent and launch the camera in still image mode as described in the SDK. "	03020305.671201	C-12-1 STILL_IMAGE_CAMERA_SECURE 3.2.3.5/C-12-1 STILL_IMAGE_CAMERA 3.2.3.5 android.media.action.STILL					devicepolicy							
3_2_3_5_	3.2.3.5	C-13-1						3.2.3.5/C-13-1	"C-13-1] MUST honor the intent android.app.action.ADD_DEVICE_ADMIN to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it). "	03020305.671301	android.app.action.ADD 3.2.3.5 ADD_DEVICE_ADMIN 3.2.3.5/C-13-1 C-13-1					devicepolicy							
3_2_3_5_	3.2.3.5	C-13-2		[('com.android.cts.managedprofile.ProvisioningTest', 4), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 1)]	[('getSimpleName', 2)]			3.2.3.5/C-13-2	"C-13-2] MUST honor the intents android.app.action.ADMIN_POLICY_COMPLIANCE; android.app.action.GET_PROVISIONING_MODE; android.app.action.PROVISIONING_SUCCESSFUL; android.app.action.PROVISION_MANAGED_DEVICE; android.app.action.PROVISION_MANAGED_PROFILE; android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD; android.app.action.SET_NEW_PASSWORD & android.app.action.START_ENCRYPTION and have an activity to provide fulfillment for these intents as described in SDK here. If device implementations declare the android.software.autofill feature flag; they: "	03020305.671302	SET_NEW_PARENT_PROFILE_PASSWORD START_ENCRYPTION android.software.autofill android.app.action.PROVISIONING C-13-2 android.app.action.SET android.app.action.START ADMIN_POLICY_COMPLIANCE 3.2.3.5/C-13-2 GET_PROVISIONING_MODE SET_NEW_PASSWORD android.app.action.GET android.app.action.ADMIN PROVISION_MANAGED_DEVICE android.app.action.PROVISION 3.2.3.5 PROVISION_MANAGED_PROFILE PROVISIONING_SUCCESSFUL				[('PROVISION_MANAGED_PROFILE', 3), ('PROVISIONING_SUCCESSFUL', 2), ('android.software.autofill', 1)]	devicepolicy	None:com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.testDisallowAutofill_allowed None:com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest.testCannotAddManagedProfileViaManagedProvisioning None:com.android.cts.managedprofile.ProvisioningTest.PersistableBundle None:com.android.cts.managedprofile.ProvisioningTest.testAccountNotExist None:com.android.cts.managedprofile.ProvisioningTest.PersistableBundle None:com.android.cts.managedprofile.ProvisioningTest.testVerifySuccessfulIntentWasReceived		/com/android/cts/managedprofile/ProvisioningTest.java	[('/com/android/cts/managedprofile/ProvisioningTest.java', 6), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2)]	[('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod(".AutofillRestrictionsTest",                "testDisallowAutofill_allowed");    }   ])', 1), ("([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with     * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.     */   ])", 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[.getTargetContext();        mDpm = mContext.getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ext context) {        return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);    }}])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[.getTargetContext();        mDpm = mContext.getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[ences(mContext).getBoolean(KEY_PROVISIONING_SUCCESSFUL_RECEIVED,                false));    }   ])', 1)]		
3_2_3_5_	3.2.3.5	C-14-1						3.2.3.5/C-14-1	"C-14-1] MUST fully implement the AutofillService and AutofillManager APIs and honor the android.settings.REQUEST_SET_AUTOFILL_SERVICE intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user. If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics; they: "	03020305.671401	3.2.3.5/C-14-1 android.settings.REQUEST 3.2.3.5 REQUEST_SET_AUTOFILL_SERVICE C-14-1					devicepolicy							