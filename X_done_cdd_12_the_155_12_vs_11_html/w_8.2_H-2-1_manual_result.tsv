Section	section_id	req_id	full_key	key_as_number	requirement	Test Availability	search_roots	search_terms	manual_search_terms	not_search_terms	not_files	max_matches	class_defs	methods	modules	protected	class_def	method	module	file_name	matched_files	methods_string	urls	method_text	matched_terms	qualified_method	Annotation?	New Req for S?	New CTS for S?	Comment(internal) e.g. why a test is not possible	CTS Bug Id	CDD Bug Id	Area	Shortened	Test Level
2.2.7.4  . Performance	8.2	H-2-1	8.2/H-2-1	08020000.720201	"""[8.2/H-2-1] MUST ensure a sequential write performance of at least 125 MB/s. """	""	""	update sequential	""	""	""	""	""	""	""	""	android.filesystem.cts.SequentialRWTest	testSingleSequentialWrite	CtsFileSystemTestCases	/home/gpoor/cts-12-source/cts/tests/filesystem/src/android/filesystem/cts/SequentialRWTest.java	""	"public void testSingleSequentialWrite() throws Exception {
        final long fileSize = FileUtil.getFileSizeExceedingMemory(getContext(), BUFFER_SIZE);
        if (fileSize == 0) { // not enough space, give up
            return;
        }
        final int numberOfFiles =(int)(fileSize / BUFFER_SIZE);
        String streamName = ""test_single_sequential_write"";
        DeviceReportLog report = new DeviceReportLog(REPORT_LOG_NAME, streamName);
        report.addValue(""files"", numberOfFiles, ResultType.NEUTRAL, ResultUnit.COUNT);
        final byte[] data = FileUtil.generateRandomData(BUFFER_SIZE);
        final File[] files = FileUtil.createNewFiles(getContext(), DIR_SEQ_WR,
                numberOfFiles);
        double[] rdAmount = new double[numberOfFiles];
        double[] wrAmount = new double[numberOfFiles];
        double[] times = FileUtil.measureIO(numberOfFiles, rdAmount, wrAmount, new MeasureRun() {

            @Override
            public void run(int i) throws IOException {
                FileUtil.writeFile(files[i], data, false);
            }
        });
        double[] mbps = Stat.calcRatePerSecArray((double)BUFFER_SIZE / 1024 / 1024, times);
        report.addValues(""write_throughput"", mbps, ResultType.HIGHER_BETTER, ResultUnit.MBPS);
        report.addValues(""write_amount"", wrAmount, ResultType.NEUTRAL, ResultUnit.BYTE);
        Stat.StatResult stat = Stat.getStat(mbps);
        report.setSummary(""write_throughput_average"", stat.mAverage, ResultType.HIGHER_BETTER,
                ResultUnit.MBPS);
        Log.v(TAG, ""sequential write "" + stat.mAverage + "" MBPS"");
        report.submit(getInstrumentation());

        if (MediaPerformanceClassUtils.isPerfClass()) {
            assertTrue(""measured "" + stat.mAverage + "" is less than target ("" + MIN_WRITE_MBPS +
                       "" MBPS)"", stat.mAverage >= MIN_WRITE_MBPS);
        }
    }"	""	""	sequential	""	""	""	""	""	""	""	""	""	""
