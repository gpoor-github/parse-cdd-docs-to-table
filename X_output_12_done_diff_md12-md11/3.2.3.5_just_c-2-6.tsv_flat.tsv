"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"Area"	"Shortened"	"Test Level"	"class_def"	"method"	"module"	"class_defs"	"methods"	"modules"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test02_createShortuctsOnPrimaryUser"	""	""	""	""	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	"public void test02_createShortuctsOnPrimaryUser() {
        assertTrue(getManager().setDynamicShortcuts(list(
                new ShortcutInfo.Builder(getContext(), ""s1"")
                        .setShortLabel(""label1"")
                        .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(
                                new ComponentName(getContext(), MainActivity.class))).build())));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test03_createShortuctsOnManagedProfile"	""	""	""	""	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	"public void test03_createShortuctsOnManagedProfile() {
        assertTrue(getManager().setDynamicShortcuts(list(
                new ShortcutInfo.Builder(getContext(), ""s1"")
                        .setShortLabel(""label2"")
                        .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(
                                new ComponentName(getContext(), MainActivity.class))).build())));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationContactProviders"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationContactProviders() throws Exception {
        // sample contact source
        IntentFilter filter = new Match(new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_DEFAULT},
                new String[]{""vnd.android.cursor.item/vnd.com.someapp.profile""},
                new String[]{""content""},
                new String[]{""com.android.contacts""},
                null /*ports*/);

        // app that would like to match all contact sources
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_TYPE,
                        Intent.ACTION_VIEW,
                        null /*categories*/,
                        ""vnd.android.cursor.item/*"",
                        ""content://com.android.contacts"",
                        true));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationDocumentEditor"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationDocumentEditor() throws Exception {
        // sample document editor
        IntentFilter filter = new Match(
                new String[]{
                        Intent.ACTION_VIEW,
                        Intent.ACTION_EDIT,
                        ""com.app.android.intent.action.APP_EDIT"",
                        ""com.app.android.intent.action.APP_VIEW""},
                new String[]{Intent.CATEGORY_DEFAULT},
                new String[]{
                        ""application/msword"",
                        ""application/vnd.oasis.opendocument.text"",
                        ""application/rtf"",
                        ""text/rtf"",
                        ""text/plain"",
                        ""application/pdf"",
                        ""application/x-pdf"",
                        ""application/docm""},
                null /*schemes*/,
                null /*authorities*/,
                null /*ports*/);

        // app that would like to match all doc editors
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_TYPE,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_DEFAULT},
                        ""*/*"",
                        ""content://com.example.fileprovider"",
                        true));

    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationDeepLinks"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationDeepLinks() throws Exception {
        // Sample app that supports deep-links
        IntentFilter filter = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{
                        Intent.CATEGORY_DEFAULT,
                        Intent.CATEGORY_BROWSABLE},
                null /*types*/,
                new String[]{""http"", ""https""},
                new String[]{""arbitrary-site.com""},
                null /*ports*/);

        // Browser that would like to see all deep-linkable http/s app, but not all apps
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_HOST,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_BROWSABLE},
                        null,
                        ""https://*"",
                        true));
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_HOST,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_BROWSABLE},
                        null,
                        ""http://*"",
                        true));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationNoHostMatchesWildcardHost"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationNoHostMatchesWildcardHost() throws Exception {
        IntentFilter filter = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                new String[]{""http"", ""https""},
                new String[]{""*""},
                null /*ports*/);
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_HOST,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_BROWSABLE},
                        null,
                        ""https://*"",
                        true));

        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_HOST,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_BROWSABLE},
                        null,
                        ""https://"",
                        true));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationNoPortMatchesPortFilter"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationNoPortMatchesPortFilter() throws Exception {
        IntentFilter filter = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                new String[]{""http"", ""https""},
                new String[]{""*""},
                new String[]{""81""});
        checkMatches(filter,
                new MatchCondition(MATCH_CATEGORY_HOST,
                        Intent.ACTION_VIEW,
                        new String[]{Intent.CATEGORY_BROWSABLE},
                        null,
                        ""https://something"",
                        true));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentFilterTest"	"testAppEnumerationBrowser"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentFilterTest.java"	""	"public void testAppEnumerationBrowser() throws Exception {
        IntentFilter appWithWebLink = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                new String[]{""http"", ""https""},
                new String[]{""some.app.domain""},
                null);

        IntentFilter browserFilterWithWildcard = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                new String[]{""http"", ""https""},
                new String[]{""*""},
                null);

        IntentFilter browserFilterWithoutWildcard = new Match(
                new String[]{Intent.ACTION_VIEW},
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                new String[]{""http"", ""https""},
                null,
                null);

        checkMatches(browserFilterWithWildcard,
                new MatchCondition(MATCH_CATEGORY_HOST,
                Intent.ACTION_VIEW,
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                ""https://"",
                true));
        checkMatches(browserFilterWithoutWildcard,
                new MatchCondition(IntentFilter.MATCH_CATEGORY_SCHEME | MATCH_ADJUSTMENT_NORMAL,
                Intent.ACTION_VIEW,
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                ""https://"",
                true));
        checkMatches(appWithWebLink,
                new MatchCondition(NO_MATCH_DATA,
                Intent.ACTION_VIEW,
                new String[]{Intent.CATEGORY_BROWSABLE},
                null,
                ""https://"",
                true));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest"	"testSpoofingPublisher"	"CtsShortcutManagerTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java"	""	"public void testSpoofingPublisher() {
        final Context myContext = getTestContext();
        final Context anotherContext;
        try {
            anotherContext = getTestContext().createPackageContext(ANOTHER_PACKAGE, 0);
        } catch (NameNotFoundException e) {
            fail(""Unable to create package context for "" + ANOTHER_PACKAGE);
            return;
        }
        final ShortcutInfo invalid = new ShortcutInfo.Builder(anotherContext, INVALID_ID)
                .setShortLabel(INVALID_ID)
                .setIntent(new Intent(Intent.ACTION_VIEW))
                .setActivity(ANOTHER_HOME_ACTIVITY)
                .build();

        // Check set.
        runWithCaller(mPackageContext1, () -> {
            getManager().removeAllDynamicShortcuts();

            assertShortcutPackageMismatch(""setDynamicShortcuts1"", mPackageContext1, () -> {
                getManager().setDynamicShortcuts(list(
                        invalid));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""setDynamicShortcuts2A"", mPackageContext1, () -> {
                getManager().setDynamicShortcuts(list(
                        invalid,
                        makeShortcut(""s1"", ""title1"")));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""setDynamicShortcuts2B"", mPackageContext1, () -> {
                getManager().setDynamicShortcuts(list(
                        makeShortcut(""s1"", ""title1""),
                        invalid));
            });
            assertInvalidShortcutNotCreated();
        });

        // Check add.
        runWithCaller(mPackageContext1, () -> {
            getManager().removeAllDynamicShortcuts();

            assertShortcutPackageMismatch(""addDynamicShortcuts1"", mPackageContext1, () -> {
                getManager().addDynamicShortcuts(list(
                        invalid));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""addDynamicShortcuts2A"", mPackageContext1, () -> {
                getManager().addDynamicShortcuts(list(
                        invalid,
                        makeShortcut(""s1"", ""title1"")));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""addDynamicShortcuts2B"", mPackageContext1, () -> {
                getManager().addDynamicShortcuts(list(
                        makeShortcut(""s1"", ""title1""),
                        invalid));
            });
            assertInvalidShortcutNotCreated();
        });

        // Check update.
        runWithCaller(mPackageContext1, () -> {
            getManager().removeAllDynamicShortcuts();

            assertShortcutPackageMismatch(""updateShortcuts1"", mPackageContext1, () -> {
                getManager().updateShortcuts(list(
                        invalid));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""updateShortcuts2A"", mPackageContext1, () -> {
                getManager().updateShortcuts(list(
                        invalid,
                        makeShortcut(""s1"", ""title1"")));
            });
            assertInvalidShortcutNotCreated();
            assertShortcutPackageMismatch(""updateShortcuts2B"", mPackageContext1, () -> {
                getManager().updateShortcuts(list(
                        makeShortcut(""s1"", ""title1""),
                        invalid));
            });
            assertInvalidShortcutNotCreated();
        });

        // requestPin (API26 and above)
        runWithCaller(mPackageContext1, () -> {
            getManager().removeAllDynamicShortcuts();

            assertShortcutPackageMismatch(""requestPinShortcut"", mPackageContext1, () -> {
                getManager().requestPinShortcut(invalid, null);
            });
            assertInvalidShortcutNotCreated();
        });

        // createShortcutResultIntent (API26 and above)
        runWithCaller(mPackageContext1, () -> {
            getManager().removeAllDynamicShortcuts();

            assertShortcutPackageMismatch(""createShortcutResultIntent"", mPackageContext1, () -> {
                getManager().createShortcutResultIntent(invalid);
            });
            assertInvalidShortcutNotCreated();
        });
    }

    private void assertInvalidShortcutNotCreated() {
        for (String s : runCommand(InstrumentationRegistry.getInstrumentation(),
                ""dumpsys shortcut"")) {
            assertFalse(""dumpsys shortcut contained invalid ID"", s.contains(INVALID_ID));
        }
    }

    private void assertShortcutPackageMismatch(String method, Context callerContext, Runnable r) {
        assertExpectException(
                ""Caller="" + callerContext.getPackageName() + "", method="" + method,
                SecurityException.class, ""Shortcut package name mismatch"",
                () -> runWithCaller(callerContext, () -> r.run())
        );
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.PackageManagerShellCommandIncrementalTest"	"testInstallSysTraceNoReadlogs"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerShellCommandIncrementalTest.java"	""	"public void testInstallSysTraceNoReadlogs() throws Exception {
        setSystemProperty(""debug.incremental.enforce_readlogs_max_interval_for_system_dataloaders"",
                ""1"");
        setSystemProperty(""debug.incremental.readlogs_max_interval_sec"", ""0"");

        final int atraceDumpIterations = 30;
        final int atraceDumpDelayMs = 100;
        final String expected = ""|page_read:"";

        // We don't expect any readlogs with 0sec interval.
        assertFalse(
                ""Page reads ("" + expected + "") were found in atrace dump"",
                checkSysTraceForSubstring(TEST_APK, expected, atraceDumpIterations,
                        atraceDumpDelayMs));
    }

    private boolean checkSysTraceForSubstring(String testApk, final String expected,
            int atraceDumpIterations, int atraceDumpDelayMs) throws Exception {
        final int installIterations = 3;
        return checkSysTrace(
                installIterations,
                atraceDumpIterations,
                atraceDumpDelayMs,
                () -> installPackage(testApk),
                (stdout) -> stdout.contains(expected));
    }

    private boolean checkSysTrace(
            int installIterations,
            int atraceDumpIterations,
            int atraceDumpDelayMs,
            final Callable<Void> installer,
            final Function<String, Boolean> checker)
            throws Exception {
        final int beforeReadDelayMs = 1000;

        final CompletableFuture<Boolean> result = new CompletableFuture<>();
        final Thread readFromProcess = new Thread(() -> {
            try {
                executeShellCommand(""atrace --async_start -b 10240 -c adb"");
                try {
                    for (int i = 0; i < atraceDumpIterations; ++i) {
                        final String stdout = executeShellCommand(""atrace --async_dump"");
                        try {
                            if (checker.apply(stdout)) {
                                result.complete(true);
                                break;
                            }
                            Thread.currentThread().sleep(atraceDumpDelayMs);
                        } catch (InterruptedException ignored) {
                        }
                    }
                } finally {
                    executeShellCommand(""atrace --async_stop"");
                }
            } catch (IOException ignored) {
            }
        });
        readFromProcess.start();

        for (int i = 0; i < installIterations; ++i) {
            installer.call();
            assertTrue(isAppInstalled(TEST_APP_PACKAGE));
            Thread.currentThread().sleep(beforeReadDelayMs);
            uninstallPackageSilently(TEST_APP_PACKAGE);
        }

        readFromProcess.join();
        return result.getNow(false);
    }

    private void doTestInstallSysTrace(String testApk) throws Exception {
        // Async atrace dump uses less resources but requires periodic pulls.
        // Overall timeout of 10secs in 100ms intervals should be enough.
        final int atraceDumpIterations = 100;
        final int atraceDumpDelayMs = 100;
        final String expected = ""|page_read:"";

        assertTrue(
                ""No page reads ("" + expected + "") found in atrace dump"",
                checkSysTraceForSubstring(testApk, expected, atraceDumpIterations,
                        atraceDumpDelayMs));
    }

    static boolean isAppInstalled(String packageName) throws IOException {
        final String commandResult = executeShellCommand(""pm list packages"");
        final int prefixLength = ""package:"".length();
        return Arrays.stream(commandResult.split(""\\r?\\n""))
                .anyMatch(line -> line.substring(prefixLength).equals(packageName));
    }

    private String getSplits(String packageName) throws IOException {
        final String result = parsePackageDump(packageName, ""    splits=["");
        if (TextUtils.isEmpty(result)) {
            return null;
        }
        return result.substring(0, result.length() - 1);
    }

    private String getCodePath(String packageName) throws IOException {
        return parsePackageDump(packageName, ""    codePath="");
    }

    private File getSplit(String splitName) throws Exception {
        return new File(getCodePath(TEST_APP_PACKAGE), splitName);
    }

    private String parsePackageDump(String packageName, String prefix) throws IOException {
        final String commandResult = executeShellCommand(""pm dump "" + packageName);
        final int prefixLength = prefix.length();
        Optional<String> maybeSplits = Arrays.stream(commandResult.split(""\\r?\\n""))
                .filter(line -> line.startsWith(prefix)).findFirst();
        if (!maybeSplits.isPresent()) {
            return null;
        }
        String splits = maybeSplits.get();
        return splits.substring(prefixLength);
    }

    private static String createApkPath(String baseName) {
        return TEST_APK_PATH + baseName;
    }

    private Void installPackage(String baseName) throws IOException {
        File file = new File(createApkPath(baseName));
        assertEquals(""Success\n"",
                executeShellCommand(""pm install-incremental -t -g "" + file.getPath()));
        return null;
    }

    private void installSplit(String splitName) throws Exception {
        final File splitfile = new File(createApkPath(splitName));

        try (InputStream inputStream = executeShellCommandStream(
                ""pm install-incremental -t -g -p "" + TEST_APP_PACKAGE + "" ""
                        + splitfile.getPath())) {
            assertEquals(""Success\n"", readFullStream(inputStream));
        }
    }

    private void readSplitInChunks(String splitName) throws Exception {
        final int chunks = 2;
        final int waitBetweenChunksMs = 100;
        final File file = getSplit(splitName);

        assertTrue(file.toString(), file.exists());
        final long totalSize = file.length();
        final long chunkSize = totalSize / chunks;
        try (InputStream baseApkStream = new FileInputStream(file)) {
            final byte[] buffer = new byte[4 * 1024];
            long readSoFar = 0;
            long maxToRead = 0;
            for (int i = 0; i < chunks; ++i) {
                maxToRead += chunkSize;
                int length;
                while ((length = baseApkStream.read(buffer)) != -1) {
                    readSoFar += length;
                    if (readSoFar >= maxToRead) {
                        break;
                    }
                }
                if (readSoFar < totalSize) {
                    Thread.currentThread().sleep(waitBetweenChunksMs);
                }
            }
        }
    }

    private long readAndReportTime(File file, long borderTime) throws Exception {
        assertTrue(file.toString(), file.exists());
        final long startTime = SystemClock.uptimeMillis();
        long readTime = 0;
        try (InputStream baseApkStream = new FileInputStream(file)) {
            final byte[] buffer = new byte[128 * 1024];
            while (baseApkStream.read(buffer) != -1) {
                readTime = SystemClock.uptimeMillis() - startTime;
                if (readTime >= borderTime) {
                    break;
                }
            }
        }
        return readTime;
    }

    static String uninstallPackageSilently(String packageName) throws IOException {
        return executeShellCommand(""pm uninstall "" + packageName);
    }

    interface Result {
        boolean await() throws Exception;
    }

    static String executeShellCommand(String command) throws IOException {
        try (InputStream inputStream = executeShellCommandStream(command)) {
            return readFullStream(inputStream);
        }
    }

    private static InputStream executeShellCommandStream(String command) throws IOException {
        final ParcelFileDescriptor stdout = getUiAutomation().executeShellCommand(command);
        return new ParcelFileDescriptor.AutoCloseInputStream(stdout);
    }

    private static String executeShellCommand(String command, File[] inputs)
            throws IOException {
        return executeShellCommand(command, inputs, Stream.of(inputs).mapToLong(
                File::length).toArray());
    }

    private static String executeShellCommand(String command, File[] inputs, long[] expected)
            throws IOException {
        try (InputStream inputStream = executeShellCommandRw(command, inputs, expected)) {
            return readFullStream(inputStream);
        }
    }

    private static InputStream executeShellCommandRw(String command, File[] inputs, long[] expected)
            throws IOException {
        assertEquals(inputs.length, expected.length);
        final ParcelFileDescriptor[] pfds =
                InstrumentationRegistry.getInstrumentation().getUiAutomation()
                        .executeShellCommandRw(command);
        ParcelFileDescriptor stdout = pfds[0];
        ParcelFileDescriptor stdin = pfds[1];
        try (FileOutputStream outputStream = new ParcelFileDescriptor.AutoCloseOutputStream(
                stdin)) {
            for (int i = 0; i < inputs.length; i++) {
                try (FileInputStream inputStream = new FileInputStream(inputs[i])) {
                    writeFullStream(inputStream, outputStream, expected[i]);
                }
            }
        }
        return new ParcelFileDescriptor.AutoCloseInputStream(stdout);
    }

    static String readFullStream(InputStream inputStream, long expected)
            throws IOException {
        ByteArrayOutputStream result = new ByteArrayOutputStream();
        writeFullStream(inputStream, result, expected);
        return result.toString(""UTF-8"");
    }

    static String readFullStream(InputStream inputStream) throws IOException {
        return readFullStream(inputStream, -1);
    }

    static void writeFullStream(InputStream inputStream, OutputStream outputStream,
            long expected)
            throws IOException {
        final byte[] buffer = new byte[1024];
        long total = 0;
        int length;
        while ((length = inputStream.read(buffer)) != -1 && (expected < 0 || total < expected)) {
            outputStream.write(buffer, 0, length);
            total += length;
        }
        if (expected > 0) {
            assertEquals(expected, total);
        }
    }

    private void cleanup() throws Exception {
        uninstallPackageSilently(TEST_APP_PACKAGE);
        assertFalse(isAppInstalled(TEST_APP_PACKAGE));
        assertEquals(null, getSplits(TEST_APP_PACKAGE));
        setDeviceProperty(""incfs_default_timeouts"", null);
        setDeviceProperty(""known_digesters_list"", null);
        setSystemProperty(""debug.incremental.enforce_readlogs_max_interval_for_system_dataloaders"",
                ""0"");
        setSystemProperty(""debug.incremental.readlogs_max_interval_sec"", ""10000"");
        setSystemProperty(""debug.incremental.always_enable_read_timeouts_for_system_dataloaders"",
                ""1"");
        IoUtils.closeQuietly(mSession);
        mSession = null;
    }

    private void setDeviceProperty(String name, String value) {
        getUiAutomation().adoptShellPermissionIdentity();
        try {
            DeviceConfig.setProperty(DeviceConfig.NAMESPACE_PACKAGE_MANAGER_SERVICE, name, value,
                    false);
        } finally {
            getUiAutomation().dropShellPermissionIdentity();
        }
    }

    private void setSystemProperty(String name, String value) throws Exception {
        executeShellCommand(""setprop "" + name + "" "" + value);
    }

}"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.contacts.ContactsContractIntentsTest"	"testViewContactDir"	"CtsContactsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContractIntentsTest.java"	""	"public void testViewContactDir() {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(ContactsContract.Contacts.CONTENT_URI);
        assertCanBeHandled(intent);
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest"	"testManifestDisabled"	"CtsShortcutManagerTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java"	""	"public void testManifestDisabled() {
        runWithCallerWithStrictMode(mPackageContext1, () -> {
            enableManifestActivity(""Launcher_manifest_4a"", true);

            retryUntil(() -> getManager().getManifestShortcuts().size() > 0,
                    ""Manifest shortcuts didn't show up"");

            // First they're all enabled.
            assertWith(getManager().getManifestShortcuts())
                    .haveIds(""ms41"", ""ms42"", ""ms43"")
                    .areAllEnabled()
                    ;
        });
        setDefaultLauncher(getInstrumentation(), mLauncherContext1);

        runWithCallerWithStrictMode(mLauncherContext1, () -> {
            getLauncherApps().pinShortcuts(mPackageContext1.getPackageName(),
                    list(""ms41"", ""ms42""), getUserHandle());
        });
        runWithCallerWithStrictMode(mPackageContext1, () -> {
            enableManifestActivity(""Launcher_manifest_4b"", true);
            enableManifestActivity(""Launcher_manifest_4a"", false);

            retryUntil(() -> getManager().getManifestShortcuts().size() == 0,
                    ""Manifest shortcuts didn't update"");

            // 3 was not inned, so gone.  But 1 and 2 remain.
            assertWith(getManager().getManifestShortcuts())
                    .isEmpty();
            assertWith(getManager().getPinnedShortcuts())
                    .haveIds(""ms41"", ""ms42"")
                    .areAllDisabled()
                    .forShortcutWithId(""ms41"", si -> {
                        assertEquals(Intent.ACTION_VIEW, si.getIntent().getAction());
                    })
                    .forShortcutWithId(""ms42"", si -> {
                        assertEquals(Intent.ACTION_VIEW, si.getIntent().getAction());
                    })
                    ;
        });
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest"	"testManifestDefinition"	"CtsShortcutManagerTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java"	""	"public void testManifestDefinition() throws Exception {
        final Icon iconMs21 = loadPackageDrawableIcon(mPackageContext1, ""black_16x16"");

        runWithCallerWithStrictMode(mPackageContext1, () -> {
            enableManifestActivity(""Launcher_manifest_2"", true);

            retryUntil(() -> getManager().getManifestShortcuts().size() > 0,
                    ""Manifest shortcuts didn't show up"");

            assertWith(getManager().getManifestShortcuts())
                    .haveIds(""ms21"", ""ms22"")
                    .forShortcutWithId(""ms21"", si-> {

                        assertEquals(""Shortcut 1"", si.getShortLabel());
                        assertEquals(""Long shortcut label1"", si.getLongLabel());
                        assertEquals(getActivity(""Launcher_manifest_2""), si.getActivity());
                        assertEquals(""Shortcut 1 is disabled"", si.getDisabledMessage());
                        assertEquals(set(""android.shortcut.conversation"",
                                ""android.shortcut.media""), si.getCategories());
                        assertIconDimensions(iconMs21, getIconAsLauncher(
                                mLauncherContext1, si.getPackage(), si.getId(), true));

                        // Check the intent.
                        assertEquals(1, si.getIntents().length);

                        Intent i = si.getIntents()[0];

                        assertEquals(""android.intent.action.VIEW"", i.getAction());
                        assertEquals(null, i.getData());
                        assertEquals(null, i.getType());
                        assertEquals(null, i.getComponent());
                        assertEquals(null, i.getExtras());
                        assertEquals(Intent.FLAG_ACTIVITY_NEW_TASK |
                                Intent.FLAG_ACTIVITY_CLEAR_TASK |
                                Intent.FLAG_ACTIVITY_TASK_ON_HOME,
                                i.getFlags());
                    })
                    .forShortcutWithId(""ms22"", si-> {
                        assertEquals(""Shortcut 2"", si.getShortLabel());
                        assertEquals(null, si.getLongLabel());
                        assertEquals(getActivity(""Launcher_manifest_2""), si.getActivity());
                        assertEquals(null, si.getDisabledMessage());
                        assertEquals(null, si.getCategories());
                        assertNull(getIconAsLauncher(
                                mLauncherContext1, si.getPackage(), si.getId(), true));

                        // Check the intents.
                        assertEquals(2, si.getIntents().length);

                        Intent i = si.getIntents()[0];

                        assertEquals(""action"", i.getAction());
                        assertEquals(null, i.getData());
                        assertEquals(null, i.getType());
                        assertEquals(null, i.getComponent());
                        assertEquals(null, i.getExtras());
                        assertEquals(null, i.getCategories());
                        assertEquals(Intent.FLAG_ACTIVITY_NEW_TASK |
                                        Intent.FLAG_ACTIVITY_CLEAR_TASK |
                                        Intent.FLAG_ACTIVITY_TASK_ON_HOME,
                                i.getFlags());

                        i = si.getIntents()[1];

                        assertEquals(""action2"", i.getAction());
                        assertEquals(""data"", i.getData().toString());
                        assertEquals(""a/b"", i.getType());
                        assertEquals(new ComponentName(""pkg"", ""pkg.class""), i.getComponent());
                        assertEquals(set(""icat1"", ""icat2""), i.getCategories());
                        assertEquals(""value1"", i.getStringExtra(""key1""));
                        assertEquals(123, i.getIntExtra(""key2"", -1));
                        assertEquals(true, i.getBooleanExtra(""key3"", false));
                        assertEquals(0, i.getFlags());

                    })
                    ;
        });
    }"	""	""	"android.intent.action.VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcutmanager.ShortcutManagerClientApiTest"	"testDynamicIntents"	"CtsShortcutManagerTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java"	""	"public void testDynamicIntents() {
        runWithCallerWithStrictMode(mPackageContext1, () -> {

            final ShortcutInfo s1 = makeShortcutBuilder(""s1"")
                    .setShortLabel(""shortlabel"")
                    .setIntents(new Intent[]{new Intent(""android.intent.action.VIEW"")})
                    .build();

            final Intent i1 = new Intent(""action"").setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
            final Intent i2 = new Intent(""action2"").setFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT)
                    .setData(Uri.parse(""data""))
                    .setComponent(new ComponentName(""pkg"", ""pkg.class""))
                    .addCategory(""icat1"")
                    .addCategory(""icat2"")
                    .putExtra(""key1"", ""value1"")
                    .putExtra(""key2"", 123)
                    .putExtra(""key3"", true);

            final ShortcutInfo s2 = makeShortcutBuilder(""s2"")
                    .setShortLabel(""shortlabel"")
                    .setIntents(new Intent[]{i1, i2})
                    .build();

            assertTrue(getManager().setDynamicShortcuts(list(s1, s2)));

            assertWith(getManager().getDynamicShortcuts())
                    .haveIds(""s1"", ""s2"")
                    .forShortcutWithId(""s1"", si-> {
                        assertEquals(1, si.getIntents().length);

                        Intent i = si.getIntents()[0];

                        assertEquals(""android.intent.action.VIEW"", i.getAction());
                        assertEquals(null, i.getData());
                        assertEquals(null, i.getType());
                        assertEquals(null, i.getComponent());
                        assertEquals(null, i.getExtras());
                        assertEquals(0, i.getFlags());
                    })
                    .forShortcutWithId(""s2"", si-> {
                        assertEquals(2, si.getIntents().length);

                        Intent i = si.getIntents()[0];

                        assertEquals(""action"", i.getAction());
                        assertEquals(null, i.getData());
                        assertEquals(null, i.getType());
                        assertEquals(null, i.getComponent());
                        assertEquals(null, i.getExtras());
                        assertEquals(null, i.getCategories());
                        assertEquals(Intent.FLAG_ACTIVITY_CLEAR_TASK, i.getFlags());

                        i = si.getIntents()[1];

                        assertEquals(""action2"", i.getAction());
                        assertEquals(""data"", i.getData().toString());
                        assertEquals(new ComponentName(""pkg"", ""pkg.class""), i.getComponent());
                        assertEquals(set(""icat1"", ""icat2""), i.getCategories());
                        assertEquals(""value1"", i.getStringExtra(""key1""));
                        assertEquals(123, i.getIntExtra(""key2"", -1));
                        assertEquals(true, i.getBooleanExtra(""key3"", false));
                        assertEquals(Intent.FLAG_ACTIVITY_NEW_DOCUMENT, i.getFlags());
                    })
            ;
        });
    }"	""	""	"android.intent.action.VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentTest"	"testGetIntentOld"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java"	""	"public void testGetIntentOld() throws URISyntaxException {
        String uri = ""test"";
        mIntent = Intent.getIntentOld(uri);
        assertEquals(Intent.ACTION_VIEW, mIntent.getAction());

        mIntent = null;
        try {
            uri = ""test#action(test)categories(test)type(mtype)launchFlags(test)extras(test"";
            mIntent = Intent.getIntentOld(uri);
            fail(""should throw URISyntaxException."");
        } catch (Exception e) {
            // expected
        }

        final String compnent =
                ""component("" + mContext.getPackageName() + ""!"" + MockActivity.class.getName() + "")"";
        uri = ""testdata#action(test)categories(test!test2)type(mtype)launchFlags(5)"" + compnent
                + ""extras(Stest=testString!btestbyte=1!""
                + ""Btestboolean=true!ctestchar=a!dtestdouble=1d!""
                + ""itestint=1!ltestlong=1!stestshort=1!ftestfloat=1f)"";
        mIntent = Intent.getIntentOld(uri);
        assertEquals(""test"", mIntent.getAction());
        assertEquals(""testdata"", mIntent.getData().toString());
        assertEquals(mComponentName, mIntent.getComponent());
        assertEquals(""test"", (String) (mIntent.getCategories().toArray()[0]));
        assertEquals(""mtype"", mIntent.getType());
        assertEquals(4, mIntent.getFlags());
        assertEquals(""testString"", mIntent.getStringExtra(""test""));
        assertTrue(mIntent.getBooleanExtra(""testboolean"", false));
        final byte b = 1;
        final byte defaulttByte = 2;
        assertEquals(b, mIntent.getByteExtra(""testbyte"", defaulttByte));
        assertEquals('a', mIntent.getCharExtra(""testchar"", 'b'));
        final float testFloat = 1f;
        assertEquals(testFloat, mIntent.getFloatExtra(""testfloat"", 2f));
        final double testDouble = 1d;
        assertEquals(testDouble, mIntent.getDoubleExtra(""testdouble"", 2d));

        final long testLong = 1;
        assertEquals(testLong, mIntent.getLongExtra(""testlong"", 2l));

        final short testShort = 1;
        final short defaultShort = 2;
        assertEquals(testShort, mIntent.getShortExtra(""testshort"", defaultShort));
        assertEquals(1, mIntent.getIntExtra(""testint"", 2));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentTest"	"testGetIntent"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java"	""	"public void testGetIntent() throws URISyntaxException {
        mIntent = Intent.getIntent(""test#"");
        assertEquals(Intent.ACTION_VIEW, mIntent.getAction());

        try {
            String uri = ""#Intent;action=android.content.IntentTest_test;""
                    + ""category=testCategory;type=testtype;identifier=testident;launchFlags=0x1;""
                    + ""component=com.android/.app.MockActivity;K.testExtraName=1;end"";
            mIntent = Intent.getIntent(uri);
            fail(""should throw URISyntaxException."");
        } catch (Exception e) {
            // expected
        }
        mIntent = new Intent();

        String uri = mIntent.toURI();
        Intent target = Intent.getIntent(uri);
        assertEquals(Intent.ACTION_VIEW, target.getAction());

        mIntent.setAction(TEST_ACTION);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(TEST_ACTION, target.getAction());

        mIntent.setData(TEST_URI);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(TEST_URI, target.getData());

        mIntent.setComponent(mComponentName);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(mComponentName, target.getComponent());

        mIntent.addCategory(TEST_CATEGORY);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(1, target.getCategories().size());
        assertEquals(TEST_CATEGORY, (String) (target.getCategories().toArray()[0]));

        mIntent.setType(TEST_TYPE);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(TEST_TYPE, target.getType());

        mIntent.setIdentifier(TEST_IDENTIFIER);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(TEST_IDENTIFIER, target.getIdentifier());

        mIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT
                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION
                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION
                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(Intent.FLAG_ACTIVITY_NEW_DOCUMENT, target.getFlags());

        String stringValue = ""testString"";
        mIntent.putExtra(TEST_EXTRA_NAME, stringValue);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(stringValue, target.getStringExtra(TEST_EXTRA_NAME));

        mIntent.putExtra(TEST_EXTRA_NAME, true);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertTrue(target.getBooleanExtra(TEST_EXTRA_NAME, false));

        final byte b = 1;
        mIntent.putExtra(TEST_EXTRA_NAME, b);

        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        final byte defaulttByte = 2;
        assertEquals(b, target.getByteExtra(TEST_EXTRA_NAME, defaulttByte));

        final char testChar = 'a';
        mIntent.putExtra(TEST_EXTRA_NAME, testChar);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(testChar, target.getCharExtra(TEST_EXTRA_NAME, 'b'));

        final double testDouble = 1;
        mIntent.putExtra(TEST_EXTRA_NAME, testDouble);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(testDouble, target.getDoubleExtra(TEST_EXTRA_NAME, 2));

        final int testInt = 1;
        mIntent.putExtra(TEST_EXTRA_NAME, testInt);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(testInt, target.getIntExtra(TEST_EXTRA_NAME, 2));

        final long testLong = 1l;
        mIntent.putExtra(TEST_EXTRA_NAME, testLong);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(testLong, target.getLongExtra(TEST_EXTRA_NAME, 2l));

        final short testShort = 1;
        final short defaultShort = 2;
        mIntent.putExtra(TEST_EXTRA_NAME, testShort);
        uri = mIntent.toURI();
        target = Intent.getIntent(uri);
        assertEquals(testShort, target.getShortExtra(TEST_EXTRA_NAME, defaultShort));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentTest"	"testUris"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java"	""	"public void testUris() {
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;end"",
                null,
                new Intent().setAction(""android.test.FOO""));
        checkIntentUri(
                ""intent:#Intent;category=android.test.FOO;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW).addCategory(""android.test.FOO""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;launchFlags=0x20;end"",
                null,
                new Intent().setAction(""android.test.FOO"").setFlags(0x20));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah"")));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;component=com.exfoo/com.argh.Bar;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar"")));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah#fragment"")));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;action=android.test.foo;end"",
                null,
                new Intent().setAction(""android.test.foo"")
                        .setData(Uri.parse(""http://www.example.com/blah"")));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;type=image/foo;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setDataAndType(Uri.parse(""mailto:foo""), ""image/foo""));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;S.string=text;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""string"", ""text""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;S.string=text;end"",
                null,
                new Intent().setAction(""android.test.FOO"").putExtra(""string"", ""text""));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;i.int=1000;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""int"", 1000));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;l.long=1000;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""long"", (long) 1000));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;B.boolean=true;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""boolean"", true));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;f.float=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""float"", 10.4f));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;d.double=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""double"", (double) 10.4));
        checkIntentUri(
                ""intent:#Intent;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .putExtra(""int"", 1000).putExtra(""long"", (long) 1000)
                        .putExtra(""boolean"", true).putExtra(""float"", 10.4f));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;scheme=foobar;action=android.test.FOO;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"").setData(Uri.parse(""foobar:""))));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;action=android.test.FOO;package=com.myapp;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"").setPackage(""com.myapp"")));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;action=android.test.FOO;component=com.exfoo/com.argh.Bar;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"")
                                .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar""))));

        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;end"",
                new Intent().setAction(""android.test.FOO"").setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.intent.action.MAIN;package=com.myapp;end"",
                ""android-app://com.myapp"",
                new Intent().setAction(Intent.ACTION_MAIN).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;end"",
                new Intent().setAction(Intent.ACTION_VIEW).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;category=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;category=android.test.FOO;end"",
                new Intent().setAction(Intent.ACTION_VIEW).addCategory(""android.test.FOO"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;launchFlags=0x20;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;launchFlags=0x20;end"",
                new Intent().setAction(""android.test.FOO"").setFlags(0x20)
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;component=com.exfoo/com.argh.Bar;end"",
                ""android-app://com.myapp/http/www.example.com/blah#Intent;component=com.exfoo/com.argh.Bar;end"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah#fragment"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah#fragment""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;action=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah#fragment#Intent;action=android.test.FOO;end"",
                new Intent().setAction(""android.test.FOO"")
                        .setData(Uri.parse(""http://www.example.com/blah#fragment""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;type=image/foo;package=com.myapp;end"",
                ""android-app://com.myapp/mailto#Intent;type=image/foo;end"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setDataAndType(Uri.parse(""mailto:""), ""image/foo"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;S.string=text;end"",
                ""android-app://com.myapp/mailto#Intent;S.string=text;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;package=com.myapp;S.string=text;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;S.string=text;end"",
                new Intent().setAction(""android.test.FOO"").putExtra(""string"", ""text"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;i.int=1000;end"",
                ""android-app://com.myapp/mailto#Intent;i.int=1000;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""int"", 1000)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;l.long=1000;end"",
                ""android-app://com.myapp/mailto#Intent;l.long=1000;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""long"", (long) 1000)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;B.boolean=true;end"",
                ""android-app://com.myapp/mailto#Intent;B.boolean=true;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""boolean"", true)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;f.float=10.4;end"",
                ""android-app://com.myapp/mailto#Intent;f.float=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""float"", 10.4f)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;d.double=10.4;end"",
                ""android-app://com.myapp/mailto#Intent;d.double=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""double"", (double) 10.4)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;package=com.myapp;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .putExtra(""int"", 1000).putExtra(""long"", (long) 1000)
                        .putExtra(""boolean"", true).putExtra(""float"", 10.4f)
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://example.org/db?123#Intent;scheme=z39.50r;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""z39.50r://example.org/db?123"")));
    }

    private boolean compareIntents(Intent expected, Intent actual) {
        if (!Objects.equals(expected.getAction(), actual.getAction())) {
            return false;
        }
        if (!Objects.equals(expected.getData(), actual.getData())) {
            return false;
        }
        if (!Objects.equals(expected.getType(), actual.getType())) {
            return false;
        }
        if (!Objects.equals(expected.getIdentifier(), actual.getIdentifier())) {
            return false;
        }
        if (!Objects.equals(expected.getPackage(), actual.getPackage())) {
            return false;
        }
        if (!Objects.equals(expected.getComponent(), actual.getComponent())) {
            return false;
        }
        if (expected.getFlags() != actual.getFlags()) {
            return false;
        }
        Set<String> expectedCat = expected.getCategories();
        Set<String> actualCat = actual.getCategories();
        if (expectedCat != actualCat) {
            if (expectedCat == null || actualCat == null) {
                return false;
            }
            for (String cat : expectedCat) {
                if (!actual.hasCategory(cat)) {
                    return false;
                }
            }
            for (String cat : actualCat) {
                if (!expected.hasCategory(cat)) {
                    return false;
                }
            }
        }
        Bundle extras1 = expected.getExtras();
        Bundle extras2 = actual.getExtras();
        if (extras1 != extras2) {
            if (extras1 == null || extras2 == null) {
                return false;
            }
            for (String key : extras1.keySet()) {
                if (!Objects.equals(extras1.get(key), extras2.get(key))) {
                    return false;
                }
            }
            for (String key : extras2.keySet()) {
                if (!Objects.equals(extras1.get(key), extras2.get(key))) {
                    return false;
                }
            }
        }
        return true;
    }

    private void assertEqualsIntent(String msg, Intent expected, Intent actual) {
        if (!compareIntents(expected, actual)) {
            failNotEquals(msg, expected, actual);
        }
        Intent expectedSel = expected.getSelector();
        Intent actualSel = actual.getSelector();
        if (expectedSel != actualSel) {
            if (expectedSel == null || actualSel == null) {
                failNotEquals(msg, expected, actual);
            }
            if (!compareIntents(expectedSel, actualSel)) {
                failNotEquals(msg, expected, actual);
            }
        }
    }

    private void checkIntentUri(String intentSchemeUri, String androidAppSchemeUri, Intent intent) {
        if (intentSchemeUri != null) {
            try {
                Intent genIntent = Intent.parseUri(intentSchemeUri, 0);
                assertEqualsIntent(""Implicitly converting "" + intentSchemeUri + "" to Intent"",
                        intent, genIntent);
                genIntent = Intent.parseUri(intentSchemeUri, Intent.URI_INTENT_SCHEME);
                assertEqualsIntent(""Explicitly converting "" + intentSchemeUri + "" to Intent"",
                        intent, genIntent);
            } catch (URISyntaxException e) {
                fail(""Failure parsing "" + intentSchemeUri + "": "" + e);
            }
            String genUri = intent.toUri(Intent.URI_INTENT_SCHEME);
            assertEquals(""Converting "" + intent + "" to intent: uri"",
                    intentSchemeUri, genUri);
        }
        if (androidAppSchemeUri != null) {
            try {
                Intent genIntent = Intent.parseUri(androidAppSchemeUri, 0);
                assertEqualsIntent(""Implicitly converting "" + androidAppSchemeUri + "" to Intent"",
                        intent, genIntent);
                genIntent = Intent.parseUri(intentSchemeUri, Intent.URI_ANDROID_APP_SCHEME);
                assertEqualsIntent(""Explicitly converting "" + androidAppSchemeUri + "" to Intent"",
                        intent, genIntent);
            } catch (URISyntaxException e) {
                fail(""Failure parsing "" + androidAppSchemeUri + "": "" + e);
            }
            String genUri = intent.toUri(Intent.URI_ANDROID_APP_SCHEME);
            assertEquals(""Converting "" + intent + "" to android-app: uri"",
                    androidAppSchemeUri, genUri);
        }
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.IntentTest"	"testUris"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/IntentTest.java"	""	"public void testUris() {
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;end"",
                null,
                new Intent().setAction(""android.test.FOO""));
        checkIntentUri(
                ""intent:#Intent;category=android.test.FOO;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW).addCategory(""android.test.FOO""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;launchFlags=0x20;end"",
                null,
                new Intent().setAction(""android.test.FOO"").setFlags(0x20));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah"")));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;component=com.exfoo/com.argh.Bar;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar"")));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah#fragment"")));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;action=android.test.foo;end"",
                null,
                new Intent().setAction(""android.test.foo"")
                        .setData(Uri.parse(""http://www.example.com/blah"")));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;type=image/foo;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setDataAndType(Uri.parse(""mailto:foo""), ""image/foo""));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;S.string=text;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""string"", ""text""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;S.string=text;end"",
                null,
                new Intent().setAction(""android.test.FOO"").putExtra(""string"", ""text""));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;i.int=1000;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""int"", 1000));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;l.long=1000;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""long"", (long) 1000));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;B.boolean=true;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""boolean"", true));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;f.float=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""float"", 10.4f));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;d.double=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""mailto:foo""))
                        .putExtra(""double"", (double) 10.4));
        checkIntentUri(
                ""intent:#Intent;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .putExtra(""int"", 1000).putExtra(""long"", (long) 1000)
                        .putExtra(""boolean"", true).putExtra(""float"", 10.4f));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;scheme=foobar;action=android.test.FOO;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"").setData(Uri.parse(""foobar:""))));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;action=android.test.FOO;package=com.myapp;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"").setPackage(""com.myapp"")));
        checkIntentUri(
                ""intent:foo#Intent;scheme=mailto;SEL;action=android.test.FOO;component=com.exfoo/com.argh.Bar;end"",
                null,
                makeSelector(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(""mailto:foo"")),
                        new Intent(""android.test.FOO"")
                                .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar""))));

        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;end"",
                new Intent().setAction(""android.test.FOO"").setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.intent.action.MAIN;package=com.myapp;end"",
                ""android-app://com.myapp"",
                new Intent().setAction(Intent.ACTION_MAIN).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;end"",
                new Intent().setAction(Intent.ACTION_VIEW).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;category=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;category=android.test.FOO;end"",
                new Intent().setAction(Intent.ACTION_VIEW).addCategory(""android.test.FOO"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;launchFlags=0x20;package=com.myapp;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;launchFlags=0x20;end"",
                new Intent().setAction(""android.test.FOO"").setFlags(0x20)
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;component=com.exfoo/com.argh.Bar;end"",
                ""android-app://com.myapp/http/www.example.com/blah#Intent;component=com.exfoo/com.argh.Bar;end"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setComponent(new ComponentName(""com.exfoo"", ""com.argh.Bar""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah#fragment"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah#fragment""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#fragment#Intent;scheme=http;action=android.test.FOO;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah#fragment#Intent;action=android.test.FOO;end"",
                new Intent().setAction(""android.test.FOO"")
                        .setData(Uri.parse(""http://www.example.com/blah#fragment""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://www.example.com/blah#Intent;scheme=http;package=com.myapp;end"",
                ""android-app://com.myapp/http/www.example.com/blah"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""http://www.example.com/blah""))
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;type=image/foo;package=com.myapp;end"",
                ""android-app://com.myapp/mailto#Intent;type=image/foo;end"",
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setDataAndType(Uri.parse(""mailto:""), ""image/foo"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;S.string=text;end"",
                ""android-app://com.myapp/mailto#Intent;S.string=text;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;action=android.test.FOO;package=com.myapp;S.string=text;end"",
                ""android-app://com.myapp#Intent;action=android.test.FOO;S.string=text;end"",
                new Intent().setAction(""android.test.FOO"").putExtra(""string"", ""text"")
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;i.int=1000;end"",
                ""android-app://com.myapp/mailto#Intent;i.int=1000;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""int"", 1000)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;l.long=1000;end"",
                ""android-app://com.myapp/mailto#Intent;l.long=1000;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""long"", (long) 1000)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;B.boolean=true;end"",
                ""android-app://com.myapp/mailto#Intent;B.boolean=true;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""boolean"", true)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;f.float=10.4;end"",
                ""android-app://com.myapp/mailto#Intent;f.float=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""float"", 10.4f)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;scheme=mailto;package=com.myapp;d.double=10.4;end"",
                ""android-app://com.myapp/mailto#Intent;d.double=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""double"", (double) 10.4)
                        .setData(Uri.parse(""mailto:"")).setPackage(""com.myapp""));
        checkIntentUri(
                ""intent:#Intent;package=com.myapp;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                ""android-app://com.myapp#Intent;action=android.intent.action.VIEW;S.string=text;i.int=1000;l.long=1000;B.boolean=true;f.float=10.4;end"",
                new Intent().setAction(Intent.ACTION_VIEW).putExtra(""string"", ""text"")
                        .putExtra(""int"", 1000).putExtra(""long"", (long) 1000)
                        .putExtra(""boolean"", true).putExtra(""float"", 10.4f)
                        .setPackage(""com.myapp""));
        checkIntentUri(
                ""intent://example.org/db?123#Intent;scheme=z39.50r;end"",
                null,
                new Intent().setAction(Intent.ACTION_VIEW)
                        .setData(Uri.parse(""z39.50r://example.org/db?123"")));
    }

    private boolean compareIntents(Intent expected, Intent actual) {
        if (!Objects.equals(expected.getAction(), actual.getAction())) {
            return false;
        }
        if (!Objects.equals(expected.getData(), actual.getData())) {
            return false;
        }
        if (!Objects.equals(expected.getType(), actual.getType())) {
            return false;
        }
        if (!Objects.equals(expected.getIdentifier(), actual.getIdentifier())) {
            return false;
        }
        if (!Objects.equals(expected.getPackage(), actual.getPackage())) {
            return false;
        }
        if (!Objects.equals(expected.getComponent(), actual.getComponent())) {
            return false;
        }
        if (expected.getFlags() != actual.getFlags()) {
            return false;
        }
        Set<String> expectedCat = expected.getCategories();
        Set<String> actualCat = actual.getCategories();
        if (expectedCat != actualCat) {
            if (expectedCat == null || actualCat == null) {
                return false;
            }
            for (String cat : expectedCat) {
                if (!actual.hasCategory(cat)) {
                    return false;
                }
            }
            for (String cat : actualCat) {
                if (!expected.hasCategory(cat)) {
                    return false;
                }
            }
        }
        Bundle extras1 = expected.getExtras();
        Bundle extras2 = actual.getExtras();
        if (extras1 != extras2) {
            if (extras1 == null || extras2 == null) {
                return false;
            }
            for (String key : extras1.keySet()) {
                if (!Objects.equals(extras1.get(key), extras2.get(key))) {
                    return false;
                }
            }
            for (String key : extras2.keySet()) {
                if (!Objects.equals(extras1.get(key), extras2.get(key))) {
                    return false;
                }
            }
        }
        return true;
    }

    private void assertEqualsIntent(String msg, Intent expected, Intent actual) {
        if (!compareIntents(expected, actual)) {
            failNotEquals(msg, expected, actual);
        }
        Intent expectedSel = expected.getSelector();
        Intent actualSel = actual.getSelector();
        if (expectedSel != actualSel) {
            if (expectedSel == null || actualSel == null) {
                failNotEquals(msg, expected, actual);
            }
            if (!compareIntents(expectedSel, actualSel)) {
                failNotEquals(msg, expected, actual);
            }
        }
    }

    private void checkIntentUri(String intentSchemeUri, String androidAppSchemeUri, Intent intent) {
        if (intentSchemeUri != null) {
            try {
                Intent genIntent = Intent.parseUri(intentSchemeUri, 0);
                assertEqualsIntent(""Implicitly converting "" + intentSchemeUri + "" to Intent"",
                        intent, genIntent);
                genIntent = Intent.parseUri(intentSchemeUri, Intent.URI_INTENT_SCHEME);
                assertEqualsIntent(""Explicitly converting "" + intentSchemeUri + "" to Intent"",
                        intent, genIntent);
            } catch (URISyntaxException e) {
                fail(""Failure parsing "" + intentSchemeUri + "": "" + e);
            }
            String genUri = intent.toUri(Intent.URI_INTENT_SCHEME);
            assertEquals(""Converting "" + intent + "" to intent: uri"",
                    intentSchemeUri, genUri);
        }
        if (androidAppSchemeUri != null) {
            try {
                Intent genIntent = Intent.parseUri(androidAppSchemeUri, 0);
                assertEqualsIntent(""Implicitly converting "" + androidAppSchemeUri + "" to Intent"",
                        intent, genIntent);
                genIntent = Intent.parseUri(intentSchemeUri, Intent.URI_ANDROID_APP_SCHEME);
                assertEqualsIntent(""Explicitly converting "" + androidAppSchemeUri + "" to Intent"",
                        intent, genIntent);
            } catch (URISyntaxException e) {
                fail(""Failure parsing "" + androidAppSchemeUri + "": "" + e);
            }
            String genUri = intent.toUri(Intent.URI_ANDROID_APP_SCHEME);
            assertEquals(""Converting "" + intent + "" to android-app: uri"",
                    androidAppSchemeUri, genUri);
        }
    }"	""	""	"android.intent.action.VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	Test Available	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.telephony.cts.CellBroadcastIntentsTest"	"testGetIntentForBackgroundReceivers"	"CtsTelephonyTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CellBroadcastIntentsTest.java"	""	"public void testGetIntentForBackgroundReceivers() {
        try {
            SmsCbMessage message = new SmsCbMessage(TEST_MESSAGE_FORMAT, TEST_GEO_SCOPE,
                    TEST_SERIAL, TEST_LOCATION, TEST_SERVICE_CATEGORY, TEST_LANGUAGE, TEST_DCS,
                    TEST_BODY, TEST_PRIORITY, TEST_ETWS_INFO, null,
                    TEST_MAX_WAIT_TIME, TEST_GEOS, TEST_RECEIVED_TIME, TEST_SLOT, TEST_SUB_ID);

            CellBroadcastIntents.sendSmsCbReceivedBroadcast(
                    InstrumentationRegistry.getContext(), UserHandle.ALL, message,
                    null, null, 0, TEST_SLOT);
        } catch (SecurityException e) {
            // expected
            return;
        }
        fail();
    }
}"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerSecondaryUserTest"	"testCreateAndStart"	""	""	""	""	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java"	""	"public void testCreateAndStart() {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Publish a shortcut.
        final UserHandle user = android.os.Process.myUserHandle();

        assertTrue(getManager().setDynamicShortcuts(list(
                new ShortcutInfo.Builder(getContext(), ""s1"")
                    .setShortLabel(""label"")
                    .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(
                            new ComponentName(getContext(), MainActivity.class))).build())));

        // Retrieve as a launcher.
        final ShortcutQuery q = new ShortcutQuery()
                .setQueryFlags(ShortcutQuery.FLAG_MATCH_DYNAMIC)
                .setPackage(getContext().getPackageName())
                .setShortcutIds(list(""s1""));
        final List<ShortcutInfo> list = getLauncherApps().getShortcuts(q, user);
        assertWith(list)
                .haveIds(""s1"")
                .areAllDynamic()
                .forShortcutWithId(""s1"", si -> {
                    assertEquals(user, si.getUserHandle());
                });

        final ShortcutInfo s1 = list.get(0);

        // Just make sure they don't throw SecurityException.
        getLauncherApps().getShortcutIconDrawable(s1, DisplayMetrics.DENSITY_DEFAULT);
        getLauncherApps().getShortcutBadgedIconDrawable(s1, DisplayMetrics.DENSITY_DEFAULT);

        final long now = System.currentTimeMillis();

        // Start it.
        getLauncherApps().startShortcut(s1, null, null);

        retryUntil(() -> MainActivity.getLastCreateTime() >= now, ""Activity not started"");
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.shortcut.upgrade.ShortcutManagerPreUpgradeTest"	"testPreUpgrade"	""	""	""	""	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/upgrade/src/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java"	""	"public void testPreUpgrade() {
        Log.i(Consts.TAG, ""Pre: ResIDs="" + R.drawable.black_32x32 + "", "" + R.drawable.black_64x64);

        // Publish shortcuts with drawable icons.
        final Icon icon1 = Icon.createWithResource(getContext(), R.drawable.black_32x32);
        final Icon icon2 = Icon.createWithResource(getContext(), R.drawable.black_64x64);

        // Store the original resource ID in the extras.
        final PersistableBundle b1 = new PersistableBundle();
        b1.putInt(Consts.EXTRA_ICON_RES_ID, R.drawable.black_32x32);
        final ShortcutInfo s1 = new ShortcutInfo.Builder(getContext(), ""s1"")
                .setShortLabel(""shortlabel1"")
                .setIcon(icon1)
                .setIntents(new Intent[]{new Intent(Intent.ACTION_VIEW)})
                .setExtras(b1)
                .build();

        final PersistableBundle b2 = new PersistableBundle();
        b2.putInt(Consts.EXTRA_ICON_RES_ID, R.drawable.black_64x64);
        final ShortcutInfo s2 = new ShortcutInfo.Builder(getContext(), ""s2"")
                .setShortLabel(""shortlabel2"")
                .setIcon(icon2)
                .setIntents(new Intent[]{new Intent(Intent.ACTION_VIEW)})
                .setExtras(b2)
                .build();

        assertTrue(getManager().setDynamicShortcuts(list(s1, s2)));

        // Set this package as a default launcher to access LauncherApps.
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Check the published icons as a launcher.
        assertIconDimensions(getContext().getPackageName(), ""s1"", icon1);
        assertIconDimensions(getContext().getPackageName(), ""s2"", icon2);

        // Paranoid: this should fail.
        boolean notThrown = false;
        try {
            assertIconDimensions(getContext().getPackageName(), ""s1"", icon2);
            notThrown = true;
        } catch (AssertionFailedError expected) {
            // okay
        }
        assertFalse(notThrown);
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.app.cts.PendingIntentTest"	"testCancelListener"	"CtsAppTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/PendingIntentTest.java"	""	"public void testCancelListener() throws Exception {
        final Intent i = new Intent(Intent.ACTION_VIEW);
        final PendingIntent pi1 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
        final Set<String> called = Collections.synchronizedSet(new HashSet<>());

        // To make sure the executor is used, we count the number of times the executor
        // is invoked.
        final AtomicInteger executorCount = new AtomicInteger();
        final Executor e = (runnable) -> {
            executorCount.incrementAndGet();
            runnable.run();
        };

        // Add 4 listeners and remove the first one and the last one.
        PendingIntent.CancelListener listener1 = (pi) -> {
            called.add(""listener1"");
            assertEquals(pi1, pi);
        };
        PendingIntent.CancelListener listener2 = (pi) -> {
            called.add(""listener2"");
            assertEquals(pi1, pi);
        };
        PendingIntent.CancelListener listener3 = (pi) -> {
            called.add(""listener3"");
            assertEquals(pi1, pi);
        };
        PendingIntent.CancelListener listener4 = (pi) -> {
            called.add(""listener4"");
            assertEquals(pi1, pi);
        };
        assertTrue(pi1.addCancelListener(e, listener1));
        assertTrue(pi1.addCancelListener(e, listener2));
        assertTrue(pi1.addCancelListener(e, listener3));
        assertTrue(pi1.addCancelListener(e, listener4));

        pi1.removeCancelListener(listener1);
        pi1.removeCancelListener(listener4);

        pi1.cancel();

        TestUtils.waitUntil(""listeners not called"",
                () -> called.contains(""listener2"") && called.contains(""listener3""));
        // Wait a bit more just in case, and make sure the last one isn't called.
        Thread.sleep(200);
        assertFalse(called.contains(""listener1""));
        assertFalse(called.contains(""listener4""));
        assertEquals(2, executorCount.get());

        // It's already canceled, so more calls should return false.
        assertFalse(pi1.addCancelListener(e, (pi) -> {
            assertEquals(pi1, pi);
        }));
        // Should still return false.
        assertFalse(pi1.addCancelListener(e, (pi) -> {
            assertEquals(pi1, pi);
        }));

        // Clear the trackers.
        called.clear();
        executorCount.set(0);

        // Try with a new PI using the same intent.
        final PendingIntent pi2 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
        assertTrue(pi2.addCancelListener(e, (pi) -> {
            called.add(""listener1"");
            assertEquals(pi2, pi);
        }));
        pi2.cancel();

        TestUtils.waitUntil(""listener1 not called"",
                () -> called.contains(""listener1""));
        assertEquals(1, executorCount.get());
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.app.cts.PendingIntentTest"	"testCancelListener_cancelCurrent"	"CtsAppTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/PendingIntentTest.java"	""	"public void testCancelListener_cancelCurrent() throws Exception {
        final Intent i = new Intent(Intent.ACTION_VIEW);

        // Create the first PI.
        final PendingIntent pi1 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
        final Set<String> called = Collections.synchronizedSet(new HashSet<>());

        PendingIntent.CancelListener listener1 = (pi) -> {
            called.add(""listener1"");
            assertEquals(pi1, pi);
        };
        assertTrue(pi1.addCancelListener(Runnable::run, listener1));

        // Update-current won't cancel the previous PI.
        final PendingIntent pi2 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);
        PendingIntent.CancelListener listener2 = (pi) -> {
            called.add(""listener2"");
            assertEquals(pi2, pi);
        };
        assertTrue(pi2.addCancelListener(Runnable::run, listener2));

        // So this shouldn't be called. (oops I don't want to use sleep(), but...)
        Thread.sleep(200);
        assertFalse(called.contains(""listener1""));

        // Cancel-current will cancel both pi1 and pi2
        final PendingIntent pi3 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_IMMUTABLE);
        TestUtils.waitUntil(""listeners not called"",
                () -> called.contains(""listener1"") && called.contains(""listener2""));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.app.cts.PendingIntentTest"	"testCancelListener_oneShot"	"CtsAppTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/app/src/android/app/cts/PendingIntentTest.java"	""	"public void testCancelListener_oneShot() throws Exception {
        final Intent i = new Intent(Intent.ACTION_VIEW);

        // Create the first PI.
        final PendingIntent pi1 = PendingIntent.getBroadcast(mContext, 0, i,
                PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT
                        | PendingIntent.FLAG_IMMUTABLE);
        final Set<String> called = Collections.synchronizedSet(new HashSet<>());

        PendingIntent.CancelListener listener1 = (pi) -> {
            called.add(""listener1"");
            assertEquals(pi1, pi);
        };
        assertTrue(pi1.addCancelListener(Runnable::run, listener1));

        pi1.send();

        TestUtils.waitUntil(""listeners not called"",
                () -> called.contains(""listener1""));
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.media.MediaStoreIntentsTest"	"testViewImageDir"	"CtsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreIntentsTest.java"	""	"public void testViewImageDir() {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(mExternalImages);
        assertCanBeHandled(intent);
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.media.MediaStoreIntentsTest"	"testViewVideoDir"	"CtsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreIntentsTest.java"	""	"public void testViewVideoDir() {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(mExternalVideo);
        assertCanBeHandled(intent);
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.media.MediaStoreIntentsTest"	"testViewImageFile"	"CtsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreIntentsTest.java"	""	"public void testViewImageFile() {
        final String[] schemes = new String[] {
                ""file"", ""http"", ""https"", ""content"" };
        final String[] mimes = new String[] {
                ""image/bmp"", ""image/jpeg"", ""image/png"", ""image/gif"", ""image/webp"",
                ""image/x-adobe-dng"", ""image/x-canon-cr2"", ""image/x-nikon-nef"", ""image/x-nikon-nrw"",
                ""image/x-sony-arw"", ""image/x-panasonic-rw2"", ""image/x-olympus-orf"",
                ""image/x-fuji-raf"", ""image/x-pentax-pef"", ""image/x-samsung-srw"" };

        for (String scheme : schemes) {
            for (String mime : mimes) {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                final Uri uri = new Uri.Builder().scheme(scheme)
                        .authority(""example.com"").path(""image"").build();
                intent.setDataAndType(uri, mime);
                assertCanBeHandled(intent);
            }
        }
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.media.MediaStoreIntentsTest"	"testViewVideoFile"	"CtsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreIntentsTest.java"	""	"public void testViewVideoFile() {
        final String[] schemes = new String[] {
                ""file"", ""http"", ""https"", ""content"" };
        final String[] mimes = new String[] {
                ""video/mpeg4"", ""video/mp4"", ""video/3gp"", ""video/3gpp"", ""video/3gpp2"",
                ""video/webm"" };

        for (String scheme : schemes) {
            for (String mime : mimes) {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                final Uri uri = new Uri.Builder().scheme(scheme)
                        .authority(""example.com"").path(""video"").build();
                intent.setDataAndType(uri, mime);
                assertCanBeHandled(intent);
            }
        }
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.provider.cts.media.MediaStoreIntentsTest"	"testViewAudioFile"	"CtsProviderTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreIntentsTest.java"	""	"public void testViewAudioFile() {
        final String[] schemes = new String[] {
                ""file"", ""http"", ""content"" };
        final String[] mimes = new String[] {
                ""audio/mpeg"", ""audio/mp4"", ""audio/ogg"", ""audio/webm"", ""application/ogg"",
                ""application/x-ogg"" };

        for (String scheme : schemes) {
            for (String mime : mimes) {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                final Uri uri = new Uri.Builder().scheme(scheme)
                        .authority(""example.com"").path(""audio"").build();
                intent.setDataAndType(uri, mime);
                assertCanBeHandled(intent);
            }
        }
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testViewNormalUrl"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testViewNormalUrl() {
        Uri uri = Uri.parse(NORMAL_URL);
        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
        assertCanBeHandled(intent);
    }

    /**
     * Test ACTION_VIEW when url is https://web_address,
     * it will open a browser window to the URL specified.
     */"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testViewSecureUrl"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testViewSecureUrl() {
        Uri uri = Uri.parse(SECURE_URL);
        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
        assertCanBeHandled(intent);
    }

    /**
     * Test ACTION_WEB_SEARCH when url is http://web_address,
     * it will open a browser window to the URL specified.
     */"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testContactsCallLogs"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testContactsCallLogs() {
        PackageManager packageManager = mContext.getPackageManager();
        if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setType(""vnd.android.cursor.dir/calls"");
            assertCanBeHandled(intent);
        }
    }

    /**
     * Test view music playback
     */"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testMusicPlayback"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testMusicPlayback() {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setDataAndType(ContentUris.withAppendedId(
                MediaStore.Audio.Media.INTERNAL_CONTENT_URI, 1), ""audio/*"");
        assertCanBeHandled(intent);
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testViewDownloads"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testViewDownloads() {
        assertCanBeHandled(new Intent(DownloadManager.ACTION_VIEW_DOWNLOADS));
    }"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testShowCallSettings"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testShowCallSettings() {
        PackageManager packageManager = mContext.getPackageManager();
        if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            Intent intent = new Intent(TelecomManager.ACTION_SHOW_CALL_SETTINGS);
            assertCanBeHandled(intent);
        }
    }

    /**
     * Test ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS, it will display the respond by SMS preferences.
     */"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testShowRespondViaSmsSettings"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testShowRespondViaSmsSettings() {
        PackageManager packageManager = mContext.getPackageManager();
        if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            Intent intent = new Intent(TelecomManager.ACTION_SHOW_RESPOND_VIA_SMS_SETTINGS);
            assertCanBeHandled(intent);
        }
    }

    /**
     * Test start camera by intent
     */"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.AvailableIntentsTest"	"testChangeDefaultSmsApplication"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java"	""	"public void testChangeDefaultSmsApplication() {
        PackageManager packageManager = mContext.getPackageManager();
        if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
            assertCanBeHandled(new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT));
        }
    }"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"com.android.cts.intent.sender.AppLinkTest"	"testThreeReceivers"	""	""	""	""	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/AppLinkTest.java"	""	"public void testThreeReceivers() {
        assertNumberOfReceivers(3);
    }

    // Should not be called if there are several possible receivers to the intent
    // (see getHttpIntent)
    private void checkHttpIntentResult(String receiverClassName, boolean inManagedProfile)
            throws Exception {
        PackageManager pm = mContext.getPackageManager();

        Intent intent = getHttpIntent();
        Intent result = mActivity.getResult(intent);
        assertWithMessage(""result for intent %s"", intent).that(result).isNotNull();

        // If it is received in the other profile, we cannot check the class from the ResolveInfo
        // returned by queryIntentActivities. So we rely on the receiver telling us its class.
        assertWithMessage(""extra %s on intent %s"", EXTRA_RECEIVER_CLASS, result)
                .that(result.getStringExtra(EXTRA_RECEIVER_CLASS)).isEqualTo(receiverClassName);
        assertWithMessage(""has extra %s on intent %s"", EXTRA_IN_MANAGED_PROFILE, result)
                .that(result.hasExtra(EXTRA_IN_MANAGED_PROFILE)).isTrue();
        assertWithMessage(""extra %s on intent %s"", EXTRA_IN_MANAGED_PROFILE, result)
                .that(result.getBooleanExtra(EXTRA_IN_MANAGED_PROFILE, false))
                .isEqualTo(inManagedProfile);
    }

    private void assertNumberOfReceivers(int n) {
        PackageManager pm = mContext.getPackageManager();
        List<ResolveInfo> receivers = pm.queryIntentActivities(getHttpIntent(), /* flags = */ 0);
        assertWithMessage(""receivers"").that(receivers).hasSize(n);
    }

    private Intent getHttpIntent() {
        Intent i = new Intent(Intent.ACTION_VIEW);
        i.addCategory(Intent.CATEGORY_BROWSABLE);
        i.addCategory(Intent.CATEGORY_DEFAULT);
        i.setData(Uri.parse(""http://com.android.cts.intent.receiver""));
        return i;
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.pm.cts.ResourcesHardeningTest"	"TestBlockFilter"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ResourcesHardeningTest.java"	""	"public void checkOpenFdRemote() throws Exception {
        // Failing to read missing blocks through a file descriptor using read/pread causes an
        // IOException to be thrown.
        testIncrementalOwnPackageResources(TestUtils.TEST_OPEN_FILE_FD, false /* expectCrash */);
    }

    private interface TestFunction {
        void apply(Resources res, TestUtils.AssertionType type) throws Exception;
    }

    /**
     * Installs a package incrementally and tests that retrieval of that package's resources from
     * within this process does not crash this process and instead falls back to some default
     * behavior.
     */
    private void testIncrementalForeignPackageResources(TestFunction test) throws Exception {
        try (ShellInstallSession session = startInstallSession()) {
            test.apply(session.getPackageResources(), TestUtils.AssertionType.ASSERT_SUCCESS);
        }
        try (ShellInstallSession session = startInstallSession()) {
            session.enableBlockRestrictions();
            test.apply(session.getPackageResources(), TestUtils.AssertionType.ASSERT_READ_FAILURE);
        }
    }

    /**
     * Installs a package incrementally and tests that the package crashes when it fails to retrieve
     * its own resources due to incremental installation.
     */
    private void testIncrementalOwnPackageResources(String testName, boolean expectCrash)
            throws Exception {
        try (RemoteTest session = new RemoteTest(startInstallSession(), testName)) {
            session.mSession.getPackageResources();
            session.start(true /* assertSuccess */);
        }

        try (RemoteTest session = new RemoteTest(startInstallSession(), testName)) {
            session.mSession.getPackageResources();
            session.mSession.enableBlockRestrictions();
            if (expectCrash) {
                MatcherUtils.assertThrows(instanceOf(RemoteProcessCrashedException.class),
                        () -> session.start(false /* assertSuccess */));
            } else {
                session.start(false /* assertSuccess */);
            }
        }
    }

    private void testIncrementalOwnPackageResources(String testName) throws Exception {
        testIncrementalOwnPackageResources(testName, true /* expectCrash */);
    }

    private static class RemoteProcessCrashedException extends RuntimeException {
    }

    private static class RemoteTest implements AutoCloseable {
        private static final int SPIN_SLEEP_MS = 500;
        private static final long RESPONSE_TIMEOUT_MS = 60 * 1000;

        private final ShellInstallSession mSession;
        private final String mTestName;

        RemoteTest(ShellInstallSession session, String testName) {
            mSession = session;
            mTestName = testName;
        }

        public void start(boolean assertSuccess) throws Exception {
            final AtomicInteger pid = new AtomicInteger();
            final IntentFilter statusFilter = new IntentFilter(TestUtils.TEST_STATUS_ACTION);

            final TestUtils.BroadcastDetector pidDetector = new TestUtils.BroadcastDetector(
                    getContext(), statusFilter, (Context context, Intent intent) -> {
                if (intent.hasExtra(TestUtils.PID_STATUS_PID_KEY)) {
                    pid.set(intent.getIntExtra(TestUtils.PID_STATUS_PID_KEY, -1));
                    return true;
                }
                return false;
            });

            final TestUtils.BroadcastDetector finishDetector = new TestUtils.BroadcastDetector(
                    getContext(), statusFilter, (Context context, Intent intent) -> {
                if (intent.hasExtra(TestUtils.TEST_STATUS_RESULT_KEY)) {
                    final String reason = intent.getStringExtra(TestUtils.TEST_STATUS_RESULT_KEY);
                    if (!reason.equals(TestUtils.TEST_STATUS_RESULT_SUCCESS)) {
                        throw new IllegalStateException(""Remote test failed: "" + reason);
                    }
                    return true;
                }
                return false;
            });

            // Start the test app and indicate which test to run.
            try (pidDetector; finishDetector) {
                final Intent launchIntent = new Intent(Intent.ACTION_VIEW);
                launchIntent.setClassName(TestUtils.TEST_APP_PACKAGE, TestUtils.TEST_ACTIVITY_NAME);
                launchIntent.putExtra(TestUtils.TEST_NAME_EXTRA_KEY, mTestName);
                launchIntent.putExtra(TestUtils.TEST_ASSERT_SUCCESS_EXTRA_KEY, assertSuccess);
                launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                        | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);

                getContext().startActivity(launchIntent);

                // The test app must respond with a broadcast containing its pid so this test can
                // check if the test app crashes.
                assertTrue(""Timed out while waiting for pid"",
                        pidDetector.waitForBroadcast(RESPONSE_TIMEOUT_MS, TimeUnit.MILLISECONDS));

                // Wait for the test app to finish testing or crash.
                final ActivityManager am = getActivityManager();
                final int remotePid = pid.get();
                for (int i = 0; i < (RESPONSE_TIMEOUT_MS / SPIN_SLEEP_MS); i++) {
                    if (am.getRunningAppProcesses().stream().noneMatch(
                            info -> info.pid == remotePid)) {
                        throw new RemoteProcessCrashedException();
                    }
                    if (finishDetector.waitForBroadcast(SPIN_SLEEP_MS, TimeUnit.MILLISECONDS)) {
                        return;
                    }
                }
                throw new TimeoutException(""Timed out while waiting for remote test to finish"");
            }
        }

        @Override
        public void close() throws Exception {
            mSession.close();
        }
    }

    private ShellInstallSession startInstallSession() throws IOException,
            InterruptedException {
        return startInstallSession(TEST_APKS, TestUtils.TEST_APP_PACKAGE);
    }

    private ShellInstallSession startInstallSession(String[] apks, String packageName)
            throws IOException, InterruptedException {
        final String v4SignatureSuffix = "".idsig"";
        final TestBlockFilter filter = new TestBlockFilter();
        final IncrementalInstallSession.Builder builder = new IncrementalInstallSession.Builder()
                .addExtraArgs(""-t"", ""-i"", getContext().getPackageName())
                .setLogger(new IncrementalDeviceConnection.Logger())
                .setBlockFilter(filter);
        for (final String apk : apks) {
            final String path = TEST_APK_PATH + apk;
            builder.addApk(Paths.get(path), Paths.get(path + v4SignatureSuffix));
        }

        final ShellInstallSession session = new ShellInstallSession(
                builder.build(), filter, packageName);
        session.session.start(Executors.newSingleThreadExecutor(),
                IncrementalDeviceConnection.Factory.reliable());
        session.session.waitForInstallCompleted(10, TimeUnit.SECONDS);
        assertTrue(isAppInstalled(packageName));
        return session;
    }

    /**
     * A wrapper for {@link IncrementalInstallSession} that uninstalls the installed package when
     * testing is finished.
     */
    private static class ShellInstallSession implements AutoCloseable {
        public final IncrementalInstallSession session;
        private final TestBlockFilter mFilter;
        private final String mPackageName;

        private ShellInstallSession(IncrementalInstallSession session,
                TestBlockFilter filter, String packageName) {
            this.session = session;
            this.mFilter = filter;
            this.mPackageName = packageName;
            getUiAutomation().adoptShellPermissionIdentity();
        }

        public void enableBlockRestrictions() {
            mFilter.enableBlockRestrictions();
        }

        public Resources getPackageResources() throws PackageManager.NameNotFoundException {
            return getContext().createPackageContext(mPackageName, 0).getResources();
        }

        @Override
        public void close() throws IOException {
            session.close();
            getUiAutomation().dropShellPermissionIdentity();
            uninstallPackageSilently(mPackageName);
        }
    }

    private class TestBlockFilter implements IBlockFilter {
        private final AtomicBoolean mRestrictBlocks = new AtomicBoolean(false);

        @Override
        public boolean shouldServeBlock(PendingBlock block) {
            if (!mRestrictBlocks.get() || block.getType() == PendingBlock.Type.SIGNATURE_TREE) {
                // Always send signature blocks and always send blocks when enableBlockRestrictions
                // has not been called.
                return true;
            }

            // Allow the block to be served if it does not reside in a restricted range.
            final String apkFileName = block.getPath().getFileName().toString();
            return mRestrictedRanges.get(apkFileName).stream().noneMatch(
                    info -> info.dataStartBlockIndex <= block.getBlockIndex()
                            && block.getBlockIndex() <= info.dataEndBlockIndex);
        }

        public void enableBlockRestrictions() {
            mRestrictBlocks.set(true);
        }
    }

    private static class RestrictedBlockRange {
        public final String entryName;
        public final int dataStartBlockIndex;
        public final int dataEndBlockIndex;

        RestrictedBlockRange(String zipEntryName, int dataStartBlockIndex,
                int dataEndBlockIndex) {
            this.entryName = zipEntryName;
            this.dataStartBlockIndex = dataStartBlockIndex;
            this.dataEndBlockIndex = dataEndBlockIndex;
        }
    }

    private static RestrictedBlockRange restrictZipEntry(ZipFile file, String entryFileName) {
        final ZipArchiveEntry info = file.getEntry(entryFileName);
        if (info == null) return null;
        final long headerSize = entryFileName.getBytes(StandardCharsets.UTF_8).length + 30;
        final int dataStartBlock = (int) (info.getDataOffset() - headerSize) / INCFS_BLOCK_SIZE;
        final int dataEndBlock = (int) (info.getDataOffset() + info.getCompressedSize())
                / INCFS_BLOCK_SIZE;
        return new RestrictedBlockRange(entryFileName, dataStartBlock, dataEndBlock);
    }

    private static RestrictedBlockRange restrictOnlyMiddleBlock(RestrictedBlockRange info) {
        if (info == null) return null;
        assertTrue(info.dataEndBlockIndex - info.dataStartBlockIndex > 2);
        final int middleBlock = (info.dataStartBlockIndex + info.dataEndBlockIndex) / 2;
        return new RestrictedBlockRange(info.entryName, middleBlock, middleBlock);
    }

    private static Context getContext() {
        return InstrumentationRegistry.getInstrumentation().getContext();
    }

    private static UiAutomation getUiAutomation() {
        return InstrumentationRegistry.getInstrumentation().getUiAutomation();
    }

    private static ActivityManager getActivityManager() {
        return (ActivityManager) getContext().getSystemService(Context.ACTIVITY_SERVICE);
    }
}"	""	""	"ACTION_VIEW"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.ContentProviderTest"	"testAttachInfo"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java"	""	"public void testAttachInfo() {
        MockContentProvider mockContentProvider = new MockContentProvider();

        ProviderInfo info1 = new ProviderInfo();
        info1.readPermission = ""android.permission.READ_SMS"";
        info1.writePermission = null; // Guarded by an app op not a permission.
        mockContentProvider.attachInfo(sContext, info1);
        assertSame(sContext, mockContentProvider.getContext());
        assertEquals(info1.readPermission, mockContentProvider.getReadPermission());
        assertEquals(info1.writePermission, mockContentProvider.getWritePermission());

        ProviderInfo info2 = new ProviderInfo();
        info2.readPermission = ""android.permission.READ_CONTACTS"";
        info2.writePermission = ""android.permission.WRITE_CONTACTS"";
        mockContentProvider.attachInfo(null, info2);
        assertSame(sContext, mockContentProvider.getContext());
        assertEquals(info1.readPermission, mockContentProvider.getReadPermission());
        assertEquals(info1.writePermission, mockContentProvider.getWritePermission());

        mockContentProvider = new MockContentProvider();
        mockContentProvider.attachInfo(null, null);
        assertNull(mockContentProvider.getContext());
        assertNull(mockContentProvider.getReadPermission());
        assertNull(mockContentProvider.getWritePermission());

        mockContentProvider.attachInfo(null, info2);
        assertNull(mockContentProvider.getContext());
        assertEquals(info2.readPermission, mockContentProvider.getReadPermission());
        assertEquals(info2.writePermission, mockContentProvider.getWritePermission());

        mockContentProvider.attachInfo(sContext, info1);
        assertSame(sContext, mockContentProvider.getContext());
        assertEquals(info1.readPermission, mockContentProvider.getReadPermission());
        assertEquals(info1.writePermission, mockContentProvider.getWritePermission());
    }"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.ContentProviderTest"	"testAccessReadPermission"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java"	""	"public void testAccessReadPermission() {
        MockContentProvider mockContentProvider = new MockContentProvider();
        assertNull(mockContentProvider.getReadPermission());

        String expected = ""android.permission.READ_CONTACTS"";
        mockContentProvider.setReadPermissionWrapper(expected);
        assertEquals(expected, mockContentProvider.getReadPermission());

        expected = ""android.permission.READ_SMS"";
        mockContentProvider.setReadPermissionWrapper(expected);
        assertEquals(expected, mockContentProvider.getReadPermission());

        mockContentProvider.setReadPermissionWrapper(null);
        assertNull(mockContentProvider.getReadPermission());
    }"	""	""	"SMS"	""
"3.2.3.5  Conditional Application Intents"	"3.2.3.5"	"C-2-6"	"3.2.3.5/C-2-6"	"03020305.670206"	"""C-2-6] MUST honor the [android.intent.action.SENDTO](https://developer.android.com/reference/android/content/Intent#ACTION_SENDTO) and [android.intent.action.VIEW](https://developer.android.com/reference/android/content/Intent#ACTION_VIEW) intents and provide an activity to send/display SMS messages. """	""	""	"SENDTO ACTION_VIEW android.intent.action.VIEW ACTION_SENDTO SMS android.intent.action.SENDTO"	""	""	""	""	""	""	""	""	""	""	""	"android.content.cts.ContentProviderTest"	"testAccessReadPermission"	"CtsContentTestCases"	""	""	""	"/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java"	""	"public void testAccessReadPermission() {
        MockContentProvider mockContentProvider = new MockContentProvider();
        assertNull(mockContentProvider.getReadPermission());

        String expected = ""android.permission.READ_CONTACTS"";
        mockContentProvider.setReadPermissionWrapper(expected);
        assertEquals(expected, mockContentProvider.getReadPermission());

        expected = ""android.permission.READ_SMS"";
        mockContentProvider.setReadPermissionWrapper(expected);
        assertEquals(expected, mockContentProvider.getReadPermission());

        mockContentProvider.setReadPermissionWrapper(null);
        assertNull(mockContentProvider.getReadPermission());
    }"	""	""	"SMS"	""
