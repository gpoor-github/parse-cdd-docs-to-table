"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-10"	"7.4.2/C-1-10"	"07040200.670110"	"""C-1-10] MUST randomize Probe request sequence number between the last probe request of a scan and the first probe request of the next scan."""	""	"wifi"	""	"probe scan"	""	""	""	""	""	""	""	"android.net.wifi.cts.WifiMigrationTest"	"Intent"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 25), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/CoexUnsafeChannelTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/SupplicantStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 1)]"	"[('(12,scan,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(13,probe,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(191,scan,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(8,scan,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(2,scan,/android/net/wifi/cts/CoexUnsafeChannelTest.java)', 1), ('(5,scan,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(2,scan,/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java)', 1), ('(8,scan,/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java)', 1), ('(67,scan,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(53,scan,/android/net/wifi/cts/TestHelper.java)', 1), ('(3,scan,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(21,scan,/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java)', 1), ('(1,scan,/android/net/wifi/cts/SupplicantStateTest.java)', 1), ('(6,scan,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(86,scan,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(1,scan,/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java)', 1), ('(7,scan,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(27,scan,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(88,scan,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(2,scan,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(37,scan,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(27,scan,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(28,scan,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(39,scan,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(14,scan,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(13,scan,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(7,scan,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(8,scan,/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java)', 1), ('(4,scan,/android/net/wifi/cts/WifiMigrationTest.java)', 1)]"	"[('([12:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[scan]:[12]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([5:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[probe]:[5]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([8:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[probe]:[8]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([35:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[35]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[    /**     * Test wifi scanning when Wifi is off and location scanning is turned on.     */   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[13]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[19]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[urn getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[11]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[10]:method_text:[not turned off when the screen turns off while wifi is enabled.     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[9]:method_text:[e platform supports a reasonable number of suggestions per app.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[1]:method_text:[ /** Test that PNO scans reconnects us when the device is disconnected and the screen is off. */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[4]:method_text:[r#setScanAlwaysAvailable(boolean)} &     * {@link WifiManager#isScanAlwaysAvailable()}.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[8]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[3]:method_text:[ }    /**     * Test that the wifi country code is either null, or a length-2 string.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[8]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[2]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[9]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[17]:method_text:[pty());    }    /**     * Tests {@link WifiManager#disableEphemeralNetwork(String)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[4]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[scan]:[6]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([8:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[scan]:[8]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([2:/android/net/wifi/cts/CoexUnsafeChannelTest.java]:[scan]:[2]:method_text:[D_24_GHZ;    final static int TEST_CHANNEL = 6;    final static int TEST_POWER_CAP_DBM = -50;   ])', 1), ('([3:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[scan]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[scan]:[2]:method_text:[Result result = new NativeScanResult();        assertThat(result.isAssociated()).isFalse();    }}])', 1), ('([2:/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java]:[scan]:[2]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([8:/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java]:[scan]:[8]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([67:/android/net/wifi/rtt/cts/TestBase.java]:[scan]:[67]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([53:/android/net/wifi/cts/TestHelper.java]:[scan]:[53]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([1:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[scan]:[1]:method_text:[s the string was not logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([2:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[scan]:[2]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([1:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[1]:method_text:[} object can be serialized and deserialized,     *  while keeping its values unchanged.     */   ])', 1), ('([6:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[6]:method_text:[apa.hashCode());    }    /** Test mapping wifi standard support into channel width support */   ])', 1), ('([14:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[scan]:[14]:method_text:[;        assertThat(capa.isChannelWidthSupported(ScanResult.CHANNEL_WIDTH_80MHZ)).isTrue();    }}])', 1), ('([1:/android/net/wifi/cts/SupplicantStateTest.java]:[scan]:[1]:method_text:[NINITIALIZED));        assertFalse(SupplicantState.isValidState(SupplicantState.INVALID));    }}])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[scan]:[1]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([5:/android/net/wifi/cts/WifiInfoTest.java]:[scan]:[5]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([21:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[21]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([20:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[20]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([13:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[13]:method_text:[           }        }    }    /** Test that the copy constructor copies fields correctly. */   ])', 1), ('([20:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[20]:method_text:[lTo(TEST_FREQUENCY);        assertThat(scanResult2.timestamp).isEqualTo(TEST_TIMESTAMP);    }   ])', 1), ('([12:/android/net/wifi/cts/ScanResultTest.java]:[scan]:[12]:method_text:[sidQuoted);        assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());    }}])', 1), ('([1:/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java]:[scan]:[1]:method_text:[equest_unavailable,                R.string.wifi_test_network_request_unavailable_info, 0);    }}])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[scan]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([18:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[scan]:[18]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([9:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[scan]:[9]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([88:/com/android/cts/verifier/wifi/TestUtils.java]:[scan]:[88]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), (""([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[scan]:[2]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([37:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[scan]:[37]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([10:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[10]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[1]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[scan]:[4]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([28:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[scan]:[28]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([23:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[23]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[n()            throws Exception {        triggerScanFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[        throws Exception {        retrieveScanResultsFgActivityAndAssertStatusIs(false);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[scan]:[2]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[8]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[4]:method_text:[the device (that     * can provide internet connectivity) when the request is released.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[scan]:[2]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[scan]:[1]:method_text:[tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(mContext));    }   ])', 1), ('([12:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[scan]:[12]:method_text:[R_TKIP));        assertThat(securityType.groupCipher).isEqualTo(ScanResult.CIPHER_CCMP);    }   ])', 1), ('([7:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[scan]:[7]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([8:/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java]:[scan]:[8]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([4:/android/net/wifi/cts/WifiMigrationTest.java]:[scan]:[4]:method_text:[    /**     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.     */   ])', 1)]"	""	""	"[('scan', 78), ('probe', 2)]"	"[('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConvertBetweenChannelFrequencyMhz CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiDisabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPreferredNetworkOffloadSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTrafficStateCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartAndStopRestrictingAutoJoinToSubscriptionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetMatchingScanResults CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeScanResultTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity isEmpty None]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest testMappingWifiStandardIntoChannelWidthSupport CtsWifiTestCases]', 1), ('[android.net.wifi.cts.SupplicantStateTest testIsValidState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultTimeStamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultConstructors CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithPeerHandle CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForForegroundActivityWithNoLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testWifiBandInNetworkCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testOemSecurityTypeConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
