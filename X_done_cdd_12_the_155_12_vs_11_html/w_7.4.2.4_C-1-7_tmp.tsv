"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-7"	"7.4.2.4/C-1-7"	"07040204.670107"	"""C-1-7] MUST process the AAA server certificate as described in Hotspot 2.0 R3 specification."""	""	"wifi"	"AAA hotspot passpoint cert"	"passpoint cert hotspot"	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 33), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 23), ('android.net.wifi.cts.WifiHotspot2Test', 19), ('android.net.wifi.passpoint.cts.PasspointConfigurationTest', 16), ('android.net.wifi.cts.WifiEnterpriseConfigTest', 13), ('android.net.wifi.cts.ConfigParserTest', 5), ('android.net.wifi.cts.PpsMoParserTest', 4), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 2), ('android.net.wifi.cts.WifiConfigurationTest', 2), ('android.net.wifi.passpoint.cts.HomeSpTest', 2), ('android.net.wifi.rtt.cts.WifiRttTest', 1), ('android.net.wifi.cts.ScanResultTest', 1), ('android.net.wifi.cts.WifiInfoTest', 1), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 1), ('android.net.wifi.cts.WifiBackupRestoreTest', 1)]"	"[('notifyAll', 12), ('getContext', 8), ('setUp', 8), ('tearDown', 6), ('getClass', 6), ('getClassLoader', 6), ('StringBuilder', 6), ('readLine', 6), ('toString', 6), ('PasspointConfiguration', 6), ('HomeSp', 6), ('setUpClass', 4), ('getInstrumentation', 4), ('getPackageManager', 4), ('Object', 3), ('BroadcastReceiver', 3), ('getAction', 3), ('getScanResults', 3), ('getState', 3), ('getMeteredOverride', 3), ('generateConfigurationFromProfile', 3), ('Credential', 3), ('UserCredential', 3), ('CertificateCredential', 3), ('SimCredential', 3), ('generateConfigurationFromPPSMOTree', 3), ('getFriendlyName', 3), ('getFqdn', 3), ('printStackTrace', 1), ('hasWifi', 1)]"	"[('CtsWifiTestCases', 124)]"	""	"android.net.wifi.cts.WifiBackupRestoreTest"	"getFqdn"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 33), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 23), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 19), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1)]"	"[('(7,hotspot,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(62,cert,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(82,hotspot,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(6,cert,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(31,cert,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,hotspot,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(157,cert,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(4,cert,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(3,hotspot,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(79,cert,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(3,cert,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(6,hotspot,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(76,cert,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,hotspot,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(6,hotspot,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(21,cert,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(4,hotspot,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(19,cert,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(2,hotspot,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([6:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[6]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 4), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[hotspot]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([4:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[hotspot]:[4]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([5:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[5]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[1]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([4:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[4]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([52:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[52]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([22:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[22]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[1]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[12]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[4]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[1]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[4]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([26:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[cert]:[26]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[cert]:[5]:method_text:[fiedBy(specifier2)).isTrue();    }    /**     * Test WifiNetworkSpecifier redaction.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[hotspot]:[1]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([21:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[21]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([58:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[58]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[13]:method_text:[ases())                .isEqualTo(new String[]{CERTIFICATE_ALIAS1, CERTIFICATE_ALIAS2});    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[7]:method_text:[qualTo(CLIENT_CERTIFICATE_ALIAS);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[;        assertThat(config.getClientKeyPairAlias()).isEqualTo(CLIENT_CERTIFICATE_ALIAS);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[ow an IllegalArgumentException!"");        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[7]:method_text:[PI_CERT_SUITE);        assertThat(config.getWapiCertSuite()).isEqualTo(WAPI_CERT_SUITE);    }   ])', 1), ('([8:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[8]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[11]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([24:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[24]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[cert]:[4]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[hotspot]:[3]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([41:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[41]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[5]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[5]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiConfigurationTest.java]:[cert]:[1]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiConfigurationTest.java]:[cert]:[2]:method_text:[RT, configuration.getAuthType());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[hotspot]:[5]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[hotspot]:[1]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[5]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[1]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[4]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([12:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[12]:method_text:[redential)} method.     * <p>     * Test the Credential.SimCredential copy constructor     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[2]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[9]:method_text:[   * <p>     * Test that getting a set client certificate chain produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[9]:method_text:[ds.     * <p>     * Test that getting a set client private key produces the same value     */   ])', 1), ('([34:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[34]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[hotspot]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([6:/android/net/wifi/cts/ConfigParserTest.java]:[hotspot]:[6]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([20:/android/net/wifi/cts/ConfigParserTest.java]:[cert]:[20]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/ConfigParserTest.java]:[cert]:[1]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([4:/android/net/wifi/cts/PpsMoParserTest.java]:[hotspot]:[4]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([19:/android/net/wifi/cts/PpsMoParserTest.java]:[cert]:[19]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[hotspot]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1)]"	""	""	"[('passpoint', 57), ('cert', 43), ('hotspot', 24)]"	"[('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 3), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 3), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise192bit CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaCertificateAliases CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientCertificateAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientKeyPairAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetOcsp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetWapiCertSuite CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCertCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetCertificate CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialClientCertificateChain CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
