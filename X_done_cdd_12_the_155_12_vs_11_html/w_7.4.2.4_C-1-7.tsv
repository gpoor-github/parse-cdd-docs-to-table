"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-7"	"7.4.2.4/C-1-7"	"07040204.670107"	"""C-1-7] MUST process the AAA server certificate as described in Hotspot 2.0 R3 specification."""	""	"wifi"	"AAA"	"passpoint cert hotspot"	""	""	""	"[('android.autofillservice.cts.commontests.DatasetFilteringTest', 7), ('android.text.cts.SelectionTest', 4), ('android.content.pm.cts.ChecksumsTest', 3), ('android.widget.cts.TextViewTest', 3), ('android.jvmti.cts.JvmtiRedefineClassesTest', 3), ('dot.junit.opcodes.long_to_int.Test_long_to_int', 2), ('android.webkit.cts.WebSettingsTest', 2), ('android.autofillservice.cts.inline.InlineFilteringTest', 2), ('dot.junit.opcodes.return_void.d.T_return_void_1', 1), ('android.autofillservice.cts.dropdown.VirtualContainerActivityTest', 1), ('android.provider.cts.calendar.CalendarTest', 1), ('android.webkit.cts.TestWebServer', 1), ('android.hardware.lights.cts.LightsManagerTest', 1), ('android.os.cts.WorkSourceTest', 1), ('android.graphics.fonts.NativeSystemFontTest', 1), ('android.util.cts.LruCacheTest', 1), ('android.renderscript.cts.generated.TestMax', 1), ('android.text.cts.FontResourceTest', 1), ('android.security.cts.AmbiguousBundlesTest', 1), ('android.renderscript.cts.generated.TestClamp', 1), ('android.security.cts.CVE_2021_0691', 1), ('android.webkit.cts.CtsTestServer', 1), ('android.keystore.cts.MacTest', 1), ('android.renderscript.cts.generated.TestExp', 1), ('android.text.cts.SpannableStringBuilderTest', 1), ('android.content.cts.TestPagingContentProvider', 1), ('android.renderscript.cts.generated.TestConvert', 1), ('com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest', 1), ('android.keystore.cts.SignatureTest', 1), ('android.admin.cts.DevicePolicyManagerTest', 1), ('android.appsecurity.cts.v3rotationtests.V3RotationTest', 1), ('android.security.cts.RunningAppProcessInfoTest', 1), ('android.graphics.cts.ColorTest', 1), ('com.android.cts.splitapp.SplitAppTest', 1), ('android.text.cts.StaticLayoutTest', 1), ('android.text.cts.FontCoverageTest', 1), ('android.renderscript.cts.generated.TestCopysign', 1)]"	"[('destroy', 1689), ('toString', 1486), ('StringBuilder', 495), ('setUp', 15), ('tearDown', 12), ('ArgumentsFloatFloatFloat', 11), ('ArgumentsHalfHalfHalf', 11), ('ContentValues', 10), ('ArgumentsFloatFloatFloatFloat', 7), ('ArgumentsCharCharCharChar', 7), ('ArgumentsUcharUcharUcharUchar', 7), ('ArgumentsShortShortShortShort', 7), ('ArgumentsUshortUshortUshortUshort', 7), ('ArgumentsIntIntIntInt', 7), ('ArgumentsUintUintUintUint', 7), ('ArgumentsLongLongLongLong', 7), ('ArgumentsUlongUlongUlongUlong', 7), ('ArgumentsHalfHalfHalfHalf', 7), ('ArgumentsFloatFloat', 7), ('ArgumentsHalfHalf', 7), ('close', 5), ('shutdown', 5), ('getCount', 4), ('getBytes', 4), ('ArgumentsCharCharChar', 4), ('ArgumentsUcharUcharUchar', 4), ('ArgumentsShortShortShort', 4), ('ArgumentsUshortUshortUshort', 4), ('ArgumentsIntIntInt', 4), ('ArgumentsUintUintUint', 4), ('ArgumentsLongLongLong', 4), ('ArgumentsUlongUlongUlong', 4), ('UnsupportedOperationException', 4), ('getInstrumentation', 3), ('getTargetContext', 3), ('createCursor', 3), ('ArgumentsCharFloat', 3), ('ArgumentsUcharFloat', 3), ('ArgumentsShortFloat', 3), ('ArgumentsUshortFloat', 3), ('ArgumentsIntFloat', 3), ('ArgumentsUintFloat', 3), ('ArgumentsFloatChar', 3), ('ArgumentsCharChar', 3), ('ArgumentsUcharChar', 3), ('ArgumentsShortChar', 3), ('ArgumentsUshortChar', 3), ('ArgumentsIntChar', 3), ('ArgumentsUintChar', 3), ('ArgumentsFloatUchar', 3), ('ArgumentsCharUchar', 3), ('ArgumentsUcharUchar', 3), ('ArgumentsShortUchar', 3), ('ArgumentsUshortUchar', 3), ('ArgumentsIntUchar', 3), ('ArgumentsUintUchar', 3), ('ArgumentsFloatShort', 3), ('ArgumentsCharShort', 3), ('ArgumentsUcharShort', 3), ('ArgumentsShortShort', 3), ('ArgumentsUshortShort', 3), ('ArgumentsIntShort', 3), ('ArgumentsUintShort', 3), ('ArgumentsFloatUshort', 3), ('ArgumentsCharUshort', 3), ('ArgumentsUcharUshort', 3), ('ArgumentsShortUshort', 3), ('ArgumentsUshortUshort', 3), ('ArgumentsIntUshort', 3), ('ArgumentsUintUshort', 3), ('ArgumentsFloatInt', 3), ('ArgumentsCharInt', 3), ('ArgumentsUcharInt', 3), ('ArgumentsShortInt', 3), ('ArgumentsUshortInt', 3), ('ArgumentsIntInt', 3), ('ArgumentsUintInt', 3), ('ArgumentsFloatUint', 3), ('ArgumentsCharUint', 3), ('ArgumentsUcharUint', 3), ('ArgumentsShortUint', 3), ('ArgumentsUshortUint', 3), ('ArgumentsIntUint', 3), ('ArgumentsUintUint', 3), ('ArgumentsDoubleDouble', 3), ('ArgumentsLongDouble', 3), ('ArgumentsUlongDouble', 3), ('ArgumentsDoubleLong', 3), ('ArgumentsLongLong', 3), ('ArgumentsUlongLong', 3), ('ArgumentsDoubleUlong', 3), ('ArgumentsLongUlong', 3), ('ArgumentsUlongUlong', 3), ('ArgumentsDoubleFloat', 3), ('ArgumentsLongFloat', 3), ('ArgumentsUlongFloat', 3), ('ArgumentsDoubleChar', 3), ('ArgumentsLongChar', 3), ('ArgumentsUlongChar', 3), ('ArgumentsDoubleUchar', 3), ('ArgumentsLongUchar', 3), ('ArgumentsUlongUchar', 3), ('ArgumentsDoubleShort', 3), ('ArgumentsLongShort', 3), ('ArgumentsUlongShort', 3), ('ArgumentsDoubleUshort', 3), ('ArgumentsLongUshort', 3), ('ArgumentsUlongUshort', 3), ('ArgumentsDoubleInt', 3), ('ArgumentsLongInt', 3), ('ArgumentsUlongInt', 3), ('ArgumentsDoubleUint', 3), ('ArgumentsLongUint', 3), ('ArgumentsUlongUint', 3), ('ArgumentsFloatDouble', 3), ('ArgumentsCharDouble', 3), ('ArgumentsUcharDouble', 3), ('ArgumentsShortDouble', 3), ('ArgumentsUshortDouble', 3), ('ArgumentsIntDouble', 3), ('ArgumentsUintDouble', 3), ('ArgumentsFloatLong', 3), ('ArgumentsCharLong', 3), ('ArgumentsUcharLong', 3), ('ArgumentsShortLong', 3), ('ArgumentsUshortLong', 3), ('ArgumentsIntLong', 3), ('ArgumentsUintLong', 3), ('ArgumentsFloatUlong', 3), ('ArgumentsCharUlong', 3), ('ArgumentsUcharUlong', 3), ('ArgumentsShortUlong', 3), ('ArgumentsUshortUlong', 3), ('ArgumentsIntUlong', 3), ('ArgumentsUintUlong', 3), ('ArgumentsHalfFloat', 3), ('ArgumentsHalfDouble', 3), ('ArgumentsHalfChar', 3), ('ArgumentsHalfUchar', 3), ('ArgumentsHalfShort', 3), ('ArgumentsHalfUshort', 3), ('ArgumentsHalfInt', 3), ('ArgumentsHalfUint', 3), ('ArgumentsHalfLong', 3), ('ArgumentsHalfUlong', 3), ('ArgumentsFloatHalf', 3), ('ArgumentsDoubleHalf', 3), ('ArgumentsCharHalf', 3), ('ArgumentsUcharHalf', 3), ('ArgumentsShortHalf', 3), ('ArgumentsUshortHalf', 3), ('ArgumentsIntHalf', 3), ('ArgumentsUintHalf', 3), ('ArgumentsLongHalf', 3), ('ArgumentsUlongHalf', 3), ('updateTitle', 3), ('getName', 3), ('moveToFirst', 2), ('build', 2), ('getContentResolver', 2), ('start', 2), ('getLocalPort', 2), ('accept', 2), ('join', 2), ('getResources', 2), ('getContext', 2), ('newRow', 2), ('run', 1), ('CalendarHelper', 1), ('SyncStateHelper', 1), ('EventHelper', 1), ('AttendeeHelper', 1), ('ColorHelper', 1), ('ReminderHelper', 1), ('ExtendedPropertiesHelper', 1), ('buildUpon', 1), ('Object', 1), ('connect', 1), ('getInputStream', 1), ('intValue', 1), ('getBaseUrl', 1), ('openConnection', 1), ('checkMaxFloatFloatFloat', 1), ('checkMaxFloat2Float2Float2', 1), ('checkMaxFloat3Float3Float3', 1), ('checkMaxFloat4Float4Float4', 1), ('checkMaxHalfHalfHalf', 1), ('checkMaxHalf2Half2Half2', 1), ('checkMaxHalf3Half3Half3', 1), ('checkMaxHalf4Half4Half4', 1), ('checkMaxFloat2FloatFloat2', 1), ('checkMaxFloat3FloatFloat3', 1), ('checkMaxFloat4FloatFloat4', 1), ('checkMaxHalf2HalfHalf2', 1), ('checkMaxHalf3HalfHalf3', 1), ('checkMaxHalf4HalfHalf4', 1), ('checkMaxCharCharChar', 1), ('checkMaxChar2Char2Char2', 1), ('checkMaxChar3Char3Char3', 1), ('checkMaxChar4Char4Char4', 1), ('checkMaxUcharUcharUchar', 1), ('checkMaxUchar2Uchar2Uchar2', 1), ('checkMaxUchar3Uchar3Uchar3', 1), ('checkMaxUchar4Uchar4Uchar4', 1), ('checkMaxShortShortShort', 1), ('checkMaxShort2Short2Short2', 1), ('checkMaxShort3Short3Short3', 1), ('checkMaxShort4Short4Short4', 1), ('checkMaxUshortUshortUshort', 1), ('checkMaxUshort2Ushort2Ushort2', 1), ('checkMaxUshort3Ushort3Ushort3', 1), ('checkMaxUshort4Ushort4Ushort4', 1), ('checkMaxIntIntInt', 1), ('checkMaxInt2Int2Int2', 1), ('checkMaxInt3Int3Int3', 1), ('checkMaxInt4Int4Int4', 1), ('checkMaxUintUintUint', 1), ('checkMaxUint2Uint2Uint2', 1), ('checkMaxUint3Uint3Uint3', 1), ('checkMaxUint4Uint4Uint4', 1), ('checkMaxLongLongLong', 1), ('checkMaxLong2Long2Long2', 1), ('checkMaxLong3Long3Long3', 1), ('checkMaxLong4Long4Long4', 1), ('checkMaxUlongUlongUlong', 1), ('checkMaxUlong2Ulong2Ulong2', 1), ('checkMaxUlong3Ulong3Ulong3', 1), ('checkMaxUlong4Ulong4Ulong4', 1), ('checkClampFloatFloatFloatFloat', 1), ('checkClampFloat2Float2Float2Float2', 1), ('checkClampFloat3Float3Float3Float3', 1), ('checkClampFloat4Float4Float4Float4', 1), ('checkClampFloat2FloatFloatFloat2', 1), ('checkClampFloat3FloatFloatFloat3', 1), ('checkClampFloat4FloatFloatFloat4', 1), ('checkClampCharCharCharChar', 1), ('checkClampChar2Char2Char2Char2', 1), ('checkClampChar3Char3Char3Char3', 1), ('checkClampChar4Char4Char4Char4', 1), ('checkClampUcharUcharUcharUchar', 1), ('checkClampUchar2Uchar2Uchar2Uchar2', 1), ('checkClampUchar3Uchar3Uchar3Uchar3', 1), ('checkClampUchar4Uchar4Uchar4Uchar4', 1), ('checkClampShortShortShortShort', 1), ('checkClampShort2Short2Short2Short2', 1), ('checkClampShort3Short3Short3Short3', 1), ('checkClampShort4Short4Short4Short4', 1), ('checkClampUshortUshortUshortUshort', 1), ('checkClampUshort2Ushort2Ushort2Ushort2', 1), ('checkClampUshort3Ushort3Ushort3Ushort3', 1), ('checkClampUshort4Ushort4Ushort4Ushort4', 1), ('checkClampIntIntIntInt', 1), ('checkClampInt2Int2Int2Int2', 1), ('checkClampInt3Int3Int3Int3', 1), ('checkClampInt4Int4Int4Int4', 1), ('checkClampUintUintUintUint', 1), ('checkClampUint2Uint2Uint2Uint2', 1), ('checkClampUint3Uint3Uint3Uint3', 1), ('checkClampUint4Uint4Uint4Uint4', 1), ('checkClampLongLongLongLong', 1), ('checkClampLong2Long2Long2Long2', 1), ('checkClampLong3Long3Long3Long3', 1), ('checkClampLong4Long4Long4Long4', 1), ('checkClampUlongUlongUlongUlong', 1), ('checkClampUlong2Ulong2Ulong2Ulong2', 1), ('checkClampUlong3Ulong3Ulong3Ulong3', 1), ('checkClampUlong4Ulong4Ulong4Ulong4', 1), ('checkClampChar2CharCharChar2', 1), ('checkClampChar3CharCharChar3', 1), ('checkClampChar4CharCharChar4', 1), ('checkClampUchar2UcharUcharUchar2', 1), ('checkClampUchar3UcharUcharUchar3', 1), ('checkClampUchar4UcharUcharUchar4', 1), ('checkClampShort2ShortShortShort2', 1), ('checkClampShort3ShortShortShort3', 1), ('checkClampShort4ShortShortShort4', 1), ('checkClampUshort2UshortUshortUshort2', 1), ('checkClampUshort3UshortUshortUshort3', 1), ('checkClampUshort4UshortUshortUshort4', 1), ('checkClampInt2IntIntInt2', 1), ('checkClampInt3IntIntInt3', 1), ('checkClampInt4IntIntInt4', 1), ('checkClampUint2UintUintUint2', 1), ('checkClampUint3UintUintUint3', 1), ('checkClampUint4UintUintUint4', 1), ('checkClampLong2LongLongLong2', 1), ('checkClampLong3LongLongLong3', 1), ('checkClampLong4LongLongLong4', 1), ('checkClampUlong2UlongUlongUlong2', 1), ('checkClampUlong3UlongUlongUlong3', 1), ('checkClampUlong4UlongUlongUlong4', 1), ('checkClampHalfHalfHalfHalf', 1), ('checkClampHalf2Half2Half2Half2', 1), ('checkClampHalf3Half3Half3Half3', 1), ('checkClampHalf4Half4Half4Half4', 1), ('checkClampHalf2HalfHalfHalf2', 1), ('checkClampHalf3HalfHalfHalf3', 1), ('checkClampHalf4HalfHalfHalf4', 1), ('CtsTrustManager', 1), ('getAssets', 1), ('getSingleton', 1), ('shutDownOnClientThread', 1), ('checkExpFloatFloat', 1), ('checkExpFloat2Float2', 1), ('checkExpFloat3Float3', 1), ('checkExpFloat4Float4', 1), ('checkExpHalfHalf', 1), ('checkExpHalf2Half2', 1), ('checkExpHalf3Half3', 1), ('checkExpHalf4Half4', 1), ('onCreate', 1), ('getExtras', 1), ('Bundle', 1), ('checkConvertFloat2Float2', 1), ('checkConvertFloat3Float3', 1), ('checkConvertFloat4Float4', 1), ('checkConvertChar2Float2', 1), ('checkConvertChar3Float3', 1), ('checkConvertChar4Float4', 1), ('checkConvertUchar2Float2', 1), ('checkConvertUchar3Float3', 1), ('checkConvertUchar4Float4', 1), ('checkConvertShort2Float2', 1), ('checkConvertShort3Float3', 1), ('checkConvertShort4Float4', 1), ('checkConvertUshort2Float2', 1), ('checkConvertUshort3Float3', 1), ('checkConvertUshort4Float4', 1), ('checkConvertInt2Float2', 1), ('checkConvertInt3Float3', 1), ('checkConvertInt4Float4', 1), ('checkConvertUint2Float2', 1), ('checkConvertUint3Float3', 1), ('checkConvertUint4Float4', 1), ('checkConvertFloat2Char2', 1), ('checkConvertFloat3Char3', 1), ('checkConvertFloat4Char4', 1), ('checkConvertChar2Char2', 1), ('checkConvertChar3Char3', 1), ('checkConvertChar4Char4', 1), ('checkConvertUchar2Char2', 1), ('checkConvertUchar3Char3', 1), ('checkConvertUchar4Char4', 1), ('checkConvertShort2Char2', 1), ('checkConvertShort3Char3', 1), ('checkConvertShort4Char4', 1), ('checkConvertUshort2Char2', 1), ('checkConvertUshort3Char3', 1), ('checkConvertUshort4Char4', 1), ('checkConvertInt2Char2', 1), ('checkConvertInt3Char3', 1), ('checkConvertInt4Char4', 1), ('checkConvertUint2Char2', 1), ('checkConvertUint3Char3', 1), ('checkConvertUint4Char4', 1), ('checkConvertFloat2Uchar2', 1), ('checkConvertFloat3Uchar3', 1), ('checkConvertFloat4Uchar4', 1), ('checkConvertChar2Uchar2', 1), ('checkConvertChar3Uchar3', 1), ('checkConvertChar4Uchar4', 1), ('checkConvertUchar2Uchar2', 1), ('checkConvertUchar3Uchar3', 1), ('checkConvertUchar4Uchar4', 1), ('checkConvertShort2Uchar2', 1), ('checkConvertShort3Uchar3', 1), ('checkConvertShort4Uchar4', 1), ('checkConvertUshort2Uchar2', 1), ('checkConvertUshort3Uchar3', 1), ('checkConvertUshort4Uchar4', 1), ('checkConvertInt2Uchar2', 1), ('checkConvertInt3Uchar3', 1), ('checkConvertInt4Uchar4', 1), ('checkConvertUint2Uchar2', 1), ('checkConvertUint3Uchar3', 1), ('checkConvertUint4Uchar4', 1), ('checkConvertFloat2Short2', 1), ('checkConvertFloat3Short3', 1), ('checkConvertFloat4Short4', 1), ('checkConvertChar2Short2', 1), ('checkConvertChar3Short3', 1), ('checkConvertChar4Short4', 1), ('checkConvertUchar2Short2', 1), ('checkConvertUchar3Short3', 1), ('checkConvertUchar4Short4', 1), ('checkConvertShort2Short2', 1), ('checkConvertShort3Short3', 1), ('checkConvertShort4Short4', 1), ('checkConvertUshort2Short2', 1), ('checkConvertUshort3Short3', 1), ('checkConvertUshort4Short4', 1), ('checkConvertInt2Short2', 1), ('checkConvertInt3Short3', 1), ('checkConvertInt4Short4', 1), ('checkConvertUint2Short2', 1), ('checkConvertUint3Short3', 1), ('checkConvertUint4Short4', 1), ('checkConvertFloat2Ushort2', 1), ('checkConvertFloat3Ushort3', 1), ('checkConvertFloat4Ushort4', 1), ('checkConvertChar2Ushort2', 1), ('checkConvertChar3Ushort3', 1), ('checkConvertChar4Ushort4', 1), ('checkConvertUchar2Ushort2', 1), ('checkConvertUchar3Ushort3', 1), ('checkConvertUchar4Ushort4', 1), ('checkConvertShort2Ushort2', 1), ('checkConvertShort3Ushort3', 1), ('checkConvertShort4Ushort4', 1), ('checkConvertUshort2Ushort2', 1), ('checkConvertUshort3Ushort3', 1), ('checkConvertUshort4Ushort4', 1), ('checkConvertInt2Ushort2', 1), ('checkConvertInt3Ushort3', 1), ('checkConvertInt4Ushort4', 1), ('checkConvertUint2Ushort2', 1), ('checkConvertUint3Ushort3', 1), ('checkConvertUint4Ushort4', 1), ('checkConvertFloat2Int2', 1), ('checkConvertFloat3Int3', 1), ('checkConvertFloat4Int4', 1), ('checkConvertChar2Int2', 1), ('checkConvertChar3Int3', 1), ('checkConvertChar4Int4', 1), ('checkConvertUchar2Int2', 1), ('checkConvertUchar3Int3', 1), ('checkConvertUchar4Int4', 1), ('checkConvertShort2Int2', 1), ('checkConvertShort3Int3', 1), ('checkConvertShort4Int4', 1), ('checkConvertUshort2Int2', 1), ('checkConvertUshort3Int3', 1), ('checkConvertUshort4Int4', 1), ('checkConvertInt2Int2', 1), ('checkConvertInt3Int3', 1), ('checkConvertInt4Int4', 1), ('checkConvertUint2Int2', 1), ('checkConvertUint3Int3', 1), ('checkConvertUint4Int4', 1), ('checkConvertFloat2Uint2', 1), ('checkConvertFloat3Uint3', 1), ('checkConvertFloat4Uint4', 1), ('checkConvertChar2Uint2', 1), ('checkConvertChar3Uint3', 1), ('checkConvertChar4Uint4', 1), ('checkConvertUchar2Uint2', 1), ('checkConvertUchar3Uint3', 1), ('checkConvertUchar4Uint4', 1), ('checkConvertShort2Uint2', 1), ('checkConvertShort3Uint3', 1), ('checkConvertShort4Uint4', 1), ('checkConvertUshort2Uint2', 1), ('checkConvertUshort3Uint3', 1), ('checkConvertUshort4Uint4', 1), ('checkConvertInt2Uint2', 1), ('checkConvertInt3Uint3', 1), ('checkConvertInt4Uint4', 1), ('checkConvertUint2Uint2', 1), ('checkConvertUint3Uint3', 1), ('checkConvertUint4Uint4', 1), ('checkConvertDouble2Double2', 1), ('checkConvertDouble3Double3', 1), ('checkConvertDouble4Double4', 1), ('checkConvertLong2Double2', 1), ('checkConvertLong3Double3', 1), ('checkConvertLong4Double4', 1), ('checkConvertUlong2Double2', 1), ('checkConvertUlong3Double3', 1), ('checkConvertUlong4Double4', 1), ('checkConvertDouble2Long2', 1), ('checkConvertDouble3Long3', 1), ('checkConvertDouble4Long4', 1), ('checkConvertLong2Long2', 1), ('checkConvertLong3Long3', 1), ('checkConvertLong4Long4', 1), ('checkConvertUlong2Long2', 1), ('checkConvertUlong3Long3', 1), ('checkConvertUlong4Long4', 1), ('checkConvertDouble2Ulong2', 1), ('checkConvertDouble3Ulong3', 1), ('checkConvertDouble4Ulong4', 1), ('checkConvertLong2Ulong2', 1), ('checkConvertLong3Ulong3', 1), ('checkConvertLong4Ulong4', 1), ('checkConvertUlong2Ulong2', 1), ('checkConvertUlong3Ulong3', 1), ('checkConvertUlong4Ulong4', 1), ('checkConvertDouble2Float2', 1), ('checkConvertDouble3Float3', 1), ('checkConvertDouble4Float4', 1), ('checkConvertLong2Float2', 1), ('checkConvertLong3Float3', 1), ('checkConvertLong4Float4', 1), ('checkConvertUlong2Float2', 1), ('checkConvertUlong3Float3', 1), ('checkConvertUlong4Float4', 1), ('checkConvertDouble2Char2', 1), ('checkConvertDouble3Char3', 1), ('checkConvertDouble4Char4', 1), ('checkConvertLong2Char2', 1), ('checkConvertLong3Char3', 1), ('checkConvertLong4Char4', 1), ('checkConvertUlong2Char2', 1), ('checkConvertUlong3Char3', 1), ('checkConvertUlong4Char4', 1), ('checkConvertDouble2Uchar2', 1), ('checkConvertDouble3Uchar3', 1), ('checkConvertDouble4Uchar4', 1), ('checkConvertLong2Uchar2', 1), ('checkConvertLong3Uchar3', 1), ('checkConvertLong4Uchar4', 1), ('checkConvertUlong2Uchar2', 1), ('checkConvertUlong3Uchar3', 1), ('checkConvertUlong4Uchar4', 1), ('checkConvertDouble2Short2', 1), ('checkConvertDouble3Short3', 1), ('checkConvertDouble4Short4', 1), ('checkConvertLong2Short2', 1), ('checkConvertLong3Short3', 1), ('checkConvertLong4Short4', 1), ('checkConvertUlong2Short2', 1), ('checkConvertUlong3Short3', 1), ('checkConvertUlong4Short4', 1), ('checkConvertDouble2Ushort2', 1), ('checkConvertDouble3Ushort3', 1), ('checkConvertDouble4Ushort4', 1), ('checkConvertLong2Ushort2', 1), ('checkConvertLong3Ushort3', 1), ('checkConvertLong4Ushort4', 1), ('checkConvertUlong2Ushort2', 1), ('checkConvertUlong3Ushort3', 1), ('checkConvertUlong4Ushort4', 1), ('checkConvertDouble2Int2', 1), ('checkConvertDouble3Int3', 1), ('checkConvertDouble4Int4', 1), ('checkConvertLong2Int2', 1), ('checkConvertLong3Int3', 1), ('checkConvertLong4Int4', 1), ('checkConvertUlong2Int2', 1), ('checkConvertUlong3Int3', 1), ('checkConvertUlong4Int4', 1), ('checkConvertDouble2Uint2', 1), ('checkConvertDouble3Uint3', 1), ('checkConvertDouble4Uint4', 1), ('checkConvertLong2Uint2', 1), ('checkConvertLong3Uint3', 1), ('checkConvertLong4Uint4', 1), ('checkConvertUlong2Uint2', 1), ('checkConvertUlong3Uint3', 1), ('checkConvertUlong4Uint4', 1), ('checkConvertFloat2Double2', 1), ('checkConvertFloat3Double3', 1), ('checkConvertFloat4Double4', 1), ('checkConvertChar2Double2', 1), ('checkConvertChar3Double3', 1), ('checkConvertChar4Double4', 1), ('checkConvertUchar2Double2', 1), ('checkConvertUchar3Double3', 1), ('checkConvertUchar4Double4', 1), ('checkConvertShort2Double2', 1), ('checkConvertShort3Double3', 1), ('checkConvertShort4Double4', 1), ('checkConvertUshort2Double2', 1), ('checkConvertUshort3Double3', 1), ('checkConvertUshort4Double4', 1), ('checkConvertInt2Double2', 1), ('checkConvertInt3Double3', 1), ('checkConvertInt4Double4', 1), ('checkConvertUint2Double2', 1), ('checkConvertUint3Double3', 1), ('checkConvertUint4Double4', 1), ('checkConvertFloat2Long2', 1), ('checkConvertFloat3Long3', 1), ('checkConvertFloat4Long4', 1), ('checkConvertChar2Long2', 1), ('checkConvertChar3Long3', 1), ('checkConvertChar4Long4', 1), ('checkConvertUchar2Long2', 1), ('checkConvertUchar3Long3', 1), ('checkConvertUchar4Long4', 1), ('checkConvertShort2Long2', 1), ('checkConvertShort3Long3', 1), ('checkConvertShort4Long4', 1), ('checkConvertUshort2Long2', 1), ('checkConvertUshort3Long3', 1), ('checkConvertUshort4Long4', 1), ('checkConvertInt2Long2', 1), ('checkConvertInt3Long3', 1), ('checkConvertInt4Long4', 1), ('checkConvertUint2Long2', 1), ('checkConvertUint3Long3', 1), ('checkConvertUint4Long4', 1), ('checkConvertFloat2Ulong2', 1), ('checkConvertFloat3Ulong3', 1), ('checkConvertFloat4Ulong4', 1), ('checkConvertChar2Ulong2', 1), ('checkConvertChar3Ulong3', 1), ('checkConvertChar4Ulong4', 1), ('checkConvertUchar2Ulong2', 1), ('checkConvertUchar3Ulong3', 1), ('checkConvertUchar4Ulong4', 1), ('checkConvertShort2Ulong2', 1), ('checkConvertShort3Ulong3', 1), ('checkConvertShort4Ulong4', 1), ('checkConvertUshort2Ulong2', 1), ('checkConvertUshort3Ulong3', 1), ('checkConvertUshort4Ulong4', 1), ('checkConvertInt2Ulong2', 1), ('checkConvertInt3Ulong3', 1), ('checkConvertInt4Ulong4', 1), ('checkConvertUint2Ulong2', 1), ('checkConvertUint3Ulong3', 1), ('checkConvertUint4Ulong4', 1), ('checkConvertHalf2Half2', 1), ('checkConvertHalf3Half3', 1), ('checkConvertHalf4Half4', 1), ('checkConvertHalf2Float2', 1), ('checkConvertHalf3Float3', 1), ('checkConvertHalf4Float4', 1), ('checkConvertHalf2Double2', 1), ('checkConvertHalf3Double3', 1), ('checkConvertHalf4Double4', 1), ('checkConvertHalf2Char2', 1), ('checkConvertHalf3Char3', 1), ('checkConvertHalf4Char4', 1), ('checkConvertHalf2Uchar2', 1), ('checkConvertHalf3Uchar3', 1), ('checkConvertHalf4Uchar4', 1), ('checkConvertHalf2Short2', 1), ('checkConvertHalf3Short3', 1), ('checkConvertHalf4Short4', 1), ('checkConvertHalf2Ushort2', 1), ('checkConvertHalf3Ushort3', 1), ('checkConvertHalf4Ushort4', 1), ('checkConvertHalf2Int2', 1), ('checkConvertHalf3Int3', 1), ('checkConvertHalf4Int4', 1), ('checkConvertHalf2Uint2', 1), ('checkConvertHalf3Uint3', 1), ('checkConvertHalf4Uint4', 1), ('checkConvertHalf2Long2', 1), ('checkConvertHalf3Long3', 1), ('checkConvertHalf4Long4', 1), ('checkConvertHalf2Ulong2', 1), ('checkConvertHalf3Ulong3', 1), ('checkConvertHalf4Ulong4', 1), ('checkConvertFloat2Half2', 1), ('checkConvertFloat3Half3', 1), ('checkConvertFloat4Half4', 1), ('checkConvertDouble2Half2', 1), ('checkConvertDouble3Half3', 1), ('checkConvertDouble4Half4', 1), ('checkConvertChar2Half2', 1), ('checkConvertChar3Half3', 1), ('checkConvertChar4Half4', 1), ('checkConvertUchar2Half2', 1), ('checkConvertUchar3Half3', 1), ('checkConvertUchar4Half4', 1), ('checkConvertShort2Half2', 1), ('checkConvertShort3Half3', 1), ('checkConvertShort4Half4', 1), ('checkConvertUshort2Half2', 1), ('checkConvertUshort3Half3', 1), ('checkConvertUshort4Half4', 1), ('checkConvertInt2Half2', 1), ('checkConvertInt3Half3', 1), ('checkConvertInt4Half4', 1), ('checkConvertUint2Half2', 1), ('checkConvertUint3Half3', 1), ('checkConvertUint4Half4', 1), ('checkConvertLong2Half2', 1), ('checkConvertLong3Half3', 1), ('checkConvertLong4Half4', 1), ('checkConvertUlong2Half2', 1), ('checkConvertUlong3Half3', 1), ('checkConvertUlong4Half4', 1), ('getNetworkImageHtml', 1), ('getPackage', 1), ('getSimpleName', 1), ('getReceiverComponent', 1), ('getPackageManager', 1), ('getProfileOwnerComponent', 1), ('flattenToString', 1), ('resourceColor', 1), ('TypedValue', 1), ('getDeclaredFields', 1), ('getDeclaredAnnotations', 1), ('clearTransformations', 1), ('getDecoder', 1), ('Start', 1), ('HashMap', 1), ('Builder', 1), ('toLanguageTag', 1), ('checkCopysignFloatFloatFloat', 1), ('checkCopysignFloat2Float2Float2', 1), ('checkCopysignFloat3Float3Float3', 1), ('checkCopysignFloat4Float4Float4', 1), ('checkCopysignHalfHalfHalf', 1), ('checkCopysignHalf2Half2Half2', 1), ('checkCopysignHalf3Half3Half3', 1), ('checkCopysignHalf4Half4Half4', 1)]"	"[('CtsAutoFillServiceTestCases', 10), ('CtsTextTestCases', 8), ('CtsRenderscriptTestCases', 5), ('CtsContentTestCases', 4), ('CtsWidgetTestCases', 3), ('CtsGraphicsTestCases', 2), ('CtsSecurityTestCases', 2), ('CtsKeystoreTestCases', 2), ('CtsWebkitTestCases', 2), ('CtsCalendarProviderTestCases', 1), ('CtsHardwareTestCases', 1), ('CtsUtilTestCases', 1), ('CtsSecurityBulletinHostTestCases', 1), ('CtsAdminTestCases', 1)]"	""	"android.net.wifi.cts.WifiBackupRestoreTest"	"getFqdn"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 33), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 23), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 19), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 1)]"	"[('(7,hotspot,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(62,cert,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(82,hotspot,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(6,cert,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(31,cert,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,hotspot,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(157,cert,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(4,cert,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(3,hotspot,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(79,cert,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(3,cert,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(6,hotspot,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(76,cert,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,hotspot,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(6,hotspot,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(21,cert,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(4,hotspot,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(19,cert,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(2,hotspot,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([6:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[6]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 4), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[hotspot]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([4:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[hotspot]:[4]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([5:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[5]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[1]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([4:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[4]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([52:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[cert]:[52]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([22:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[22]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[1]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[12]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[3]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[4]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[6]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[hotspot]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[1]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[cert]:[4]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([26:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[cert]:[26]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[cert]:[5]:method_text:[fiedBy(specifier2)).isTrue();    }    /**     * Test WifiNetworkSpecifier redaction.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[hotspot]:[1]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([21:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[21]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([58:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[58]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[13]:method_text:[ases())                .isEqualTo(new String[]{CERTIFICATE_ALIAS1, CERTIFICATE_ALIAS2});    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[7]:method_text:[qualTo(CLIENT_CERTIFICATE_ALIAS);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[;        assertThat(config.getClientKeyPairAlias()).isEqualTo(CLIENT_CERTIFICATE_ALIAS);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[ow an IllegalArgumentException!"");        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[7]:method_text:[PI_CERT_SUITE);        assertThat(config.getWapiCertSuite()).isEqualTo(WAPI_CERT_SUITE);    }   ])', 1), ('([8:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[8]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[11]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[2]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([24:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[cert]:[24]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[cert]:[4]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[hotspot]:[3]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([41:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[41]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[5]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[cert]:[5]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiConfigurationTest.java]:[cert]:[1]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiConfigurationTest.java]:[cert]:[2]:method_text:[RT, configuration.getAuthType());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[hotspot]:[5]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[hotspot]:[1]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[5]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[1]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[4]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([12:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[12]:method_text:[redential)} method.     * <p>     * Test the Credential.SimCredential copy constructor     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[2]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[9]:method_text:[   * <p>     * Test that getting a set client certificate chain produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[9]:method_text:[ds.     * <p>     * Test that getting a set client private key produces the same value     */   ])', 1), ('([34:/android/net/wifi/cts/WifiHotspot2Test.java]:[cert]:[34]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[hotspot]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([6:/android/net/wifi/cts/ConfigParserTest.java]:[hotspot]:[6]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([20:/android/net/wifi/cts/ConfigParserTest.java]:[cert]:[20]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/ConfigParserTest.java]:[cert]:[1]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([4:/android/net/wifi/cts/PpsMoParserTest.java]:[hotspot]:[4]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([19:/android/net/wifi/cts/PpsMoParserTest.java]:[cert]:[19]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[hotspot]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1)]"	""	""	"[('passpoint', 57), ('cert', 43), ('hotspot', 24)]"	"[('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 3), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 3), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise192bit CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaCertificateAliases CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientCertificateAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientKeyPairAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetOcsp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetWapiCertSuite CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCertCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetCertificate CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialClientCertificateChain CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
