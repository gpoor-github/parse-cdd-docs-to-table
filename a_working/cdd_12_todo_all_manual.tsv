"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"protected"	"Area"	"Shortened"	"Test Level"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"
"101:372410) 3.15  . Instant Apps"	"3.15"	"C-0-6"	"3.15/C-0-6"	"03150000.670006"	"""C-0-6] MUST provide a persistent user notification that can be collapsed while an Instant App is running in the foreground. This user notification MUST include that Instant Apps do not require installation and provide a user affordance that directs the user to the application info screen in Settings. For Instant Apps launched via web intents, as defined by using an intent with action set to Intent.ACTION_VIEW and with a scheme of &quot;http&quot; or &quot;https&quot;, an additional user affordance SHOULD allow the user not to launch the Instant App and launch the associated link with the configured web browser, if a browser is available on the device."""	""	""	"ACTION_VIEW Intent.ACTION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/settings/src/android/settings/cts/SettingsHandlerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContractIntentsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TabHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/userspacereboot/testapps/BasicTestApp/src/com/android/cts/userspacereboot/basic/BasicUserspaceRebootTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayActivityLaunchTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/RequiredComponentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/RemoteViewsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/upgrade/src/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/UsePermissionDiffCert/src/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/suspendapps/tests/src/android/suspendapps/cts/SuspendPackagesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/ui/control/src/android/taskswitching/control/cts/TaskSwitchingDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/DefaultDialerOperationsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/RequiredComponentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/app/src/android/app/cts/KeyguardInitialLockTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/BluetoothIntentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/harmfulappwarning/testapp/src/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/playback/HdmiCecRemoteControlPassThroughTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/openglperf/src/android/openglperf/cts/GlAppSwitchTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/trustedvoice/src/android/trustedvoice/cts/TrustedVoiceHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/BinderExploitTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/intent-check/src/android/signature/cts/intent/IntentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/os/src/android/os/cts/ProcfsHostTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/common/HdmiCecInvalidMessagesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/input/cts/tests/GoogleAtvReferenceRemoteControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_11.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneNumberUtilsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyProtectedBroadcastsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/NoActivityRelatedPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/bugreport/src/android/bugreport/cts/BugreportManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/IntentSenderRemovalTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/input/cts/tests/UsbVoiceCommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/ProtectedBroadcastsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneNumberUtilsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/userspacereboot/src/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java', 1)]"	"[('(2,Intent.ACTION,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(2,Intent.ACTION,/android/os/cts/RequiredComponentsTest.java)', 2), ('(2,Intent.ACTION,/android/telephony/cts/PhoneNumberUtilsTest.java)', 2), ('(1,Intent.ACTION,/android/app/cts/KeyguardInitialLockTest.java)', 1), ('(5,Intent.ACTION,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,Intent.ACTION,/android/content/cts/ClipDescriptionTest.java)', 1), ('(2,Intent.ACTION,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(10,Intent.ACTION,/com/android/cts/userspacereboot/basic/BasicUserspaceRebootTest.java)', 1), ('(1,Intent.ACTION,/android/view/inputmethod/cts/InputMethodManagerTest.java)', 1), ('(1,Intent.ACTION,/android/security/cts/BluetoothIntentsTest.java)', 1), ('(1,ACTION_VIEW,/com/android/cts/managedprofile/CrossProfileUtils.java)', 1), ('(1,Intent.ACTION,/com/android/cts/managedprofile/CrossProfileUtils.java)', 1), ('(1,Intent.ACTION,/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java)', 1), ('(4,ACTION_VIEW,/android/settings/cts/SettingsHandlerTest.java)', 1), ('(4,Intent.ACTION,/android/settings/cts/SettingsHandlerTest.java)', 1), ('(2,Intent.ACTION,/com/android/cts/launchertests/QuietModeTest.java)', 1), ('(4,Intent.ACTION,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(1,ACTION_VIEW,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(1,Intent.ACTION,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(1,Intent.ACTION,/android/hdmicec/cts/playback/HdmiCecRemoteControlPassThroughTest.java)', 1), ('(1,Intent.ACTION,/android/sample/cts/SampleHostJUnit4Test.java)', 1), ('(1,Intent.ACTION,/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java)', 1), ('(1,Intent.ACTION,/android/openglperf/cts/GlAppSwitchTest.java)', 1), ('(1,Intent.ACTION,/android/trustedvoice/cts/TrustedVoiceHostTest.java)', 1), ('(2,Intent.ACTION,/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java)', 1), ('(1,Intent.ACTION,/android/security/cts/BinderExploitTest.java)', 1), ('(1,Intent.ACTION,/android/signature/cts/intent/IntentTest.java)', 1), ('(5,Intent.ACTION,/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java)', 1), ('(2,ACTION_VIEW,/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java)', 1), ('(2,Intent.ACTION,/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java)', 1), ('(1,ACTION_VIEW,/android/provider/cts/contacts/ContactsContractIntentsTest.java)', 1), ('(3,Intent.ACTION,/android/provider/cts/contacts/ContactsContractIntentsTest.java)', 1), ('(12,Intent.ACTION,/android/appsecurity/cts/EphemeralTest.java)', 1), ('(1,Intent.ACTION,/android/os/cts/ProcfsHostTests.java)', 1), ('(1,Intent.ACTION,/android/hdmicec/cts/common/HdmiCecInvalidMessagesTest.java)', 1), ('(1,Intent.ACTION,/android/hardware/input/cts/tests/GoogleAtvReferenceRemoteControlTest.java)', 1), ('(1,ACTION_VIEW,/android/server/wm/MultiDisplayActivityLaunchTests.java)', 1), ('(1,Intent.ACTION,/android/server/wm/MultiDisplayActivityLaunchTests.java)', 1), ('(4,Intent.ACTION,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,ACTION_VIEW,/android/widget/cts/RemoteViewsTest.java)', 1), ('(1,Intent.ACTION,/android/widget/cts/RemoteViewsTest.java)', 1), ('(5,ACTION_VIEW,/android/os/cts/StrictModeTest.java)', 1), ('(6,Intent.ACTION,/android/os/cts/StrictModeTest.java)', 1), ('(1,Intent.ACTION,/android/security/cts/Poc17_11.java)', 1), ('(1,Intent.ACTION,/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java)', 1), ('(1,ACTION_VIEW,/android/widget/cts/TabHostTest.java)', 1), ('(3,Intent.ACTION,/android/widget/cts/TabHostTest.java)', 1), ('(9,ACTION_VIEW,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(8,Intent.ACTION,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(3,Intent.ACTION,/android/telephony/cts/TelephonyProtectedBroadcastsTest.java)', 1), ('(2,ACTION_VIEW,/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java)', 1), ('(2,Intent.ACTION,/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java)', 1), ('(1,Intent.ACTION,/android/permission/cts/NoActivityRelatedPermissionTest.java)', 1), ('(2,Intent.ACTION,/android/bugreport/cts/BugreportManagerTest.java)', 1), ('(3,ACTION_VIEW,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(3,Intent.ACTION,/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java)', 1), ('(1,ACTION_VIEW,/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java)', 1), ('(1,Intent.ACTION,/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java)', 1), ('(1,Intent.ACTION,/android/security/cts/IntentSenderRemovalTest.java)', 1), ('(8,Intent.ACTION,/android/suspendapps/cts/SuspendPackagesTest.java)', 1), ('(2,Intent.ACTION,/android/hardware/input/cts/tests/UsbVoiceCommandTest.java)', 1), ('(32,Intent.ACTION,/android/permission2/cts/ProtectedBroadcastsTest.java)', 1), ('(1,Intent.ACTION,/android/media/cts/MediaActivityTest.java)', 1), ('(6,Intent.ACTION,/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java)', 1), ('(1,ACTION_VIEW,/android/taskswitching/control/cts/TaskSwitchingDeviceTest.java)', 1), ('(1,Intent.ACTION,/android/taskswitching/control/cts/TaskSwitchingDeviceTest.java)', 1), ('(3,ACTION_VIEW,/com/android/cts/normalapp/ClientTest.java)', 1), ('(4,Intent.ACTION,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,Intent.ACTION,/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java)', 1), ('(2,Intent.ACTION,/android/telecom/cts/DefaultDialerOperationsTest.java)', 1)]"	"[('([1:/android/settings/cts/SettingsHandlerTest.java]:[ACTION_VIEW]:[1]:method_text:[ME_TYPE_ITEM);        assertThat(hasAtMostOneDefaultHandlerForIntent(intent)).isTrue();    }   ])', 4), ('([1:/android/settings/cts/SettingsHandlerTest.java]:[Intent.ACTION]:[1]:method_text:[ME_TYPE_ITEM);        assertThat(hasAtMostOneDefaultHandlerForIntent(intent)).isTrue();    }   ])', 4), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[Intent.ACTION]:[1]:method_text:[lse)                .setStrings(""android.intent.action.MAIN"")                .build());    }   ])', 2), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[Intent.ACTION]:[1]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 2), ('([1:/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java]:[ACTION_VIEW]:[1]:method_text:[                        new ComponentName(getContext(), MainActivity.class))).build())));    }   ])', 2), ('([1:/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java]:[Intent.ACTION]:[1]:method_text:[                        new ComponentName(getContext(), MainActivity.class))).build())));    }   ])', 2), ('([1:/android/provider/cts/contacts/ContactsContractIntentsTest.java]:[Intent.ACTION]:[1]:method_text:[ntent.setData(ContactsContract.Contacts.CONTENT_URI);        assertCanBeHandled(intent);    }   ])', 2), ('([1:/android/os/cts/RequiredComponentsTest.java]:[Intent.ACTION]:[1]:method_text:[l(""There must be exactly one installer; found "" + installers);        }    }    @AppModeFull   ])', 2), ('([1:/android/os/cts/RequiredComponentsTest.java]:[Intent.ACTION]:[1]:method_text:[privateFlags                & requiredHostAppPrivateFlags) == requiredHostAppPrivateFlags);    }}])', 2), ('([2:/android/telephony/cts/PhoneNumberUtilsTest.java]:[Intent.ACTION]:[2]:method_text:[rd != null) {                cr.delete(phoneRecord, null, null);            }        }    }   ])', 2), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[ACTION_VIEW]:[1]:method_text:[       fail(""activity started"");        } catch (ActivityNotFoundException expected) { }    }   ])', 2), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[Intent.ACTION]:[1]:method_text:[       fail(""activity started"");        } catch (ActivityNotFoundException expected) { }    }   ])', 2), ('([1:/android/app/cts/KeyguardInitialLockTest.java]:[Intent.ACTION]:[1]:method_text:[  + "" and must be revoked for security reasons ["" + validPkg + ""]"");            }        }    }}])', 1), ('([5:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[Intent.ACTION]:[5]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[Intent.ACTION]:[1]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[Intent.ACTION]:[2]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([3:/com/android/cts/userspacereboot/basic/BasicUserspaceRebootTest.java]:[Intent.ACTION]:[3]:method_text:[ * Tests that {@link PowerManager#isRebootingUserspaceSupported()} returns {@code true}.     */   ])', 1), ('([7:/com/android/cts/userspacereboot/basic/BasicUserspaceRebootTest.java]:[Intent.ACTION]:[7]:method_text:[, String[] selectionArgs) {            throw new UnsupportedOperationException();        }    }}])', 1), ('([1:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[Intent.ACTION]:[1]:method_text:[{            runShellCommand(""ime reset"");            mNeedsImeReset = false;        }    }   ])', 1), ('([1:/android/security/cts/BluetoothIntentsTest.java]:[Intent.ACTION]:[1]:method_text:[oadcastable except by the system (declare "" +        "" as protected-broadcast in manifest)"");  }}])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[ACTION_VIEW]:[1]:method_text:[ApplicationHidden(ADMIN_RECEIVER_COMPONENT, ri.activityInfo.packageName, true);        }    }   ])', 1), ('([1:/com/android/cts/managedprofile/CrossProfileUtils.java]:[Intent.ACTION]:[1]:method_text:[ApplicationHidden(ADMIN_RECEIVER_COMPONENT, ri.activityInfo.packageName, true);        }    }   ])', 1), ('([1:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[Intent.ACTION]:[1]:method_text:[    public void tearDown() {        mSampleActivityStartedReceiver.unregisterQuietly();    }   ])', 1), ('([2:/com/android/cts/launchertests/QuietModeTest.java]:[Intent.ACTION]:[2]:method_text:[ntationRegistry.getInstrumentation(),                LAUNCHER_ACTIVITY.flattenToString());    }}])', 1), ('([4:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[Intent.ACTION]:[4]:method_text:[iometricManager mBiometricManager;        private KeyguardManager mKeyguardManager;        private])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[ACTION_VIEW]:[1]:method_text:[nsure it.        builder.setNavigationBarColor(navigationBarColor);        return builder;    }}])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[Intent.ACTION]:[1]:method_text:[nsure it.        builder.setNavigationBarColor(navigationBarColor);        return builder;    }}])', 1), ('([1:/android/hdmicec/cts/playback/HdmiCecRemoteControlPassThroughTest.java]:[Intent.ACTION]:[1]:method_text:[NTROL_PRESSED> message followed     * immediately by a <USER_CONTROL_RELEASED> message.     */   ])', 1), ('([1:/android/sample/cts/SampleHostJUnit4Test.java]:[Intent.ACTION]:[1]:method_text:[ing was successfully logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([1:/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java]:[Intent.ACTION]:[1]:method_text:[ intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);        mContext.startActivity(intent);    }   ])', 1), ('([1:/android/openglperf/cts/GlAppSwitchTest.java]:[Intent.ACTION]:[1]:method_text:[an show) {        mActivityManager.moveTaskToFront(show ? mTaskIdReplica : mTaskIdSelf, 0);    }}])', 1), ('([1:/android/trustedvoice/cts/TrustedVoiceHostTest.java]:[Intent.ACTION]:[1]:method_text:[*     * Tests the app successfully unlocked the device.     *     * @throws Exception     */   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java]:[Intent.ACTION]:[2]:method_text:[_RECEIVER_COMPONENT, mContext.getPackageName(), new Bundle());        super.tearDown();    }   ])', 1), ('([1:/android/security/cts/BinderExploitTest.java]:[Intent.ACTION]:[1]:method_text:[(intent);    }    /**     * b/141496757     */    @SecurityTest(minPatchLevel = ""2019-11"")   ])', 1), ('([1:/android/signature/cts/intent/IntentTest.java]:[Intent.ACTION]:[1]:method_text:[nRegistry.getContext().getPackageManager();      intentWhitelist = getIntentWhitelist();    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[Intent.ACTION]:[1]:method_text:[und || action.actionIntent.equals(sendIntent);        }        assertTrue(actionFound);    }   ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[Intent.ACTION]:[2]:method_text:[nActionInvoked("""", action,                NotificationAssistantService.SOURCE_FROM_APP);    }   ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[Intent.ACTION]:[2]:method_text:[ new IOException(""Could not read stdout of command:\xa0"" + command, e);            }        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContractIntentsTest.java]:[ACTION_VIEW]:[1]:method_text:[ntent.setData(ContactsContract.Contacts.CONTENT_URI);        assertCanBeHandled(intent);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContractIntentsTest.java]:[Intent.ACTION]:[1]:method_text:[nt.setType(ContactsContract.Contacts.CONTENT_ITEM_TYPE);        assertCanBeHandled(intent);    }}])', 1), ('([12:/android/appsecurity/cts/EphemeralTest.java]:[Intent.ACTION]:[12]:method_text:[f (mIsUnsupportedDevice) {            return;        }        uninstallTestPackages();    }   ])', 1), ('([1:/android/os/cts/ProcfsHostTests.java]:[Intent.ACTION]:[1]:method_text:[le is in a reasonable   * shape, and the file is being updated.   *   * @throws Exception   */ ])', 1), ('([1:/android/hdmicec/cts/common/HdmiCecInvalidMessagesTest.java]:[Intent.ACTION]:[1]:method_text:[vice ignores every broadcast only message that is received as directly     * addressed.     */   ])', 1), ('([1:/android/hardware/input/cts/tests/GoogleAtvReferenceRemoteControlTest.java]:[Intent.ACTION]:[1]:method_text:[eHelper.waitForHomeActivityVisible();        wmStateHelper.assertHomeActivityVisible(true);    }}])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[ACTION_VIEW]:[1]:method_text:[     * matching task on some other display - that task will moved to the target display.     */   ])', 1), ('([1:/android/server/wm/MultiDisplayActivityLaunchTests.java]:[Intent.ACTION]:[1]:method_text:[     * matching task on some other display - that task will moved to the target display.     */   ])', 1), ('([4:/com/android/cts/appdataisolation/appa/AppATests.java]:[Intent.ACTION]:[4]:method_text:[b dir.        testCannotAccessAppBDataDir();        testCanNotAccessAppBExternalDirs();    }   ])', 1), ('([1:/android/widget/cts/RemoteViewsTest.java]:[ACTION_VIEW]:[1]:method_text:[assertTrue(newActivity instanceof MockURLSpanTestActivity);        newActivity.finish();    }   ])', 1), ('([1:/android/widget/cts/RemoteViewsTest.java]:[Intent.ACTION]:[1]:method_text:[assertTrue(newActivity instanceof MockURLSpanTestActivity);        newActivity.finish();    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[ACTION_VIEW]:[2]:method_text:[image/jpeg"");                    getContext().startActivity(intent);                });    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[ACTION_VIEW]:[2]:method_text:[                 getContext().startActivity(intent);                });    }    @AppModeFull   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[ACTION_VIEW]:[1]:method_text:[t.SECONDS);        assertTrue(v instanceof FileUriExposedViolation);    }    @AppModeInstant   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[Intent.ACTION]:[2]:method_text:[image/jpeg"");                    getContext().startActivity(intent);                });    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[Intent.ACTION]:[1]:method_text:[tThat(info.getStackTrace()).contains(badUri + "" exposed beyond app"");                });    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[Intent.ACTION]:[2]:method_text:[                 getContext().startActivity(intent);                });    }    @AppModeFull   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[Intent.ACTION]:[1]:method_text:[t.SECONDS);        assertTrue(v instanceof FileUriExposedViolation);    }    @AppModeInstant   ])', 1), ('([1:/android/security/cts/Poc17_11.java]:[Intent.ACTION]:[1]:method_text:[at        Thread.sleep(5000);        AdbUtils.assertNoCrashes(getDevice(), ""mediaserver"");    }}])', 1), ('([1:/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java]:[Intent.ACTION]:[1]:method_text:[DE_ON));        } finally {            mContext.unregisterReceiver(receiver);        }    }   ])', 1), ('([1:/android/widget/cts/TabHostTest.java]:[ACTION_VIEW]:[1]:method_text:[        mInstrumentation.waitForIdleSync();        activity.finish();    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/TabHostTest.java]:[Intent.ACTION]:[1]:method_text:[ no exception occurs when uses TabSpec.setContent(android.content.Intent) after setup().     */   ])', 1), ('([2:/android/widget/cts/TabHostTest.java]:[Intent.ACTION]:[2]:method_text:[        mInstrumentation.waitForIdleSync();        activity.finish();    }    @UiThreadTest   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[ACTION_VIEW]:[2]:method_text:[me,                    is(""com.android.cts.ephemeralapp1.EphemeralProvider""));        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[ACTION_VIEW]:[1]:method_text:[      null /*sortOrder*/);            assertThat(testCursor, is(nullValue()));        }    }   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[ACTION_VIEW]:[2]:method_text:[1));            assertThat(testCursor.getString(1), is(""InstantAppProvider""));        }    }   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[ACTION_VIEW]:[2]:method_text:[        @Override        public void onServiceDisconnected(ComponentName name) {        }    }}])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[Intent.ACTION]:[2]:method_text:[me,                    is(""com.android.cts.ephemeralapp1.EphemeralProvider""));        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[Intent.ACTION]:[1]:method_text:[      null /*sortOrder*/);            assertThat(testCursor, is(nullValue()));        }    }   ])', 1), ('([2:/com/android/cts/ephemeralapp1/ClientTest.java]:[Intent.ACTION]:[2]:method_text:[1));            assertThat(testCursor.getString(1), is(""InstantAppProvider""));        }    }   ])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[Intent.ACTION]:[1]:method_text:[        @Override        public void onServiceDisconnected(ComponentName name) {        }    }}])', 1), ('([3:/android/telephony/cts/TelephonyProtectedBroadcastsTest.java]:[Intent.ACTION]:[3]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([2:/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java]:[ACTION_VIEW]:[2]:method_text:[sertionFailedError expected) {            // okay        }        assertFalse(notThrown);    }}])', 1), ('([2:/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java]:[Intent.ACTION]:[2]:method_text:[sertionFailedError expected) {            // okay        }        assertFalse(notThrown);    }}])', 1), ('([1:/android/permission/cts/NoActivityRelatedPermissionTest.java]:[Intent.ACTION]:[1]:method_text:[= 1                && intent.getData() == null                && intent.getType() == null;    }}])', 1), ('([2:/android/bugreport/cts/BugreportManagerTest.java]:[Intent.ACTION]:[2]:method_text:[with future bugreports.        runShellCommand(""setprop ctl.stop "" + BUGREPORT_SERVICE);    }   ])', 1), ('([3:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[ACTION_VIEW]:[3]:method_text:[  return clip;    }    /**     * Validate behavior of persistable permission grants.     */   ])', 1), ('([3:/com/android/cts/usespermissiondiffcertapp/UriGrantsTest.java]:[Intent.ACTION]:[3]:method_text:[  return clip;    }    /**     * Validate behavior of persistable permission grants.     */   ])', 1), ('([1:/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java]:[ACTION_VIEW]:[1]:method_text:[       retryUntil(() -> MainActivity.getLastCreateTime() >= now, ""Activity not started"");    }   ])', 1), ('([1:/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java]:[Intent.ACTION]:[1]:method_text:[       retryUntil(() -> MainActivity.getLastCreateTime() >= now, ""Activity not started"");    }   ])', 1), ('([1:/android/security/cts/IntentSenderRemovalTest.java]:[Intent.ACTION]:[1]:method_text:[    assertNull(""com.android.settings.DebugIntentSender should not be a valid activity"", ri);    }}])', 1), ('([4:/android/suspendapps/cts/SuspendPackagesTest.java]:[Intent.ACTION]:[4]:method_text:[CKAGE_UNSUSPENDED + "" not reported"",                mTestAppInterface.awaitBroadcast());    }   ])', 1), ('([4:/android/suspendapps/cts/SuspendPackagesTest.java]:[Intent.ACTION]:[4]:method_text:[ved app extras different to the ones supplied"", extras2,                receivedExtras);    }   ])', 1), ('([2:/android/hardware/input/cts/tests/UsbVoiceCommandTest.java]:[Intent.ACTION]:[2]:method_text:[      setPackageState(true);        mExcludedPackages.clear();        super.tearDown();    }   ])', 1), ('([32:/android/permission2/cts/ProtectedBroadcastsTest.java]:[Intent.ACTION]:[32]:method_text:[K_OTHERS"",    };    /**     * Verify that protected broadcast actions can\'t be sent.     */   ])', 1), (""([1:/android/media/cts/MediaActivityTest.java]:[Intent.ACTION]:[1]:method_text:[    }    /**     * Tests whether volume key changes volume with the session's stream.     */   ])"", 1), ('([2:/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java]:[Intent.ACTION]:[2]:method_text:[:     *   {@link android.Manifest.permission#BROADCAST_PACKAGE_REMOVED}.     */    @SmallTest   ])', 1), ('([4:/android/permission/cts/NoBroadcastPackageRemovedPermissionTest.java]:[Intent.ACTION]:[4]:method_text:[      Intent intent = new Intent();        intent.setAction(action);        return intent;    }}])', 1), ('([1:/android/taskswitching/control/cts/TaskSwitchingDeviceTest.java]:[ACTION_VIEW]:[1]:method_text:[ore.release())));        mSemaphore.tryAcquire(TASK_SWITCHING_WAIT_TIME, TimeUnit.SECONDS);    }}])', 1), ('([1:/android/taskswitching/control/cts/TaskSwitchingDeviceTest.java]:[Intent.ACTION]:[1]:method_text:[ore.release())));        mSemaphore.tryAcquire(TASK_SWITCHING_WAIT_TIME, TimeUnit.SECONDS);    }}])', 1), ('([3:/com/android/cts/normalapp/ClientTest.java]:[ACTION_VIEW]:[3]:method_text:[r, is(nullValue()));        }    }    /** Tests getting changed packages for instant app. */   ])', 1), ('([3:/com/android/cts/normalapp/ClientTest.java]:[Intent.ACTION]:[3]:method_text:[r, is(nullValue()));        }    }    /** Tests getting changed packages for instant app. */   ])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[Intent.ACTION]:[1]:method_text:[rruptedException e) {                throw new RuntimeException(e);            }        }    }}])', 1), ('([1:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[Intent.ACTION]:[1]:method_text:[ hard reboot is triggered when a native process fails to stop in a     * given timeout.     */   ])', 1), ('([1:/android/telecom/cts/DefaultDialerOperationsTest.java]:[Intent.ACTION]:[1]:method_text:[}    /** The package handling Intent ACTION_DIAL should be the same package showing the UI. */   ])', 1), ('([1:/android/telecom/cts/DefaultDialerOperationsTest.java]:[Intent.ACTION]:[1]:method_text:[    /** The package handling Intent emergency dail should be the same package showing the UI. */   ])', 1)]"	""	""	"[('Intent.ACTION', 84), ('ACTION_VIEW', 26)]"	"[('[android.settings.cts.SettingsHandlerTest isTrue None]', 8), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testEnableSystemAppWithIntentLogged None]', 2), ('[com.android.cts.managedprofile.CrossProfileUtils testDisableAllBrowsers None]', 2), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testRestoreImeVisibility_noRestoreForHiddenWithForwardNav None]', 2), ('[android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest test02_createShortuctsOnPrimaryUser None]', 2), ('[android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest test03_createShortuctsOnManagedProfile None]', 2), ('[android.provider.cts.contacts.ContactsContractIntentsTest testViewContactDir None]', 2), ('[android.server.wm.MultiDisplayActivityLaunchTests testLaunchPendingActivityOnSecondaryDisplay None]', 2), ('[android.os.cts.RequiredComponentsTest testPackageInstallerPresent None]', 2), ('[android.os.cts.RequiredComponentsTest testNoPackageInstallerPresent None]', 2), ('[android.widget.cts.RemoteViewsTest testSetOnClickPendingIntent None]', 2), ('[android.os.cts.StrictModeTest testFileUriExposure None]', 2), ('[android.os.cts.StrictModeTest testContentUriWithoutPermission None]', 2), ('[android.os.cts.StrictModeTest testVmPenaltyListener None]', 2), ('[android.widget.cts.TabHostTest testSetup2 None]', 2), ('[android.telephony.cts.PhoneNumberUtilsTest testGetMethods None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testQuery None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testStartNormal None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testStartExposed04 None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testStartExposed05 None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testStartEphemeral None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testGetChangedPackages None]', 2), ('[android.content.pm.cts.shortcut.upgrade.ShortcutManagerPreUpgradeTest testPreUpgrade None]', 2), ('[android.content.pm.cts.shortcut.multiuser.ShortcutManagerSecondaryUserTest testCreateAndStart None]', 2), ('[android.taskswitching.control.cts.TaskSwitchingDeviceTest testMeasureTaskSwitching None]', 2), ('[com.android.cts.normalapp.ClientTest testStartEphemeral None]', 2), ('[android.app.cts.KeyguardInitialLockTest testSetInitialLockPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testProtectedBroadcasts None]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid None]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[com.android.cts.userspacereboot.basic.BasicUserspaceRebootTest isRebootingUserspaceSupported None]', 1), ('[com.android.cts.userspacereboot.basic.BasicUserspaceRebootTest exists None]', 1), ('[android.security.cts.BluetoothIntentsTest testDeclineIntent None]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest register None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy None]', 1), ('[com.android.cts.launchertests.QuietModeTest testTryDisableQuietMode None]', 1), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest setPassFailButtonClickListeners None]', 1), ('[android.hdmicec.cts.playback.HdmiCecRemoteControlPassThroughTest HdmiCecRemoteControlPassThroughTest None]', 1), ('[com.android.cts.deviceowner.UserControlDisabledPackagesTest testSetUserControlDisabledPackages None]', 1), ('[android.openglperf.cts.GlAppSwitchTest testGlActivitySwitchingSlow None]', 1), ('[android.signature.cts.intent.IntentTest getIntentWhitelist None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testAdjustNotification_smartActionKey None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnActionInvoked_methodExists None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnNotificationFeedbackReceived None]', 1), ('[android.provider.cts.contacts.ContactsContractIntentsTest testPickContactDir None]', 1), ('[android.provider.cts.contacts.ContactsContractIntentsTest testGetContentContactDir None]', 1), ('[android.appsecurity.cts.EphemeralTest isDeviceUnsupported None]', 1), ('[android.os.cts.ProcfsHostTests startTestApp None]', 1), ('[android.hardware.input.cts.tests.GoogleAtvReferenceRemoteControlTest testHomeKey None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testAppAUnlockDeviceAndVerifyCeDeExternalDataExist None]', 1), ('[android.os.cts.StrictModeTest testFileUriExposure_Chooser None]', 1), ('[android.security.cts.Poc17_11 testPocCVE_2017_0859 None]', 1), ('[com.android.cts.deviceowner.AirplaneModeRestrictionTest testAirplaneModeTurnedOffWhenRestrictionSet None]', 1), ('[android.widget.cts.TabHostTest testSetup1 None]', 1), ('[android.permission.cts.NoActivityRelatedPermissionTest testGetTask None]', 1), ('[android.bugreport.cts.BugreportManagerTest isHeadlessSystemUserMode None]', 1), ('[android.security.cts.IntentSenderRemovalTest testIntentSenderIntent None]', 1), ('[android.suspendapps.cts.SuspendPackagesTest testMyPackageSuspendedUnsuspended None]', 1), ('[android.suspendapps.cts.SuspendPackagesTest testUpdatingAppExtras None]', 1), ('[android.hardware.input.cts.tests.UsbVoiceCommandTest UsbVoiceCommandTest None]', 1), ('[android.media.cts.MediaActivityTest ArrayList None]', 1), ('[android.permission.cts.NoBroadcastPackageRemovedPermissionTest testSendOrRemoveStickyBroadcast None]', 1), ('[android.permission.cts.NoBroadcastPackageRemovedPermissionTest testSendBroadcast None]', 1), ('[com.android.cts.normalapp.ClientTest isFalse None]', 1), ('[com.android.cts.userspacereboot.host.UserspaceRebootHostTest testUserspaceRebootWithCheckpoint_verifyCeStorageIsUnlocked None]', 1), ('[android.telecom.cts.DefaultDialerOperationsTest testActionDialHandling None]', 1), ('[android.telecom.cts.DefaultDialerOperationsTest testDialerUI None]', 1)]"
"3.9.1"	"3.9.1"	"C-1-8"	"3.9.1/C-1-8"	"03090100.670108"	"""C-1-8] MUST send the ACTION_GET_PROVISIONING_MODE intent after device owner provisioning is triggered so that the DPC app can choose whether to become a Device Owner or a Profile Owner unless it can be determined from context that there is only one valid option (such as for NFC based provisioning where Profile Owner provisioning is not supported). && C-1-8] MUST send the ACTION_GET_PROVISIONING_MODE intent after device owner provisioning is triggered so that the DPC app can choose whether to become a Device Owner or a Profile Owner unless it can be determined from context that there is only one valid option (such as for NFC based provisioning where Profile Owner provisioning is not supported). | C-1-8] MUST send ACTION_MANAGED_PROFILE_PROVISIONED broadcast to the personal profile DPC when a Profile Owner is established, regardless of the provisioning method used. <h4 id=""392_managed_profile_support"" """	""	""	"ACTION_MANAGED_PROFILE_PROVISIONED DPC NFC ACTION_GET_PROVISIONING_MODE"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/LockTaskTest.java', 38), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NfcPermissionTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/UserControlDisabledPackagesTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/RemoteConferenceTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/NetworkResetTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/FileSystemPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/devicepolicy/ProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadCallbackTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/embms/cts/MbmsDownloadCallbackTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/quickaccesswallet/src/android/quickaccesswallet/cts/WalletServiceEventTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/PreferentialNetworkServiceTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SuspendPackageTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2022.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nfc/src/android/nfc/cts/NfcPreferredPaymentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2207.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2020_0073.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2038.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2020_0039.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/ServicePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2019.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2018_9558.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2018_9585.java', 1), ('/home/gpoor/cts-12-source/cts/tests/signature/lib/common/src/android/signature/cts/InterfaceChecker.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionParamsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2020_0037.java', 1)]"	"[('(3,DPC,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(6,NFC,/android/permission/cts/FileSystemPermissionTest.java)', 2), ('(10,NFC,/com/android/cts/devicepolicy/ManagedProfileTest.java)', 2), ('(5,DPC,/android/telephony/embms/cts/MbmsDownloadCallbackTest.java)', 2), ('(1,DPC,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(9,NFC,/android/ndef/cts/NdefTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2019_2022.java)', 1), ('(15,NFC,/android/nfc/cts/NfcPreferredPaymentTest.java)', 1), ('(1,DPC,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java)', 1), ('(6,DPC,/android/devicepolicy/cts/NetworkResetTest.java)', 1), ('(28,NFC,/android/permission/cts/NfcPermissionTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2019_2207.java)', 1), ('(1,DPC,/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java)', 1), ('(12,NFC,/android/app/cts/SystemFeaturesTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2020_0073.java)', 1), ('(1,NFC,/android/security/cts/CVE_2019_2038.java)', 1), ('(15,DPC,/android/devicepolicy/cts/UserControlDisabledPackagesTest.java)', 1), ('(2,NFC,/android/quickaccesswallet/cts/WalletServiceEventTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2020_0039.java)', 1), ('(4,DPC,/test/java/com/android/bedstead/nene/devicepolicy/ProfileOwnerTest.java)', 1), ('(127,DPC,/android/devicepolicy/cts/LockTaskTest.java)', 1), ('(2,DPC,/android/media/mediaparser/cts/MediaParserTest.java)', 1), ('(1,NFC,/android/permission/cts/ServicePermissionTest.java)', 1), ('(3,NFC,/android/security/cts/TestMedia.java)', 1), ('(2,DPC,/com/android/cts/delegate/CertInstallDelegateTest.java)', 1), ('(1,DPC,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java)', 1), ('(4,DPC,/android/devicepolicy/cts/PreferentialNetworkServiceTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2019_2019.java)', 1), ('(1,NFC,/android/security/cts/CVE_2018_9558.java)', 1), ('(1,NFC,/android/security/cts/CVE_2018_9585.java)', 1), ('(5,NFC,/android/text/cts/StaticLayoutTest.java)', 1), ('(30,NFC,/android/telecom/cts/RemoteConferenceTest.java)', 1), ('(4,DPC,/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java)', 1), ('(1,NFC,/android/signature/cts/InterfaceChecker.java)', 1), ('(7,NFC,/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java)', 1), ('(6,DPC,/android/net/ipsec/ike/cts/IkeSessionParamsTest.java)', 1), ('(9,NFC,/android/provider/cts/SettingsPanelTest.java)', 1), ('(4,DPC,/android/media/cts/DecoderTest.java)', 1), ('(3,DPC,/com/android/cts/deviceandprofileowner/SuspendPackageTest.java)', 1), ('(1,NFC,/android/security/cts/CVE_2020_0037.java)', 1)]"	"[('([3:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[3]:method_text:[tate.dpc().devicePolicyManager().setLockTaskPackages(originalLockTaskPackages);        }    }   ])', 10), ('([2:/android/permission/cts/FileSystemPermissionTest.java]:[NFC]:[2]:method_text:[   assertFileOwnedBy(f, ""nfc"");        assertFileOwnedByGroup(f, ""nfc"");    }    @MediumTest   ])', 6), ('([3:/android/permission/cts/NfcPermissionTest.java]:[NFC]:[3]:method_text:[* Requires Permission: {@link android.Manifest.permission#NFC_SET_CONTROLLER_ALWAYS_ON}.     */   ])', 5), ('([4:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[4]:method_text:[tate.dpc().devicePolicyManager().setLockTaskPackages(originalLockTaskPackages);        }    }   ])', 5), ('([3:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[3]:method_text:[kTaskPackages(                        originalLockTaskPackages);            }        }    }   ])', 4), ('([3:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[3]:method_text:[cyManager().setLockTaskPackages(                    originalLockTaskPackages);        }    }   ])', 4), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[DPC]:[3]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 2), ('([4:/android/devicepolicy/cts/UserControlDisabledPackagesTest.java]:[DPC]:[4]:method_text:[.setUserControlDisabledPackages(                    originalDisabledPackages);        }    }   ])', 2), ('([3:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[3]:method_text:[tate.dpc().devicePolicyManager().setLockTaskFeatures(originalLockTaskFeatures);        }    }   ])', 2), ('([6:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[6]:method_text:[kTaskFeatures(                        originalLockTaskFeatures);            }        }    }   ])', 2), ('([10:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[NFC]:[10]:method_text:[r(MANAGED_PROFILE_PKG, "".NfcTest"",                ""testNfcShareEnabled"", mParentUserId);    }   ])', 2), ('([1:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[1]:method_text:[  } catch (InterruptedException e) {                return null;            }        }    }   ])', 2), ('([2:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[2]:method_text:[oadService.FILE_INFO_1, stateArgs.arg2);        assertEquals(sampleInt, stateArgs.arg3);    }   ])', 2), ('([2:/android/telephony/embms/cts/MbmsDownloadCallbackTest.java]:[DPC]:[2]:method_text:[ull, 0, 0, 0, 0);        assertNull(progressCallback.waitOnProgressUpdated(SHORT_TIMEOUT));    }}])', 2), ('([6:/android/telecom/cts/RemoteConferenceTest.java]:[NFC]:[6]:method_text:[);        assertRemoteConferenceState(mRemoteConferenceObject, Connection.STATE_ACTIVE);    }   ])', 2), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[DPC]:[1]:method_text:[ationSupported() {        return mDevicePolicyManager.isUniqueDeviceAttestationSupported();    }}])', 1), ('([7:/android/ndef/cts/NdefTest.java]:[NFC]:[7]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[NFC]:[1]:method_text:[te)0xA2},                new NdefMessage(NdefRecord.createUri(""\\u00A2"")).toByteArray());    }   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[NFC]:[1]:method_text:[      assertEquals(null, new NdefRecord(NdefRecord.TNF_EMPTY, null, null, null).toUri());    }   ])', 1), ('([1:/android/security/cts/CVE_2019_2022.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2019-2022"", null, getDevice());    }}])', 1), ('([15:/android/nfc/cts/NfcPreferredPaymentTest.java]:[NFC]:[15]:method_text:[void tearDown() throws Exception {    }    /** Tests getAidsForPreferredPaymentService API */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DPC]:[1]:method_text:[N+, @{link IllegalArgumentException } should be thrown if the package     * is missing.     */   ])', 1), ('([1:/android/devicepolicy/cts/NetworkResetTest.java]:[DPC]:[1]:method_text:[      restoreUserRestriction(originalUserRestriction, DISALLOW_NETWORK_RESET);        }    }   ])', 1), ('([1:/android/devicepolicy/cts/NetworkResetTest.java]:[DPC]:[1]:method_text:[  restoreUserRestriction(originalUserRestriction, DISALLOW_CONFIG_PRIVATE_DNS);        }    }   ])', 1), ('([4:/android/devicepolicy/cts/NetworkResetTest.java]:[DPC]:[4]:method_text:[            sDeviceState.dpc().devicePolicyManager().clearUserRestriction(policy);        }    }}])', 1), ('([11:/android/permission/cts/NfcPermissionTest.java]:[NFC]:[11]:method_text:[* Requires Permission: {@link android.Manifest.permission#NFC_SET_CONTROLLER_ALWAYS_ON}.     */   ])', 1), ('([2:/android/permission/cts/NfcPermissionTest.java]:[NFC]:[2]:method_text:[ic void onControllerAlwaysOnChanged(boolean isEnabled) {            // Do nothing        }    }}])', 1), ('([1:/android/security/cts/CVE_2019_2207.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2019-2207"", null, getDevice());    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java]:[DPC]:[1]:method_text:[    fail(""Connectivity isn\'t available while expected: "" + message);            }        }    }}])', 1), ('([2:/android/app/cts/SystemFeaturesTest.java]:[NFC]:[2]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([10:/android/app/cts/SystemFeaturesTest.java]:[NFC]:[10]:method_text:[            assertNotAvailable(PackageManager.FEATURE_NFC_HOST_CARD_EMULATION);        }    }   ])', 1), ('([1:/android/security/cts/CVE_2020_0073.java]:[NFC]:[1]:method_text:[config.setSignals(signals);        AdbUtils.runPocAssertNoCrashesNotVulnerable(testConfig);    }}])', 1), ('([1:/android/security/cts/CVE_2019_2038.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2019-2038"", null, getDevice());    }}])', 1), ('([1:/android/devicepolicy/cts/UserControlDisabledPackagesTest.java]:[DPC]:[1]:method_text:[ager().setUserControlDisabledPackages(                        Collections.emptyList()));    }   ])', 1), ('([1:/android/devicepolicy/cts/UserControlDisabledPackagesTest.java]:[DPC]:[1]:method_text:[dpc().devicePolicyManager().getUserControlDisabledPackages())                .isEmpty();    }   ])', 1), ('([1:/android/devicepolicy/cts/UserControlDisabledPackagesTest.java]:[DPC]:[1]:method_text:[        () -> sDeviceState.dpc().devicePolicyManager().getUserControlDisabledPackages());    }   ])', 1), ('([4:/android/devicepolicy/cts/UserControlDisabledPackagesTest.java]:[DPC]:[4]:method_text:[tring(packageInfo.applicationInfo.flags) + "". Stopped: "" + stopped);        return stopped;    }}])', 1), ('([1:/android/quickaccesswallet/cts/WalletServiceEventTest.java]:[NFC]:[1]:method_text:[ink WalletServiceEvent} */@RunWith(AndroidJUnit4.class)public class WalletServiceEventTest {   ])', 1), ('([1:/android/quickaccesswallet/cts/WalletServiceEventTest.java]:[NFC]:[1]:method_text:[eFromParcel(p);        assertThat(event.getEventType()).isEqualTo(newEvent.getEventType());    }}])', 1), ('([1:/android/security/cts/CVE_2020_0039.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2020-0039"", null, getDevice());    }}])', 1), ('([2:/test/java/com/android/bedstead/nene/devicepolicy/ProfileOwnerTest.java]:[DPC]:[2]:method_text:[   }    @AfterClass    public static void teardownClass() {        sProfile.remove();    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/devicepolicy/ProfileOwnerTest.java]:[DPC]:[1]:method_text:[Name() {        assertThat(sProfileOwner.componentName()).isEqualTo(DPC_COMPONENT_NAME);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/devicepolicy/ProfileOwnerTest.java]:[DPC]:[1]:method_text:[ileOwner = sTestApis.devicePolicy().setProfileOwner(sProfile, DPC_COMPONENT_NAME);        }    }}])', 1), ('([2:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[2]:method_text:[  private static final String ACTION_EMERGENCY_DIAL = ""com.android.phone.EmergencyDialer.DIAL"";   ])', 1), ('([5:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[5]:method_text:[tate.dpc().devicePolicyManager().setLockTaskPackages(originalLockTaskPackages);        }    }   ])', 1), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[1]:method_text:[s,                () -> sDeviceState.dpc().devicePolicyManager().getLockTaskPackages());    }   ])', 1), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[1]:method_text:[     () -> sDeviceState.dpc().devicePolicyManager().setLockTaskPackages(new String[]{}));    }   ])', 1), ('([4:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[4]:method_text:[ate.dpc().devicePolicyManager().setLockTaskFeatures(originalLockTaskFeatures);        }    }   ])', 1), ('([4:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[4]:method_text:[tate.dpc().devicePolicyManager().setLockTaskFeatures(originalLockTaskFeatures);        }    }   ])', 1), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[1]:method_text:[   sDeviceState.dpc().devicePolicyManager().setLockTaskFeatures(LOCK_TASK_FEATURE_NONE));    }   ])', 1), ('([1:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[1]:method_text:[s, () ->                sDeviceState.dpc().devicePolicyManager().getLockTaskFeatures());    }   ])', 1), ('([4:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[4]:method_text:[cyManager().setLockTaskPackages(                    originalLockTaskPackages);        }    }   ])', 1), ('([6:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[6]:method_text:[tate.dpc().devicePolicyManager().setLockTaskFeatures(originalLockTaskFeatures);        }    }   ])', 1), ('([6:/android/devicepolicy/cts/LockTaskTest.java]:[DPC]:[6]:method_text:[ULT_ONLY);        return (dialerInfo != null) ? dialerInfo.activityInfo.packageName : null;    }}])', 1), ('([2:/android/media/mediaparser/cts/MediaParserTest.java]:[DPC]:[2]:method_text:[hImaAdpcm() throws IOException {        testAssetExtraction(""wav/sample_ima_adpcm.wav"");    }   ])', 1), ('([1:/android/permission/cts/ServicePermissionTest.java]:[NFC]:[1]:method_text:[sion.BIND_VPN_SERVICE,            android.Manifest.permission.BIND_VR_LISTENER_SERVICE,    };   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[NFC]:[1]:method_text:[ce());    }    /**     * b/156997193     * Vulnerability Behaviour: SIGABRT in self     */   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[NFC]:[1]:method_text:[ce());    }    /**     * b/132083376     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[NFC]:[1]:method_text:[ice());    }    /**     * b/31470908     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([2:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DPC]:[2]:method_text:[ation().getContext();        mDpm = context.getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[DPC]:[1]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([2:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[DPC]:[2]:method_text:[provider that provides enterprise slice cannot     * see the enterprise slice requests.     */   ])', 1), ('([2:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[DPC]:[2]:method_text:[()), offerCallback);        offerCallback.assertNoCallback();        return offerCallback;    }}])', 1), ('([1:/android/security/cts/CVE_2019_2019.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2019-2019"", null, getDevice());    }}])', 1), ('([1:/android/security/cts/CVE_2018_9558.java]:[NFC]:[1]:method_text:[config.setSignals(signals);        AdbUtils.runPocAssertNoCrashesNotVulnerable(testConfig);    }}])', 1), ('([1:/android/security/cts/CVE_2018_9585.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2018-9585"", null, getDevice());    }}])', 1), ('([3:/android/text/cts/StaticLayoutTest.java]:[NFC]:[3]:method_text:[, class: "" + seq.getClass().getName() +                "", Normalization: "" + normalized;    }   ])', 1), ('([1:/android/text/cts/StaticLayoutTest.java]:[NFC]:[1]:method_text:[Of(9));            assertEquals(testLabel, 10, layout.getOffsetToRightOf(10));        }    }   ])', 1), ('([1:/android/text/cts/StaticLayoutTest.java]:[NFC]:[1]:method_text:[htOf(7));            assertEquals(testLabel, 6, layout.getOffsetToRightOf(8));        }    }   ])', 1), ('([6:/android/telecom/cts/RemoteConferenceTest.java]:[NFC]:[6]:method_text:[));        assertFalse(mRemoteConference.getConnections().contains(mRemoteConnection1));    }   ])', 1), ('([4:/android/telecom/cts/RemoteConferenceTest.java]:[NFC]:[4]:method_text:[onnectionCallDisplayName(mRemoteConnection2,                TestUtils.SWAP_CALLER_NAME);    }   ])', 1), ('([6:/android/telecom/cts/RemoteConferenceTest.java]:[NFC]:[6]:method_text:[sertDtmfString(mConference, ""1.3."");        assertDtmfString(mRemoteConference, ""1.3."");    }   ])', 1), ('([2:/android/telecom/cts/RemoteConferenceTest.java]:[NFC]:[2]:method_text:[();        Handler handler = new Handler(workerThread.getLooper());        return handler;    }}])', 1), ('([2:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[2]:method_text:[entName(mContext));        assertTrue(""No target users found"", mTargetUsers.size() > 0);    }   ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[1]:method_text:[ }    /**     * Talk to a DPC package that is neither device owner nor profile owner.     */   ])', 1), ('([1:/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java]:[DPC]:[1]:method_text:[   }    }    /**     * Talk to the same DPC in same user, that is talking to itself.     */   ])', 1), ('([1:/android/signature/cts/InterfaceChecker.java]:[NFC]:[1]:method_text:[       } else {            class2Description.put(runtimeClass, classDescription);        }    }}])', 1), ('([5:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[NFC]:[5]:method_text:[MPONENT_ENABLED_STATE_DEFAULT);        TestQuickAccessWalletService.resetStaticFields();    }   ])', 1), ('([1:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[NFC]:[1]:method_text:[ listener.await(300, TimeUnit.SECONDS);        assertThat(listener.mEvents).hasSize(1);    }   ])', 1), ('([1:/android/quickaccesswallet/cts/QuickAccessWalletClientTest.java]:[NFC]:[1]:method_text:[s expected that this time out        }        assertThat(listener.mEvents).hasSize(0);    }   ])', 1), ('([6:/android/net/ipsec/ike/cts/IkeSessionParamsTest.java]:[DPC]:[6]:method_text:[);            }        }        assertEquals(EXPECTED_PCSCF_SERVERS, resultAddresses);    }   ])', 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[NFC]:[2]:method_text:[getCurrentPackageName();        assertThat(currentPackage).isEqualTo(mSettingsPackage);    }   ])', 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[NFC]:[2]:method_text:[tCurrentPackageName();        assertThat(currentPackage).isNotEqualTo(mSettingsPackage);    }   ])', 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[NFC]:[2]:method_text:[Object(By.res(mSettingsPackage, RESOURCE_TITLE));        assertThat(titleView).isNull();    }   ])', 1), ('([3:/android/provider/cts/SettingsPanelTest.java]:[NFC]:[3]:method_text:[ {      return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);    }}])', 1), ('([4:/android/media/cts/DecoderTest.java]:[DPC]:[4]:method_text:[testTrackSelection(R.raw.mkv_avc_mp2);        Log.d(TAG, ""mkv_avc_mp2 finished!!!!!! "");    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/SuspendPackageTest.java]:[DPC]:[1]:method_text:[(isSuspended);    }    /**     * Verify that we cannot suspend launcher and dpc app.     */   ])', 1), ('([2:/com/android/cts/deviceandprofileowner/SuspendPackageTest.java]:[DPC]:[2]:method_text:[      assertTrue(new HashSet(Arrays.asList(a)).containsAll(new HashSet(Arrays.asList(b))));    }}])', 1), ('([1:/android/security/cts/CVE_2020_0037.java]:[NFC]:[1]:method_text:[();        AdbUtils.runPocAssertNoCrashesNotVulnerable(""CVE-2020-0037"", null, getDevice());    }}])', 1)]"	""	""	"[('DPC', 73), ('NFC', 53)]"	"[('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 2), ('[android.permission.cts.FileSystemPermissionTest testPn544Sane None]', 2), ('[android.permission.cts.FileSystemPermissionTest testBcm2079xSane None]', 2), ('[android.permission.cts.FileSystemPermissionTest testBcm2079xi2cSane None]', 2), ('[android.devicepolicy.cts.LockTaskTest isNotNull None]', 2), ('[com.android.cts.devicepolicy.ManagedProfileTest testNfcRestriction None]', 2), ('[android.telephony.embms.cts.MbmsDownloadCallbackTest testFullCallback None]', 2), ('[android.telephony.embms.cts.MbmsDownloadCallbackTest testDeregistration None]', 2), ('[android.provider.cts.SettingsPanelTest isNull None]', 2), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCertChain None]', 1), ('[android.ndef.cts.NdefTest testCreateUri None]', 1), ('[android.ndef.cts.NdefTest testToUri None]', 1), ('[android.security.cts.CVE_2019_2022 testPocCVE_2019_2022 None]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testInstallKeyPair None]', 1), ('[android.devicepolicy.cts.NetworkResetTest factoryReset_disallowedByNetworkResetPolicy_doesNotFactoryReset None]', 1), ('[android.devicepolicy.cts.NetworkResetTest factoryReset_disallowedByConfigPrivateDnsPolicy_doesPartialFactoryReset None]', 1), ('[android.devicepolicy.cts.NetworkResetTest isFalse None]', 1), ('[android.permission.cts.NfcPermissionTest isControllerAlwaysOnSupported None]', 1), ('[android.permission.cts.NfcPermissionTest testIsControllerAlwaysOnSupported None]', 1), ('[android.permission.cts.NfcPermissionTest testIsControllerAlwaysOn None]', 1), ('[android.permission.cts.NfcPermissionTest testSetControllerAlwaysOnTrue None]', 1), ('[android.permission.cts.NfcPermissionTest testSetControllerAlwaysOnFalse None]', 1), ('[android.permission.cts.NfcPermissionTest testRegisterControllerAlwaysOnListener None]', 1), ('[android.permission.cts.NfcPermissionTest testUnregisterControllerAlwaysOnListener None]', 1), ('[android.security.cts.CVE_2019_2207 testPocCVE_2019_2207 None]', 1), ('[com.android.cts.deviceandprofileowner.AlwaysOnVpnTest testSetNonVpnAlwaysOn None]', 1), ('[android.app.cts.SystemFeaturesTest testNfcFeatures None]', 1), ('[android.security.cts.CVE_2020_0073 testPocCVE_2020_0073 None]', 1), ('[android.security.cts.CVE_2019_2038 testPocCVE_2019_2038 None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest setUserControlDisabledPackages_toOneProtectedPackage None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest setUserControlDisabledPackages_toEmptyProtectedPackages None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest setUserControlDisabledPackages_notAllowedToSetProtectedPackages_throwsException None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest getUserControlDisabledPackages_noProtectedPackagesSet_returnsEmptyProtectedPackages None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest getUserControlDisabledPackages_notAllowedToRetrieveProtectedPackages_throwsException None]', 1), ('[android.devicepolicy.cts.UserControlDisabledPackagesTest setUserControlDisabledPackages_launchActivity_verifyPackageNotStopped None]', 1), ('[android.quickaccesswallet.cts.WalletServiceEventTest testParcel_toParcel None]', 1), ('[android.security.cts.CVE_2020_0039 testPocCVE_2020_0039 None]', 1), ('[test.java.com.android.bedstead.nene.devicepolicy.ProfileOwnerTest TestApis None]', 1), ('[test.java.com.android.bedstead.nene.devicepolicy.ProfileOwnerTest isNull None]', 1), ('[android.devicepolicy.cts.LockTaskTest TestApis None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_lockTaskPackagesIsSet None]', 1), ('[android.devicepolicy.cts.LockTaskTest isTrue None]', 1), ('[android.devicepolicy.cts.LockTaskTest getLockTaskPackages_policyIsNotAllowedToBeFetched_throwsException None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_empty_lockTaskPackagesIsSet None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_includesPolicyExemptApp_lockTaskPackagesIsSet None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_policyIsNotAllowedToBeSet_throwsException None]', 1), ('[android.devicepolicy.cts.LockTaskTest isLockTaskPermitted_lockTaskPackageIsSet_returnsTrue None]', 1), ('[android.devicepolicy.cts.LockTaskTest isLockTaskPermitted_lockTaskPackageIsSet_policyDoesntApply_returnsFalse None]', 1), ('[android.devicepolicy.cts.LockTaskTest isLockTaskPermitted_lockTaskPackageIsNotSet_returnsFalse None]', 1), ('[android.devicepolicy.cts.LockTaskTest isLockTaskPermitted_includesPolicyExemptApps None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskFeatures_policyIsNotAllowedToBeSet_throwsException None]', 1), ('[android.devicepolicy.cts.LockTaskTest getLockTaskFeatures_policyIsNotAllowedToBeFetched_throwsException None]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_includedInLockTaskPackages_taskIsLocked None]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_notIncludedInLockTaskPackages_taskIsNotLocked None]', 1), ('[android.devicepolicy.cts.LockTaskTest startLockTask_includedInLockTaskPackages_policyShouldNotApply_taskIsNotLocked None]', 1), ('[android.devicepolicy.cts.LockTaskTest finish_isLocked_doesNotFinish None]', 1), ('[android.devicepolicy.cts.LockTaskTest finish_hasStoppedLockTask_doesFinish None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_removingCurrentlyLockedTask_taskFinishes None]', 1), ('[android.devicepolicy.cts.LockTaskTest startActivity_ifWhitelistedActivity_startsInLockTaskMode None]', 1), ('[android.devicepolicy.cts.LockTaskTest startActivity_ifWhitelistedActivity_notWhitelisted_startsNotInLockTaskMode None]', 1), ('[android.devicepolicy.cts.LockTaskTest finish_ifWhitelistedActivity_doesNotFinish None]', 1), ('[android.devicepolicy.cts.LockTaskTest setLockTaskPackages_removingExistingIfWhitelistedActivity_stopsTask None]', 1), ('[android.devicepolicy.cts.LockTaskTest launchEmergencyDialerInLockTaskMode_notWhitelisted_noKeyguardFeature_doesNotLaunch None]', 1), ('[android.devicepolicy.cts.LockTaskTest launchEmergencyDialerInLockTaskMode_notWhitelisted_keyguardFeature_launches None]', 1), ('[android.media.mediaparser.cts.MediaParserTest testWavWithImaAdpcm None]', 1), ('[android.security.cts.TestMedi testPocCVE_2020_0450 None]', 1), ('[android.security.cts.TestMedi testPocCVE_2019_2133 None]', 1), ('[android.security.cts.TestMedi testPocCVE_2019_2134 None]', 1), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest setPreferentialNetworkServiceEnabled_enableService_issueRequest None]', 1), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest setPreferentialNetworkServiceEnabled_disableService_noIssueRequest None]', 1), ('[android.security.cts.CVE_2019_2019 testPocCVE_2019_2019 None]', 1), ('[android.security.cts.CVE_2018_9558 testPocCVE_2018_9558 None]', 1), ('[android.security.cts.CVE_2018_9585 testPocCVE_2018_9585 None]', 1), ('[android.text.cts.StaticLayoutTest testImmutableStaticLayout None]', 1), ('[android.text.cts.StaticLayoutTest testGetOffset_UNICODE_Normalization None]', 1), ('[android.text.cts.StaticLayoutTest testGetOffset_UNICODE_Arabic None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceCreate None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceSplit None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceHoldAndUnhold None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceMergeAndSwap None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceDTMFTone None]', 1), ('[android.telecom.cts.RemoteConferenceTest testRemoteConferenceCallbacks_Extras None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCannotBind_unprotectedCrossUserService None]', 1), ('[com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest testCheckCannotBind_nonManagingPackage None]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testAddListener_sendEvent_success None]', 1), ('[android.quickaccesswallet.cts.QuickAccessWalletClientTest testRemoveListener_sendEvent_shouldNotBeDelivered None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionParamsTest testSetPcscfConfigRequests None]', 1), ('[android.media.cts.DecoderTest testTrackSelectionMkv None]', 1), ('[com.android.cts.deviceandprofileowner.SuspendPackageTest testSetPackagesNotSuspended None]', 1), ('[com.android.cts.deviceandprofileowner.SuspendPackageTest testSuspendNotSuspendablePackages None]', 1), ('[android.security.cts.CVE_2020_0037 testPocCVE_2020_0037 None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-12"	"9.9.3/C-1-12"	"09090300.670112"	"""C-1-12] If the device has Advanced Encryption Standard (AES) instructions (such as ARMv8 Cryptography Extensions on ARM-based devices, or AES-NI on x86-based devices) then the AES-based options above for file name, file contents, and filesystem metadata encryption MUST be used, not Adiantum. && C-1-12] If the device has Advanced Encryption Standard (AES) instructions (such as ARMv8 Cryptography Extensions on ARM-based devices, or AES-NI on x86-based devices) then the AES-based options above for file name, file contents, and filesystem metadata encryption MUST be used, not Adiantum. | C-1-12] MUST be securely erased during bootloader unlock and lock as described here. SHOULD make preinstalled essential apps (e.g. Alarm, Phone, Messenger) Direct Boot aware. The upstream Android Open Source project provides a preferred implementation of File Based Encryption based on the Linux kernel &quot;fscrypt&quot; encryption feature, and of Metadata Encryption based on the Linux kernel &quot;dm-default-key&quot; feature. <h4 id=""994_resume_on_reboot"" """	"Found reference in comments"	""	"AES ARM"	""	""	""	""	""	""	""	""	"cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp"	"validateEncryptionModes"	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/SplitTests.java', 21), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/StatusBarManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ZenPolicyTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/ComplexFilterTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/InstantAppsTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/CpuInstructionsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/AlarmManagerIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/ExtendedInCallServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/AesKeyGenPerformanceTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarPropertyValueTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VelocityTrackerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/harmfulappwarning/testapp/src/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarPackageManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_NameValueTableTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/packagemanager/dynamicmime/test/src/android/dynamicmime/testapp/preferred/PreferredActivitiesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1)]"	"[('(4,ARM,/android/media/cts/AudioTrackTest.java)', 2), ('(2,ARM,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 2), ('(4,ARM,/android/os/cts/VibrationAttributesTest.java)', 1), ('(12,ARM,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ARM,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(1,ARM,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,ARM,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(1,ARM,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(22,ARM,/android/alarmmanager/cts/InstantAppsTests.java)', 1), ('(21,ARM,/android/app/cts/StatusBarManagerTest.java)', 1), ('(13,ARM,/android/app/notification/legacy/cts/ConditionProviderServiceTest.java)', 1), ('(7,ARM,/android/os/cts/CpuInstructionsTest.java)', 1), ('(1,ARM,/android/car/cts/CarPropertyValueTest.java)', 1), ('(8,ARM,/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java)', 1), ('(1,ARM,/android/view/cts/VelocityTrackerTest.java)', 1), ('(6,ARM,/android/media/cts/VisualizerTest.java)', 1), ('(6,ARM,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(9,ARM,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(5,AES,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(7,ARM,/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java)', 1), ('(91,ARM,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(50,ARM,/com/android/server/cts/AlarmManagerIncidentTest.java)', 1), ('(4,ARM,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(12,ARM,/android/app/cts/ZenPolicyTest.java)', 1), ('(5,AES,/android/security/cts/EncryptionTest.java)', 1), ('(1,AES,/android/graphics/cts/PaintTest.java)', 1), ('(2,ARM,/android/graphics/cts/PaintTest.java)', 1), ('(2,AES,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(1,ARM,/android/view/cts/PixelCopyTest.java)', 1), ('(1,ARM,/android/car/cts/CarSensorManagerTest.java)', 1), ('(11,AES,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(1,ARM,/android/car/cts/CarPackageManagerTest.java)', 1), ('(1,AES,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(1,ARM,/android/app/cts/NotificationTest.java)', 1), ('(1,ARM,/android/provider/cts/settings/Settings_NameValueTableTest.java)', 1), ('(2,ARM,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(120,ARM,/android/appsecurity/cts/SplitTests.java)', 1), ('(4,ARM,/android/dynamicmime/testapp/ComplexFilterTest.java)', 1), ('(2,AES,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(19,ARM,/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java)', 1), ('(1,ARM,/android/dynamicmime/testapp/preferred/PreferredActivitiesTest.java)', 1), ('(4,ARM,/android/telecom/cts/ExtendedInCallServiceTest.java)', 1), ('(2,AES,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(9,AES,/android/keystore/cts/AesKeyGenPerformanceTest.java)', 1), ('(14,AES,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(8,ARM,/com/android/server/cts/device/statsd/AtomTests.java)', 1)]"	"[('([4:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[ARM]:[4]:method_text:[ote        assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());    }   ])', 3), ('([2:/android/media/cts/AudioTrackTest.java]:[ARM]:[2]:method_text:[--    // Test case 1: build AudioTrack with default parameters, test documented default params   ])', 2), ('([1:/android/media/cts/AudioTrackTest.java]:[ARM]:[1]:method_text:[ContentType());    }    // Test case 5: build AudioTrack with attributes and performance mode   ])', 2), ('([1:/android/media/cts/AudioTrackTest.java]:[ARM]:[1]:method_text:[}        track.release();    }    // Test AudioTrack to ensure we can build after a failure.   ])', 2), ('([1:/android/app/cts/ZenPolicyTest.java]:[ARM]:[1]:method_text:[   policy.getPriorityConversationSenders());        assertAllVisualEffectsUnset(policy);    }   ])', 2), ('([2:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[ARM]:[2]:method_text:[ mContentResolver.delete(uri, null, null);            assertEquals(1, result);        }    }   ])', 2), ('([4:/android/os/cts/VibrationAttributesTest.java]:[ARM]:[4]:method_text:[.getFlags(), 0);        assertEquals(attr.getAudioUsage(), AudioAttributes.USAGE_ALARM);    }   ])', 1), ('([4:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ARM]:[4]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([7:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ARM]:[7]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ARM]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[ARM]:[1]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[ARM]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[ARM]:[2]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[ARM]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);            }        }        throw new TimeoutException();    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[ARM]:[1]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([15:/android/alarmmanager/cts/InstantAppsTests.java]:[ARM]:[15]:method_text:[0L)                .with(""min_window"", 0L)                .commitAndAwaitPropagation();    }   ])', 1), ('([3:/android/alarmmanager/cts/InstantAppsTests.java]:[ARM]:[3]:method_text:[not fire as expected"",                latch.await(WAIT_TIMEOUT, TimeUnit.MILLISECONDS));    }   ])', 1), ('([4:/android/alarmmanager/cts/InstantAppsTests.java]:[ARM]:[4]:method_text:[   @After    public void deleteAlarmManagerSettings() {        mConfigHelper.restoreAll();    }}])', 1), ('([10:/android/app/cts/StatusBarManagerTest.java]:[ARM]:[10]:method_text:[    /**     * Test StatusBarManager.setDisabledForSetup(true)     * @throws Exception     */   ])', 1), ('([3:/android/app/cts/StatusBarManagerTest.java]:[ARM]:[3]:method_text:[    /**     * Test StatusBarManager.setDisabledForSetup(false)     * @throws Exception     */   ])', 1), ('([3:/android/app/cts/StatusBarManagerTest.java]:[ARM]:[3]:method_text:[sableInfo();        assertTrue(""Invalid disableFlags"", info.areAllComponentsEnabled());    }   ])', 1), ('([2:/android/app/cts/StatusBarManagerTest.java]:[ARM]:[2]:method_text:[gs        assertTrue(mStatusBarManager.getDisableInfo().isStatusBarExpansionDisabled());    }   ])', 1), ('([3:/android/app/cts/StatusBarManagerTest.java]:[ARM]:[3]:method_text:[etDisableInfo();        assertTrue(""Invalid disableFlags"", info.areAllComponentsEnabled());    }}])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[ARM]:[1]:method_text:[            pollForConnection(SecondaryConditionProviderService.class, false);        }    }   ])', 1), ('([2:/android/os/cts/CpuInstructionsTest.java]:[ARM]:[2]:method_text:[s not allow access to CNTVCT register"",                CpuInstructions.canReadCntvct());    }   ])', 1), ('([5:/android/os/cts/CpuInstructionsTest.java]:[ARM]:[5]:method_text:[not support ARM CP15 barrier emulation"",                CpuInstructions.hasCp15Barriers());    }}])', 1), ('([1:/android/car/cts/CarPropertyValueTest.java]:[ARM]:[1]:method_text:[rtyManager) getCar().getCarManager(Car.PROPERTY_SERVICE);        getCarPropertyValues();    }   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[ARM]:[2]:method_text:[hangedWithChangeTypes(WINDOWS_CHANGE_REMOVED),                TIMEOUT_ASYNC_PROCESSING);    }   ])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[ARM]:[6]:method_text:[ = mActivity.getWindow().getDecorView().getWindowToken();        });        return params;    }}])', 1), ('([1:/android/view/cts/VelocityTrackerTest.java]:[ARM]:[1]:method_text:[0, 10);        assertVelocity(TOLERANCE_TIGHT, ""Expect tight bound for linear motion."");    }   ])', 1), ('([3:/android/media/cts/VisualizerTest.java]:[ARM]:[3]:method_text:[seVisualizer();        }    }    //Test case 4.2: test measurement of peak / RMS in Long MP3   ])', 1), ('([3:/android/media/cts/VisualizerTest.java]:[ARM]:[3]:method_text:[ catch(InterruptedException e) {            }            mListenerThread = null;        }    }}])', 1), ('([6:/android/media/cts/DecoderTestAacDrc.java]:[ARM]:[6]:method_text:[tamps,                drcParams, decoderName, runtimeChange, -2);        return decoded;    }}])', 1), ('([9:/android/hardware/camera2/cts/ImageReaderTest.java]:[ARM]:[9]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 1), ('([5:/android/hardware/camera2/cts/BurstCaptureTest.java]:[AES]:[5]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([7:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[ARM]:[7]:method_text:[    public void tearDown() {        mSampleActivityStartedReceiver.unregisterQuietly();    }   ])', 1), ('([59:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[ARM]:[59]:method_text:[            return 0;        }        return 1 + (int)((now - start - 1000)/interval);    }   ])', 1), ('([8:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[ARM]:[8]:method_text:[        + "" times when restrictions were lifted"", waitForAlarms(minCount, DEFAULT_WAIT));    }   ])', 1), ('([24:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[ARM]:[24]:method_text:[arms && SystemClock.uptimeMillis() < deadLine);        return alarmCount >= expectedAlarms;    }}])', 1), ('([5:/com/android/server/cts/AlarmManagerIncidentTest.java]:[ARM]:[5]:method_text:[ly outputs its dump state. */public class AlarmManagerIncidentTest extends ProtoDumpTestCase {   ])', 1), ('([45:/com/android/server/cts/AlarmManagerIncidentTest.java]:[ARM]:[45]:method_text:[);        // Nesting should be non-negative.        assertTrue(0 <= filter.getNesting());    }}])', 1), ('([4:/android/hardware/camera2/cts/CaptureRequestTest.java]:[ARM]:[4]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([1:/android/app/cts/ZenPolicyTest.java]:[ARM]:[1]:method_text:[nPolicy.CREATOR.createFromParcel(parcel);        assertEquals(policy, policyFromParcel);    }   ])', 1), ('([7:/android/app/cts/ZenPolicyTest.java]:[ARM]:[7]:method_text:[ionManager.Policy.PRIORITY_CATEGORY_ALARMS);        assertAllVisualEffectsUnset(policy);    }   ])', 1), ('([2:/android/app/cts/ZenPolicyTest.java]:[ARM]:[2]:method_text:[isualEffectsUnset(ZenPolicy policy) {        assertAllVisualEffectsUnsetExcept(policy, -1);    }}])', 1), ('([5:/android/security/cts/EncryptionTest.java]:[AES]:[5]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[AES]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([2:/android/graphics/cts/PaintTest.java]:[ARM]:[2]:method_text:[TART_HYPHEN_EDIT_NO_EDIT);        paint.setEndHyphenEdit(Paint.END_HYPHEN_EDIT_NO_EDIT);    }   ])', 1), ('([2:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[AES]:[2]:method_text:[iometricManager mBiometricManager;        private KeyguardManager mKeyguardManager;        private])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[ARM]:[1]:method_text:[ail(String.format(""FDs leaked. Expected=%d, current=%d"", fdCount, curFdCount));        }    }   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[ARM]:[1]:method_text:[tedSensors();        assertNotNull(mSupportedSensors);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[xpectedSecret.getEncoded()),                Arrays.toString(actualSecret.getEncoded()));    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[5]:method_text:[.i(TAG, ""Deleted "" + (latestImportedEntryNumber + 1) + "" keys"");        }    }    @LargeTest   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[4]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([1:/android/car/cts/CarPackageManagerTest.java]:[ARM]:[1]:method_text:[etUp();        mCarPm = (CarPackageManager) getCar().getCarManager(Car.PACKAGE_SERVICE);    }   ])', 1), ('([1:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[AES]:[1]:method_text:[rent native internals, and multiple Surfaces pointing to the same actual consumer object     */   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[ARM]:[1]:method_text:[ll(Notification.CATEGORY_SYSTEM);        assertNotNull(Notification.CATEGORY_TRANSPORT);    }   ])', 1), ('([1:/android/provider/cts/settings/Settings_NameValueTableTest.java]:[ARM]:[1]:method_text:[inally {            // TODO should clean up more better            c.close();        }    }   ])', 1), (""([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[ARM]:[1]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[ARM]:[1]:method_text:[ m/s"",                    location.getSpeed() >= 0 && location.getSpeed() <= 5);        }    }}])', 1), ('([28:/android/appsecurity/cts/SplitTests.java]:[ARM]:[28]:method_text:[ getDevice().uninstallPackage(PKG);        getDevice().uninstallPackage(PKG_NO_RESTART);    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[lic void testFeatureWarmBase_full() throws Exception {        testFeatureWarmBase(false);    }   ])', 1), ('([5:/android/appsecurity/cts/SplitTests.java]:[ARM]:[5]:method_text:[dFile(APK_FEATURE_WARM).run();        runDeviceTests(PKG, CLASS, ""testFeatureWarmBase"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[ublic void testFeatureWarmApi_full() throws Exception {        testFeatureWarmApi(false);    }   ])', 1), ('([6:/android/appsecurity/cts/SplitTests.java]:[ARM]:[6]:method_text:[ile(APK_FEATURE_WARM_v7).run();        runDeviceTests(PKG, CLASS, ""testFeatureWarmApi"");    }   ])', 1), ('([1:/android/appsecurity/cts/SplitTests.java]:[ARM]:[1]:method_text:[n();        runDeviceTests(PKG, CLASS, ""testInheritUpdatedBase_withRevisionA"", instant);    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[();        runDeviceTests(PKG, CLASS, ""testInheritUpdatedSplit_withRevisionA"", instant);    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[eatureWarm_full() throws Exception {        testRequiredSplitInstalledFeatureWarm(false);    }   ])', 1), ('([4:/android/appsecurity/cts/SplitTests.java]:[ARM]:[4]:method_text:[addFile(APK_NEED_SPLIT_BASE)                .addFile(APK_NEED_SPLIT_FEATURE_WARM).run();    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[T"");    }    /**     * Verify that installing a new version of app wipes code cache.     */   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[);        runDeviceTests(PKG, CLASS, ""testComponentWithSplitName_featureWarmInstalled"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[_installFeatureWarm_full() throws Exception {        testTheme_installFeatureWarm(false);    }   ])', 1), ('([10:/android/appsecurity/cts/SplitTests.java]:[ARM]:[10]:method_text:[ed"");        runDeviceTests(PKG, CLASS, ""launchWarmActivity_withThemeWarm_warmApplied"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[llFeatureWarmV23_full() throws Exception {        testTheme_installFeatureWarmV23(false);    }   ])', 1), ('([11:/android/appsecurity/cts/SplitTests.java]:[ARM]:[11]:method_text:[;        runDeviceTests(PKG, CLASS, ""launchWarmActivity_withThemeWarmLt_warmLtApplied"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[oveV23_full() throws Exception {        testTheme_installFeatureWarmV23_removeV23(false);    }   ])', 1), ('([12:/android/appsecurity/cts/SplitTests.java]:[ARM]:[12]:method_text:[ed"");        runDeviceTests(PKG, CLASS, ""launchWarmActivity_withThemeWarm_warmApplied"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[eWarmAndRose_full() throws Exception {        testTheme_installFeatureWarmAndRose(false);    }   ])', 1), ('([10:/android/appsecurity/cts/SplitTests.java]:[ARM]:[10]:method_text:[ed"");        runDeviceTests(PKG, CLASS, ""launchRoseActivity_withThemeRose_roseApplied"");    }   ])', 1), ('([2:/android/appsecurity/cts/SplitTests.java]:[ARM]:[2]:method_text:[ndRoseV23_full() throws Exception {        testTheme_installFeatureWarmAndRoseV23(false);    }   ])', 1), ('([11:/android/appsecurity/cts/SplitTests.java]:[ARM]:[11]:method_text:[d"");        runDeviceTests(PKG, CLASS, ""launchRoseActivity_withThemeRoseLt_roseLtApplied"");    }}])', 1), ('([1:/android/dynamicmime/testapp/ComplexFilterTest.java]:[ARM]:[1]:method_text:[AGE_PNG);        clearMimeGroup(GROUP_FIRST);        assertBothGroups(MIME_IMAGE_PNG);    }   ])', 1), ('([1:/android/dynamicmime/testapp/ComplexFilterTest.java]:[ARM]:[1]:method_text:[   clearMimeGroup(GROUP_FIRST);        assertBothGroups(MIME_IMAGE_PNG, MIME_TEXT_ANY);    }   ])', 1), ('([1:/android/dynamicmime/testapp/ComplexFilterTest.java]:[ARM]:[1]:method_text:[AIN);        clearMimeGroup(GROUP_FIRST);        assertGroupsAndType(MIME_TEXT_PLAIN);    }   ])', 1), ('([1:/android/dynamicmime/testapp/ComplexFilterTest.java]:[ARM]:[1]:method_text:[Groups(String... expectedTypes) {        assertMimeGroup(ALIAS_BOTH_GROUPS, expectedTypes);    }}])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AES]:[1]:method_text:[   localHlsTest(""audio_only/index.m3u8"", 60 * 1000, -1, true /*isAudioOnly*/);        }    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AES]:[1]:method_text:[000, -1, false /*isAudioOnly*/);        }    }    // Streaming audio from local HTTP server   ])', 1), ('([5:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[5]:method_text:[(false);        toggleAssistantAccess(false);        mUi.dropShellPermissionIdentity();    }   ])', 1), ('([3:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[3]:method_text:[icationAssistantService.notificationVisible);        mUi.dropShellPermissionIdentity();    }   ])', 1), ('([3:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[3]:method_text:[;        mStatusBarManager.collapsePanels();        mUi.dropShellPermissionIdentity();    }   ])', 1), ('([3:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[3]:method_text:[e(mNotificationAssistantService.isPanelOpen);        mUi.dropShellPermissionIdentity();    }   ])', 1), ('([4:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[4]:method_text:[        mStatusBarManager.collapsePanels();        mUi.dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/app/notification/legacy29/cts/NotificationAssistantServiceTest.java]:[ARM]:[1]:method_text:[ new IOException(""Could not read stdout of command:\xa0"" + command, e);            }        }    }}])', 1), ('([1:/android/dynamicmime/testapp/preferred/PreferredActivitiesTest.java]:[ARM]:[1]:method_text:[ng preferredActivity() {                return ACTIVITY_FIRST;            }        });    }   ])', 1), ('([1:/android/telecom/cts/ExtendedInCallServiceTest.java]:[ARM]:[1]:method_text:[ll comes in,     * answering the call immediately answers second call while in carMode.     */   ])', 1), ('([3:/android/telecom/cts/ExtendedInCallServiceTest.java]:[ARM]:[3]:method_text:[            // Set device back to normal            manager.disableCarMode(0);        }    }   ])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[AES]:[2]:method_text:[reAlias));        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 1), ('([2:/android/keystore/cts/AesKeyGenPerformanceTest.java]:[AES]:[2]:method_text:[rmanceTest extends PerformanceTestBase {    final int[] SUPPORTED_AES_KEY_SIZES = {128, 256};   ])', 1), ('([7:/android/keystore/cts/AesKeyGenPerformanceTest.java]:[AES]:[7]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[2]:method_text:[    public void testMediaEscalation() throws Exception {        doMediaEscalation(MEDIA);    }   ])', 1), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[2]:method_text:[ublic void testMediaEscalation28() throws Exception {        doMediaEscalation(MEDIA_28);    }   ])', 1), ('([10:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[10]:method_text:[     runDeviceTests(config.pkg, config.clazz, ""testMediaEscalation_RequestDelete"", user);    }   ])', 1), ('([2:/com/android/server/cts/device/statsd/AtomTests.java]:[ARM]:[2]:method_text:[NSTALLER, 98);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);    }   ])', 1), ('([6:/com/android/server/cts/device/statsd/AtomTests.java]:[ARM]:[6]:method_text:[() + 2_000, pintent);        waitForReceiver(context, 10_000, onReceiveLatch, receiver);    }   ])', 1)]"	""	""	"[('ARM', 95), ('AES', 16)]"	"[('[android.media.cts.AudioTrackTest testConstructorStreamType None]', 2), ('[android.media.cts.AudioTrackTest testBuilderAttributesStream None]', 2), ('[android.media.cts.AudioTrackTest testVariableSpeedPlayback None]', 2), ('[android.provider.cts.media.MediaStore_Audio_MediaTest testStoreAudioMedia None]', 2), ('[android.os.cts.VibrationAttributesTest testCreate None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection None]', 1), ('[android.alarmmanager.cts.InstantAppsTests isInstantApp None]', 1), ('[android.alarmmanager.cts.InstantAppsTests currentTimeMillis None]', 1), ('[android.app.cts.StatusBarManagerTest isWatch None]', 1), ('[android.app.cts.StatusBarManagerTest testDisableForSetup_setDisabledTrue None]', 1), ('[android.app.cts.StatusBarManagerTest testDisableForSetup_setDisabledFalse None]', 1), ('[android.app.cts.StatusBarManagerTest testDisableForSimLock_setDisabledTrue None]', 1), ('[android.app.cts.StatusBarManagerTest testDisableForSimLock_setDisabledFalse None]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule None]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges None]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges None]', 1), ('[android.os.cts.CpuInstructionsTest testArmVirtualCounter None]', 1), ('[android.os.cts.CpuInstructionsTest testEmulatedArmCpuFeatures None]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testWindowAddedMovedAndRemoved_generatesEventsForAllThree None]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testGetAnchorForDropDownForAutoCompleteTextView_returnsTextViewNode None]', 1), ('[android.view.cts.VelocityTrackerTest testLinearMovement None]', 1), ('[android.media.cts.VisualizerTest test4_1MeasurePeakRms None]', 1), ('[android.media.cts.VisualizerTest test4_2MeasurePeakRmsLongMP3 None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcOutputLoudnessM4a None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest register None]', 1), ('[android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testRepeatingAlarmBlocked None]', 1), ('[android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testAlarmClockNotBlocked None]', 1), ('[com.android.server.cts.AlarmManagerIncidentTest testAlarmManagerServiceDump None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes None]', 1), ('[android.app.cts.ZenPolicyTest testWriteToParcel None]', 1), ('[android.app.cts.ZenPolicyTest testAlarms None]', 1), ('[android.app.cts.ZenPolicyTest testDisallowAllSounds None]', 1), ('[android.app.cts.ZenPolicyTest testAllowAllSounds None]', 1), ('[android.app.cts.ZenPolicyTest testDisallowAllVisualEffects None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.graphics.cts.PaintTest testHyphenEdit None]', 1), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest setPassFailButtonClickListeners None]', 1), ('[android.view.cts.PixelCopyTest testDialogProducerCopyToRGBA16F None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_KeyOperations_Wrap_Unencrypted_Success None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_AES None]', 1), ('[android.hardware.camera2.cts.SurfaceViewPreviewTest testPreparePerformance None]', 1), ('[android.app.cts.NotificationTest testCategories None]', 1), ('[android.provider.cts.settings.Settings_NameValueTableTest testPutString None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest testLowPowerModeGnssLocation None]', 1), ('[android.appsecurity.cts.SplitTests testFeatureWarmBase_full None]', 1), ('[android.appsecurity.cts.SplitTests testFeatureWarmBase_instant None]', 1), ('[android.appsecurity.cts.SplitTests testFeatureWarmApi_full None]', 1), ('[android.appsecurity.cts.SplitTests testFeatureWarmApi_instant None]', 1), ('[android.appsecurity.cts.SplitTests testInheritUpdatedBase_instant None]', 1), ('[android.appsecurity.cts.SplitTests testInheritUpdatedSplit_instant None]', 1), ('[android.appsecurity.cts.SplitTests testRequiredSplitInstalledFeatureWarm_full None]', 1), ('[android.appsecurity.cts.SplitTests testRequiredSplitInstalledFeatureWarm_instant None]', 1), ('[android.appsecurity.cts.SplitTests testRequiredSplitRemoved_instant None]', 1), ('[android.appsecurity.cts.SplitTests testComponentWithSplitName_instant None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarm_full None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarm_instant None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmV23_full None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmV23_instant None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmV23_removeV23_full None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmV23_removeV23_instant None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmAndRose_full None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmAndRose_instant None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmAndRoseV23_full None]', 1), ('[android.appsecurity.cts.SplitTests testTheme_installFeatureWarmAndRoseV23_instant None]', 1), ('[android.dynamicmime.testapp.ComplexFilterTest testClearGroupWithoutIntersection None]', 1), ('[android.dynamicmime.testapp.ComplexFilterTest testClearGroupWithIntersection None]', 1), ('[android.dynamicmime.testapp.ComplexFilterTest testClearGroupContainsStaticType None]', 1), ('[android.dynamicmime.testapp.ComplexFilterTest testClearGroupNotContainStaticType None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_audio_only_overridable None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_unmuxed_1500k None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest isWatch None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnNotificationVisibilityChanged None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnNotificationsSeen None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnPanelRevealedAndHidden None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnNotificationClicked None]', 1), ('[android.app.notification.legacy29.cts.NotificationAssistantServiceTest testOnNotificationFeedbackReceived None]', 1), ('[android.dynamicmime.testapp.preferred.PreferredActivitiesTest testClearGroup None]', 1), ('[android.telecom.cts.ExtendedInCallServiceTest testAcceptRingingCallTwoCalls None]', 1), ('[android.telecom.cts.ExtendedInCallServiceTest testAcceptRingingCallTwoCallsCarMode None]', 1), ('[android.keystore.cts.KeyAttestationTest testAesAttestation None]', 1), ('[android.keystore.cts.AesKeyGenPerformanceTest testAesKeyGen None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation28 None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation29 None]', 1), ('[com.android.server.cts.device.statsd.AtomTests testWakeupAlarm None]', 1)]"
"197:593606) 7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-7"	"7.4.2/C-1-7"	"07040200.670107"	"""C-1-7] MUST randomize the source MAC address and sequence number of probe request frames, once at the beginning of each scan, while STA is disconnected."""	""	""	"MAC STA"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 24), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 19), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app/src/android/app/cts/KeyguardInitialLockTest.java', 1)]"	"[('(8,STA,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(15,MAC,/android/view/cts/VerifyInputEventTest.java)', 1), ('(43,STA,/android/view/cts/VerifyInputEventTest.java)', 1), ('(16,STA,/android/media/cts/SoundPoolTest.java)', 1), ('(21,STA,/android/os/cts/VibrationAttributesTest.java)', 1), ('(104,STA,/android/net/cts/TrafficStatsTest.java)', 1), ('(104,STA,/android/telecom/cts/VideoCallTest.java)', 1), ('(46,STA,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(7,STA,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(27,MAC,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(54,STA,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(1,STA,/android/app/cts/KeyguardInitialLockTest.java)', 1), ('(23,STA,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(4,STA,/android/cts/rscpp/RSScriptTest.java)', 1), ('(28,STA,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(5,MAC,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(52,STA,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(32,STA,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(17,STA,/com/android/cts/host/blob/DataCleanupTest.java)', 1)]"	"[('([2:/android/view/cts/VerifyInputEventTest.java]:[STA]:[2]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 2), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[1);        assertEquals(0, mExpandableListView.getSelectedPosition());    }    @UiThreadTest   ])', 2), ('([4:/com/android/cts/host/blob/DataCleanupTest.java]:[STA]:[4]:method_text:[sion.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenSession_shouldThrow"", args);    }   ])', 2), ('([3:/android/text/style/cts/ClickableSpanTest.java]:[STA]:[3]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([3:/android/text/style/cts/ClickableSpanTest.java]:[STA]:[3]:method_text:[       assertEquals(Color.BLUE, tp.getColor());        assertTrue(tp.isUnderlineText());    }   ])', 1), ('([2:/android/text/style/cts/ClickableSpanTest.java]:[STA]:[2]:method_text:[tends ClickableSpan {        @Override        public void onClick(View widget) {        }    }}])', 1), ('([5:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[5]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[2]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[2]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 1), ('([3:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[3]:method_text:[   boolean flagValue = (expectedFlags & flag) != 0;        assertEquals(flagValue, actual);    }}])', 1), ('([17:/android/view/cts/VerifyInputEventTest.java]:[STA]:[17]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[STA]:[2]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[STA]:[2]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 1), ('([18:/android/view/cts/VerifyInputEventTest.java]:[STA]:[18]:method_text:[   boolean flagValue = (expectedFlags & flag) != 0;        assertEquals(flagValue, actual);    }}])', 1), ('([10:/android/media/cts/SoundPoolTest.java]:[STA]:[10]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[STA]:[1]:method_text:[ }    }    /**     * Parameterized tests consider 1, 2, 4 streams in the SoundPool.     */   ])', 1), ('([5:/android/media/cts/SoundPoolTest.java]:[STA]:[5]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([14:/android/os/cts/VibrationAttributesTest.java]:[STA]:[14]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([2:/android/os/cts/VibrationAttributesTest.java]:[STA]:[2]:method_text:[      assertEquals(attr.getAudioUsage(), AudioAttributes.USAGE_ASSISTANCE_ACCESSIBILITY);    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[STA]:[1]:method_text:[   assertEquals(attr.getUsage(), attr2.getUsage());        assertNotEquals(attr, attr2);    }   ])', 1), ('([4:/android/os/cts/VibrationAttributesTest.java]:[STA]:[4]:method_text:[tributes(int usage) {        return new AudioAttributes.Builder().setUsage(usage).build();    }}])', 1), ('([5:/android/net/cts/TrafficStatsTest.java]:[STA]:[5]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([5:/android/net/cts/TrafficStatsTest.java]:[STA]:[5]:method_text:[Stats.getMobileTxBytes() >= 0);        assertTrue(TrafficStats.getMobileRxBytes() >= 0);    }   ])', 1), ('([5:/android/net/cts/TrafficStatsTest.java]:[STA]:[5]:method_text:[icStats.getTotalTxBytes() >= 0);        assertTrue(TrafficStats.getTotalRxBytes() >= 0);    }   ])', 1), ('([3:/android/net/cts/TrafficStatsTest.java]:[STA]:[3]:method_text:[Stats.getTxPackets(""lo"") >= 0);        assertTrue(TrafficStats.getRxPackets(""lo"") >= 0);    }   ])', 1), ('([31:/android/net/cts/TrafficStatsTest.java]:[STA]:[31]:method_text:[ * (20 + 32 + bytes);    }    @AppModeFull(reason = ""Socket cannot bind in instant app mode"")   ])', 1), ('([55:/android/net/cts/TrafficStatsTest.java]:[STA]:[55]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([3:/android/telecom/cts/VideoCallTest.java]:[STA]:[3]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([9:/android/telecom/cts/VideoCallTest.java]:[STA]:[9]:method_text:[    /**     * Tests ability to start a 1-way video call and retrieve its video state.     */   ])', 1), ('([3:/android/telecom/cts/VideoCallTest.java]:[STA]:[3]:method_text:[rue);    }    /**     * Tests ability to upgrade an audio-only call to a video call.     */   ])', 1), ('([9:/android/telecom/cts/VideoCallTest.java]:[STA]:[9]:method_text:[CTIONAL);    }    /**     * Tests ability to receive a session modification request.     */   ])', 1), ('([5:/android/telecom/cts/VideoCallTest.java]:[STA]:[5]:method_text:[        });    }    /**     * Tests ability to send a session modification response.     */   ])', 1), ('([5:/android/telecom/cts/VideoCallTest.java]:[STA]:[5]:method_text:[e.STATE_BIDIRECTIONAL);    }    /**     * Test handling of session modify responses.     */   ])', 1), ('([6:/android/telecom/cts/VideoCallTest.java]:[STA]:[6]:method_text:[be some overhead associated with configuring the camera at the start of     * the call.     */   ])', 1), ('([3:/android/telecom/cts/VideoCallTest.java]:[STA]:[3]:method_text:[ current camera.  Ensures that the camera capabilities are sent     * back in response.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[    /**     * Tests ability to request the camera capabilities from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[ONS);    }    /**     * Tests ability to request data usage from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[**     * Tests ability to receive changes to the video quality from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[ }    /**     * Tests ability to receive call session events from the video provider.     */   ])', 1), ('([3:/android/telecom/cts/VideoCallTest.java]:[STA]:[3]:method_text:[     * Tests ability to receive changes to the peer dimensions from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[ });    }    /**     * Tests ability to set the device orientation via the provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[r, 90);    }    /**     * Tests ability to set the preview surface via the provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[false);    }    /**     * Tests ability to set the display surface via the provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[er, false);    }    /**     * Tests ability to set the camera zoom via the provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[STA]:[1]:method_text:[(10.0f);        assertZoomChanged(mockVideoProvider, 10.0f);        call.disconnect();    }   ])', 1), ('([49:/android/telecom/cts/VideoCallTest.java]:[STA]:[49]:method_text:[append("" To: "");        expectedSb.append(toProfile);        return expectedSb.toString();    }}])', 1), ('([15:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[STA]:[15]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([20:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[STA]:[20]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([11:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[STA]:[11]:method_text:[Matcher() {        return event -> TextUtils.equals(""onFinishInput"", event.getEventName());    }}])', 1), ('([7:/android/telephonyprovider/cts/SmsConversationTest.java]:[STA]:[7]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[6]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([10:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[10]:method_text:[xpandableListView(mActivity, attrs);        new ExpandableListView(mActivity, attrs, 0);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[1]:method_text:[).getDrawable(R.drawable.scenery);        mExpandableListView.setChildDivider(drawable);    }   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[6]:method_text:[           } catch (NullPointerException e) {            }        });    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[2]:method_text:[e p2 = dest.onSaveInstanceState();        assertNotNull(p1);        assertNotNull(p2);    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[2]:method_text:[otected void dispatchDraw(Canvas canvas) {            super.dispatchDraw(canvas);        }    }}])', 1), ('([16:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[16]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[ongType() {        mExpandableListView.setAdapter((ListAdapter) null);    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[2]:method_text:[dableAdapter);        assertNotNull(mExpandableListView.getAdapter());    }    @UiThreadTest   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[6]:method_text:[ame(expandableAdapter, mExpandableListView.getExpandableListAdapter());    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[3]:method_text:[should throw NullPointerException"");        } catch (NullPointerException e) {        }    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[2]:method_text:[           } catch (NullPointerException e) {            }        });    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[3]:method_text:[ointerException"");        } catch (NullPointerException e) {        }    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[upClick(eq(mExpandableListView),                any(), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[(eq(mExpandableListView),                any(), eq(0), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[ULL,                mExpandableListView.getExpandableListPosition(2));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[quals(1, mExpandableListView.getFlatListPosition(0x8000000100000000L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[Group(1);        assertEquals(0, mExpandableListView.getSelectedId());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[;        assertTrue(mExpandableListView.setSelectedChild(0, 1, true));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[1]:method_text:[ListView.isGroupExpanded(0));        assertTrue(mExpandableListView.isGroupExpanded(1));    }   ])', 1), ('([8:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[8]:method_text:[e p2 = dest.onSaveInstanceState();        assertNotNull(p1);        assertNotNull(p2);    }   ])', 1), ('([4:/android/widget/cts/ExpandableListViewTest.java]:[STA]:[4]:method_text:[otected void dispatchDraw(Canvas canvas) {            super.dispatchDraw(canvas);        }    }}])', 1), ('([1:/android/app/cts/KeyguardInitialLockTest.java]:[STA]:[1]:method_text:[  + "" and must be revoked for security reasons ["" + validPkg + ""]"");            }        }    }}])', 1), ('([11:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[11]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[1]:method_text:[s() throws InterruptedException {        callTest(Constants.TEST_SET_DYNAMIC_SHORTCUTS);    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[2]:method_text:[s() throws InterruptedException {        callTest(Constants.TEST_ADD_DYNAMIC_SHORTCUTS);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[1]:method_text:[rtcuts() throws InterruptedException {        callTest(Constants.TEST_UPDATE_SHORTCUTS);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[1]:method_text:[ed() throws InterruptedException {        callTest(Constants.TEST_BG_SERVICE_THROTTLED);    }   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[2]:method_text:[ed() throws InterruptedException {        callTest(Constants.TEST_ACTIVITY_UNTHROTTLED);    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[1]:method_text:[    }    /**     * Flakey and may not work on OEM devices, so disabled.     */    @Suppress   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[STA]:[4]:method_text:[.gone(By.text(INLINE_REPLY_REMOTE_INPUT_CAPTION)), UI_TIMEOUT);        Thread.sleep(1000);    }}])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[STA]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[STA]:[1]:method_text:[is.getContext().getCacheDir().toString()));    }    native boolean testInstance(String path);   ])', 1), ('([2:/android/cts/rscpp/RSScriptTest.java]:[STA]:[2]:method_text:[this.getContext().getCacheDir().toString()));    }    native boolean testVector(String path);   ])', 1), ('([17:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[STA]:[17]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([11:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[STA]:[11]:method_text:[dle#getAppId     */    private static int getAppId(int uid) {        return uid % 100000;    }}])', 1), ('([5:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[MAC]:[5]:method_text:[TypeB"", MULTI_STEP_MIGRATOR_B)                    .setVersion(4)                    .build();   ])', 1), ('([11:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[11]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([3:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[3]:method_text:[t.getErrorMessage())                .contains(""Property config \'to\' not found for key"");    }   ])', 1), ('([3:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[3]:method_text:[  .build();        assertThat(doGet(mDb, ""namespace"", ""id1"")).containsExactly(expected);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[2]:method_text:[xactly(""testSchema"");        assertThat(setSchemaResponse.getMigratedTypes()).isEmpty();    }   ])', 1), ('([3:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[3]:method_text:[t());        assertThat(exception).hasMessageThat().contains(""Schema is incompatible."");    }   ])', 1), ('([1:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[1]:method_text:[""                                + ""But the schema types doesn\'t exist in the request"");    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[2]:method_text:[  .build();        assertThat(doGet(mDb, ""namespace"", ""id1"")).containsExactly(expected);    }   ])', 1), ('([4:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[4]:method_text:[        assertThat(doGet(mDb, ""namespace"", ""adult-id"")).containsExactly(expectedInAdult);    }   ])', 1), ('([16:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[16]:method_text:[TypeB"", MULTI_STEP_MIGRATOR_B)                    .setVersion(4)                    .build();   ])', 1), ('([3:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[3]:method_text:[   .build();        assertThat(doGet(mDb, ""namespace"", ""id"")).containsExactly(expected);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[2]:method_text:[   .build();        assertThat(doGet(mDb, ""namespace"", ""id"")).containsExactly(expected);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[STA]:[2]:method_text:[      .build();        assertThat(doGet(mDb, ""namespace"", ""id"")).containsExactly(expected);    }}])', 1), ('([10:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[STA]:[10]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([6:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[STA]:[6]:method_text:[ertThat(mHdmiControlManager.getClient(6)).isInstanceOf(HdmiSwitchClient.class);        }    }   ])', 1), ('([8:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[STA]:[8]:method_text:[StateChangeOnActiveSourceLost()).isEqualTo(                    originalValue);        }    }   ])', 1), ('([8:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[STA]:[8]:method_text:[lManager.getTvSendStandbyOnSleep()).isEqualTo(                    originalValue);        }    }}])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[STA]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([4:/com/android/cts/host/blob/DataCleanupTest.java]:[STA]:[4]:method_text:[he blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }   ])', 1), ('([4:/com/android/cts/host/blob/DataCleanupTest.java]:[STA]:[4]:method_text:[s the blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }}])', 1)]"	""	""	"[('STA', 98), ('MAC', 14)]"	"[('[android.view.cts.VerifyInputEventTest testMotionEvent None]', 2), ('[android.view.cts.VerifyInputEventTest testMotionEventWithoutHmac None]', 2), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 2), ('[android.view.cts.VerifyInputEventTest testDeviceIdBecomesVirtualForInjectedMotions None]', 2), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 2), ('[android.widget.cts.ExpandableListViewTest testExpandGroupSmooth None]', 2), ('[android.widget.cts.ExpandableListViewTest testOnSaveInstanceState None]', 2), ('[android.widget.cts.ExpandableListViewTest testDispatchDraw None]', 2), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_loadTest None]', 2), ('[android.text.style.cts.ClickableSpanTest testUpdateDrawState None]', 1), ('[android.text.style.cts.ClickableSpanTest testUpdateDrawStateNull None]', 1), ('[android.view.cts.VerifyInputEventTest testKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testKeyEventWithoutHmac None]', 1), ('[android.view.cts.VerifyInputEventTest testDeviceIdBecomesVirtualForInjectedKeys None]', 1), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.media.cts.SoundPoolTest testLoad None]', 1), ('[android.media.cts.SoundPoolTest testAutoPauseResume None]', 1), ('[android.os.cts.VibrationAttributesTest testGetAudioUsageReturnOriginalUsage None]', 1), ('[android.os.cts.VibrationAttributesTest testNotEqualsDifferentAudioUsage None]', 1), ('[android.os.cts.VibrationAttributesTest testHeuristics None]', 1), ('[android.net.cts.TrafficStatsTest testValidMobileStats None]', 1), ('[android.net.cts.TrafficStatsTest testValidTotalStats None]', 1), ('[android.net.cts.TrafficStatsTest testValidPacketStats None]', 1), ('[android.net.cts.TrafficStatsTest testThreadStatsTag None]', 1), ('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[android.telecom.cts.VideoCallTest testMakeTwoWayVideoCall None]', 1), ('[android.telecom.cts.VideoCallTest testMakeOneWayVideoCall None]', 1), ('[android.telecom.cts.VideoCallTest testUpgradeToVideo None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveSessionModifyRequest None]', 1), ('[android.telecom.cts.VideoCallTest testSendSessionModifyResponse None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveSessionModifyResponse None]', 1), ('[android.telecom.cts.VideoCallTest testVideoCallDelayProvider None]', 1), ('[android.telecom.cts.VideoCallTest testChangeCamera None]', 1), ('[android.telecom.cts.VideoCallTest testRequestCameraCapabilities None]', 1), ('[android.telecom.cts.VideoCallTest testRequestDataUsage None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveVideoQuality None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveCallSessionEvent None]', 1), ('[android.telecom.cts.VideoCallTest testReceivePeerDimensionChange None]', 1), ('[android.telecom.cts.VideoCallTest testSetDeviceOrientation None]', 1), ('[android.telecom.cts.VideoCallTest testSetPreviewSurface None]', 1), ('[android.telecom.cts.VideoCallTest testSetDisplaySurface None]', 1), ('[android.telecom.cts.VideoCallTest testSetZoom None]', 1), ('[android.telecom.cts.VideoCallTest testSetPauseImage None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructor None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildDivider None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetAdapterOfWrongType None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetAdapter None]', 1), ('[android.widget.cts.ExpandableListViewTest testAccessExpandableListAdapter None]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testCollapseGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnGroupClickListener None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnChildClickListener None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetExpandableListPosition None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetFlatListPosition None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetSelectedPosition None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetSelectedId None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetSelectedGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetSelectedChild None]', 1), ('[android.widget.cts.ExpandableListViewTest testIsGroupExpanded None]', 1), ('[android.app.cts.KeyguardInitialLockTest testSetInitialLockPermission None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testSetDynamicShortcuts None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testAddDynamicShortcuts None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testUpdateShortcuts None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testBgServiceThrottled None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testActivityUnthrottled None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testFgServiceUnthrottled None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testInlineReply None]', 1), ('[android.cts.rscpp.RSScriptTest testRSScriptTestSet None]', 1), ('[android.cts.rscpp.RSScriptTest testRSScriptTestInstance None]', 1), ('[android.appsecurity.cts.StatsdAppSecurityAtomTest testRoleHolder None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_downgrade None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_sameVersion None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_noMigration None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_sourceToNowhere None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toAnotherType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toMultipleDestinationType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep1To4 None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep2To4 None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep3To4 None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testGetHdmiClient None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_PowerStateChangeOnActiveSourceLost None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_TvTvSendStandbyOnSleep None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openBlob None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openBlob None]', 1)]"
""	"7.1.4.1"	"A-0-2"	"7.1.4.1/A-0-2"	"07010401.650002"	""">7.1.4.1/A-0-2] MUST support Vulkan 1.1. [<a href=""#7_1_display_and_graphics"""""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"188:552069) 7.3.8  . Proximity Sensor"	"7.3.8"	"C-1-4"	"7.3.8/C-1-4"	"07030800.670104"	"""C-1-4] MUST report a maximum range and resolution of 5. <h4 id=""739_high_fidelity_sensors"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-3-6"	"7.3.10/C-3-6"	"07031000.670306"	"""C-3-6] Must enable biometric-backed keystore keys to third-party applications. If device implementations contain an under-display fingerprint sensor (UDFPS), they: """	""	""	"UDFPS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/fingerprint/FingerprintServiceTest.java', 1)]"	"[('(4,UDFPS,/android/server/biometrics/fingerprint/FingerprintServiceTest.java)', 1)]"	"[('([4:/android/server/biometrics/fingerprint/FingerprintServiceTest.java]:[UDFPS]:[4]:method_text:[        return state.mSensorStates.containsModalityFlag(SensorStateProto.FINGERPRINT_UDFPS);    }])', 1)]"	""	""	"[('UDFPS', 1)]"	"[('[android.server.biometrics.fingerprint.FingerprintServiceTest testRejectThenErrorFromForegroundActivity None]', 1)]"
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-1-1"	"2.2.7.4/H-1-1"	"02020704.720101"	"""8.2/H-1-1] MUST ensure a sequential write performance of at least 100 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"263:733095) 9.8.10  . Connectivity Bug Report"	"9.8.10"	"C-1-5"	"9.8.10/C-1-5"	"09081000.670105"	"""C-1-5] MUST NOT include the following in the generated reports: Any kind of information that isn&#39;t directly related to connectivity debugging. Any kind of user-installed application traffic logs or detailed profiles of user-installed applications/packages (UIDs are okay, package names are not). MAY include additional information that is not associated with any user identity. (e.g. vendor logs). If device implementations include additional information (e.g. vendor logs) in bug reports and that information has privacy/security/battery/storage/memory impact, they: """	""	""	"UID"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/app/AppExitTest/src/android/app/cts/ActivityManagerAppExitInfoTest.java', 14), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/ActivityManagerIncidentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/app/MediaSessionTest/src/android/media/session/cts/MediaSessionManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/testharness/app/src/android/testharness/app/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessErrorStateInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/harmfulappwarning/testapp/src/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/CtsSyncAccountAccessOtherCertTests/src/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityStarterTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/metric/CountMetricsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/CredentialsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/SurfaceControlViewHostTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/AlarmManagerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/GeneralDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/os/src/android/os/cts/EnvironmentHostTests.java', 1)]"	"[('(25,UID,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(60,UID,/android/net/cts/TrafficStatsTest.java)', 1), ('(6,UID,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(8,UID,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(1,UID,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(3,UID,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(3,UID,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(5,UID,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(4,UID,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(7,UID,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(10,UID,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,UID,/android/server/wm/KeyguardInputTests.java)', 1), ('(72,UID,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,UID,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,UID,/android/server/wm/AssistantStackTests.java)', 1), ('(2,UID,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(7,UID,/android/content/cts/ClipDescriptionTest.java)', 1), ('(4,UID,/android/media/cts/MediaController2Test.java)', 1), ('(17,UID,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(89,UID,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(2,UID,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(2,UID,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(22,UID,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(1,UID,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(25,UID,/com/android/server/cts/ActivityManagerIncidentTest.java)', 1), ('(29,UID,/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java)', 1), ('(2,UID,/android/media/cts/AudioTrackTest.java)', 1), ('(2,UID,/com/android/cts/delegate/EnableSystemAppDelegateTest.java)', 1), ('(1,UID,/android/server/wm/lifecycle/ActivityStarterTests.java)', 1), ('(34,UID,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(1,UID,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(5,UID,/android/carrierapi/cts/BugreportManagerTest.java)', 1), ('(2,UID,/android/cts/statsd/metric/CountMetricsTests.java)', 1), ('(9,UID,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(3,UID,/android/net/cts/CredentialsTest.java)', 1), ('(5,UID,/android/media/cts/VisualizerTest.java)', 1), ('(2,UID,/android/media/session/cts/MediaSessionManagerTest.java)', 1), ('(1,UID,/android/server/wm/BackgroundActivityLaunchTest.java)', 1), ('(6,UID,/android/view/inputmethod/cts/InputMethodManagerTest.java)', 1), ('(56,UID,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(4,UID,/android/view/cts/ViewTest.java)', 1), ('(3,UID,/android/telephony/cts/CarrierConfigManagerTest.java)', 1), ('(3,UID,/android/testharness/app/TestHarnessModeDeviceTest.java)', 1), ('(10,UID,/android/app/cts/ActivityManagerProcessErrorStateInfoTest.java)', 1), ('(9,UID,/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java)', 1), ('(8,UID,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(3,UID,/android/server/wm/SurfaceControlViewHostTests.java)', 1), ('(12,UID,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(11,UID,/com/android/server/cts/AlarmManagerIncidentTest.java)', 1), ('(9,UID,/com/android/cts/launchertests/QuietModeTest.java)', 1), ('(1,UID,/com/android/cts/delegate/GeneralDelegateTest.java)', 1), ('(1,UID,/android/os/cts/EnvironmentHostTests.java)', 1), ('(26,UID,/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java)', 1), ('(71,UID,/android/app/cts/ActivityManagerAppExitInfoTest.java)', 1)]"	"[('([20:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[20]:method_text:[());        assertTrue(""uuid filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 2), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[1]:method_text:[YSTEM, because     * network rules for this user will affect UID 0.     */    @RequiresDevice   ])', 2), ('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[n so that it does not affect other tests.            view.cancelDragAndDrop();        }    }   ])', 2), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[5]:method_text:[oolean, int)} correctly     * set the opportunistic property of the given subscription.     */   ])', 2), ('([60:/android/net/cts/TrafficStatsTest.java]:[UID]:[60]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[UID]:[2]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[UID]:[4]:method_text:[.gone(By.text(INLINE_REPLY_REMOTE_INPUT_CAPTION)), UI_TIMEOUT);        Thread.sleep(1000);    }}])', 1), ('([8:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[UID]:[8]:method_text:[dle#getAppId     */    private static int getAppId(int uid) {        return uid % 100000;    }}])', 1), ('([1:/android/media/cts/MediaPlayerDrmTest.java]:[UID]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[UID]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/android/bluetooth/cts/BasicAdapterTest.java]:[UID]:[2]:method_text:[                mAdapterNameChangedlock.unlock();                }            }        }    };}])', 1), ('([3:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[UID]:[3]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([4:/android/server/wm/UnsupportedErrorDialogTests.java]:[UID]:[4]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[UID]:[1]:method_text:[e.getUriFor(settingName),                Settings.Secure::getInt, Settings.Secure::putInt);    }}])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[UID]:[3]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[UID]:[1]:method_text:[           ""Profile Owner is not allowed to access Device IDs."");            }        }    }   ])', 1), ('([4:/android/media/cts/MediaDrmMetricsTest.java]:[UID]:[4]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[UID]:[1]:method_text:[etrics.keySet().contains(GOOGLE_CLEARKEY_VENDOR_ID));        drm.close();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[UID]:[1]:method_text:[   BaseEncoding.base16().encode(sid2).toLowerCase()));       drm.close();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[UID]:[1]:method_text:[ng(hexSid),            lessThanOrEqualTo(endTimesMs.getLong(hexSid)));        drm.close();    }}])', 1), ('([10:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[UID]:[10]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[UID]:[1]:method_text:[the keyguard, and inject BACK key. Ensure that the BACK key goes     * to the activity.     */   ])', 1), ('([6:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[6]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([11:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[11]:method_text:[    assertFalse(""service data filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 1), ('([15:/android/bluetooth/cts/ScanFilterTest.java]:[UID]:[15]:method_text:[nufacturerDataMask).build();        testReadWriteParcelForFilter(filter);    }    @SmallTest   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[UID]:[1]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[UID]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[UID]:[2]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([6:/android/content/cts/ClipDescriptionTest.java]:[UID]:[6]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[UID]:[1]:method_text:[ity(intent);        mUiDevice.wait(Until.hasObject(By.pkg(clazz.getPackageName())), 15000);    }}])', 1), ('([2:/android/media/cts/MediaController2Test.java]:[UID]:[2]:method_text:[  assertEquals(frameworkParcelable, connectionHintsOut.getParcelable(testKey));        }    }   ])', 1), ('([2:/android/media/cts/MediaController2Test.java]:[UID]:[2]:method_text:[    } catch (InterruptedException e) {                return false;            }        }    }}])', 1), ('([8:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[UID]:[8]:method_text:[groundWhitelist(oldUid, false);        assertRestrictBackgroundWhitelist(newUid, false);    }   ])', 1), ('([9:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[UID]:[9]:method_text:[esult = runCommand(""cmd deviceidle enabled deep"").trim();        return result.equals(""1"");    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[1]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([33:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[33]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                .isEqualTo(0L);    }   ])', 1), ('([29:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[29]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([26:/com/android/cts/blob/BlobStoreManagerTest.java]:[UID]:[26]:method_text:[reStatsForUid.getDataBytes())                .isEqualTo(0L);        blobData.delete();    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[UID]:[1]:method_text:[s);    @ClassRule @Rule    public static final DeviceState sDeviceState = new DeviceState();   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[UID]:[1]:method_text:[))                .isEqualTo(String.valueOf(sUserManager.getSerialNumberForUser(user)));    }   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[UID]:[2]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([4:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[4]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[1]:method_text:[         ""one_time_permissions_killed_delay_millis"", 5000L)));        assertDenied(500);    }   ])', 1), ('([17:/android/permission/cts/OneTimePermissionTest.java]:[UID]:[17]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[UID]:[1]:method_text:[f the caller isn\'t permitted."");        } catch (SecurityException expected) {        }    }   ])', 1), ('([2:/com/android/server/cts/ActivityManagerIncidentTest.java]:[UID]:[2]:method_text:[ic final int SYSTEM_UID = 1000;    /**     * Tests activity manager dumps broadcasts.     */   ])', 1), ('([23:/com/android/server/cts/ActivityManagerIncidentTest.java]:[UID]:[23]:method_text:[t : attp.getPackageTimesList()) {            assertTrue(pt.getDurationMs() >= 0);        }    }}])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java]:[UID]:[1]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([14:/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java]:[UID]:[14]:method_text:[ertThat(afterStatsForUid.getDataBytes()).isGreaterThan(beforeStatsForUid.getDataBytes());    }   ])', 1), ('([14:/com/android/cts/appsearch/app/AppSearchSessionPlatformCtsTest.java]:[UID]:[14]:method_text:[    assertThat(afterStatsForUid.getDataBytes()).isEqualTo(beforeStatsForUid.getDataBytes());    }}])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[UID]:[2]:method_text:[ble to create "" + MAX_TRACKS + "" tracks - that\'s too many!"",            n < MAX_TRACKS);    }   ])', 1), ('([2:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[UID]:[2]:method_text:[   mDpm.enableSystemApp(null, new Intent().setPackage(TEST_APP_PKG));                });    }   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[UID]:[1]:method_text:[  * - {@code FLAG_ACTIVITY_RESET_TASK_IF_NEEDED}     * - {@code FLAG_ACTIVITY_NEW_TASK}     */   ])', 1), (""([2:/android/telephony/cts/SubscriptionManagerTest.java]:[UID]:[2]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([7:/android/telephony/cts/SubscriptionManagerTest.java]:[UID]:[7]:method_text:[p, null);            fail();        } catch (NullPointerException expected) {        }    }   ])', 1), ('([12:/android/telephony/cts/SubscriptionManagerTest.java]:[UID]:[12]:method_text:[nsInGroup(uuid);        assertNotNull(infoList);        assertTrue(infoList.isEmpty());    }   ])', 1), ('([13:/android/telephony/cts/SubscriptionManagerTest.java]:[UID]:[13]:method_text:[nsInGroup(uuid);        assertNotNull(infoList);        assertTrue(infoList.isEmpty());    }   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[UID]:[1]:method_text:[;        FileUtils.closeQuietly(mScreenshotFd);        killCurrentBugreportIfRunning();    }   ])', 1), ('([4:/android/carrierapi/cts/BugreportManagerTest.java]:[UID]:[4]:method_text:[to be closed, but got: "" + fd);        } catch (IllegalStateException expected) {        }    }}])', 1), ('([2:/android/cts/statsd/metric/CountMetricsTests.java]:[UID]:[2]:method_text:[ntBucketInfo::getCount)                .sum();        assertThat(totalCount).isEqualTo(3);    }}])', 1), ('([9:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[UID]:[9]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([3:/android/net/cts/CredentialsTest.java]:[UID]:[3]:method_text:[s(Integer.MIN_VALUE, cred.getPid());        assertEquals(Integer.MIN_VALUE, cred.getUid());    }}])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[UID]:[1]:method_text:[ctor    //----------------------------------    //Test case 0.0: test constructor and release   ])', 1), ('([2:/android/media/cts/VisualizerTest.java]:[UID]:[2]:method_text:[seVisualizer();        }    }    //Test case 4.2: test measurement of peak / RMS in Long MP3   ])', 1), ('([2:/android/media/cts/VisualizerTest.java]:[UID]:[2]:method_text:[ catch(InterruptedException e) {            }            mListenerThread = null;        }    }}])', 1), (""([1:/android/media/session/cts/MediaSessionManagerTest.java]:[UID]:[1]:method_text:[rMediaControl(userInfo));    }    /**     * Tests if this application isn't trusted.     */   ])"", 1), ('([1:/android/media/session/cts/MediaSessionManagerTest.java]:[UID]:[1]:method_text:[cess.myUid());        assertFalse(mMediaSessionManager.isTrustedForMediaControl(userInfo));    }}])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[UID]:[1]:method_text:[      stopTestPackage(TEST_PACKAGE_APP_B);        AppOpsUtils.reset(APP_A_PACKAGE_NAME);    }   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[UID]:[1]:method_text:[{            runShellCommand(""ime reset"");            mNeedsImeReset = false;        }    }   ])', 1), ('([5:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[UID]:[5]:method_text:[ {            runShellCommand(""ime enable "" + id);        }        mNeedsImeReset = true;    }}])', 1), ('([18:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[18]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([4:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[4]:method_text:[;        assertTrue(isCryptoSchemeSupportedNative(uuidByteArray(CLEARKEY_SCHEME_UUID)));    }   ])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[2]:method_text:[ion {        assertFalse(isCryptoSchemeSupportedNative(uuidByteArray(BAD_SCHEME_UUID)));    }   ])', 1), ('([3:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[3]:method_text:[                Uri.parse(Utils.getMediaPath() + CENC_CLEARKEY_VIDEO_PATH).toString()));    }   ])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[2]:method_text:[    }        assertTrue(testQueryKeyStatusNative(uuidByteArray(CLEARKEY_SCHEME_UUID)));    }   ])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[2]:method_text:[     }        assertTrue(testFindSessionIdNative(uuidByteArray(CLEARKEY_SCHEME_UUID)));    }   ])', 1), ('([4:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[4]:method_text:[EME_UUID), ""description"", value);        assertEquals(""ClearKey CDM"", value.toString());    }   ])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[2]:method_text:[ }        assertTrue(testPropertyByteArrayNative(uuidByteArray(CLEARKEY_SCHEME_UUID)));    }   ])', 1), ('([17:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[17]:method_text:[ring videoUrl);    private static native boolean testQueryKeyStatusNative(final byte[] uuid);   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[1]:method_text:[ediaPath() + CENC_CLEARKEY_VIDEO_PATH),            VIDEO_WIDTH_CENC, VIDEO_HEIGHT_CENC);    }   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[UID]:[1]:method_text:[tMediaPath() + CENC_CLEARKEY_VIDEO_PATH),            VIDEO_WIDTH_CENC, VIDEO_HEIGHT_CENC);    }}])', 1), ('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());        return shadowBuilder;    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[UID]:[1]:method_text:[uInflater getMenuInflater() {                    return null;                }            };   ])', 1), ('([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[UID]:[1]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 1), ('([2:/android/telephony/cts/CarrierConfigManagerTest.java]:[UID]:[2]:method_text:[l();        }        config = mConfigManager.getConfig();        checkConfig(config);    }   ])', 1), ('([1:/android/testharness/app/TestHarnessModeDeviceTest.java]:[UID]:[1]:method_text:[tyRule =            new ActivityTestRule<>(android.testharness.app.TestHarnessActivity.class);   ])', 1), ('([2:/android/testharness/app/TestHarnessModeDeviceTest.java]:[UID]:[2]:method_text:[     Assert.assertTrue(device.hasObject(By.res(""android.testharness.app"", ""text_view"")));    }   ])', 1), ('([5:/android/app/cts/ActivityManagerProcessErrorStateInfoTest.java]:[UID]:[5]:method_text:[ values.longMsg);        assertNull(values.crashData);  // Deprecated field: always null    }   ])', 1), ('([5:/android/app/cts/ActivityManagerProcessErrorStateInfoTest.java]:[UID]:[5]:method_text:[g, values.longMsg);        assertNull(values.crashData);  // Deprecated field: always null    }}])', 1), ('([8:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[UID]:[8]:method_text:[    public void tearDown() {        mSampleActivityStartedReceiver.unregisterQuietly();    }   ])', 1), ('([1:/android/harmfulappwarning/testapp/HarmfulAppWarningDeviceTest.java]:[UID]:[1]:method_text:[arningShown();        getUiDevice().pressHome();        verifySampleActivityNotLaunched();    }}])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[5]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[UID]:[2]:method_text:[ser(SHARED_UID_APP2_APK, mUserId);        executeDeviceTestClass("".KeyManagementTest"");    }   ])', 1), ('([3:/android/server/wm/SurfaceControlViewHostTests.java]:[UID]:[3]:method_text:[oid surfaceChanged(SurfaceHolder holder, int format, int width,            int height) {    }   ])', 1), ('([6:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[UID]:[6]:method_text:[            return 0;        }        return 1 + (int)((now - start - 1000)/interval);    }   ])', 1), ('([6:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[UID]:[6]:method_text:[arms && SystemClock.uptimeMillis() < deadLine);        return alarmCount >= expectedAlarms;    }}])', 1), ('([11:/com/android/server/cts/AlarmManagerIncidentTest.java]:[UID]:[11]:method_text:[);        // Nesting should be non-negative.        assertTrue(0 <= filter.getNesting());    }}])', 1), ('([7:/com/android/cts/launchertests/QuietModeTest.java]:[UID]:[7]:method_text:[y.getInstrumentation(), mOriginalLauncher);        startActivitySync(mOriginalLauncher);    }   ])', 1), ('([1:/com/android/cts/launchertests/QuietModeTest.java]:[UID]:[1]:method_text:[        return trySetQuietModeEnabled(enabled, true, flags, expectsCredentialsNotNeeded);    }   ])', 1), ('([1:/com/android/cts/launchertests/QuietModeTest.java]:[UID]:[1]:method_text:[ntationRegistry.getInstrumentation(),                LAUNCHER_ACTIVITY.flattenToString());    }}])', 1), ('([1:/com/android/cts/delegate/GeneralDelegateTest.java]:[UID]:[1]:method_text:[h uid \\\\d+ is not "" + otherPackage,                    expected.getMessage());        }    }   ])', 1), ('([1:/android/os/cts/EnvironmentHostTests.java]:[UID]:[1]:method_text:[et --uid android.cts.environment ""                + appOp + (val ? "" allow"" : "" deny""));    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[{            Log.w(TAG, ""Failed to clean up voicemail tables in tearDown"", e);        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[ptionsFromGroup(List,     * ParcelUuid)} correctly remove the given subscription group.     */   ])', 1), ('([7:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[7]:method_text:[ager.getSubscriptionsInGroup(uuid);            assertThat(infoList).isEmpty();        }    }   ])', 1), ('([6:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[6]:method_text:[ng group.     *     * <p>This test required the device has more than one subscription.     */   ])', 1), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[5]:method_text:[ruptedException {            return mReceiveLatch.await(30, TimeUnit.SECONDS);        }    }   ])', 1), ('([2:/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java]:[UID]:[2]:method_text:[t scroll through notifications to find permission request ""            + ""b/147410068"")     */   ])', 1), ('([24:/com/android/cts/content/CtsSyncAccountAccessOtherCertTestCases.java]:[UID]:[24]:method_text:[                 Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_VR_HEADSET);    }}])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[             ""Visit https://source.android.com/devices/tech/config/uicc.html"");        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[1]:method_text:[ptionsFromGroup(List, ParcelUuid)} correctly remove     * the given subscription group.     */   ])', 1), ('([7:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[7]:method_text:[ager.getSubscriptionsInGroup(uuid);            assertTrue(infoList.isEmpty());        }    }   ])', 1), ('([6:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[6]:method_text:[sting group.     *     * This test required the device has more than one subscription.     */   ])', 1), ('([5:/android/carrierapi/cts/CarrierApiTest.java]:[UID]:[5]:method_text:[n {            return mReceiveLatch.await(30, TimeUnit.SECONDS);        }    }    @Suppress   ])', 1), ('([19:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[19]:method_text:[Manager.class);        return am.getHistoricalProcessExitReasons(packageName, pid, max);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[+"") == -1) {                break;            }        }        return memConsumers;    }   ])', 1), ('([2:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[2]:method_text:[    ApplicationExitInfo.REASON_SIGNALED, OsConstants.SIGKILL, null, now, now2);        }    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[              ApplicationExitInfo.REASON_SIGNALED, OsConstants.SIGKILL, null, now, now2);    }   ])', 1), ('([5:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[5]:method_text:[f(trace) >= 0);        monitor.finish();        mContext.unregisterReceiver(receiver);    }   ])', 1), ('([12:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[12]:method_text:[tSep, start);        assertTrue(end > start);        return dump.substring(start, end);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[ew StringBuilder()));    }    // A clone of testPermissionChange using a different revoke api   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[ebugUtils.sizeValueToString(                info.getRss() * 1024, new StringBuilder()));    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[B_PACKAGE_NAME,                ApplicationExitInfo.REASON_CRASH, null, null, now, now2);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[GE_NAME,                ApplicationExitInfo.REASON_CRASH_NATIVE, null, null, now, now2);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[_NAME,                ApplicationExitInfo.REASON_USER_REQUESTED, null, null, now, now2);    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[1]:method_text:[NAME,                ApplicationExitInfo.REASON_DEPENDENCY_DIED, null, null, now, now2);    }   ])', 1), ('([10:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[10]:method_text:[ = 0;            mOtherUserHandle = null;            mOtherUidWatcher = null;        }    }   ])', 1), ('([15:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[UID]:[15]:method_text:[info.getProcessStateSummary(), cookie,                cookie == null ? 0 : cookie.length));    }}])', 1)]"	""	""	"[('UID', 132)]"	"[('[android.carrierapi.cts.CarrierApiTest testVoiceMailNumber None]', 2), ('[android.carrierapi.cts.CarrierApiTest testCreateAndRemoveSubscriptionGroup None]', 2), ('[android.carrierapi.cts.CarrierApiTest testAddSubscriptionToExistingGroupForMultipleSims None]', 2), ('[android.carrierapi.cts.CarrierApiTest testAddSubscriptionToExistingGroupForEsim None]', 2), ('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testInlineReply None]', 1), ('[android.appsecurity.cts.StatsdAppSecurityAtomTest testRoleHolder None]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_listenUsingRfcommWithServiceRecord None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testAnrIsNotShown None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testProfileOwnerCannotAttestDeviceUniqueIds None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsEmpty None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsSession None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsGetKeyRequest None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceUuidFilter None]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceSolicitationUuidFilter None]', 1), ('[android.bluetooth.cts.ScanFilterTest testsetServiceDataFilter None]', 1), ('[android.bluetooth.cts.ScanFilterTest testReadWriteParcel None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[android.content.cts.ClipDescriptionTest testClassificationConfidenceValuesAreValid None]', 1), ('[android.media.cts.MediaController2Test testBuilder_setConnectionHints_withFrameworkParcelable None]', 1), ('[android.media.cts.MediaController2Test testCancelSessionCommand None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_reinstall None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testAppIdleAndBatterySaver_tempPowerSaveAndAppIdleWhitelists None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromPrimaryUser_targetIsWorkProfile_launches None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[android.permission.cts.OneTimePermissionTest testPermissionRevokedOnKill None]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart None]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetPackagesAndVisibilityForAccount None]', 1), ('[com.android.server.cts.ActivityManagerIncidentTest testDumpProcesses None]', 1), ('[com.android.cts.appsearch.app.AppSearchSessionPlatformCtsTest testStorageAttributedToSelf_withDocument None]', 1), ('[com.android.cts.appsearch.app.AppSearchSessionPlatformCtsTest testStorageAttributedToSelf_withoutDocument None]', 1), ('[android.media.cts.AudioTrackTest testMaxAudioTracks None]', 1), ('[com.android.cts.delegate.EnableSystemAppDelegateTest testCannotAccessApis None]', 1), ('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSubscriptionGrouping None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSubscriptionGroupingWithPermission None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testAddSubscriptionIntoNewGroupWithPermission None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrant_developmentPermission None]', 1), ('[android.carrierapi.cts.BugreportManagerTest TestName None]', 1), ('[android.carrierapi.cts.BugreportManagerTest onFinished None]', 1), ('[android.cts.statsd.metric.CountMetricsTests testSlicedStateCountMetricNoReset None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.cts.CredentialsTest testCredentials None]', 1), ('[android.media.cts.VisualizerTest test4_1MeasurePeakRms None]', 1), ('[android.media.cts.VisualizerTest test4_2MeasurePeakRmsLongMP3 None]', 1), ('[android.media.session.cts.MediaSessionManagerTest testIsTrusted_returnsTrue None]', 1), ('[android.media.session.cts.MediaSessionManagerTest testIsTrusted_returnsFalse None]', 1), ('[android.view.inputmethod.cts.InputMethodManagerTest testShowInputMethodPicker None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testIsCryptoSchemeSupported None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testIsCryptoSchemeNotSupported None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testPssh None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testQueryKeyStatus None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testFindSessionId None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testGetPropertyString None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testPropertyByteArray None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testUnknownPropertyString None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testClearKeyPlaybackCenc None]', 1), ('[android.media.cts.NativeMediaDrmClearkeyTest testClearKeyPlaybackCenc2 None]', 1), ('[android.view.cts.ViewTest testOverlappingRendering None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest testRevokePermission None]', 1), ('[android.app.cts.ActivityManagerProcessErrorStateInfoTest testWriteToParcel None]', 1), ('[android.app.cts.ActivityManagerProcessErrorStateInfoTest testReadFromParcel None]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest register None]', 1), ('[android.harmfulappwarning.testapp.HarmfulAppWarningDeviceTest testDismissDialog None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testStateOfSensorsRelatedPermissionsCannotBeRead None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testKeyManagement None]', 1), ('[android.server.wm.SurfaceControlViewHostTests getDisplay None]', 1), ('[android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testAlarmClockNotBlocked None]', 1), ('[com.android.server.cts.AlarmManagerIncidentTest testAlarmManagerServiceDump None]', 1), ('[com.android.cts.launchertests.QuietModeTest testTryEnableQuietMode_noCredentialRequest None]', 1), ('[com.android.cts.launchertests.QuietModeTest testTryDisableQuietMode None]', 1), ('[com.android.cts.delegate.GeneralDelegateTest testDifferentPackageNameThrowsException None]', 1), ('[android.carrierapi.cts.CarrierApiTest werePreconditionsSatisfied None]', 1), ('[android.carrierapi.cts.CarrierApiTest testSetClearSignalStrengthUpdateRequest None]', 1), ('[com.android.cts.content.CtsSyncAccountAccessOtherCertTestCases disallowSyncAdapterRunInBackgroundAndDataInBackground None]', 1), ('[com.android.cts.content.CtsSyncAccountAccessOtherCertTestCases testAccountAccess_otherCertAsAuthenticatorCanNotSeeAccount None]', 1), ('[android.carrierapi.cts.CarrierApiTest isSimCardPresent None]', 1), ('[android.carrierapi.cts.CarrierApiTest testSendEnvelopeWithStatus None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest finish None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testExitCode None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testLmkdKill None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testKillBySignal None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testAnr None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testOther None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testPermissionChange None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testPermissionChangeWithReason None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testCrash None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testNativeCrash None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testUserRequested None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testDependencyDied None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testMultipleProcess None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testSecondaryUser None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-7"	"9.9.3/C-1-7"	"09090300.670107"	"""C-1-7] MUST be cryptographically bound to a hardware-backed Keystore. This keystore MUST be bound to Verified Boot and the device&#39;s hardware root of trust."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-9"	"9.9.3/C-1-9"	"09090300.670109"	"""C-1-9] CE keys MUST be bound to a default passcode when the user has not specified lock screen credentials."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"19:170348) 2.2.7.3  . Hardware"	"2.2.7.3"	"H-1-1"	"2.2.7.3/H-1-1"	"02020703.720101"	"""7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p. && 7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p. | 7.1.1.3/H-1-1] MUST have screen density of at least 400 dpi. && 7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p. && 7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p. | 7.1.1.3/H-1-1] MUST have screen density of at least 400 dpi. | 7.6.1/H-1-1] MUST have at least 6 GB of physical memory. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS android.os.Build.VERSION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 13), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java', 8), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/UffdGc/src/android/os/cts/uffdgc/UserfaultfdTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationValuesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/sdkextensions/src/android/os/ext/cts/SdkExtensionsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreTrashedTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ProxyInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreMatchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkWatchlistTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/bootstats/src/android/bootstats/cts/BootStatsHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AlarmManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkStatsBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncoderColorAspectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_FilesTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src_target/com/android/test/usesnativesharedlibrary/LoadTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorUnitTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1)]"	"[('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 2), ('(2,VERSION_CODES,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CameraManagerTest.java)', 2), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreTrashedTest.java)', 1), ('(1,VERSION_CODES,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(14,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(1,VERSION_CODES,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java)', 1), ('(1,VERSION_CODES,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/EncryptionTest.java)', 1), ('(2,VERSION_CODES,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(2,android.os.Build.VERSION,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/ProxyInfoTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(4,VERSION_CODES,/android/app/cts/NotificationTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java)', 1), ('(2,VERSION_CODES,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,android.os.Build.VERSION,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreMatchTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkWatchlistTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_GenresTest.java)', 1), ('(7,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,VERSION_CODES,/android/bootstats/cts/BootStatsHostTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaCodecTest.java)', 1), ('(3,VERSION_CODES,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,android.os.Build.VERSION,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/AlarmManagerTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkStatsBinderTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(1,VERSION_CODES,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(1,VERSION_CODES,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/EncoderColorAspectsTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/VerifiedBootTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(1,VERSION_CODES,/android/scopedstorage/cts/ScopedStorageTest.java)', 1), ('(2,VERSION_CODES,/android/app/role/cts/RoleManagerTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_FilesTest.java)', 1), ('(2,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,VERSION_CODES,/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(7,VERSION_CODES,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonTest.java)', 1), ('(1,VERSION_CODES,_target/com/android/test/usesnativesharedlibrary/LoadTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(2,VERSION_CODES,/android/os/ext/cts/SdkExtensionsTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(9,VERSION_CODES,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,VERSION_CODES,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(2,VERSION_CODES,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/ExtractorUnitTest.java)', 1), ('(2,VERSION_CODES,/android/media/mediaparser/cts/MediaParserTest.java)', 1), ('(3,VERSION_CODES,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestXheAac.java)', 1)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[} finally {            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 4), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 3), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[    assertTrue(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 3), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[ This follows the Manage Channel     * command described in TS 102 221 Section 11.1.17.     */   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[r a logical channel and makes sure appropriate     * errors are returned from the UICC.     */   ])', 2), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[VERSION_CODES]:[1]:method_text:[  hardwareLevel != CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_GRANTED);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[withoutPermission(                        DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S));    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStoreTrashedTest.java]:[VERSION_CODES]:[1]:method_text:[meName);    }    /**     * Verify that we can trash and untrash an item that we own.     */   ])', 1), ('([1:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[VERSION_CODES]:[1]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/media/cts/DecoderTestAacFormat.java]:[VERSION_CODES]:[1]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[VERSION_CODES]:[1]:method_text:[     * Verify correct decoding of MPEG-4 AAC with output level normalization to -23dBFS.     */   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[VERSION_CODES]:[1]:method_text:[                      mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));        }    }   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[VERSION_CODES]:[1]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[;        } else {            mManager.setTestProviderEnabled(provider, enabled);        }    }}])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([3:/android/security/cts/EncryptionTest.java]:[VERSION_CODES]:[3]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[VERSION_CODES]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[android.os.Build.VERSION]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([1:/android/net/cts/ProxyInfoTest.java]:[VERSION_CODES]:[1]:method_text:[      proxy2.getExclusionList());        assertEquals(TEST_URI, proxy2.getPacFileUrl());    }   ])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[VERSION_CODES]:[1]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[   assertFalse(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 1), (""([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[VERSION_CODES]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[VERSION_CODES]:[1]:method_text:[    } catch (Exception ignore) {}    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[VERSION_CODES]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/os/cts/uffdgc/UserfaultfdTest.java]:[VERSION_CODES]:[2]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/android/os/cts/uffdgc/UserfaultfdTest.java]:[android.os.Build.VERSION]:[1]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[VERSION_CODES]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/media/MediaStoreMatchTest.java]:[VERSION_CODES]:[1]:method_text:[olumeName);        mExternalImages = MediaStore.Images.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/cts/NetworkWatchlistTest.java]:[VERSION_CODES]:[1]:method_text:[ager.getNetworkWatchlistConfigHash() correctly     * returns the hash of config we set.     */   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_GenresTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/bootstats/cts/BootStatsHostTest.java]:[VERSION_CODES]:[2]:method_text:[ = device;    }    @Override    public ITestDevice getDevice() {        return mDevice;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[VERSION_CODES]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> ShellCommand.builder(INVALID_COMMAND_LEGACY_OUTPUT).execute());    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[2]:method_text:[ACY_OUTPUT).execute())                .contains(INVALID_COMMAND_EXPECTED_LEGACY_OUTPUT);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[android.os.Build.VERSION]:[1]:method_text:[L_OUTPUT_FILTER = (output) -> false;    private static final String COMMAND = ""pm list users"";   ])', 1), ('([1:/android/app/cts/AlarmManagerTest.java]:[VERSION_CODES]:[1]:method_text:[                    ? nextAlarmClock.getTriggerTime()                    : null);        }    }}])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[VERSION_CODES]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[VERSION_CODES]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/net/cts/NetworkStatsBinderTest.java]:[VERSION_CODES]:[1]:method_text:[        if (match != null) return match.applicationInfo.uid;        return INVALID_UID;    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VERSION_CODES]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[VERSION_CODES]:[1]:method_text:[ event -> ""showSoftInput"".equals(event.getEventName()), TIMEOUT);            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[VERSION_CODES]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/mediav2/cts/EncoderColorAspectsTest.java]:[VERSION_CODES]:[1]:method_text:[pareParamList(exhaustiveArgsList, isEncoder, needAudio, needVideo, false);    }    @SmallTest   ])', 1), ('([2:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[2]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[1]:method_text:[ on the device"",                pm.hasSystemFeature(PackageManager.FEATURE_VERIFIED_BOOT));    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[VERSION_CODES]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[VERSION_CODES]:[1]:method_text:[ executeShellCommand(""am get-current-user"");        return Integer.parseInt(userId.trim());    }}])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[PP_PACKAGE_NAME);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[ification(true));    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/provider/cts/media/MediaStore_FilesTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[ing the specifier to set a band.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java]:[VERSION_CODES]:[1]:method_text:[l() {        return mContext.getApplicationContext().getApplicationInfo().targetSdkVersion;    }}])', 1), (""([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([2:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[2]:method_text:[alFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[lse)) {            fail(""Failed to cancel notification id="" + notificationId);        }    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[VERSION_CODES]:[1]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                        == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }}])', 1), ('([1:_target/com/android/test/usesnativesharedlibrary/LoadTest.java]:[VERSION_CODES]:[1]:method_text:[()));    }    /**     * Tests if libs listed in unavailable.txt are all non-loadable     */   ])', 1), ('([1:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[VERSION_CODES]:[1]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[ { }        }    }    /** Verifies that getExtensionVersion only return existing versions */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[versions yet.            assertEquals(0, SdkExtensions.getExtensionVersion(sdk));        }    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[VERSION_CODES]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[android.os.Build.VERSION]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[n(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> sTestApis.permissions().withoutPermission(INSTALL_PERMISSION));    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[2]:method_text:[ON_NOT_HELD_BY_SHELL_PRE_S))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[all the testapp without granting all runtime    //  permissions, add a test that this works pre-Q}])', 1), ('([1:/android/alarmmanager/cts/BasicApiTests.java]:[VERSION_CODES]:[1]:method_text:[   public void onAlarm() {            onReceive(null, new Intent(mTargetAction));        }    }}])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[VERSION_CODES]:[2]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[android.os.Build.VERSION]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/android/mediav2/cts/ExtractorUnitTest.java]:[VERSION_CODES]:[1]:method_text:[lic static class TestApi {        @Rule        public TestName testName = new TestName();       ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[public void setUp() {        assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);    }   ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[aParser.getLogSessionId()).isSameInstanceAs(logSessionId);        mediaParser.release();    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[sCoupledSinkSupportedAtSource());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[_SOURCE, info.getR2DeviceInfo());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java]:[VERSION_CODES]:[1]:method_text:[mVolumeName);        mExternalVideo = MediaStore.Video.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[VERSION_CODES]:[1]:method_text:[* Verify the correct decoding of USAC bitstreams with different MPEG-D DRC effect types.     */   ])', 1)]"	""	""	"[('VERSION_CODES', 120), ('android.os.Build.VERSION', 9)]"	"[('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 2), ('[android.location.cts.fine.LocationManagerFineTest currentTimeMillis None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccOpenLogicalChannelWithInvalidP2 None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel None]', 2), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testNoLegacyOnQ None]', 2), ('[android.os.cts.uffdgc.UserfaultfdTest isAutomotive None]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry None]', 2), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 2), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest dropShellPermissionIdentity None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability None]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testSetNotExistCertInstallerPackage None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssNavigationMessageCallback None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.net.cts.ProxyInfoTest testBuildPacProxy None]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testGnssNavigationMessageMandatoryFieldRanges None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_noConversationTitle None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withConversationTitle_legacy None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withoutConversationTitle_legacy None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSetOnServiceDeadCallback None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.net.cts.NetworkWatchlistTest isAtLeastP None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection None]', 1), ('[android.bootstats.cts.BootStatsHostTest testBootStats None]', 1), ('[android.app.cts.AlarmManagerTest testSetAlarmClock None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleWithoutFocusedEditorView None]', 1), ('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener None]', 1), ('[android.security.cts.VerifiedBootTest testVerifiedBootSupport None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.app.role.cts.RoleManagerTest cannotBypassRoleQualificationWithoutPermission None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testUserRejectionWithSpecificSsid None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact None]', 1), ('[com.android.cts.deviceadmin.DeviceAdminPasswordTest testResetPasswordDeprecated None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testAccuracyFields None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testLocationRegularFields None]', 1), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest testExtraLocationControllerPackage None]', 1), ('[android.app.cts.NotificationManagerTest testPostPCanToggleAlarmsMediaSystemTest None]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffects_ranking None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_cancelNotifications None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate None]', 1), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testBadArgument None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testValidValues None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withPermission_shellPermission_permissionIsGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_alreadyGranted_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest autoclose_withoutPermission_permissionIsGrantedAgain None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_installPermission_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_androidSAndAbove_restoresPreviousPermissionContext None]', 1), ('[android.alarmmanager.cts.BasicApiTests testSetAlarmClock None]', 1), ('[android.mediav2.cts.ExtractorUnitTest TestName None]', 1), ('[android.media.mediaparser.cts.MediaParserTest testLogSessionId None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiCoupledSink None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdR2Info None]', 1), ('[android.media.cts.DecoderTestXheAac isAlias None]', 1)]"
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-1-10"	"7.3.10/C-1-10"	"07031000.670110"	"""C-1-10] MUST disable biometrics once primary authentication backoff has first triggered as described in"""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"250:699468) 9.5  . Multi"	"9.5"	"C-3-4"	"9.5/C-3-4"	"09050000.670304"	"""C-3-4] MUST NOT allow the additional user profile to be created if there is a Device Owner provisioned (see section 3.9.1) or allow a Device Owner to be provisioned without removing the additional user profile first. <h3 id=""96_premium_sms_warning"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"197:593606) 7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-10"	"7.4.2/C-1-10"	"07040200.670110"	"""C-1-10] MUST randomize Probe request sequence number between the last probe request of a scan and the first probe request of the next scan."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-2-2"	"9.8.12/C-2-2"	"09081200.670202"	"""C-2-2] MUST NOT share such data beyond the MusicRecognitionService, except with explicit user consent every time it is shared. <h4 id=""9813_sensorprivacymanager"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"250:699468) 9.5  . Multi"	"9.5"	"C-3-2"	"9.5/C-3-2"	"09050000.670302"	"""C-3-2] MUST NOT have this as a work profile."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-5-1"	"9.8.2/H-5-1"	"09080200.720501"	""">9.8.2/H-5-1] MUST display the camera indicator when an app is accessing live camera data, but not when the camera is only being accessed by app(s) holding the roles called out in section 9.1 with CDD identifier [C-4-X]. [<a href=""#9_8_2_privacy"""""	""	""	"app(s) CDD"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 35), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarPropertyManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/LowRamDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/multiuser/src/android/host/multiuser/CreateUsersPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/RequestPinAppWidgetTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/DataSaverModeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecord_BufferSizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/vr/src/android/vr/cts/VrCpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CompatChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssTtffTests.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoEncoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/CursorWindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1)]"	"[('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(2,CDD,/android/host/multiuser/CreateUsersPermissionTest.java)', 1), ('(1,CDD,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,CDD,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,CDD,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(3,CDD,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(4,CDD,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(2,CDD,/android/security/cts/EncryptionTest.java)', 1), ('(3,CDD,/android/graphics/cts/PaintTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecord_BufferSizeTest.java)', 1), ('(1,CDD,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(4,CDD,/android/car/cts/CarSensorManagerTest.java)', 1), ('(3,CDD,/android/appwidget/cts/RequestPinAppWidgetTest.java)', 1), ('(1,CDD,/android/media/cts/AudioTrackTest.java)', 1), ('(2,CDD,/android/vr/cts/VrCpuTest.java)', 1), ('(1,CDD,/android/server/wm/CompatChangeTests.java)', 1), ('(2,CDD,/com/android/cts/net/hostside/DataSaverModeTest.java)', 1), ('(3,CDD,/android/security/identity/cts/HkdfTest.java)', 1), ('(2,CDD,/android/text/cts/FontCoverageTest.java)', 1), ('(2,CDD,/android/graphics/cts/BitmapFactoryTest.java)', 1), ('(2,CDD,/android/app/cts/SystemFeaturesTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecordTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java)', 1), ('(1,CDD,/com/android/cts/runner/CtsTestRunListener.java)', 1), ('(3,CDD,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(2,CDD,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,CDD,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,CDD,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(3,CDD,/android/filesystem/cts/RandomRWTest.java)', 1), ('(2,CDD,/android/app/cts/DownloadManagerTest.java)', 1), ('(6,CDD,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,CDD,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(1,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(1,CDD,/android/media/cts/VideoEncoderTest.java)', 1), ('(6,CDD,/android/car/cts/CarPropertyManagerTest.java)', 1), ('(1,CDD,/android/database/cts/CursorWindowTest.java)', 1), ('(11,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(2,CDD,/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java)', 1), ('(2,CDD,/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java)', 1), ('(1,CDD,/android/security/cts/VerifiedBootTest.java)', 1), ('(7,CDD,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,CDD,/android/mediav2/cts/MuxerTest.java)', 1), ('(3,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java)', 1), ('(3,CDD,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(2,CDD,/android/telecom/cts/BasicInCallServiceTest.java)', 1), ('(16,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(7,CDD,/android/hardware/cts/LowRamDeviceTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(13,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(2,CDD,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(36,CDD,/android/security/cts/SELinuxHostTest.java)', 1)]"	"[('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ on the device is valid.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[e standard AOSP entries.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_DM)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 3), ('([1:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[1]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[();        install.run(expectingSuccess);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ verifyFsverityInstall(BASE_APK, SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[this domain, cardinality test is all thats     * needed     */    @CddTest(requirement=""9.7"")   ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CDD]:[2]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[   public final SupportsMultiUserRule mSupportsMultiUserRule = new SupportsMultiUserRule(this);   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[ {        createRestrictedProfile(mPrimaryUserId);    }    @CddTest(requirement=""9.5/A-1-3"")   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[CDD]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CDD]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/renderscript/cts/generated/TestConvert.java]:[CDD]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[2]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[1]:method_text:[ce().hasFeature(FEATURE_INCREMENTAL_DELIVERY));    }    @CddTest(requirement=""4/C-1-1,C-3-1"")   ])', 1), ('([2:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[2]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 1), ('([2:/android/security/cts/EncryptionTest.java]:[CDD]:[2]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[        Typeface.MONOSPACE,            Typeface.SANS_SERIF,            Typeface.SERIF,    };   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[.getTextPath(""HIJKLMN"", 3, 9, 0, 0, new Path());    }    @CddTest(requirement=""3.8.13/C-1-2"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([2:/android/media/cts/AudioRecord_BufferSizeTest.java]:[CDD]:[2]:method_text:[   48000,    };    private AudioRecord mAudioRecord;    @CddTest(requirement=""5.4.1/C-1-1"")   ])', 1), ('([1:/android/mediav2/cts/CodecDecoderTest.java]:[CDD]:[1]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[2]:method_text:[tedSensors();        assertNotNull(mSupportedSensors);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[assertTrue(""Must support SENSOR_TYPE_GEAR"", foundGear);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[(""Must support SENSOR_TYPE_NIGHT"", foundNightSensor);    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([2:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[2]:method_text:[he extras        assertEquals(""dummy-2"", resultReceiver.result.getStringExtra(""dummy""));    }   ])', 1), ('([1:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[1]:method_text:[                AppWidgetManager.getInstance(context).isRequestPinAppWidgetSupported());    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[CDD]:[1]:method_text:[ // Start threshold levels that we check.    private enum ThresholdLevel { LOW, MEDIUM, HIGH };   ])', 1), ('([2:/android/vr/cts/VrCpuTest.java]:[CDD]:[2]:method_text:[ic VrCpuTest() {        super(CtsActivity.class);    }    @CddTest(requirement=""7.9.2/C-1-1"")   ])', 1), ('([1:/android/server/wm/CompatChangeTests.java]:[CDD]:[1]:method_text:[-resizeable portrait activity enters size compat mode after resizing the     * display.     */   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[own() throws Exception {        super.tearDown();        setRestrictBackground(false);    }   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[  }    }    @RequiredProperties({NO_DATA_SAVER_MODE})    @CddTest(requirement=""7.4.7/C-2-2"")   ])', 1), ('([3:/android/security/identity/cts/HkdfTest.java]:[CDD]:[3]:method_text:[ hexDecode(ikmHex), hexDecode(saltHex),                        hexDecode(infoHex), size));    }}])', 1), ('([2:/android/text/cts/FontCoverageTest.java]:[CDD]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ctory.Options();        mOpt2.inScaled = false;        mOpt2.inJustDecodeBounds = true;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ample_rw2, 1920, 1440),                new DNG(R.raw.sample_srw, 5472, 3648),        };    }   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[        mIsOnPeriodicNotificationCalled = false;        mIsHandleMessageCalled = false;    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CDD]:[2]:method_text:[    }        }    }    /**     * Make sure the internal AIDL methods are protected.     */   ])', 1), ('([1:/com/android/cts/runner/CtsTestRunListener.java]:[CDD]:[1]:method_text:[w AssertionError(""Unable to set java.text.DateFormat.is24Hour"", e);            }        }    }}])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[;        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[)));        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }}])', 1), (""([2:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[CDD]:[2]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[MediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[CDD]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([2:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[2]:method_text:[   FileUtil.removeFileOrDir(getContext(), DIR_RANDOM_RD);    }    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[1]:method_text:[king too long in some device, and thus cannot run multiple times    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[JUnit4.class)public class DownloadManagerTest extends DownloadManagerTestBase {    @FlakyTest   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CDD]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/location/cts/gnss/GnssTtffTests.java]:[CDD]:[2]:method_text:[  @AppModeFull(reason = ""permission ACCESS_LOCATION_EXTRA_COMMANDS not available to instant apps"") ])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[CDD]:[1]:method_text:[60);    }    // Tests encoder profiles required by CDD.    // H264    @NonMediaMainlineTest   ])', 1), ('([2:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[2]:method_text:[G_BRAKE_ON);    }    /**     * Test for {@link CarPropertyManager#getPropertyList()}     */   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[aIdInConfig);                }            }        }    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[pertyIds.GEAR_SELECTION))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ePropertyIds.NIGHT_MODE))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/database/cts/CursorWindowTest.java]:[CDD]:[1]:method_text:[ndow.isNull(0, 4));        // Test isBlob        assertTrue(cursorWindow.isBlob(0, 4));    }   ])', 1), ('([10:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[10]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[d()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[SSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[CDD]:[1]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[2]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[acy API are also     * accessible via Camera2.     */    @CddTest(requirement=""7.5.4/C-0-11"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[ck camera orientation against device orientation     */    @CddTest(requirement=""7.5.5/C-1-1"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[for R and S Performance class requirements as specified     * in CDD camera section 7.5     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[CDD]:[1]:method_text:[s_25fps_aac_stereo_128kbps_11025hz_metadata_gyro_compliant.3gp""},            });        }       ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CDD]:[3]:method_text:[ic final String SHORTCUT_ID = ""s12345"";    @CddTest(requirement=""[3.8.1/C-2-1],[3.8.1/C-3-1]"")   ])', 1), ('([2:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[2]:method_text:[r.MATCH_DEFAULT_ONLY).activityInfo.packageName;    }    @CddTest(requirement = ""7.4.2/C-2-1"")   ])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[1]:method_text:[ wifiManager.isScanAlwaysAvailable()        );    }    @CddTest(requirement = ""7.4.3/C-4-1"")   ])', 1), ('([2:/android/telecom/cts/BasicInCallServiceTest.java]:[CDD]:[2]:method_text:[tDialer);        }        super.tearDown();    }    @CddTest(requirement = ""7.4.1.2/C-1-3"")   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[     getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[   verifyFsverityInstall(incremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[Install(incremental, BASE_APK, SPLIT_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK, BASE_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[PK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[cremental, BASE_APK, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(updateIncremental, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ll(updateIncremental, BASE_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erityInstall(updateIncremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[X)                .runExpectingFailure();    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(incremental, BASE_APK_DM, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[tal, BASE_APK_DM, SPLIT_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([2:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[2]:method_text:[ces reported memory to ensure it meets the minimum values described     * in CDD 7.6.1.     */   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[44);            } else {                assertMinMemoryMb(592);            }        }    }   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[  mContext.getExternalFilesDir(null),                MIN_SHARED_DATA_PARTITION_SIZE_GB);    }   ])', 1), ('([3:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[3]:method_text:[%d, Minimum = %d"", partitionName, size, minSizeBytes),                size > minSizeBytes);    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CDD]:[2]:method_text:[dp_lowram=96,""                + ""icon_format=PNG,""                + ""icon_quality=100"";    }   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[       getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[  .run();        verifyFsverityInstall(BASE_APK);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[FIX)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erifyFsverityInstall(BASE_APK, BASE_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_APK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[APK)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[);        verifyFsverityInstall(SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[CDD]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([2:/android/security/cts/SELinuxHostTest.java]:[CDD]:[2]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[apps via levelFrom=user.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ime conditional policy).     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);            }        }    }    /* Init is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ ""u:r:vendor_init:s0"");    }    /* Ueventd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/ueventd"");    }    /* healthd may or may not exist */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/healthd"");    }    /* Servicemanager is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/servicemanager"");    }    /* Vold is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[:s0"", ""/system/bin/vold"");    }    /* netd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[bles-restore"");    }    /* Surface flinger is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[/bin/surfaceflinger"");    }    /* Zygote is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);    }    /* Checks drmserver for devices that require it */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/drmserver"");    }    /* Installd is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/installd"");    }    /* keystore is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[keystore"");    }    /* System server better be running :-P */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem_server"");    }    /* Watchdogd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/watchdogd"");    }    /* logd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[system/bin/logd"");    }    /* lmkd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* Wifi may be off so cardinality of 0 or 1 is ok */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ntroller, if running, always runs in permissioncontroller_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[p:s0"");    }    /* vzwomatrigger may or may not be running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* gmscore, if running, always runs in gmscore_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    /*     * All kthreads should be in kernel context.     */    @CddTest(requirement=""9.7"")   ])', 1)]"	""	""	"[('CDD', 144)]"	"[('[android.mediav2.cts.ExtractorTest isClosed None]', 2), ('[android.appsecurity.cts.ApkVerityInstallTest isIncrementalDeliveryV2Feature None]', 2), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.host.multiuser.CreateUsersPermissionTest testCanCreateRestrictedUser None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.incrementalinstall.cts.IncrementalFeatureTest testFeatureAvailable None]', 1), ('[android.security.cts.FileIntegrityManagerTest testSupportedOnDevicesFirstLaunchedWithR None]', 1), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testGetTextPathStringCountTooHigh None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 1), ('[android.car.cts.CarSensorManagerTest testRequiredSensorsForDrivingState None]', 1), ('[android.car.cts.CarSensorManagerTest testMustSupportNightSensor None]', 1), ('[android.appwidget.cts.RequestPinAppWidgetTest testPinWidget_launcher2 None]', 1), ('[android.media.cts.AudioTrackTest testSetLogSessionId None]', 1), ('[android.vr.cts.VrCpuTest VrCpuTest None]', 1), ('[android.server.wm.CompatChangeTests createManagedConstrainDisplayApisFlagsSession None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_requiredWhitelistedPackages None]', 1), ('[android.security.identity.cts.HkdfTest testVectors None]', 1), ('[android.graphics.cts.BitmapFactoryTest testImages None]', 1), ('[android.graphics.cts.BitmapFactoryTest parametersForTestDng None]', 1), ('[android.app.cts.SystemFeaturesTest testCameraFeatures None]', 1), ('[android.media.cts.AudioRecordTest testMediaMetrics None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest getTestContext None]', 1), ('[com.android.cts.runner.CtsTestRunListener isPrimitive None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported None]', 1), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testRecordingAudioInRawFormats None]', 1), ('[android.filesystem.cts.RandomRWTest testRandomRead None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8Flex360pWithIntraRefresh None]', 1), ('[android.car.cts.CarPropertyManagerTest getPropertyList None]', 1), ('[android.car.cts.CarPropertyManagerTest testGetAreaId None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportGearSelection None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportNightMode None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportPerfVehicleSpeed None]', 1), ('[android.database.cts.CursorWindowTest testAccessDataValues None]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest isNotNull None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest testPermissionCarSpeedGranted None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest isNotNull None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest testPermissionCarExteriorEnvironmentGranted None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRotateAndCropCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testLegacyCameraDeviceParity None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraOrientationAlignedWithDevice None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.mediav2.cts.MuxerTest testOffsetPresentationTimeNative None]', 1), ('[android.location.cts.fine.ScanningSettingsTest isTV None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testWifiScanningSettings None]', 1), ('[android.hardware.cts.LowRamDeviceTest DisplayMetrics None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinimumMemory None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinSharedDataPartitionSize None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinDataPartitionSize None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBase None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithWrongSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithSplit None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithDm None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallEverything None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnly None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyMissingSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyWithoutBaseSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyBaseHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyDmHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlySplitHasFsvSig None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo None]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing None]', 1), ('[android.security.cts.SELinuxHostTest testNoExemptionsForVendorExecutingCore None]', 1), ('[android.security.cts.SELinuxHostTest testMLSAttributes None]', 1), ('[android.security.cts.SELinuxHostTest testValidSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospServiceContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testCoredomainViolators None]', 1), ('[android.security.cts.SELinuxHostTest testNoBugreportDenials None]', 1), ('[android.security.cts.SELinuxHostTest testInitDomain None]', 1), ('[android.security.cts.SELinuxHostTest testUeventdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testHealthdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testServicemanagerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVoldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testNetdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSurfaceflingerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testZygoteDomain None]', 1), ('[android.security.cts.SELinuxHostTest testDrmServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInstalldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testKeystoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSystemServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWatchdogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLmkdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWpaDomain None]', 1), ('[android.security.cts.SELinuxHostTest testPermissionControllerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVzwOmaTriggerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testGMSCoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInitShellDomain None]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSuDomain None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"T-5-1"	"9.8.2/T-5-1"	"09080200.840501"	""">9.8.2/T-5-1] MUST display the camera indicator when an app is accessing live camera data, but not when the camera is only being accessed by app(s) holding the roles called out in Section 9.1 Permissions with CDD identifier [C-3-X]. [[<a href=""#9_8_2_privacy"""""	""	""	"app(s) CDD"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 35), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarPropertyManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/LowRamDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/multiuser/src/android/host/multiuser/CreateUsersPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/RequestPinAppWidgetTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/DataSaverModeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecord_BufferSizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/vr/src/android/vr/cts/VrCpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CompatChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssTtffTests.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoEncoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/CursorWindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1)]"	"[('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(2,CDD,/android/host/multiuser/CreateUsersPermissionTest.java)', 1), ('(1,CDD,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,CDD,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,CDD,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(3,CDD,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(4,CDD,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(2,CDD,/android/security/cts/EncryptionTest.java)', 1), ('(3,CDD,/android/graphics/cts/PaintTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecord_BufferSizeTest.java)', 1), ('(1,CDD,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(4,CDD,/android/car/cts/CarSensorManagerTest.java)', 1), ('(3,CDD,/android/appwidget/cts/RequestPinAppWidgetTest.java)', 1), ('(1,CDD,/android/media/cts/AudioTrackTest.java)', 1), ('(2,CDD,/android/vr/cts/VrCpuTest.java)', 1), ('(1,CDD,/android/server/wm/CompatChangeTests.java)', 1), ('(2,CDD,/com/android/cts/net/hostside/DataSaverModeTest.java)', 1), ('(3,CDD,/android/security/identity/cts/HkdfTest.java)', 1), ('(2,CDD,/android/text/cts/FontCoverageTest.java)', 1), ('(2,CDD,/android/graphics/cts/BitmapFactoryTest.java)', 1), ('(2,CDD,/android/app/cts/SystemFeaturesTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecordTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java)', 1), ('(1,CDD,/com/android/cts/runner/CtsTestRunListener.java)', 1), ('(3,CDD,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(2,CDD,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,CDD,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,CDD,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(3,CDD,/android/filesystem/cts/RandomRWTest.java)', 1), ('(2,CDD,/android/app/cts/DownloadManagerTest.java)', 1), ('(6,CDD,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,CDD,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(1,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(1,CDD,/android/media/cts/VideoEncoderTest.java)', 1), ('(6,CDD,/android/car/cts/CarPropertyManagerTest.java)', 1), ('(1,CDD,/android/database/cts/CursorWindowTest.java)', 1), ('(11,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(2,CDD,/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java)', 1), ('(2,CDD,/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java)', 1), ('(1,CDD,/android/security/cts/VerifiedBootTest.java)', 1), ('(7,CDD,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,CDD,/android/mediav2/cts/MuxerTest.java)', 1), ('(3,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java)', 1), ('(3,CDD,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(2,CDD,/android/telecom/cts/BasicInCallServiceTest.java)', 1), ('(16,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(7,CDD,/android/hardware/cts/LowRamDeviceTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(13,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(2,CDD,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(36,CDD,/android/security/cts/SELinuxHostTest.java)', 1)]"	"[('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ on the device is valid.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[e standard AOSP entries.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_DM)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 3), ('([1:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[1]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[();        install.run(expectingSuccess);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ verifyFsverityInstall(BASE_APK, SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[this domain, cardinality test is all thats     * needed     */    @CddTest(requirement=""9.7"")   ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CDD]:[2]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[   public final SupportsMultiUserRule mSupportsMultiUserRule = new SupportsMultiUserRule(this);   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[ {        createRestrictedProfile(mPrimaryUserId);    }    @CddTest(requirement=""9.5/A-1-3"")   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[CDD]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CDD]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/renderscript/cts/generated/TestConvert.java]:[CDD]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[2]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[1]:method_text:[ce().hasFeature(FEATURE_INCREMENTAL_DELIVERY));    }    @CddTest(requirement=""4/C-1-1,C-3-1"")   ])', 1), ('([2:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[2]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 1), ('([2:/android/security/cts/EncryptionTest.java]:[CDD]:[2]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[        Typeface.MONOSPACE,            Typeface.SANS_SERIF,            Typeface.SERIF,    };   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[.getTextPath(""HIJKLMN"", 3, 9, 0, 0, new Path());    }    @CddTest(requirement=""3.8.13/C-1-2"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([2:/android/media/cts/AudioRecord_BufferSizeTest.java]:[CDD]:[2]:method_text:[   48000,    };    private AudioRecord mAudioRecord;    @CddTest(requirement=""5.4.1/C-1-1"")   ])', 1), ('([1:/android/mediav2/cts/CodecDecoderTest.java]:[CDD]:[1]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[2]:method_text:[tedSensors();        assertNotNull(mSupportedSensors);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[assertTrue(""Must support SENSOR_TYPE_GEAR"", foundGear);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[(""Must support SENSOR_TYPE_NIGHT"", foundNightSensor);    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([2:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[2]:method_text:[he extras        assertEquals(""dummy-2"", resultReceiver.result.getStringExtra(""dummy""));    }   ])', 1), ('([1:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[1]:method_text:[                AppWidgetManager.getInstance(context).isRequestPinAppWidgetSupported());    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[CDD]:[1]:method_text:[ // Start threshold levels that we check.    private enum ThresholdLevel { LOW, MEDIUM, HIGH };   ])', 1), ('([2:/android/vr/cts/VrCpuTest.java]:[CDD]:[2]:method_text:[ic VrCpuTest() {        super(CtsActivity.class);    }    @CddTest(requirement=""7.9.2/C-1-1"")   ])', 1), ('([1:/android/server/wm/CompatChangeTests.java]:[CDD]:[1]:method_text:[-resizeable portrait activity enters size compat mode after resizing the     * display.     */   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[own() throws Exception {        super.tearDown();        setRestrictBackground(false);    }   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[  }    }    @RequiredProperties({NO_DATA_SAVER_MODE})    @CddTest(requirement=""7.4.7/C-2-2"")   ])', 1), ('([3:/android/security/identity/cts/HkdfTest.java]:[CDD]:[3]:method_text:[ hexDecode(ikmHex), hexDecode(saltHex),                        hexDecode(infoHex), size));    }}])', 1), ('([2:/android/text/cts/FontCoverageTest.java]:[CDD]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ctory.Options();        mOpt2.inScaled = false;        mOpt2.inJustDecodeBounds = true;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ample_rw2, 1920, 1440),                new DNG(R.raw.sample_srw, 5472, 3648),        };    }   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[        mIsOnPeriodicNotificationCalled = false;        mIsHandleMessageCalled = false;    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CDD]:[2]:method_text:[    }        }    }    /**     * Make sure the internal AIDL methods are protected.     */   ])', 1), ('([1:/com/android/cts/runner/CtsTestRunListener.java]:[CDD]:[1]:method_text:[w AssertionError(""Unable to set java.text.DateFormat.is24Hour"", e);            }        }    }}])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[;        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[)));        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }}])', 1), (""([2:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[CDD]:[2]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[MediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[CDD]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([2:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[2]:method_text:[   FileUtil.removeFileOrDir(getContext(), DIR_RANDOM_RD);    }    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[1]:method_text:[king too long in some device, and thus cannot run multiple times    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[JUnit4.class)public class DownloadManagerTest extends DownloadManagerTestBase {    @FlakyTest   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CDD]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/location/cts/gnss/GnssTtffTests.java]:[CDD]:[2]:method_text:[  @AppModeFull(reason = ""permission ACCESS_LOCATION_EXTRA_COMMANDS not available to instant apps"") ])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[CDD]:[1]:method_text:[60);    }    // Tests encoder profiles required by CDD.    // H264    @NonMediaMainlineTest   ])', 1), ('([2:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[2]:method_text:[G_BRAKE_ON);    }    /**     * Test for {@link CarPropertyManager#getPropertyList()}     */   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[aIdInConfig);                }            }        }    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[pertyIds.GEAR_SELECTION))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ePropertyIds.NIGHT_MODE))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/database/cts/CursorWindowTest.java]:[CDD]:[1]:method_text:[ndow.isNull(0, 4));        // Test isBlob        assertTrue(cursorWindow.isBlob(0, 4));    }   ])', 1), ('([10:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[10]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[d()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[SSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[CDD]:[1]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[2]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[acy API are also     * accessible via Camera2.     */    @CddTest(requirement=""7.5.4/C-0-11"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[ck camera orientation against device orientation     */    @CddTest(requirement=""7.5.5/C-1-1"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[for R and S Performance class requirements as specified     * in CDD camera section 7.5     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[CDD]:[1]:method_text:[s_25fps_aac_stereo_128kbps_11025hz_metadata_gyro_compliant.3gp""},            });        }       ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CDD]:[3]:method_text:[ic final String SHORTCUT_ID = ""s12345"";    @CddTest(requirement=""[3.8.1/C-2-1],[3.8.1/C-3-1]"")   ])', 1), ('([2:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[2]:method_text:[r.MATCH_DEFAULT_ONLY).activityInfo.packageName;    }    @CddTest(requirement = ""7.4.2/C-2-1"")   ])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[1]:method_text:[ wifiManager.isScanAlwaysAvailable()        );    }    @CddTest(requirement = ""7.4.3/C-4-1"")   ])', 1), ('([2:/android/telecom/cts/BasicInCallServiceTest.java]:[CDD]:[2]:method_text:[tDialer);        }        super.tearDown();    }    @CddTest(requirement = ""7.4.1.2/C-1-3"")   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[     getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[   verifyFsverityInstall(incremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[Install(incremental, BASE_APK, SPLIT_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK, BASE_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[PK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[cremental, BASE_APK, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(updateIncremental, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ll(updateIncremental, BASE_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erityInstall(updateIncremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[X)                .runExpectingFailure();    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(incremental, BASE_APK_DM, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[tal, BASE_APK_DM, SPLIT_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([2:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[2]:method_text:[ces reported memory to ensure it meets the minimum values described     * in CDD 7.6.1.     */   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[44);            } else {                assertMinMemoryMb(592);            }        }    }   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[  mContext.getExternalFilesDir(null),                MIN_SHARED_DATA_PARTITION_SIZE_GB);    }   ])', 1), ('([3:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[3]:method_text:[%d, Minimum = %d"", partitionName, size, minSizeBytes),                size > minSizeBytes);    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CDD]:[2]:method_text:[dp_lowram=96,""                + ""icon_format=PNG,""                + ""icon_quality=100"";    }   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[       getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[  .run();        verifyFsverityInstall(BASE_APK);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[FIX)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erifyFsverityInstall(BASE_APK, BASE_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_APK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[APK)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[);        verifyFsverityInstall(SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[CDD]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([2:/android/security/cts/SELinuxHostTest.java]:[CDD]:[2]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[apps via levelFrom=user.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ime conditional policy).     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);            }        }    }    /* Init is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ ""u:r:vendor_init:s0"");    }    /* Ueventd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/ueventd"");    }    /* healthd may or may not exist */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/healthd"");    }    /* Servicemanager is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/servicemanager"");    }    /* Vold is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[:s0"", ""/system/bin/vold"");    }    /* netd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[bles-restore"");    }    /* Surface flinger is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[/bin/surfaceflinger"");    }    /* Zygote is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);    }    /* Checks drmserver for devices that require it */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/drmserver"");    }    /* Installd is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/installd"");    }    /* keystore is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[keystore"");    }    /* System server better be running :-P */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem_server"");    }    /* Watchdogd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/watchdogd"");    }    /* logd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[system/bin/logd"");    }    /* lmkd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* Wifi may be off so cardinality of 0 or 1 is ok */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ntroller, if running, always runs in permissioncontroller_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[p:s0"");    }    /* vzwomatrigger may or may not be running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* gmscore, if running, always runs in gmscore_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    /*     * All kthreads should be in kernel context.     */    @CddTest(requirement=""9.7"")   ])', 1)]"	""	""	"[('CDD', 144)]"	"[('[android.mediav2.cts.ExtractorTest isClosed None]', 2), ('[android.appsecurity.cts.ApkVerityInstallTest isIncrementalDeliveryV2Feature None]', 2), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.host.multiuser.CreateUsersPermissionTest testCanCreateRestrictedUser None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.incrementalinstall.cts.IncrementalFeatureTest testFeatureAvailable None]', 1), ('[android.security.cts.FileIntegrityManagerTest testSupportedOnDevicesFirstLaunchedWithR None]', 1), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testGetTextPathStringCountTooHigh None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 1), ('[android.car.cts.CarSensorManagerTest testRequiredSensorsForDrivingState None]', 1), ('[android.car.cts.CarSensorManagerTest testMustSupportNightSensor None]', 1), ('[android.appwidget.cts.RequestPinAppWidgetTest testPinWidget_launcher2 None]', 1), ('[android.media.cts.AudioTrackTest testSetLogSessionId None]', 1), ('[android.vr.cts.VrCpuTest VrCpuTest None]', 1), ('[android.server.wm.CompatChangeTests createManagedConstrainDisplayApisFlagsSession None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_requiredWhitelistedPackages None]', 1), ('[android.security.identity.cts.HkdfTest testVectors None]', 1), ('[android.graphics.cts.BitmapFactoryTest testImages None]', 1), ('[android.graphics.cts.BitmapFactoryTest parametersForTestDng None]', 1), ('[android.app.cts.SystemFeaturesTest testCameraFeatures None]', 1), ('[android.media.cts.AudioRecordTest testMediaMetrics None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest getTestContext None]', 1), ('[com.android.cts.runner.CtsTestRunListener isPrimitive None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported None]', 1), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testRecordingAudioInRawFormats None]', 1), ('[android.filesystem.cts.RandomRWTest testRandomRead None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8Flex360pWithIntraRefresh None]', 1), ('[android.car.cts.CarPropertyManagerTest getPropertyList None]', 1), ('[android.car.cts.CarPropertyManagerTest testGetAreaId None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportGearSelection None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportNightMode None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportPerfVehicleSpeed None]', 1), ('[android.database.cts.CursorWindowTest testAccessDataValues None]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest isNotNull None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest testPermissionCarSpeedGranted None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest isNotNull None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest testPermissionCarExteriorEnvironmentGranted None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRotateAndCropCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testLegacyCameraDeviceParity None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraOrientationAlignedWithDevice None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.mediav2.cts.MuxerTest testOffsetPresentationTimeNative None]', 1), ('[android.location.cts.fine.ScanningSettingsTest isTV None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testWifiScanningSettings None]', 1), ('[android.hardware.cts.LowRamDeviceTest DisplayMetrics None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinimumMemory None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinSharedDataPartitionSize None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinDataPartitionSize None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBase None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithWrongSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithSplit None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithDm None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallEverything None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnly None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyMissingSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyWithoutBaseSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyBaseHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyDmHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlySplitHasFsvSig None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo None]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing None]', 1), ('[android.security.cts.SELinuxHostTest testNoExemptionsForVendorExecutingCore None]', 1), ('[android.security.cts.SELinuxHostTest testMLSAttributes None]', 1), ('[android.security.cts.SELinuxHostTest testValidSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospServiceContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testCoredomainViolators None]', 1), ('[android.security.cts.SELinuxHostTest testNoBugreportDenials None]', 1), ('[android.security.cts.SELinuxHostTest testInitDomain None]', 1), ('[android.security.cts.SELinuxHostTest testUeventdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testHealthdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testServicemanagerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVoldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testNetdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSurfaceflingerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testZygoteDomain None]', 1), ('[android.security.cts.SELinuxHostTest testDrmServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInstalldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testKeystoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSystemServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWatchdogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLmkdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWpaDomain None]', 1), ('[android.security.cts.SELinuxHostTest testPermissionControllerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVzwOmaTriggerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testGMSCoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInitShellDomain None]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSuDomain None]', 1)]"
"57:278237) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-16-1"	"3.2.3.5/C-16-1"	"03020305.671601"	"""C-16-1] MUST surface such links for all installed autofill services. If device implementations report the feature android.hardware.audio.output, they: """	""	""	"android.hardware.audio.output"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-0-15"	"9.1/C-0-15"	"09010000.670015"	"""C-0-15] MUST not define roles that are duplicates or superset functionality of roles defined by the platform. If devices report android.software.managed_users, they: """	""	""	"android.software.managed"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/content/src/android/content/cts/ContextCrossProfileHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/webkit/src/com/android/cts/webkit/WebViewHostSideMultipleProfileTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ResumeOnRebootHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/MultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/MultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/media/src/android/media/session/cts/MediaSessionManagerHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/content/src/android/content/cts/ContextCrossProfileHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomManagedProfileTest.java', 1)]"	"[('(1,android.software.managed,/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java)', 2), ('(1,android.software.managed,/android/content/cts/ContextCrossProfileHostTest.java)', 2), ('(1,android.software.managed,/android/inputmethodservice/cts/hostside/MultiUserTest.java)', 2), ('(1,android.software.managed,/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/LauncherAppsProfileTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/EphemeralUserTest.java)', 1), ('(2,android.software.managed,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(1,android.software.managed,/com/android/cts/webkit/WebViewHostSideMultipleProfileTest.java)', 1), ('(1,android.software.managed,/android/appsecurity/cts/ResumeOnRebootHostTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/QuietModeHostsideTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 1), ('(1,android.software.managed,/android/media/session/cts/MediaSessionManagerHostTest.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java)', 1), ('(1,android.software.managed,/com/android/cts/devicepolicy/CustomManagedProfileTest.java)', 1)]"	"[('([1:/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java]:[android.software.managed]:[1]:method_text:[ userId);        installAppAsUser(SIMPLE_APP_APK, userId);    }    @FlakyTest    @LargeTest   ])', 2), ('([1:/android/content/cts/ContextCrossProfileHostTest.java]:[android.software.managed]:[1]:method_text:[ers"");        } catch (DeviceNotAvailableException e) {            return false;        }    }}])', 2), ('([1:/android/inputmethodservice/cts/hostside/MultiUserTest.java]:[android.software.managed]:[1]:method_text:[                .setTestMethodName(testInfo.testMethod)                .setUserId(userId));    }}])', 2), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningTest.java]:[android.software.managed]:[1]:method_text:[ANAGED_PROFILE_PKG);        }        super.tearDown();    }    @FlakyTest(bugId = 141747631)   ])', 1), ('([1:/com/android/cts/devicepolicy/LauncherAppsProfileTest.java]:[android.software.managed]:[1]:method_text:[allPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[android.software.managed]:[1]:method_text:[().uninstallPackage(SINGLE_ADMIN_PKG);        }        super.tearDown();    }    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[android.software.managed]:[1]:method_text:[                           mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));    }   ])', 1), ('([1:/com/android/cts/devicepolicy/EphemeralUserTest.java]:[android.software.managed]:[1]:method_text:[   }    /**     * Ephemeral user should be automatically removed after it is stopped.     */   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[android.software.managed]:[1]:method_text:[tchUser(USER_SYSTEM);            removeTestUsers();        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[android.software.managed]:[1]:method_text:[""testIsProvisioningNotAllowedForManagedProfileAction"");    }    @FlakyTest(bugId = 137096267)   ])', 1), ('([1:/com/android/cts/webkit/WebViewHostSideMultipleProfileTest.java]:[android.software.managed]:[1]:method_text:[st-side test if the device-side test fails.                        .setCheckResults(true));    }}])', 1), ('([1:/android/appsecurity/cts/ResumeOnRebootHostTest.java]:[android.software.managed]:[1]:method_text:[();            } finally {                removeTestPackages();            }        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/QuietModeHostsideTest.java]:[android.software.managed]:[1]:method_text:[installPackage(TEST_LAUNCHER_PACKAGE);        }        super.tearDown();    }    @LargeTest   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[android.software.managed]:[1]:method_text:[th device owner and profile are the same package ({@link #COMP_DPC_PKG}).     */    @LargeTest   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[android.software.managed]:[1]:method_text:[s in the primary user when the policy     * is set on the profile owner.     */    @LargeTest   ])', 1), ('([1:/android/media/session/cts/MediaSessionManagerHostTest.java]:[android.software.managed]:[1]:method_text:[ediaSession"", newUser);        removeUser(newUser);    }    @AppModeFull    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java]:[android.software.managed]:[1]:method_text:[moveUser(mUserId);        }        super.tearDown();    }    @Override    @PermissionsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/CustomManagedProfileTest.java]:[android.software.managed]:[1]:method_text:[        mHasFeature = mHasFeature && hasDeviceFeature(""android.software.managed_users"");    }   ])', 1)]"	""	""	"[('android.software.managed', 21)]"	"[('[android.content.cts.ContextCrossProfileHostTest testCreateContextAsUser_sameProfileGroup_withInteractAcrossUsersPermission_createsContext None]', 2), ('[android.inputmethodservice.cts.hostside.MultiUserTest testProfileUserInstant None]', 2), ('[com.android.cts.devicepolicy.ManagedProfileProvisioningTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.LauncherAppsProfileTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.EphemeralUserTest testProfileInheritsEphemeral None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testIsManagedProfileProvisioningAllowed_deviceOwnerIsSet None]', 1), ('[com.android.cts.webkit.WebViewHostSideMultipleProfileTest testManagedProfile None]', 1), ('[android.appsecurity.cts.ResumeOnRebootHostTest isSupportedDevice None]', 1), ('[com.android.cts.devicepolicy.QuietModeHostsideTest wakeupAndDismissKeyguard None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest removeTestUsers None]', 1), ('[android.media.session.cts.MediaSessionManagerHostTest testGetActiveSessionsFull_managedProfiles None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25 removeTestUsers None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-10"	"9.9.3/C-1-10"	"09090300.670110"	"""C-1-10] MUST be unique and distinct, in other words no user&#39;s CE or DE key matches any other user&#39;s CE or DE keys."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-7"	"3.18/C-0-7"	"03180000.670007"	"""C-0-7] MUST display a warning dialog with the warning string that is provided through the system API PackageManager.setHarmfulAppWarning to the user before launching an activity in an application that has been marked by the same system API PackageManager.setHarmfulAppWarning as potentially harmful. SHOULD provide a user affordance to choose to uninstall or launch an application on the warning dialog. """	""	""	"PackageManager.setHarmfulAppWarning"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-7"	"2.2.7.1/H-1-7"	"02020701.720107"	"""5.1/H-1-7] MUST have a codec initialization latency of 65 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. && 5.1/H-1-7] MUST have a codec initialization latency of 65 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. | 5.1/H-1-7] MUST have a codec initialization latency of 50 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"197:593606) 7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-9"	"7.4.2/C-1-9"	"07040200.670109"	"""C-1-9] MUST iterate probe request sequence number as normal (sequentially) between the probe requests in a scan."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"266:737364) 9.8.13  . SensorPrivacyManager"	"9.8.13"	"C-1-2"	"9.8.13/C-1-2"	"09081300.670102"	"""C-1-2] MUST, when an app tries to access a blocked microphone or camera, present the user with a non-dismissable user affordance that clearly indicates that the sensor is blocked and requires a choice to continue blocking or unblock as per the AOSP implementation which meets this requirement. && C-1-2] MUST, when an app tries to access a blocked microphone or camera, present the user with a non-dismissable user affordance that clearly indicates that the sensor is blocked and requires a choice to continue blocking or unblock as per the AOSP implementation which meets this requirement. | C-1-2] above. <h3 id=""99_data_storage_encryption"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-0-13"	"9.1/C-0-13"	"09010000.670013"	"""C-0-13] MUST use the AppOpsManager APIs to record and track each and every programmatic access of data protected by dangerous permissions from Android activities and services. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-4-2"	"9.1/C-4-2"	"09010000.670402"	"""C-4-2] MUST NOT have android.permission.INTERNET permission. This is stricter than the STRONGLY RECOMMENDED listed in section 9.8.6."""	""	""	"INTERNET RECOMMENDED android.permission.INTERNET"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/vcn/src/android/net/vcn/cts/VcnGatewayConnectionConfigTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/SettingsPanelTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkRequestTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/SharedUidPermissionsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/PermissionMaxSdkVersionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/EphemeralApp1/src/com/android/cts/ephemeralapp1/ClientTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/tethering/src/android/tethering/cts/TetheringManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/netpermission/internetpermission/src/android/net/cts/network/permission/InternetPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/mimemap/src/android/content/type/cts/MimeMapTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/PreferentialNetworkServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/MultinetworkApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/netpermission/internetpermission/src/android/net/cts/network/permission/InternetPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/EncoderProfileLevelTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/ServiceWorkerWebSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsRegistrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/mimemap/src/android/content/type/cts/MimeMapTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityDiagnosticsManagerTest.java', 1)]"	"[('(5,INTERNET,/android/telephony/cts/SubscriptionManagerTest.java)', 2), ('(3,INTERNET,/android/net/cts/network/permission/InternetPermissionTest.java)', 2), ('(2,INTERNET,/android/appsecurity/cts/EphemeralTest.java)', 2), ('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 2), ('(13,INTERNET,/android/os/cts/StrictModeTest.java)', 2), ('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 2), ('(2,INTERNET,/android/content/pm/cts/PackageManagerTest.java)', 2), ('(2,android.permission.INTERNET,/android/content/pm/cts/PackageManagerTest.java)', 2), ('(1,INTERNET,/android/content/type/cts/MimeMapTest.java)', 2), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 2), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 2), ('(1,INTERNET,/com/android/cts/splitapp/SplitAppTest.java)', 2), ('(1,INTERNET,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 2), ('(3,INTERNET,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,android.permission.INTERNET,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,INTERNET,/android/net/cts/DnsResolverTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(1,INTERNET,/com/android/server/cts/device/statsd/AtomTests.java)', 1), ('(34,INTERNET,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(3,INTERNET,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(35,INTERNET,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(2,INTERNET,/android/net/cts/Ikev2VpnTest.java)', 1), ('(4,INTERNET,/android/app/cts/DownloadManagerTest.java)', 1), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(2,INTERNET,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(8,INTERNET,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,INTERNET,/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(1,INTERNET,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,android.permission.INTERNET,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,INTERNET,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(2,INTERNET,/com/android/cts/net/hostside/VpnTest.java)', 1), ('(1,INTERNET,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(4,INTERNET,/android/net/vcn/cts/VcnGatewayConnectionConfigTest.java)', 1), ('(1,INTERNET,/android/permission2/cts/PermissionMaxSdkVersionTest.java)', 1), ('(1,android.permission.INTERNET,/android/permission2/cts/PermissionMaxSdkVersionTest.java)', 1), ('(2,INTERNET,/android/devicepolicy/cts/PreferentialNetworkServiceTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(1,INTERNET,/com/android/cts/deviceowner/NetworkLoggingTest.java)', 1), ('(15,INTERNET,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(1,INTERNET,/android/net/cts/MultinetworkApiTest.java)', 1), ('(9,INTERNET,/android/net/cts/ConnectivityManagerTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1), ('(1,INTERNET,/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java)', 1), ('(6,INTERNET,/android/provider/cts/SettingsPanelTest.java)', 1), ('(2,INTERNET,/android/net/cts/DnsTest.java)', 1), ('(1,INTERNET,/android/mediav2/cts/EncoderProfileLevelTest.java)', 1), ('(3,INTERNET,/android/webkit/cts/ServiceWorkerWebSettingsTest.java)', 1), ('(55,INTERNET,/android/net/cts/NetworkRequestTest.java)', 1), ('(5,INTERNET,/android/telephony/ims/cts/ImsRegistrationAttributesTest.java)', 1), ('(4,INTERNET,/android/permission/cts/SharedUidPermissionsTest.java)', 1), ('(2,INTERNET,/com/android/cts/ephemeralapp1/ClientTest.java)', 1), ('(2,INTERNET,/android/net/cts/ConnectivityDiagnosticsManagerTest.java)', 1), ('(2,INTERNET,/android/tethering/cts/TetheringManagerTest.java)', 1)]"	"[(""([3:/android/telephony/cts/SubscriptionManagerTest.java]:[INTERNET]:[3]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 2), ('([2:/android/telephony/cts/SubscriptionManagerTest.java]:[INTERNET]:[2]:method_text:[ager.NETWORK_TYPE_NR;        return validCarrier && validNetworkType && validCapabilities;    }}])', 2), ('([3:/android/net/cts/network/permission/InternetPermissionTest.java]:[INTERNET]:[3]:method_text:[>Tests Permission:     *   {@link android.Manifest.permission#INTERNET}.     */    @SmallTest   ])', 2), ('([2:/android/appsecurity/cts/EphemeralTest.java]:[INTERNET]:[2]:method_text:[                ""testInternetPermission"");    }    /** Test for android.permission.VIBRATE */   ])', 2), ('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 2), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[nableTo(CleartextNetworkViolation.class));    }    /** Secure connection should be ignored */   ])', 2), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[s://example.com/"").openConnection())                                .getResponseCode());    }   ])', 2), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[            TrafficStats.clearThreadStatsTag();                    }                });    }   ])', 2), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[taggedSocketViolation.class));    }    private static final int PERMISSION_USER_ONLY = 0600;   ])', 2), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[fo.getViolationClass())                        .isAssignableTo(NetworkViolation.class));    }   ])', 2), ('([1:/android/os/cts/StrictModeTest.java]:[INTERNET]:[1]:method_text:[nager.FEATURE_WIFI)                || pm.hasSystemFeature(PackageManager.FEATURE_ETHERNET);    }}])', 2), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[INTERNET]:[1]:method_text:[on(Manifest.permission.INTERNET),                is(PackageManager.PERMISSION_GRANTED));    }   ])', 2), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[INTERNET]:[1]:method_text:[ce(Context.CONNECTIVITY_SERVICE);        manager.reportNetworkConnectivity(null, false);    }   ])', 2), ('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[INTERNET]:[4]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[INTERNET]:[4]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[INTERNET]:[4]:method_text:[y requested for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[INTERNET]:[4]:method_text:[ suggestion for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[INTERNET]:[1]:method_text:[             permissionInfo.getProtectionFlags() & PermissionInfo.PROTECTION_FLAG_APPOP);    }   ])', 2), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.permission.INTERNET]:[1]:method_text:[             permissionInfo.getProtectionFlags() & PermissionInfo.PROTECTION_FLAG_APPOP);    }   ])', 2), ('([1:/android/content/type/cts/MimeMapTest.java]:[INTERNET]:[1]:method_text:[TypeFromExtension(""audio/mpeg"", ""m4a"");        assertBidirectional(""audio/aac"", ""aac"");    }   ])', 2), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 2), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 2), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[INTERNET]:[1]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 2), ('([1:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[INTERNET]:[1]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 2), ('([3:/android/content/pm/cts/PermissionInfoTest.java]:[INTERNET]:[3]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[android.permission.INTERNET]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[INTERNET]:[1]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[INTERNET]:[1]:method_text:[           if (urlc != null) {                urlc.disconnect();            }        }    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[ext http traffic."");        } catch (IOException ex) {            // Expected        }    }   ])', 1), ('([4:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[INTERNET]:[4]:method_text:[stCallback =            new MultinetworkTestCallback() {                @Override               ])', 1), ('([30:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[INTERNET]:[30]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/com/android/cts/ephemeralapp1/ClientTest.java]:[INTERNET]:[1]:method_text:[sFlags[permissionIndex]                & PackageInfo.REQUESTED_PERMISSION_GRANTED) != 0;    }   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[INTERNET]:[3]:method_text:[on available for apps.        assertThat(mTestHelper.getNumWifiConnections()).isEqualTo(1);    }}])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[INTERNET]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[INTERNET]:[1]:method_text:[ != null) {                tnm.teardownTestNetwork(testNetwork);            }        }    }   ])', 1), ('([2:/android/app/cts/DownloadManagerTest.java]:[INTERNET]:[2]:method_text:[(id, 0);        } finally {            mContext.unregisterReceiver(receiver);        }    }   ])', 1), ('([2:/android/app/cts/DownloadManagerTest.java]:[INTERNET]:[2]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[INTERNET]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.permission.INTERNET]:[1]:method_text:[lPackage(EMPTY_APP_MAX_PACKAGE_NAME);        uninstallPackage(HELLO_WORLD_PACKAGE_NAME);    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[INTERNET]:[2]:method_text:[E permission."");        } catch (SecurityException e) {            //expected        }    }   ])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[INTERNET]:[4]:method_text:[the device (that     * can provide internet connectivity) when the request is released.     */   ])', 1), (""([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[INTERNET]:[4]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 1), ('([1:/android/app/usage/cts/NetworkUsageStatsTest.java]:[INTERNET]:[1]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[INTERNET]:[1]:method_text:[String DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S =            ""android.permission.INTERNET"";   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[android.permission.INTERNET]:[1]:method_text:[String DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S =            ""android.permission.INTERNET"";   ])', 1), ('([1:/android/net/wifi/cts/ConcurrencyTest.java]:[INTERNET]:[1]:method_text:[to EnabledState        assertNotNull(mMySync.expectedNetworkInfo);        return true;    }   ])', 1), ('([2:/com/android/cts/net/hostside/VpnTest.java]:[INTERNET]:[2]:method_text:[      super.onReceive(context, intent);            }            received = true;        }    }}])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[INTERNET]:[1]:method_text:[PORT_WIFI)) {                return true;            }        }        return false;    }   ])', 1), ('([2:/android/net/vcn/cts/VcnGatewayConnectionConfigTest.java]:[INTERNET]:[2]:method_text:[GatewayConnectionConfig() {        return buildVcnGatewayConnectionConfigBase().build();    }   ])', 1), ('([1:/android/net/vcn/cts/VcnGatewayConnectionConfigTest.java]:[INTERNET]:[1]:method_text:[   assertArrayEquals(RETRY_INTERNAL_MILLIS, gatewayConnConfig.getRetryIntervalsMillis());    }   ])', 1), ('([1:/android/net/vcn/cts/VcnGatewayConnectionConfigTest.java]:[INTERNET]:[1]:method_text:[        new int[] {NET_CAPABILITY_INTERNET}, gatewayConnConfig.getExposedCapabilities());    }   ])', 1), ('([1:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[INTERNET]:[1]:method_text:[ set to a previous API level,     * the permission is not being granted.     */    @SmallTest   ])', 1), ('([1:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[android.permission.INTERNET]:[1]:method_text:[ set to a previous API level,     * the permission is not being granted.     */    @SmallTest   ])', 1), ('([2:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[INTERNET]:[2]:method_text:[he provider that provides enterprise slice can     * see the enterprise slice requests.     */   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/com/android/cts/deviceowner/NetworkLoggingTest.java]:[INTERNET]:[1]:method_text:[we need to generate enough internet     * traffic, so that the batch of logs is created     */   ])', 1), ('([4:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[INTERNET]:[4]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([4:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[INTERNET]:[4]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 1), ('([4:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[INTERNET]:[4]:method_text:[peer API which is rejected by user.     * 3. Verify that only one connection is active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[INTERNET]:[3]:method_text:[ion available for apps.        assertThat(mTestHelper.getNumWifiConnections()).isEqualTo(1);    }])', 1), ('([1:/android/net/cts/MultinetworkApiTest.java]:[INTERNET]:[1]:method_text:[  testableNetworks.size() >= 1);        return testableNetworks.toArray(new Network[0]);    }   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[INTERNET]:[1]:method_text:[he network may not be connected or ready yet        return mCtsNetUtils.connectToWifi();    }   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[INTERNET]:[1]:method_text:[in the current API version"");        } catch (UnsupportedOperationException expected) {}    }   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[INTERNET]:[1]:method_text:[*/    @AppModeFull(reason = ""CHANGE_NETWORK_STATE permission can\'t be granted to instant apps"")   ])', 1), ('([5:/android/net/cts/ConnectivityManagerTest.java]:[INTERNET]:[5]:method_text:[witch Wi-Fi off.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[INTERNET]:[1]:method_text:[etered networks.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[INTERNET]:[1]:method_text:[ there's one user on the device or all     * secondary users / profiles are affiliated.     */   ])"", 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[INTERNET]:[2]:method_text:[getCurrentPackageName();        assertThat(currentPackage).isEqualTo(mSettingsPackage);    }   ])', 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[INTERNET]:[2]:method_text:[tCurrentPackageName();        assertThat(currentPackage).isNotEqualTo(mSettingsPackage);    }   ])', 1), ('([2:/android/provider/cts/SettingsPanelTest.java]:[INTERNET]:[2]:method_text:[ {      return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);    }}])', 1), ('([2:/android/net/cts/DnsTest.java]:[INTERNET]:[2]:method_text:[ECONDS));        } finally {            mCm.unregisterNetworkCallback(callback);        }    }}])', 1), ('([1:/android/mediav2/cts/EncoderProfileLevelTest.java]:[INTERNET]:[1]:method_text:[ and also verifies whether cdd mandated     * (profile, level) combination is supported     */   ])', 1), ('([3:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[INTERNET]:[3]:method_text:[ockNetworkLoads(b);            assertEquals(b, mSettings.getBlockNetworkLoads());        }    }}])', 1), ('([1:/android/net/cts/NetworkRequestTest.java]:[INTERNET]:[1]:method_text:[NetworkSpecifier                && mId == ((LocalNetworkSpecifier) other).mId;        }    }   ])', 1), ('([38:/android/net/cts/NetworkRequestTest.java]:[INTERNET]:[38]:method_text:[        assertTrue(requestCellularInternet.canBeSatisfiedBy(capCellularVpnMmsInternet));    }   ])', 1), ('([16:/android/net/cts/NetworkRequestTest.java]:[INTERNET]:[16]:method_text:[dBy(nc),                request.networkCapabilities.satisfiedByNetworkCapabilities(nc));    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[INTERNET]:[1]:method_text:[ion {        mPackageManager = InstrumentationRegistry.getContext().getPackageManager();    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.permission.INTERNET]:[1]:method_text:[ion {        mPackageManager = InstrumentationRegistry.getContext().getPackageManager();    }   ])', 1), ('([5:/android/telephony/ims/cts/ImsRegistrationAttributesTest.java]:[INTERNET]:[5]:method_text:[ertNotNull(attr.getFeatureTags());        assertEquals(0, attr.getFeatureTags().size());    }   ])', 1), ('([1:/android/permission/cts/SharedUidPermissionsTest.java]:[INTERNET]:[1]:method_text:[p(PKG_THAT_REQUESTS_PERMISSIONS);        uninstallApp(PKG_THAT_REQUESTS_NO_PERMISSIONS);    }   ])', 1), ('([2:/android/permission/cts/SharedUidPermissionsTest.java]:[INTERNET]:[2]:method_text:[    assertThat(isPermissionGranted(PKG_THAT_REQUESTS_NO_PERMISSIONS, INTERNET)).isTrue();    }   ])', 1), ('([1:/android/permission/cts/SharedUidPermissionsTest.java]:[INTERNET]:[1]:method_text:[      assertThat(isPermissionGranted(PKG_THAT_REQUESTS_NO_PERMISSIONS, INTERNET)).isFalse();    }}])', 1), ('([2:/android/net/cts/ConnectivityDiagnosticsManagerTest.java]:[INTERNET]:[2]:method_text:[redCallbacks) {            mCdm.unregisterConnectivityDiagnosticsCallback(cb);        }    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[INTERNET]:[2]:method_text:[c."");        } catch (IOException ex) {            // Expected        }    }    @Presubmit   ])', 1), ('([1:/android/tethering/cts/TetheringManagerTest.java]:[INTERNET]:[1]:method_text:[ering interfaces: "" + Arrays.toString(state.mErrored.toArray()));            }        }    }   ])', 1), ('([1:/android/tethering/cts/TetheringManagerTest.java]:[INTERNET]:[1]:method_text:[ousWifiEnabledState) {                mCtsNetUtils.connectToWifi();            }        }    }}])', 1)]"	""	""	"[('INTERNET', 96), ('RECOMMENDED', 16), ('android.permission.INTERNET', 7)]"	"[('[android.content.pm.cts.PackageManagerTest testGetPermissionInfo None]', 4), ('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 2), ('[android.appsecurity.cts.EphemeralTest testInternetPermission None]', 2), ('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled None]', 2), ('[android.os.cts.StrictModeTest testCleartextNetwork None]', 2), ('[android.os.cts.StrictModeTest testEncryptedNetwork None]', 2), ('[android.os.cts.StrictModeTest testUntaggedSocketsHttp None]', 2), ('[android.os.cts.StrictModeTest testUntaggedSocketsRaw None]', 2), ('[android.os.cts.StrictModeTest testNetwork None]', 2), ('[android.os.cts.StrictModeTest testNoCleartextHttpTrafficAllowed None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testInstallPermissionGranted None]', 2), ('[com.android.cts.ephemeralapp1.ClientTest testInternetPermission None]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis None]', 2), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest TestApis None]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues None]', 2), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat None]', 2), ('[android.telephony.cts.SubscriptionManagerTest testSetAndGetD2DSharingContacts None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize None]', 1), ('[com.android.server.cts.device.statsd.AtomTests testGenerateMobileTraffic None]', 1), ('[android.os.cts.StrictModeTest testIncorrectContextUse_GetViewConfiguration None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity testStarted None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[com.android.cts.ephemeralapp1.ClientTest testInstallPermissionGrantedInPackageInfo None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailureWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailureWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPaidNetCapabilityWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPrivateNetCapabilityWhenConnectedToInternetNetwork None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.cts.Ikev2VpnTest testStartVpnProfileNoPreviousConsent None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpWithExternalWebServer None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelManagerRegistrationCallbackS None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testWifiBandInNetworkCallback None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testEnsureAutoConnectToInternetConnectionOnRelease None]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault None]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener None]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[com.android.server.cts.device.statsdatom.AtomTests testGenerateMobileTraffic None]', 1), ('[android.net.vcn.cts.VcnGatewayConnectionConfigTest testBuildVcnGatewayConnectionConfig None]', 1), ('[android.net.vcn.cts.VcnGatewayConnectionConfigTest testBuilderAddRemove None]', 1), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest TestApis None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner None]', 1), ('[com.android.cts.deviceowner.NetworkLoggingTest testProvidingWrongBatchTokenReturnsNull None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testConnectToPeerPeerNetworkWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testConnectToInternetNetworkWhenConnectedToPeerPeerNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testPeerToPeerConnectionRejectWhenConnectedToInternetNetwork None]', 1), ('[android.net.cts.MultinetworkApiTest getTestableNetworks None]', 1), ('[android.net.cts.ConnectivityManagerTest disconnectFromCell None]', 1), ('[android.net.cts.ConnectivityManagerTest testOpenConnection None]', 1), ('[android.net.cts.ConnectivityManagerTest testRegisterNetworkCallback_withPendingIntent None]', 1), ('[android.net.cts.ConnectivityManagerTest testRequestNetworkCallback None]', 1), ('[android.net.cts.ConnectivityManagerTest testRestrictedNetworks None]', 1), ('[com.android.cts.splitapp.SplitAppTest testFeatureBase None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSetPreferredDataSubscriptionId None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled None]', 1), ('[android.provider.cts.SettingsPanelTest isNull None]', 1), ('[android.net.cts.DnsTest testDnsWorks None]', 1), ('[android.mediav2.cts.EncoderProfileLevelTest isHandheld None]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testBlockNetworkLoads None]', 1), ('[com.android.cts.splitapp.SplitAppTest testFeatureWarmBase None]', 1), ('[android.net.cts.NetworkRequestTest testCanBeSatisfiedBy None]', 1), ('[android.net.cts.NetworkRequestTest testInvariantInCanBeSatisfiedBy None]', 1), ('[android.telephony.ims.cts.ImsRegistrationAttributesTest testRegistrationTypeToTransportAttr None]', 1), ('[android.permission.cts.SharedUidPermissionsTest uninstallTestApps None]', 1), ('[android.permission.cts.SharedUidPermissionsTest packageGainsNormalPermissionsWhenJoiningSharedUid None]', 1), ('[android.permission.cts.SharedUidPermissionsTest sharedUidLoosesNormalPermissionWhenLastAppDeclaringItGetsUninstalled None]', 1), ('[android.net.cts.ConnectivityDiagnosticsManagerTest TestNetworkCallback None]', 1), ('[android.os.cts.StrictModeTest testUnsafeIntentLaunch_SafeIntentFromUriLaunch_NoViolation None]', 1), ('[android.tethering.cts.TetheringManagerTest adoptShellPermissionIdentity None]', 1), ('[android.tethering.cts.TetheringManagerTest testTetheringUpstream None]', 1)]"
"250:699468) 9.5  . Multi"	"9.5"	"C-3-3"	"9.5/C-3-3"	"09050000.670303"	"""C-3-3] MUST have isolated private app data directories from the parent user account."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"259:726011) 9.8.6  . Content Capture and App Search"	"9.8.6"	"C-0-7"	"9.8.6/C-0-7"	"09080600.670007"	"""C-0-7] MUST provide a user affordance to opt-out of the data, collected via AppSearch or proprietary means from being shown in android platform e.g launcher."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-1-1"	"9.8.12/C-1-1"	"09081200.670101"	"""C-1-1] MUST enforce that the caller of MusicRecognitionManager holds the MANAGE_MUSIC_RECOGNITION permission"""	""	""	"MANAGE_MUSIC_RECOGNITION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/musicrecognition/src/android/musicrecognition/cts/MusicRecognitionManagerTest.java', 1)]"	"[('(1,MANAGE_MUSIC_RECOGNITION,/android/musicrecognition/cts/MusicRecognitionManagerTest.java)', 1)]"	"[('([1:/android/musicrecognition/cts/MusicRecognitionManagerTest.java]:[MANAGE_MUSIC_RECOGNITION]:[1]:method_text:[doptShellPermissionIdentity(                ""android.permission.MANAGE_MUSIC_RECOGNITION"");    }}])', 1)]"	""	""	"[('MANAGE_MUSIC_RECOGNITION', 1)]"	"[('[android.musicrecognition.cts.MusicRecognitionManagerTest testRecordAudioOpsAreTracked None]', 1)]"
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-5"	"2.2.7.1/H-1-5"	"02020701.720105"	"""5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods."""	""	""	"VideoCapabilities.getSupportedPerformancePoints getSupportedPerformancePoints() CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances()"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPairPerfTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiDecoderPairPerfTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecListTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecCapabilitiesTest.java', 1)]"	"[('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/DecoderTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(2,getSupportedPerformancePoints(),/android/media/cts/MediaCodecListTest.java)', 1), ('(2,getMaxSupportedInstances(),/android/media/cts/MediaCodecCapabilitiesTest.java)', 1)]"	"[('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/media/cts/DecoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[       continue;            }            return true;        }        return false;    }   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[getSupportedPerformancePoints()]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([2:/android/media/cts/MediaCodecCapabilitiesTest.java]:[getMaxSupportedInstances()]:[2]:method_text:[/media_codecs.xml: \\n"";           fail(failMessage + xmlOverrides.toString());        }    }   ])', 1)]"	""	""	"[('getMaxSupportedInstances()', 5), ('getSupportedPerformancePoints()', 4), ('VideoCapabilities.getSupportedPerformancePoints', 3), ('CodecCapabilities.getMaxSupportedInstances', 3)]"	"[('[android.media.cts.DecoderTest testTunneledVideoFlush None]', 1), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints None]', 1), ('[android.media.cts.MediaCodecCapabilitiesTest testGetMaxSupportedInstances None]', 1)]"
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	""	"2.2.7.4"	"02020704.48"	"""data-text=""2.2.7.4. Performance"">2.2.7.4. Performance If Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [8.2/H-1-1] MUST ensure a sequential write performance of at least 100 MB/s. [8.2/H-1-2] MUST ensure a random write performance of at least 10 MB/s. [8.2/H-1-3] MUST ensure a sequential read performance of at least 200 MB/s. [8.2/H-1-4] MUST ensure a random read performance of at least 25 MB/s. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [8.2/H-2-1] MUST ensure a sequential write performance of at least 125 MB/s. [8.2/H-2-2] MUST ensure a random write performance of at least 10 MB/s. [8.2/H-2-3] MUST ensure a sequential read performance of at least 250 MB/s. [8.2/H-2-4] MUST ensure a random read performance of at least 40 MB/s. <h3 id=""23_television_requirements"" """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS android.os.Build.VERSION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 13), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java', 8), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/UffdGc/src/android/os/cts/uffdgc/UserfaultfdTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationValuesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/sdkextensions/src/android/os/ext/cts/SdkExtensionsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreTrashedTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ProxyInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreMatchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkWatchlistTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/bootstats/src/android/bootstats/cts/BootStatsHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AlarmManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkStatsBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncoderColorAspectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_FilesTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src_target/com/android/test/usesnativesharedlibrary/LoadTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorUnitTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1)]"	"[('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 2), ('(2,VERSION_CODES,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CameraManagerTest.java)', 2), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreTrashedTest.java)', 1), ('(1,VERSION_CODES,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(14,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(1,VERSION_CODES,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java)', 1), ('(1,VERSION_CODES,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/EncryptionTest.java)', 1), ('(2,VERSION_CODES,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(2,android.os.Build.VERSION,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/ProxyInfoTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(4,VERSION_CODES,/android/app/cts/NotificationTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java)', 1), ('(2,VERSION_CODES,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,android.os.Build.VERSION,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreMatchTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkWatchlistTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_GenresTest.java)', 1), ('(7,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,VERSION_CODES,/android/bootstats/cts/BootStatsHostTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaCodecTest.java)', 1), ('(3,VERSION_CODES,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,android.os.Build.VERSION,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/AlarmManagerTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkStatsBinderTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(1,VERSION_CODES,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(1,VERSION_CODES,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/EncoderColorAspectsTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/VerifiedBootTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(1,VERSION_CODES,/android/scopedstorage/cts/ScopedStorageTest.java)', 1), ('(2,VERSION_CODES,/android/app/role/cts/RoleManagerTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_FilesTest.java)', 1), ('(2,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,VERSION_CODES,/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(7,VERSION_CODES,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonTest.java)', 1), ('(1,VERSION_CODES,_target/com/android/test/usesnativesharedlibrary/LoadTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(2,VERSION_CODES,/android/os/ext/cts/SdkExtensionsTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(9,VERSION_CODES,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,VERSION_CODES,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(2,VERSION_CODES,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/ExtractorUnitTest.java)', 1), ('(2,VERSION_CODES,/android/media/mediaparser/cts/MediaParserTest.java)', 1), ('(3,VERSION_CODES,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestXheAac.java)', 1)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[} finally {            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 4), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 3), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[    assertTrue(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 3), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[ This follows the Manage Channel     * command described in TS 102 221 Section 11.1.17.     */   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[r a logical channel and makes sure appropriate     * errors are returned from the UICC.     */   ])', 2), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[VERSION_CODES]:[1]:method_text:[  hardwareLevel != CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_GRANTED);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[withoutPermission(                        DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S));    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStoreTrashedTest.java]:[VERSION_CODES]:[1]:method_text:[meName);    }    /**     * Verify that we can trash and untrash an item that we own.     */   ])', 1), ('([1:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[VERSION_CODES]:[1]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/media/cts/DecoderTestAacFormat.java]:[VERSION_CODES]:[1]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[VERSION_CODES]:[1]:method_text:[     * Verify correct decoding of MPEG-4 AAC with output level normalization to -23dBFS.     */   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[VERSION_CODES]:[1]:method_text:[                      mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));        }    }   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[VERSION_CODES]:[1]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[;        } else {            mManager.setTestProviderEnabled(provider, enabled);        }    }}])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([3:/android/security/cts/EncryptionTest.java]:[VERSION_CODES]:[3]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[VERSION_CODES]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[android.os.Build.VERSION]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([1:/android/net/cts/ProxyInfoTest.java]:[VERSION_CODES]:[1]:method_text:[      proxy2.getExclusionList());        assertEquals(TEST_URI, proxy2.getPacFileUrl());    }   ])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[VERSION_CODES]:[1]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[   assertFalse(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 1), (""([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[VERSION_CODES]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[VERSION_CODES]:[1]:method_text:[    } catch (Exception ignore) {}    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[VERSION_CODES]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/os/cts/uffdgc/UserfaultfdTest.java]:[VERSION_CODES]:[2]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/android/os/cts/uffdgc/UserfaultfdTest.java]:[android.os.Build.VERSION]:[1]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[VERSION_CODES]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/media/MediaStoreMatchTest.java]:[VERSION_CODES]:[1]:method_text:[olumeName);        mExternalImages = MediaStore.Images.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/cts/NetworkWatchlistTest.java]:[VERSION_CODES]:[1]:method_text:[ager.getNetworkWatchlistConfigHash() correctly     * returns the hash of config we set.     */   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_GenresTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/bootstats/cts/BootStatsHostTest.java]:[VERSION_CODES]:[2]:method_text:[ = device;    }    @Override    public ITestDevice getDevice() {        return mDevice;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[VERSION_CODES]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> ShellCommand.builder(INVALID_COMMAND_LEGACY_OUTPUT).execute());    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[2]:method_text:[ACY_OUTPUT).execute())                .contains(INVALID_COMMAND_EXPECTED_LEGACY_OUTPUT);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[android.os.Build.VERSION]:[1]:method_text:[L_OUTPUT_FILTER = (output) -> false;    private static final String COMMAND = ""pm list users"";   ])', 1), ('([1:/android/app/cts/AlarmManagerTest.java]:[VERSION_CODES]:[1]:method_text:[                    ? nextAlarmClock.getTriggerTime()                    : null);        }    }}])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[VERSION_CODES]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[VERSION_CODES]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/net/cts/NetworkStatsBinderTest.java]:[VERSION_CODES]:[1]:method_text:[        if (match != null) return match.applicationInfo.uid;        return INVALID_UID;    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VERSION_CODES]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[VERSION_CODES]:[1]:method_text:[ event -> ""showSoftInput"".equals(event.getEventName()), TIMEOUT);            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[VERSION_CODES]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/mediav2/cts/EncoderColorAspectsTest.java]:[VERSION_CODES]:[1]:method_text:[pareParamList(exhaustiveArgsList, isEncoder, needAudio, needVideo, false);    }    @SmallTest   ])', 1), ('([2:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[2]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[1]:method_text:[ on the device"",                pm.hasSystemFeature(PackageManager.FEATURE_VERIFIED_BOOT));    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[VERSION_CODES]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[VERSION_CODES]:[1]:method_text:[ executeShellCommand(""am get-current-user"");        return Integer.parseInt(userId.trim());    }}])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[PP_PACKAGE_NAME);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[ification(true));    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/provider/cts/media/MediaStore_FilesTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[ing the specifier to set a band.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java]:[VERSION_CODES]:[1]:method_text:[l() {        return mContext.getApplicationContext().getApplicationInfo().targetSdkVersion;    }}])', 1), (""([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([2:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[2]:method_text:[alFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[lse)) {            fail(""Failed to cancel notification id="" + notificationId);        }    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[VERSION_CODES]:[1]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                        == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }}])', 1), ('([1:_target/com/android/test/usesnativesharedlibrary/LoadTest.java]:[VERSION_CODES]:[1]:method_text:[()));    }    /**     * Tests if libs listed in unavailable.txt are all non-loadable     */   ])', 1), ('([1:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[VERSION_CODES]:[1]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[ { }        }    }    /** Verifies that getExtensionVersion only return existing versions */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[versions yet.            assertEquals(0, SdkExtensions.getExtensionVersion(sdk));        }    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[VERSION_CODES]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[android.os.Build.VERSION]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[n(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> sTestApis.permissions().withoutPermission(INSTALL_PERMISSION));    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[2]:method_text:[ON_NOT_HELD_BY_SHELL_PRE_S))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[all the testapp without granting all runtime    //  permissions, add a test that this works pre-Q}])', 1), ('([1:/android/alarmmanager/cts/BasicApiTests.java]:[VERSION_CODES]:[1]:method_text:[   public void onAlarm() {            onReceive(null, new Intent(mTargetAction));        }    }}])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[VERSION_CODES]:[2]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[android.os.Build.VERSION]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/android/mediav2/cts/ExtractorUnitTest.java]:[VERSION_CODES]:[1]:method_text:[lic static class TestApi {        @Rule        public TestName testName = new TestName();       ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[public void setUp() {        assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);    }   ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[aParser.getLogSessionId()).isSameInstanceAs(logSessionId);        mediaParser.release();    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[sCoupledSinkSupportedAtSource());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[_SOURCE, info.getR2DeviceInfo());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java]:[VERSION_CODES]:[1]:method_text:[mVolumeName);        mExternalVideo = MediaStore.Video.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[VERSION_CODES]:[1]:method_text:[* Verify the correct decoding of USAC bitstreams with different MPEG-D DRC effect types.     */   ])', 1)]"	""	""	"[('VERSION_CODES', 120), ('android.os.Build.VERSION', 9)]"	"[('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 2), ('[android.location.cts.fine.LocationManagerFineTest currentTimeMillis None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccOpenLogicalChannelWithInvalidP2 None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel None]', 2), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testNoLegacyOnQ None]', 2), ('[android.os.cts.uffdgc.UserfaultfdTest isAutomotive None]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry None]', 2), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 2), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest dropShellPermissionIdentity None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability None]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testSetNotExistCertInstallerPackage None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssNavigationMessageCallback None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.net.cts.ProxyInfoTest testBuildPacProxy None]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testGnssNavigationMessageMandatoryFieldRanges None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_noConversationTitle None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withConversationTitle_legacy None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withoutConversationTitle_legacy None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSetOnServiceDeadCallback None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.net.cts.NetworkWatchlistTest isAtLeastP None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection None]', 1), ('[android.bootstats.cts.BootStatsHostTest testBootStats None]', 1), ('[android.app.cts.AlarmManagerTest testSetAlarmClock None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleWithoutFocusedEditorView None]', 1), ('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener None]', 1), ('[android.security.cts.VerifiedBootTest testVerifiedBootSupport None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.app.role.cts.RoleManagerTest cannotBypassRoleQualificationWithoutPermission None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testUserRejectionWithSpecificSsid None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact None]', 1), ('[com.android.cts.deviceadmin.DeviceAdminPasswordTest testResetPasswordDeprecated None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testAccuracyFields None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testLocationRegularFields None]', 1), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest testExtraLocationControllerPackage None]', 1), ('[android.app.cts.NotificationManagerTest testPostPCanToggleAlarmsMediaSystemTest None]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffects_ranking None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_cancelNotifications None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate None]', 1), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testBadArgument None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testValidValues None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withPermission_shellPermission_permissionIsGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_alreadyGranted_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest autoclose_withoutPermission_permissionIsGrantedAgain None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_installPermission_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_androidSAndAbove_restoresPreviousPermissionContext None]', 1), ('[android.alarmmanager.cts.BasicApiTests testSetAlarmClock None]', 1), ('[android.mediav2.cts.ExtractorUnitTest TestName None]', 1), ('[android.media.mediaparser.cts.MediaParserTest testLogSessionId None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiCoupledSink None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdR2Info None]', 1), ('[android.media.cts.DecoderTestXheAac isAlias None]', 1)]"
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-5"	"3.18/C-0-5"	"03180000.670005"	"""C-0-5] MUST have an activity that handles the android.settings.MANAGE_UNKNOWN_APP_SOURCES intent. """	""	""	"MANAGE_UNKNOWN_APP_SOURCES android.settings.MANAGE"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java', 1)]"	"[('(1,android.settings.MANAGE,/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java)', 1)]"	"[('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[android.settings.MANAGE]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1)]"	""	""	"[('android.settings.MANAGE', 1)]"	"[('[com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest TestApis None]', 1)]"
"7.1.4"	"7.1.4"	"C-2-4"	"7.1.4/C-2-4"	"07010400.670204"	"""C-2-4] MUST at least support version 132383489 (from Mar 1st, 2020) as reported in the android.software.opengles.deqp.level feature flag."""	""	""	"android.software.opengles.deqp.level"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-5-2"	"9.8.2/H-5-2"	"09080200.720502"	""">9.8.2/H-5-2] MUST display Recent and Active apps using camera as returned from PermissionManager.getIndicatorAppOpUsageData(), along with any attribution messages associated with them. [<a href=""#9_8_2_privacy"""""	""	""	"PermissionManager.getIndicatorAppOpUsageData getIndicatorAppOpUsageData()"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-4"	"3.18/C-0-4"	"03180000.670004"	"""C-0-4] MUST NOT allow apps other than the current &quot;installer of record&quot; for the package to silently uninstall the app without any user confirmation, as documented in the SDK for the DELETE_PACKAGE permission. The only exceptions are the system package verifier app handling PACKAGE_NEEDS_VERIFICATION intent and the storage manager app handling ACTION_MANAGE_STORAGE intent. """	""	""	"ACTION_MANAGE_STORAGE DELETE_PACKAGE PACKAGE_NEEDS_VERIFICATION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/settings/src/android/settings/cts/SettingsHandlerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/pm/SecureFrp/src/com/android/tests/securefrpinstall/SecureFrpInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/packagemanager/multiuser/app/src/com/android/tests/packagemanager/multiuser/app/PackageManagerMultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/pm/SecureFrp/src/com/android/tests/securefrpinstall/SecureFrpInstallTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/stagedinstall/app/src/com/android/tests/stagedinstall/StagedInstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EphemeralTestApp/NormalApp/src/com/android/cts/normalapp/ClientTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app2/src/com/android/cts/rollback/host/app2/HostTestHelper.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/InstallUtilTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/atomicinstall/src/com/android/tests/atomicinstall/SessionAbandonBehaviorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerQueryPropertyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/rollback/src/com/android/cts/rollback/RollbackManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/packageinstaller/uninstall/src/android/packageinstaller/uninstall/cts/UninstallTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerGetPropertyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/stagedinstall/app/src/com/android/tests/stagedinstall/ApexShimValidationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/packageinstaller/atomicinstall/src/com/android/tests/atomicinstall/AtomicInstallTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/packageinstaller/atomicinstall/src/com/android/tests/atomicinstall/AtomicInstallTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/stagedinstall/app/src/com/android/tests/stagedinstall/StagedInstallTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/stagedinstall/app/src/com/android/tests/stagedinstall/ApexShimValidationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/rollback/src/com/android/cts/rollback/RollbackManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 1)]"	"[('(1,DELETE_PACKAGE,/com/android/cts/rollback/host/app/HostTestHelper.java)', 2), ('(1,DELETE_PACKAGE,/com/android/tests/securefrpinstall/SecureFrpInstallTest.java)', 2), ('(1,DELETE_PACKAGE,/com/android/tests/stagedinstall/StagedInstallTest.java)', 2), ('(1,DELETE_PACKAGE,/com/android/cts/rollback/RollbackManagerTest.java)', 2), ('(1,DELETE_PACKAGE,/com/android/tests/stagedinstall/ApexShimValidationTest.java)', 2), ('(1,DELETE_PACKAGE,/com/android/tests/atomicinstall/AtomicInstallTest.java)', 2), ('(1,ACTION_MANAGE_STORAGE,/android/settings/cts/SettingsHandlerTest.java)', 1), ('(1,DELETE_PACKAGE,/com/android/tests/packagemanager/multiuser/app/PackageManagerMultiUserTest.java)', 1), ('(1,DELETE_PACKAGE,/com/android/server/cts/device/statsd/AtomTests.java)', 1), ('(1,DELETE_PACKAGE,/com/android/cts/normalapp/ClientTest.java)', 1), ('(1,DELETE_PACKAGE,/com/android/cts/rollback/host/app2/HostTestHelper.java)', 1), ('(1,DELETE_PACKAGE,/android/util/cts/InstallUtilTest.java)', 1), ('(1,DELETE_PACKAGE,/com/android/tests/atomicinstall/SessionAbandonBehaviorTest.java)', 1), ('(1,DELETE_PACKAGE,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(1,DELETE_PACKAGE,/android/content/pm/cts/PackageManagerQueryPropertyTest.java)', 1), ('(1,DELETE_PACKAGE,/android/packageinstaller/uninstall/cts/UninstallTest.java)', 1), ('(1,DELETE_PACKAGE,/android/content/pm/cts/PackageManagerGetPropertyTest.java)', 1), ('(1,ACTION_MANAGE_STORAGE,/android/content/cts/AvailableIntentsTest.java)', 1)]"	"[('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[DELETE_PACKAGE]:[1]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 2), ('([1:/com/android/tests/securefrpinstall/SecureFrpInstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[ecureFrp(false);    }    /** Tests a SecurityException is thrown while in secure FRP mode. */   ])', 2), ('([1:/com/android/cts/rollback/RollbackManagerTest.java]:[DELETE_PACKAGE]:[1]:method_text:[             .dropShellPermissionIdentity();    }    /**     * Test basic rollbacks.     */   ])', 2), ('([1:/android/settings/cts/SettingsHandlerTest.java]:[ACTION_MANAGE_STORAGE]:[1]:method_text:[VER_ACTIVITY_PACKAGE_NAME) || !activityName.equals(                RESOLVER_ACTIVITY_NAME);    }}])', 1), ('([1:/com/android/tests/packagemanager/multiuser/app/PackageManagerMultiUserTest.java]:[DELETE_PACKAGE]:[1]:method_text:[Name, null);    }    /**     * Returns a list of installed modules to the host-side.     */   ])', 1), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[DELETE_PACKAGE]:[1]:method_text:[NSTALLER, 98);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);    }   ])', 1), ('([1:/com/android/tests/stagedinstall/StagedInstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[  .getUiAutomation()                .dropShellPermissionIdentity();    }    // This is marked as])', 1), ('([1:/com/android/cts/normalapp/ClientTest.java]:[DELETE_PACKAGE]:[1]:method_text:[        }, Manifest.permission.DELETE_PACKAGES, Manifest.permission.ACCESS_INSTANT_APPS);    }   ])', 1), ('([1:/com/android/cts/rollback/host/app2/HostTestHelper.java]:[DELETE_PACKAGE]:[1]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/util/cts/InstallUtilTest.java]:[DELETE_PACKAGE]:[1]:method_text:[1 == -1) break;                assertThat(buf1).isEqualTo(buf2);            }        }    }   ])', 1), ('([1:/com/android/tests/atomicinstall/SessionAbandonBehaviorTest.java]:[DELETE_PACKAGE]:[1]:method_text:[ public void setUp() throws Exception {        Uninstall.packages(TestApp.A, TestApp.B);    }   ])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[DELETE_PACKAGE]:[1]:method_text:[114);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_RECORD_INCOMING_PHONE_AUDIO, 115);    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerQueryPropertyTest.java]:[DELETE_PACKAGE]:[1]:method_text:[;        Uninstall.packages(PROPERTY_APP3_PACKAGE_NAME);        dropShellPermissions();    }   ])', 1), ('([1:/android/packageinstaller/uninstall/cts/UninstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[.split(""\\n"")) {            Thread.sleep(10);            Log.w(LOG_TAG, line);        }    }   ])', 1), ('([1:/android/content/pm/cts/PackageManagerGetPropertyTest.java]:[DELETE_PACKAGE]:[1]:method_text:[;        Uninstall.packages(PROPERTY_APP3_PACKAGE_NAME);        dropShellPermissions();    }   ])', 1), ('([1:/com/android/tests/stagedinstall/ApexShimValidationTest.java]:[DELETE_PACKAGE]:[1]:method_text:[tion()                .getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/com/android/tests/atomicinstall/AtomicInstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[ionError(message);    }    /**     * Tests a completed session should be cleaned up.     */   ])', 1), ('([1:/com/android/tests/atomicinstall/AtomicInstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[tion()                .getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/com/android/tests/stagedinstall/StagedInstallTest.java]:[DELETE_PACKAGE]:[1]:method_text:[  SessionUpdateBroadcastReceiver.sessionCommittedBroadcasts.clear();    }    // This is marked as])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_MANAGE_STORAGE]:[1]:method_text:[Storage() {        assertCanBeHandled(new Intent(StorageManager.ACTION_MANAGE_STORAGE));    }   ])', 1), ('([1:/com/android/tests/stagedinstall/ApexShimValidationTest.java]:[DELETE_PACKAGE]:[1]:method_text:[arBroadcastReceiver() {        SessionUpdateBroadcastReceiver.sessionBroadcasts.clear();    }   ])', 1)]"	""	""	"[('DELETE_PACKAGE', 22), ('ACTION_MANAGE_STORAGE', 2)]"	"[('[com.android.cts.rollback.host.app.HostTestHelper dropShellPermissionIdentity None]', 2), ('[com.android.tests.securefrpinstall.SecureFrpInstallTest adoptShellPermissions None]', 2), ('[com.android.tests.stagedinstall.StagedInstallTest testInstallStagedApk_VerifyPostReboot None]', 2), ('[com.android.cts.rollback.RollbackManagerTest dropShellPermissionIdentity None]', 2), ('[com.android.tests.stagedinstall.ApexShimValidationTest adoptShellPermissions None]', 2), ('[com.android.tests.atomicinstall.AtomicInstallTest adoptShellPermissions None]', 2), ('[android.settings.cts.SettingsHandlerTest isTrue None]', 1), ('[com.android.tests.packagemanager.multiuser.app.PackageManagerMultiUserTest testUninstallExistingPackage None]', 1), ('[com.android.cts.normalapp.ClientTest isTrue None]', 1), ('[com.android.cts.rollback.host.app2.HostTestHelper dropShellPermissionIdentity None]', 1), ('[android.util.cts.InstallUtilTest dropShellPermissionIdentity None]', 1), ('[com.android.tests.atomicinstall.SessionAbandonBehaviorTest TestName None]', 1), ('[android.content.pm.cts.PackageManagerQueryPropertyTest adoptShellPermissions None]', 1), ('[android.packageinstaller.uninstall.cts.UninstallTest isScreenOn None]', 1), ('[android.content.pm.cts.PackageManagerGetPropertyTest adoptShellPermissions None]', 1), ('[android.content.cts.AvailableIntentsTest testManageStorage None]', 1)]"
"246:691929) 9.1  . Permissions"	"9.1"	"C-4-3"	"9.1/C-4-3"	"09010000.670403"	"""C-4-3] MUST NOT bind to other apps, except for the following system apps: Bluetooth, Contacts, Media, Telephony, SystemUI, and components providing Internet APIs.This is stricter than the STRONGLY RECOMMENDED listed in section 9.8.6. <h3 id=""92_uid_and_process_isolation"" """	""	""	"RECOMMENDED APIs.This"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1)]"	"[('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 2), ('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 2), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 2), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 2), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1)]"	"[('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 2), ('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 2), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 2), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 2), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 2), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 2), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1)]"	""	""	"[('RECOMMENDED', 19)]"	"[('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled None]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations None]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled None]', 1)]"
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-2-1"	"9.8.12/C-2-1"	"09081200.670201"	"""C-2-1] MUST NOT store any raw audio or audio fingerprints on disk at all, or in memory for longer than 14 days."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-0-14"	"9.1/C-0-14"	"09010000.670014"	"""C-0-14] MUST only assign roles to applications with functionalities that meet the role requirements. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-3-1"	"9.1/C-3-1"	"09010000.670301"	"""C-3-1] MUST show a disclaimer during fully managed device setup (device owner setup) stating that the IT admin will have the ability to allow apps to control settings on the phone including microphone, camera and location, with options for user to continue setup or exit setup UNLESS the admin has opted out of control of permissions on the device. If device implementations pre-install any packages that hold any of the System UI Intelligence, System Ambient Audio Intelligence, System Audio Intelligence, System Notification Intelligence, System Text Intelligence, or System Visual Intelligence roles, the packages: """	""	""	"UNLESS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ConnectivityManagerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/net/api23Test/src/android/net/cts/api23test/ConnectivityManagerApi23Test.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/LoginActivityTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginActivityTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/android/jvmti/cts/JvmtiTrackingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RSASignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/AppWidgetTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/FatActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.api/src/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderClientTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentQueryMapTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityCallbacksTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/X509CertChainBuildingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodInfoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/attaching/host/src/android/jvmti/cts/JvmtiAttachingHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/base/host/src/android/jvmti/cts/JvmtiHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/appwidget/src/android/appwidget/cts/AppWidgetTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ImageDecoderTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/CorruptApkTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/tagging/app/src/android/jvmti/cts/JvmtiTaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/NetworkUsageStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app/src/android/app/cts/PictureInPictureParamsBuilderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/openglperf2/src/android/opengl2/cts/reference/GLReferenceBenchmark.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_MediaTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/common/src/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/IsolatedSplitsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyCallbackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/display/src/android/display/cts/DisplayTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/StrictJarFileTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FatActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/IsolatedSplitsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_MediaTest.java', 1), ('/home/gpoor/cts-source/cts/tests/leanbackjank/src/android/leanbackjank/cts/CtsDeviceLeanback.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/android/jvmti/cts/JvmtiTrackingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/backup/src/android/cts/backup/PreservedSettingsRestoreHostSideTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/classloaders/splits/src/android/classloaders/cts/ClassloaderSplitsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ExtractDecodeEditEncodeMuxTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/CacheQuotaHintTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderResultTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/ServiceWorkerWebSettingsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/tagging/app/src/android/jvmti/cts/JvmtiTaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/classloaders/splits/src/android/classloaders/cts/ClassloaderSplitsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AsyncQueryHandlerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/FeatureGroupInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/NumberPickerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ContentProviderTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/base/run-test-based-app/src/android/jvmti/cts/JvmtiRunTestBasedTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_MediaTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/MagnifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/openglperf2/src/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/Resources_ThemeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecListTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DialogFrameTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DialogFrameTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app/src/android/app/cts/PictureInPictureActionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AppConfigurationTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/app/src/android/app/cts/ApplyOverrideConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/DocumentClient/src/com/android/cts/documentclient/DocumentsClientTest.java', 1)]"	"[('(1,UNLESS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 2), ('(1,UNLESS,/android/content/cts/ContentProviderOperationTest.java)', 2), ('(1,UNLESS,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 2), ('(1,UNLESS,/android/security/cts/TestMedia.java)', 2), ('(1,UNLESS,/android/media/cts/AudioTrackTest.java)', 2), ('(1,UNLESS,/android/jvmti/cts/JvmtiTrackingTest.java)', 2), ('(1,UNLESS,/android/hardware/camera2/cts/RecordingTest.java)', 2), ('(2,UNLESS,/android/telephony/cts/PhoneStateListenerTest.java)', 2), ('(1,UNLESS,/android/appwidget/cts/AppWidgetTest.java)', 2), ('(1,UNLESS,/android/hardware/camera2/cts/CameraDeviceTest.java)', 2), ('(1,UNLESS,/android/autofillservice/cts/FatActivityTest.java)', 2), ('(1,UNLESS,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 2), ('(1,UNLESS,/android/view/inputmethod/cts/InputMethodInfoTest.java)', 2), ('(2,UNLESS,/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java)', 2), ('(1,UNLESS,/android/jvmti/cts/JvmtiTaggingTest.java)', 2), ('(1,UNLESS,/android/graphics/cts/BitmapTest.java)', 2), ('(1,UNLESS,/android/provider/cts/media/MediaStore_Video_MediaTest.java)', 2), ('(1,UNLESS,/android/app/usage/cts/UsageStatsTest.java)', 2), ('(1,UNLESS,/android/content/cts/ContentProviderResultTest.java)', 2), ('(1,UNLESS,/android/appsecurity/cts/IsolatedSplitsTests.java)', 2), ('(1,UNLESS,/android/server/wm/WindowTest.java)', 2), ('(1,UNLESS,/android/classloaders/cts/ClassloaderSplitsTest.java)', 2), ('(1,UNLESS,/android/content/cts/ContentProviderTest.java)', 2), ('(1,UNLESS,/android/provider/cts/media/MediaStore_Images_MediaTest.java)', 2), ('(1,UNLESS,/android/server/wm/DialogFrameTests.java)', 2), ('(1,UNLESS,/android/server/wm/AppConfigurationTests.java)', 2), ('(1,UNLESS,/android/keystore/cts/RSASignatureTest.java)', 1), ('(1,UNLESS,/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java)', 1), ('(1,UNLESS,/android/content/cts/ContentProviderClientTest.java)', 1), ('(1,UNLESS,/android/content/cts/ContentQueryMapTest.java)', 1), ('(1,UNLESS,/android/app/cts/ActivityCallbacksTest.java)', 1), ('(1,UNLESS,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(1,UNLESS,/android/security/cts/X509CertChainBuildingTest.java)', 1), ('(1,UNLESS,/android/jvmti/cts/JvmtiAttachingHostTest.java)', 1), ('(1,UNLESS,/android/jvmti/cts/JvmtiHostTest.java)', 1), ('(1,UNLESS,/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java)', 1), ('(1,UNLESS,/android/graphics/cts/ImageDecoderTest.java)', 1), ('(1,UNLESS,/android/appsecurity/cts/CorruptApkTests.java)', 1), ('(1,UNLESS,/android/app/usage/cts/NetworkUsageStatsTest.java)', 1), ('(1,UNLESS,/android/app/cts/PictureInPictureParamsBuilderTest.java)', 1), ('(1,UNLESS,/android/opengl2/cts/reference/GLReferenceBenchmark.java)', 1), ('(1,UNLESS,/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java)', 1), ('(4,UNLESS,/com/android/cts/net/hostside/VpnTest.java)', 1), ('(2,UNLESS,/android/autofillservice/cts/dropdown/LoginActivityTest.java)', 1), ('(2,UNLESS,/android/telephony/cts/TelephonyCallbackTest.java)', 1), ('(1,UNLESS,/android/display/cts/DisplayTest.java)', 1), ('(2,UNLESS,/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java)', 1), ('(8,UNLESS,/android/net/cts/ConnectivityManagerTest.java)', 1), ('(1,UNLESS,/android/util/cts/StrictJarFileTest.java)', 1), ('(1,UNLESS,/android/leanbackjank/cts/CtsDeviceLeanback.java)', 1), ('(1,UNLESS,/android/cts/backup/PreservedSettingsRestoreHostSideTest.java)', 1), ('(1,UNLESS,/android/media/cts/ExtractDecodeEditEncodeMuxTest.java)', 1), ('(1,UNLESS,/android/app/usage/cts/CacheQuotaHintTest.java)', 1), ('(1,UNLESS,/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java)', 1), ('(2,UNLESS,/android/autofillservice/cts/LoginActivityTest.java)', 1), ('(1,UNLESS,/android/webkit/cts/ServiceWorkerWebSettingsTest.java)', 1), ('(1,UNLESS,/android/content/pm/cts/FeatureTest.java)', 1), ('(1,UNLESS,/android/content/cts/AsyncQueryHandlerTest.java)', 1), ('(1,UNLESS,/android/content/pm/cts/FeatureGroupInfoTest.java)', 1), ('(1,UNLESS,/android/media/cts/AudioManagerTest.java)', 1), ('(1,UNLESS,/android/widget/cts/NumberPickerTest.java)', 1), ('(1,UNLESS,/android/jvmti/cts/JvmtiRunTestBasedTest.java)', 1), ('(1,UNLESS,/android/widget/cts/MagnifierTest.java)', 1), ('(1,UNLESS,/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java)', 1), ('(1,UNLESS,/android/content/res/cts/Resources_ThemeTest.java)', 1), ('(1,UNLESS,/android/media/cts/MediaCodecListTest.java)', 1), ('(1,UNLESS,/android/app/cts/PictureInPictureActionsTest.java)', 1), ('(1,UNLESS,/android/app/cts/ApplyOverrideConfigurationTest.java)', 1), ('(1,UNLESS,/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java)', 1), ('(1,UNLESS,/com/android/cts/documentclient/DocumentsClientTest.java)', 1), ('(3,UNLESS,/android/net/cts/api23test/ConnectivityManagerApi23Test.java)', 1)]"	"[('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[UNLESS]:[1]:method_text:[();            revokeBindAppWidgetPermission();        }    }    @MediumTest    @Presubmit   ])', 2), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[UNLESS]:[1]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 2), ('([1:/android/jvmti/cts/JvmtiTrackingTest.java]:[UNLESS]:[1]:method_text:[        Double.class.getName();    }    private ArrayList<Object> l = new ArrayList<>(100);   ])', 2), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[UNLESS]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 2), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[UNLESS]:[2]:method_text:[   // be not barred.        assertNotEquals(hasBarringTypeUnknown, hasBarringTypeKnown);    }   ])', 2), ('([1:/android/appwidget/cts/AppWidgetTest.java]:[UNLESS]:[1]:method_text:[);        }    }    @AppModeFull(reason = ""Instant apps cannot provide or host app widgets"")   ])', 2), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[UNLESS]:[1]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 2), ('([1:/android/autofillservice/cts/FatActivityTest.java]:[UNLESS]:[1]:method_text:[ways shown        assertThat(findNodeByAutofillHint(mRoot, ""importantAmI"")).isNotNull();    }   ])', 2), ('([1:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[UNLESS]:[1]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 2), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[UNLESS]:[1]:method_text:[d by the profile owner of        // an organization-owned managed profile.    }    @Override   ])', 2), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[UNLESS]:[1]:method_text:[ss it is called by the profile        // owner of an organization-owned managed profile.    }   ])', 2), ('([1:/android/jvmti/cts/JvmtiTaggingTest.java]:[UNLESS]:[1]:method_text:[tTag(o2));        return new WeakReference<Object>(o1);    }    // Very simplistic tagging.   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[UNLESS]:[1]:method_text:[assertFalse(bitmap.isPremultiplied());                }                break;        }    }   ])', 2), ('([1:/android/provider/cts/media/MediaStore_Video_MediaTest.java]:[UNLESS]:[1]:method_text:[SS_MEDIA_LOCATION"");        } catch (UnsupportedOperationException expected) {        }    }   ])', 2), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[UNLESS]:[1]:method_text:[ity(clazz);        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 2), ('([1:/android/content/cts/ContentProviderResultTest.java]:[UNLESS]:[1]:method_text:[LE = Bundle.EMPTY;    private final Exception TEST_EXCEPTION = new IllegalArgumentException();   ])', 2), ('([1:/android/appsecurity/cts/IsolatedSplitsTests.java]:[UNLESS]:[1]:method_text:[    public void tearDown() throws Exception {        getDevice().uninstallPackage(PKG);    }   ])', 2), ('([1:/android/server/wm/WindowTest.java]:[UNLESS]:[1]:method_text:[Format.UNKNOWN to allow the Window to select     *                          the format.     */   ])', 2), ('([1:/android/classloaders/cts/ClassloaderSplitsTest.java]:[UNLESS]:[1]:method_text:[    public void tearDown() throws Exception {        getDevice().uninstallPackage(PKG);    }   ])', 2), ('([1:/android/provider/cts/media/MediaStore_Images_MediaTest.java]:[UNLESS]:[1]:method_text:[SS_MEDIA_LOCATION"");        } catch (UnsupportedOperationException expected) {        }    }   ])', 2), ('([1:/android/server/wm/DialogFrameTests.java]:[UNLESS]:[1]:method_text:[    // Unless we pass NO_LIMITS in which case our requested position should    // be honored.   ])', 2), ('([1:/android/server/wm/AppConfigurationTests.java]:[UNLESS]:[1]:method_text:[lues reported in fullscreen should be larger than those reported in     * docked state.     */   ])', 2), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[UNLESS]:[1]:method_text:[wner of an organization-owned managed profile or a profile owner on user 0.    }    @Override   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[UNLESS]:[1]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2018-10"")   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[UNLESS]:[1]:method_text:[.getPackageManager().hasSystemFeature(                PackageManager.FEATURE_AUDIO_PRO);    }   ])', 1), ('([1:/android/keystore/cts/RSASignatureTest.java]:[UNLESS]:[1]:method_text:[  }        }        SIGNATURE_ALGORITHMS = sigAlgs.toArray(new String[sigAlgs.size()]);    }   ])', 1), ('([1:/android/net/cts/legacy/api22/ConnectivityManagerLegacyTest.java]:[UNLESS]:[1]:method_text:[etwork type "" + type);    }    /** Test that hipri can be brought up when Wifi is enabled. */   ])', 1), ('([1:/android/content/cts/ContentProviderClientTest.java]:[UNLESS]:[1]:method_text:[gnal.isCanceled());            verify(mICancellationSignal, never()).cancel();        }    }   ])', 1), ('([1:/android/content/cts/ContentQueryMapTest.java]:[UNLESS]:[1]:method_text:[lete(DummyProvider.CONTENT_URI, null, null);        super.tearDown();    }    @UiThreadTest   ])', 1), ('([1:/android/app/cts/ActivityCallbacksTest.java]:[UNLESS]:[1]:method_text:[          application.unregisterActivityLifecycleCallbacks(mActivityCallbacks);        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[UNLESS]:[1]:method_text:[            if (track != null) {                track.release();            }        }    }   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[UNLESS]:[1]:method_text:[ Tests exceptions that modify all future instances of a recurring event.     */    @MediumTest   ])', 1), ('([1:/android/security/cts/X509CertChainBuildingTest.java]:[UNLESS]:[1]:method_text:[ate(""intermediate_a.pem"");        intermediateB = loadCertificate(""intermediate_b.pem"");    }   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[UNLESS]:[1]:method_text:[() : """";            }        } catch (IOException e) {            return """";        }    }   ])', 1), ('([1:/android/jvmti/cts/JvmtiAttachingHostTest.java]:[UNLESS]:[1]:method_text:[cted void setUp() throws Exception {        mCurrentUser = getDevice().getCurrentUser();    }   ])', 1), ('([1:/android/jvmti/cts/JvmtiHostTest.java]:[UNLESS]:[1]:method_text:[cted void setUp() throws Exception {        mCurrentUser = getDevice().getCurrentUser();    }   ])', 1), ('([1:/org/apache/http/conn/ssl/cts/AbstractVerifierTest.java]:[UNLESS]:[1]:method_text:[,cn=\\tp"", ""\\tp"");    }    /** A cn=, generates an empty value, unless it\'s at the very end */   ])', 1), ('([1:/android/graphics/cts/ImageDecoderTest.java]:[UNLESS]:[1]:method_text:[e,                    ColorSpace.get(ColorSpace.Named.LINEAR_EXTENDED_SRGB)),        };    }   ])', 1), ('([1:/android/appsecurity/cts/CorruptApkTests.java]:[UNLESS]:[1]:method_text:[Info());    }    /** Installing the APK described in b/71360999 must not crash the device. */   ])', 1), ('([1:/android/app/usage/cts/NetworkUsageStatsTest.java]:[UNLESS]:[1]:method_text:[er) -> telephonyManager.getSubscriberId());        }        return """";    }    @AppModeFull   ])', 1), ('([1:/android/app/cts/PictureInPictureParamsBuilderTest.java]:[UNLESS]:[1]:method_text:[. */@SmallTest@RunWith(AndroidJUnit4.class)public class PictureInPictureParamsBuilderTest {   ])', 1), ('([1:/android/opengl2/cts/reference/GLReferenceBenchmark.java]:[UNLESS]:[1]:method_text:[   super(GLReferenceActivity.class);    }    /**     * Runs the reference benchmark.     */   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[UNLESS]:[1]:method_text:[******/    /**     * b/17769851     * Vulnerability Behaviour: EXIT_VULNERABLE (113)     */   ])', 1), ('([1:/android/accessibility/cts/common/InstrumentedAccessibilityServiceTestRule.java]:[UNLESS]:[1]:method_text:[valuate();            } finally {                disableService();            }        }    }}])', 1), ('([4:/com/android/cts/net/hostside/VpnTest.java]:[UNLESS]:[4]:method_text:[      super.onReceive(context, intent);            }            received = true;        }    }}])', 1), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[UNLESS]:[1]:method_text:[hould not trigger a new session, unless a manual autofill     * workflow was requested.     */   ])', 1), ('([1:/android/autofillservice/cts/dropdown/LoginActivityTest.java]:[UNLESS]:[1]:method_text:[ } catch (Exception e) {                mSafeCleanerRule.add(e);            }        }    }   ])', 1), ('([2:/android/telephony/cts/TelephonyCallbackTest.java]:[UNLESS]:[2]:method_text:[nRegistrationFailedCalled = true;                mLock.notify();            }        }    }   ])', 1), ('([1:/android/display/cts/DisplayTest.java]:[UNLESS]:[1]:method_text:[untime().exec(""cmd display set-brightness "" + value);        return 0 == process.waitFor();    }}])', 1), ('([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[UNLESS]:[1]:method_text:[       assertInstallFailsWithError(""v2-only-missing-classes.dex.apk"", ""code is missing"");    }   ])', 1), ('([1:/android/appsecurity/cts/PkgInstallSignatureVerificationTest.java]:[UNLESS]:[1]:method_text:[ error);        assertInstallFailsWithError(""v2-only-starts-with-dex-magic.apk"", error);    }   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[UNLESS]:[1]:method_text:[rim() : """";            }        } catch (IOException e) {            return """";        }    }}])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[in the current API version"");        } catch (UnsupportedOperationException expected) {}    }   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[etworkCallback}.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[*/    @AppModeFull(reason = ""CHANGE_NETWORK_STATE permission can\'t be granted to instant apps"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[ 1));        });    }    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[fter iterations.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[fter iterations.     */    @AppModeFull(reason = ""Cannot request network in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[ileged requests.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/net/cts/ConnectivityManagerTest.java]:[UNLESS]:[1]:method_text:[ee. b/144679405.     */    @AppModeFull(reason = ""Cannot get WifiManager in instant app mode"")   ])', 1), ('([1:/android/util/cts/StrictJarFileTest.java]:[UNLESS]:[1]:method_text:[tion(""Unable to create temp folder"", e);        }        mResourcesFile.deleteOnExit();    }   ])', 1), ('([1:/android/leanbackjank/cts/CtsDeviceLeanback.java]:[UNLESS]:[1]:method_text:[erationCount = 2)    @GfxMonitor(processName = APP_PACKAGE)    @WindowContentFrameStatsMonitor   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[UNLESS]:[1]:method_text:[file        // owner of an organization-owned managed profile or a profile owner on user 0.    }}])', 1), ('([1:/android/cts/backup/PreservedSettingsRestoreHostSideTest.java]:[UNLESS]:[1]:method_text:[        while the overrideable ones were restored from the backup data</li>     * </ol>     */   ])', 1), ('([1:/android/media/cts/ExtractDecodeEditEncodeMuxTest.java]:[UNLESS]:[1]:method_text:[            return codecInfo;                }            }        }        return null;    }}])', 1), ('([1:/android/app/usage/cts/CacheQuotaHintTest.java]:[UNLESS]:[1]:method_text:[port org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class CacheQuotaHintTest {   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/WriteExternalStorageTest.java]:[UNLESS]:[1]:method_text:[ctories tested by     * {@link CommonExternalStorageTest#testAllPackageDirsWritable()}.     */   ])', 1), ('([1:/android/autofillservice/cts/LoginActivityTest.java]:[UNLESS]:[1]:method_text:[hould not trigger a new session, unless a manual autofill     * workflow was requested.     */   ])', 1), ('([1:/android/autofillservice/cts/LoginActivityTest.java]:[UNLESS]:[1]:method_text:[ } catch (Exception e) {                mSafeCleanerRule.add(e);            }        }    }   ])', 1), ('([1:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[UNLESS]:[1]:method_text:[ockNetworkLoads(b);            assertEquals(b, mSettings.getBlockNetworkLoads());        }    }}])', 1), ('([1:/android/content/pm/cts/FeatureTest.java]:[UNLESS]:[1]:method_text:[;    }    /**     * Test whether device supports managed profiles as required by CDD     */   ])', 1), ('([1:/android/content/cts/AsyncQueryHandlerTest.java]:[UNLESS]:[1]:method_text:[lete(DummyProvider.CONTENT_URI, null, null);        super.tearDown();    }    @UiThreadTest   ])', 1), ('([1:/android/content/pm/cts/FeatureGroupInfoTest.java]:[UNLESS]:[1]:method_text:[tion {        super.setUp();        mPackageManager = getContext().getPackageManager();    }   ])', 1), ('([1:/android/content/cts/ContentProviderTest.java]:[UNLESS]:[1]:method_text:[ase(TEST_DB_NAME);        mContext.deleteFile(TEST_FILE_NAME);        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[UNLESS]:[1]:method_text:[    @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")   ])', 1), ('([1:/android/widget/cts/NumberPickerTest.java]:[UNLESS]:[1]:method_text:[mberPicker = (NumberPicker) mActivity.findViewById(R.id.number_picker);    }    @UiThreadTest   ])', 1), ('([1:/android/content/cts/ContentProviderTest.java]:[UNLESS]:[1]:method_text:[      sContext.deleteDatabase(TEST_DB_NAME);        sContext.deleteFile(TEST_FILE_NAME);    }   ])', 1), ('([1:/android/jvmti/cts/JvmtiRunTestBasedTest.java]:[UNLESS]:[1]:method_text:[ata            .getBoolean(""android.jvmti.cts.needs_new_thread"", /*defaultValue*/false);    }   ])', 1), ('([1:/android/widget/cts/MagnifierTest.java]:[UNLESS]:[1]:method_text:[ 1.1 && dpScreenHeight >= dpMagnifier.y * 1.1;    }    //***** Tests for constructor *****//   ])', 1), ('([1:/android/opengl2/cts/primitive/GLPrimitiveBenchmark.java]:[UNLESS]:[1]:method_text:[ivity.class);    }    /**     * Runs the full OpenGL ES 2.0 pipeline test offscreen.     */   ])', 1), ('([1:/android/content/res/cts/Resources_ThemeTest.java]:[UNLESS]:[1]:method_text:[veAttribute(R.attr.type1, tv, false));        assertNotSame(TypedValue.TYPE_NULL, tv.type);    }}])', 1), ('([1:/android/media/cts/MediaCodecListTest.java]:[UNLESS]:[1]:method_text:[                  pp2 != pp && pp2.covers(pp));                }            }        }    }   ])', 1), ('([1:/android/app/cts/PictureInPictureActionsTest.java]:[UNLESS]:[1]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/app/cts/ApplyOverrideConfigurationTest.java]:[UNLESS]:[1]:method_text:[n().setRotation(UiAutomation.ROTATION_UNFREEZE);        super.tearDown();    }    @SmallTest   ])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionReprocessCaptureTest.java]:[UNLESS]:[1]:method_text:[  private ImageWriter mImageWriter;    private SimpleImageWriterListener mImageWriterListener;   ])', 1), ('([1:/com/android/cts/documentclient/DocumentsClientTest.java]:[UNLESS]:[1]:method_text:[(                ""Converted contents."".getBytes(), readTypedFully(uri, streamTypes[0]));    }   ])', 1), ('([1:/android/net/cts/api23test/ConnectivityManagerApi23Test.java]:[UNLESS]:[1]:method_text:[sendBroadcast(finalIntent);        assertFalse(ConnectivityReceiver.waitForBroadcast());    }   ])', 1), ('([1:/android/net/cts/api23test/ConnectivityManagerApi23Test.java]:[UNLESS]:[1]:method_text:[dcastAndReturnResultCode(                getConnectivityCount, SEND_BROADCAST_TIMEOUT));    }   ])', 1), ('([1:/android/net/cts/api23test/ConnectivityManagerApi23Test.java]:[UNLESS]:[1]:method_text:[illiseconds) waiting for result code for broadcast"", resultCode);        return resultCode;    }])', 1)]"	""	""	"[('UNLESS', 111)]"	"[('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFakedAppWidget None]', 2), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeZoneEnabled None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 2), ('[android.telephony.cts.PhoneStateListenerTest testOnBarringInfoChanged None]', 2), ('[android.appwidget.cts.AppWidgetTest testBindAppWidget None]', 2), ('[android.autofillservice.cts.FatActivityTest testAutomaticRequest None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 2), ('[android.view.inputmethod.cts.InputMethodInfoTest testAtLeastOneEncryptionAwareInputMethodIsAvailable None]', 2), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetAutoTimeEnabled None]', 2), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetAutoTimeZoneEnabled None]', 2), ('[android.jvmti.cts.JvmtiTaggingTest test None]', 2), ('[android.graphics.cts.BitmapTest testAlphaAndPremul None]', 2), ('[android.provider.cts.media.MediaStore_Video_MediaTest testOriginalAccess None]', 2), ('[android.app.usage.cts.UsageStatsTest isAppStandbyEnabled None]', 2), ('[android.server.wm.WindowTest testTakeKeyEvents None]', 2), ('[android.provider.cts.media.MediaStore_Images_MediaTest testLocationRedaction None]', 2), ('[android.server.wm.DialogFrameTests testExplicitPositionMatchParent None]', 2), ('[android.server.wm.AppConfigurationTests getDefaultDisplay None]', 2), ('[android.media.cts.AudioTrackTest testPlayChannelIndexStreamBuffer None]', 1), ('[android.content.cts.ContentProviderClientTest isCanceled None]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData None]', 1), ('[android.provider.cts.calendar.CalendarTest testOutOfOrderRecurrenceExceptions None]', 1), ('[org.apache.http.conn.ssl.cts.AbstractVerifierTest testGetCns None]', 1), ('[android.graphics.cts.ImageDecoderTest getDisplayMetrics None]', 1), ('[android.app.usage.cts.NetworkUsageStatsTest getIsDefault None]', 1), ('[android.accessibility.cts.common.InstrumentedAccessibilityServiceTestRule testWithEnabledAccessibilityService None]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[android.autofillservice.cts.dropdown.LoginActivityTest testAutoFillOneDataset None]', 1), ('[android.autofillservice.cts.dropdown.LoginActivityTest testAutoFillOneDatasetAndSaveHidingOverlays None]', 1), ('[android.telephony.cts.TelephonyCallbackTest testOnBarringInfoChangedByRegisterTelephonyCallback None]', 1), ('[android.display.cts.DisplayTest testGetSupportWideColorGamut_displayIsWideColorGamut None]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallV2RejectsWhenMissingCode None]', 1), ('[android.appsecurity.cts.PkgInstallSignatureVerificationTest testInstallApkWhichDoesNotStartWithZipLocalFileHeaderMagic None]', 1), ('[android.net.cts.ConnectivityManagerTest testOpenConnection None]', 1), ('[android.net.cts.ConnectivityManagerTest testRegisterNetworkCallback None]', 1), ('[android.net.cts.ConnectivityManagerTest testRegisterNetworkCallback_withPendingIntent None]', 1), ('[android.net.cts.ConnectivityManagerTest testKeepaliveWifiUnsupported None]', 1), ('[android.net.cts.ConnectivityManagerTest testCreateTcpKeepalive None]', 1), ('[android.net.cts.ConnectivityManagerTest testSocketKeepaliveLimitWifi None]', 1), ('[android.net.cts.ConnectivityManagerTest testSocketKeepaliveLimitTelephony None]', 1), ('[android.net.cts.ConnectivityManagerTest testSocketKeepaliveUnprivileged None]', 1), ('[android.leanbackjank.cts.CtsDeviceLeanback runTest None]', 1), ('[android.media.cts.ExtractDecodeEditEncodeMuxTest testExtractDecodeEditEncodeMuxAudioVideo None]', 1), ('[com.android.cts.writeexternalstorageapp.WriteExternalStorageTest testVerifyNoMediaCreated None]', 1), ('[android.autofillservice.cts.LoginActivityTest testAutoFillOneDataset None]', 1), ('[android.autofillservice.cts.LoginActivityTest testAutoFillOneDatasetAndSaveHidingOverlays None]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testBlockNetworkLoads None]', 1), ('[android.media.cts.AudioManagerTest isMicrophoneMute None]', 1), ('[android.content.cts.ContentProviderTest TestApis None]', 1), ('[android.jvmti.cts.JvmtiRunTestBasedTest getTestNumber None]', 1), ('[android.widget.cts.MagnifierTest getDisplayMetrics None]', 1), ('[android.content.res.cts.Resources_ThemeTest testEmptyDoesNotGetOverriden None]', 1), ('[android.media.cts.MediaCodecListTest testVideoPerformancePointsSanity None]', 1), ('[android.app.cts.ApplyOverrideConfigurationTest ApplyOverrideConfigurationTest None]', 1), ('[com.android.cts.documentclient.DocumentsClientTest testOpenVirtual None]', 1), ('[android.net.cts.api23test.ConnectivityManagerApi23Test testConnectivityChanged_manifestRequestOnly_shouldNotReceiveIntent None]', 1), ('[android.net.cts.api23test.ConnectivityManagerApi23Test testConnectivityChanged_manifestRequestOnlyPreN_shouldReceiveIntent None]', 1), ('[android.net.cts.api23test.ConnectivityManagerApi23Test testConnectivityChanged_whenRegistered_shouldReceiveIntent None]', 1)]"
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-2"	"2.2.7.1/H-1-2"	"02020701.720102"	"""5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. | 5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. | 5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback. | 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30 fps. *Only 2 instances are required if VP9 codec is present. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. | 5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. && 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. | 5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback. | 5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30 fps. *Only 2 instances are required if VP9 codec is present. | 5.3/H-1-2] MUST NOT drop more than 2 frames in 10 seconds during a video resolution change in a 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback."""	""	""	"AAC HEVC VP9 AVC"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerTest.java', 44), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 19), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 10), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecUnitTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderConformanceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/FlashlightTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/classloaders/splits/apps/src/com/android/cts/classloadersplitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/mediastress/src/android/mediastress/cts/H263QcifLongPlayerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestExp.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/IsolatedSplitApp/src/com/android/cts/isolatedsplitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/MediaRecorderInfoLeakTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java', 1)]"	"[('(1,AAC,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,AAC,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,HEVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,VP9,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(6,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,HEVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(3,VP9,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(6,AAC,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(73,AAC,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(3,AAC,/android/mediav2/cts/CodecUnitTest.java)', 1), ('(1,AVC,/android/mediav2/cts/CodecUnitTest.java)', 1), ('(1,AAC,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(2,AVC,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(8,VP9,/android/media/cts/DecoderConformanceTest.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(8,AVC,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(2,AAC,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(1,AAC,/com/android/cts/classloadersplitapp/SplitAppTest.java)', 1), ('(2,AAC,/android/mediastress/cts/H263QcifLongPlayerTest.java)', 1), ('(8,AAC,/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(5,AAC,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1), ('(3,AAC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,HEVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,VP9,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,AVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(15,AAC,/android/hardware/camera2/cts/CameraManagerTest.java)', 1), ('(1,AAC,/android/renderscript/cts/generated/TestExp.java)', 1), ('(1,AAC,/com/android/cts/isolatedsplitapp/SplitAppTest.java)', 1), ('(1,AAC,/android/security/cts/MediaRecorderInfoLeakTest.java)', 1), ('(79,AAC,/android/media/cts/MediaPlayerTest.java)', 1), ('(3,HEVC,/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java)', 1), ('(4,AAC,/android/hardware/camera2/cts/FlashlightTest.java)', 1), ('(195,AAC,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 1), ('(7,AVC,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 1), ('(20,AAC,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(11,AVC,/android/media/cts/StreamingMediaPlayerTest.java)', 1)]"	"[('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[sTest(""hls_variant/index.m3u8"", 60 * 1000, LOCAL_HLS_BITS_PER_MS, false /*isAudioOnly*/);    }   ])', 2), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[AAC]:[1]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[AAC]:[1]:method_text:[r(R.raw.valid_chain, R.raw.test_key);        runDownloadManagerTest(serverSocket, true);    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[HEVC]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[ mime,            String testFile, String muxFile, int bitrate, int framerate);    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[Mime, mInpPrefix + mTestFile,                    tmpPath, mBitrate, mFrameRate));        }    }}])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([3:/android/media/cts/DecoderTestAacFormat.java]:[AAC]:[3]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([3:/android/media/cts/DecoderTestAacFormat.java]:[AAC]:[3]:method_text:[;        }        decoder.stop();        decoder.release();        extractor.release();    }}])', 1), ('([3:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[3]:method_text:[     * Verify correct decoding of MPEG-4 AAC with output level normalization to -23dBFS.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[nge Control (DRC) metadata.     * Fully apply light compression DRC (default settings).     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[   * Apply only half of the light compression DRC and normalize to -20dBFS output level.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[ata.     * Disable light compression DRC to test if MediaFormat keys reach the decoder.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[C) metadata.     * Apply heavy compression gains and normalize to -16dBFS output level.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[ metadata.     * Uses a two channel 248 Hz sine tone at 48 kHz sampling rate for input.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[2]:method_text:[C decoder.     * Uses a two channel 248 Hz sine tone at 48 kHz sampling rate for input.     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[1]:method_text:[4; // -16.0 dBFs    /**     * Test USAC decoder with different target loudness levels     */   ])', 1), ('([16:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[16]:method_text:[ * Verify that the correct output loudness values are returned by the MPEG-4 AAC decoder     */   ])', 1), ('([41:/android/media/cts/DecoderTestAacDrc.java]:[AAC]:[41]:method_text:[tamps,                drcParams, decoderName, runtimeChange, -2);        return decoded;    }}])', 1), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AAC]:[1]:method_text:[    } catch (IllegalStateException e) {                // expected            }        }       ])', 1), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AAC]:[1]:method_text:[ull, null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);            mCodec.release();        }       ])', 1), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AAC]:[1]:method_text:[t(), null, null, MediaCodec.CONFIGURE_FLAG_ENCODE);            mCodec.release();        }       ])', 1), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AVC]:[1]:method_text:[    } catch (IllegalStateException e) {                // expected            }        }       ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[AAC]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[AVC]:[2]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[         }            }        }    }    /**     * Test VP9 decoders from vendor.     */   ])', 1), (""([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[O_VP9, false /* isGoog */);    }    /**     * Test Google's VP9 decoder from libvpx.     */   ])"", 1), ('([2:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[2]:method_text:[s Exception {        decodeTestVectors(MediaFormat.MIMETYPE_VIDEO_VP9, true /* isGoog */);    }}])', 1), ('([4:/android/hardware/camera2/cts/RecordingTest.java]:[AAC]:[4]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([8:/android/hardware/camera2/cts/RecordingTest.java]:[AVC]:[8]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([2:/android/renderscript/cts/generated/TestConvert.java]:[AAC]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/classloadersplitapp/SplitAppTest.java]:[AAC]:[1]:method_text:[ty*/);    @Rule    public AppContextTestRule mAppContextTestRule = new AppContextTestRule();   ])', 1), ('([2:/android/mediastress/cts/H263QcifLongPlayerTest.java]:[AAC]:[2]:method_text:[        ""bbb_full.ffmpeg.176x144.3gp.h263_56kbps_12fps.libfaac_mono_24kbps_11025Hz.3gp""    };   ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[AAC]:[1]:method_text:[        if (mHandlerThread != null) {            mHandlerThread.quitSafely();        }    }   ])', 1), ('([6:/android/telephony/cts/PhoneStateListenerTest.java]:[AAC]:[6]:method_text:[Lock.wait(WAIT_TIME);            }        }        assertTrue(mOnDataActivityCalled);    }   ])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[AAC]:[1]:method_text:[k.wait(WAIT_TIME);            }        }        assertTrue(mOnCellInfoChangedCalled);    }   ])', 1), ('([5:/android/hardware/camera2/cts/OfflineSessionTest.java]:[AAC]:[5]:method_text:[))                fail(""Remote offline session test activity is still running"");        }    }}])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[2]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[AAC]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                cam1Cb = null;            }        }    }   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[AAC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[HEVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[VP9]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[AVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([9:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[9]:method_text:[fail(""Invalid CameraAccessException code: "" + reason);        return -1; // unreachable    }   ])', 1), ('([4:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[4]:method_text:[pening the same device multiple times and make sure the right     * error state is set.     */   ])', 1), ('([2:/android/hardware/camera2/cts/CameraManagerTest.java]:[AAC]:[2]:method_text:[    // Verify no LEGACY-level devices appear on devices first launched in the Q release or newer   ])', 1), ('([1:/android/renderscript/cts/generated/TestExp.java]:[AAC]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/isolatedsplitapp/SplitAppTest.java]:[AAC]:[1]:method_text:[   @Before    public void setUp() {        BaseActivity.setOverrideConfiguration(null);    }   ])', 1), ('([1:/android/security/cts/MediaRecorderInfoLeakTest.java]:[AAC]:[1]:method_text:[if (mediaRecorder != null){                mediaRecorder.release();            }        }    }}])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[   mMediaPlayer.stop();    }    // setPlaybackParams() with zero speed should pause playback.   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[be paused"", mMediaPlayer.getCurrentPosition() == position);        mMediaPlayer.stop();    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[, pbp.getSpeed(), FLOAT_TOLERANCE);        }        mMediaPlayer.stop();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[ng in time for mode "" + seekMode,                timeRemainedMs > 0);        return cp;    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[,                ts2.getAnchorMediaTimeUs(), toleranceUs);        mMediaPlayer.stop();    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[Equals(0, mOnMediaTimeDiscontinuityCalled.getNumSignal());        mMediaPlayer.reset();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_1280x720_mkv_h265_500kbps_25fps_aac_stereo_128kbps_44100hz, 1280, 720);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_480x360_mp4_h264_500kbps_25fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_480x360_mp4_h264_500kbps_30fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_480x360_mp4_h264_1000kbps_25fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_480x360_mp4_h264_1000kbps_30fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_480x360_mp4_h264_1350kbps_25fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_480x360_mp4_h264_1350kbps_30fps_aac_stereo_128kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[p4_h264_1350kbps_30fps_aac_stereo_128kbps_44100hz_fragmented,                480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[       R.raw.video_480x360_mp4_h264_1350kbps_30fps_aac_stereo_192kbps_44100hz, 480, 360);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[            R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_mono_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[            R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_mono_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[          R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_stereo_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[          R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_stereo_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_stereo_128kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_56kbps_12fps_aac_stereo_128kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[            R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_mono_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[            R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_mono_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[          R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_stereo_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[          R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_stereo_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_stereo_128kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_56kbps_25fps_aac_stereo_128kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[           R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_mono_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[           R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_mono_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_stereo_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_stereo_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_stereo_128kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_176x144_3gp_h263_300kbps_12fps_aac_stereo_128kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[           R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_mono_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[           R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_mono_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_stereo_24kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[         R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_stereo_24kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_stereo_128kbps_11025hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[        R.raw.video_176x144_3gp_h263_300kbps_25fps_aac_stereo_128kbps_22050hz, 176, 144);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[(""wrong number of repetitions"", 1, mOnCompletionCalled.getNumSignal());        return 1;    }   ])', 1), ('([2:/android/media/cts/MediaPlayerTest.java]:[AAC]:[2]:method_text:[.getCurrentPosition() > duration - 1000);        mMediaPlayer.reset();        return 1;    }   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[MediaPlayer.isPlaying()) {            Thread.sleep(SLEEP_TIME);        }    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[ mMediaPlayer.start();        assertTrue(mOnErrorCalled.waitForSignal());    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaPlayerTest.java]:[AAC]:[1]:method_text:[eadAt(-2);        mMediaPlayer.start();        assertTrue(mOnErrorCalled.waitForSignal());    }}])', 1), ('([3:/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java]:[HEVC]:[3]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([1:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[1]:method_text:[f (info.hasFlash()) {                mFlashCameraIdList.add(id);            }        }    }   ])', 1), ('([3:/android/hardware/camera2/cts/FlashlightTest.java]:[AAC]:[3]:method_text:[ble e) {                    fail(e.getMessage());                }            }        }    }}])', 1), ('([41:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAC]:[41]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 1), ('([126:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAC]:[126]:method_text:[AAAAAAAAAAAcAAAAcAAAAAIA"" +                    ""AAAAAAAAAQAAAAAAAAAAEAAAAQAAAHAAAAA=""),    };   ])', 1), ('([28:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAC]:[28]:method_text:[      for (ExpectedMethod m : methods) {            m.ensureHasMethod(target);        }    }   ])', 1), ('([7:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AVC]:[7]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 1), ('([8:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[8]:method_text:[ondition.   Disable until better solution is available    // Streaming RTSP video from YouTube   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[1]:method_text:[p?cid=0x271de9756065677e""                + ""&fmt=17&user=android-device-test"", 176, 144);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[1]:method_text:[?cid=0xc80658495af60617""                + ""&fmt=17&user=android-device-test"", 176, 144);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[1]:method_text:[p?cid=0x271de9756065677e""                + ""&fmt=18&user=android-device-test"", 480, 270);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[1]:method_text:[""&fmt=18&user=android-device-test"", 480, 270);    }*/    // Streaming HTTP video from YouTube   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[2]:method_text:[nfig.getValue(HTTP_MPEG4_SP_AAC_VIDEO_1_KEY);        playVideoTest(urlString, 176, 144);    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[2]:method_text:[nfig.getValue(HTTP_MPEG4_SP_AAC_VIDEO_2_KEY);        playVideoTest(urlString, 176, 144);    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[2]:method_text:[fig.getValue(HTTP_H264_BASE_AAC_VIDEO_1_KEY);        playVideoTest(urlString, 640, 360);    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AAC]:[2]:method_text:[   playVideoTest(urlString, 640, 360);    }    // Streaming HLS video downloaded from YouTube   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[fig.getValue(HTTP_H264_BASE_AAC_VIDEO_1_KEY);        playVideoTest(urlString, 640, 360);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   playVideoTest(urlString, 640, 360);    }    // Streaming HLS video downloaded from YouTube   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   localHlsTest(""audio_only/index.m3u8"", 60 * 1000, -1, true /*isAudioOnly*/);        }    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[2]:method_text:[000, -1, false /*isAudioOnly*/);        }    }    // Streaming audio from local HTTP server   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[ // skip        }        localHlsTest(""hls.m3u8"", false, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", true, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", false, true, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[c void quit() {            mLooper.quit();            mMediaPlayer.release();        }    }   ])', 1)]"	""	""	"[('AAC', 94), ('AVC', 18), ('VP9', 9), ('HEVC', 5)]"	"[('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 4), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest testEncodeDecodeAccuracyRGB None]', 3), ('[android.mediav2.cts.CodecUnitTest TestApi None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 2), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video1 None]', 2), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video2 None]', 2), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.security.net.config.cts.DownloadManagerTest testConfigTrustedCaAccepted None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurface None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurfaceNative None]', 1), ('[android.media.cts.DecoderTestAacFormat testHeAacM4aMultichannelDownmix None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcLevelM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcFullM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcHalfM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcOffM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcHeavyM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcClipM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacInternalClipM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeUsacLoudnessM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcOutputLoudnessM4a None]', 1), ('[android.mediav2.cts.CodecUnitTest testConfigureForNullFormat None]', 1), ('[android.mediav2.cts.CodecUnitTest testConfigureForEmptyFormat None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Other None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Goog None]', 1), ('[com.android.cts.classloadersplitapp.SplitAppTest AppContextTestRule None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnDataActivity None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnCellInfoChanged None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testUnsupportedOfflineSessionOutputs None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice None]', 1), ('[android.hardware.camera2.cts.CameraManagerTest NoopCameraListener None]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerOpenAllCameras None]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerListenerCallbacks None]', 1), ('[com.android.cts.isolatedsplitapp.SplitAppTest AppContextTestRule None]', 1), ('[android.security.cts.MediaRecorderInfoLeakTest test_cve_2016_2499 None]', 1), ('[android.media.cts.MediaPlayerTest testSetPlaybackParamsPositiveSpeed None]', 1), ('[android.media.cts.MediaPlayerTest testSetPlaybackParamsZeroSpeed None]', 1), ('[android.media.cts.MediaPlayerTest testPlaybackRate None]', 1), ('[android.media.cts.MediaPlayerTest testSeekModes None]', 1), ('[android.media.cts.MediaPlayerTest testGetTimestamp None]', 1), ('[android.media.cts.MediaPlayerTest testMediaTimeDiscontinuity None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MKV_H265_1280x720_500kbps_25fps_AAC_Stereo_128kbps_44100Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_500kbps_25fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_500kbps_30fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1000kbps_25fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1000kbps_30fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1350kbps_25fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1350kbps_30fps_AAC_Stereo_128kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1350kbps_30fps_AAC_Stereo_128kbps_44110Hz_frag None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_MP4_H264_480x360_1350kbps_30fps_AAC_Stereo_192kbps_44110Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Mono_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Mono_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Stereo_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Stereo_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Stereo_128kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_12fps_AAC_Stereo_128kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Mono_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Mono_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Stereo_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Stereo_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Stereo_128kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_56kbps_25fps_AAC_Stereo_128kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Mono_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Mono_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Stereo_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Stereo_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Stereo_128kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_12fps_AAC_Stereo_128kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Mono_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Mono_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Stereo_24kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Stereo_24kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Stereo_128kbps_11025Hz None]', 1), ('[android.media.cts.MediaPlayerTest testLocalVideo_3gp_H263_176x144_300kbps_25fps_AAC_Stereo_128kbps_22050Hz None]', 1), ('[android.media.cts.MediaPlayerTest testResumeAtEnd None]', 1), ('[android.media.cts.MediaPlayerTest testPositionAtEnd None]', 1), ('[android.media.cts.MediaPlayerTest testPlaybackFromAMediaDataSource None]', 1), ('[android.media.cts.MediaPlayerTest testPlaybackFailsIfMediaDataSourceThrows None]', 1), ('[android.media.cts.MediaPlayerTest testPlaybackFailsIfMediaDataSourceReturnsAnError None]', 1), ('[android.hardware.camera2.cts.FlashlightTest testTorchModeExceptions None]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest testSucessfulRetransform None]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest testRetransformFailures None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testRTSP_MPEG4SP_AAC_Video1 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testRTSP_MPEG4SP_AAC_Video2 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testRTSP_H264Base_AAC_Video1 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testRTSP_H264Base_AAC_Video2 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_MPEG4SP_AAC_Video1 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_MPEG4SP_AAC_Video2 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHLS None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsWithHeadersCookies None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_audio_only_overridable None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_unmuxed_1500k None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStream None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithQueryString None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithRedirect None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithTimedId3 None]', 1)]"
""	"3.9.3"	"A-1-1"	"3.9.3/A-1-1"	"03090300.650101"	""">3.9.3/A-1-1] MUST implement all of the User lifecycle properties INITIAL_USER_INFO, SWITCH_USER, CREATE_USER, REMOVE_USER. Automotive device implementations: [<a href=""#3_14_media_ui"""""	""	""	"INITIAL_USER_INFO SWITCH_USER CREATE_USER REMOVE_USER"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/StartProfilesTest.java', 13), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/UserRestrictionTest.java', 2), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/users/UserReferenceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/AppExitTest/src/android/app/cts/ActivityManagerAppExitInfoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCasTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java', 1)]"	"[('(8,REMOVE_USER,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(1,REMOVE_USER,/com/android/cts/devicepolicy/UserRestrictionsTest.java)', 2), ('(1,REMOVE_USER,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 2), ('(1,REMOVE_USER,/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java)', 2), ('(2,REMOVE_USER,/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java)', 2), ('(1,CREATE_USER,/android/app/cts/ActivityManagerAppExitInfoTest.java)', 1), ('(6,REMOVE_USER,/com/android/cts/deviceowner/CreateAndManageUserTest.java)', 1), ('(2,REMOVE_USER,/com/android/cts/comp/provisioning/UserRestrictionTest.java)', 1), ('(1,REMOVE_USER,/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java)', 1), ('(2,REMOVE_USER,/test/java/com/android/bedstead/nene/users/UserReferenceTest.java)', 1), ('(1,CREATE_USER,/com/android/cts/managedprofile/UserManagerTest.java)', 1), ('(1,CREATE_USER,/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java)', 1), ('(13,CREATE_USER,/android/devicepolicy/cts/StartProfilesTest.java)', 1), ('(1,CREATE_USER,/android/media/cts/MediaCasTest.java)', 1), ('(1,REMOVE_USER,/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java)', 1), ('(1,REMOVE_USER,/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java)', 1)]"	"[('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[REMOVE_USER]:[3]:method_text:[_USER, false, mUserId);            assertTrue(getDevice().removeUser(userId));        }    }   ])', 2), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[REMOVE_USER]:[3]:method_text:[trings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)                    .build()        );    }   ])', 2), ('([1:/com/android/cts/devicepolicy/UserRestrictionsTest.java]:[REMOVE_USER]:[1]:method_text:[          throws DeviceNotAvailableException {        runTests(className, null, userId);    }   ])', 2), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[REMOVE_USER]:[1]:method_text:[. The user should be removed     * automatically even when DISALLOW_REMOVE_USER is set.     */   ])', 2), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[REMOVE_USER]:[1]:method_text:[tStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)                        .build());    }   ])', 2), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[assertThat(sUserManager.isUserRunning(sDeviceState.workProfile().userHandle())).isTrue();    }   ])', 2), ('([2:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[REMOVE_USER]:[2]:method_text:[              ""testOtherProfilesEqualsBindTargetUsers"",                otherProfileUserId);    }}])', 2), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[REMOVE_USER]:[2]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[REMOVE_USER]:[2]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([1:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[CREATE_USER]:[1]:method_text:[info.getProcessStateSummary(), cookie,                cookie == null ? 0 : cookie.length));    }}])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[REMOVE_USER]:[1]:method_text:[earUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);        super.tearDown();    }   ])', 1), ('([4:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[REMOVE_USER]:[4]:method_text:[r.USER_OPERATION_SUCCESS,                devicePolicyManager.logoutUser(componentName));    }   ])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[REMOVE_USER]:[1]:method_text:[ion, it should still be allowed        // to remove a user.        assertTrue(removed);    }   ])', 1), ('([1:/com/android/cts/comp/provisioning/UserRestrictionTest.java]:[REMOVE_USER]:[1]:method_text:[veUserRestriction() {        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, true);    }   ])', 1), ('([1:/com/android/cts/comp/provisioning/UserRestrictionTest.java]:[REMOVE_USER]:[1]:method_text:[ction);        } else {            dpm.clearUserRestriction(admin, restriction);        }    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java]:[REMOVE_USER]:[1]:method_text:[etting all DO restrictions. Global restrictions should be     * visible on other users.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/users/UserReferenceTest.java]:[REMOVE_USER]:[1]:method_text:[       assertThrows(NeneException.class, () -> sTestApis.users().find(USER_ID).remove());    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/users/UserReferenceTest.java]:[REMOVE_USER]:[1]:method_text:[        user.remove();        assertThat(sTestApis.users().all()).doesNotContain(user);    }   ])', 1), ('([1:/com/android/cts/managedprofile/UserManagerTest.java]:[CREATE_USER]:[1]:method_text:[be run as the managed profile     *  by com.android.cts.devicepolicy.ManagedProfileTest     */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[CREATE_USER]:[1]:method_text:[ISALLOW_CONFIG_DATE_TIME,                    UserManager.DISALLOW_AIRPLANE_MODE            );   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[eturn (intent) -> user.userHandle().equals(intent.getParcelableExtra(Intent.EXTRA_USER));    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[ertThat(sActivityManager.startProfile(sDeviceState.workProfile().userHandle())).isTrue();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[sertThat(sActivityManager.stopProfile(sDeviceState.workProfile().userHandle())).isTrue();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[          sUserManager.isUserRunning(sDeviceState.workProfile().userHandle())).isFalse();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[           sUserManager.isUserRunning(sDeviceState.workProfile().userHandle())).isTrue();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[           () -> sActivityManager.startProfile(sDeviceState.workProfile().userHandle()));    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[            () -> sActivityManager.stopProfile(sDeviceState.workProfile().userHandle()));    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[         () -> sActivityManager.startProfile(sDeviceState.secondaryUser().userHandle()));    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[          () -> sActivityManager.stopProfile(sDeviceState.secondaryUser().userHandle()));    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[  assertThat(sUserManager.isUserRunning(sDeviceState.tvProfile().userHandle())).isTrue();    }   ])', 1), ('([1:/android/devicepolicy/cts/StartProfilesTest.java]:[CREATE_USER]:[1]:method_text:[     assertThat(sUserManager.isUserRunning(sDeviceState.tvProfile().userHandle())).isFalse();    }])', 1), ('([1:/android/media/cts/MediaCasTest.java]:[CREATE_USER]:[1]:method_text:[th the enumeration results, and all enumerated CA system ids can     * be instantiated.     */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java]:[REMOVE_USER]:[1]:method_text:[e that {@link UserManager} understands that it is applied but not as a base restriction.     */   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java]:[REMOVE_USER]:[1]:method_text:[abledRestrictions();    /**     * Test restrictions that should be enabled by default     */   ])', 1)]"	""	""	"[('REMOVE_USER', 24), ('CREATE_USER', 17)]"	"[('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testCannotRemoveUserIfRestrictionSet None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUserRestrictionLogged None]', 2), ('[com.android.cts.devicepolicy.DeviceOwnerTest testCreateAndManageUser_StopUser None]', 2), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testUserRestrictionSetOnParentLogged None]', 2), ('[android.devicepolicy.cts.StartProfilesTest isTrue None]', 2), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testRequestBugreportAvailableIfAffiliated None]', 2), ('[android.app.cts.ActivityManagerAppExitInfoTest testSecondaryUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser None]', 1), ('[com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_RemoveRestrictionSet None]', 1), ('[com.android.cts.devicepolicy.UserRestrictionsTest removeTestUsers None]', 1), ('[com.android.cts.comp.provisioning.UserRestrictionTest testAddDisallowRemoveUserRestriction None]', 1), ('[com.android.cts.comp.provisioning.UserRestrictionTest testClearDisallowRemoveUserRestriction None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.SecondaryProfileOwnerUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[com.android.cts.devicepolicy.UserRestrictionsTest isHeadlessSystemUserMode None]', 1), ('[test.java.com.android.bedstead.nene.users.UserReferenceTest remove_userDoesNotExist_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.users.UserReferenceTest remove_userExists_removesUser None]', 1), ('[com.android.cts.managedprofile.UserManagerTest testCreateProfile_managedProfile None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.devicepolicy.cts.StartProfilesTest TestApis None]', 1), ('[android.devicepolicy.cts.StartProfilesTest startProfile_broadcastIsReceived_profileIsStarted None]', 1), ('[android.devicepolicy.cts.StartProfilesTest stopProfile_profileIsStopped None]', 1), ('[android.devicepolicy.cts.StartProfilesTest startUser_immediatelyAfterStopped_profileIsStarted None]', 1), ('[android.devicepolicy.cts.StartProfilesTest startUser_userIsStopping_profileIsStarted None]', 1), ('[android.devicepolicy.cts.StartProfilesTest startProfile_withoutPermission_throwsException None]', 1), ('[android.devicepolicy.cts.StartProfilesTest stopProfile_withoutPermission_throwsException None]', 1), ('[android.devicepolicy.cts.StartProfilesTest startProfile_tvProfile_profileIsStarted None]', 1), ('[android.devicepolicy.cts.StartProfilesTest stopProfile_tvProfile_profileIsStopped None]', 1), ('[android.media.cts.MediaCasTest adoptShellPermissionIdentity None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest getDisallowedRestrictions None]', 1), ('[com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest getDisallowedRestrictions None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-11"	"9.9.3/C-1-11"	"09090300.670111"	"""C-1-11] MUST use the mandatorily supported ciphers, key lengths and modes."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"250:699468) 9.5  . Multi"	"9.5"	"C-2-1"	"9.5/C-2-1"	"09050000.670201"	"""C-2-1] MUST have separate and isolated shared application storage (a.k.a. /sdcard) directories for each user instance."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"19:170348) 2.2.7.3  . Hardware"	"2.2.7.3"	""	"2.2.7.3"	"02020703.48"	"""data-text=""2.2.7.3. Hardware"">2.2.7.3. Hardware If Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [7.1.1.1/H-1-1] MUST have screen resolution of at least 1080p. [7.1.1.3/H-1-1] MUST have screen density of at least 400 dpi. [7.6.1/H-1-1] MUST have at least 6 GB of physical memory. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [7.1.1.1/H-2-1] MUST have screen resolution of at least 1080p. [7.1.1.3/H-2-1] MUST have screen density of at least 400 dpi. [7.6.1/H-2-1] MUST have at least 6 GB of physical memory. <h4 id=""2274_performance"" """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS android.os.Build.VERSION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 13), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java', 8), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/UffdGc/src/android/os/cts/uffdgc/UserfaultfdTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationValuesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/sdkextensions/src/android/os/ext/cts/SdkExtensionsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreTrashedTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ProxyInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreMatchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkWatchlistTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/bootstats/src/android/bootstats/cts/BootStatsHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AlarmManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkStatsBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncoderColorAspectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_FilesTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src_target/com/android/test/usesnativesharedlibrary/LoadTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorUnitTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1)]"	"[('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 2), ('(2,VERSION_CODES,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CameraManagerTest.java)', 2), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreTrashedTest.java)', 1), ('(1,VERSION_CODES,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(14,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(1,VERSION_CODES,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java)', 1), ('(1,VERSION_CODES,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/EncryptionTest.java)', 1), ('(2,VERSION_CODES,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(2,android.os.Build.VERSION,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/ProxyInfoTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(4,VERSION_CODES,/android/app/cts/NotificationTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java)', 1), ('(2,VERSION_CODES,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,android.os.Build.VERSION,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreMatchTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkWatchlistTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_GenresTest.java)', 1), ('(7,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,VERSION_CODES,/android/bootstats/cts/BootStatsHostTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaCodecTest.java)', 1), ('(3,VERSION_CODES,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,android.os.Build.VERSION,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/AlarmManagerTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkStatsBinderTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(1,VERSION_CODES,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(1,VERSION_CODES,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/EncoderColorAspectsTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/VerifiedBootTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(1,VERSION_CODES,/android/scopedstorage/cts/ScopedStorageTest.java)', 1), ('(2,VERSION_CODES,/android/app/role/cts/RoleManagerTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_FilesTest.java)', 1), ('(2,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,VERSION_CODES,/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(7,VERSION_CODES,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonTest.java)', 1), ('(1,VERSION_CODES,_target/com/android/test/usesnativesharedlibrary/LoadTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(2,VERSION_CODES,/android/os/ext/cts/SdkExtensionsTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(9,VERSION_CODES,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,VERSION_CODES,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(2,VERSION_CODES,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/ExtractorUnitTest.java)', 1), ('(2,VERSION_CODES,/android/media/mediaparser/cts/MediaParserTest.java)', 1), ('(3,VERSION_CODES,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestXheAac.java)', 1)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[} finally {            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 4), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 3), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[    assertTrue(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 3), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[ This follows the Manage Channel     * command described in TS 102 221 Section 11.1.17.     */   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[r a logical channel and makes sure appropriate     * errors are returned from the UICC.     */   ])', 2), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[VERSION_CODES]:[1]:method_text:[  hardwareLevel != CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_GRANTED);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[withoutPermission(                        DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S));    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStoreTrashedTest.java]:[VERSION_CODES]:[1]:method_text:[meName);    }    /**     * Verify that we can trash and untrash an item that we own.     */   ])', 1), ('([1:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[VERSION_CODES]:[1]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/media/cts/DecoderTestAacFormat.java]:[VERSION_CODES]:[1]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[VERSION_CODES]:[1]:method_text:[     * Verify correct decoding of MPEG-4 AAC with output level normalization to -23dBFS.     */   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[VERSION_CODES]:[1]:method_text:[                      mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));        }    }   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[VERSION_CODES]:[1]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[;        } else {            mManager.setTestProviderEnabled(provider, enabled);        }    }}])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([3:/android/security/cts/EncryptionTest.java]:[VERSION_CODES]:[3]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[VERSION_CODES]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[android.os.Build.VERSION]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([1:/android/net/cts/ProxyInfoTest.java]:[VERSION_CODES]:[1]:method_text:[      proxy2.getExclusionList());        assertEquals(TEST_URI, proxy2.getPacFileUrl());    }   ])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[VERSION_CODES]:[1]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[   assertFalse(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 1), (""([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[VERSION_CODES]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[VERSION_CODES]:[1]:method_text:[    } catch (Exception ignore) {}    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[VERSION_CODES]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/os/cts/uffdgc/UserfaultfdTest.java]:[VERSION_CODES]:[2]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/android/os/cts/uffdgc/UserfaultfdTest.java]:[android.os.Build.VERSION]:[1]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[VERSION_CODES]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/media/MediaStoreMatchTest.java]:[VERSION_CODES]:[1]:method_text:[olumeName);        mExternalImages = MediaStore.Images.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/cts/NetworkWatchlistTest.java]:[VERSION_CODES]:[1]:method_text:[ager.getNetworkWatchlistConfigHash() correctly     * returns the hash of config we set.     */   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_GenresTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/bootstats/cts/BootStatsHostTest.java]:[VERSION_CODES]:[2]:method_text:[ = device;    }    @Override    public ITestDevice getDevice() {        return mDevice;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[VERSION_CODES]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> ShellCommand.builder(INVALID_COMMAND_LEGACY_OUTPUT).execute());    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[2]:method_text:[ACY_OUTPUT).execute())                .contains(INVALID_COMMAND_EXPECTED_LEGACY_OUTPUT);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[android.os.Build.VERSION]:[1]:method_text:[L_OUTPUT_FILTER = (output) -> false;    private static final String COMMAND = ""pm list users"";   ])', 1), ('([1:/android/app/cts/AlarmManagerTest.java]:[VERSION_CODES]:[1]:method_text:[                    ? nextAlarmClock.getTriggerTime()                    : null);        }    }}])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[VERSION_CODES]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[VERSION_CODES]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/net/cts/NetworkStatsBinderTest.java]:[VERSION_CODES]:[1]:method_text:[        if (match != null) return match.applicationInfo.uid;        return INVALID_UID;    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VERSION_CODES]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[VERSION_CODES]:[1]:method_text:[ event -> ""showSoftInput"".equals(event.getEventName()), TIMEOUT);            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[VERSION_CODES]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/mediav2/cts/EncoderColorAspectsTest.java]:[VERSION_CODES]:[1]:method_text:[pareParamList(exhaustiveArgsList, isEncoder, needAudio, needVideo, false);    }    @SmallTest   ])', 1), ('([2:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[2]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[1]:method_text:[ on the device"",                pm.hasSystemFeature(PackageManager.FEATURE_VERIFIED_BOOT));    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[VERSION_CODES]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[VERSION_CODES]:[1]:method_text:[ executeShellCommand(""am get-current-user"");        return Integer.parseInt(userId.trim());    }}])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[PP_PACKAGE_NAME);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[ification(true));    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/provider/cts/media/MediaStore_FilesTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[ing the specifier to set a band.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java]:[VERSION_CODES]:[1]:method_text:[l() {        return mContext.getApplicationContext().getApplicationInfo().targetSdkVersion;    }}])', 1), (""([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([2:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[2]:method_text:[alFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[lse)) {            fail(""Failed to cancel notification id="" + notificationId);        }    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[VERSION_CODES]:[1]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                        == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }}])', 1), ('([1:_target/com/android/test/usesnativesharedlibrary/LoadTest.java]:[VERSION_CODES]:[1]:method_text:[()));    }    /**     * Tests if libs listed in unavailable.txt are all non-loadable     */   ])', 1), ('([1:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[VERSION_CODES]:[1]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[ { }        }    }    /** Verifies that getExtensionVersion only return existing versions */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[versions yet.            assertEquals(0, SdkExtensions.getExtensionVersion(sdk));        }    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[VERSION_CODES]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[android.os.Build.VERSION]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[n(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> sTestApis.permissions().withoutPermission(INSTALL_PERMISSION));    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[2]:method_text:[ON_NOT_HELD_BY_SHELL_PRE_S))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[all the testapp without granting all runtime    //  permissions, add a test that this works pre-Q}])', 1), ('([1:/android/alarmmanager/cts/BasicApiTests.java]:[VERSION_CODES]:[1]:method_text:[   public void onAlarm() {            onReceive(null, new Intent(mTargetAction));        }    }}])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[VERSION_CODES]:[2]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[android.os.Build.VERSION]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/android/mediav2/cts/ExtractorUnitTest.java]:[VERSION_CODES]:[1]:method_text:[lic static class TestApi {        @Rule        public TestName testName = new TestName();       ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[public void setUp() {        assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);    }   ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[aParser.getLogSessionId()).isSameInstanceAs(logSessionId);        mediaParser.release();    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[sCoupledSinkSupportedAtSource());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[_SOURCE, info.getR2DeviceInfo());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java]:[VERSION_CODES]:[1]:method_text:[mVolumeName);        mExternalVideo = MediaStore.Video.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[VERSION_CODES]:[1]:method_text:[* Verify the correct decoding of USAC bitstreams with different MPEG-D DRC effect types.     */   ])', 1)]"	""	""	"[('VERSION_CODES', 120), ('android.os.Build.VERSION', 9)]"	"[('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 2), ('[android.location.cts.fine.LocationManagerFineTest currentTimeMillis None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccOpenLogicalChannelWithInvalidP2 None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel None]', 2), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testNoLegacyOnQ None]', 2), ('[android.os.cts.uffdgc.UserfaultfdTest isAutomotive None]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry None]', 2), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 2), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest dropShellPermissionIdentity None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability None]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testSetNotExistCertInstallerPackage None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssNavigationMessageCallback None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.net.cts.ProxyInfoTest testBuildPacProxy None]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testGnssNavigationMessageMandatoryFieldRanges None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_noConversationTitle None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withConversationTitle_legacy None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withoutConversationTitle_legacy None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSetOnServiceDeadCallback None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.net.cts.NetworkWatchlistTest isAtLeastP None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection None]', 1), ('[android.bootstats.cts.BootStatsHostTest testBootStats None]', 1), ('[android.app.cts.AlarmManagerTest testSetAlarmClock None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleWithoutFocusedEditorView None]', 1), ('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener None]', 1), ('[android.security.cts.VerifiedBootTest testVerifiedBootSupport None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.app.role.cts.RoleManagerTest cannotBypassRoleQualificationWithoutPermission None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testUserRejectionWithSpecificSsid None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact None]', 1), ('[com.android.cts.deviceadmin.DeviceAdminPasswordTest testResetPasswordDeprecated None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testAccuracyFields None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testLocationRegularFields None]', 1), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest testExtraLocationControllerPackage None]', 1), ('[android.app.cts.NotificationManagerTest testPostPCanToggleAlarmsMediaSystemTest None]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffects_ranking None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_cancelNotifications None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate None]', 1), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testBadArgument None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testValidValues None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withPermission_shellPermission_permissionIsGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_alreadyGranted_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest autoclose_withoutPermission_permissionIsGrantedAgain None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_installPermission_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_androidSAndAbove_restoresPreviousPermissionContext None]', 1), ('[android.alarmmanager.cts.BasicApiTests testSetAlarmClock None]', 1), ('[android.mediav2.cts.ExtractorUnitTest TestName None]', 1), ('[android.media.mediaparser.cts.MediaParserTest testLogSessionId None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiCoupledSink None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdR2Info None]', 1), ('[android.media.cts.DecoderTestXheAac isAlias None]', 1)]"
"273:756297) 9.11  . Keys and Credentials"	"9.11"	"C-1-6"	"9.11/C-1-6"	"09110000.670106"	"""C-1-6] MUST support IKeymasterDevice 4.0, IKeymasterDevice 4.1 or IKeyMintDevice version 1."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-9"	"7.4.2.4/C-1-9"	"07040204.670109"	"""C-1-9] MUST keep Passpoint configurations persistent across reboots."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-1-3"	"9.8.12/C-1-3"	"09081200.670103"	"""C-1-3] MUST NOT allow users to replace the MusicRecognitionManagerService or MusicRecognitionService with a user-installable application or service."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-6"	"9.9.3/C-1-6"	"09090300.670106"	"""C-1-6] MUST encrypt file names using AES-256-CBC-CTS or Adiantum."""	"Found reference in comments"	""	"AES CBC CTS"	""	""	""	""	*	""	""	2	"android.security.cts.MetadataEncryptionTest"	"testRequestBluetoothPermission30_Default() testRequestBluetoothPermission30_GrantLocation() testRequestBluetoothPermission31_Default() testRequestBluetoothPermission31_GrantNearby() testRequestBluetoothPermission31_GrantLocation() testRequestBluetoothPermission31_GrantNearby_GrantLocation() testRequestBluetoothPermissionNeverForLocation31_Default() testRequestBluetoothPermissionNeverForLocation31_GrantNearby() testRequestBluetoothPermissionNeverForLocation31_GrantLocation() testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation()"	"CtsSecurityHostTestCases"	"[('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 13), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 7), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/WhitelistTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/http/cts/ApacheHttpClientTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/RadioGroup_LayoutParamsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/CompilerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/DirectoryTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/health/cts/HealthStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSForEachTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/EventConnectionAPI30/src/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ScriptTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/Color_ColorLongTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/multiuser/src/android/multiuser/cts/SplitSystemUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ConnectivityManagerPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContextThemeWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PrecompiledLayoutTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/DecodeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/assist/src/android/assist/cts/FocusChangeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShapeTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/ValueAnimatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteWalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/FlagSecureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/InputDeviceEnabledTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_DefaultFocusHighlightTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/EcKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/LeadingMarginSpan_StandardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicConvolve5x5.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicLut.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/BatchUpdatesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestAcos.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/RadioAccessSpecifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/InstantAppsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/EmbossMaskFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/LteVopsSupportInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/AttachedContextActivityTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreTrashedTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/VoidPtr.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_SettingNotFoundExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/RatingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/XmlTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2019_2022.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/os/src/android/os/cts/QuiescentBootTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentViewTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/ActivityManagerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SceneTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/HardwareBitmapTests.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/preconditions/app/src/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/signature/tests/src/android/signature/cts/tests/BufferedReaderLineSpliteratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sample/src/android/sample/cts/SampleDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteExceptionTest.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,CTS,/android/security/cts/STKFrameworkTest.java)', 1), ('(2,CTS,/android/adb/cts/AdbHostTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,CTS,/android/app/cts/AliasActivityTest.java)', 1), ('(6,CTS,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(36,CTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,CTS,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,CTS,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,CTS,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,CTS,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,CTS,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,CTS,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(5,CTS,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/AffiliationTest.java)', 1), ('(17,CTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,CTS,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(4,CTS,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java)', 1), ('(8,CTS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,CTS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/renderscript/cts/CompilerTest.java)', 1), ('(1,CTS,/com/android/server/cts/device/statsdatom/DirectoryTests.java)', 1), ('(1,CTS,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,CTS,/android/media/cts/AudioMetadataTest.java)', 1), ('(1,CTS,/android/os/health/cts/HealthStatsTest.java)', 1), ('(1,CTS,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,CTS,/android/cts/rscpp/RSForEachTest.java)', 1), ('(6,CTS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(2,CTS,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(2,CTS,/android/renderscript/cts/ScriptTest.java)', 1), ('(1,CTS,/android/ndef/cts/NdefTest.java)', 1), ('(1,CTS,/android/graphics/cts/Color_ColorLongTest.java)', 1), ('(5,CTS,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,CTS,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(1,CTS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/permission/cts/ConnectivityManagerPermissionTest.java)', 1), ('(24,CTS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(164,CTS,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(1,CTS,/android/view/cts/ContextThemeWrapperTest.java)', 1), ('(6,CTS,/android/net/http/cts/ApacheHttpClientTest.java)', 1), ('(2,CTS,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(2,CTS,/android/view/cts/PrecompiledLayoutTest.java)', 1), ('(3,CTS,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,CTS,/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java)', 1), ('(2,CTS,/android/security/cts/DecodeTest.java)', 1), ('(1,CTS,/android/assist/cts/FocusChangeTest.java)', 1), ('(5,CTS,/android/uirendering/cts/testclasses/ShapeTests.java)', 1), ('(4,CTS,/android/view/cts/ActionModeTest.java)', 1), ('(2,CTS,/android/animation/cts/ValueAnimatorTest.java)', 1), ('(1,CTS,/android/content/res/cts/ConfigurationTest.java)', 1), ('(1,CTS,/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteWalTest.java)', 1), ('(19,CTS,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(1,CTS,/android/assist/cts/FlagSecureTest.java)', 1), ('(1,CTS,/android/view/cts/InputDeviceEnabledTest.java)', 1), ('(1,CTS,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,CTS,/android/view/cts/View_DefaultFocusHighlightTest.java)', 1), ('(1,CTS,/android/keystore/cts/EcKeyGenPerformanceTest.java)', 1), ('(4,CTS,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(1,CTS,/android/text/style/cts/LeadingMarginSpan_StandardTest.java)', 1), ('(1,CTS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(9,CTS,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicConvolve5x5.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java)', 1), ('(1,CTS,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicLut.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java)', 1), ('(7,CTS,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/BatchUpdatesTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestAcos.java)', 1), ('(3,CTS,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,CTS,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(1,CTS,/android/telephony/cts/RadioAccessSpecifierTest.java)', 1), ('(6,CTS,/android/security/cts/TestMedia.java)', 1), ('(1,CTS,/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java)', 1), ('(1,CTS,/android/alarmmanager/cts/InstantAppsTests.java)', 1), ('(1,CTS,/android/graphics/cts/EmbossMaskFilterTest.java)', 1), ('(1,CTS,/android/telephony/cts/LteVopsSupportInfoTest.java)', 1), ('(3,CTS,/android/net/wifi/nl80211/cts/PnoSettingsTest.java)', 1), ('(2,CTS,/android/widget/cts/RadioGroup_LayoutParamsTest.java)', 1), ('(6,CTS,/android/autofillservice/cts/AttachedContextActivityTest.java)', 1), ('(4,CTS,/android/provider/cts/media/MediaStoreTrashedTest.java)', 1), ('(1,CTS,/android/renderscript/cts/VoidPtr.java)', 1), ('(6,CTS,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(1,CTS,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(1,CTS,/android/provider/cts/settings/Settings_SettingNotFoundExceptionTest.java)', 1), ('(6,CTS,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/RatingTest.java)', 1), ('(1,CTS,/android/util/cts/XmlTest.java)', 1), ('(1,CTS,/android/security/cts/CVE_2019_2022.java)', 1), ('(1,CTS,/android/os/cts/QuiescentBootTests.java)', 1), ('(8,CTS,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(1,CTS,/android/fragment/cts/FragmentViewTests.java)', 1), ('(5,CTS,/com/android/server/cts/ActivityManagerIncidentTest.java)', 1), ('(1,CTS,/android/transition/cts/SceneTest.java)', 1), ('(7,CTS,/android/uirendering/cts/testclasses/HardwareBitmapTests.java)', 1), ('(1,CTS,/android/server/wm/WindowContextTests.java)', 1), ('(2,CTS,/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java)', 1), ('(3,CTS,/android/signature/cts/tests/BufferedReaderLineSpliteratorTest.java)', 1), ('(1,CTS,/android/sample/cts/SampleDeviceTest.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteExceptionTest.java)', 1), ('(17,CTS,/android/contentcaptureservice/cts/WhitelistTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[CTS]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([2:/android/adb/cts/AdbHostTest.java]:[CTS]:[2]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([3:/android/appsecurity/cts/LocationPolicyTest.java]:[CTS]:[3]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[CTS]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([6:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[CTS]:[6]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([32:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[32]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[ugmentedHelper.resetAugmentedService();        augmentedService.waitUntilDisconnected();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestNativeCospi.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[CTS]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/media/cts/ToneGeneratorTest.java]:[CTS]:[1]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[CTS]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[CTS]:[1]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([2:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[2]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[CTS]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[2]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([5:/android/content/cts/ClipDescriptionTest.java]:[CTS]:[5]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java]:[CTS]:[1]:method_text:[.app.appsearch.AppSearchManager;import org.junit.Test;public class AppSearchManagerCtsTest {   ])', 1), ('([1:/com/android/cts/deviceowner/AffiliationTest.java]:[CTS]:[1]:method_text:[_POLICY_SERVICE);        mAdminComponent = BasicAdminReceiver.getComponentName(context);    }   ])', 1), ('([17:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[CTS]:[17]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[CTS]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java]:[CTS]:[4]:method_text:[) throws Exception {        super.setUp();        mResources = mContext.getResources();    }   ])', 1), ('([7:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[7]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[CTS]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[CTS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), (""([1:/android/renderscript/cts/CompilerTest.java]:[CTS]:[1]:method_text:[ins symbols that can't be resolved at runtime,     * which should trigger an exception.     */   ])"", 1), ('([1:/com/android/server/cts/device/statsdatom/DirectoryTests.java]:[CTS]:[1]:method_text:[t.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class DirectoryTests {   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[CTS]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[CTS]:[1]:method_text:[a.BaseMap>        KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);   ])', 1), ('([1:/android/os/health/cts/HealthStatsTest.java]:[CTS]:[1]:method_text:["").longValue());    }    /**     * Tests parceling empty HealthStats.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[CTS]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/android/cts/rscpp/RSForEachTest.java]:[CTS]:[1]:method_text:[        System.loadLibrary(""rscpptest_jni"");    }    native boolean testForEach(String path);   ])', 1), ('([6:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[CTS]:[6]:method_text:[ConnectionTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[CTS]:[2]:method_text:[ org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)@SmallTestpublic class TaggingTest {   ])', 1), ('([2:/android/renderscript/cts/ScriptTest.java]:[CTS]:[2]:method_text:[mport android.renderscript.cts.ScriptC_negate;public class ScriptTest extends RSBaseCompute {   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[CTS]:[1]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/graphics/cts/Color_ColorLongTest.java]:[CTS]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class Color_ColorLongTest {   ])', 1), ('([5:/android/view/inspector/cts/WindowInspectorTest.java]:[CTS]:[5]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CTS]:[1]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[CTS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([1:/android/permission/cts/ConnectivityManagerPermissionTest.java]:[CTS]:[1]:method_text:[ <p>Tests Permission:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[4]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[3]:method_text:[  runShellCmd(""cmd blob_store clear-all-blobs"");        mContext.getFilesDir().delete();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[2]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([5:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[5]:method_text:[ 1111L, ""tag2"");            assertThat(blobHandle1).isNotEqualTo(blobHandle2);        }    }   ])', 1), ('([8:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[8]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), (""([100:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[100]:method_text:[     * no contacts if there are no starred or frequent contacts in the user's contacts.     */   ])"", 1), (""([7:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[7]:method_text:[s in the correct order if there are only starred contacts in the user's     * contacts.     */   ])"", 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[CONTENT_STREQUENT_URI, ids,                false, sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[oredValuesWithContactsFilter(Contacts.CONTENT_STREQUENT_URI, ids,                false);    }   ])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[6]:method_text:[NT_FILTER_URI}     * correctly filters the returned contacts with the given user input.     */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[ithContactsFilter(uri, ids, false,                sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[ld(),                STREQUENT_PROJECTION,                new long[]{ids[0]}        );    }   ])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[5]:method_text:[ntactsFilter(uri, mDataIds, false,                sContentValues[0], sContentValues[2]);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[4]:method_text:[ ranking order.        assertCursorStoredValuesWithContactsFilter(uri, mDataIds, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[      STREQUENT_PHONE_ONLY_PROJECTION,                new long[]{mDataIds[0]}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[   assertCursorStoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[StoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids,                true);    }   ])', 1), ('([26:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[26]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/android/view/cts/ContextThemeWrapperTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[5]:method_text:[id tearDown() throws Exception {        super.tearDown();        mWebServer.shutdown();    }   ])', 1), ('([1:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[1]:method_text:[ytesRead;            }        }        assertEquals(message, expectedNumBytes, numBytes);    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[CTS]:[2]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([2:/android/view/cts/PrecompiledLayoutTest.java]:[CTS]:[2]:method_text:[ make sure that we get equivalent layouts when    // inflated with and without precompilation.   ])', 1), ('([3:/android/security/net/config/cts/DownloadManagerTest.java]:[CTS]:[3]:method_text:[ength: 5\\r\\n\\r\\nhello"";    private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[CTS]:[1]:method_text:[ Exception {        super.setUp();        assumeTrue(supportsSplitScreenMultiWindow());    }   ])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[CTS]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1), ('([2:/android/security/cts/DecodeTest.java]:[CTS]:[2]:method_text:[. Instead, it should fail to     * decode.     */    @SecurityTest(minPatchLevel = ""2017-07"")   ])', 1), ('([1:/android/assist/cts/FocusChangeTest.java]:[CTS]:[1]:method_text:[espite the Assistant Firing""                    + Utils.TIMEOUT_MS + ""msec."");        }    }   ])', 1), ('([5:/android/uirendering/cts/testclasses/ShapeTests.java]:[CTS]:[5]:method_text:[h;@MediumTest@RunWith(AndroidJUnit4.class)public class ShapeTests extends ActivityTestBase {   ])', 1), ('([4:/android/view/cts/ActionModeTest.java]:[CTS]:[4]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[CTS]:[2]:method_text:[tatic void afterClass() {        ValueAnimator.setDurationScale(sPreviousAnimatorScale);    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[CTS]:[1]:method_text:[ation.NAVIGATION_NONAV;        mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java]:[CTS]:[1]:method_text:[t@RunWith(AndroidJUnit4.class)public class LayoutAnimationController_AnimationParametersTest {   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteWalTest.java]:[CTS]:[1]:method_text:[AL file size is bigger than the threshold, and make sure     * the file gets truncated.     */   ])', 1), ('([19:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[CTS]:[19]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/android/assist/cts/FlagSecureTest.java]:[CTS]:[1]:method_text:[rotected void customSetup() throws Exception {        startTestActivity(TEST_CASE_TYPE);    }   ])', 1), ('([1:/android/view/cts/InputDeviceEnabledTest.java]:[CTS]:[1]:method_text:[rgetContext().getSystemService(InputManager.class);        assertNotNull(mInputManager);    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CTS]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/view/cts/View_DefaultFocusHighlightTest.java]:[CTS]:[3]:method_text:[=            new ActivityTestRule<>(DefaultFocusHighlightCtsActivity.class);    @UiThreadTest   ])', 1), ('([1:/android/keystore/cts/EcKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[nceTest extends PerformanceTestBase {    final int[] SUPPORTED_CURVES = {224, 256, 384, 521};   ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[CTS]:[4]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([1:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[CTS]:[1]:method_text:[RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class LeadingMarginSpan_StandardTest {   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[CTS]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([9:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[CTS]:[9]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicConvolve5x5.java]:[CTS]:[1]:method_text:[, si, e, cf3, ""test convolve"", 3, w, h, sc);        si.destroy();        sr.destroy();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java]:[CTS]:[1]:method_text:[clear profile owner"", e.getMessage());            }        }        super.tearDown();    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[CTS]:[1]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicLut.java]:[CTS]:[1]:method_text:[.set_green(mGreen);        mScript.set_blue(mBlue);        mScript.set_alpha(mAlpha);    }   ])', 1), ('([1:/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java]:[CTS]:[1]:method_text:[able;import org.junit.Test;import java.util.Set;public class BatchResultCallbackCtsTest {   ])', 1), ('([7:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[CTS]:[7]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/autofillservice/cts/unittests/BatchUpdatesTest.java]:[CTS]:[1]:method_text:[tchUpdatesTest {    private final BatchUpdates.Builder mBuilder = new BatchUpdates.Builder();   ])', 1), ('([2:/android/renderscript/cts/generated/TestAcos.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([3:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[CTS]:[3]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([2:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[CTS]:[2]:method_text:[s);    @ClassRule @Rule    public static final DeviceState sDeviceState = new DeviceState();   ])', 1), ('([1:/android/telephony/cts/RadioAccessSpecifierTest.java]:[CTS]:[1]:method_text:[elephony.RadioAccessSpecifier;import org.junit.Test;public class RadioAccessSpecifierTest {   ])', 1), ('([3:/android/security/cts/TestMedia.java]:[CTS]:[3]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2018-10"")   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[CTS]:[1]:method_text:[* Vulnerability Behaviour: SIGSEGV in self     **/    @SecurityTest(minPatchLevel = ""2017-06"")   ])', 1), ('([2:/android/security/cts/TestMedia.java]:[CTS]:[2]:method_text:[ test methods     ******************************************************************************/}])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[CTS]:[1]:method_text:[(                        EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);    }   ])', 1), ('([1:/android/alarmmanager/cts/InstantAppsTests.java]:[CTS]:[1]:method_text:[0L)                .with(""min_window"", 0L)                .commitAndAwaitPropagation();    }   ])', 1), ('([1:/android/graphics/cts/EmbossMaskFilterTest.java]:[CTS]:[1]:method_text:[ static final int CENTER_Y = BITMAP_HEIGHT / 2;    private static final int STROKE_WIDTH = 10;   ])', 1), ('([1:/android/telephony/cts/LteVopsSupportInfoTest.java]:[CTS]:[1]:method_text:[id.telephony.LteVopsSupportInfo;import org.junit.Test;public class LteVopsSupportInfoTest {   ])', 1), ('([3:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[CTS]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[CTS]:[1]:method_text:[, int heightAttr) {            super.setBaseAttributes(a, widthAttr, heightAttr);        }    }}])', 1), ('([6:/android/autofillservice/cts/AttachedContextActivityTest.java]:[CTS]:[6]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 1), ('([4:/android/provider/cts/media/MediaStoreTrashedTest.java]:[CTS]:[4]:method_text:[meName);    }    /**     * Verify that we can trash and untrash an item that we own.     */   ])', 1), (""([1:/android/renderscript/cts/VoidPtr.java]:[CTS]:[1]:method_text:[    * is only of type 'void*'     *     * This test runs for an allocation of type int     */   ])"", 1), ('([3:/android/dumpsys/cts/StoragedDumpsysTest.java]:[CTS]:[3]:method_text:[s the output of ""dumpsys storaged --force --hours 0.01"".     *     * @throws Exception     */   ])', 1), ('([3:/android/dumpsys/cts/StoragedDumpsysTest.java]:[CTS]:[3]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([1:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[CTS]:[1]:method_text:[r listener to disconnect        assertTrue(mListener == null || !mListener.isConnected);    }   ])', 1), ('([1:/android/provider/cts/settings/Settings_SettingNotFoundExceptionTest.java]:[CTS]:[1]:method_text:[ner.RunWith;@RunWith(AndroidJUnit4.class)public class Settings_SettingNotFoundExceptionTest {   ])', 1), ('([6:/android/permission/cts/OneTimePermissionTest.java]:[CTS]:[6]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([1:/android/media/cts/RatingTest.java]:[CTS]:[1]:method_text:[le */@NonMediaMainlineTest@SmallTest@RunWith(AndroidJUnit4.class)public class RatingTest {   ])', 1), ('([1:/android/util/cts/XmlTest.java]:[CTS]:[1]:method_text:[ST + ""><"" + TAG_SON + "" "" + ATT_NAME + ""=\\"""" + STR_ABC            + ""\\""/></"" + TAG_TEST + "">"";   ])', 1), ('([1:/android/security/cts/CVE_2019_2022.java]:[CTS]:[1]:method_text:[tyTestCase {    /**     * b/120506143     * Vulnerability Behaviour: SIGSEGV in self     */   ])', 1), ('([1:/android/os/cts/QuiescentBootTests.java]:[CTS]:[1]:method_text:[RE_LEANBACK_ONLY)) {            mDevice.executeShellCommand(CMD_INPUT_WAKEUP);        }    }   ])', 1), ('([8:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[CTS]:[8]:method_text:[nostic service and set it up.        mAccountManager = AccountManager.get(getContext());    }   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[CTS]:[1]:method_text:[ds the Views in the proper order. Popping the back stack    // should remove the correct Views.   ])', 1), ('([5:/com/android/server/cts/ActivityManagerIncidentTest.java]:[CTS]:[5]:method_text:[ic final int SYSTEM_UID = 1000;    /**     * Tests activity manager dumps broadcasts.     */   ])', 1), ('([1:/android/transition/cts/SceneTest.java]:[CTS]:[1]:method_text:[aseTransitionTest {    /**     * Test Scene(ViewGroup) with enterAction and exitAction     */   ])', 1), ('([7:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[CTS]:[7]:method_text:[    }    @Before    public void setup() {        mRes = getActivity().getResources();    }   ])', 1), ('([1:/android/server/wm/WindowContextTests.java]:[CTS]:[1]:method_text:[indowContextTests */@Presubmitpublic class WindowContextTests extends WindowContextTestBase {   ])', 1), ('([2:/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java]:[CTS]:[2]:method_text:[;    }    /**     * Test if device has a valid phone number     * @throws Exception     */   ])', 1), ('([3:/android/signature/cts/tests/BufferedReaderLineSpliteratorTest.java]:[CTS]:[3]:method_text:[(JUnit4.class)public class BufferedReaderLineSpliteratorTest extends LineSpliteratorTestBase {   ])', 1), ('([1:/android/sample/cts/SampleDeviceTest.java]:[CTS]:[1]:method_text:[preferences and asserts they can no longer be retrieved.     *     * @throws Exception     */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteExceptionTest.java]:[CTS]:[1]:method_text:[import android.test.AndroidTestCase;public class SQLiteExceptionTest extends AndroidTestCase {   ])', 1), ('([8:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[8]:method_text:[s AbstractContentCaptureIntegrationActivityLessTest {    @Ignore(""will be whitelisted \'lite\'"")   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[1]:method_text:[VITIES);        assertNotWhitelisted(service);    }    @Ignore(""will be whitelisted \'lite\'"")   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[1]:method_text:[e = enableService(toSet(""not.me""), NO_ACTIVITIES);        assertNotWhitelisted(service);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[1]:method_text:[ntName.createRelative(MY_PACKAGE, "".who.cares"")));        assertNotWhitelisted(service);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[1]:method_text:[ce = enableService(toSet(MY_PACKAGE), NO_ACTIVITIES);        assertWhitelisted(service);    }   ])', 1), ('([1:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[1]:method_text:[         toSet(OutOfProcessActivity.COMPONENT_NAME));        assertWhitelisted(service);    }   ])', 1), ('([4:/android/contentcaptureservice/cts/WhitelistTest.java]:[CTS]:[4]:method_text:[ssionEvents(true); //            OutOfProcessActivity.killOutOfProcessActivity();        }    }}])', 1)]"	""	""	"[('CTS', 249)]"	"[('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testServiceLifecycle None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_countLimitExceeded None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleEquality None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_noStarredOrFrequents None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_frequentsOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredAndFrequentsInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_withFilter None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnlyFrequentsOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_noFrequentsReturnsEmptyCursor None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_CorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection None]', 1), ('[android.net.http.cts.ApacheHttpClientTest testExecute None]', 1), ('[android.database.sqlite.cts.SQLiteWalTest exists None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.renderscript.cts.IntrinsicConvolve5x5 finish None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.renderscript.cts.IntrinsicLut createTest None]', 1), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9472 None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9527 None]', 1), ('[android.alarmmanager.cts.InstantAppsTests isInstantApp None]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks None]', 1), ('[android.widget.cts.RadioGroup_LayoutParamsTest testSetBaseAttributes None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[android.sample.cts.SampleDeviceTest SampleDeviceTest None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testNothingWhitelisted None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testNotWhitelisted_byPackage None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testNotWhitelisted_byActivity None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testWhitelisted_byPackage None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testWhitelisted_byActivity None]', 1), ('[android.contentcaptureservice.cts.WhitelistTest testRinseAndRepeat None]', 1)]"
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-8"	"2.2.7.1/H-1-8"	"02020701.720108"	"""5.1/H-1-8] MUST have a codec initialization latency of 50 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load.Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. && 5.1/H-1-8] MUST have a codec initialization latency of 50 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load.Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. | 5.1/H-1-8] MUST have a codec initialization latency of 40 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization."""	""	""	"load.Load"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-6"	"2.2.7.1/H-1-6"	"02020701.720106"	"""5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p@30 fps resolution. && 5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p@30 fps resolution. | 5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p@30fps resolution. *Only 2 instances are required if VP9 codec is present."""	""	""	"VP9 AVC HEVC"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AdaptivePlaybackTest.java', 27), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EncodeDecodeTest.java', 18), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 6), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 5), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderConformanceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 3), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ThumbnailUtilsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecUnitTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/mediastress/src/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecUnitTest.java', 1)]"	"[('(3,VP9,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 2), ('(1,HEVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 2), ('(1,AVC,/android/mediav2/cts/CodecUnitTest.java)', 2), ('(6,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,VP9,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,HEVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(8,VP9,/android/media/cts/DecoderConformanceTest.java)', 1), ('(8,AVC,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(3,VP9,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,AVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,HEVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,HEVC,/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java)', 1), ('(7,AVC,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 1), ('(11,AVC,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(1,HEVC,/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java)', 1), ('(33,VP9,/android/media/cts/DecodeAccuracyTest.java)', 1), ('(3,HEVC,/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java)', 1), ('(26,AVC,/android/media/cts/EncodeDecodeTest.java)', 1), ('(19,AVC,/android/media/cts/MediaCodecTest.java)', 1), ('(7,VP9,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(13,AVC,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(5,HEVC,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,HEVC,/android/media/cts/ThumbnailUtilsTest.java)', 1), ('(38,AVC,/android/media/cts/MediaRecorderTest.java)', 1), ('(40,VP9,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(1,AVC,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(40,HEVC,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(8,AVC,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(9,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(7,VP9,/android/mediav2/cts/ExtractorTest.java)', 1), ('(11,AVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(7,HEVC,/android/mediav2/cts/ExtractorTest.java)', 1)]"	"[('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, false, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, true, false);    }   ])', 3), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[ mime,            String testFile, String muxFile, int bitrate, int framerate);    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[HEVC]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AVC]:[1]:method_text:[    } catch (IllegalStateException e) {                // expected            }        }       ])', 2), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[sTest(""hls_variant/index.m3u8"", 60 * 1000, LOCAL_HLS_BITS_PER_MS, false /*isAudioOnly*/);    }   ])', 2), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[GHT_CENC, false /* scrambled */,            MediaDrm.KEY_TYPE_STREAMING);    }    @Presubmit   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[Mime, mInpPrefix + mTestFile,                    tmpPath, mBitrate, mFrameRate));        }    }}])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[AVC]:[2]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[         }            }        }    }    /**     * Test VP9 decoders from vendor.     */   ])', 1), (""([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[O_VP9, false /* isGoog */);    }    /**     * Test Google's VP9 decoder from libvpx.     */   ])"", 1), ('([2:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[2]:method_text:[s Exception {        decodeTestVectors(MediaFormat.MIMETYPE_VIDEO_VP9, true /* isGoog */);    }}])', 1), ('([8:/android/hardware/camera2/cts/RecordingTest.java]:[AVC]:[8]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[VP9]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[AVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[HEVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java]:[HEVC]:[3]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([7:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AVC]:[7]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[fig.getValue(HTTP_H264_BASE_AAC_VIDEO_1_KEY);        playVideoTest(urlString, 640, 360);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   playVideoTest(urlString, 640, 360);    }    // Streaming HLS video downloaded from YouTube   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   localHlsTest(""audio_only/index.m3u8"", 60 * 1000, -1, true /*isAudioOnly*/);        }    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[2]:method_text:[000, -1, false /*isAudioOnly*/);        }    }    // Streaming audio from local HTTP server   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[ // skip        }        localHlsTest(""hls.m3u8"", false, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", true, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", false, true, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[c void quit() {            mLooper.quit();            mMediaPlayer.release();        }    }   ])', 1), ('([1:/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java]:[HEVC]:[1]:method_text:[""bbb_full.ffmpeg.1280x720.mp4.libx265_1140kbps_30fps.libfaac_stereo_128kbps_48000Hz.mp4""    };   ])', 1), ('([33:/android/media/cts/DecodeAccuracyTest.java]:[VP9]:[33]:method_text:[ DecodeAccuracyTest(String testname, String fileName) {        this.fileName = fileName;    }   ])', 1), ('([3:/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java]:[HEVC]:[3]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([5:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[5]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[76, 144, 1000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[20, 240, 2000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 144, 1000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 240, 2000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[of byte[] buffers and decoded into Surfaces.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([4:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[4]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[AVC]:[2]:method_text:[ createInputSurface() with a non-Surface color format is not required to throw exception     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[t mMaxW;        public int mMaxH;        public int mFps;        public int mBitRate;    };   ])', 1), ('([14:/android/media/cts/MediaCodecTest.java]:[AVC]:[14]:method_text:[ception     * <br> getInputBuffer() after the failed queueSecureInputBuffer() succeeds.     */   ])', 1), (""([7:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[VP9]:[7]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), (""([13:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[AVC]:[13]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), (""([5:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[HEVC]:[5]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/ThumbnailUtilsTest.java]:[HEVC]:[1]:method_text:[tents(mDir);    }    @After    public void tearDown() {        deleteContents(mDir);    }   ])', 1), ('([1:/android/media/cts/ThumbnailUtilsTest.java]:[HEVC]:[1]:method_text:[mageThumbnail(file, TEST_SIZES[0], null);        assertOrientationForThumbnail(bitmap);    }   ])', 1), ('([2:/android/media/cts/MediaRecorderTest.java]:[AVC]:[2]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([6:/android/media/cts/MediaRecorderTest.java]:[AVC]:[6]:method_text:[         encSurface.release();            encSurface = null;        }        return 1;    }   ])', 1), ('([29:/android/media/cts/MediaRecorderTest.java]:[AVC]:[29]:method_text:[) {            MediaUtils.skipTest(""VideoCapabilities or surface not found"");        }    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[AVC]:[1]:method_text:[boolean hasH264() {        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_VIDEO_AVC);    }   ])', 1), ('([16:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[16]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveEarlyEos()   { ex(VP9(),   adaptiveEarlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveEosFlushSeek()   { ex(VP9(),   adaptiveEosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSkipAhead()   { ex(VP9(),   adaptiveSkipAhead); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSkipBack()   { ex(VP9(),   adaptiveSkipBack); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveReconfigDrc()   { ex(VP9(),   adaptiveReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSmallReconfigDrc()   { ex(VP9(),   adaptiveSmallReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveDrc()  { ex(VP9(),  adaptiveDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveDrcEarlyEos()  { ex(VP9(),  new AdaptiveDrcEarlyEosTest()); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSmallDrc()   { ex(VP9(),   adaptiveSmallDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_earlyEos()   { ex(VP9(),   earlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_eosFlushSeek()   { ex(VP9(),   eosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_flushConfigureDrc()   { ex(VP9(),   flushConfigureDrc); }    ])', 1), ('([1:/android/media/cts/AdaptivePlaybackTest.java]:[AVC]:[1]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([16:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[16]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveEarlyEos()  { ex(HEVC(),  adaptiveEarlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveEosFlushSeek()  { ex(HEVC(),  adaptiveEosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSkipAhead()  { ex(HEVC(),  adaptiveSkipAhead); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSkipBack()  { ex(HEVC(),  adaptiveSkipBack); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveReconfigDrc()  { ex(HEVC(),  adaptiveReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSmallReconfigDrc()  { ex(HEVC(),  adaptiveSmallReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveDrc() { ex(HEVC(), adaptiveDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveDrcEarlyEos() { ex(HEVC(), new AdaptiveDrcEarlyEosTest()); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSmallDrc()  { ex(HEVC(),  adaptiveSmallDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_earlyEos()  { ex(HEVC(),  earlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_eosFlushSeek()  { ex(HEVC(),  eosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_flushConfigureDrc()  { ex(HEVC(),  flushConfigureDrc); }    ])', 1), ('([2:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[2]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[ + key + "", value="" + keyStatus.get(key));        }        return true;    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[NC, VIDEO_HEIGHT_CENC, false /* scrambled */,                MediaDrm.KEY_TYPE_OFFLINE);    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[TS, VIDEO_HEIGHT_MPEG2TS, true /* scrambled */,            MediaDrm.KEY_TYPE_STREAMING);    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[on e) {            throw new Error(e.getMessage() + ""-"" + key);        }    }    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[pPrefix + mTestFile, tmpPath,                            mBitrate, mFrameRate));        }    }}])', 1), ('([9:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[9]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[4]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([7:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[7]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1)]"	""	""	"[('AVC', 58), ('VP9', 29), ('HEVC', 26)]"	"[('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest testEncodeDecodeAccuracyRGB None]', 3), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 3), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 3), ('[android.media.cts.AdaptivePlaybackTest EarlyEosTest None]', 3), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 3), ('[android.mediav2.cts.ExtractorTest isClosed None]', 3), ('[android.mediav2.cts.ExtractorTest testDataSourceNative None]', 3), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurface None]', 2), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurfaceNative None]', 2), ('[android.mediav2.cts.CodecUnitTest TestApi None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Other None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Goog None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video1 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video2 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHLS None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsWithHeadersCookies None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_audio_only_overridable None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_unmuxed_1500k None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStream None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithQueryString None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithRedirect None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithTimedId3 None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBuffer720p None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.MediaCodecTest testException None]', 1), ('[android.media.cts.MediaCodecTest testAsyncStopAndReset None]', 1), ('[android.media.cts.MediaCodecTest testConcurrentAudioVideoEncodings None]', 1), ('[android.media.cts.MediaCodecTest testCryptoInfoPattern None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testSetMaxFileSize None]', 1), ('[android.media.cts.MediaRecorderTest testProfileAvcBaselineLevel1 None]', 1), ('[android.media.cts.MediaRecorderTest testPersistentSurfaceRecordingTimeLapse None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveEosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSkipAhead None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSkipBack None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSmallReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveDrcEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSmallDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_earlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_eosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_flushConfigureDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveEosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSkipAhead None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSkipBack None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSmallReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveDrcEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSmallDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_earlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_eosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_flushConfigureDrc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testReleaseOfflineLicense None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc2 None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackOfflineCenc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackMpeg2ts None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testPlaybackMpeg2ts None]', 1)]"
"206:607824) 7.4.3  . Bluetooth"	"7.4.3"	"C-6-2"	"7.4.3/C-6-2"	"07040300.670602"	"""C-6-2] MUST gate Bluetooth access behind the android.permission.ACCESS_FINE_LOCATION. <h4 id=""744_near-field_communications"" """	""	""	"ACCESS_FINE_LOCATION android.permission.ACCESS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 13), ('/home/gpoor/cts-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/BackgroundPermissionsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesRenouncePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/PermissionMaxSdkVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/UidAtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BluetoothLeScanTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/packages/PackageTest.java', 1)]"	"[('(1,ACCESS_FINE_LOCATION,/android/telephony/cts/TelephonyManagerTest.java)', 2), ('(3,ACCESS_FINE_LOCATION,/android/permission/cts/OneTimePermissionTest.java)', 2), ('(1,android.permission.ACCESS,/android/appsecurity/cts/EphemeralTest.java)', 2), ('(1,android.permission.ACCESS,/android/content/pm/cts/PackageManagerTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java)', 2), ('(6,ACCESS_FINE_LOCATION,/android/permission2/cts/RestrictedPermissionsTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/carrierapi/cts/NetworkScanApiTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/permission/cts/LocationAccessCheckTest.java)', 2), ('(2,android.permission.ACCESS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(20,ACCESS_FINE_LOCATION,/android/backup/cts/PermissionTest.java)', 1), ('(5,ACCESS_FINE_LOCATION,/android/permission/cts/BackgroundPermissionsTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/com/android/cts/deviceandprofileowner/PermissionsTest.java)', 1), ('(1,android.permission.ACCESS,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(8,ACCESS_FINE_LOCATION,/android/telephony/cts/TelephonyLocationTests.java)', 1), ('(1,ACCESS_FINE_LOCATION,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(1,android.permission.ACCESS,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(10,ACCESS_FINE_LOCATION,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(2,android.permission.ACCESS,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(4,android.permission.ACCESS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,android.permission.ACCESS,/android/permission2/cts/PermissionMaxSdkVersionTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(8,ACCESS_FINE_LOCATION,/android/permission/cts/NearbyDevicesPermissionTest.java)', 1), ('(2,ACCESS_FINE_LOCATION,/android/permission/cts/NearbyDevicesRenouncePermissionTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/cts/statsd/atom/UidAtomTests.java)', 1), ('(13,ACCESS_FINE_LOCATION,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(11,ACCESS_FINE_LOCATION,/android/permission/cts/PermissionControllerTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/bluetooth/cts/BluetoothLeScanTest.java)', 1), ('(1,android.permission.ACCESS,/test/java/com/android/bedstead/nene/packages/PackageTest.java)', 1)]"	"[('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[       ACCESS_BACKGROUND_LOCATION)));        assertAllRestrictedPermissionWhitelisted();    }   ])', 4), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ions.singleton(ACCESS_FINE_LOCATION));        assertNoRestrictedPermissionWhitelisted();    }   ])', 4), ('([3:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[3]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 3), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 2), ('([2:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 2), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[TION)));    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 2), ('([1:/android/appsecurity/cts/EphemeralTest.java]:[android.permission.ACCESS]:[1]:method_text:[adPhoneNumbersPermission"");    }    /** Test for android.permission.ACCESS_COARSE_LOCATION */   ])', 2), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[lse);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ion);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[, ACCESS_FINE_LOCATION);        retrieveConnectionInfoFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.permission.ACCESS]:[1]:method_text:[als(PACKAGE_NAME, receiver.packageName);    }    // Tests that other packages can be queried.   ])', 2), (""([2:/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[h (SecurityException ignore) {              // That's what we want!            }        }    }}])"", 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[c static void tearDownOnce() {        getContext().unregisterReceiver(sCommandReceiver);    }   ])', 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[umentation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }}])', 2), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[EST_APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FULL);    }   ])', 2), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[PP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.EXCEPTION);    }   ])', 2), ('([2:/android/telephony/ims/cts/EabControllerTest.java]:[android.permission.ACCESS]:[2]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[App(APP22);    }    /**     * Test backup and restore of regular runtime permission.     */   ])', 1), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[  });    }    /**     * Test backup and restore of pre-M regular runtime permission.     */   ])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[INE_LOCATION));        });    }    /**     * Restore if the permission was reviewed     */   ])', 1), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[ app));        } catch (Exception e) {            throw new RuntimeException(e);        }    }}])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[mation();    @After    public void uninstallTestApp() {        uninstallApp(APP_PKG);    }   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ Make sure location switch-op is set if fine location with background access is granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[    * Make sure location switch-op is set if fine and coarse location access is granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[n switch-op is set if fine and coarse location with background access is     * granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[).that(                getAppOp(APP_PKG, ACCESS_COARSE_LOCATION)).isEqualTo(MODE_ALLOWED));    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[           return PERMISSION_DENIED_APP_OP;        }        return PERMISSION_GRANTED;    }   ])', 1), ('([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[android.permission.ACCESS]:[1]:method_text:[      getDevice().uninstallPackage(MULTIUSER_PKG);        wipePrimaryExternalStorage();    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AGE, cellLocationAccess,                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[_LOCATION);                },                Manifest.permission.ACCESS_FINE_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[permission.ACCESS_COARSE_LOCATION);        }, Manifest.permission.ACCESS_FINE_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[tOperatorAlphaShort()));        assertTrue(TextUtils.isEmpty(state.getOperatorNumeric()));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[int newUserId = newUsers.get(0);        assertFalse(getDevice().isUserRunning(newUserId));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[android.permission.ACCESS]:[1]:method_text:[int newUserId = newUsers.get(0);        assertFalse(getDevice().isUserRunning(newUserId));    }}])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_CONNECTION_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[android.permission.ACCESS]:[2]:method_text:[remove request disallowed status: "" + e);        }        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[android.permission.ACCESS]:[2]:method_text:[use it means the permission check passed.        }        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[android.permission.ACCESS]:[2]:method_text:[   } catch (ImsException e) {            fail(""requestAvailability failed "" + e);        }    }}])', 1), ('([1:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[android.permission.ACCESS]:[1]:method_text:[ set to a previous API level,     * the permission is not being granted.     */    @SmallTest   ])', 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[sTrue();    }    private interface Condition {        boolean isTrue() throws Exception;    }}])', 1), ('([2:/android/carrierapi/cts/NetworkScanApiTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[Specifier;    }    /**     * Tests that the device properly requests a network scan.     */   ])', 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[efore    @After    public void uninstallTestApp() {        uninstallApp(TEST_APP_PKG);    }   ])', 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FILTERED);    }   ])', 1), (""([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[uetooth     * scan results; they'd always need to involve the user to gain permissions.     */   ])"", 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[               + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[Unbind() throws Throwable {        unbindService();        getNotification(true, true);    }   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ROUND_LOCATION);        accessLocation();        assertNotNull(getNotification(true));    }   ])', 1), ('([1:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[teCounts() {        mLocationNoteCount = 0;        mScanNoteCount = 0;    }    @AppModeFull   ])', 1), ('([1:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[              + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}])', 1), ('([1:/android/cts/statsd/atom/UidAtomTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[     }            }        }        assertThat(verifiedKnowPermissionState).isTrue();    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[gServiceAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[gActivityAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[NAME, ACCESS_FINE_LOCATION);        retrieveTransportInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([3:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[3]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ring>> result = revokePermissions(request, false);        assertThat(result).isEmpty();    }   ])', 1), ('([2:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[CCESS_FINE_LOCATION,                ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[LER_POLICY_VIOLATION, sContext.getMainExecutor()));        assertThat(result).isEmpty();    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[         singletonList(ACCESS_FINE_LOCATION));        revokePermissions(request, true);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[and after                    assertThat(numApps.get()).isAtLeast(1);                });    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ontroller.countPermissionApps(singletonList(ACCESS_FINE_LOCATION), -1, (n) -> { }, null);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[        sController.countPermissionApps(singletonList(ACCESS_FINE_LOCATION), 0, null, null);    }}])', 1), ('([2:/android/carrierapi/cts/NetworkScanApiTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[ radioAccessSpecifier;    }    /** Tests that the device properly requests a network scan. */   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[    @After    public void locationUnbind() throws Throwable {        unbindService();    }   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[otification(true)), EXPECTED_TIMEOUT_MILLIS);    }    @SystemUserOnly(reason = ""b/172259935"")   ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeScanTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[t case for BLE scans. Checks BLE scan timestamp is within correct range.     */    @MediumTest   ])', 1), ('([1:/test/java/com/android/bedstead/nene/packages/PackageTest.java]:[android.permission.ACCESS]:[1]:method_text:[ntedContext();    private static final UserReference sUser = sTestApis.users().instrumented();   ])', 1)]"	""	""	"[('ACCESS_FINE_LOCATION', 95), ('android.permission.ACCESS', 12)]"	"[('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs None]', 2), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart None]', 2), ('[android.appsecurity.cts.EphemeralTest testReadPhoneNumbersPermission None]', 2), ('[com.android.cts.devicepolicy.DeviceOwnerTest testWifiNetworkConfigurationWithoutFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.content.pm.cts.PackageManagerTest testGetInstalledPackages None]', 2), ('[android.appsecurity.cts.locationpolicy.LocationPolicyTest testLocationPolicyPermissions None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall29 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall29 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall22 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall22 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest isTrue None]', 2), ('[android.permission.cts.LocationAccessCheckTest getPermissionControllerPackageName None]', 2), ('[android.permission.cts.LocationAccessCheckTest notificationIsShownAgainAfterClear None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities None]', 1), ('[android.backup.cts.PermissionTest testGrantDeniedRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantDeniedRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testNoTriStateRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testNoTriStateRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundAndBackgroundRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundAndBackgroundRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testDelayedRestore None]', 1), ('[android.permission.cts.BackgroundPermissionsTest uninstallTestApp None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfOnlyFineLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineAndBgLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineAndCoarseLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineCoarseAndBgLocPermIsGranted None]', 1), ('[com.android.cts.deviceandprofileowner.PermissionsTest PermissionBroadcastReceiver None]', 1), ('[android.telephony.cts.TelephonyLocationTests testCellLocationFinePermission None]', 1), ('[android.telephony.cts.TelephonyLocationTests testServiceStateLocationSanitization None]', 1), ('[android.telephony.cts.TelephonyLocationTests testServiceStateListeningWithoutPermissions None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28ServiceStateListeningWithoutPermissions None]', 1), ('[android.telephony.cts.TelephonyLocationTests testRegistryPermissionsForCellLocation None]', 1), ('[android.telephony.cts.TelephonyLocationTests testRegistryPermissionsForCellInfo None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28CellLocation None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28CellInfoUpdate None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishWithAuthorizedErrorResponse None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testMethodPermissions None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testReceivingEmptyPidfXml None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_Doze None]', 1), ('[android.carrierapi.cts.NetworkScanApiTest adoptShellPermissionIdentity None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest isEnabled None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission30_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission31_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission31_GrantNearby_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermissionNeverForLocation31_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission_Upgrade None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission_Downgrade None]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest isEnabled None]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest enableTestMode None]', 1), ('[android.cts.statsd.atom.UidAtomTests testDangerousPermissionState None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsDoNotAlreadyRevokedPermission None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsDryRunForegroundPermission None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsPolicyViolationFromWrongPackage None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsWithNullPkg None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsGranted None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsInvalidFlags None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsNullCallback None]', 1), ('[android.carrierapi.cts.NetworkScanApiTest werePreconditionsSatisfied None]', 1), ('[android.bluetooth.cts.BluetoothLeScanTest isEnabled None]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageTest TestApis None]', 1)]"
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-1"	"3.18/C-0-1"	"03180000.670001"	"""C-0-1] MUST be capable of installing and running Android “.apk” files as generated by the “aapt” tool included in the official Android SDK. As the above requirement may be challenging, device implementations are RECOMMENDED to use the AOSP reference implementation&#39;s package management system. Device implementations: """	""	""	"RECOMMENDED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1)]"	"[('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 2), ('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 2), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 2), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 2), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1)]"	"[('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 2), ('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 2), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 2), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 2), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 2), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 2), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1)]"	""	""	"[('RECOMMENDED', 19)]"	"[('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled None]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations None]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled None]', 1)]"
""	"7.1.4.1"	"A-0-3"	"7.1.4.1/A-0-3"	"07010401.650003"	""">7.1.4.1/A-0-3] MUST include Vulkan loader and export all symbols. If Automotive device implementations include a 3-axis accelerometer, they: [<a href=""#7_3_sensors"""""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"266:737364) 9.8.13  . SensorPrivacyManager"	"9.8.13"	"C-1-1"	"9.8.13/C-1-1"	"09081300.670101"	"""C-1-1] MUST accurately return &#39;true&#39; for the relevant supportsSensorToggle() API method."""	""	""	"supportsSensorToggle()"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-6"	"2.2.7.2/H-1-6"	"02020702.720106"	"""7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 600ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  && 7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 600ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | 7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 500 ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras."""	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS android.os.Build.VERSION ITS CTS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 19), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 14), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 11), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/multiuser/src/android/multiuser/cts/SplitSystemUserTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/EventConnectionAPI30/src/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/CompilerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/DirectoryTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/health/cts/HealthStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSForEachTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ScriptTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/Color_ColorLongTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ConnectivityManagerPermissionTest.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(2,ITS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(3,ITS,/android/telecom/cts/VideoCallTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(5,ITS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(1,ITS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,ITS,/android/security/cts/Poc17_05.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,ITS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,ITS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(1,ITS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ITS,/android/view/cts/PointerCaptureTest.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(12,ITS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(10,ITS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(8,ITS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(2,ITS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,CTS,/android/security/cts/STKFrameworkTest.java)', 1), ('(1,ITS,/android/adb/cts/AdbHostTest.java)', 1), ('(2,CTS,/android/adb/cts/AdbHostTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,CTS,/android/app/cts/AliasActivityTest.java)', 1), ('(6,CTS,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(36,CTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,CTS,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,CTS,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,CTS,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,CTS,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,CTS,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,CTS,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(5,CTS,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/AffiliationTest.java)', 1), ('(17,CTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,CTS,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(4,CTS,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(8,CTS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,ITS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/renderscript/cts/CompilerTest.java)', 1), ('(1,CTS,/com/android/server/cts/device/statsdatom/DirectoryTests.java)', 1), ('(1,CTS,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,CTS,/android/media/cts/AudioMetadataTest.java)', 1), ('(1,CTS,/android/os/health/cts/HealthStatsTest.java)', 1), ('(1,CTS,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,CTS,/android/cts/rscpp/RSForEachTest.java)', 1), ('(1,ITS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(6,CTS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(2,CTS,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(2,CTS,/android/renderscript/cts/ScriptTest.java)', 1), ('(1,CTS,/android/ndef/cts/NdefTest.java)', 1), ('(1,CTS,/android/graphics/cts/Color_ColorLongTest.java)', 1), ('(5,CTS,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,CTS,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(5,ITS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/permission/cts/ConnectivityManagerPermissionTest.java)', 1), ('(16,ITS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(24,CTS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[peatCount */);        mAutomation.injectInputEvent(upEvent, true);        waitForKey();    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[ITS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[ITS]:[1]:method_text:[    /**     * Tests ability to start a 1-way video call and retrieve its video state.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[1]:method_text:[PE_CHILD,                ExpandableListView.getPackedPositionType(0x8000000000000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0x7FFFFFFF, ExpandableListView.getPackedPositionGroup(0x7FFFFFFF00000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0xffffffff, ExpandableListView.getPackedPositionChild(0x80000000ffffffffL));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([1:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[ITS]:[1]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[ITS]:[1]:method_text:[   AdbUtils.runPocAssertExitStatusNotVulnerable(""CVE-2016-5867"", getDevice(), 60);        }    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[_PADDING_RSA_PKCS1)            .setIsStrongBoxBacked(useStrongBox)            .build();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[ITS]:[1]:method_text:[Key);        verify.update(data);        assertThat(verify.verify(signature)).isTrue();    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ITS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[ITS]:[1]:method_text:[ointerCaptureChanged());        assertFalse(mTarget2.hasCalledOnPointerCaptureChange());    }   ])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[4]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[ (manufacturer code) or null.     * The MC should match the first 8 digits of the MEID.     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[2]:method_text:[ }    /**     * Tests that the device properly sets and pads the contents of EF_FPLMN     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[            fail(""testDisAllowedNetworkTypes: SecurityException not expected"");        }    }   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[used."",                    WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);        }    }   ])', 1), ('([3:/android/server/wm/AssistantStackTests.java]:[ITS]:[3]:method_text:[ should be focused."",                WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ITS]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[ITS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[CTS]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[ITS]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([2:/android/adb/cts/AdbHostTest.java]:[CTS]:[2]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([3:/android/appsecurity/cts/LocationPolicyTest.java]:[CTS]:[3]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[CTS]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([6:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[CTS]:[6]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([32:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[32]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[ugmentedHelper.resetAugmentedService();        augmentedService.waitUntilDisconnected();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestNativeCospi.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[CTS]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/media/cts/ToneGeneratorTest.java]:[CTS]:[1]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[CTS]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[CTS]:[1]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([2:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[2]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[CTS]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[2]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([5:/android/content/cts/ClipDescriptionTest.java]:[CTS]:[5]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java]:[CTS]:[1]:method_text:[.app.appsearch.AppSearchManager;import org.junit.Test;public class AppSearchManagerCtsTest {   ])', 1), ('([1:/com/android/cts/deviceowner/AffiliationTest.java]:[CTS]:[1]:method_text:[_POLICY_SERVICE);        mAdminComponent = BasicAdminReceiver.getComponentName(context);    }   ])', 1), ('([17:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[CTS]:[17]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[CTS]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java]:[CTS]:[4]:method_text:[) throws Exception {        super.setUp();        mResources = mContext.getResources();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([7:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[7]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[CTS]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[ITS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[CTS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), (""([1:/android/renderscript/cts/CompilerTest.java]:[CTS]:[1]:method_text:[ins symbols that can't be resolved at runtime,     * which should trigger an exception.     */   ])"", 1), ('([1:/com/android/server/cts/device/statsdatom/DirectoryTests.java]:[CTS]:[1]:method_text:[t.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class DirectoryTests {   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[CTS]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[CTS]:[1]:method_text:[a.BaseMap>        KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);   ])', 1), ('([1:/android/os/health/cts/HealthStatsTest.java]:[CTS]:[1]:method_text:["").longValue());    }    /**     * Tests parceling empty HealthStats.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[CTS]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/android/cts/rscpp/RSForEachTest.java]:[CTS]:[1]:method_text:[        System.loadLibrary(""rscpptest_jni"");    }    native boolean testForEach(String path);   ])', 1), ('([1:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[ITS]:[1]:method_text:[     * rate of ongoing SensorEventConnections when the state of the mic toggle changes.     */   ])', 1), ('([6:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[CTS]:[6]:method_text:[ConnectionTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[CTS]:[2]:method_text:[ org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)@SmallTestpublic class TaggingTest {   ])', 1), ('([2:/android/renderscript/cts/ScriptTest.java]:[CTS]:[2]:method_text:[mport android.renderscript.cts.ScriptC_negate;public class ScriptTest extends RSBaseCompute {   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[CTS]:[1]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/graphics/cts/Color_ColorLongTest.java]:[CTS]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class Color_ColorLongTest {   ])', 1), ('([5:/android/view/inspector/cts/WindowInspectorTest.java]:[CTS]:[5]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CTS]:[1]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[ITS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([4:/android/multiuser/cts/SplitSystemUserTest.java]:[ITS]:[4]:method_text:[   }    private static String trim(String s) {        return s == null ? null : s.trim();    }}])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[CTS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([1:/android/permission/cts/ConnectivityManagerPermissionTest.java]:[CTS]:[1]:method_text:[ <p>Tests Permission:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[BlobHandle());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[rite(0L, 0L));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[sults.add(result);             }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[2]:method_text:[esults.add(result);            }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[rifyBlob(pfd);            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                .isEqualTo(0L);    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ze());            commitSession(sessionId, session, blobData.getBlobHandle());        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[4]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[4]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[3]:method_text:[  runShellCmd(""cmd blob_store clear-all-blobs"");        mContext.getFilesDir().delete();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[2]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([5:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[5]:method_text:[ 1111L, ""tag2"");            assertThat(blobHandle1).isNotEqualTo(blobHandle2);        }    }   ])', 1), ('([8:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[8]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1)]"	""	""	"[('CTS', 160), ('ITS', 44), ('VERSION_CODES', 4)]"	"[('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 2), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 2), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_countLimitExceeded None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation None]', 2), ('[android.view.cts.VerifyInputEventTest testTamperedKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 1), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.telecom.cts.VideoCallTest testMakeTwoWayVideoCall None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionType None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionChild None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[android.security.cts.Poc17_05 testPocCVE_2016_5867 None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testNotUserSelectableAliasCanBeChosenViaPolicy None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.certinstaller.PreSelectedKeyAccessTest testAccessingPreSelectedAliasExpectingSuccess None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest testPointerCaptureChangeDispatch None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetTac None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetForbiddenPlmns None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDisAllowedNetworkTypes None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackZOrder None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackLaunchNewTaskWithDockedStack None]', 1), ('[android.server.wm.AssistantStackTests testTranslucentAssistantActivityStackVisibility None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testServiceLifecycle None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[android.sensorratepermission.cts.eventconnectionapi30.EventConnectionAPI30Test testSamplingRateMicToggleOn None]', 1), ('[android.multiuser.cts.SplitSystemUserTest testSplitSystemUserIsDisabled None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testOpenReadWriteSession None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleWrites None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleReadWrites None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testOpenBlob None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitBlobAfterIdleMaintenance None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleEquality None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-8"	"7.4.2.4/C-1-8"	"07040204.670108"	"""C-1-8] MUST support user control of provisioning through the Wi-Fi picker."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"66:300552) 3.5.1  . Application Restriction"	"3.5.1"	"C-1-10"	"3.5.1/C-1-10"	"03050100.670110"	"""C-1-10] MUST NOT allow an app to be automatically placed in the RESTRICTED bucket within 2 hours of the most recent usage by a user. If device implementations extend the app restrictions that are implemented in AOSP, they: """	""	""	"RESTRICTED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java', 20), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedStoragePermissionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/BannedFilesTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppSecurityTests.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/AlarmManagerIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApexSignatureVerificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/BuildVersionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/multiuser/src/android/host/multiuser/CreateUsersPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/UsbDebuggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialModern/src/android/os/cts/AccessSerialModernTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AccessSerialModern/src/android/os/cts/AccessSerialModernTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSessionCtsTestBase.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintDocumentInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/PackageSignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/PreferentialNetworkServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/TextAppearanceSpanTest.java', 1)]"	"[('(3,RESTRICTED,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(2,RESTRICTED,/android/security/cts/FileIntegrityManagerTest.java)', 2), ('(32,RESTRICTED,/android/permission2/cts/RestrictedStoragePermissionTest.java)', 2), ('(1,RESTRICTED,/android/os/cts/AccessSerialModernTest.java)', 2), ('(1,RESTRICTED,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(3,RESTRICTED,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(2,RESTRICTED,/android/host/multiuser/CreateUsersPermissionTest.java)', 1), ('(3,RESTRICTED,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(12,RESTRICTED,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,RESTRICTED,/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java)', 1), ('(1,RESTRICTED,/android/view/cts/View_FocusHandlingTest.java)', 1), ('(2,RESTRICTED,/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java)', 1), ('(3,RESTRICTED,/com/android/server/cts/AlarmManagerIncidentTest.java)', 1), ('(1,RESTRICTED,/android/net/cts/DnsResolverTest.java)', 1), ('(3,RESTRICTED,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(2,RESTRICTED,/android/os/cts/UsbDebuggingTest.java)', 1), ('(2,RESTRICTED,/android/appsecurity/cts/ApexSignatureVerificationTest.java)', 1), ('(1,RESTRICTED,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(43,RESTRICTED,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(5,RESTRICTED,/android/media/cts/AudioRecordTest.java)', 1), ('(10,RESTRICTED,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(3,RESTRICTED,/android/security/cts/BannedFilesTest.java)', 1), ('(17,RESTRICTED,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,RESTRICTED,/android/telephonyprovider/cts/SmsTest.java)', 1), ('(3,RESTRICTED,/android/os/cts/BuildVersionTest.java)', 1), ('(2,RESTRICTED,/com/android/cts/appsearch/external/app/AppSearchSessionCtsTestBase.java)', 1), ('(3,RESTRICTED,/android/security/cts/SELinuxHostTest.java)', 1), ('(1,RESTRICTED,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(1,RESTRICTED,/android/print/cts/PrintDocumentInfoTest.java)', 1), ('(5,RESTRICTED,/android/app/cts/ActivityManagerTest.java)', 1), ('(5,RESTRICTED,/android/widget/cts/TextViewTest.java)', 1), ('(23,RESTRICTED,/android/app/usage/cts/UsageStatsTest.java)', 1), ('(2,RESTRICTED,/android/security/cts/PackageSignatureTest.java)', 1), ('(3,RESTRICTED,/android/appsecurity/cts/AppSecurityTests.java)', 1), ('(2,RESTRICTED,/android/devicepolicy/cts/PreferentialNetworkServiceTest.java)', 1), ('(113,RESTRICTED,/android/permission2/cts/RestrictedPermissionsTest.java)', 1), ('(2,RESTRICTED,/android/text/style/cts/TextAppearanceSpanTest.java)', 1), ('(86,RESTRICTED,/android/jobscheduler/cts/JobThrottlingTest.java)', 1)]"	"[('([6:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[6]:method_text:[o restricted permission should be granted.        assertNoRestrictedPermissionGranted();    }   ])', 3), ('([3:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[3]:method_text:[CKGROUND_RESTRICTION,                mTestAppInterface.getLastParams().getStopReason());    }   ])', 3), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RESTRICTED]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 2), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[RESTRICTED]:[2]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[RESTRICTED]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[RESTRICTED]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[RESTRICTED]:[3]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[RESTRICTED]:[1]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[RESTRICTED]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 2), ('([3:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[RESTRICTED]:[3]:method_text:[pk"";    private static final String PKG = ""android.permission2.cts.restrictedpermissionuser"";   ])', 2), ('([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[RESTRICTED]:[1]:method_text:[Check expected state of restricted permissions.        assertCannotUnWhitelistStorage();    }   ])', 2), ('([1:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[RESTRICTED]:[1]:method_text:[/ Check expected state of restricted permissions.        assertCannotWhitelistStorage();    }   ])', 2), ('([2:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[RESTRICTED]:[2]:method_text:[evel is only        // controlled by the read perm        assertHasFullStorageAccess();    }   ])', 2), ('([25:/android/permission2/cts/RestrictedStoragePermissionTest.java]:[RESTRICTED]:[25]:method_text:[    @After    public void uninstallApp() {        runShellCommand(""pm uninstall "" + PKG);    }}])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[4]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 2), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[4]:method_text:[y requested for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([6:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[6]:method_text:[ suggestion for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([1:/android/net/cts/Ikev2VpnTest.java]:[RESTRICTED]:[1]:method_text:[       assertNull(profile.getRsaPrivateKey());        assertNull(profile.getUserCert());    }   ])', 2), ('([1:/android/os/cts/AccessSerialModernTest.java]:[RESTRICTED]:[1]:method_text:[stricted from accessing persistent device identifiers. */public class AccessSerialModernTest {   ])', 2), ('([5:/android/app/usage/cts/UsageStatsTest.java]:[RESTRICTED]:[5]:method_text:[t apps    @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")   ])', 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[1]:method_text:[       ACCESS_BACKGROUND_LOCATION)));        assertAllRestrictedPermissionWhitelisted();    }   ])', 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[1]:method_text:[ions.singleton(ACCESS_FINE_LOCATION));        assertNoRestrictedPermissionWhitelisted();    }   ])', 2), ('([6:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[6]:method_text:[as unrestricted"",                mTestAppInterface.awaitJobStart(DEFAULT_WAIT_TIMEOUT));    }   ])', 2), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[RESTRICTED]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[RESTRICTED]:[1]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[RESTRICTED]:[2]:method_text:[).installPackage(                mBuildHelper.getTestFile(SHIM_UPDATE_FAIL_APK), true));    }   ])', 1), ('([2:/android/host/multiuser/CreateUsersPermissionTest.java]:[RESTRICTED]:[2]:method_text:[ {        createRestrictedProfile(mPrimaryUserId);    }    @CddTest(requirement=""9.5/A-1-3"")   ])', 1), (""([1:/android/telephony/cts/SubscriptionManagerTest.java]:[RESTRICTED]:[1]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([2:/android/telephony/cts/SubscriptionManagerTest.java]:[RESTRICTED]:[2]:method_text:[ager.NETWORK_TYPE_NR;        return validCarrier && validNetworkType && validCapabilities;    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[RESTRICTED]:[2]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AccountManagementParentTest.java]:[RESTRICTED]:[1]:method_text:[      assertThat(mDevicePolicyManager.getAccountTypesWithManagementDisabled()).isEmpty();    }   ])', 1), ('([1:/android/view/cts/View_FocusHandlingTest.java]:[RESTRICTED]:[1]:method_text:[ v2.requestFocus();        parent.setEnabled(false);        assertTrue(v2.isFocused());    }   ])', 1), ('([2:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[RESTRICTED]:[2]:method_text:[            return 0;        }        return 1 + (int)((now - start - 1000)/interval);    }   ])', 1), ('([1:/com/android/server/cts/AlarmManagerIncidentTest.java]:[RESTRICTED]:[1]:method_text:[ly outputs its dump state. */public class AlarmManagerIncidentTest extends ProtoDumpTestCase {   ])', 1), ('([2:/com/android/server/cts/AlarmManagerIncidentTest.java]:[RESTRICTED]:[2]:method_text:[);        // Nesting should be non-negative.        assertTrue(0 <= filter.getNesting());    }}])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[RESTRICTED]:[1]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[RESTRICTED]:[1]:method_text:[_ERROR_INVALID_INPUT_LENGTH = -21;    private static final int KM_ERROR_PERMISSION_DENIED = 6;   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[RESTRICTED]:[1]:method_text:[yStore.deleteEntry(keystoreAlias);        }    }    @RestrictedBuildTest    @RequiresDevice   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[RESTRICTED]:[1]:method_text:[    @RestrictedBuildTest    @RequiresDevice  // Emulators have no place to store the needed key   ])', 1), ('([2:/android/os/cts/UsbDebuggingTest.java]:[RESTRICTED]:[2]:method_text:[java.io.File;public class UsbDebuggingTest extends AndroidTestCase {    @RestrictedBuildTest   ])', 1), ('([1:/android/appsecurity/cts/ApexSignatureVerificationTest.java]:[RESTRICTED]:[1]:method_text:[e, Description description, Throwable t) {            mHasTestFailure = true;        }    };   ])', 1), ('([1:/android/appsecurity/cts/ApexSignatureVerificationTest.java]:[RESTRICTED]:[1]:method_text:[oduction (user) builds.     */    @SuppressWarnings(""productionOnly"")    @RestrictedBuildTest   ])', 1), ('([1:/android/provider/cts/calendar/CalendarTest.java]:[RESTRICTED]:[1]:method_text:[n the Calendar table, specifying one restricted     * column at a time.     */    @MediumTest   ])', 1), ('([8:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[8]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([4:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[4]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[RESTRICTED]:[3]:method_text:[on available for apps.        assertThat(mTestHelper.getNumWifiConnections()).isEqualTo(1);    }}])', 1), ('([5:/android/media/cts/AudioRecordTest.java]:[RESTRICTED]:[5]:method_text:[                 + source + "" Exception:"" + e);                }            }        }    }   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[RESTRICTED]:[1]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([7:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[RESTRICTED]:[7]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[RESTRICTED]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[RESTRICTED]:[1]:method_text:[corerForRestrictedSuggestionConnection(                Set.of(NET_CAPABILITY_OEM_PRIVATE));    }}])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[RESTRICTED]:[1]:method_text:[ugs-and-more-plagiarism/     * http://forum.xda-developers.com/showthread.php?t=1213014     */   ])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[RESTRICTED]:[1]:method_text:[alse(""/dev/socket/fota"", new File(""/dev/socket/fota"").exists());    }    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/BannedFilesTest.java]:[RESTRICTED]:[1]:method_text:[rtFalse(""/vendor/bin/su"",  new File(""/vendor/bin/su"").exists());    }    @RestrictedBuildTest   ])', 1), ('([11:/android/net/cts/Ikev2VpnTest.java]:[RESTRICTED]:[11]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([2:/android/net/cts/Ikev2VpnTest.java]:[RESTRICTED]:[2]:method_text:[sVpnMgr.provisionVpnProfile(profile);        assertEquals(expectIntent, intent != null);    }   ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[RESTRICTED]:[1]:method_text:[due to missing profile"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[RESTRICTED]:[1]:method_text:[ != null) {                tnm.teardownTestNetwork(testNetwork);            }        }    }   ])', 1), ('([1:/android/telephonyprovider/cts/SmsTest.java]:[RESTRICTED]:[1]:method_text:[);    }    /**     * Verifies that subqueries are not allowed with a restricted view     */   ])', 1), ('([2:/android/os/cts/BuildVersionTest.java]:[RESTRICTED]:[2]:method_text:[S_FILE = ""platform_releases.txt"";    @SuppressWarnings(""deprecation"")    @RestrictedBuildTest   ])', 1), ('([1:/android/os/cts/BuildVersionTest.java]:[RESTRICTED]:[1]:method_text:[D)/     * (BUILD_NUMBER):(BUILD_VARIANT)/(TAGS)     * </code>     */    @RestrictedBuildTest   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSessionCtsTestBase.java]:[RESTRICTED]:[2]:method_text:[get(""id1"").getResultCode())                .isEqualTo(AppSearchResult.RESULT_NOT_FOUND);    }   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[RESTRICTED]:[1]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[RESTRICTED]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[RESTRICTED]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[RESTRICTED]:[1]:method_text:[* Test that a single ""can\'t save state"" app has the proper process management semantics.     */   ])', 1), ('([1:/android/print/cts/PrintDocumentInfoTest.java]:[RESTRICTED]:[1]:method_text:[intDocumentInfo are fine.     *     * @throws Exception If anything unexpected happens     */   ])', 1), ('([1:/android/app/cts/ActivityManagerTest.java]:[RESTRICTED]:[1]:method_text:[ProcessID != -1) {            android.os.Process.killProcess(mErrorProcessID);        }    }   ])', 1), ('([3:/android/app/cts/ActivityManagerTest.java]:[RESTRICTED]:[3]:method_text:[ForcedAppStandby(targetPackage, false);        assertFalse(am.isBackgroundRestricted());    }   ])', 1), ('([1:/android/app/cts/ActivityManagerTest.java]:[RESTRICTED]:[1]:method_text:[that {@link ActivityManager#isRunningInTestHarness()} is false.     */    @RestrictedBuildTest   ])', 1), ('([5:/android/widget/cts/TextViewTest.java]:[RESTRICTED]:[5]:method_text:[ance);        assertEquals(Typeface.DEFAULT, mTextView.getTypeface());    }    @UiThreadTest   ])', 1), ('([5:/android/app/usage/cts/UsageStatsTest.java]:[RESTRICTED]:[5]:method_text:[ity(clazz);        }    }    @AppModeFull(reason = ""No usage events access in instant apps"")   ])', 1), ('([6:/android/app/usage/cts/UsageStatsTest.java]:[RESTRICTED]:[6]:method_text:[t apps    @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")   ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[RESTRICTED]:[2]:method_text:[        } catch(Exception e) {                return true;            }        }, false);    }}])', 1), ('([2:/android/security/cts/PackageSignatureTest.java]:[RESTRICTED]:[2]:method_text:[ern TEST_PACKAGE_PATTERN = Pattern.compile(""android\\\\.[^\\\\.]+\\\\.cts"");    @RestrictedBuildTest   ])', 1), ('([1:/android/appsecurity/cts/AppSecurityTests.java]:[RESTRICTED]:[1]:method_text:[pdate cannot be installed over an existing app if it has a different     * certificate.     */   ])', 1), ('([1:/android/appsecurity/cts/AppSecurityTests.java]:[RESTRICTED]:[1]:method_text:[d, but JUnit4TestNotRun reports the test will not be run because    // the method does not have the])', 1), ('([1:/android/appsecurity/cts/AppSecurityTests.java]:[RESTRICTED]:[1]:method_text:[ationDiffCert_full() throws Exception {        testInstrumentationDiffCert(false, false);    }   ])', 1), ('([2:/android/devicepolicy/cts/PreferentialNetworkServiceTest.java]:[RESTRICTED]:[2]:method_text:[he provider that provides enterprise slice can     * see the enterprise slice requests.     */   ])', 1), ('([12:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[12]:method_text:[c static void tearDownOnce() {        getContext().unregisterReceiver(sCommandReceiver);    }   ])', 1), ('([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[3]:method_text:[ted permission should be whitelisted.        assertAllRestrictedPermissionWhitelisted();    }   ])', 1), ('([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[3]:method_text:[ld be whitelisted.        assertRestrictedPermissionWhitelisted(whitelistedPermissions);    }   ])', 1), ('([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[3]:method_text:[cted permission should be whitelisted.        assertNoRestrictedPermissionWhitelisted();    }   ])', 1), ('([6:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[6]:method_text:[mission should be granted.        assertRestrictedPermissionGranted(grantedPermissions);    }   ])', 1), ('([2:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[2]:method_text:[ionGranted(grantedPermissions);        } finally {            uninstallApp();        }    }   ])', 1), ('([6:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[6]:method_text:[ restricted permission should be granted.        assertAllRestrictedPermissionGranted();    }   ])', 1), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[1]:method_text:[hellCanReadAndWrite(                PackageManager.FLAG_PERMISSION_WHITELIST_INSTALLER);    }   ])', 1), ('([4:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[4]:method_text:[s whitelisted on side-load by default        assertAllRestrictedPermissionWhitelisted();    }   ])', 1), ('([5:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[5]:method_text:[RestrictedPermissionUserApp(params);        assertAllRestrictedPermissionWhitelisted();    }   ])', 1), ('([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[3]:method_text:[nUserApp(params);        assertRestrictedPermissionWhitelisted(whitelistedPermissions);    }   ])', 1), ('([3:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[3]:method_text:[lRestrictedPermissionUserApp(params);        assertNoRestrictedPermissionWhitelisted();    }   ])', 1), ('([40:/android/permission2/cts/RestrictedPermissionsTest.java]:[RESTRICTED]:[40]:method_text:[umentation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }}])', 1), ('([2:/android/text/style/cts/TextAppearanceSpanTest.java]:[RESTRICTED]:[2]:method_text:[ restricted context.        assertEquals(originalTextWidth, tp.measureText(""a""), 0.0f);    }   ])', 1), ('([4:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[4]:method_text:[terfering with the        // test.        mUiDevice.executeShellCommand(""am kill-all"");    }   ])', 1), (""([3:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[3]:method_text:[tStopReason());    }    @RequiresDevice // Emulators don't always have access to wifi/network   ])"", 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[1]:method_text:[    /** Tests that apps in the RESTRICTED bucket still get their one parole session per day. */   ])', 1), ('([6:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[6]:method_text:[et have their parole sessions properly counted even     * when charging (but not idle).     */   ])', 1), (""([7:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[7]:method_text:[arole session per day     * don't get to run again until the device is charging + idle.     */   ])"", 1), ('([8:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[8]:method_text:[ED bucket when charging + idle"",                mTestAppInterface.awaitJobStart(3_000));    }   ])', 1), (""([9:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[9]:method_text:[bStart(3_000));    }    @RequiresDevice // Emulators don't always have access to wifi/network   ])"", 1), ('([10:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[10]:method_text:[n\'t start in RESTRICTED bucket"",                mTestAppInterface.awaitJobStart(5_000));    }   ])', 1), ('([8:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[8]:method_text:[P_REASON_APP_STANDBY,                mTestAppInterface.getLastParams().getStopReason());    }   ])', 1), ('([9:/android/jobscheduler/cts/JobThrottlingTest.java]:[RESTRICTED]:[9]:method_text:[sTrue();    }    private interface Condition {        boolean isTrue() throws Exception;    }}])', 1)]"	""	""	"[('RESTRICTED', 128)]"	"[('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 2), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted None]', 2), ('[android.permission2.cts.RestrictedStoragePermissionTest testCannotControlStorageWhitelistPostInstall1 None]', 2), ('[android.permission2.cts.RestrictedStoragePermissionTest testCannotControlStorageWhitelistPostInstall2 None]', 2), ('[android.permission2.cts.RestrictedStoragePermissionTest restrictedWritePermDoesNotImplyIsolatedStorageAccess None]', 2), ('[android.permission2.cts.RestrictedStoragePermissionTest testStorageTargetingSdk30CannotPreserveLegacyOnInstall None]', 2), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradeRestricted None]', 1), ('[android.host.multiuser.CreateUsersPermissionTest testCanCreateRestrictedUser None]', 1), ('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSetAndGetD2DSharingContacts None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability None]', 1), ('[com.android.cts.deviceandprofileowner.AccountManagementParentTest testSetAccountManagementDisabledOnParent None]', 1), ('[android.view.cts.View_FocusHandlingTest testEnabledHandling None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy None]', 1), ('[com.android.server.cts.AlarmManagerIncidentTest testAlarmManagerServiceDump None]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_NoChallenge None]', 1), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation_NoChallenge None]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest getApexPackageList None]', 1), ('[android.appsecurity.cts.ApexSignatureVerificationTest testApexIncludePubKey None]', 1), ('[android.provider.cts.calendar.CalendarTest testBulkUpdate None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailureWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailureWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPaidNetCapabilityWhenConnectedToInternetNetwork None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPrivateNetCapabilityWhenConnectedToInternetNetwork None]', 1), ('[android.media.cts.AudioRecordTest testRestrictedAudioSourcePermissions None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPrivateSuggestionConnection None]', 1), ('[android.security.cts.BannedFilesTest testNoSystemCmdSocket None]', 1), ('[android.security.cts.BannedFilesTest testNoSu None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfilePsk None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfileUsernamePassword None]', 1), ('[android.net.cts.Ikev2VpnTest testBuildIkev2VpnProfileDigitalSignature None]', 1), ('[android.net.cts.Ikev2VpnTest testDeleteVpnProfile None]', 1), ('[android.net.cts.Ikev2VpnTest testStartVpnProfileNoPreviousConsent None]', 1), ('[android.telephonyprovider.cts.SmsTest testInsertEmoji_andVerify None]', 1), ('[android.os.cts.BuildVersionTest testIncremental None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSessionCtsTestBase testRemoveByQuery_packageFilter None]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo None]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing None]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBgRestrictedForegroundService None]', 1), ('[android.print.cts.PrintDocumentInfoTest createFirstMockDiscoverySessionCallbacks None]', 1), ('[android.app.cts.ActivityManagerTest finish None]', 1), ('[android.app.cts.ActivityManagerTest testIsBackgroundRestricted None]', 1), ('[android.app.cts.ActivityManagerTest testIsUserAMonkey None]', 1), ('[android.widget.cts.TextViewTest testFontResourcesXml_restrictedContext None]', 1), ('[android.app.usage.cts.UsageStatsTest isAppStandbyEnabled None]', 1), ('[android.app.usage.cts.UsageStatsTest testUserForceIntoRestricted None]', 1), ('[android.app.usage.cts.UsageStatsTest testUserForceIntoRestricted_BucketDisabled None]', 1), ('[android.app.usage.cts.UsageStatsTest testUserLaunchRemovesFromRestricted None]', 1), ('[android.app.usage.cts.UsageStatsTest testLocusIdEventsVisibility None]', 1), ('[android.appsecurity.cts.AppSecurityTests testUninstallRemovesData_instant None]', 1), ('[android.appsecurity.cts.AppSecurityTests testInstrumentationDiffCert_full None]', 1), ('[android.devicepolicy.cts.PreferentialNetworkServiceTest TestApis None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testDefaultAllRestrictedPermissionsWhitelistedAtInstall29 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testSomeRestrictedPermissionsWhitelistedAtInstall29 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testNoneRestrictedPermissionWhitelistedAtInstall29 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testDefaultAllRestrictedPermissionsWhitelistedAtInstall22 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testSomeRestrictedPermissionsWhitelistedAtInstall22 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testNoneRestrictedPermissionWhitelistedAtInstall22 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall29 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall29 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall22 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall22 None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testSomeRestrictedPermissionsGrantedAtInstall None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testCanGrantSoftRestrictedNotWhitelistedPermissions None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testAllRestrictedPermissionsGrantedAtInstall None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest testWhitelistAccessControl None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest onSideLoadRestrictedPermissionsWhitelistingDefault None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest onSideLoadAllRestrictedPermissionsWhitelisted None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest onSideLoadWhitelistSomePermissions None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest onSideLoadWhitelistNoPermissions None]', 1), ('[android.permission2.cts.RestrictedPermissionsTest isTrue None]', 1), ('[android.text.style.cts.TextAppearanceSpanTest testRestrictContext None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest isDeviceIdleMode None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobStoppedWhenRestricted None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobStartedWhenUnrestricted None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedJobAllowedWhenUidActive None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testEJStoppedWhenRestricted None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedEJStartedWhenUnrestricted None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictedEJAllowedWhenUidActive None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testBackgroundConnectivityJobsThrottled None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_ParoleSession None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_CorrectParoleWhileCharging None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_DeferredUntilFreeResources None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_NoRequiredNetwork None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testJobsInRestrictedBucket_WithRequiredNetwork None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_RestrictedBucket None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_Doze None]', 1)]"
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-1-2"	"2.2.7.4/H-1-2"	"02020704.720102"	"""8.2/H-1-2] MUST ensure a random write performance of at least 10 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"66:300552) 3.5.1  . Application Restriction"	"3.5.1"	"C-1-9"	"3.5.1/C-1-9"	"03050100.670109"	"""C-1-9] MUST report all app restriction events via UsageStats."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-1-4"	"9.8.12/C-1-4"	"09081200.670104"	"""C-1-4] MUST ensure that when MusicRecognitionManagerService accesses the audio record and forwards it to the application implementing the MusicRecognitionService, the audio access is tracked via invocations of AppOpsManager.noteOp / startOp. If device implementations of MusicRecognitionManagerService or MusicRecognitionService store any audio data captured, they: """	""	""	"AppOpsManager.noteOp"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java', 1)]"	"[('(1,AppOpsManager.noteOp,/android/app/cts/ActivityManagerApi29Test.java)', 1)]"	"[('([1:/android/app/cts/ActivityManagerApi29Test.java]:[AppOpsManager.noteOp]:[1]:method_text:[ access count and reject count     * in HistoricalOps.      *     * @throws Exception     */   ])', 1)]"	""	""	"[('AppOpsManager.noteOp', 1)]"	"[('[android.app.cts.ActivityManagerApi29Test testFgsLocationWithAppOps None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-6"	"7.4.2.4/C-1-6"	"07040204.670106"	"""C-1-6] MUST support at least the following subset of device provisioning protocols as defined in the Wi-Fi Alliance Passpoint R2: EAP-TTLS authentication and SOAP-XML."""	""	""	"XML TTLS EAP SOAP"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 24), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 12), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/XmlTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/SwitchTest.java', 6), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/DecelerateInterpolatorTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/AccelerateDecelerateInterpolatorTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/RadioGroup_LayoutParamsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_disabled/src/android/cts/tagging/disabled/TaggingTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/backup/src/android/cts/backup/SuccessNotificationHostSideTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/RotateAnimationTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/metric/CountMetricsTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/fonts/FontTest.java', 1)]"	"[('(6,XML,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(1,EAP,/android/cts/install/host/UpgradeTest.java)', 1), ('(7,EAP,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(2,EAP,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,EAP,/RestoreAnyVersionTest.java)', 1), ('(1,EAP,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(2,EAP,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(5,EAP,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(2,XML,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(2,EAP,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(2,EAP,/android/server/wm/AssistantStackTests.java)', 1), ('(1,EAP,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,EAP,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(4,EAP,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(5,EAP,/android/ndef/cts/NdefTest.java)', 1), ('(28,EAP,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(2,XML,/android/security/cts/TestMedia.java)', 1), ('(11,XML,/android/widget/cts/RadioGroup_LayoutParamsTest.java)', 1), ('(3,EAP,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(51,XML,/android/util/cts/XmlTest.java)', 1), ('(2,XML,/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java)', 1), ('(4,EAP,/android/cts/tagging/disabled/TaggingTest.java)', 1), ('(6,EAP,/com/android/cts/rollback/host/app/HostTestHelper.java)', 1), ('(5,EAP,/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java)', 1), ('(3,EAP,/com/android/cts/delegate/EnableSystemAppDelegateTest.java)', 1), ('(6,XML,/android/view/animation/cts/DecelerateInterpolatorTest.java)', 1), ('(1,XML,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(2,TTLS,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(17,EAP,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,SOAP,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(17,EAP,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(6,XML,/android/widget/cts/SwitchTest.java)', 1), ('(5,TTLS,/android/cts/statsd/metric/CountMetricsTests.java)', 1), ('(1,EAP,/com/android/cts/devicepolicy/AccountCheckHostSideTest.java)', 1), ('(36,EAP,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,XML,/android/graphics/fonts/FontTest.java)', 1), ('(3,EAP,/android/cts/backup/SuccessNotificationHostSideTest.java)', 1), ('(7,EAP,/android/server/wm/BackgroundActivityLaunchTest.java)', 1), ('(6,XML,/android/view/animation/cts/AccelerateDecelerateInterpolatorTest.java)', 1), ('(4,XML,/android/view/animation/cts/RotateAnimationTest.java)', 1)]"	"[('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 5), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ctivity.class),                    sDeviceState.primaryUser().userHandle());        });    }   ])', 3), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[         sDeviceState.workProfile(/* forUser= */ PRIMARY_USER).userHandle());        });    }   ])', 3), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 3), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[rofileApps.getProfileSwitchingLabel(sDeviceState.primaryUser().userHandle());        });    }   ])', 2), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[EAP]:[1]:method_text:[onId());        assertThat(InstallUtils.getInstalledVersion(TestApp.Apex)).isEqualTo(2);    }   ])', 2), ('([1:/android/widget/cts/SwitchTest.java]:[XML]:[1]:method_text:[t(), false,                TestUtils.compositeColors(0x800000FF, Color.GREEN), 1, true);    }   ])', 2), ('([3:/android/widget/cts/ExpandableListViewTest.java]:[XML]:[3]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([3:/android/widget/cts/ExpandableListViewTest.java]:[XML]:[3]:method_text:[xpandableListView(mActivity, attrs);        new ExpandableListView(mActivity, attrs, 0);    }   ])', 1), ('([1:/android/cts/install/host/UpgradeTest.java]:[EAP]:[1]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([2:/android/server/wm/UnsupportedErrorDialogTests.java]:[EAP]:[2]:method_text:[ppears if the dev option is set even if the user specifically     * set to suppress it.     */   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[EAP]:[1]:method_text:[   /** Make sure the AppError dialog is not shown even if would have after the initial crash. */   ])', 1), ('([4:/android/server/wm/UnsupportedErrorDialogTests.java]:[EAP]:[4]:method_text:[e.getUriFor(settingName),                Settings.Secure::getInt, Settings.Secure::putInt);    }}])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[EAP]:[2]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[EAP]:[1]:method_text:[ saveSharedPrefValue() throws Exception {        saveAppVersionCodeToSharedPreference();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[EAP]:[1]:method_text:[      Log.i(TAG, ""Read the shared preference value: "" + intValue);        return intValue;    }}])', 1), ('([1:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[EAP]:[1]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[EAP]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[EAP]:[3]:method_text:[tion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[EAP]:[2]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[XML]:[2]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[EAP]:[2]:method_text:[();            revokeBindAppWidgetPermission();        }    }    @MediumTest    @Presubmit   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[EAP]:[2]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([1:/android/appsecurity/cts/LocationPolicyTest.java]:[EAP]:[1]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[EAP]:[1]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[EAP]:[2]:method_text:[void testHeapTaggingEnabled() {        assertNotEquals(0, Utils.nativeHeapPointerTag());    }   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[EAP]:[2]:method_text:[blic void testHeapTaggingDisabled() {        assertEquals(0, Utils.nativeHeapPointerTag());    }}])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[EAP]:[1]:method_text:[on for input "" + bytesToString(b));            } catch (FormatException e) { }        }    }   ])', 1), ('([4:/android/ndef/cts/NdefTest.java]:[EAP]:[4]:method_text:[ew byte[] {}, r.getId());        assertEquals(""com.foo.bar"".getBytes(), r.getPayload());    }   ])', 1), ('([5:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[5]:method_text:[s);    @ClassRule @Rule    public static final DeviceState sDeviceState = new DeviceState();   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[       assertThat(targetProfiles).doesNotContain(sDeviceState.primaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[    assertThat(targetProfiles).doesNotContain(sDeviceState.secondaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[);        assertThat(targetProfiles).contains(sDeviceState.primaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[);        assertThat(targetProfiles).contains(sDeviceState.workProfile().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[      assertThat(targetProfiles).doesNotContain(sDeviceState.workProfile().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ain(                sDeviceState.workProfile(/* forUser= */ PRIMARY_USER).userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[());        assertMainActivityLaunchedForUser(sDeviceState.primaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[))                .isEqualTo(String.valueOf(sUserManager.getSerialNumberForUser(user)));    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ivity.class),                    sDeviceState.secondaryUser().userHandle());        });    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ileSwitchingLabel(                sDeviceState.primaryUser().userHandle())).isNotNull();    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ileSwitchingLabel(                sDeviceState.workProfile().userHandle())).isNotNull();    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[ngIconDrawable(                    sDeviceState.primaryUser().userHandle());        });    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[IconDrawable(                    sDeviceState.secondaryUser().userHandle());        });    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[chingIconDrawable(                sDeviceState.primaryUser().userHandle())).isNotNull();    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[EAP]:[1]:method_text:[SwitchingIconDrawable(                sDeviceState.workProfile().userHandle())).isNotNull();    }])', 1), ('([1:/android/security/cts/TestMedia.java]:[XML]:[1]:method_text:[* Vulnerability Behaviour: SIGSEGV in self     **/    @SecurityTest(minPatchLevel = ""2017-06"")   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[XML]:[1]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2017-10"")   ])', 1), ('([5:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[XML]:[5]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([6:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[XML]:[6]:method_text:[, int heightAttr) {            super.setBaseAttributes(a, widthAttr, heightAttr);        }    }}])', 1), ('([3:/android/permission/cts/OneTimePermissionTest.java]:[EAP]:[3]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([15:/android/util/cts/XmlTest.java]:[XML]:[15]:method_text:[ST + ""><"" + TAG_SON + "" "" + ATT_NAME + ""=\\"""" + STR_ABC            + ""\\""/></"" + TAG_TEST + "">"";   ])', 1), ('([3:/android/util/cts/XmlTest.java]:[XML]:[3]:method_text:[   mVec.add(STR_START_PREFIX_MAPPING_TAG + prefix);            mVec.add(uri);        }    }   ])', 1), ('([1:/android/util/cts/XmlTest.java]:[XML]:[1]:method_text:[Message());        } catch (IOException e) {            fail(e.getMessage());        }    }   ])', 1), ('([8:/android/util/cts/XmlTest.java]:[XML]:[8]:method_text:[Message());        } catch (IOException e) {            fail(e.getMessage());        }    }   ])', 1), ('([4:/android/util/cts/XmlTest.java]:[XML]:[4]:method_text:[tNotNull(xs);        XmlPullParser xp = Xml.newPullParser();        assertNotNull(xp);    }   ])', 1), ('([9:/android/util/cts/XmlTest.java]:[XML]:[9]:method_text:[ion"");        } catch (UnsupportedEncodingException e) {            // expect        }    }   ])', 1), ('([11:/android/util/cts/XmlTest.java]:[XML]:[11]:method_text:[ {        if (actual.length() != 0) {            assertEquals(expected, actual);        }    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[XML]:[1]:method_text:[       assertTrue(copyOfFirstEditText.getDrawingOrder() < firstButton.getDrawingOrder());    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[XML]:[1]:method_text:[());        assertTrue(firstEditText.getDrawingOrder() < firstButton.getDrawingOrder());    }   ])', 1), ('([2:/android/cts/tagging/disabled/TaggingTest.java]:[EAP]:[2]:method_text:[void testHeapTaggingEnabled() {        assertNotEquals(0, Utils.nativeHeapPointerTag());    }   ])', 1), ('([2:/android/cts/tagging/disabled/TaggingTest.java]:[EAP]:[2]:method_text:[blic void testHeapTaggingDisabled() {        assertEquals(0, Utils.nativeHeapPointerTag());    }}])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[EAP]:[1]:method_text:[ * Test rollbacks of staged installs involving only apex.     * Confirm rollback phase.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[EAP]:[1]:method_text:[Test rollbacks of staged installs involving apex and apk.     * Confirm rollback phase.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[EAP]:[1]:method_text:[that apex update expires existing rollbacks for that apex.     * Enable rollback phase.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[EAP]:[1]:method_text:[tation().getContext();        return new File(context.getFilesDir(), APK_VERSION_FILENAME);    }}])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[EAP]:[1]:method_text:[d be disabled too.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_DISABLED);    }   ])', 1), ('([2:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[EAP]:[2]:method_text:[ivity.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([2:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[EAP]:[2]:method_text:[launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }    @Presubmit   ])', 1), ('([1:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[EAP]:[1]:method_text:[    mDpm = getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[EAP]:[1]:method_text:[   mDpm.enableSystemApp(null, new Intent().setPackage(TEST_APP_PKG));                });    }   ])', 1), ('([1:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[EAP]:[1]:method_text:[atedScopes(null, packageName);        return scopes.contains(DELEGATION_ENABLE_SYSTEM_APP);    }}])', 1), ('([2:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[attrs = Xml.asAttributeSet(parser);        new DecelerateInterpolator(mActivity, attrs);    }   ])', 1), ('([2:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[a8);        // check whether it starts even faster        assertTrue(delta5 > delta1);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[XML]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[TTLS]:[1]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[TTLS]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[2]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[1]:method_text:[edential)} method.     * <p>     * Test the Credential.UserCredential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[3]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[2]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[9]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[SOAP]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[EAP]:[5]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([7:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[EAP]:[7]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[EAP]:[2]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[EAP]:[3]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([1:/android/widget/cts/SwitchTest.java]:[XML]:[1]:method_text:[intList());        assertEquals(Mode.XOR, mSwitch.getThumbTintMode());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SwitchTest.java]:[XML]:[1]:method_text:[;        assertEquals(BlendMode.XOR, mSwitch.getThumbTintBlendMode());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SwitchTest.java]:[XML]:[1]:method_text:[intList());        assertEquals(Mode.XOR, mSwitch.getTrackTintMode());    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/SwitchTest.java]:[XML]:[1]:method_text:[etTrackTintList());        assertEquals(BlendMode.XOR, mSwitch.getTrackTintBlendMode());    }   ])', 1), ('([5:/android/cts/statsd/metric/CountMetricsTests.java]:[TTLS]:[5]:method_text:[To(2);        assertThat(countData.getData(0).getBucketInfo(1).getCount()).isEqualTo(1);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[EAP]:[1]:method_text:[g.i(""# of preconfigured accounts="" + count);        return Integer.parseInt(count) > 0;    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/graphics/fonts/FontTest.java]:[XML]:[2]:method_text:[urces();        new Font.Builder(res, R.font.multiweight_family /* XML font */).build();    }   ])', 1), ('([2:/android/cts/backup/SuccessNotificationHostSideTest.java]:[EAP]:[2]:method_text:[ it to complete.     *   2. Verify that the observer app was informed about the backup.     */   ])', 1), ('([1:/android/cts/backup/SuccessNotificationHostSideTest.java]:[EAP]:[1]:method_text:[ it to complete.     *   2. Verify that the observer app was informed about the backup.     */   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[EAP]:[1]:method_text:[KGROUND_ACTIVITY, APP_A_FOREGROUND_ACTIVITY},                APP_A_FOREGROUND_ACTIVITY);    }   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[EAP]:[1]:method_text:[Y}, APP_A_FOREGROUND_ACTIVITY);        assertTaskStack(null, APP_A_BACKGROUND_ACTIVITY);    }   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[EAP]:[1]:method_text:[sertTaskStack(new ComponentName[]{APP_A_FOREGROUND_ACTIVITY}, APP_A_FOREGROUND_ACTIVITY);    }   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[EAP]:[1]:method_text:[ACTIVITY,                        APP_A_FOREGROUND_ACTIVITY}, APP_A_FOREGROUND_ACTIVITY);    }   ])', 1), ('([3:/android/server/wm/BackgroundActivityLaunchTest.java]:[EAP]:[3]:method_text:[ntent.putExtra(EVENT_NOTIFIER_EXTRA, eventNotifier);        mContext.sendBroadcast(intent);    }}])', 1), ('([2:/android/view/animation/cts/AccelerateDecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/view/animation/cts/AccelerateDecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[l.asAttributeSet(parser);        new AccelerateDecelerateInterpolator(mActivity, attrs);    }   ])', 1), ('([2:/android/view/animation/cts/AccelerateDecelerateInterpolatorTest.java]:[XML]:[2]:method_text:[lpha5 - alpha4;        assertTrue(delta1 < delta2);        assertTrue(delta3 > delta4);    }   ])', 1), ('([2:/android/view/animation/cts/RotateAnimationTest.java]:[XML]:[2]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/view/animation/cts/RotateAnimationTest.java]:[XML]:[2]:method_text:[ new RotateAnimation(-0.6f, -0.6f, Animation.ABSOLUTE, -0.6f, Animation.ABSOLUTE, -0.6f);    }   ])', 1)]"	""	""	"[('EAP', 87), ('XML', 32), ('TTLS', 3), ('SOAP', 1)]"	"[('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableApp None]', 3), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor None]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey None]', 2), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructor None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingOverride None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingPrecedence None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testAnrIsNotShown None]', 1), ('[RestoreAnyVersionTest checkSharedPrefIsOld None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDevicePolicyApn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFakedAppWidget None]', 1), ('[android.server.wm.AssistantStackTests testTranslucentAssistantActivityStackVisibility None]', 1), ('[android.cts.tagging.sdk29.manifest_enabled.TaggingTest testHeapTaggingEnabled None]', 1), ('[android.cts.tagging.sdk29.manifest_enabled.TaggingTest testHeapTaggingDisabled None]', 1), ('[android.ndef.cts.NdefTest testInvalidParsing None]', 1), ('[android.ndef.cts.NdefTest testCreateApplicationRecord None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromWorkProfile_targetIsPrimaryUser_launches None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromPrimaryUser_targetIsWorkProfile_launches None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromPrimaryUser_targetIsPrimaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromPrimaryUser_targetIsSecondaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromSecondaryUser_targetIsWorkProfile_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromPrimaryUser_targetIsPrimaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromPrimaryUser_targetIsSecondaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromSecondaryUser_targetIsWorkProfile_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromWorProfile_targetIsPrimaryUser_notNull None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromPrimaryUser_targetIsWorkProfile_notNull None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabelIconDrawable_callingFromPrimaryUser_targetIsPrimaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabelIconDrawable_callingFromPrimaryUser_targetIsSecondaryUser_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabelIconDrawable_callingFromSecondaryUser_targetIsWorkProfile_throwsSecurityException None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingIconDrawable_callingFromWorkProfile_targetIsPrimaryUser_notNull None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingIconDrawable_callingFromPrimaryUser_targetIsWorkProfile_notNull None]', 1), ('[android.security.cts.TestMedi testPocCVE_2016_4658 None]', 1), ('[android.security.cts.TestMedi testPocCVE_2016_5131 None]', 1), ('[android.widget.cts.RadioGroup_LayoutParamsTest testSetBaseAttributes None]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart None]', 1), ('[android.util.cts.XmlTest testParseStringContentHandler None]', 1), ('[android.util.cts.XmlTest testParseReaderContentHander None]', 1), ('[android.util.cts.XmlTest testParseInputStreamEncodingContentHandler None]', 1), ('[android.util.cts.XmlTest testNewSerializer None]', 1), ('[android.util.cts.XmlTest testFindEncodingByName None]', 1), ('[android.util.cts.XmlTest testAsAttributeSet None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testDrawingOrderInImportantParentFollowsXmlOrder None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testDrawingOrderGettingAllViewsFollowsXmlOrder None]', 1), ('[android.cts.tagging.disabled.TaggingTest testHeapTaggingEnabled None]', 1), ('[android.cts.tagging.disabled.TaggingTest testHeapTaggingDisabled None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase4 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper isCheckpointSupported None]', 1), ('[com.android.cts.delegate.EnableSystemAppDelegateTest testCannotAccessApis None]', 1), ('[com.android.cts.delegate.EnableSystemAppDelegateTest testCanAccessApis None]', 1), ('[android.view.animation.cts.DecelerateInterpolatorTest testConstructor None]', 1), ('[android.view.animation.cts.DecelerateInterpolatorTest testDecelerateInterpolator None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[android.widget.cts.SwitchTest testAccessThumbTint None]', 1), ('[android.widget.cts.SwitchTest testAccessThumbTintBlendMode None]', 1), ('[android.widget.cts.SwitchTest testAccessTrackTint None]', 1), ('[android.widget.cts.SwitchTest testAccessTrackTintBlendMode None]', 1), ('[android.widget.cts.SwitchTest testAccessThumbDrawable None]', 1), ('[android.widget.cts.SwitchTest testAccessTrackDrawable None]', 1), ('[android.cts.statsd.metric.CountMetricsTests testEventCountWithConditionAndActivation None]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest runCleanupTestOnlyOwnerAllowingFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork None]', 1), ('[android.graphics.fonts.FontTest testBuilder_asset_invalid_xml_font None]', 1), ('[android.cts.backup.SuccessNotificationHostSideTest addBackupFinishedNotificationReceiver None]', 1), ('[android.cts.backup.SuccessNotificationHostSideTest testSuccessNotificationForKeyValueBackup None]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testActivityBroughtToTopOfTaskWhenLaunchedInTheBackground None]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testActivityNotBlockedWhenForegroundActivityLaunchInDifferentTask None]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testActivityBlockedWhenForegroundActivityRestartsItself None]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testSecondActivityBlockedWhenBackgroundActivityLaunch None]', 1), ('[android.server.wm.BackgroundActivityLaunchTest testDeviceOwner None]', 1), ('[android.view.animation.cts.AccelerateDecelerateInterpolatorTest testConstructor None]', 1), ('[android.view.animation.cts.AccelerateDecelerateInterpolatorTest testAccelerateDecelerateInterpolator None]', 1), ('[android.view.animation.cts.RotateAnimationTest testConstructors None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-4"	"7.4.2.4/C-1-4"	"07040204.670104"	"""C-1-4] MUST declare android.hardware.wifi.passpoint feature flag."""	""	""	"android.hardware.wifi.passpoint"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-4-4"	"9.8.2/H-4-4"	"09080200.720404"	""">9.8.2/H-4-4] MUST display the list of Recent and Active apps using the microphone as returned from PermissionManager.getIndicatorAppOpUsageData(), along with any attribution messages associated with them. If Handheld device implementations declare android.hardware.camera.any, they: [<a href=""#9_8_2_privacy"""""	""	""	"android.hardware.camera.any PermissionManager.getIndicatorAppOpUsageData getIndicatorAppOpUsageData()"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1)]"	"[('(1,android.hardware.camera.any,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 2)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera.any]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 2)]"	""	""	"[('android.hardware.camera.any', 2)]"	""
"272:752378) 9.10  . Device Integrity"	"9.10"	"C-1-11"	"9.10/C-1-11"	"09100000.670111"	"""C-1-11] MUST securely erase all user data during bootloader unlock and lock, as per &#39;9.12. Data Deletion&#39; (including the userdata partition and any NVRAM spaces)."""	""	""	"NVRAM"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
""	"7.1.4.1"	"A-0-1"	"7.1.4.1/A-0-1"	"07010401.650001"	""">7.1.4.1/A-0-1] MUST declare OpenGL ES 3.1 or higher. [<a href=""#7_1_display_and_graphics"""""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	""	"3.5.2"	"03050200.48"	"""data-text=""3.5.2. Application Hibernation"">3.5.2. Application Hibernation If device implementations include App Hibernation that is included in AOSP or extends the feature that is included in AOSP, then they: [C-1-1] MUST meet all the requirements in section 3.5.1 except for [C-1-6] and [C-1-3]. [C-1-2] MUST only apply the restriction on the app for a user when there is evidence that the user has not used the app for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer. Usage MUST be defined by either explicit user interaction via the [UsageStats#getLastTimeVisible()]( https://developer.android.com/reference/android/app/usage/UsageStats#getLastTimeVisible()) API or anything that would cause an app to leave the force-stopped state, including service bindings, content provider bindings, explicit broadcasts, etc., which will be tracked by a new API UsageStats#getLastTimeAnyComponentUsed(). [C-1-3] MUST only apply restrictions affecting all device users when there is evidence that the package has not been used by ANY user for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer. [C-1-4] MUST NOT render the app unable to respond to activity intents, service bindings, content provider requests, or explicit broadcasts. App Hibernation in AOSP meets the above requirements. <h3 id=""36_api_namespaces"" """	""	""	"RECOMMENDED getLastTimeVisible() getLastTimeAnyComponentUsed() ANY"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 18), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableWrapperTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamObjectTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 2), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/BatteryStatsManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RSASignatureTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityManagerGetConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MinimalPostProcessingTests.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/EmbossMaskFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/fragment/src/android/fragment/cts/FragmentTransactionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/MatrixCursor_RowBuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextPolicyTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/android/jvmti/cts/JvmtiTrackingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/NetworkRegistrationInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1)]"	"[('(4,ANY,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(1,ANY,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,ANY,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(8,ANY,/android/transition/cts/FadeTest.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(5,ANY,/RestoreAnyVersionTest.java)', 1), ('(3,ANY,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(2,ANY,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ANY,/android/view/cts/PointerCaptureTest.java)', 1), ('(29,ANY,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(2,ANY,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(2,ANY,/android/server/wm/AssistantStackTests.java)', 1), ('(1,ANY,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,ANY,/android/server/wm/ActivityManagerGetConfigTests.java)', 1), ('(2,ANY,/android/security/cts/STKFrameworkTest.java)', 1), ('(1,ANY,/android/adb/cts/AdbHostTest.java)', 1), ('(3,ANY,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(1,ANY,/android/server/wm/MinimalPostProcessingTests.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,ANY,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,ANY,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,ANY,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(1,ANY,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(2,ANY,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(8,ANY,/android/view/cts/ActionModeTest.java)', 1), ('(1,ANY,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,ANY,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(5,ANY,/android/security/cts/TestMedia.java)', 1), ('(1,ANY,/android/graphics/cts/EmbossMaskFilterTest.java)', 1), ('(5,ANY,/android/media/cts/AudioTrackTest.java)', 1), ('(3,ANY,/android/autofillservice/cts/FillEventHistoryTest.java)', 1), ('(4,ANY,/android/util/proto/cts/ProtoOutputStreamObjectTest.java)', 1), ('(1,ANY,/android/fragment/cts/FragmentTransactionTest.java)', 1), ('(1,ANY,/android/database/cts/MatrixCursor_RowBuilderTest.java)', 1), ('(1,ANY,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(3,ANY,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(1,ANY,/android/server/wm/WindowContextPolicyTests.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,ANY,/android/jvmti/cts/JvmtiTrackingTest.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java)', 1), ('(2,ANY,/android/carrierapi/cts/BugreportManagerTest.java)', 1), ('(1,ANY,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java)', 1), ('(4,ANY,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(38,ANY,/android/graphics/drawable/cts/DrawableWrapperTest.java)', 1), ('(15,ANY,/android/print/cts/PrintAttributesTest.java)', 1), ('(1,ANY,/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(1,ANY,/android/server/wm/BackgroundActivityLaunchTest.java)', 1), ('(6,ANY,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(1,ANY,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(3,ANY,/android/telephony/cts/BatteryStatsManagerTest.java)', 1), ('(2,ANY,/android/fragment/cts/FragmentLifecycleTest.java)', 1), ('(2,ANY,/android/keystore/cts/RSASignatureTest.java)', 1), ('(29,ANY,/android/view/cts/ViewTest.java)', 1)]"	"[('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[butes to the second selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ibutes to the third selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ed to be the second selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ted to be the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[n so that it does not affect other tests.            view.cancelDragAndDrop();        }    }   ])', 2), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[ times(1)).onItemClick(eq(mExpandableListView),                any(), eq(100), eq(99L));    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[upClick(eq(mExpandableListView),                any(), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[(eq(mExpandableListView),                any(), eq(0), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[ANY]:[1]:method_text:[tch (IOException e) {            Log.w(TAG, ""Failed to connect to "" + server, e);        }    }}])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[ANY]:[1]:method_text:[ppears if the dev option is set even if the user specifically     * set to suppress it.     */   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[ANY]:[1]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([4:/android/transition/cts/FadeTest.java]:[ANY]:[4]:method_text:[e4);        verify(mListener, never()).onTransitionEnd(any());        waitForEnd(1000);    }   ])', 1), ('([3:/android/transition/cts/FadeTest.java]:[ANY]:[3]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ANY]:[1]:method_text:[neration, including requesting Key Attestation, for all supported key     * algorithms.     */   ])', 1), ('([5:/RestoreAnyVersionTest.java]:[ANY]:[5]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[ANY]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([2:/android/media/cts/MediaDrmMetricsTest.java]:[ANY]:[2]:method_text:[   BaseEncoding.base16().encode(sid2).toLowerCase()));       drm.close();    }    @Presubmit   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ANY]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ANY]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[ANY]:[1]:method_text:[Capture(true);        releaseCaptureSync(mTarget);        assertPointerCapture(false);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[tion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[of these information, just make sure they are in right     * condition(>0 or not null).     */   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[3]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[2]:method_text:[yManager#getRadioPowerState()} does not throw any exception     * and returns radio on.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ow any     * exception. TODO enhance later if we have an API to get data enabled state.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ootRadio()} does not throw any exception     * and final radio state is radio power on.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[pType(int)} does not throw any exception     * for all supported subscription app type.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[   * Verifies that {@link TelephonyManager#getIsimDomain()} does not throw any exception     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[* and has the correct permissions.     */    @Ignore(""API moved back to @hide for Android R."")   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ ensure {@link NetworkRegistrationInfo#isRoaming()} does not throw any     * exception.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[throw any     * exception and returns valid result     * @see ServiceState.RoamingType     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ exception and returns valid result     * @see android.telephony.Annotation.NetworkType     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[2]:method_text:[;        }    }    /**     * Tests {@link TelephonyManager#updateAvailableNetworks}     */   ])', 1), ('([10:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[10]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[ANY]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[ANY]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ANY]:[1]:method_text:[tack should be focused."",                mDefaultWindowingMode, ACTIVITY_TYPE_STANDARD);    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ANY]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[ANY]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/server/wm/ActivityManagerGetConfigTests.java]:[ANY]:[1]:method_text:[""Expected features does not match"",                featureNames, deviceConfig.features);    }   ])', 1), ('([2:/android/security/cts/STKFrameworkTest.java]:[ANY]:[2]:method_text:[as it is protected by permission in             * patched devices             */        }    }}])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[ANY]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 1), ('([1:/android/server/wm/MinimalPostProcessingTests.java]:[ANY]:[1]:method_text:[ssingRequested(displayId);        assertTrue(supported ? requested == on : !requested);    }   ])', 1), ('([1:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[ANY]:[1]:method_text:[xception for adding too many strokes."");        } catch (RuntimeException e) {        }    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[ANY]:[1]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[ANY]:[1]:method_text:[        assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isTrue();    }   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[ANY]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[ANY]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ANY]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ANY]:[1]:method_text:[reStatsForUid.getDataBytes())                .isEqualTo(0L);        blobData.delete();    }   ])', 1), ('([1:/android/view/cts/ActionModeTest.java]:[ANY]:[1]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([7:/android/view/cts/ActionModeTest.java]:[ANY]:[7]:method_text:[nGetContentRect(any(ActionMode.class), any(View.class),                any(Rect.class));    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[ANY]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[ANY]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[ANY]:[2]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([3:/android/security/cts/TestMedia.java]:[ANY]:[3]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2018-10"")   ])', 1), ('([2:/android/security/cts/TestMedia.java]:[ANY]:[2]:method_text:[ test methods     ******************************************************************************/}])', 1), ('([1:/android/graphics/cts/EmbossMaskFilterTest.java]:[ANY]:[1]:method_text:[xel) + Color.green(pixel) + Color.blue(pixel);            }        }        return color;    }}])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[ANY]:[2]:method_text:[        track.release();        Thread.sleep(waitMsec); // wait for release to complete    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[e2 > 0);    }    // Test AudioTrack to see if there are any problems with large frame counts.   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[ble to create "" + MAX_TRACKS + "" tracks - that\'s too many!"",            n < MAX_TRACKS);    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[uires HW support,              // however other exception failures are not OK.        }    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[no events where generated        InstrumentedAutoFillService.assertNoFillEventHistory();    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[but     * the user manually entered values that match what was provided by the service.     */   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[entered values that match what was provided by the service on different     * datasets.     */   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[1]:method_text:[ed startObject / endObject calls: too many endObject     * with objects that have data.     */   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[2]:method_text:[t mismatched startObject / endObject calls: too many endObject     * with empty objects     */   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[1]:method_text:[ startObject / endObject calls: Trailing startObject     * with objects that have data.     */   ])', 1), ('([1:/android/fragment/cts/FragmentTransactionTest.java]:[ANY]:[1]:method_text:[ingStateLoss()     * and commitNowAllowingStateLoss() by just dropping the transaction.     */   ])', 1), ('([1:/android/database/cts/MatrixCursor_RowBuilderTest.java]:[ANY]:[1]:method_text:[      }        assertNotNull(cursor.newRow());        assertEquals(2, cursor.getCount());    }}])', 1), ('([1:/android/telephony/cts/SubscriptionManagerTest.java]:[ANY]:[1]:method_text:[tSubscriptionId() == activeDataSubIdCurrent);            assertTrue(foundSub);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[ remaining delegations.            setDelegatedScopes(DELEGATE_APP_PKG, null);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[ANY]:[1]:method_text:[ first initialized. Calling this API at     * any other time should throw an exception.     */   ])', 1), ('([1:/android/server/wm/WindowContextPolicyTests.java]:[ANY]:[1]:method_text:[    for (int i = 0; i < 6; i++) {            createWindowContext(display.mId);        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[ANY]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/jvmti/cts/JvmtiTrackingTest.java]:[ANY]:[1]:method_text:[        Double.class.getName();    }    private ArrayList<Object> l = new ArrayList<>(100);   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[ANY]:[1]:method_text:[ = mActivity.getWindow().getDecorView().getWindowToken();        });        return params;    }}])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[;        FileUtils.closeQuietly(mScreenshotFd);        killCurrentBugreportIfRunning();    }   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[ssertThat(bugreportFile2.length()).isEqualTo(0L);        assertFdIsClosed(bugreportFd2);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java]:[ANY]:[1]:method_text:[= 0);        assertEquals(label, Phone.getTypeLabel(mResources, Phone.TYPE_CUSTOM, label));    }}])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[ANY]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[4]:method_text:[pper(Drawable dr) {            super(dr);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[3]:method_text:[      verify(cb, never()).invalidateDrawable(any());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([9:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[9]:method_text:[ never()).scheduleDrawable(any(), any(), anyLong());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[6]:method_text:[heduleDrawable(null, null);        verify(cb, never()).unscheduleDrawable(any(), any());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[4]:method_text:[w(any());        wrapper.draw(null);        verify(mockDrawable, times(1)).draw(any());    }   ])', 1), ('([1:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[1]:method_text:[wrapper.getPadding(new Rect());        verify(mockDrawable, times(1)).getPadding(any());    }   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[6]:method_text:[isible());        verify(mockDrawable, times(1)).setVisible(anyBoolean(), anyBoolean());    }   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[3]:method_text:[        wrapper.setAlpha(-1);        verify(mockDrawable, times(1)).setAlpha(anyInt());    }   ])', 1), ('([2:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[2]:method_text:[apper.setColorFilter(null);        verify(mockDrawable, times(1)).setColorFilter(any());    }   ])', 1), ('([3:/android/print/cts/PrintAttributesTest.java]:[ANY]:[3]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[the     * default attributes.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[   * supported by the printer.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[because of historical reasons.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[ANY]:[1]:method_text:[nsure {@link NetworkRegistrationInfo#isSearching()} does not throw any     * exception.     */   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[ANY]:[1]:method_text:[      stopTestPackage(TEST_PACKAGE_APP_B);        AppOpsUtils.reset(APP_A_PACKAGE_NAME);    }   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[ANY]:[1]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[ANY]:[5]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[ANY]:[1]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/telephony/cts/BatteryStatsManagerTest.java]:[ANY]:[1]:method_text:[StatsManagerTest{    /** Test that {@link CellularBatteryStats} getters return sane values. */   ])', 1), ('([2:/android/telephony/cts/BatteryStatsManagerTest.java]:[ANY]:[2]:method_text:[tteryStats.getTimeInRxSignalStrengthLevelMicros(                anyInt())).isAtLeast(-1L);    }}])', 1), ('([1:/android/fragment/cts/FragmentLifecycleTest.java]:[ANY]:[1]:method_text:[ter this state.        assertFalse(""fragment is detached"", strictFragment.isDetached());    }   ])', 1), ('([1:/android/fragment/cts/FragmentLifecycleTest.java]:[ANY]:[1]:method_text:[onCreateView.     * This means the child fragment will have received onAttach/onCreate.     */   ])', 1), ('([1:/android/keystore/cts/RSASignatureTest.java]:[ANY]:[1]:method_text:[  }        }        SIGNATURE_ALGORITHMS = sigAlgs.toArray(new String[sigAlgs.size()]);    }   ])', 1), ('([1:/android/keystore/cts/RSASignatureTest.java]:[ANY]:[1]:method_text:[     R.raw.rsa_key4_4096_pkcs8, R.raw.rsa_key4_4096_cert, importParams),                });    }}])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[ND_IN_MILLIS, mActivity::hasWindowFocus);        assertTrue(mActivity.hasWindowFocus());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[gate);        view.setTouchDelegate(null);        assertNull(view.getTouchDelegate());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[, times(1)).onCreateContextMenu(                    any(), eq(view), any());        });    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[        assertFalse(view.dispatchGenericMotionEvent(event3));        event3.recycle();    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[rent.hasShowContextMenuForChild());        verify(listener, times(1)).onLongClick(view);    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[False(parent.hasShowContextMenuForChildXY());        verify(listener).onLongClick(view);    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[        assertTrue(view.performLongClick());        assertTrue(view.isLongClickable());    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[rue(view.performContextClick());        verify(listener, times(1)).onContextClick(view);    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[   assertTrue(view.performContextClick());        assertTrue(view.isContextClickable());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[istener.fired()); // checks that both up and down were received        listener.reset();    }   ])', 1), ('([3:/android/view/cts/ViewTest.java]:[ANY]:[3]:method_text:[getValue().getKeyCode());        assertFalse(view.hasCalledOnKeyUp());    }    @UiThreadTest   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[ventTime(), 20 /*delta*/);        }        event1.recycle();        event2.recycle();    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[   assertEquals(new Rect(9, 8, 11, 11), grandParent.getLastRequestedChildRectOnScreen());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[rify(touchListener, times(1)).onTouch(view, obscuredTouch);        reset(touchListener);    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());        return shadowBuilder;    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[uInflater getMenuInflater() {                    return null;                }            };   ])', 1)]"	"https://developer.android.com"	""	"[('ANY', 135)]"	"[('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testPerformItemClick None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnGroupClickListener None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnChildClickListener None]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingOverride None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest testMode None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateECKeyPairUsingStrongBox None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsSession None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest testRequestAndReleaseWorkOnAnyView None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDevicePolicyApn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testListen None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetImeiForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetRadioPowerState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetCarrierDataEnabled None]', 1), ('[android.telephony.cts.TelephonyManagerTest testRebootRadio None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAidForAppType None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetIsimDomain None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoRegisteredPlmn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoIsRoaming None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoGetRoamingType None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testPreferredOpportunisticDataSubscription None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackFinishToPreviousApp None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.server.wm.ActivityManagerGetConfigTests isLowRamDevice None]', 1), ('[android.security.cts.STKFrameworkTest testInterceptedSIMCommandsToTelephony None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_manualRequest None]', 1), ('[android.server.wm.MinimalPostProcessingTests isMinimalPostProcessingSupported None]', 1), ('[android.accessibilityservice.cts.GestureDescriptionTest testAddStroke_allowUpToMaxPaths None]', 1), ('[android.content.cts.ClipDescriptionTest testIsStyledText None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease None]', 1), ('[android.view.cts.ActionModeTest testInvalidateContentRectOnFloatingCallsCallback None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9527 None]', 1), ('[android.graphics.cts.EmbossMaskFilterTest testEmbossMaskFilter None]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData None]', 1), ('[android.media.cts.AudioTrackTest testAudioTrackBufferSize None]', 1), ('[android.media.cts.AudioTrackTest testMaxAudioTracks None]', 1), ('[android.media.cts.AudioTrackTest testTunerConfiguration None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_whenServiceDidntDoAnything None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_oneDatasetSelected_Changed_thenChangedBack None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_noDatasetSelected_butManuallyEntered None]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithData None]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithoutData None]', 1), ('[android.fragment.cts.FragmentTransactionTest isEmpty None]', 1), ('[android.database.cts.MatrixCursor_RowBuilderTest testAdd None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testGetActiveDataSubscriptionId None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest registerServiceWrappers None]', 1), ('[android.server.wm.WindowContextPolicyTests testCreateTooManyWindowContextWithoutViewThrowException None]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties None]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testGetAnchorForDropDownForAutoCompleteTextView_returnsTextViewNode None]', 1), ('[android.carrierapi.cts.BugreportManagerTest TestName None]', 1), ('[android.carrierapi.cts.BugreportManagerTest hasEarlyReportFinished None]', 1), ('[android.provider.cts.contacts.ContactsContract_CommonDataKinds_PhoneTest testGetTypeLabel None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testInvalidateDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testScheduleDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testUnscheduleDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testDraw None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testGetPadding None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetVisible None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetAlpha None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetColorFilter None]', 1), ('[android.print.cts.PrintAttributesTest isEmpty None]', 1), ('[android.telephony.cts.NetworkRegistrationInfoTest testGetEmergencyServices None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.telephony.cts.BatteryStatsManagerTest testGetCellularBatteryStats None]', 1), ('[android.fragment.cts.FragmentLifecycleTest isAdded None]', 1), ('[android.fragment.cts.FragmentLifecycleTest fragmentDestroyedOnFinish None]', 1), ('[android.keystore.cts.RSASignatureTest testSmallKeyRejected None]', 1), ('[android.view.cts.ViewTest testAccessTouchDelegate None]', 1), ('[android.view.cts.ViewTest testCreateContextMenu None]', 1), ('[android.view.cts.ViewTest testSetOnGenericMotionListener None]', 1), ('[android.view.cts.ViewTest testPerformLongClick None]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY_WithListener None]', 1), ('[android.view.cts.ViewTest testSetOnLongClickListener None]', 1), ('[android.view.cts.ViewTest testPerformContextClick None]', 1), ('[android.view.cts.ViewTest testSetOnContextClickListener None]', 1), ('[android.view.cts.ViewTest testUnhandledKeys None]', 1), ('[android.view.cts.ViewTest testDispatchKeyEvent None]', 1), ('[android.view.cts.ViewTest testDispatchTouchEvent None]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen5 None]', 1), ('[android.view.cts.ViewTest testFilterTouchesWhenObscured None]', 1), ('[android.view.cts.ViewTest testOverlappingRendering None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	"09080200.720503"	""">9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"266:737364) 9.8.13  . SensorPrivacyManager"	"9.8.13"	""	"9.8.13"	"09081300.48"	"""data-text=""9.8.13. SensorPrivacyManager"">9.8.13. SensorPrivacyManager If device implementations provide the user a software affordance to turn off the camera and/or microphone input for the device implementation, they: [C-1-1] MUST accurately return &#39;true&#39; for the relevant supportsSensorToggle() API method. [C-1-2] MUST, when an app tries to access a blocked microphone or camera, present the user with a non-dismissable user affordance that clearly indicates that the sensor is blocked and requires a choice to continue blocking or unblock as per the AOSP implementation which meets this requirement. [C-1-3] MUST only pass blank (or fake) camera and audio data to apps and not report an error code due to the user not turning on the camera nor microphone via the user affordance presented per [C-1-2] above. <h3 id=""99_data_storage_encryption"" """	""	""	"supportsSensorToggle()"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-17"	"9.9.3/C-1-17"	"09090300.670117"	"""C-1-17] MUST ensure that all encrypted filesystem metadata blocks on persistent storage were encrypted using distinct combinations of encryption key and initialization vector (IV). Have keys protecting CE and DE storage areas which: """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-6"	"3.18/C-0-6"	"03180000.670006"	"""C-0-6] MUST NOT install application packages from unknown sources, unless the app that requests the installation meets all the following requirements: It MUST declare the REQUEST_INSTALL_PACKAGES permission or have the android:targetSdkVersion set at 24 or lower. It MUST have been granted permission by the user to install apps from unknown sources. SHOULD provide a user affordance to grant/revoke the permission to install apps from unknown sources per application, but MAY choose to implement this as a no-op and return RESULT_CANCELED for startActivityForResult(), if the device implementation does not want to allow users to have this choice. However, even in such cases, they SHOULD indicate to the user why there is no such choice presented. """	""	""	"startActivityForResult() REQUEST_INSTALL_PACKAGES RESULT_CANCELED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/AuthenticationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/AuthenticationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/SettingsIntentTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/FragmentReceiveResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/host/src/android/scopedstorage/cts/host/ScopedStorageHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/MediaStorageApp/src/com/android/cts/mediastorageapp/MediaStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/AppStandbyTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/silentupdate/src/com/android/tests/hostside/silentupdate/SilentUpdateHostsideTests.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/Instrumentation_ActivityResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/AtomTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/os/src/android/os/cts/StaticSharedLibsHostTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/StorageStatsApp/src/com/android/cts/storagestatsapp/StorageStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/ExactAlarmsTest.java', 1)]"	"[('(2,RESULT_CANCELED,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 2), ('(1,REQUEST_INSTALL_PACKAGES,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(5,REQUEST_INSTALL_PACKAGES,/android/appsecurity/cts/ExternalStorageHostTest.java)', 2), ('(3,RESULT_CANCELED,/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java)', 2), ('(4,RESULT_CANCELED,/android/telephony/ims/cts/ImsServiceTest.java)', 2), ('(1,RESULT_CANCELED,/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java)', 2), ('(2,RESULT_CANCELED,/android/autofillservice/cts/SettingsIntentTest.java)', 1), ('(1,REQUEST_INSTALL_PACKAGES,/com/android/server/cts/device/statsd/AtomTests.java)', 1), ('(3,RESULT_CANCELED,/android/autofillservice/cts/dropdown/AuthenticationTest.java)', 1), ('(3,RESULT_CANCELED,/android/autofillservice/cts/AuthenticationTest.java)', 1), ('(1,RESULT_CANCELED,/com/android/cts/mediastorageapp/MediaStorageTest.java)', 1), ('(1,RESULT_CANCELED,/android/alarmmanager/cts/AppStandbyTests.java)', 1), ('(10,RESULT_CANCELED,/android/app/role/cts/RoleManagerTest.java)', 1), ('(1,REQUEST_INSTALL_PACKAGES,/com/android/tests/hostside/silentupdate/SilentUpdateHostsideTests.java)', 1), ('(2,RESULT_CANCELED,/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java)', 1), ('(4,RESULT_CANCELED,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(2,RESULT_CANCELED,/android/app/cts/Instrumentation_ActivityResultTest.java)', 1), ('(6,RESULT_CANCELED,/android/admin/cts/DeviceAdminActivationTest.java)', 1), ('(1,REQUEST_INSTALL_PACKAGES,/com/android/server/cts/device/statsdatom/AtomTests.java)', 1), ('(4,RESULT_CANCELED,/android/app/cts/FragmentReceiveResultTest.java)', 1), ('(2,REQUEST_INSTALL_PACKAGES,/android/os/cts/StaticSharedLibsHostTests.java)', 1), ('(4,REQUEST_INSTALL_PACKAGES,/android/scopedstorage/cts/host/ScopedStorageHostTest.java)', 1), ('(1,RESULT_CANCELED,/com/android/cts/storagestatsapp/StorageStatsTest.java)', 1), ('(1,RESULT_CANCELED,/android/alarmmanager/cts/ExactAlarmsTest.java)', 1)]"	"[('([1:/android/app/role/cts/RoleManagerTest.java]:[RESULT_CANCELED]:[1]:method_text:[= waitForResult();        assertThat(result.first).isEqualTo(Activity.RESULT_CANCELED);    }   ])', 4), ('([1:/android/app/role/cts/RoleManagerTest.java]:[RESULT_CANCELED]:[1]:method_text:[t(TIMEOUT_MILLIS);        assertThat(result.first).isEqualTo(Activity.RESULT_CANCELED);    }   ])', 4), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[RESULT_CANCELED]:[1]:method_text:[r.getCarrierService()                .getMmTelFeature().getSmsImplementation().sentPdu);    }   ])', 4), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[RESULT_CANCELED]:[1]:method_text:[(SmsReceiverHelper.EXTRA_RESULT_CODE,                        Activity.RESULT_CANCELED));    }   ])', 4), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[REQUEST_INSTALL_PACKAGES]:[1]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 2), ('([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[REQUEST_INSTALL_PACKAGES]:[1]:method_text:[ leave gifts in obb     * directories belonging to other apps, and those apps can read.     */   ])', 2), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[REQUEST_INSTALL_PACKAGES]:[2]:method_text:[nstallPackage(WRITE_PKG_2);            getDevice().uninstallPackage(NONE_PKG);        }    }   ])', 2), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[REQUEST_INSTALL_PACKAGES]:[2]:method_text:[-user emulated storage environment, ensuring that each user has     * isolated storage.     */   ])', 2), ('([1:/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java]:[RESULT_CANCELED]:[1]:method_text:[rActivityLaunched() {                mActivity = getActivity();            }        };    }   ])', 2), ('([2:/android/scopedstorage/cts/host/ScopedStorageHostTest.java]:[REQUEST_INSTALL_PACKAGES]:[2]:method_text:["");            revokePermissions(""android.permission.WRITE_EXTERNAL_STORAGE"");        }    }   ])', 2), ('([1:/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java]:[RESULT_CANCELED]:[1]:method_text:[SCREENSHOT, false));        } finally {            receiver.unregisterQuietly();        }    }}])', 2), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[le();        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/SettingsIntentTest.java]:[RESULT_CANCELED]:[1]:method_text:[lt.        mUiBot.pressBack();        mActivity.assertResult(Activity.RESULT_CANCELED);    }   ])', 1), ('([1:/android/autofillservice/cts/SettingsIntentTest.java]:[RESULT_CANCELED]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[REQUEST_INSTALL_PACKAGES]:[1]:method_text:[NSTALLER, 98);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);    }   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java]:[RESULT_CANCELED]:[2]:method_text:[mUiBot.assertShownByRelativeId(ID_USERNAME);        sAugmentedReplier.getNextFillRequest();    }}])', 1), ('([1:/android/autofillservice/cts/dropdown/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[attern;public class AuthenticationTest extends AbstractLoginActivityTestCase {    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/dropdown/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[.assertNoDatasets();        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([1:/android/autofillservice/cts/dropdown/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[alue = data.getString(""numbers"");        assertThat(extraValue).isEqualTo(""4815162342"");    }   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAugmentedAuthTest.java]:[RESULT_CANCELED]:[2]:method_text:[       mUiBot.waitForIdle();        assertThat(unField.getText().toString()).isEqualTo("""");    }}])', 1), ('([1:/android/autofillservice/cts/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[va.util.regex.Pattern;public class AuthenticationTest extends AbstractLoginActivityTestCase {   ])', 1), ('([1:/android/autofillservice/cts/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[.assertNoDatasets();        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1), ('([1:/android/autofillservice/cts/AuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[alue = data.getString(""numbers"");        assertThat(extraValue).isEqualTo(""4815162342"");    }   ])', 1), ('([1:/com/android/cts/mediastorageapp/MediaStorageTest.java]:[RESULT_CANCELED]:[1]:method_text:[ure(String feature) {        return mContext.getPackageManager().hasSystemFeature(feature);    }}])', 1), ('([1:/android/alarmmanager/cts/AppStandbyTests.java]:[RESULT_CANCELED]:[1]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[RESULT_CANCELED]:[1]:method_text:[itForResult(true);        assertThat(result.first).isEqualTo(Activity.RESULT_CANCELED);    }   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[RESULT_CANCELED]:[1]:method_text:[l --user "" + Process.myUserHandle().getIdentifier() + "" ""                + packageName);    }   ])', 1), ('([1:/com/android/tests/hostside/silentupdate/SilentUpdateHostsideTests.java]:[REQUEST_INSTALL_PACKAGES]:[1]:method_text:[allTestApp() throws Exception {        uninstallPackage(""android.cts.silentupdate.app"");    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[RESULT_CANCELED]:[1]:method_text:[lt.        mUiBot.pressBack();        mActivity.assertResult(Activity.RESULT_CANCELED);    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/SettingsIntentTest.java]:[RESULT_CANCELED]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));    }}])', 1), ('([2:/android/app/cts/ActivityManagerProcessStateTest.java]:[RESULT_CANCELED]:[2]:method_text:[/**     * Test that background check does allow services to be started from activities.     */   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[RESULT_CANCELED]:[1]:method_text:[   /**     * Test that the foreground service app op does prevent the foreground state.     */   ])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[RESULT_CANCELED]:[1]:method_text:[* Test that a single ""can\'t save state"" app has the proper process management semantics.     */   ])', 1), ('([2:/android/app/cts/Instrumentation_ActivityResultTest.java]:[RESULT_CANCELED]:[2]:method_text:[T_CANCELED, intent);        assertEquals(Activity.RESULT_CANCELED, result.getResultCode());    }}])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminDeactivatedReceiver.class);    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[SULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver.class);    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver2.class);    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver3.class);    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[ULT_CANCELED);        assertDeviceAdminDeactivated(CtsDeviceAdminBrokenReceiver4.class);    }   ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[RESULT_CANCELED]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));    }}])', 1), ('([1:/com/android/server/cts/device/statsdatom/AtomTests.java]:[REQUEST_INSTALL_PACKAGES]:[1]:method_text:[114);        APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_RECORD_INCOMING_PHONE_AUDIO, 115);    }   ])', 1), ('([2:/android/app/cts/FragmentReceiveResultTest.java]:[RESULT_CANCELED]:[2]:method_text:[tActivity.EXTRA_RESULT_CONTENT);        assertEquals(""content 20"", data);    }    @SmallTest   ])', 1), ('([2:/android/app/cts/FragmentReceiveResultTest.java]:[RESULT_CANCELED]:[2]:method_text:[                }            }        });        getInstrumentation().waitForIdleSync();    }}])', 1), ('([2:/android/os/cts/StaticSharedLibsHostTests.java]:[REQUEST_INSTALL_PACKAGES]:[2]:method_text:[            reason = ""getDeclaredSharedLibraries() requires ACCESS_SHARED_LIBRARIES permission"")   ])', 1), ('([1:/com/android/cts/storagestatsapp/StorageStatsTest.java]:[RESULT_CANCELED]:[1]:method_text:[t.call(pkg, pkg, args);            return res.getLong(UtilsReceiver.EXTRA_BYTES);        }    }}])', 1), ('([1:/android/alarmmanager/cts/ExactAlarmsTest.java]:[RESULT_CANCELED]:[1]:method_text:[sult.get());        assertTrue(""canScheduleExactAlarm returned false"", apiResult.get());    }   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[fallback to dropdown when     * authentication done and then back to original Activity.     */   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[RESULT_CANCELED]:[1]:method_text:[UiBot.waitForIdle();        // Check the results.        mActivity.assertAutoFilled();    }   ])', 1)]"	""	""	"[('RESULT_CANCELED', 54), ('REQUEST_INSTALL_PACKAGES', 14)]"	"[('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 2), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthTwoFields None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageNoGifts None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testCanAccessOtherObbDirs None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testExternalStorageUnsharedObb None]', 2), ('[android.autofillservice.cts.inline.InlineAugmentedAuthTest InlineAugmentedAuthTest None]', 2), ('[android.autofillservice.cts.inline.InlineAugmentedAuthTest testDatasetAuth_resultCancel None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSms None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportQCompat None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportR None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsRSuccess None]', 2), ('[com.android.cts.deviceandprofileowner.AssistScreenCaptureDisabledTest testScreenCapturePossible_assist None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetNearbyAppStreamingPolicy_changesPolicy None]', 1), ('[android.autofillservice.cts.SettingsIntentTest testMultipleServicesShown None]', 1), ('[android.autofillservice.cts.SettingsIntentTest testWarningShown_userRejectsByTappingBack None]', 1), ('[android.autofillservice.cts.dropdown.AuthenticationTest testDatasetAuthTwoFields None]', 1), ('[android.autofillservice.cts.dropdown.AuthenticationTest testFillResponseAuthBothFields None]', 1), ('[android.autofillservice.cts.AuthenticationTest testDatasetAuthTwoFields None]', 1), ('[android.autofillservice.cts.AuthenticationTest testFillResponseAuthBothFields None]', 1), ('[com.android.cts.mediastorageapp.MediaStorageTest testMediaEscalation_RequestDelete_notShowConfirmDialog None]', 1), ('[android.alarmmanager.cts.AppStandbyTests setUpTests None]', 1), ('[android.app.role.cts.RoleManagerTest requestAssistantRoleThenDeniedAutomatically None]', 1), ('[com.android.tests.hostside.silentupdate.SilentUpdateHostsideTests uninstallTestApp None]', 1), ('[android.autofillservice.cts.servicebehavior.SettingsIntentTest testMultipleServicesShown None]', 1), ('[android.autofillservice.cts.servicebehavior.SettingsIntentTest testWarningShown_userRejectsByTappingBack None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckBroadcastService None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBackgroundCheckActivityService None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testBgRestrictedForegroundService None]', 1), ('[android.app.cts.Instrumentation_ActivityResultTest testActivityResultOp None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateGoodReceiverDisplaysActivationUi None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiverFails None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver2Fails None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver3Fails None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver4Fails None]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails None]', 1), ('[android.app.cts.FragmentReceiveResultTest testStartActivityForResultCanceled None]', 1), ('[android.app.cts.FragmentReceiveResultTest testStartIntentSenderForResultCanceled None]', 1), ('[android.os.cts.StaticSharedLibsHostTests testGetSharedLibrariesFullMode None]', 1), ('[android.scopedstorage.cts.host.ScopedStorageHostTest testCheckInstallerAppAccessToObbDirs None]', 1), ('[android.scopedstorage.cts.host.ScopedStorageHostTest testCheckInstallerAppCannotAccessDataDirs None]', 1), ('[com.android.cts.storagestatsapp.StorageStatsTest testCacheBehavior None]', 1), ('[android.alarmmanager.cts.ExactAlarmsTest canScheduleExactAlarmWhenChangeDisabled None]', 1)]"
"250:699468) 9.5  . Multi"	"9.5"	"C-2-2"	"9.5/C-2-2"	"09050000.670202"	"""C-2-2] MUST ensure that applications owned by and running on behalf of a given user cannot list, read, or write to the files owned by any other user, even if the data of both users are stored on the same volume or filesystem. Device implementations MAY create a single additional user profile of type android.os.usertype.profile.CLONE against the primary user (and only against the primary user) for the purpose of running dual instances of the same app. These dual instances share partially isolated storage, are presented to the end user in the launcher at the same time and appear in the same recents view. For example, this could be used to support the user installing two separate instances of a single app on a dual-SIM device. If device implementations create the additional user profile discussed above, then they: """	""	""	"SIM CLONE android.os.usertype.profile.CLONE"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentViewTests.java', 31), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/HardwareBitmapTests.java', 12), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/SimCallManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MinimalPostProcessingTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShapeTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/preconditions/app/src/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sample/src/android/sample/cts/SampleDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityStarterTests.java', 1)]"	"[('(1,SIM,/android/media/cts/SoundPoolTest.java)', 1), ('(1,SIM,/android/net/cts/TrafficStatsTest.java)', 1), ('(1,SIM,/android/cts/install/host/UpgradeTest.java)', 1), ('(1,SIM,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(13,SIM,/android/transition/cts/FadeTest.java)', 1), ('(2,SIM,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,SIM,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(2,SIM,/android/server/wm/DisplayTests.java)', 1), ('(1,SIM,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(12,SIM,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,CLONE,/android/view/cts/PointerCaptureTest.java)', 1), ('(5,SIM,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(70,SIM,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(13,CLONE,/android/app/cts/WearableExtenderTest.java)', 1), ('(7,SIM,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(3,SIM,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(2,SIM,/android/security/cts/STKFrameworkTest.java)', 1), ('(2,SIM,/android/server/wm/MinimalPostProcessingTests.java)', 1), ('(1,SIM,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(7,CLONE,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(1,SIM,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(2,SIM,/android/uirendering/cts/testclasses/ShapeTests.java)', 1), ('(5,SIM,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,SIM,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(2,SIM,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(1,SIM,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(3,SIM,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(39,SIM,/android/fragment/cts/FragmentViewTests.java)', 1), ('(12,SIM,/android/uirendering/cts/testclasses/HardwareBitmapTests.java)', 1), ('(1,SIM,/android/server/wm/WindowContextTests.java)', 1), ('(1,SIM,/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java)', 1), ('(1,SIM,/android/sample/cts/SampleDeviceTest.java)', 1), ('(3,SIM,/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java)', 1), ('(1,SIM,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(2,SIM,/android/media/cts/AudioTrackTest.java)', 1), ('(39,SIM,/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java)', 1), ('(32,SIM,/android/telecom/cts/SimCallManagerTest.java)', 1), ('(1,SIM,/com/android/cts/delegate/EnableSystemAppDelegateTest.java)', 1), ('(1,SIM,/android/server/wm/lifecycle/ActivityStarterTests.java)', 1), ('(40,SIM,/android/net/wifi/cts/WifiHotspot2Test.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[SIM]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 2), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[ity(),                R.drawable.golden_robot, new MSSIMComparer(0.95)).verify(result));    }   ])', 2), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[,                R.drawable.golden_hardwaretest_create_scaled, new MSSIMComparer(0.9)));    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[SIM]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[SIM]:[1]:method_text:[Stats.getMobileTxBytes() >= 0);        assertTrue(TrafficStats.getMobileRxBytes() >= 0);    }   ])', 1), ('([1:/android/cts/install/host/UpgradeTest.java]:[SIM]:[1]:method_text:[e + PHASE_FORMAT_SUFFIX, mInstallType, staged, mEnableRollback)))                .isTrue();    }}])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[SIM]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[SIM]:[1]:method_text:[;    }    // After a transition, a transitioned view as part of a scene should not be removed   ])', 1), ('([12:/android/transition/cts/FadeTest.java]:[SIM]:[12]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[SIM]:[1]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[SIM]:[1]:method_text:[s);            mDevicePolicyManager.removeKeyPair(getWho(), dev_unique_alias);        }    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[SIM]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([2:/android/server/wm/DisplayTests.java]:[SIM]:[2]:method_text:[                    .getResources().getConfiguration();            return config;        }    }}])', 1), ('([1:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[SIM]:[1]:method_text:[NotExist(""/sdcard/test.txt"");        assertFileDoesNotExist(""/data/local/tmp/test.txt"");    }   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[SIM]:[2]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[SIM]:[2]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([8:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[SIM]:[8]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CLONE]:[1]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([3:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[SIM]:[3]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[1]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([14:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[14]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[1]:method_text:[rifyDeviceId(deviceId);    }    /**     * Tests the max number of active SIMs method     */   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[4]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[1]:method_text:[          // Non-telephony may still have the property defined if it has a SIM.        }    }   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[3]:method_text:[          // Non-telephony may still have the property defined if it has a SIM.        }    }   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[4]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[5]:method_text:[   * Verifies that {@link TelephonyManager#getIsimDomain()} does not throw any exception     */   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[3]:method_text:[* and has the correct permissions.     */    @Ignore(""API moved back to @hide for Android R."")   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[3]:method_text:[e {@link NetworkRegistrationInfo#getRegisteredPlmn()} provides valid     * information.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[1]:method_text:[       }    }    /**     * Tests that setForbiddenPlmns properly handles null input     */   ])', 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[5]:method_text:[uld require MODIFY_PHONE_STATE""                    + ""permission to access."");        }    }   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[2]:method_text:[ntation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }   ])', 1), ('([11:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[11]:method_text:[ABLED,                TelephonyManager.SIM_STATE_LOADED).contains(simApplicationState));    }   ])', 1), ('([11:/android/telephony/cts/TelephonyManagerTest.java]:[SIM]:[11]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([11:/android/app/cts/WearableExtenderTest.java]:[CLONE]:[11]:method_text:[tionIndex, clone.getContentAction());        assertEquals(1, clone.getActions().size());    }   ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[CLONE]:[2]:method_text:[     assertEquals(""has correct cancel label"", ""cancel"", copiedExtender.getCancelLabel());    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[   * Install APK 2 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[   * Install APK B and make it the default SMS app and make sure the service gets bound.     */   ])', 1), (""([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[, mCurrentUserId);    }    /**     * APK 3 doesn't have a valid service to be bound.     */   ])"", 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[_CLIENT_SERVICE"");    }    /**     * APK 4 doesn\'t have a valid service to be bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[ ""More than one"");    }    /**     * APK 5 doesn\'t have a valid service to be bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[SERVICE not found"");    }    /**     * APK 6\'s service doesn\'t have android:process.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[SIM]:[1]:method_text:[     * Make sure when the SMS app gets updated, the service still gets bound correctly.     */   ])', 1), ('([3:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[SIM]:[3]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[SIM]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[SIM]:[1]:method_text:[as it is protected by permission in             * patched devices             */        }    }}])', 1), ('([1:/android/server/wm/MinimalPostProcessingTests.java]:[SIM]:[1]:method_text:[EFER_MPP);        assertDisplayRequestedMinimalPostProcessing(MPP_ACTIVITY, PREFER_MPP);    }   ])', 1), ('([1:/android/server/wm/MinimalPostProcessingTests.java]:[SIM]:[1]:method_text:[FER_MPP);        assertDisplayRequestedMinimalPostProcessing(MPP_ACTIVITY3, PREFER_MPP);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[SIM]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([3:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CLONE]:[3]:method_text:[ntentCaptureContext clone = cloneThroughParcel(context);        assertEverything(clone);    }   ])', 1), ('([4:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CLONE]:[4]:method_text:[ll();            return clone;        } finally {            parcel.recycle();        }    }}])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[SIM]:[1]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/android/uirendering/cts/testclasses/ShapeTests.java]:[SIM]:[1]:method_text:[h;@MediumTest@RunWith(AndroidJUnit4.class)public class ShapeTests extends ActivityTestBase {   ])', 1), ('([1:/android/uirendering/cts/testclasses/ShapeTests.java]:[SIM]:[1]:method_text:[ctivity(),                        R.drawable.golden_dashed_oval, new MSSIMComparer(0.90)));    }}])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[SIM]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[SIM]:[2]:method_text:[ mime,            String testFile, String muxFile, int bitrate, int framerate);    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[SIM]:[2]:method_text:[Mime, mInpPrefix + mTestFile,                    tmpPath, mBitrate, mFrameRate));        }    }}])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[SIM]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[SIM]:[1]:method_text:[mationDone);        commonAnimationAssertions(mActivity, before, false /* show */, ime());    }}])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[SIM]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[SIM]:[1]:method_text:[))                .isEqualTo(String.valueOf(sUserManager.getSerialNumberForUser(user)));    }   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[SIM]:[2]:method_text:[s the output of ""dumpsys storaged --force --hours 0.01"".     *     * @throws Exception     */   ])', 1), ('([1:/android/dumpsys/cts/StoragedDumpsysTest.java]:[SIM]:[1]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[s to multiple containers in the same transaction. Make sure that    // they pop correctly, too.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[agments remove the right Views. Popping the back stack should    // add the Views back properly   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[    // Removing a hidden fragment should remove the View and popping should bring it back hidden   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ragment should do nothing to the View and popping should bring    // the Fragment back detached   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ should be able to add and then remove and then    // add the same fragment in one transaction.   ])', 1), (""([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[Util.assertChildren(container);    }    // Removing a fragment that isn't in should not throw   ])"", 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[    // Hide a fragment and its View should be GONE. Then pop it and the View should be VISIBLE   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[LE, fragment.getView().getVisibility());    }    // Hiding a hidden fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[Rule);        // should not throw    }    // Hiding a non-existing fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ hidden fragment and its View should be VISIBLE. Then pop it and the View should be    // GONE.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[NE, fragment.getView().getVisibility());    }    // Showing a shown fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ule);        // should not throw    }    // Showing a non-existing fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[t should remove the View from the hierarchy. Then popping it should    // bring it back VISIBLE   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[nt should remove the View from the hierarchy. Then popping it should    // bring it back hidden   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ragment.getView().getVisibility());    }    // Detaching a detached fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[e);        // should not throw    }    // Detaching a non-existing fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[gment should add the View back into the hierarchy. Then popping it should    // remove it again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[agment should add the View as GONE the hierarchy. Then popping it should    // remove it again.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[  assertTrue(fragment.isHidden());    }    // Attaching an attached fragment should not throw   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[/ should not throw an exception    }    // Attaching a non-existing fragment should not throw   ])', 1), ('([2:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[2]:method_text:[   }    // Simple replace of one fragment in a container. Popping should replace it back again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[    }    // Replace of multiple fragments in a container. Popping should replace it back again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[    // Replace of empty container. Should act as add and popping should just remove the fragment   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[mentTestUtil.assertChildren(container);    }    // Replace a fragment that exists with itself   ])', 1), (""([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ce operations in the same transaction to ensure that they    // don't interfere with each other   ])"", 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[dding a fragment with invisible or gone views does not end up with the view    // being visible   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[ensure that popping and adding a fragment properly track the fragments added    // and removed.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[s forces references from one fragment to another that should be executed earlier    // to work.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[there is no problem if the child fragment manager is used before    // the View has been added.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[1]:method_text:[tions together.    // When a non-backstack fragment will be raised, it should not be destroyed.   ])', 1), ('([8:/android/fragment/cts/FragmentViewTests.java]:[SIM]:[8]:method_text:[ewCount++;            return inflater.inflate(R.layout.text_a, container, false);        }    }}])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[    }    @Before    public void setup() {        mRes = getActivity().getResources();    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[rifier(getActivity(),                R.drawable.golden_robot, new MSSIMComparer(0.95)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[tActivity(),                R.drawable.golden_headless_robot, new MSSIMComparer(0.95)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[y(),                R.drawable.golden_hardwaretest_ninepatch, new MSSIMComparer(0.95)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[,                R.drawable.golden_hardwaretest_create_subset, new MSSIMComparer(0.9)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[             R.drawable.golden_hardwaretest_create_transformed, new MSSIMComparer(0.9)));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[wBitmap(decoded, 0, 0, null);        }, true).runWithComparer(new MSSIMComparer(0.99));    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/HardwareBitmapTests.java]:[SIM]:[1]:method_text:[vas.drawBitmap(copy, 0, 0, null);        }, true).runWithComparer(new MSSIMComparer(0.99));    }}])', 1), ('([1:/android/server/wm/WindowContextTests.java]:[SIM]:[1]:method_text:[unds.width());        assertEquals(expectedMetrics.getSize().getHeight(), bounds.height());    }}])', 1), ('([1:/android/telephony/cts/preconditions/app/TelephonyPreparerAppTest.java]:[SIM]:[1]:method_text:[ found in the device, ""                + ""some tests might not run properly"");        }    }   ])', 1), ('([1:/android/sample/cts/SampleDeviceTest.java]:[SIM]:[1]:method_text:[preferences and asserts they can no longer be retrieved.     *     * @throws Exception     */   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[SIM]:[1]:method_text:[R.string.firstButton);        assertTrue(firstButtonNode.isImportantForAccessibility());    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[SIM]:[1]:method_text:[.string.firstButton);        assertFalse(firstButtonNode.isImportantForAccessibility());    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityViewTreeReportingTest.java]:[SIM]:[1]:method_text:[ new button.        assertTrue(awaitedEvent.getSource().isImportantForAccessibility());    }   ])', 1), ('([1:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[SIM]:[1]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[SIM]:[2]:method_text:[        track.release();        Thread.sleep(waitMsec); // wait for release to complete    }   ])', 1), ('([17:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[17]:method_text:[ofill allowlist.        Helper.resetApplicationAutofillOptions(sContext);    }    @Presubmit   ])', 1), ('([3:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[3]:method_text:[d be disabled too.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_DISABLED);    }   ])', 1), ('([4:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[4]:method_text:[ivity.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([4:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[4]:method_text:[launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }    @Presubmit   ])', 1), ('([3:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[3]:method_text:[ work.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([4:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[4]:method_text:[uration);        launchSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([4:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[SIM]:[4]:method_text:[+ ""ms, passedTime=""                + passedTime + "")"");        SystemClock.sleep(napTime);    }}])', 1), ('([3:/android/telecom/cts/SimCallManagerTest.java]:[SIM]:[3]:method_text:[Dialer(getInstrumentation(), mPreviousDefaultDialer);        }        super.tearDown();    }   ])', 1), ('([27:/android/telecom/cts/SimCallManagerTest.java]:[SIM]:[27]:method_text:[);        assertNotSame(TEST_PHONE_ACCOUNT_HANDLE, mTelecomManager.getSimCallManager());    }   ])', 1), ('([2:/android/telecom/cts/SimCallManagerTest.java]:[SIM]:[2]:method_text:[imCallManagerForSubscription(                SubscriptionManager.DEFAULT_SUBSCRIPTION_ID));    }}])', 1), ('([1:/com/android/cts/delegate/EnableSystemAppDelegateTest.java]:[SIM]:[1]:method_text:[    mDpm = getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);    }   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[SIM]:[1]:method_text:[                mWmState.getActivityCountInTask(taskId, FINISH_ON_TASK_LAUNCH_ACTIVITY));    }   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[3]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[2]:method_text:[edential)} method.     * <p>     * Test the Credential.UserCredential copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[4]:method_text:[redential)} method.     * <p>     * Test the Credential.SimCredential copy constructor     */   ])', 1), ('([13:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[13]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([17:/android/net/wifi/cts/WifiHotspot2Test.java]:[SIM]:[17]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1)]"	""	""	"[('SIM', 127), ('CLONE', 5)]"	"[('[android.fragment.cts.FragmentViewTests isDetached None]', 5), ('[android.fragment.cts.FragmentViewTests getVisibility None]', 4), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableApp None]', 3), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableActivity None]', 3), ('[android.fragment.cts.FragmentViewTests isHidden None]', 2), ('[android.media.cts.SoundPoolTest testAutoPauseResume None]', 1), ('[android.net.cts.TrafficStatsTest testValidMobileStats None]', 1), ('[android.cts.install.host.UpgradeTest testStagedUpgrade None]', 1), ('[android.transition.cts.FadeTest testFadeOutTransition None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testUniqueDeviceAttestationUsingDifferentAttestationCert None]', 1), ('[android.server.wm.DisplayTests testForceDisplayMetrics None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeDeletesFiles None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetLine1Number None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetSimSerialNumber None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testProtectedBroadcasts None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceId None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkCountryIso None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCountryIso None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAidForAppType None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetIsimDomain None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetIsimImpu None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetForbiddenPlmnsDelete None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSwitchMultiSimConfig None]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsApplicationOnUicc None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimApplicationState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.app.cts.WearableExtenderTest testWearableExtender_clone None]', 1), ('[android.app.cts.WearableExtenderTest testActionWearableExtender_clone None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind1 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind2 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBindB None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound3 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound4 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound5 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound6 None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.security.cts.STKFrameworkTest testInterceptedSIMCommandsToTelephony None]', 1), ('[android.server.wm.MinimalPostProcessingTests testPreferMinimalPostProcessingSimple None]', 1), ('[android.server.wm.MinimalPostProcessingTests testAttrPreferMinimalPostProcessingSimple None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[android.contentcaptureservice.cts.unit.ContentCaptureContextTest testParcel None]', 1), ('[android.contentcaptureservice.cts.unit.ContentCaptureContextTest testForLocus_valid None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection None]', 1), ('[android.uirendering.cts.testclasses.ShapeTests testDashedOval None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurface None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurfaceNative None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testZeroInsetsImeAnimates None]', 1), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromPrimaryUser_targetIsWorkProfile_launches None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[android.fragment.cts.FragmentViewTests replaceExisting None]', 1), ('[android.fragment.cts.FragmentViewTests testReplaceFragment None]', 1), ('[android.fragment.cts.FragmentViewTests addInvisibleAndGoneFragments None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testDecodeResource None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testReadbackThroughPicture None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testReadbackThroughPictureNoEndRecording None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateScaledBitmapFromPicture None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testBitmapRegionDecode None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testNinePatch None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateScaledBitmap None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateSubsetBitmap None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCreateTransformedBitmap None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testCompressHardware None]', 1), ('[android.uirendering.cts.testclasses.HardwareBitmapTests testHardwareExtractAlpha None]', 1), ('[android.server.wm.WindowContextTests testWindowContextConfigChanges None]', 1), ('[android.telephony.cts.preconditions.app.TelephonyPreparerAppTest testPhoneNumberPresent None]', 1), ('[android.sample.cts.SampleDeviceTest SampleDeviceTest None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testAccessibilityImportanceReportingForImportantView None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testAccessibilityImportanceReportingForUnimportantView None]', 1), ('[android.accessibilityservice.cts.AccessibilityViewTreeReportingTest testAddViewToLayout_receiveSubtreeEvent None]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData None]', 1), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest registerCallback None]', 1), ('[android.telecom.cts.SimCallManagerTest testGetSimCallManager None]', 1), ('[android.telecom.cts.SimCallManagerTest testGetSimCallManagerForSub None]', 1), ('[android.server.wm.lifecycle.ActivityStarterTests testActivityWithFinishOnTaskLaunch None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCertCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey None]', 1)]"
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-5"	"2.2.7.2/H-1-5"	"02020702.720105"	"""7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. && 7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. | 7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000 ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras."""	""	""	"CTS ITS JPEG"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 19), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 14), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 11), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/multiuser/src/android/multiuser/cts/SplitSystemUserTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/EventConnectionAPI30/src/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/CompilerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/DirectoryTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/health/cts/HealthStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSForEachTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ScriptTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/Color_ColorLongTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ConnectivityManagerPermissionTest.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(2,ITS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(3,ITS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(5,ITS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(1,ITS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(1,ITS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(2,ITS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,ITS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ITS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,ITS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(12,ITS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(10,ITS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(8,ITS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(2,ITS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,CTS,/android/security/cts/STKFrameworkTest.java)', 1), ('(2,CTS,/android/adb/cts/AdbHostTest.java)', 1), ('(1,ITS,/android/adb/cts/AdbHostTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,CTS,/android/app/cts/AliasActivityTest.java)', 1), ('(6,CTS,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(36,CTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,CTS,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,CTS,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,CTS,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,CTS,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,CTS,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,CTS,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(5,CTS,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/AffiliationTest.java)', 1), ('(17,CTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,CTS,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(4,CTS,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java)', 1), ('(8,CTS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,CTS,/android/media/cts/MediaController2Test.java)', 1), ('(1,ITS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/renderscript/cts/CompilerTest.java)', 1), ('(1,CTS,/com/android/server/cts/device/statsdatom/DirectoryTests.java)', 1), ('(1,CTS,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,CTS,/android/media/cts/AudioMetadataTest.java)', 1), ('(1,CTS,/android/os/health/cts/HealthStatsTest.java)', 1), ('(1,CTS,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,CTS,/android/cts/rscpp/RSForEachTest.java)', 1), ('(6,CTS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(1,ITS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(2,CTS,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(2,CTS,/android/renderscript/cts/ScriptTest.java)', 1), ('(1,CTS,/android/ndef/cts/NdefTest.java)', 1), ('(1,CTS,/android/graphics/cts/Color_ColorLongTest.java)', 1), ('(5,CTS,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,CTS,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(1,CTS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(5,ITS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/permission/cts/ConnectivityManagerPermissionTest.java)', 1), ('(24,CTS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(16,ITS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[peatCount */);        mAutomation.injectInputEvent(upEvent, true);        waitForKey();    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[ITS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[ITS]:[1]:method_text:[    /**     * Tests ability to start a 1-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[1]:method_text:[PE_CHILD,                ExpandableListView.getPackedPositionType(0x8000000000000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0x7FFFFFFF, ExpandableListView.getPackedPositionGroup(0x7FFFFFFF00000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0xffffffff, ExpandableListView.getPackedPositionChild(0x80000000ffffffffL));    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([1:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[ITS]:[1]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([1:/android/security/cts/Poc17_05.java]:[ITS]:[1]:method_text:[   AdbUtils.runPocAssertExitStatusNotVulnerable(""CVE-2016-5867"", getDevice(), 60);        }    }}])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[_PADDING_RSA_PKCS1)            .setIsStrongBoxBacked(useStrongBox)            .build();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[ITS]:[1]:method_text:[Key);        verify.update(data);        assertThat(verify.verify(signature)).isTrue();    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ITS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[ITS]:[1]:method_text:[ointerCaptureChanged());        assertFalse(mTarget2.hasCalledOnPointerCaptureChange());    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[4]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[ (manufacturer code) or null.     * The MC should match the first 8 digits of the MEID.     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[2]:method_text:[ }    /**     * Tests that the device properly sets and pads the contents of EF_FPLMN     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[            fail(""testDisAllowedNetworkTypes: SecurityException not expected"");        }    }   ])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[used."",                    WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);        }    }   ])', 1), ('([3:/android/server/wm/AssistantStackTests.java]:[ITS]:[3]:method_text:[ should be focused."",                WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ITS]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[ITS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[CTS]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([2:/android/adb/cts/AdbHostTest.java]:[CTS]:[2]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[ITS]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([3:/android/appsecurity/cts/LocationPolicyTest.java]:[CTS]:[3]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[CTS]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([6:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[CTS]:[6]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([32:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[32]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[ugmentedHelper.resetAugmentedService();        augmentedService.waitUntilDisconnected();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestNativeCospi.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[CTS]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/media/cts/ToneGeneratorTest.java]:[CTS]:[1]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[CTS]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[CTS]:[1]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([2:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[2]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[CTS]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[2]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([5:/android/content/cts/ClipDescriptionTest.java]:[CTS]:[5]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java]:[CTS]:[1]:method_text:[.app.appsearch.AppSearchManager;import org.junit.Test;public class AppSearchManagerCtsTest {   ])', 1), ('([1:/com/android/cts/deviceowner/AffiliationTest.java]:[CTS]:[1]:method_text:[_POLICY_SERVICE);        mAdminComponent = BasicAdminReceiver.getComponentName(context);    }   ])', 1), ('([17:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[CTS]:[17]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[CTS]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java]:[CTS]:[4]:method_text:[) throws Exception {        super.setUp();        mResources = mContext.getResources();    }   ])', 1), ('([7:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[7]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[CTS]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[CTS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[ITS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), (""([1:/android/renderscript/cts/CompilerTest.java]:[CTS]:[1]:method_text:[ins symbols that can't be resolved at runtime,     * which should trigger an exception.     */   ])"", 1), ('([1:/com/android/server/cts/device/statsdatom/DirectoryTests.java]:[CTS]:[1]:method_text:[t.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class DirectoryTests {   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[CTS]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[CTS]:[1]:method_text:[a.BaseMap>        KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);   ])', 1), ('([1:/android/os/health/cts/HealthStatsTest.java]:[CTS]:[1]:method_text:["").longValue());    }    /**     * Tests parceling empty HealthStats.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[CTS]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/android/cts/rscpp/RSForEachTest.java]:[CTS]:[1]:method_text:[        System.loadLibrary(""rscpptest_jni"");    }    native boolean testForEach(String path);   ])', 1), ('([6:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[CTS]:[6]:method_text:[ConnectionTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([1:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[ITS]:[1]:method_text:[     * rate of ongoing SensorEventConnections when the state of the mic toggle changes.     */   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[CTS]:[2]:method_text:[ org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)@SmallTestpublic class TaggingTest {   ])', 1), ('([2:/android/renderscript/cts/ScriptTest.java]:[CTS]:[2]:method_text:[mport android.renderscript.cts.ScriptC_negate;public class ScriptTest extends RSBaseCompute {   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[CTS]:[1]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/graphics/cts/Color_ColorLongTest.java]:[CTS]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class Color_ColorLongTest {   ])', 1), ('([5:/android/view/inspector/cts/WindowInspectorTest.java]:[CTS]:[5]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CTS]:[1]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[CTS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[ITS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([4:/android/multiuser/cts/SplitSystemUserTest.java]:[ITS]:[4]:method_text:[   }    private static String trim(String s) {        return s == null ? null : s.trim();    }}])', 1), ('([1:/android/permission/cts/ConnectivityManagerPermissionTest.java]:[CTS]:[1]:method_text:[ <p>Tests Permission:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[4]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[3]:method_text:[  runShellCmd(""cmd blob_store clear-all-blobs"");        mContext.getFilesDir().delete();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[2]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([5:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[5]:method_text:[ 1111L, ""tag2"");            assertThat(blobHandle1).isNotEqualTo(blobHandle2);        }    }   ])', 1), ('([8:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[8]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[BlobHandle());            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[rite(0L, 0L));            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[sults.add(result);             }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[2]:method_text:[esults.add(result);            }        }        assertThat(invalidResults).isEmpty();    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[rifyBlob(pfd);            }        } finally {            blobData.delete();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ForUid.getDataBytes() - beforeStatsForUid.getDataBytes())                .isEqualTo(0L);    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[ze());            commitSession(sessionId, session, blobData.getBlobHandle());        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[1]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[ITS]:[4]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1)]"	""	""	"[('CTS', 160), ('ITS', 44)]"	"[('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 2), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 2), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_countLimitExceeded None]', 2), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation None]', 2), ('[android.view.cts.VerifyInputEventTest testTamperedKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 1), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.telecom.cts.VideoCallTest testMakeTwoWayVideoCall None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionType None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionChild None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[android.security.cts.Poc17_05 testPocCVE_2016_5867 None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testNotUserSelectableAliasCanBeChosenViaPolicy None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.certinstaller.PreSelectedKeyAccessTest testAccessingPreSelectedAliasExpectingSuccess None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testPointerCaptureChangeDispatch None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetTac None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetForbiddenPlmns None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDisAllowedNetworkTypes None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackZOrder None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackLaunchNewTaskWithDockedStack None]', 1), ('[android.server.wm.AssistantStackTests testTranslucentAssistantActivityStackVisibility None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testServiceLifecycle None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.sensorratepermission.cts.eventconnectionapi30.EventConnectionAPI30Test testSamplingRateMicToggleOn None]', 1), ('[android.multiuser.cts.SplitSystemUserTest testSplitSystemUserIsDisabled None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleEquality None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testOpenReadWriteSession None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleWrites None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_multipleReadWrites None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testOpenBlob None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttributedToSelf None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitBlobAfterIdleMaintenance None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"T-5-2"	"9.8.2/T-5-2"	"09080200.840502"	""">9.8.2/T-5-2] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""236_developer_tools_and_options_compatibility"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"245:681614) 9  . Security Model Compatibility"	"9"	"C-1-1"	"9/C-1-1"	"09000000.670101"	"""C-1-1] MUST support the requirements listed in the following subsections. <h3 id=""91_permissions"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"206:607824) 7.4.3  . Bluetooth"	"7.4.3"	"C-6-1"	"7.4.3/C-6-1"	"07040300.670601"	"""C-6-1] MUST restrict access to any Bluetooth metadata (such as scan results) which could be used to derive the location of the device, unless the requesting app successfully passes an android.permission.ACCESS_FINE_LOCATION permission check based on its current foreground/background state. If device implementations include support for Bluetooth or Bluetooth Low Energy and the app manifest does not include a declaration from the developer stating that they are not deriving location from Bluetooth, then, they: """	"Annotated"	""	"ACCESS_FINE_LOCATION android.permission.ACCESS"	""	""	""	""	""	""	""	""	"android.permission.cts.NearbyDevicesPermissionTest"	"testRequestBluetoothPermission30_Default() testRequestBluetoothPermission30_GrantLocation() testRequestBluetoothPermission31_Default() testRequestBluetoothPermission31_GrantNearby() testRequestBluetoothPermission31_GrantLocation() testRequestBluetoothPermission31_GrantNearby_GrantLocation() testRequestBluetoothPermissionNeverForLocation31_Default() testRequestBluetoothPermissionNeverForLocation31_GrantNearby() testRequestBluetoothPermissionNeverForLocation31_GrantLocation() testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation() "	"CtsPermissionTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 13), ('/home/gpoor/cts-source/cts/tests/backup/src/android/backup/cts/PermissionTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyLocationTests.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesPermissionTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/PermissionControllerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission2/src/android/permission2/cts/RestrictedPermissionsTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/BackgroundPermissionsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/NearbyDevicesRenouncePermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/LocationAccessCheckTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/LocationPolicyApp/src/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission2/src/android/permission2/cts/PermissionMaxSdkVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/JobThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/UidAtomTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/EphemeralTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PackageManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BluetoothLeScanTest.java', 1), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/packages/PackageTest.java', 1)]"	"[('(1,ACCESS_FINE_LOCATION,/android/telephony/cts/TelephonyManagerTest.java)', 2), ('(3,ACCESS_FINE_LOCATION,/android/permission/cts/OneTimePermissionTest.java)', 2), ('(1,android.permission.ACCESS,/android/appsecurity/cts/EphemeralTest.java)', 2), ('(1,android.permission.ACCESS,/android/content/pm/cts/PackageManagerTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java)', 2), ('(6,ACCESS_FINE_LOCATION,/android/permission2/cts/RestrictedPermissionsTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/carrierapi/cts/NetworkScanApiTest.java)', 2), ('(2,ACCESS_FINE_LOCATION,/android/permission/cts/LocationAccessCheckTest.java)', 2), ('(2,android.permission.ACCESS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(20,ACCESS_FINE_LOCATION,/android/backup/cts/PermissionTest.java)', 1), ('(5,ACCESS_FINE_LOCATION,/android/permission/cts/BackgroundPermissionsTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/com/android/cts/deviceandprofileowner/PermissionsTest.java)', 1), ('(1,android.permission.ACCESS,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(8,ACCESS_FINE_LOCATION,/android/telephony/cts/TelephonyLocationTests.java)', 1), ('(1,ACCESS_FINE_LOCATION,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(1,android.permission.ACCESS,/com/android/cts/devicepolicy/DeviceOwnerTest.java)', 1), ('(10,ACCESS_FINE_LOCATION,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(2,android.permission.ACCESS,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(4,android.permission.ACCESS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,android.permission.ACCESS,/android/permission2/cts/PermissionMaxSdkVersionTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/jobscheduler/cts/JobThrottlingTest.java)', 1), ('(8,ACCESS_FINE_LOCATION,/android/permission/cts/NearbyDevicesPermissionTest.java)', 1), ('(2,ACCESS_FINE_LOCATION,/android/permission/cts/NearbyDevicesRenouncePermissionTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/cts/statsd/atom/UidAtomTests.java)', 1), ('(13,ACCESS_FINE_LOCATION,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(11,ACCESS_FINE_LOCATION,/android/permission/cts/PermissionControllerTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/bluetooth/cts/BluetoothLeScanTest.java)', 1), ('(1,android.permission.ACCESS,/test/java/com/android/bedstead/nene/packages/PackageTest.java)', 1)]"	"[('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[       ACCESS_BACKGROUND_LOCATION)));        assertAllRestrictedPermissionWhitelisted();    }   ])', 4), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ions.singleton(ACCESS_FINE_LOCATION));        assertNoRestrictedPermissionWhitelisted();    }   ])', 4), ('([3:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[3]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 3), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 2), ('([2:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 2), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[TION)));    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 2), ('([1:/android/appsecurity/cts/EphemeralTest.java]:[android.permission.ACCESS]:[1]:method_text:[adPhoneNumbersPermission"");    }    /** Test for android.permission.ACCESS_COARSE_LOCATION */   ])', 2), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[lse);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ion);                },                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[, ACCESS_FINE_LOCATION);        retrieveConnectionInfoFgActivityAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ])', 2), ('([1:/android/content/pm/cts/PackageManagerTest.java]:[android.permission.ACCESS]:[1]:method_text:[als(PACKAGE_NAME, receiver.packageName);    }    // Tests that other packages can be queried.   ])', 2), (""([2:/android/appsecurity/cts/locationpolicy/LocationPolicyTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[h (SecurityException ignore) {              // That's what we want!            }        }    }}])"", 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[c static void tearDownOnce() {        getContext().unregisterReceiver(sCommandReceiver);    }   ])', 2), ('([1:/android/permission2/cts/RestrictedPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[umentation().getUiAutomation()                    .dropShellPermissionIdentity();        }    }}])', 2), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[EST_APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FULL);    }   ])', 2), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[PP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.EXCEPTION);    }   ])', 2), ('([2:/android/telephony/ims/cts/EabControllerTest.java]:[android.permission.ACCESS]:[2]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[App(APP22);    }    /**     * Test backup and restore of regular runtime permission.     */   ])', 1), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[  });    }    /**     * Test backup and restore of pre-M regular runtime permission.     */   ])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[     });    }    /**     * Test backup and restore of foreground runtime permission.     */   ])', 1), ('([1:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[INE_LOCATION));        });    }    /**     * Restore if the permission was reviewed     */   ])', 1), ('([2:/android/backup/cts/PermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[ app));        } catch (Exception e) {            throw new RuntimeException(e);        }    }}])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[mation();    @After    public void uninstallTestApp() {        uninstallApp(APP_PKG);    }   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ Make sure location switch-op is set if fine location with background access is granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[    * Make sure location switch-op is set if fine and coarse location access is granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[n switch-op is set if fine and coarse location with background access is     * granted.     */   ])', 1), ('([1:/android/permission/cts/BackgroundPermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[).that(                getAppOp(APP_PKG, ACCESS_COARSE_LOCATION)).isEqualTo(MODE_ALLOWED));    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/PermissionsTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[           return PERMISSION_DENIED_APP_OP;        }        return PERMISSION_GRANTED;    }   ])', 1), ('([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[android.permission.ACCESS]:[1]:method_text:[      getDevice().uninstallPackage(MULTIUSER_PKG);        wipePrimaryExternalStorage();    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AGE, cellLocationAccess,                Manifest.permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[_LOCATION);                },                Manifest.permission.ACCESS_FINE_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[permission.ACCESS_COARSE_LOCATION);        }, Manifest.permission.ACCESS_FINE_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyLocationTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[tOperatorAlphaShort()));        assertTrue(TextUtils.isEmpty(state.getOperatorNumeric()));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[int newUserId = newUsers.get(0);        assertFalse(getDevice().isUserRunning(newUserId));    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[android.permission.ACCESS]:[1]:method_text:[int newUserId = newUsers.get(0);        assertFalse(getDevice().isUserRunning(newUserId));    }}])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_CONNECTION_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[android.permission.ACCESS]:[2]:method_text:[remove request disallowed status: "" + e);        }        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[android.permission.ACCESS]:[2]:method_text:[use it means the permission check passed.        }        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[android.permission.ACCESS]:[2]:method_text:[   } catch (ImsException e) {            fail(""requestAvailability failed "" + e);        }    }}])', 1), ('([1:/android/permission2/cts/PermissionMaxSdkVersionTest.java]:[android.permission.ACCESS]:[1]:method_text:[ set to a previous API level,     * the permission is not being granted.     */    @SmallTest   ])', 1), ('([1:/android/jobscheduler/cts/JobThrottlingTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[sTrue();    }    private interface Condition {        boolean isTrue() throws Exception;    }}])', 1), ('([2:/android/carrierapi/cts/NetworkScanApiTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[Specifier;    }    /**     * Tests that the device properly requests a network scan.     */   ])', 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[efore    @After    public void uninstallTestApp() {        uninstallApp(TEST_APP_PKG);    }   ])', 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[APP_PKG, ACCESS_BACKGROUND_LOCATION);        assertScanBluetoothResult(Result.FILTERED);    }   ])', 1), (""([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[uetooth     * scan results; they'd always need to involve the user to gain permissions.     */   ])"", 1), ('([1:/android/permission/cts/NearbyDevicesPermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[               + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[Unbind() throws Throwable {        unbindService();        getNotification(true, true);    }   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ROUND_LOCATION);        accessLocation();        assertNotNull(getNotification(true));    }   ])', 1), ('([1:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[teCounts() {        mLocationNoteCount = 0;        mScanNoteCount = 0;    }    @AppModeFull   ])', 1), ('([1:/android/permission/cts/NearbyDevicesRenouncePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[              + "" com.android.bluetooth/.btservice.AdapterService set-test-mode disabled"");    }}])', 1), ('([1:/android/cts/statsd/atom/UidAtomTests.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[     }            }        }        assertThat(verifiedKnowPermissionState).isTrue();    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[gServiceAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[gActivityAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[NAME, ACCESS_FINE_LOCATION);        retrieveTransportInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([3:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[3]:method_text:[ions as permissionInfos        assertThat(numRuntimeGranted).isAtLeast(numInfosGranted);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ring>> result = revokePermissions(request, false);        assertThat(result).isEmpty();    }   ])', 1), ('([2:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[CCESS_FINE_LOCATION,                ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[LER_POLICY_VIOLATION, sContext.getMainExecutor()));        assertThat(result).isEmpty();    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[         singletonList(ACCESS_FINE_LOCATION));        revokePermissions(request, true);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[and after                    assertThat(numApps.get()).isAtLeast(1);                });    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ontroller.countPermissionApps(singletonList(ACCESS_FINE_LOCATION), -1, (n) -> { }, null);    }   ])', 1), ('([1:/android/permission/cts/PermissionControllerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[        sController.countPermissionApps(singletonList(ACCESS_FINE_LOCATION), 0, null, null);    }}])', 1), ('([2:/android/carrierapi/cts/NetworkScanApiTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[ radioAccessSpecifier;    }    /** Tests that the device properly requests a network scan. */   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[    @After    public void locationUnbind() throws Throwable {        unbindService();    }   ])', 1), ('([1:/android/permission/cts/LocationAccessCheckTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[otification(true)), EXPECTED_TIMEOUT_MILLIS);    }    @SystemUserOnly(reason = ""b/172259935"")   ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeScanTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[t case for BLE scans. Checks BLE scan timestamp is within correct range.     */    @MediumTest   ])', 1), ('([1:/test/java/com/android/bedstead/nene/packages/PackageTest.java]:[android.permission.ACCESS]:[1]:method_text:[ntedContext();    private static final UserReference sUser = sTestApis.users().instrumented();   ])', 1)]"	""	""	"[('ACCESS_FINE_LOCATION', 95), ('android.permission.ACCESS', 12)]"	"[('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs None]', 2), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart None]', 2), ('[android.appsecurity.cts.EphemeralTest testReadPhoneNumbersPermission None]', 2), ('[com.android.cts.devicepolicy.DeviceOwnerTest testWifiNetworkConfigurationWithoutFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 2), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 2), ('[android.content.pm.cts.PackageManagerTest testGetInstalledPackages None]', 2), ('[android.appsecurity.cts.locationpolicy.LocationPolicyTest testLocationPolicyPermissions None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall29 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall29 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionWhitelistedAtInstall22 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest testLocationBackgroundPermissionNotWhitelistedAtInstall22 None]', 2), ('[android.permission2.cts.RestrictedPermissionsTest isTrue None]', 2), ('[android.permission.cts.LocationAccessCheckTest getPermissionControllerPackageName None]', 2), ('[android.permission.cts.LocationAccessCheckTest notificationIsShownAgainAfterClear None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities None]', 1), ('[android.backup.cts.PermissionTest testGrantDeniedRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantDeniedRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testNoTriStateRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testNoTriStateRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundAndBackgroundRuntimePermission None]', 1), ('[android.backup.cts.PermissionTest testGrantForegroundAndBackgroundRuntimePermission22 None]', 1), ('[android.backup.cts.PermissionTest testDelayedRestore None]', 1), ('[android.permission.cts.BackgroundPermissionsTest uninstallTestApp None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfOnlyFineLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineAndBgLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineAndCoarseLocPermIsGranted None]', 1), ('[android.permission.cts.BackgroundPermissionsTest appOpIsSetIfFineCoarseAndBgLocPermIsGranted None]', 1), ('[com.android.cts.deviceandprofileowner.PermissionsTest PermissionBroadcastReceiver None]', 1), ('[android.telephony.cts.TelephonyLocationTests testCellLocationFinePermission None]', 1), ('[android.telephony.cts.TelephonyLocationTests testServiceStateLocationSanitization None]', 1), ('[android.telephony.cts.TelephonyLocationTests testServiceStateListeningWithoutPermissions None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28ServiceStateListeningWithoutPermissions None]', 1), ('[android.telephony.cts.TelephonyLocationTests testRegistryPermissionsForCellLocation None]', 1), ('[android.telephony.cts.TelephonyLocationTests testRegistryPermissionsForCellInfo None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28CellLocation None]', 1), ('[android.telephony.cts.TelephonyLocationTests testSdk28CellInfoUpdate None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishWithAuthorizedErrorResponse None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testMethodPermissions None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testReceivingEmptyPidfXml None]', 1), ('[android.jobscheduler.cts.JobThrottlingTest testRestrictingStopReason_Doze None]', 1), ('[android.carrierapi.cts.NetworkScanApiTest adoptShellPermissionIdentity None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest isEnabled None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission30_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission31_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission31_GrantNearby_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermissionNeverForLocation31_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermissionNeverForLocation31_GrantNearby_GrantLocation None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission_Upgrade None]', 1), ('[android.permission.cts.NearbyDevicesPermissionTest testRequestBluetoothPermission_Downgrade None]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest isEnabled None]', 1), ('[android.permission.cts.NearbyDevicesRenouncePermissionTest enableTestMode None]', 1), ('[android.cts.statsd.atom.UidAtomTests testDangerousPermissionState None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission None]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission None]', 1), ('[android.permission.cts.PermissionControllerTest OnRevokeRuntimePermissionsCallback None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsDoNotAlreadyRevokedPermission None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsDryRunForegroundPermission None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsPolicyViolationFromWrongPackage None]', 1), ('[android.permission.cts.PermissionControllerTest revokePermissionsWithNullPkg None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsGranted None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsInvalidFlags None]', 1), ('[android.permission.cts.PermissionControllerTest countPermissionAppsNullCallback None]', 1), ('[android.carrierapi.cts.NetworkScanApiTest werePreconditionsSatisfied None]', 1), ('[android.bluetooth.cts.BluetoothLeScanTest isEnabled None]', 1), ('[test.java.com.android.bedstead.nene.packages.PackageTest TestApis None]', 1)]"
"246:691929) 9.1  . Permissions"	"9.1"	"C-1-1"	"9.1/C-1-1"	"09010000.670101"	"""C-1-1] MUST NOT have the following permissions silently granted by the admin: Location (ACCESS_BACKGROUND_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION). Camera (CAMERA) Microphone (RECORD_AUDIO) Body sensor (BODY_SENSORS) Physical activity (ACTIVITY_RECOGNITION) If device implementations provide a user affordance to choose which apps can draw on top of other apps with an activity that handles the ACTION_MANAGE_OVERLAY_PERMISSION intent, they: """	""	""	"ACTION_MANAGE_OVERLAY_PERMISSION ACCESS_COARSE_LOCATION CAMERA ACCESS_FINE_LOCATION BODY_SENSORS ACCESS_BACKGROUND_LOCATION ACTIVITY_RECOGNITION RECORD_AUDIO"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 26), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 25), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 25), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/CameraPermissionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/KeyEventTest.java', 1)]"	"[('(8,CAMERA,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 2), ('(45,CAMERA,/android/telecom/cts/VideoCallTest.java)', 1), ('(1,CAMERA,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(1,ACCESS_COARSE_LOCATION,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,ACCESS_FINE_LOCATION,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,ACCESS_BACKGROUND_LOCATION,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(24,CAMERA,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(3,ACCESS_FINE_LOCATION,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(164,CAMERA,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(57,CAMERA,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(1,CAMERA,/android/view/cts/KeyEventTest.java)', 1), ('(270,CAMERA,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(18,CAMERA,/android/permission/cts/CameraPermissionTest.java)', 1), ('(269,CAMERA,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(218,CAMERA,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(4,CAMERA,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(591,CAMERA,/android/hardware/camera2/cts/CameraDeviceTest.java)', 1)]"	"[('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[3]:method_text:[*/true);            } finally {                closeDevice(id);            }        }    }   ])', 8), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[3]:method_text:[/false);            } finally {                closeDevice(id);            }        }    }   ])', 4), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[CAMERA]:[4]:method_text:[PARENT)                    .build());    }    /** Test for resetPassword for all devices. */   ])', 2), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[CAMERA]:[3]:method_text:[RE_CAMERA)                .setStrings(NOT_CALLED_FROM_PARENT)                .build());    }   ])', 2), ('([3:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[3]:method_text:[corded videos are     * validated according to the recording configuration.     * </p>     */   ])', 2), ('([1:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[1]:method_text:[be some overhead associated with configuring the camera at the start of     * the call.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[2]:method_text:[ current camera.  Ensures that the camera capabilities are sent     * back in response.     */   ])', 1), ('([10:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[10]:method_text:[    /**     * Tests ability to request the camera capabilities from the video provider.     */   ])', 1), ('([10:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[10]:method_text:[ONS);    }    /**     * Tests ability to request data usage from the video provider.     */   ])', 1), ('([6:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[6]:method_text:[     * Tests ability to receive changes to the peer dimensions from the video provider.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[2]:method_text:[ });    }    /**     * Tests ability to set the device orientation via the provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[1]:method_text:[er, false);    }    /**     * Tests ability to set the camera zoom via the provider.     */   ])', 1), ('([13:/android/telecom/cts/VideoCallTest.java]:[CAMERA]:[13]:method_text:[append("" To: "");        expectedSb.append(toProfile);        return expectedSb.toString();    }}])', 1), ('([1:/android/media/cts/MediaPlayerDrmTest.java]:[CAMERA]:[1]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_COARSE_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ACCESS_BACKGROUND_LOCATION]:[1]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([5:/android/graphics/cts/CameraVulkanGpuTest.java]:[CAMERA]:[5]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([19:/android/graphics/cts/CameraVulkanGpuTest.java]:[CAMERA]:[19]:method_text:[;    }    private static native void loadCameraAndVerifyFrameImport(AssetManager assetManager);}])', 1), ('([1:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[1]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([2:/android/permission/cts/OneTimePermissionTest.java]:[ACCESS_FINE_LOCATION]:[2]:method_text:[               mActivityManager.removeOnUidImportanceListener(this);            }        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[CAMERA]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([31:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[31]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[2]:method_text:[/ true);            } finally {                closeDevice(id);            }        }    }   ])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[4]:method_text:[SENSOR);            } finally {                closeDevice(id);            }        }    }   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[5]:method_text:[ct byte buffer, there     * is no guarantee to get an ISE for this invalid access case.     */   ])', 1), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[3]:method_text:[sing ImageReader.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[5]:method_text:[ge flag argument.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[4]:method_text:[* Test two image stream (YUV420_888 and RAW_SENSOR) capture by using ImageReader.     *     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[5]:method_text:[* ImageReader factory method that has usage flag argument, and uses a custom usage flag.     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[5]:method_text:[geReader with the     * ImageReader factory method that has usage flag argument.     *     */   ])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[4]:method_text:[EG outputs for the same frame match for each YUV     * resolution and format supported.     */   ])', 1), ('([28:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[28]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 1), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[3]:method_text:[  closeDevice(id);            }        }    }    /** Tests that usage bits are preserved */   ])', 1), ('([29:/android/hardware/camera2/cts/ImageReaderTest.java]:[CAMERA]:[29]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([17:/android/hardware/camera2/cts/BurstCaptureTest.java]:[CAMERA]:[17]:method_text:[ol.     * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.     */   ])', 1), ('([40:/android/hardware/camera2/cts/BurstCaptureTest.java]:[CAMERA]:[40]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/view/cts/KeyEventTest.java]:[CAMERA]:[1]:method_text:[ent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_0);        assertFalse(mKeyEvent.isSystem());    }   ])', 1), ('([41:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[41]:method_text:[on and validate the     * recorded video. Preview is set to the video size.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[2]:method_text:[on and validate the     * recorded video. Preview is set to the video size.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[2]:method_text:[cation a chance     * to decide whether to send a frame to recorder or not.     * </p>     */   ])', 1), ('([2:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[2]:method_text:[on and validate the recorded video.     * Preview is set to the video size.     * </p>     */   ])', 1), (""([1:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[1]:method_text:[m a persistent input surface that's used across multiple recording sessions.     * </p>     */   ])"", 1), ('([11:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[11]:method_text:[ *     * <p>The recording should be working fine for any kind of start/stop orders.</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[1]:method_text:[ is also     * checked to make sure no frame drop caused by video snapshot.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[1]:method_text:[ capture images are validated according to the capture     * configuration.     * </p>     */   ])', 1), ('([16:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[16]:method_text:[of highest framerate. Make sure that the video framerate are still accurate.     * </p>     */   ])', 1), ('([18:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[18]:method_text:[* <p>     * Test preview and video surfaces sharing the same camera stream.     * </p>     */   ])', 1), ('([11:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[11]:method_text:[   * This exercises format/dataspace override behavior of the camera device.     * </p>     */   ])', 1), ('([158:/android/hardware/camera2/cts/RecordingTest.java]:[CAMERA]:[158]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[CAMERA]:[1]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([15:/android/permission/cts/CameraPermissionTest.java]:[CAMERA]:[15]:method_text:[ Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */    @MediumTest   ])', 1), (""([3:/android/permission/cts/CameraPermissionTest.java]:[CAMERA]:[3]:method_text:[sn't translating the EPERM error status into            // a SecurityException.        }    }}])"", 1), ('([30:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[30]:method_text:[        super.tearDown();    }    /**     * Test CaptureRequest settings parcelling.     */   ])', 1), ('([13:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[13]:method_text:[ain locked after exposure     * value changes (when requests have lock ON).     * </p>     */   ])', 1), ('([8:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[8]:method_text:[ack level should be     *   close enough to the optical black level values.     * </p>     */   ])', 1), ('([4:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[4]:method_text:[ed by setting {@link CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE} to ON.     * </p>     */   ])', 1), ('([14:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[14]:method_text:[anti-banding modes, check if the exposure time adjustment is     * correct.     * </p>     */   ])', 1), ('([6:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[6]:method_text:[ should satisfy the per frame controls defined in     * API specifications.     * </p>     */   ])', 1), ('([5:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[5]:method_text:[ test the flash control     * and {@link CaptureResult#FLASH_STATE} result.     * </p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[7]:method_text:[f given various initial and final     * AE_CONTROL modes for repeating CaptureRequests.     */   ])', 1), ('([13:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[13]:method_text:[);            }        }    }    /**     * Test face detection modes and results.     */   ])', 1), ('([6:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[6]:method_text:[evice();            }        }    }    /**     * Test tone map modes and controls.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[            }        }    }    /**     * Test color correction modes and controls.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[      }        }    }    /**     * Test edge mode control for Fps not exceeding 30.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[       }        }    }    /**     * Test edge mode control for Fps greater than 30.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[oseDevice();            }        }    }    /**     * Test focus distance control.     */   ])', 1), ('([5:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[5]:method_text:[       }    }    /**     * Test noise reduction mode for fps ranges not exceeding 30     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[        }    }    /**     * Test noise reduction mode for fps ranges greater than 30     */   ])', 1), (""([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[ <p>The color correction gain and transform shouldn't be changed when AWB is locked.</p>     */   ])"", 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[   closeDevice();            }        }    }    /**     * Test different AF modes.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[();            }        }    }    /**     * Test video and optical stabilizations.     */   ])', 1), ('([8:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[8]:method_text:[validate the returned crop regions.     * The max preview size is used for each camera.     */   ])', 1), ('([4:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[4]:method_text:[turned crop regions and zoom ratio.     * The max preview size is used for each camera.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[ombinations.     * TODO: this and above test should all be moved to preview test class.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[  closeDevice();            }        }    }    /**     * Test scene mode controls.     */   ])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[2]:method_text:[ closeDevice();            }        }    }    /**     * Test effect mode controls.     */   ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[3]:method_text:[vice();            }        }    }    /**     * Test extended scene mode controls.     */   ])', 1), ('([111:/android/hardware/camera2/cts/CaptureRequestTest.java]:[CAMERA]:[111]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([28:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[28]:method_text:[* surfaces not registered with camera or surfaces used in     * repeating requests.</p>     */   ])', 1), ('([17:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[17]:method_text:[ied about the     * remaining offline requests via the registered offline callback.</p>     */   ])', 1), ('([15:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[15]:method_text:[cks behave as expected     * in case the camera supports offline depth jpeg output.</p>     */   ])', 1), ('([21:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[21]:method_text:[callbacks behave as expected     * in case the camera supports offline HEIC output.</p>     */   ])', 1), ('([21:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[21]:method_text:[e     * sensor during offline processing does not have any unexpected side effects.</p>     */   ])', 1), ('([17:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[17]:method_text:[ssion and receive     * all corresponding callbacks according to the documentation.</p>     */   ])', 1), ('([14:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[14]:method_text:[nitialize a new regular capture session     * in parallel with the offline session.</p>     */   ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[13]:method_text:[eive the expected sequence abort callbacks when switching     * to offline session.</p>     */   ])', 1), ('([13:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[13]:method_text:[re correctly advertised and switching to offline     * mode is failing as expected.</p>     */   ])', 1), ('([59:/android/hardware/camera2/cts/OfflineSessionTest.java]:[CAMERA]:[59]:method_text:[))                fail(""Remote offline session test activity is still running"");        }    }}])', 1), ('([1:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[CAMERA]:[1]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([3:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[CAMERA]:[3]:method_text:[eRotationResolverService() {        runShellCommand(""cmd resolver set-temporary-service"");    }}])', 1), ('([61:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[61]:method_text:[ure the stable frame rate is guaranteed for the given     * settings.</li>     * </ul>     */   ])', 1), ('([8:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[8]:method_text:[takes priority to the stable     * frame rate for the given settings.</li>     * </ul>     */   ])', 1), ('([7:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[7]:method_text:[should be stable, for example, wide fps range like [7, 30]     * is a bad setting.</li>     */   ])', 1), ('([7:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[7]:method_text:[ettings should maximize image quality     * without compromising stable frame rate.</p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[7]:method_text:[. It has the similar requirement     * as preview, with an additional requirement: </p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[7]:method_text:[posure, sensitivity, and so on) are     * set to reasonable defaults.</li>     * </ul>     */   ])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[5]:method_text:[tureTemplateTestByCamera(mCameraIdsUnderTest[i], CameraDevice.TEMPLATE_MANUAL);        }    }   ])', 1), ('([10:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[10]:method_text:[e(mCameraIdsUnderTest[i], mCameraMockListener);                }            }        }    }   ])', 1), ('([8:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[8]:method_text:[e(mCameraIdsUnderTest[i], mCameraMockListener);                }            }        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[1]:method_text:[ runCaptureTest(/*burst*/false, /*repeating*/false, /*abort*/false, /*useExecutor*/true);    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[1]:method_text:[  runCaptureTest(/*burst*/true, /*repeating*/false, /*abort*/false, /*useExecutor*/true);    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[1]:method_text:[  runCaptureTest(/*burst*/false, /*repeating*/true, /*abort*/false, /*useExecutor*/true);    }   ])', 1), ('([6:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[6]:method_text:[progress work. Once the abort is complete, the idle callback will be called.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[1]:method_text:[     */    }    /**     * Test invalid capture (e.g. null or empty capture request).     */   ])', 1), ('([8:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[8]:method_text:[rtCaptures,     *     capture, setRepeatingRequest, stopRepeating, session+device.close     */   ])', 1), ('([65:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[65]:method_text:[    /**     * Verify basic semantics and error conditions of the prepare call.     *     */   ])', 1), ('([10:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[10]:method_text:[    }    /**     * Verify prepare call behaves properly when sharing surfaces.     *     */   ])', 1), ('([12:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[12]:method_text:[r);            }        }    }    /**     * Verify creating sessions back to back.     */   ])', 1), ('([11:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[11]:method_text:[istener);            }        }    }    /**     * Verify creating a custom session     */   ])', 1), ('([23:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[23]:method_text:[           mSession.close();        }    }    /**     * Test session configuration.     */   ])', 1), ('([11:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[11]:method_text:[    }    }    /**     * Check for any state leakage in case of internal re-configure     */   ])', 1), ('([39:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[39]:method_text:[);        }    }    /**     * Verify creating a session with additional parameters.     */   ])', 1), ('([210:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[210]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 1), ('([65:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[65]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                cam1Cb = null;            }        }    }   ])', 1), ('([7:/android/hardware/camera2/cts/CameraDeviceTest.java]:[CAMERA]:[7]:method_text:[cesAudioRestriction(mCameraIdsUnderTest[i], mCameraIdsUnderTest[j]);            }        }    }}])', 1)]"	""	""	"[('CAMERA', 124), ('ACCESS_FINE_LOCATION', 3), ('ACCESS_COARSE_LOCATION', 1), ('ACCESS_BACKGROUND_LOCATION', 1)]"	"[('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs None]', 3), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetCameraDisabledLogged None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyguardDisabledSecureCameraLogged None]', 2), ('[android.telecom.cts.VideoCallTest testReceiveSessionModifyResponse None]', 1), ('[android.telecom.cts.VideoCallTest testVideoCallDelayProvider None]', 1), ('[android.telecom.cts.VideoCallTest testChangeCamera None]', 1), ('[android.telecom.cts.VideoCallTest testRequestCameraCapabilities None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveCallSessionEvent None]', 1), ('[android.telecom.cts.VideoCallTest testReceivePeerDimensionChange None]', 1), ('[android.telecom.cts.VideoCallTest testSetDisplaySurface None]', 1), ('[android.telecom.cts.VideoCallTest testSetPauseImage None]', 1), ('[android.graphics.cts.CameraVulkanGpuTest testCameraImportAndRendering None]', 1), ('[android.permission.cts.OneTimePermissionTest testStickyServiceMaintainsPermissionOnRestart None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testFlexibleYuv None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testDepth16 None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testDepthPointCloud None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testDynamicDepth None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testY8 None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testJpeg None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRaw None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRawPrivate None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testHeic None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingJpeg None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingRaw None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingRawPrivate None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingHeic None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testLongProcessingRepeatingRaw None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testLongProcessingRepeatingFlexibleYuv None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testInvalidAccessTest None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpeg None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpegWithUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRaw None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderPrivateWithProtectedUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRawWithUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testDiscardFreeBuffers None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.view.cts.KeyEventTest testIsSystem None]', 1), ('[android.hardware.camera2.cts.RecordingTest isColorOutputSupported None]', 1), ('[android.hardware.camera2.cts.RecordingTest testBasicVideoStabilizationRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testBasicRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testIntermediateSurfaceRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testBasicEncoderProfilesRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingFromPersistentSurface None]', 1), ('[android.hardware.camera2.cts.RecordingTest testSupportedVideoSizes None]', 1), ('[android.hardware.camera2.cts.RecordingTest testCameraRecorderOrdering None]', 1), ('[android.hardware.camera2.cts.RecordingTest testMediaCodecRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testVideoSnapshot None]', 1), ('[android.hardware.camera2.cts.RecordingTest testAbandonedHighSpeedRequest None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingFramerateLowToHigh None]', 1), ('[android.hardware.camera2.cts.RecordingTest testVideoPreviewSurfaceSharing None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.permission.cts.CameraPermissionTest testCamera None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testSettingsBinderParcel None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testBlackLevelLock None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testDynamicBlackWhiteLevel None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testLensShadingMap None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testAntiBandingModes None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testAeModeAndLock None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testFlashControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testFlashTurnOff None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testFaceDetection None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testToneMapControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testColorCorrectionControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testEdgeModeControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testEdgeModeControlFastFps None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testFocusDistanceControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testNoiseReductionModeControl None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testNoiseReductionModeControlFastFps None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testAwbModeAndLock None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testAfModes None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testCameraStabilizations None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testDigitalZoom None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testZoomRatio None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testDigitalZoomPreviewCombinations None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testSceneModes None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testEffectModes None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testInvalidOutput None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineCallbacks None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineDepthJpeg None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineHEIC None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testDeviceCloseAndOpen None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionClose None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionWithRegularSession None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testRepeatingSequenceAbort None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testUnsupportedOfflineSessionOutputs None]', 1), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService None]', 1), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest testRotationResolutionRequest_ConstructorSetsValues None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDevicePreviewTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceStillTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRecordingTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceVideoSnapShotTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceZSLTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceManualTemplate None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceCreateCaptureBuilder None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceSetErrorListener None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceCapture None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceCaptureBurst None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRepeatingRequest None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRepeatingBurst None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceAbort None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testInvalidCapture None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testChainedOperation None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testPrepare None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testPrepareForSharedSurfaces None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessions None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateCustomSession None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testSessionConfiguration None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testSessionParametersStateLeak None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionMultipleDevices None]', 1)]"
"157:486383) 7.1.1.1  . Screen Size and Shape"	"7.1.1.1"	"H-0-2"	"7.1.1.1/H-0-2"	"07010101.720002"	""">7.1.1.1/H-0-2] MUST support GPU composition of graphic buffers at least as large as the highest resolution of any built-in display. If Handheld device implementations support software screen rotation, they: [<a href=""#7_1_display_and_graphics"""""	""	""	"GPU"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-source/cts/hostsidetests/gputools/src/android/gputools/cts/CtsRootlessGpuDebugHostTest.java', 16), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src/android/appmanifest/cts/UsesNativeLibraryTestCase.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraGpuTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_01.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiViewTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/GraphicsStatsValidationTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/FrameMetricsListenerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PixelCopyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/MediaVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DirectReportAPI30/src/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/refocus/RefocusTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionSessionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BasicVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/DebuggableAPI31/src/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/PresentationSyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/deviceconfig/src/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/KeySetHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nativehardware/src/android/hardware/nativehardware/cts/HardwareBufferVrTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/cts/HardwareBufferTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uiautomation/src/android/app/uiautomation/cts/UiAutomationTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java', 1)]"	"[('(2,GPU,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 2), ('(3,GPU,/android/hardware/cts/HardwareBufferTest.java)', 2), ('(1,GPU,/android/view/cts/ASurfaceControlTest.java)', 2), ('(2,GPU,/android/hardware/camera2/cts/RobustnessTest.java)', 2), ('(2,GPU,/android/hardware/camera2/cts/MultiViewTest.java)', 2), ('(2,GPU,/android/graphics/cts/BitmapTest.java)', 2), ('(3,GPU,/android/security/cts/Poc17_01.java)', 2), ('(94,GPU,/android/gputools/cts/CtsRootlessGpuDebugHostTest.java)', 2), ('(2,GPU,/android/graphics/cts/BasicVulkanGpuTest.java)', 2), ('(1,GPU,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(14,GPU,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(5,GPU,/android/view/cts/FrameMetricsListenerTest.java)', 1), ('(4,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(1,GPU,/android/view/cts/PixelCopyTest.java)', 1), ('(1,GPU,/android/graphics/cts/MediaVulkanGpuTest.java)', 1), ('(2,GPU,/android/graphics/cts/SyncTest.java)', 1), ('(5,GPU,/android/graphics/cts/CameraGpuTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java)', 1), ('(2,GPU,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(2,GPU,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(1,GPU,/android/renderscript/cts/refocus/RefocusTest.java)', 1), ('(4,GPU,/android/appmanifest/cts/UsesNativeLibraryTestCase.java)', 1), ('(3,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java)', 1), ('(1,GPU,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(9,GPU,/com/android/cts/deviceowner/VrTemperatureTest.java)', 1), ('(1,GPU,/android/hardware/camera2/cts/CameraExtensionSessionTest.java)', 1), ('(1,GPU,/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java)', 1), ('(3,GPU,/android/media/cts/PresentationSyncTest.java)', 1), ('(1,GPU,/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java)', 1), ('(1,GPU,/android/appsecurity/cts/KeySetHostTest.java)', 1), ('(2,GPU,/android/hardware/nativehardware/cts/HardwareBufferVrTest.java)', 1), ('(7,GPU,/com/android/server/cts/GraphicsStatsValidationTest.java)', 1), ('(23,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1), ('(1,GPU,/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java)', 1), ('(1,GPU,/android/app/uiautomation/cts/UiAutomationTest.java)', 1), ('(24,GPU,/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java)', 1)]"	"[('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[GPU]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 2), ('([3:/android/hardware/cts/HardwareBufferTest.java]:[GPU]:[3]:method_text:[        1, HardwareBuffer.USAGE_GPU_SAMPLED_IMAGE | HardwareBuffer.USAGE_GPU_COLOR_OUTPUT));    }}])', 2), ('([1:/android/view/cts/ASurfaceControlTest.java]:[GPU]:[1]:method_text:[                        return pixelCount == 0;                    }                });    }   ])', 2), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[GPU]:[2]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 2), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[ify the Bitmap     * from the first TextureView is identical to the second TextureView.     */   ])', 2), ('([1:/android/hardware/camera2/cts/MultiViewTest.java]:[GPU]:[1]:method_text:[    }    /*     * Verify behavior of sharing surfaces within one OutputConfiguration     */   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 2), ('([1:/android/security/cts/Poc17_01.java]:[GPU]:[1]:method_text:[ls.runPoc(""CVE-2016-8426"", getDevice(), 60);        }    }    /**     *  b/31799885     */   ])', 2), ('([2:/android/security/cts/Poc17_01.java]:[GPU]:[2]:method_text:[ls.runPoc(""CVE-2016-8427"", getDevice(), 60);        }    }    /**     *  b/31993456     */   ])', 2), ('([30:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[30]:method_text:[es layers to our debuggable app and ensures they are     * loaded in the correct order.     */   ])', 2), (""([6:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[6]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 2), ('([1:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[1]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 2), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 2), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[e apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 2), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[     * This test ensures we can still use properties if no layer specified via Settings     */   ])', 2), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[    /**     * This test ensures system properties are ignored if Settings load a layer     */   ])', 2), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[  /**     * This test ensures a debuggable app can load layers from an external package     */   ])', 2), (""([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[es non-debuggable apps ignore Settings and don't enumerate layers in the base directory.     */   ])"", 2), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[not enumerate layers in base     * directory if enable_gpu_debug_layers is not enabled.     */   ])', 2), ('([4:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[4]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_app does not match.     */   ])', 2), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[S apps do not enumerate layers in base     * directory if gpu_debug_layers are not set.     */   ])', 2), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures we can still use properties if no GLES layers are specified     */   ])', 2), ('([3:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[3]:method_text:[/**     * This test ensures system properties are ignored if Settings load a GLES layer     */   ])', 2), ('([7:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[7]:method_text:[/**     * This test ensures that external GLES layers can be loaded by a debuggable app     */   ])', 2), ('([5:/android/gputools/cts/CtsRootlessGpuDebugHostTest.java]:[GPU]:[5]:method_text:[ppStartTime);        Assert.assertTrue(GLES_LAYER_C + "" was not loaded"", glesResult.found);    }}])', 2), ('([2:/android/graphics/cts/BasicVulkanGpuTest.java]:[GPU]:[2]:method_text:[rmat;    public BasicVulkanGpuTest(String name, int format) {        mFormat = format;    }   ])', 2), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[GPU]:[1]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([14:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[GPU]:[14]:method_text:[ges);            oldFanSpeeds = fanSpeeds;            oldCpuUsages = cpuUsages;        }    }}])', 1), ('([5:/android/view/cts/FrameMetricsListenerTest.java]:[GPU]:[5]:method_text:[rawFrameMetric,                (firstDrawFrameMetric == 0) || (firstDrawFrameMetric == 1));    }}])', 1), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[4]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([1:/android/view/cts/PixelCopyTest.java]:[GPU]:[1]:method_text:[se();                    } catch (Throwable t) {}                }            }        }    }}])', 1), ('([1:/android/graphics/cts/MediaVulkanGpuTest.java]:[GPU]:[1]:method_text:[map.getWidth(),                         bitmap.getHeight());        return framePixels;    }   ])', 1), ('([2:/android/graphics/cts/SyncTest.java]:[GPU]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([4:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[4]:method_text:[> mActivityRule =            new ActivityTestRule<>(CameraGpuCtsActivity.class, false, false);   ])', 1), ('([1:/android/graphics/cts/CameraGpuTest.java]:[GPU]:[1]:method_text:[e.launchActivity(null);        activity.waitToFinishRendering();        activity.finish();    }}])', 1), ('([1:/android/sensorratepermission/cts/directreportapi30/DirectReportAPI30Test.java]:[GPU]:[1]:method_text:[                        > SensorRatePermissionDirectReportTestHelper.CAPPED_SAMPLE_RATE_HZ);    }])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[GPU]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[GPU]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ hwBuffer2.getLayers());        assertEquals(hwBuffer.getUsage(), hwBuffer2.getUsage());    }   ])', 1), ('([1:/android/graphics/cts/BitmapTest.java]:[GPU]:[1]:method_text:[ap bitmap = Bitmap.wrapHardwareBuffer(hwBuffer, ColorSpace.get(Named.CIE_LAB));        }    }   ])', 1), ('([1:/android/renderscript/cts/refocus/RefocusTest.java]:[GPU]:[1]:method_text:[+                context.getResources().getResourceEntryName(resID));        return path;    }}])', 1), ('([2:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[2]:method_text:[package manager is the same as     * the public.libraries*.txt files in the partitions.     */   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[iredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }   ])', 1), ('([1:/android/appmanifest/cts/UsesNativeLibraryTestCase.java]:[GPU]:[1]:method_text:[quiredLibs, optionalLibs, availableLibs, unavailableLibs)));        runInstalledTestApp();    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[2]:method_text:[dp_lowram=96,""                + ""icon_format=PNG,""                + ""icon_quality=100"";    }   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerFakingPublisherTest.java]:[GPU]:[1]:method_text:[name mismatch"",                () -> runWithCaller(callerContext, () -> r.run())        );    }}])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[GPU]:[1]:method_text:[der.nativeOrder());        return ((long) b.getInt()) & 0xFFFFFFFFl; // signed => unsigned    }}])', 1), ('([9:/com/android/cts/deviceowner/VrTemperatureTest.java]:[GPU]:[9]:method_text:[inThrottlingThresholds, skinShutdownThresholds,                skinVrThrottlingThresholds);    }}])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionSessionTest.java]:[GPU]:[1]:method_text:[epeating with multi frame capture on all supported extensions.    // Verify still frame output.   ])', 1), ('([1:/android/sensorratepermission/cts/debuggableapi31/DebuggableAPI31Test.java]:[GPU]:[1]:method_text:[ecurityException"");        } catch (SecurityException e) {            // Expected        }    }])', 1), ('([3:/android/media/cts/PresentationSyncTest.java]:[GPU]:[3]:method_text:[sleep(10); }                catch (InterruptedException ignored) {}            }        }    }}])', 1), ('([1:/android/deviceconfig/cts/DeviceConfigApiPermissionTests.java]:[GPU]:[1]:method_text:[      Exception e) {        violations.append(message).append("": "").append(e).append(""\\n"");    }}])', 1), ('([1:/android/appsecurity/cts/KeySetHostTest.java]:[GPU]:[1]:method_text:[k that an apk with an upgrade key that has no corresponding public key fails to install.     */   ])', 1), ('([2:/android/hardware/nativehardware/cts/HardwareBufferVrTest.java]:[GPU]:[2]:method_text:[s(format, buffer.getFormat());            assertEquals(flags, buffer.getUsage());        }    }}])', 1), ('([4:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[4]:method_text:[e[0] = """";            orgiRefreshRate[1] = """";        }        return orgiRefreshRate;    }   ])', 1), ('([3:/com/android/server/cts/GraphicsStatsValidationTest.java]:[GPU]:[3]:method_text:[tStatsEnd());                latest = proto;            }        }        return latest;    }}])', 1), ('([23:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[23]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerSpoofingTest.java]:[GPU]:[1]:method_text:[           assertEquals(""title3"", s.getShortLabel());                    });        });    }   ])', 1), ('([1:/android/app/uiautomation/cts/UiAutomationTest.java]:[GPU]:[1]:method_text:[entation getInstrumentation() {        return InstrumentationRegistry.getInstrumentation();    }}])', 1), ('([24:/android/graphics/gpuprofiling/cts/CtsGpuProfilingDataTest.java]:[GPU]:[24]:method_text:[t of the feature. We check that gpu.counters and gpu.renderstages sources are available.     */   ])', 1)]"	""	""	"[('GPU', 86)]"	"[('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 2), ('[android.hardware.cts.HardwareBufferTest testIsSupported None]', 2), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_setBufferOpaque_transparent None]', 2), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables None]', 2), ('[android.hardware.camera2.cts.MultiViewTest testSharedSurfaceSwitch None]', 2), ('[android.hardware.camera2.cts.MultiViewTest testTextureImageWriterReaderOperation None]', 2), ('[android.graphics.cts.BitmapTest testWrapHardwareBufferWithRgbBufferButNonRgbColorSpaceFails None]', 2), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter None]', 2), ('[android.security.cts.Poc17_01 testPocCVE_2016_8426 None]', 2), ('[android.security.cts.Poc17_01 testPocCVE_2016_8427 None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest currentTimeMillis None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testInjectLayerLoadVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreVulkan None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugLayerLoadGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testReleaseLayerLoadGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNotEnabledGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugWrongAppGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testDebugNoLayersEnabledGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyEnableGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testSystemPropertyIgnoreGLES None]', 2), ('[android.gputools.cts.CtsRootlessGpuDebugHostTest testMultipleExternalApps None]', 2), ('[android.graphics.gpuprofiling.cts.CtsGpuProfilingDataTest isEmpty None]', 2), ('[com.android.cts.deviceowner.HardwarePropertiesManagerTest testHardwarePropertiesManager None]', 1), ('[android.view.cts.FrameMetricsListenerTest testDropCount None]', 1), ('[android.view.cts.PixelCopyTest testBufferQueueCrop None]', 1), ('[android.graphics.cts.CameraGpuTest testCameraImageCaptureAndRendering None]', 1), ('[android.sensorratepermission.cts.directreportapi30.DirectReportAPI30Test testSamplingRateMicToggleOffOnOff None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.renderscript.cts.refocus.RefocusTest testNewRefocus None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase getTestInformation None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppDependsOnSomePublicLibraries None]', 1), ('[android.appmanifest.cts.UsesNativeLibraryTestCase testNewAppOptionallyDependsOnSomePublicLibraries None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerFakingPublisherTest testSpoofingPublisher None]', 1), ('[android.hardware.cts.SensorDirectReportTest testCloseWithoutConfigStop None]', 1), ('[com.android.cts.deviceowner.VrTemperatureTest testVrTemperatures None]', 1), ('[android.hardware.camera2.cts.CameraExtensionSessionTest testConcurrentSessions None]', 1), ('[android.sensorratepermission.cts.debuggableapi31.DebuggableAPI31Test testDirectChannel None]', 1), ('[android.media.cts.PresentationSyncTest testThroughput None]', 1), ('[android.deviceconfig.cts.DeviceConfigApiPermissionTests testDeviceConfigPublicNamespacesWithoutReadPermission None]', 1), ('[android.appsecurity.cts.KeySetHostTest testBadUpgradeMissingPubKey None]', 1), ('[android.hardware.nativehardware.cts.HardwareBufferVrTest testLayeredBuffersForVr None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testJankyDrawFrame None]', 1), ('[com.android.server.cts.GraphicsStatsValidationTest testDaveyDrawFrame None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerSpoofingTest testSpoofingPublisher None]', 1), ('[android.app.uiautomation.cts.UiAutomationTest testCallingPublicAPIsWithDontUseAccessibilityFlag_shouldNotThrowException None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-4-3"	"9.8.2/H-4-3"	"09080200.720403"	""">9.8.2/H-4-3] MUST not hide the microphone indicator for system apps that have visible user interfaces or direct user interaction. [<a href=""#9_8_2_privacy"""""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-1"	"2.2.7.1/H-1-1"	"02020701.720101"	"""5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 2 frames in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they:  | 5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.3/H-1-1] MUST NOT drop more than 2 frames in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. | 5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. <h4 id=""2272_camera"" """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS VideoCapabilities.getSupportedPerformancePoints android.os.Build.VERSION getSupportedPerformancePoints() AAC CTS CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances()"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 13), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/http/cts/ApacheHttpClientTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/RadioGroup_LayoutParamsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/CompilerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/DirectoryTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/health/cts/HealthStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSForEachTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/EventConnectionAPI30/src/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ScriptTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/Color_ColorLongTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/multiuser/src/android/multiuser/cts/SplitSystemUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ConnectivityManagerPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContextThemeWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PrecompiledLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/DecodeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/assist/src/android/assist/cts/FocusChangeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShapeTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/ValueAnimatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteWalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/FlagSecureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/InputDeviceEnabledTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_DefaultFocusHighlightTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/EcKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/LeadingMarginSpan_StandardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicConvolve5x5.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicLut.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/BatchUpdatesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestAcos.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/RadioAccessSpecifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/InstantAppsTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/EmbossMaskFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/LteVopsSupportInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(1,AAC,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,CTS,/android/security/cts/STKFrameworkTest.java)', 1), ('(2,CTS,/android/adb/cts/AdbHostTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,CTS,/android/app/cts/AliasActivityTest.java)', 1), ('(6,CTS,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(36,CTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,CTS,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,CTS,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,CTS,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,CTS,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,CTS,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,CTS,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(5,CTS,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/AffiliationTest.java)', 1), ('(17,CTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,CTS,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(4,CTS,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(8,CTS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,CTS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/renderscript/cts/CompilerTest.java)', 1), ('(1,CTS,/com/android/server/cts/device/statsdatom/DirectoryTests.java)', 1), ('(1,CTS,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,CTS,/android/media/cts/AudioMetadataTest.java)', 1), ('(1,CTS,/android/os/health/cts/HealthStatsTest.java)', 1), ('(1,CTS,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,CTS,/android/cts/rscpp/RSForEachTest.java)', 1), ('(6,CTS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(2,CTS,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(2,CTS,/android/renderscript/cts/ScriptTest.java)', 1), ('(1,CTS,/android/ndef/cts/NdefTest.java)', 1), ('(1,CTS,/android/graphics/cts/Color_ColorLongTest.java)', 1), ('(5,CTS,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,CTS,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(1,CTS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/permission/cts/ConnectivityManagerPermissionTest.java)', 1), ('(24,CTS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(164,CTS,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(1,CTS,/android/view/cts/ContextThemeWrapperTest.java)', 1), ('(6,CTS,/android/net/http/cts/ApacheHttpClientTest.java)', 1), ('(2,CTS,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(2,CTS,/android/view/cts/PrecompiledLayoutTest.java)', 1), ('(1,AAC,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(3,CTS,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,CTS,/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java)', 1), ('(2,CTS,/android/security/cts/DecodeTest.java)', 1), ('(1,CTS,/android/assist/cts/FocusChangeTest.java)', 1), ('(5,CTS,/android/uirendering/cts/testclasses/ShapeTests.java)', 1), ('(4,CTS,/android/view/cts/ActionModeTest.java)', 1), ('(2,CTS,/android/animation/cts/ValueAnimatorTest.java)', 1), ('(1,CTS,/android/content/res/cts/ConfigurationTest.java)', 1), ('(1,CTS,/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteWalTest.java)', 1), ('(19,CTS,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(1,CTS,/android/assist/cts/FlagSecureTest.java)', 1), ('(1,CTS,/android/view/cts/InputDeviceEnabledTest.java)', 1), ('(1,CTS,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,CTS,/android/view/cts/View_DefaultFocusHighlightTest.java)', 1), ('(1,CTS,/android/keystore/cts/EcKeyGenPerformanceTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(4,CTS,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(1,CTS,/android/text/style/cts/LeadingMarginSpan_StandardTest.java)', 1), ('(1,CTS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(9,CTS,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicConvolve5x5.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java)', 1), ('(1,CTS,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicLut.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(7,CTS,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/BatchUpdatesTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestAcos.java)', 1), ('(3,CTS,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,CTS,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(1,CTS,/android/telephony/cts/RadioAccessSpecifierTest.java)', 1), ('(6,CTS,/android/security/cts/TestMedia.java)', 1), ('(1,CTS,/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java)', 1), ('(1,CTS,/android/alarmmanager/cts/InstantAppsTests.java)', 1), ('(1,CTS,/android/graphics/cts/EmbossMaskFilterTest.java)', 1), ('(1,CTS,/android/telephony/cts/LteVopsSupportInfoTest.java)', 1), ('(3,CTS,/android/net/wifi/nl80211/cts/PnoSettingsTest.java)', 1), ('(2,CTS,/android/widget/cts/RadioGroup_LayoutParamsTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[AAC]:[1]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[CTS]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([2:/android/adb/cts/AdbHostTest.java]:[CTS]:[2]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([3:/android/appsecurity/cts/LocationPolicyTest.java]:[CTS]:[3]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[CTS]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([6:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[CTS]:[6]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([32:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[32]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[ugmentedHelper.resetAugmentedService();        augmentedService.waitUntilDisconnected();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestNativeCospi.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[CTS]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/media/cts/ToneGeneratorTest.java]:[CTS]:[1]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[CTS]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[CTS]:[1]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([2:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[2]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[CTS]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[2]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([5:/android/content/cts/ClipDescriptionTest.java]:[CTS]:[5]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java]:[CTS]:[1]:method_text:[.app.appsearch.AppSearchManager;import org.junit.Test;public class AppSearchManagerCtsTest {   ])', 1), ('([1:/com/android/cts/deviceowner/AffiliationTest.java]:[CTS]:[1]:method_text:[_POLICY_SERVICE);        mAdminComponent = BasicAdminReceiver.getComponentName(context);    }   ])', 1), ('([17:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[CTS]:[17]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[CTS]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java]:[CTS]:[4]:method_text:[) throws Exception {        super.setUp();        mResources = mContext.getResources();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([7:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[7]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[CTS]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[CTS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), (""([1:/android/renderscript/cts/CompilerTest.java]:[CTS]:[1]:method_text:[ins symbols that can't be resolved at runtime,     * which should trigger an exception.     */   ])"", 1), ('([1:/com/android/server/cts/device/statsdatom/DirectoryTests.java]:[CTS]:[1]:method_text:[t.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class DirectoryTests {   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[CTS]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[CTS]:[1]:method_text:[a.BaseMap>        KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);   ])', 1), ('([1:/android/os/health/cts/HealthStatsTest.java]:[CTS]:[1]:method_text:["").longValue());    }    /**     * Tests parceling empty HealthStats.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[CTS]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/android/cts/rscpp/RSForEachTest.java]:[CTS]:[1]:method_text:[        System.loadLibrary(""rscpptest_jni"");    }    native boolean testForEach(String path);   ])', 1), ('([6:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[CTS]:[6]:method_text:[ConnectionTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[CTS]:[2]:method_text:[ org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)@SmallTestpublic class TaggingTest {   ])', 1), ('([2:/android/renderscript/cts/ScriptTest.java]:[CTS]:[2]:method_text:[mport android.renderscript.cts.ScriptC_negate;public class ScriptTest extends RSBaseCompute {   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[CTS]:[1]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/graphics/cts/Color_ColorLongTest.java]:[CTS]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class Color_ColorLongTest {   ])', 1), ('([5:/android/view/inspector/cts/WindowInspectorTest.java]:[CTS]:[5]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CTS]:[1]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[CTS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([1:/android/permission/cts/ConnectivityManagerPermissionTest.java]:[CTS]:[1]:method_text:[ <p>Tests Permission:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[4]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[3]:method_text:[  runShellCmd(""cmd blob_store clear-all-blobs"");        mContext.getFilesDir().delete();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[2]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([5:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[5]:method_text:[ 1111L, ""tag2"");            assertThat(blobHandle1).isNotEqualTo(blobHandle2);        }    }   ])', 1), ('([8:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[8]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), (""([100:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[100]:method_text:[     * no contacts if there are no starred or frequent contacts in the user's contacts.     */   ])"", 1), (""([7:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[7]:method_text:[s in the correct order if there are only starred contacts in the user's     * contacts.     */   ])"", 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[CONTENT_STREQUENT_URI, ids,                false, sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[oredValuesWithContactsFilter(Contacts.CONTENT_STREQUENT_URI, ids,                false);    }   ])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[6]:method_text:[NT_FILTER_URI}     * correctly filters the returned contacts with the given user input.     */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[ithContactsFilter(uri, ids, false,                sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[ld(),                STREQUENT_PROJECTION,                new long[]{ids[0]}        );    }   ])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[5]:method_text:[ntactsFilter(uri, mDataIds, false,                sContentValues[0], sContentValues[2]);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[4]:method_text:[ ranking order.        assertCursorStoredValuesWithContactsFilter(uri, mDataIds, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[      STREQUENT_PHONE_ONLY_PROJECTION,                new long[]{mDataIds[0]}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[   assertCursorStoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[StoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids,                true);    }   ])', 1), ('([26:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[26]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/android/view/cts/ContextThemeWrapperTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[5]:method_text:[id tearDown() throws Exception {        super.tearDown();        mWebServer.shutdown();    }   ])', 1), ('([1:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[1]:method_text:[ytesRead;            }        }        assertEquals(message, expectedNumBytes, numBytes);    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[CTS]:[2]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([2:/android/view/cts/PrecompiledLayoutTest.java]:[CTS]:[2]:method_text:[ make sure that we get equivalent layouts when    // inflated with and without precompilation.   ])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[AAC]:[1]:method_text:[r(R.raw.valid_chain, R.raw.test_key);        runDownloadManagerTest(serverSocket, true);    }   ])', 1), ('([3:/android/security/net/config/cts/DownloadManagerTest.java]:[CTS]:[3]:method_text:[ength: 5\\r\\n\\r\\nhello"";    private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[CTS]:[1]:method_text:[ Exception {        super.setUp();        assumeTrue(supportsSplitScreenMultiWindow());    }   ])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[CTS]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1), ('([2:/android/security/cts/DecodeTest.java]:[CTS]:[2]:method_text:[. Instead, it should fail to     * decode.     */    @SecurityTest(minPatchLevel = ""2017-07"")   ])', 1), ('([1:/android/assist/cts/FocusChangeTest.java]:[CTS]:[1]:method_text:[espite the Assistant Firing""                    + Utils.TIMEOUT_MS + ""msec."");        }    }   ])', 1), ('([5:/android/uirendering/cts/testclasses/ShapeTests.java]:[CTS]:[5]:method_text:[h;@MediumTest@RunWith(AndroidJUnit4.class)public class ShapeTests extends ActivityTestBase {   ])', 1), ('([4:/android/view/cts/ActionModeTest.java]:[CTS]:[4]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[CTS]:[2]:method_text:[tatic void afterClass() {        ValueAnimator.setDurationScale(sPreviousAnimatorScale);    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[CTS]:[1]:method_text:[ation.NAVIGATION_NONAV;        mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java]:[CTS]:[1]:method_text:[t@RunWith(AndroidJUnit4.class)public class LayoutAnimationController_AnimationParametersTest {   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteWalTest.java]:[CTS]:[1]:method_text:[AL file size is bigger than the threshold, and make sure     * the file gets truncated.     */   ])', 1), ('([19:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[CTS]:[19]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/android/assist/cts/FlagSecureTest.java]:[CTS]:[1]:method_text:[rotected void customSetup() throws Exception {        startTestActivity(TEST_CASE_TYPE);    }   ])', 1), ('([1:/android/view/cts/InputDeviceEnabledTest.java]:[CTS]:[1]:method_text:[rgetContext().getSystemService(InputManager.class);        assertNotNull(mInputManager);    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CTS]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/view/cts/View_DefaultFocusHighlightTest.java]:[CTS]:[3]:method_text:[=            new ActivityTestRule<>(DefaultFocusHighlightCtsActivity.class);    @UiThreadTest   ])', 1), ('([1:/android/keystore/cts/EcKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[nceTest extends PerformanceTestBase {    final int[] SUPPORTED_CURVES = {224, 256, 384, 521};   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[CTS]:[4]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([1:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[CTS]:[1]:method_text:[RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class LeadingMarginSpan_StandardTest {   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[CTS]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([9:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[CTS]:[9]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicConvolve5x5.java]:[CTS]:[1]:method_text:[, si, e, cf3, ""test convolve"", 3, w, h, sc);        si.destroy();        sr.destroy();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java]:[CTS]:[1]:method_text:[clear profile owner"", e.getMessage());            }        }        super.tearDown();    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[CTS]:[1]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicLut.java]:[CTS]:[1]:method_text:[.set_green(mGreen);        mScript.set_blue(mBlue);        mScript.set_alpha(mAlpha);    }   ])', 1), ('([1:/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java]:[CTS]:[1]:method_text:[able;import org.junit.Test;import java.util.Set;public class BatchResultCallbackCtsTest {   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([7:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[CTS]:[7]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/autofillservice/cts/unittests/BatchUpdatesTest.java]:[CTS]:[1]:method_text:[tchUpdatesTest {    private final BatchUpdates.Builder mBuilder = new BatchUpdates.Builder();   ])', 1), ('([2:/android/renderscript/cts/generated/TestAcos.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([3:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[CTS]:[3]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([2:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[CTS]:[2]:method_text:[s);    @ClassRule @Rule    public static final DeviceState sDeviceState = new DeviceState();   ])', 1), ('([1:/android/telephony/cts/RadioAccessSpecifierTest.java]:[CTS]:[1]:method_text:[elephony.RadioAccessSpecifier;import org.junit.Test;public class RadioAccessSpecifierTest {   ])', 1), ('([3:/android/security/cts/TestMedia.java]:[CTS]:[3]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2018-10"")   ])', 1), ('([1:/android/security/cts/TestMedia.java]:[CTS]:[1]:method_text:[* Vulnerability Behaviour: SIGSEGV in self     **/    @SecurityTest(minPatchLevel = ""2017-06"")   ])', 1), ('([2:/android/security/cts/TestMedia.java]:[CTS]:[2]:method_text:[ test methods     ******************************************************************************/}])', 1), ('([1:/android/telephony/euicc/cts/GetDownloadableSubscriptionMetadataResultTest.java]:[CTS]:[1]:method_text:[(                        EuiccService.RESULT_RESOLVABLE_ERRORS, null /*subscriptions*/);    }   ])', 1), ('([1:/android/alarmmanager/cts/InstantAppsTests.java]:[CTS]:[1]:method_text:[0L)                .with(""min_window"", 0L)                .commitAndAwaitPropagation();    }   ])', 1), ('([1:/android/graphics/cts/EmbossMaskFilterTest.java]:[CTS]:[1]:method_text:[ static final int CENTER_Y = BITMAP_HEIGHT / 2;    private static final int STROKE_WIDTH = 10;   ])', 1), ('([1:/android/telephony/cts/LteVopsSupportInfoTest.java]:[CTS]:[1]:method_text:[id.telephony.LteVopsSupportInfo;import org.junit.Test;public class LteVopsSupportInfoTest {   ])', 1), ('([3:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[CTS]:[3]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([1:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([1:/android/widget/cts/RadioGroup_LayoutParamsTest.java]:[CTS]:[1]:method_text:[, int heightAttr) {            super.setBaseAttributes(a, widthAttr, heightAttr);        }    }}])', 1)]"	""	""	"[('CTS', 220), ('VERSION_CODES', 6), ('AAC', 2)]"	"[('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 2), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testServiceLifecycle None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_countLimitExceeded None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleEquality None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_noStarredOrFrequents None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_frequentsOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredAndFrequentsInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_withFilter None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnlyFrequentsOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_noFrequentsReturnsEmptyCursor None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_CorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection None]', 1), ('[android.net.http.cts.ApacheHttpClientTest testExecute None]', 1), ('[android.security.net.config.cts.DownloadManagerTest testConfigTrustedCaAccepted None]', 1), ('[android.database.sqlite.cts.SQLiteWalTest exists None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.renderscript.cts.IntrinsicConvolve5x5 finish None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.renderscript.cts.IntrinsicLut createTest None]', 1), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9472 None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9527 None]', 1), ('[android.alarmmanager.cts.InstantAppsTests isInstantApp None]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks None]', 1), ('[android.widget.cts.RadioGroup_LayoutParamsTest testSetBaseAttributes None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-5"	"7.4.2.4/C-1-5"	"07040204.670105"	"""C-1-5] MUST follow the AOSP implementation to discover, match and associate to Passpoint networks."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-3-5"	"7.3.10/C-3-5"	"07031000.670305"	"""C-3-5] MUST re-generate Authenticator ID for all Class 3 biometrics supported on device if any of them is re-enrolled."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-1-3"	"2.2.7.4/H-1-3"	"02020704.720103"	"""8.2/H-1-3] MUST ensure a sequential read performance of at least 200 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"250:699468) 9.5  . Multi"	"9.5"	"C-3-1"	"9.5/C-3-1"	"09050000.670301"	"""C-3-1] MUST only provide access to storage or data that is either already accessible to the parent user profile or is directly owned by this additional user profile."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"188:552069) 7.3.8  . Proximity Sensor"	"7.3.8"	"C-1-3"	"7.3.8/C-1-3"	"07030800.670103"	"""C-1-3] MUST use 0 centimeters as the near reading and 5 centimeters as the far reading."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"266:737364) 9.8.13  . SensorPrivacyManager"	"9.8.13"	"C-1-3"	"9.8.13/C-1-3"	"09081300.670103"	"""C-1-3] MUST only pass blank (or fake) camera and audio data to apps and not report an error code due to the user not turning on the camera nor microphone via the user affordance presented per"""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-3"	"2.2.7.2/H-1-3"	"02020702.720103"	"""7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for back primary and LIMITED or better for front primary camera. && 7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for back primary and LIMITED or better for front primary camera. | 7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for both primary cameras."""	""	""	"FULL LIMITED android.info.supportedHardwareLevel"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 21), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 7), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 3), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/accounts/src/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardTests.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/backup/src/android/cts/backup/SuccessNotificationHostSideTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/H264Yuv420_8bitBpBitstreamsFullTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/accounts/test-apps/AccountManagerCrossUserApp/src/com/android/cts/accountmanager/AccountManagerCrossUserTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/ParcelFileDescriptorTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ColorSpaceTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/http/cts/ApacheHttpClientTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteWalTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/BatchUpdatesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/WhitelistTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityStarterTests.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/BatchUpdatesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarPropertyValueTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DateValueSanitizerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 1)]"	"[('(3,FULL,/android/media/cts/SoundPoolTest.java)', 1), ('(1,LIMITED,/android/media/cts/SoundPoolTest.java)', 1), ('(2,FULL,/android/net/cts/TrafficStatsTest.java)', 1), ('(4,FULL,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(2,FULL,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(3,FULL,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,FULL,/RestoreAnyVersionTest.java)', 1), ('(7,FULL,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(2,FULL,/android/server/wm/DisplayTests.java)', 1), ('(3,FULL,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(3,FULL,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(24,FULL,/android/server/wm/AssistantStackTests.java)', 1), ('(10,FULL,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,FULL,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(21,FULL,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,FULL,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(2,FULL,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,FULL,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,FULL,/android/content/cts/ClipDescriptionTest.java)', 1), ('(4,FULL,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(2,FULL,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(3,FULL,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(1,FULL,/android/ndef/cts/NdefTest.java)', 1), ('(2,FULL,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(2,FULL,/android/net/http/cts/ApacheHttpClientTest.java)', 1), ('(5,FULL,/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java)', 1), ('(1,FULL,/android/view/cts/ActionModeTest.java)', 1), ('(1,FULL,/android/database/sqlite/cts/SQLiteWalTest.java)', 1), ('(2,FULL,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(2,FULL,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(2,FULL,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(2,FULL,/android/autofillservice/cts/unittests/BatchUpdatesTest.java)', 1), ('(6,FULL,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(6,LIMITED,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(3,FULL,/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java)', 1), ('(2,FULL,/android/server/wm/WindowContextTests.java)', 1), ('(2,FULL,/android/contentcaptureservice/cts/WhitelistTest.java)', 1), ('(9,FULL,/android/media/cts/AudioTrackTest.java)', 1), ('(2,LIMITED,/android/media/cts/AudioTrackTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/FillEventHistoryTest.java)', 1), ('(5,FULL,/android/media/cts/bitstreams/H264Yuv420_8bitBpBitstreamsFullTest.java)', 1), ('(2,FULL,/com/android/cts/accountmanager/AccountManagerCrossUserTest.java)', 1), ('(5,FULL,/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java)', 1), ('(1,FULL,/android/server/wm/lifecycle/ActivityStarterTests.java)', 1), ('(5,FULL,/android/server/wm/KeyguardTests.java)', 1), ('(2,FULL,/android/os/cts/ParcelFileDescriptorTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/BatchUpdatesTest.java)', 1), ('(1,LIMITED,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(2,LIMITED,/android/uirendering/cts/testclasses/ColorSpaceTests.java)', 1), ('(2,FULL,/android/car/cts/CarPropertyValueTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/DateValueSanitizerTest.java)', 1), ('(2,FULL,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(3,FULL,/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java)', 1), ('(2,FULL,/android/carrierapi/cts/BugreportManagerTest.java)', 1), ('(2,FULL,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,FULL,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(2,FULL,/android/media/cts/VisualizerTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java)', 1), ('(22,FULL,/android/cts/backup/SuccessNotificationHostSideTest.java)', 1)]"	"[('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 6), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 4), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[veRequest.structure, ID_PASSWORD);        assertTextAndValue(passwordNode, ""malkovich"");    }   ])', 2), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[utofillWhitelist((Set<String>) null,                        (Set<ComponentName>) null));    }   ])', 2), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[FULL]:[1]:method_text:[pose content provider, or move the content provider    // out of the test app.    @AppModeFull   ])', 2), ('([1:/android/uirendering/cts/testclasses/ColorSpaceTests.java]:[LIMITED]:[1]:method_text:[ int[] { 0xffff7f00, 0xffff7f00, 0xffff7f00, 0xffffffff, 0xffff3f00 }                ));    }   ])', 2), ('([2:/android/media/cts/SoundPoolTest.java]:[FULL]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[FULL]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[LIMITED]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[FULL]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[FULL]:[1]:method_text:[ * (20 + 32 + bytes);    }    @AppModeFull(reason = ""Socket cannot bind in instant app mode"")   ])', 1), ('([1:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[1]:method_text:[t.getErrorMessage())                .contains(""Property config \'to\' not found for key"");    }   ])', 1), ('([1:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[1]:method_text:[  .build();        assertThat(doGet(mDb, ""namespace"", ""id1"")).containsExactly(expected);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[2]:method_text:[        assertThat(doGet(mDb, ""namespace"", ""adult-id"")).containsExactly(expectedInAdult);    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[FULL]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[FULL]:[2]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[FULL]:[1]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([2:/RestoreAnyVersionTest.java]:[FULL]:[2]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[1]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[age(false);        Assert.assertTrue(runDeviceTests(TEST_PKG, TEST_CLASS, TEST_PASSES));    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[kage(false);        Assert.assertTrue(runDeviceTests(TEST_PKG, TEST_CLASS, TEST_FAILS));    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[on {        installPackage(TEST_APP, instant ? new String[]{""--instant""} : new String[0]);    }}])', 1), ('([1:/android/server/wm/DisplayTests.java]:[FULL]:[1]:method_text:[InsetsControllerControlsSystemBars is not set to true for     * non-automotive devices.     */   ])', 1), ('([1:/android/server/wm/DisplayTests.java]:[FULL]:[1]:method_text:[y.mFullConfiguration.densityDpi;        assertEquals(CUSTOM_DENSITY_DPI, newDensityDpi);    }   ])', 1), ('([1:/android/keystore/cts/ECDSASignatureTest.java]:[FULL]:[1]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[FULL]:[2]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([2:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[FULL]:[2]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[nt);    }    @MediumTest    @AppModeFull    @SuppressWarnings(""deprecation"")    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[d to use the correct package"");        }    }    @AppModeFull    @MediumTest    @Presubmit   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[FULL]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([5:/android/server/wm/AssistantStackTests.java]:[FULL]:[5]:method_text:[vityType(                            ACTIVITY_TYPE_ASSISTANT).isFullscreen());        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[FULL]:[1]:method_text:[ should be focused."",                WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);    }   ])', 1), ('([6:/android/server/wm/AssistantStackTests.java]:[FULL]:[6]:method_text:[tack should be focused."",                mDefaultWindowingMode, ACTIVITY_TYPE_STANDARD);    }   ])', 1), ('([7:/android/server/wm/AssistantStackTests.java]:[FULL]:[7]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[FULL]:[2]:method_text:[,                    mWmState.getTaskByActivity(ASSISTANT_ACTIVITY).mTaskId);        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[FULL]:[2]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[FULL]:[2]:method_text:[));        // delete        assertEquals(1, mContentResolver.delete(uri, null, null));    }   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[FULL]:[8]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[FULL]:[1]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[   mUiBot.selectDataset(""The Dude"");        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[elListener(listener);        // Assert results        listener.assertOnCancelCalled();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[GROOT""));        assertViewAutofillState(mActivity.getUsername(), false);    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[AugmentedUiBot.assertUiGone();        currentActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[hown        mUiBot.assertNoDatasetsEver();        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[...     * - No augmented autofill calls when the main service is not set.     * - etc...     */}])', 1), ('([2:/android/content/pm/cts/PermissionInfoTest.java]:[FULL]:[2]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([2:/android/media/cts/ToneGeneratorTest.java]:[FULL]:[2]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[FULL]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[FULL]:[1]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[FULL]:[1]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[FULL]:[1]:method_text:[le();        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[FULL]:[1]:method_text:[ception {        fillDatasetAuthWithClientState(ClientStateLocation.FILL_RESPONSE_ONLY);    }   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[FULL]:[1]:method_text:[.selectByRelativeId(id);        mUiBot.waitForIdle();        mUiBot.assertDatasets(names);    }}])', 1), ('([2:/android/print/cts/CustomPrintOptionsTest.java]:[FULL]:[2]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[FULL]:[1]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([2:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[FULL]:[2]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[FULL]:[1]:method_text:[0x6c, (byte) 0x65, (byte) 0x2e, (byte) 0x63,                (byte) 0x6f, (byte) 0x6d}));    }   ])', 1), ('([2:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[FULL]:[2]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([2:/android/net/http/cts/ApacheHttpClientTest.java]:[FULL]:[2]:method_text:[id tearDown() throws Exception {        super.tearDown();        mWebServer.shutdown();    }   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[FULL]:[1]:method_text:[ Exception {        super.setUp();        assumeTrue(supportsSplitScreenMultiWindow());    }   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[FULL]:[1]:method_text:[           .launch();        waitAndAssertActivityStates(state(sideActivity, ON_PAUSE));    }   ])', 1), ('([3:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[FULL]:[3]:method_text:[hangeHandlingActivity.class, ON_TOP_POSITION_GAINED),                ""exitSplitScreen"");    }   ])', 1), ('([1:/android/view/cts/ActionModeTest.java]:[FULL]:[1]:method_text:[ctionMode.invalidateContentRect();        verify(mockActionMode, never()).invalidate();    }   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteWalTest.java]:[FULL]:[1]:method_text:[AL file size is bigger than the threshold, and make sure     * the file gets truncated.     */   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[FULL]:[2]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[FULL]:[2]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([2:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[FULL]:[2]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([2:/android/autofillservice/cts/unittests/BatchUpdatesTest.java]:[FULL]:[2]:method_text:[tchUpdatesTest {    private final BatchUpdates.Builder mBuilder = new BatchUpdates.Builder();   ])', 1), ('([6:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[FULL]:[6]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([6:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[LIMITED]:[6]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/accounts/cts/AccountManagerUnaffiliatedAuthenticatorTests.java]:[FULL]:[1]:method_text:[nostic service and set it up.        mAccountManager = AccountManager.get(getContext());    }   ])', 1), ('([1:/android/server/wm/WindowContextTests.java]:[FULL]:[1]:method_text:[indowContextTests */@Presubmitpublic class WindowContextTests extends WindowContextTestBase {   ])', 1), ('([1:/android/server/wm/WindowContextTests.java]:[FULL]:[1]:method_text:[unds.width());        assertEquals(expectedMetrics.getSize().getHeight(), bounds.height());    }}])', 1), ('([2:/android/contentcaptureservice/cts/WhitelistTest.java]:[FULL]:[2]:method_text:[s AbstractContentCaptureIntegrationActivityLessTest {    @Ignore(""will be whitelisted \'lite\'"")   ])', 1), (""([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[servedChannelConf);    }    // Test case 2: build AudioTrack with AudioFormat, test it's used   ])"", 1), (""([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[RATE, observedRate);    }    // Test case 3: build AudioTrack with session ID, test it's used   ])"", 1), (""([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[    // Test case 4: build AudioTrack with AudioAttributes built from stream type, test it's used   ])"", 1), ('([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[ContentType());    }    // Test case 5: build AudioTrack with attributes and performance mode   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[.getPackageManager().hasSystemFeature(                PackageManager.FEATURE_AUDIO_PRO);    }   ])', 1), ('([3:/android/media/cts/AudioTrackTest.java]:[FULL]:[3]:method_text:[rackStartTimeNs, streamName);        } finally {            track.release();        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[FULL]:[1]:method_text:[         ; // OK to throw unsupported exception                }            }        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[LIMITED]:[1]:method_text:[        track.release();        Thread.sleep(waitMsec); // wait for release to complete    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[LIMITED]:[1]:method_text:[   bufferSizeInBytes, length);        } finally {            track.release();        }    }   ])', 1), ('([2:/android/autofillservice/cts/FillEventHistoryTest.java]:[FULL]:[2]:method_text:[vice-specific test"")public class FillEventHistoryTest extends FillEventHistoryCommonTestCase {   ])', 1), ('([4:/android/media/cts/bitstreams/H264Yuv420_8bitBpBitstreamsFullTest.java]:[FULL]:[4]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([1:/android/media/cts/bitstreams/H264Yuv420_8bitBpBitstreamsFullTest.java]:[FULL]:[1]:method_text:[age    public void testBitstreamsConformance() {        super.testBitstreamsConformance();    }}])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[FULL]:[1]:method_text:[accounts = accountManagerAsUser.getAccounts();        assertThat(accounts).hasLength(1);    }   ])', 1), ('([1:/com/android/cts/accountmanager/AccountManagerCrossUserTest.java]:[FULL]:[1]:method_text:[            assertThat(accounts).hasLength(1);        } catch (Exception e) {        }    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[FULL]:[1]:method_text:[ofill allowlist.        Helper.resetApplicationAutofillOptions(sContext);    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[FULL]:[1]:method_text:[ivity.        launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[FULL]:[1]:method_text:[launchPreSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[FULL]:[1]:method_text:[uration);        launchSimpleSaveActivity(PostLaunchAction.ASSERT_ENABLED_AND_AUTOFILL);    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[FULL]:[1]:method_text:[+ ""ms, passedTime=""                + passedTime + "")"");        SystemClock.sleep(napTime);    }}])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[FULL]:[1]:method_text:[within different tasks during sleeping. The no-history activity must be     * finished.     */   ])', 1), ('([1:/android/server/wm/KeyguardTests.java]:[FULL]:[1]:method_text:[    /**     * Test that showWhenLocked activity is fullscreen when shown over keyguard     */   ])', 1), ('([1:/android/server/wm/KeyguardTests.java]:[FULL]:[1]:method_text:[nLocked(true) above a     * SHOW_WHEN_LOCKED activity is visible if Keyguard is locked.     */   ])', 1), ('([3:/android/server/wm/KeyguardTests.java]:[FULL]:[3]:method_text:[ng FLAG_DISMISS_KEYGUARD activity     * becomes the top activity, it should be resumed.     */   ])', 1), ('([1:/android/os/cts/ParcelFileDescriptorTest.java]:[FULL]:[1]:method_text:[    private Context getContext() {        return InstrumentationRegistry.getContext();    }   ])', 1), ('([1:/android/os/cts/ParcelFileDescriptorTest.java]:[FULL]:[1]:method_text:[s.assertEquals(expected, observed);        } finally {            is.close();        }    }   ])', 1), ('([2:/android/autofillservice/cts/BatchUpdatesTest.java]:[FULL]:[2]:method_text:[tchUpdatesTest {    private final BatchUpdates.Builder mBuilder = new BatchUpdates.Builder();   ])', 1), ('([1:/android/telephony/cts/SubscriptionManagerTest.java]:[LIMITED]:[1]:method_text:[rentTimeMillis())));            assertTrue(latch.await(10, TimeUnit.SECONDS));        }    }   ])', 1), ('([2:/android/car/cts/CarPropertyValueTest.java]:[FULL]:[2]:method_text:[rtyManager) getCar().getCarManager(Car.PROPERTY_SERVICE);        getCarPropertyValues();    }   ])', 1), ('([2:/android/autofillservice/cts/DateValueSanitizerTest.java]:[FULL]:[2]:method_text:[itizerTest"";    private final SimpleDateFormat mDateFormat = new SimpleDateFormat(""MM/yyyy"");   ])', 1), ('([2:/android/net/wifi/cts/WifiInfoTest.java]:[FULL]:[2]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[ule getMainTestRule() {        return InlineUiBot.annotateRule(super.getMainTestRule());    }   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[FillRequest();        // Confirm new suggestion        mUiBot.assertDatasets(""dude2"");    }   ])', 1), ('([1:/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java]:[FULL]:[1]:method_text:[extFillRequest();        // Confirm new suggestion        mUiBot.assertDatasets(""dude2"");    }}])', 1), ('([2:/android/carrierapi/cts/BugreportManagerTest.java]:[FULL]:[2]:method_text:[tion {        assertSecurityExceptionThrownForMode(BugreportParams.BUGREPORT_MODE_FULL);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[FULL]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacFormat.java]:[FULL]:[2]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([2:/android/media/cts/VisualizerTest.java]:[FULL]:[2]:method_text:[ctor    //----------------------------------    //Test case 0.0: test constructor and release   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java]:[FULL]:[2]:method_text:[ule getMainTestRule() {        return InlineUiBot.annotateRule(super.getMainTestRule());    }   ])', 1), ('([15:/android/cts/backup/SuccessNotificationHostSideTest.java]:[FULL]:[15]:method_text:[ it to complete.     *   2. Verify that the observer app was informed about the backup.     */   ])', 1), ('([2:/android/cts/backup/SuccessNotificationHostSideTest.java]:[FULL]:[2]:method_text:[ it to complete.     *   2. Verify that the observer app was informed about the backup.     */   ])', 1), ('([5:/android/cts/backup/SuccessNotificationHostSideTest.java]:[FULL]:[5]:method_text:[OTIFICATION_APP_PACKAGE, SUCCESS_NOTIFICATION_DEVICE_TEST_NAME,                methodName);    }}])', 1)]"	""	""	"[('FULL', 122), ('LIMITED', 7)]"	"[('[android.media.cts.SoundPoolTest testAutoPauseResume None]', 2), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthClientStateSetOnIntentOnly None]', 2), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 2), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableApp None]', 2), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableActivity None]', 2), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.net.cts.TrafficStatsTest testThreadStatsTag None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toAnotherType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toMultipleDestinationType None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsPassesFull None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsFailsFull None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsAssumeFailsFull None]', 1), ('[android.server.wm.DisplayTests testDefaultDisplayOverrideConfiguration None]', 1), ('[android.server.wm.DisplayTests testCreateVirtualDisplayWithCustomConfig None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeWindowStateChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFaked None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[android.server.wm.AssistantStackTests testLaunchingAssistantActivityIntoAssistantStack None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackLaunchNewTaskWithDockedStack None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackFinishToPreviousApp None]', 1), ('[android.server.wm.AssistantStackTests testTranslucentAssistantActivityStackVisibility None]', 1), ('[android.server.wm.AssistantStackTests testLaunchIntoSameTask None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testStoreImagesMediaExternal None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_notImportantForAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_notImportantForAutofill_allowAutofillOnOtherField None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_mainServiceReturnedNull_augmentedAutofillTwoFields None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testCancellationSignalCalledAfterTimeout None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testCancellationSignalCalled_retriggerAugmentedAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_multipleRequests None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_thenEditField None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_rotateDevice None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_autoThenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_valueChangedOnSecondRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_tappingSecondTimeNotTrigger None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testSetAugmentedAutofillWhitelist_noStandardServiceSet None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testSetAugmentedAutofillWhitelist_notAugmentedService None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutofill_packageNotWhitelisted None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutofill_activityNotWhitelisted None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthTwoFields None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.ndef.cts.NdefTest testValidParsing None]', 1), ('[android.server.wm.lifecycle.ActivityLifecycleLegacySplitScreenTests testTranslucentOnSplitSecondaryTask None]', 1), ('[android.server.wm.lifecycle.ActivityLifecycleLegacySplitScreenTests testLifecycleOnMoveToFromSplitScreenNoRelaunch None]', 1), ('[android.view.cts.ActionModeTest testInvalidateContentRectDoesNotInvalidateFull None]', 1), ('[android.database.sqlite.cts.SQLiteWalTest exists None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testGetAccountsByTypeForPackage None]', 1), ('[android.accounts.cts.AccountManagerUnaffiliatedAuthenticatorTests testStartAddAccountSession None]', 1), ('[android.server.wm.WindowContextTests testWindowContextConfigChanges None]', 1), ('[android.media.cts.AudioTrackTest testBuilderDefault None]', 1), ('[android.media.cts.AudioTrackTest testBuilderFormat None]', 1), ('[android.media.cts.AudioTrackTest testBuilderSession None]', 1), ('[android.media.cts.AudioTrackTest testBuilderAttributesStream None]', 1), ('[android.media.cts.AudioTrackTest testPlayChannelIndexStreamBuffer None]', 1), ('[android.media.cts.AudioTrackTest testFastTimestamp None]', 1), ('[android.media.cts.AudioTrackTest testAudioTrackLargeFrameCount None]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData None]', 1), ('[android.media.cts.AudioTrackTest testStopDrain None]', 1), ('[android.media.cts.bitstreams.H264Yuv420_8bitBpBitstreamsFullTest testBitstreamsConformance None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_addMockAccount None]', 1), ('[com.android.cts.accountmanager.AccountManagerCrossUserTest testAccountManager_getAccountsForTestUser None]', 1), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest registerCallback None]', 1), ('[android.server.wm.lifecycle.ActivityStarterTests testNoHistoryActivityNotFinished None]', 1), ('[android.server.wm.KeyguardTests testDialogShowWhenLockedActivity None]', 1), ('[android.server.wm.KeyguardTests testShowWhenLockedActivityWhileSplit None]', 1), ('[android.server.wm.KeyguardTests testNoTransientConfigurationWhenShowWhenLockedRequestsOrientation None]', 1), ('[android.os.cts.ParcelFileDescriptorTest testFromSocket None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSubscriptionPlansUnmetered None]', 1), ('[android.uirendering.cts.testclasses.ColorSpaceTests testDrawProPhotoRGB None]', 1), ('[android.uirendering.cts.testclasses.ColorSpaceTests testDrawProPhotoRGBConfig565 None]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull None]', 1), ('[android.autofillservice.cts.inline.InlineAugmentedLoginActivityTest InlineAugmentedLoginActivityTest None]', 1), ('[android.autofillservice.cts.inline.InlineAugmentedLoginActivityTest testSwitchInputMethod None]', 1), ('[android.autofillservice.cts.inline.InlineAugmentedLoginActivityTest testSwitchInputMethod_mainServiceDisabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.autofillservice.cts.inline.InlineFillEventHistoryTest InlineFillEventHistoryTest None]', 1), ('[android.cts.backup.SuccessNotificationHostSideTest addBackupFinishedNotificationReceiver None]', 1), ('[android.cts.backup.SuccessNotificationHostSideTest testSuccessNotificationForKeyValueBackup None]', 1), ('[android.cts.backup.SuccessNotificationHostSideTest testSuccessNotificationForFullBackup None]', 1)]"
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	"C-1-2"	"3.5.2/C-1-2"	"03050200.670102"	"""C-1-2] MUST only apply the restriction on the app for a user when there is evidence that the user has not used the app for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer. Usage MUST be defined by either explicit user interaction via the"""	""	""	"RECOMMENDED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1)]"	"[('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 2), ('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 2), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 2), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 2), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1)]"	"[('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 2), ('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 2), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 2), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 2), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 2), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 2), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1)]"	""	""	"[('RECOMMENDED', 19)]"	"[('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled None]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations None]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-4-1"	"9.8.2/H-4-1"	"09080200.720401"	""">9.8.2/H-4-1] MUST display the microphone indicator when an app is accessing audio data from the microphone, but not when the microphone is only accessed by HotwordDetectionService, SOURCE_HOTWORD, ContentCaptureService or apps holding the roles called out in section 9.1 with CDD identifier [C-4-X]. . [<a href=""#9_8_2_privacy"""""	""	""	"CDD SOURCE_HOTWORD"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 35), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarPropertyManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/LowRamDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/multiuser/src/android/host/multiuser/CreateUsersPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/RequestPinAppWidgetTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/DataSaverModeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecord_BufferSizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/vr/src/android/vr/cts/VrCpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CompatChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssTtffTests.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoEncoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/CursorWindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1)]"	"[('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(2,CDD,/android/host/multiuser/CreateUsersPermissionTest.java)', 1), ('(1,CDD,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,CDD,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,CDD,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(3,CDD,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(4,CDD,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(2,CDD,/android/security/cts/EncryptionTest.java)', 1), ('(3,CDD,/android/graphics/cts/PaintTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecord_BufferSizeTest.java)', 1), ('(1,CDD,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(4,CDD,/android/car/cts/CarSensorManagerTest.java)', 1), ('(3,CDD,/android/appwidget/cts/RequestPinAppWidgetTest.java)', 1), ('(1,CDD,/android/media/cts/AudioTrackTest.java)', 1), ('(2,CDD,/android/vr/cts/VrCpuTest.java)', 1), ('(1,CDD,/android/server/wm/CompatChangeTests.java)', 1), ('(2,CDD,/com/android/cts/net/hostside/DataSaverModeTest.java)', 1), ('(3,CDD,/android/security/identity/cts/HkdfTest.java)', 1), ('(2,CDD,/android/text/cts/FontCoverageTest.java)', 1), ('(2,CDD,/android/graphics/cts/BitmapFactoryTest.java)', 1), ('(2,CDD,/android/app/cts/SystemFeaturesTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecordTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java)', 1), ('(1,CDD,/com/android/cts/runner/CtsTestRunListener.java)', 1), ('(3,CDD,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(2,CDD,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,CDD,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,CDD,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(3,CDD,/android/filesystem/cts/RandomRWTest.java)', 1), ('(2,CDD,/android/app/cts/DownloadManagerTest.java)', 1), ('(6,CDD,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,CDD,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(1,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(1,CDD,/android/media/cts/VideoEncoderTest.java)', 1), ('(6,CDD,/android/car/cts/CarPropertyManagerTest.java)', 1), ('(1,CDD,/android/database/cts/CursorWindowTest.java)', 1), ('(11,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(2,CDD,/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java)', 1), ('(2,CDD,/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java)', 1), ('(1,CDD,/android/security/cts/VerifiedBootTest.java)', 1), ('(7,CDD,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,CDD,/android/mediav2/cts/MuxerTest.java)', 1), ('(3,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java)', 1), ('(3,CDD,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(2,CDD,/android/telecom/cts/BasicInCallServiceTest.java)', 1), ('(16,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(7,CDD,/android/hardware/cts/LowRamDeviceTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(13,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(2,CDD,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(36,CDD,/android/security/cts/SELinuxHostTest.java)', 1)]"	"[('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ on the device is valid.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[e standard AOSP entries.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_DM)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 3), ('([1:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[1]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[();        install.run(expectingSuccess);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ verifyFsverityInstall(BASE_APK, SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[this domain, cardinality test is all thats     * needed     */    @CddTest(requirement=""9.7"")   ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CDD]:[2]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[   public final SupportsMultiUserRule mSupportsMultiUserRule = new SupportsMultiUserRule(this);   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[ {        createRestrictedProfile(mPrimaryUserId);    }    @CddTest(requirement=""9.5/A-1-3"")   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[CDD]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CDD]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/renderscript/cts/generated/TestConvert.java]:[CDD]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[2]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[1]:method_text:[ce().hasFeature(FEATURE_INCREMENTAL_DELIVERY));    }    @CddTest(requirement=""4/C-1-1,C-3-1"")   ])', 1), ('([2:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[2]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 1), ('([2:/android/security/cts/EncryptionTest.java]:[CDD]:[2]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[        Typeface.MONOSPACE,            Typeface.SANS_SERIF,            Typeface.SERIF,    };   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[.getTextPath(""HIJKLMN"", 3, 9, 0, 0, new Path());    }    @CddTest(requirement=""3.8.13/C-1-2"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([2:/android/media/cts/AudioRecord_BufferSizeTest.java]:[CDD]:[2]:method_text:[   48000,    };    private AudioRecord mAudioRecord;    @CddTest(requirement=""5.4.1/C-1-1"")   ])', 1), ('([1:/android/mediav2/cts/CodecDecoderTest.java]:[CDD]:[1]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[2]:method_text:[tedSensors();        assertNotNull(mSupportedSensors);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[assertTrue(""Must support SENSOR_TYPE_GEAR"", foundGear);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[(""Must support SENSOR_TYPE_NIGHT"", foundNightSensor);    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([2:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[2]:method_text:[he extras        assertEquals(""dummy-2"", resultReceiver.result.getStringExtra(""dummy""));    }   ])', 1), ('([1:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[1]:method_text:[                AppWidgetManager.getInstance(context).isRequestPinAppWidgetSupported());    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[CDD]:[1]:method_text:[ // Start threshold levels that we check.    private enum ThresholdLevel { LOW, MEDIUM, HIGH };   ])', 1), ('([2:/android/vr/cts/VrCpuTest.java]:[CDD]:[2]:method_text:[ic VrCpuTest() {        super(CtsActivity.class);    }    @CddTest(requirement=""7.9.2/C-1-1"")   ])', 1), ('([1:/android/server/wm/CompatChangeTests.java]:[CDD]:[1]:method_text:[-resizeable portrait activity enters size compat mode after resizing the     * display.     */   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[own() throws Exception {        super.tearDown();        setRestrictBackground(false);    }   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[  }    }    @RequiredProperties({NO_DATA_SAVER_MODE})    @CddTest(requirement=""7.4.7/C-2-2"")   ])', 1), ('([3:/android/security/identity/cts/HkdfTest.java]:[CDD]:[3]:method_text:[ hexDecode(ikmHex), hexDecode(saltHex),                        hexDecode(infoHex), size));    }}])', 1), ('([2:/android/text/cts/FontCoverageTest.java]:[CDD]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ctory.Options();        mOpt2.inScaled = false;        mOpt2.inJustDecodeBounds = true;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ample_rw2, 1920, 1440),                new DNG(R.raw.sample_srw, 5472, 3648),        };    }   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[        mIsOnPeriodicNotificationCalled = false;        mIsHandleMessageCalled = false;    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CDD]:[2]:method_text:[    }        }    }    /**     * Make sure the internal AIDL methods are protected.     */   ])', 1), ('([1:/com/android/cts/runner/CtsTestRunListener.java]:[CDD]:[1]:method_text:[w AssertionError(""Unable to set java.text.DateFormat.is24Hour"", e);            }        }    }}])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[;        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[)));        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }}])', 1), (""([2:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[CDD]:[2]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[MediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[CDD]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([2:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[2]:method_text:[   FileUtil.removeFileOrDir(getContext(), DIR_RANDOM_RD);    }    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[1]:method_text:[king too long in some device, and thus cannot run multiple times    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[JUnit4.class)public class DownloadManagerTest extends DownloadManagerTestBase {    @FlakyTest   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CDD]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/location/cts/gnss/GnssTtffTests.java]:[CDD]:[2]:method_text:[  @AppModeFull(reason = ""permission ACCESS_LOCATION_EXTRA_COMMANDS not available to instant apps"") ])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[CDD]:[1]:method_text:[60);    }    // Tests encoder profiles required by CDD.    // H264    @NonMediaMainlineTest   ])', 1), ('([2:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[2]:method_text:[G_BRAKE_ON);    }    /**     * Test for {@link CarPropertyManager#getPropertyList()}     */   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[aIdInConfig);                }            }        }    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[pertyIds.GEAR_SELECTION))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ePropertyIds.NIGHT_MODE))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/database/cts/CursorWindowTest.java]:[CDD]:[1]:method_text:[ndow.isNull(0, 4));        // Test isBlob        assertTrue(cursorWindow.isBlob(0, 4));    }   ])', 1), ('([10:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[10]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[d()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[SSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[CDD]:[1]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[2]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[acy API are also     * accessible via Camera2.     */    @CddTest(requirement=""7.5.4/C-0-11"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[ck camera orientation against device orientation     */    @CddTest(requirement=""7.5.5/C-1-1"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[for R and S Performance class requirements as specified     * in CDD camera section 7.5     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[CDD]:[1]:method_text:[s_25fps_aac_stereo_128kbps_11025hz_metadata_gyro_compliant.3gp""},            });        }       ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CDD]:[3]:method_text:[ic final String SHORTCUT_ID = ""s12345"";    @CddTest(requirement=""[3.8.1/C-2-1],[3.8.1/C-3-1]"")   ])', 1), ('([2:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[2]:method_text:[r.MATCH_DEFAULT_ONLY).activityInfo.packageName;    }    @CddTest(requirement = ""7.4.2/C-2-1"")   ])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[1]:method_text:[ wifiManager.isScanAlwaysAvailable()        );    }    @CddTest(requirement = ""7.4.3/C-4-1"")   ])', 1), ('([2:/android/telecom/cts/BasicInCallServiceTest.java]:[CDD]:[2]:method_text:[tDialer);        }        super.tearDown();    }    @CddTest(requirement = ""7.4.1.2/C-1-3"")   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[     getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[   verifyFsverityInstall(incremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[Install(incremental, BASE_APK, SPLIT_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK, BASE_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[PK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[cremental, BASE_APK, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(updateIncremental, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ll(updateIncremental, BASE_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erityInstall(updateIncremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[X)                .runExpectingFailure();    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(incremental, BASE_APK_DM, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[tal, BASE_APK_DM, SPLIT_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([2:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[2]:method_text:[ces reported memory to ensure it meets the minimum values described     * in CDD 7.6.1.     */   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[44);            } else {                assertMinMemoryMb(592);            }        }    }   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[  mContext.getExternalFilesDir(null),                MIN_SHARED_DATA_PARTITION_SIZE_GB);    }   ])', 1), ('([3:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[3]:method_text:[%d, Minimum = %d"", partitionName, size, minSizeBytes),                size > minSizeBytes);    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CDD]:[2]:method_text:[dp_lowram=96,""                + ""icon_format=PNG,""                + ""icon_quality=100"";    }   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[       getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[  .run();        verifyFsverityInstall(BASE_APK);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[FIX)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erifyFsverityInstall(BASE_APK, BASE_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_APK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[APK)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[);        verifyFsverityInstall(SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[CDD]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([2:/android/security/cts/SELinuxHostTest.java]:[CDD]:[2]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[apps via levelFrom=user.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ime conditional policy).     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);            }        }    }    /* Init is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ ""u:r:vendor_init:s0"");    }    /* Ueventd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/ueventd"");    }    /* healthd may or may not exist */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/healthd"");    }    /* Servicemanager is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/servicemanager"");    }    /* Vold is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[:s0"", ""/system/bin/vold"");    }    /* netd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[bles-restore"");    }    /* Surface flinger is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[/bin/surfaceflinger"");    }    /* Zygote is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);    }    /* Checks drmserver for devices that require it */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/drmserver"");    }    /* Installd is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/installd"");    }    /* keystore is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[keystore"");    }    /* System server better be running :-P */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem_server"");    }    /* Watchdogd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/watchdogd"");    }    /* logd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[system/bin/logd"");    }    /* lmkd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* Wifi may be off so cardinality of 0 or 1 is ok */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ntroller, if running, always runs in permissioncontroller_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[p:s0"");    }    /* vzwomatrigger may or may not be running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* gmscore, if running, always runs in gmscore_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    /*     * All kthreads should be in kernel context.     */    @CddTest(requirement=""9.7"")   ])', 1)]"	""	""	"[('CDD', 144)]"	"[('[android.mediav2.cts.ExtractorTest isClosed None]', 2), ('[android.appsecurity.cts.ApkVerityInstallTest isIncrementalDeliveryV2Feature None]', 2), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.host.multiuser.CreateUsersPermissionTest testCanCreateRestrictedUser None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.incrementalinstall.cts.IncrementalFeatureTest testFeatureAvailable None]', 1), ('[android.security.cts.FileIntegrityManagerTest testSupportedOnDevicesFirstLaunchedWithR None]', 1), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testGetTextPathStringCountTooHigh None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 1), ('[android.car.cts.CarSensorManagerTest testRequiredSensorsForDrivingState None]', 1), ('[android.car.cts.CarSensorManagerTest testMustSupportNightSensor None]', 1), ('[android.appwidget.cts.RequestPinAppWidgetTest testPinWidget_launcher2 None]', 1), ('[android.media.cts.AudioTrackTest testSetLogSessionId None]', 1), ('[android.vr.cts.VrCpuTest VrCpuTest None]', 1), ('[android.server.wm.CompatChangeTests createManagedConstrainDisplayApisFlagsSession None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_requiredWhitelistedPackages None]', 1), ('[android.security.identity.cts.HkdfTest testVectors None]', 1), ('[android.graphics.cts.BitmapFactoryTest testImages None]', 1), ('[android.graphics.cts.BitmapFactoryTest parametersForTestDng None]', 1), ('[android.app.cts.SystemFeaturesTest testCameraFeatures None]', 1), ('[android.media.cts.AudioRecordTest testMediaMetrics None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest getTestContext None]', 1), ('[com.android.cts.runner.CtsTestRunListener isPrimitive None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported None]', 1), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testRecordingAudioInRawFormats None]', 1), ('[android.filesystem.cts.RandomRWTest testRandomRead None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8Flex360pWithIntraRefresh None]', 1), ('[android.car.cts.CarPropertyManagerTest getPropertyList None]', 1), ('[android.car.cts.CarPropertyManagerTest testGetAreaId None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportGearSelection None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportNightMode None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportPerfVehicleSpeed None]', 1), ('[android.database.cts.CursorWindowTest testAccessDataValues None]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest isNotNull None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest testPermissionCarSpeedGranted None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest isNotNull None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest testPermissionCarExteriorEnvironmentGranted None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRotateAndCropCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testLegacyCameraDeviceParity None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraOrientationAlignedWithDevice None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.mediav2.cts.MuxerTest testOffsetPresentationTimeNative None]', 1), ('[android.location.cts.fine.ScanningSettingsTest isTV None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testWifiScanningSettings None]', 1), ('[android.hardware.cts.LowRamDeviceTest DisplayMetrics None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinimumMemory None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinSharedDataPartitionSize None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinDataPartitionSize None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBase None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithWrongSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithSplit None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithDm None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallEverything None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnly None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyMissingSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyWithoutBaseSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyBaseHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyDmHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlySplitHasFsvSig None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo None]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing None]', 1), ('[android.security.cts.SELinuxHostTest testNoExemptionsForVendorExecutingCore None]', 1), ('[android.security.cts.SELinuxHostTest testMLSAttributes None]', 1), ('[android.security.cts.SELinuxHostTest testValidSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospServiceContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testCoredomainViolators None]', 1), ('[android.security.cts.SELinuxHostTest testNoBugreportDenials None]', 1), ('[android.security.cts.SELinuxHostTest testInitDomain None]', 1), ('[android.security.cts.SELinuxHostTest testUeventdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testHealthdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testServicemanagerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVoldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testNetdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSurfaceflingerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testZygoteDomain None]', 1), ('[android.security.cts.SELinuxHostTest testDrmServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInstalldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testKeystoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSystemServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWatchdogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLmkdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWpaDomain None]', 1), ('[android.security.cts.SELinuxHostTest testPermissionControllerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVzwOmaTriggerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testGMSCoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInitShellDomain None]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSuDomain None]', 1)]"
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-8"	"3.18/C-0-8"	"03180000.670008"	"""C-0-8] MUST implement support for Incremental File System as documented here.  && C-0-8] MUST implement support for Incremental File System as documented here.  | C-0-8] and"""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	"C-1-1"	"3.5.2/C-1-1"	"03050200.670101"	"""C-1-1] MUST meet all the requirements in section 3.5.1 except for"""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"7.1.4"	"7.1.4"	"C-1-11"	"7.1.4/C-1-11"	"07010400.670111"	"""C-1-11] MUST NOT enumerate support for the VK_KHR_video_queue, VK_KHR_video_decode_queue, or VK_KHR_video_encode_queue extensions."""	""	""	"KHR_"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ANativeWindowTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/EGL15Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/EGL14Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ASurfaceTextureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanFeaturesTest.java', 1)]"	"[('(2,KHR_,/android/graphics/cts/ANativeWindowTest.java)', 1), ('(2,KHR_,/android/graphics/cts/EGL15Test.java)', 1), ('(2,KHR_,/android/graphics/cts/EGL14Test.java)', 1), ('(2,KHR_,/android/graphics/cts/ASurfaceTextureTest.java)', 1), ('(16,KHR_,/android/opengl/cts/OpenGlEsVersionTest.java)', 1), ('(1,KHR_,/android/graphics/cts/VulkanFeaturesTest.java)', 1)]"	"[('([2:/android/graphics/cts/ANativeWindowTest.java]:[KHR_]:[2]:method_text:[EglContext)) {            throw new RuntimeException(""eglMakeCurrent failed"");        }    }   ])', 1), ('([2:/android/graphics/cts/EGL15Test.java]:[KHR_]:[2]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([2:/android/graphics/cts/EGL14Test.java]:[KHR_]:[2]:method_text:[Exception(""eglDestroyContext failed"");        }        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([2:/android/graphics/cts/ASurfaceTextureTest.java]:[KHR_]:[2]:method_text:[mEglPbuffer, mEglContext)) {      throw new RuntimeException(""eglMakeCurrent failed"");    }  } ])', 1), ('([2:/android/opengl/cts/OpenGlEsVersionTest.java]:[KHR_]:[2]:method_text:[s, es31RequiredList[i]));        }    }    @CddTest(requirement=""7.1.4.1/C-2-1,C-5-1,C-4-1"")   ])', 1), ('([3:/android/opengl/cts/OpenGlEsVersionTest.java]:[KHR_]:[3]:method_text:[ns, requiredExtension));            }        }    }    @CddTest(requirement=""7.1.4.1/C-6-1"")   ])', 1), ('([7:/android/opengl/cts/OpenGlEsVersionTest.java]:[KHR_]:[7]:method_text:[g.e(TAG, ""Couldn\'t initialize EGL."");        }    }    @CddTest(requirement=""7.1.4.5/H-1-1"")   ])', 1), ('([4:/android/opengl/cts/OpenGlEsVersionTest.java]:[KHR_]:[4]:method_text:[ption e) {            Log.e(TAG, ""Caught exception: "" + e);        }        return false;    }}])', 1), ('([1:/android/graphics/cts/VulkanFeaturesTest.java]:[KHR_]:[1]:method_text:[; i++) {            devices[i] = vkjson.getJSONObject(i);        }        return devices;    }}])', 1)]"	""	""	"[('KHR_', 9)]"	"[('[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensions None]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensionsForVrHighPerformance None]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensions None]', 1), ('[android.opengl.cts.OpenGlEsVersionTest testRequiredEglExtensionsForWideColorDisplay None]', 1), ('[android.graphics.cts.VulkanFeaturesTest testVulkanVersionForVrHighPerformance None]', 1)]"
"194:582721) 7.4.1  . Telephony"	"7.4.1"	"C-5-1"	"7.4.1/C-5-1"	"07040100.670501"	"""C-5-1] MUST declare the android.hardware.telephony.ims feature flag and provide a complete implementation of the ImsService API for both MMTEL and RCS User Capability Exchange API."""	""	""	"android.hardware.telephony.ims MMTEL RCS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsServiceTest.java', 57), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 28), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/video/src/android/video/cts/VideoEncoderDecoderTest.java', 1)]"	"[('(17,RCS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(19,MMTEL,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(18,RCS,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(2,MMTEL,/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(1,MMTEL,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(53,RCS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(5,RCS,/android/video/cts/VideoEncoderDecoderTest.java)', 1), ('(321,MMTEL,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(508,RCS,/android/telephony/ims/cts/ImsServiceTest.java)', 1), ('(15,MMTEL,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(308,RCS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1)]"	"[('([3:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[3]:method_text:[r.getCarrierService()                .getMmTelFeature().getSmsImplementation().sentPdu);    }   ])', 3), ('([3:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[3]:method_text:[                + "" activity intent filter must have a > 0 priority."", 0, info.priority);    }   ])', 2), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[5]:method_text:[ission.MODIFY_PHONE_STATE"");            }            unregisterUceObserver();        }    }   ])', 2), ('([2:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[2]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 2), ('([5:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[5]:method_text:[rierService().waitForLatchCountdown(                TestImsService.LATCH_CREATE_MMTEL));    }   ])', 2), ('([4:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[4]:method_text:[(SmsReceiverHelper.EXTRA_RESULT_CODE,                        Activity.RESULT_CANCELED));    }   ])', 2), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[2]:method_text:[           TestImsService.LATCH_UCE_LISTENER_SET));        overrideCarrierConfig(null);    }   ])', 2), ('([10:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[10]:method_text:[ted is called        waitForResult(completeQueue);        overrideCarrierConfig(null);    }   ])', 2), ('([4:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[4]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[5]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), (""([1:/android/telephony/cts/SubscriptionManagerTest.java]:[MMTEL]:[1]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([18:/android/telephony/cts/SubscriptionManagerTest.java]:[MMTEL]:[18]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), (""([2:/android/telephony/cts/SubscriptionManagerTest.java]:[RCS]:[2]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([16:/android/telephony/cts/SubscriptionManagerTest.java]:[RCS]:[16]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[MMTEL]:[2]:method_text:[   // be not barred.        assertNotEquals(hasBarringTypeUnknown, hasBarringTypeKnown);    }   ])', 1), ('([1:/android/telephony/ims/cts/EabControllerTest.java]:[MMTEL]:[1]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([11:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[11]:method_text:[   mErrorQueue.clear();        mCompleteQueue.clear();        mCapabilityQueue.clear();    }   ])', 1), ('([3:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[3]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 1), ('([35:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[35]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([5:/android/video/cts/VideoEncoderDecoderTest.java]:[RCS]:[5]:method_text:[ePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000L / mFrameRate;    }}])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[2]:method_text:[arrierImsService();            sServiceConnector.disconnectDeviceImsService();        }    }   ])', 1), ('([7:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[7]:method_text:[s not called!"",                sServiceConnector.getCarrierService().getMmTelFeature());    }   ])', 1), ('([6:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[6]:method_text:[rierService().waitForLatchCountdown(                TestImsService.LATCH_CREATE_MMTEL));    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[9]:method_text:[was not called!"",                sServiceConnector.getCarrierService().getRcsFeature());    }   ])', 1), ('([15:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[15]:method_text:[           + ""feature."", sServiceConnector.getExternalService().isMmTelFeatureCreated());    }   ])', 1), ('([17:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[17]:method_text:[_REMOVE_RCS));        assertNull(sServiceConnector.getCarrierService().getRcsFeature());    }   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[2]:method_text:[Utils.TEST_TIMEOUT_MS);        assertEquals(EXPECTED_RECEIVED_MESSAGE, receivedMessage);    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[9]:method_text:[ption.class);        return state.poll(ImsUtils.TEST_TIMEOUT_MS, TimeUnit.MILLISECONDS);    }   ])', 1), ('([17:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[17]:method_text:[E permission."");        } catch (SecurityException e) {            //expected        }    }   ])', 1), ('([20:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[20]:method_text:[E permission."");        } catch (SecurityException e) {            //expected        }    }   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[2]:method_text:[eceivedPidfXml.get(0).contains(expectedUriString));        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[2]:method_text:[ceAdapter.PUBLISH_STATE_OTHER_ERROR, publishState);        overrideCarrierConfig(null);    }   ])', 1), ('([6:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[6]:method_text:[REQUEST_PUBLISH, 3000 /* Wait up to 3 seconds */));        overrideCarrierConfig(null);    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[1]:method_text:[automation.dropShellPermissionIdentity();        }        overrideCarrierConfig(null);    }   ])', 1), ('([1:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[1]:method_text:[remove request disallowed status: "" + e);        }        overrideCarrierConfig(null);    }   ])', 1), ('([7:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[7]:method_text:[turn(mmTelManager,                (m) -> m.unregisterImsRegistrationCallback(callback));    }   ])', 1), ('([46:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[46]:method_text:[E permission."");        } catch (SecurityException e) {            //expected        }    }   ])', 1), ('([45:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[45]:method_text:[ such that IsAvailable returns the correct     * capability status during the callback.     */   ])', 1), ('([28:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[28]:method_text:[ finally {                automan.dropShellPermissionIdentity();            }        }    }   ])', 1), ('([8:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[8]:method_text:[   automan.dropShellPermissionIdentity();        }        overrideCarrierConfig(null);    }   ])', 1), ('([40:/android/telephony/ims/cts/ImsServiceTest.java]:[MMTEL]:[40]:method_text:[ return (c - \'a\' + 10);        throw new RuntimeException(""Invalid hex char \'"" + c + ""\'"");    }}])', 1), ('([34:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[34]:method_text:[arrierImsService();            sServiceConnector.disconnectDeviceImsService();        }    }   ])', 1), ('([7:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[7]:method_text:[was not called!"",                sServiceConnector.getCarrierService().getRcsFeature());    }   ])', 1), ('([5:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[5]:method_text:[CH_DISABLE_IMS));        assertFalse(sServiceConnector.getCarrierService().isEnabled());    }   ])', 1), ('([5:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[5]:method_text:[rierService().waitForLatchCountdown(                TestImsService.LATCH_CREATE_MMTEL));    }   ])', 1), ('([6:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[6]:method_text:[arrierServiceStillConfigured(),                5000 /*test timeout*/, 5 /*num times*/));    }   ])', 1), ('([8:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[8]:method_text:[              + ""called!"", sServiceConnector.getExternalService().isRcsFeatureCreated());    }   ])', 1), ('([5:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[5]:method_text:[was not called!"",                sServiceConnector.getCarrierService().getRcsFeature());    }   ])', 1), ('([2:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[2]:method_text:[           + ""feature."", sServiceConnector.getExternalService().isMmTelFeatureCreated());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[9]:method_text:[_REMOVE_RCS));        assertNull(sServiceConnector.getCarrierService().getRcsFeature());    }   ])', 1), ('([35:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[35]:method_text:[           TestImsService.LATCH_UCE_LISTENER_SET));        overrideCarrierConfig(null);    }   ])', 1), ('([24:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[24]:method_text:[           TestImsService.LATCH_UCE_LISTENER_SET));        overrideCarrierConfig(null);    }   ])', 1), ('([18:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[18]:method_text:[eceivedPidfXml.get(0).contains(expectedUriString));        overrideCarrierConfig(null);    }   ])', 1), ('([26:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[26]:method_text:[ceAdapter.PUBLISH_STATE_OTHER_ERROR, publishState);        overrideCarrierConfig(null);    }   ])', 1), ('([24:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[24]:method_text:[REQUEST_PUBLISH, 3000 /* Wait up to 3 seconds */));        overrideCarrierConfig(null);    }   ])', 1), ('([27:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[27]:method_text:[automation.dropShellPermissionIdentity();        }        overrideCarrierConfig(null);    }   ])', 1), ('([41:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[41]:method_text:[remove request disallowed status: "" + e);        }        overrideCarrierConfig(null);    }   ])', 1), ('([11:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[11]:method_text:[    ""android.permission.READ_PRECISE_PHONE_STATE"");        overrideCarrierConfig(null);    }   ])', 1), ('([23:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[23]:method_text:[ -> m.unregisterImsRegistrationCallback(callback));        overrideCarrierConfig(null);    }   ])', 1), ('([48:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[48]:method_text:[        assertTrue(availabilityChanged.isEmpty());        overrideCarrierConfig(null);    }   ])', 1), ('([10:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[10]:method_text:[llback);        } finally {            automan.dropShellPermissionIdentity();        }    }   ])', 1), ('([11:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[11]:method_text:[   automan.dropShellPermissionIdentity();        }        overrideCarrierConfig(null);    }   ])', 1), ('([30:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[30]:method_text:[  res = waitForIntResult(actionQueue, 500);        assertEquals(res, Integer.MAX_VALUE);    }   ])', 1), ('([15:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[15]:method_text:[.equals(                configStr.getBytes(), TestAcsClient.getInstance().getConfig()));    }   ])', 1), ('([14:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[14]:method_text:[).getActionQueue());        assertEquals(res, TestAcsClient.ACTION_TRIGGER_AUTO_CONFIG);    }   ])', 1), ('([11:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[11]:method_text:[_SET_RCS_CLIENT_CONFIG);        assertEquals(rcc, TestAcsClient.getInstance().getRcc());    }   ])', 1), ('([13:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[13]:method_text:[ is     * available on the device and for the current carrier.     * @throws Exception     */   ])', 1), ('([46:/android/telephony/ims/cts/ImsServiceTest.java]:[RCS]:[46]:method_text:[ return (c - \'a\' + 10);        throw new RuntimeException(""Invalid hex char \'"" + c + ""\'"");    }}])', 1), ('([4:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[4]:method_text:[database        removeTestContactFromEab();        removeUceRequestDisallowedStatus();    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[2]:method_text:[ND,                capability.getRequestResult());        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[2]:method_text:[yQueue.clear();        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[2]:method_text:[stCount.set(0);        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[2]:method_text:[eport blocked"",                capability.second);        overrideCarrierConfig(null);    }   ])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[2]:method_text:[sServiceConnector.restoreDefaultSmsApp();        }        overrideCarrierConfig(null);    }   ])', 1), ('([1:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[MMTEL]:[1]:method_text:[   } catch (ImsException e) {            fail(""requestAvailability failed "" + e);        }    }}])', 1), ('([24:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[24]:method_text:[database        removeTestContactFromEab();        removeUceRequestDisallowedStatus();    }   ])', 1), ('([15:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[15]:method_text:[use it means the permission check passed.        }        overrideCarrierConfig(null);    }   ])', 1), ('([14:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[14]:method_text:[ true, true);        waitForResult(completeQueue);        overrideCarrierConfig(null);    }   ])', 1), ('([19:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[19]:method_text:[ retryAfterQueue.clear();            }        });        overrideCarrierConfig(null);    }   ])', 1), ('([14:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[14]:method_text:[r();            retryAfterQueue.clear();        }        overrideCarrierConfig(null);    }   ])', 1), ('([10:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[10]:method_text:[yQueue.clear();        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([11:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[11]:method_text:[lities result is invalid."");            }        }        overrideCarrierConfig(null);    }   ])', 1), ('([20:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[20]:method_text:[ND,                capability.getRequestResult());        overrideCarrierConfig(null);    }   ])', 1), ('([22:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[22]:method_text:[yQueue.clear();        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([16:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[16]:method_text:[stCount.set(0);        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([10:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[10]:method_text:[eport blocked"",                capability.second);        overrideCarrierConfig(null);    }   ])', 1), ('([10:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[10]:method_text:[sServiceConnector.restoreDefaultSmsApp();        }        overrideCarrierConfig(null);    }   ])', 1), ('([14:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[14]:method_text:[    removeUceRequestDisallowedStatus();        });        overrideCarrierConfig(null);    }   ])', 1), ('([19:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[19]:method_text:[tyQueue.clear();        removeTestContactFromEab();        overrideCarrierConfig(null);    }   ])', 1), ('([11:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[11]:method_text:[     setCapabilitiesRequestTimeout(-1L);        }        overrideCarrierConfig(null);    }   ])', 1), ('([10:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[10]:method_text:[      setCapabilitiesRequestTimeout(-1L);        }        overrideCarrierConfig(null);    }   ])', 1), ('([41:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[41]:method_text:[   } catch (ImsException e) {            fail(""requestAvailability failed "" + e);        }    }}])', 1)]"	""	""	"[('RCS', 60), ('MMTEL', 41)]"	"[('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 3), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilityDiscoveryIntentReceiverExists None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testGetAndSetUceSetting None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testMethodPermissions None]', 2), ('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 2), ('[android.telephony.cts.SubscriptionManagerTest testRestoreAllSimSpecificSettingsFromBackup None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities None]', 2), ('[android.telephony.ims.cts.ImsServiceTest beforeAllTests None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindRcsChangeToMmtel None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testBindDeviceAndCarrierDifferentFeatures None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testBindDeviceAndCarrierSameFeature None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testBindDeviceAndCarrierUpdateToSameFeature None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testRcsDeviceCapabilitiesPublish None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testPublishImsReg None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testPublishWithImsAssociatedUri None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testRcsCapabilitiesPublishNetworkResponseWithReasonHeader None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishThrottle None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishWithSipOptions None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testRcsPublishWithAuthorizedErrorResponse None]', 2), ('[android.telephony.ims.cts.ImsServiceTest testSetRtpHeaderExtensions None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testRequestCapabilitiesWithOptionsMechanism None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testRequestCapabilitiesFromCacheWithOptionsMechanism None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testIndividualRequestCapabilitiesWithOptionsMechanism None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testOptionsRequestFromNetwork None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testOptionsRequestFromNetworkBlocked None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testReceivingEmptyPidfXml None]', 2), ('[android.telephony.cts.PhoneStateListenerTest testOnBarringInfoChanged None]', 1), ('[android.telephony.ims.cts.EabControllerTest beforeAllTests None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestCapabilities None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestAvailabilities None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredCapabilities None]', 1), ('[android.video.cts.VideoEncoderDecoderTest testVp9Other3Perf3840x2160 None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindMmTelFeature None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindMmTelNoEmergency None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindMmTelEmergencyEnabled None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSms None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportQCompat None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsDeliveryReportR None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsRSuccess None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelSendSmsNetworkError None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelReceiveSms None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testGetFeatureState None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelManagerRegistrationCallbackS None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelManagerRegistrationCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testMmTelManagerRegistrationStateR None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCapabilityStatusCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCallComposerCapabilityStatusCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCapabilityStatusWithIsAvailableDuringCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerProvisioningCaps None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindRcsFeature None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindRcsFeatureEnableDisableIms None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testCarrierImsServiceBindNullRcsFeature None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testDeviceImsServiceBindRcsFeature None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsManagerRegistrationCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsManagerRegistrationState None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testRcsCapabilityStatusCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerConstants None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerRcsProvisioningCaps None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerRcsProvisioningChangedCallback None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerNotifyRcsAutoConfigurationReceived None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerTriggerRcsReconfiguration None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerSetRcsClientConfiguration None]', 1), ('[android.telephony.ims.cts.ImsServiceTest testProvisioningManagerRcsVolteSingleRegistrationCapable None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilitiesRequestAllowed None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilitiesRequestWithCmdError None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilitiesRequestWithResponseError None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testRequestCapabilitiesWithPresenceMechanism None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testRequestCapabilitiesFromCacheWithPresenceMechanism None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testIndividualRequestCapabilities None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testForbidCapabilitiesRequest None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testTerminatedCallbackWithCapabilitiesRequest None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testTimeoutToRequestCapabilitiesWithPresenceMechanism None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testTimeoutToRequestCapabilitiesWithOptionsMechanism None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testRequestCapabilitiesWithUriFormatChanged None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-14"	"9.9.3/C-1-14"	"09090300.670114"	"""C-1-14] MUST NOT use the same File Based Encryption (FBE) keys or subkeys for different cryptographic purposes (e.g. for both encryption and key derivation, or for two different encryption algorithms)."""	"Found reference in comments"	""	"FBE"	""	""	""	""	""	""	""	2	"cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp"	"FileBasedEncryptionPolicyTest_allowedPolicy"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DirectBootHostTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppDataIsolationTests.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AppDataIsolationTests.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeExp.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestCross.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/userspacereboot/src/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/userspacereboot/src/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestMad.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/SignatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/CipherTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ColorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_09.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/calllog/src/android/provider/cts/contacts/hostside/ShadowCallLogTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_09.java', 1)]"	"[('(5,FBE,/android/view/inputmethod/cts/InputMethodInfoTest.java)', 2), ('(1,FBE,/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java)', 2), ('(12,FBE,/android/appsecurity/cts/AppDataIsolationTests.java)', 2), ('(1,FBE,/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java)', 2), ('(1,FBE,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java)', 2), ('(8,FBE,/android/security/cts/Poc17_09.java)', 2), ('(17,FBE,/android/appsecurity/cts/DirectBootHostTest.java)', 2), ('(2,FBE,/android/text/cts/FontCoverageTest.java)', 1), ('(1,FBE,/android/renderscript/cts/generated/TestNativeExp.java)', 1), ('(1,FBE,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,FBE,/android/renderscript/cts/generated/TestCross.java)', 1), ('(1,FBE,/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java)', 1), ('(1,FBE,/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java)', 1), ('(2,FBE,/android/renderscript/cts/generated/TestMad.java)', 1), ('(1,FBE,/android/keystore/cts/SignatureTest.java)', 1), ('(4,FBE,/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java)', 1), ('(2,FBE,/android/keystore/cts/CipherTest.java)', 1), ('(3,FBE,/android/graphics/cts/ColorTest.java)', 1), ('(5,FBE,/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java)', 1), ('(2,FBE,/android/content/cts/ContextTest.java)', 1), ('(1,FBE,/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java)', 1), ('(1,FBE,/android/net/ipsec/ike/cts/IkeSessionPskTest.java)', 1), ('(8,FBE,/android/provider/cts/contacts/hostside/ShadowCallLogTest.java)', 1), ('(1,FBE,/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java)', 1)]"	"[('([1:/com/android/cts/userspacereboot/host/UserspaceRebootHostTest.java]:[FBE]:[1]:method_text:[reboot {@code     * PowerManager.isRebootingUserspaceSupported()} returns {@code true}.     */   ])', 2), ('([5:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[5]:method_text:[          }                getDevice().waitForDeviceAvailable();            }        }    }   ])', 2), ('([1:/android/uirendering/cts/testclasses/ColorFilterAlphaTest.java]:[FBE]:[1]:method_text:[R_COLOR, mConfig.mode));            canvas.drawBitmap(mBitmap, 0, 0, mPaint);        }    };   ])', 2), ('([8:/android/security/cts/Poc17_09.java]:[FBE]:[8]:method_text:[                             )==139);    }    /**     * b/38195738     * b/36590192     */   ])', 2), ('([1:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[1]:method_text:[allPackage(OTHER_PKG);    }    /**     * Automotive devices MUST support native FBE.     */   ])', 2), ('([4:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[4]:method_text:[equals(getFbeMode()));    }    /**     * If device has native FBE, verify lifecycle.     */   ])', 2), (""([3:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[3]:method_text:[    /**     * If device doesn't have native FBE, enable emulation and verify lifecycle.     */   ])"", 2), (""([3:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[3]:method_text:[ATED);    }    /**     * If device doesn't have native FBE, verify normal lifecycle.     */   ])"", 2), ('([6:/android/appsecurity/cts/DirectBootHostTest.java]:[FBE]:[6]:method_text:[super(getDevice(), getBuild(), getAbi());            addArg(""--force-queryable"");        }    }}])', 2), ('([2:/android/text/cts/FontCoverageTest.java]:[FBE]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestNativeExp.java]:[FBE]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([5:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[FBE]:[5]:method_text:[() : """";            }        } catch (IOException e) {            return """";        }    }   ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[FBE]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestCross.java]:[FBE]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[2]:method_text:[  getDevice().uninstallPackage(APPA_PKG);        getDevice().uninstallPackage(APPB_PKG);    }   ])', 1), ('([5:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[5]:method_text:[    return false;        }        fail(""Unknown FBE mode: "" + mode);        return false;    }}])', 1), ('([1:/android/hdmicec/cts/audio/HdmiCecSystemAudioModeTest.java]:[FBE]:[1]:method_text:[ly to a <Give System Audio Mode Status>    * message when the System Audio Mode is ""Off"".    */  ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[FBE]:[1]:method_text:[ecutor,                mIkeSessionCallback,                mFirstChildSessionCallback);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[FBE]:[1]:method_text:[.        getDevice().executeShellCommand(""input keyevent 3"");        super.tearDown();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestMad.java]:[FBE]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/keystore/cts/SignatureTest.java]:[FBE]:[1]:method_text:[e7a42b1ddff0c""));    }    private static final long DAY_IN_MILLIS = TestUtils.DAY_IN_MILLIS;   ])', 1), ('([4:/android/location/cts/gnss/GnssMeasurementWhenNoLocationTest.java]:[FBE]:[4]:method_text:[ {                TestUtils.setAirplaneModeOn(getContext(), false);            }        }    }}])', 1), ('([5:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[FBE]:[5]:method_text:[rim() : """";            }        } catch (IOException e) {            return """";        }    }}])', 1), ('([2:/android/keystore/cts/CipherTest.java]:[FBE]:[2]:method_text:[ortsLockAndUnlock() {            return supportsInsecureLock();        }    }    @Presubmit   ])', 1), ('([3:/android/graphics/cts/ColorTest.java]:[FBE]:[3]:method_text:[sync with colors in android.R.color"",                colors.length, numPublicApiColors);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[FBE]:[1]:method_text:[        changeUserCredential(TEST_PASSWORD, null, mProfileUserId);        lockProfile();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[FBE]:[1]:method_text:[erifyUserCredential(RESET_PASSWORD_TEST_DEFAULT_PASSWORD, mProfileUserId);    }    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[FBE]:[1]:method_text:[nified work challenge and the primary user clears     * the device lock.     */    @FlakyTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[FBE]:[1]:method_text:[    executeShellCommand(""input keyevent KEYCODE_WAKEUP"");        }    }    @LockSettingsTest   ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java]:[FBE]:[1]:method_text:[_PASSWORD, mPrimaryUserId);        }    }    @FlakyTest    @LargeTest    @LockSettingsTest   ])', 1), ('([2:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[2]:method_text:[rows Exception {        getDevice().reboot();        waitForBootCompleted(getDevice());    }   ])', 1), ('([5:/android/appsecurity/cts/AppDataIsolationTests.java]:[FBE]:[5]:method_text:[ return false;        }        fail(""Unknown FBE mode: "" + mode);        return false;    }   ])', 1), ('([2:/android/content/cts/ContextTest.java]:[FBE]:[2]:method_text:[ that apps can go through a     * backup/restore cycle between FBE and non-FBE devices.     */   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java]:[FBE]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java]:[FBE]:[1]:method_text:[ordBeforeUnlock} and will be called by the hostside logic     * before it is exercised.     */   ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[FBE]:[1]:method_text:[on.getErrorData());        ikeSession.kill();        mIkeSessionCallback.awaitOnClosed();    }}])', 1), ('([8:/android/provider/cts/contacts/hostside/ShadowCallLogTest.java]:[FBE]:[8]:method_text:[ != null) {            output = output.trim();        }        return ""1"".equals(output);    }}])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java]:[FBE]:[1]:method_text:[ecutor,                mIkeSessionCallback,                mFirstChildSessionCallback);    }   ])', 1)]"	""	""	"[('FBE', 47)]"	"[('[android.view.inputmethod.cts.InputMethodInfoTest testAtLeastOneEncryptionAwareInputMethodIsAvailable None]', 2), ('[com.android.cts.userspacereboot.host.UserspaceRebootHostTest testOnlyFbeDevicesSupportUserspaceReboot None]', 2), ('[android.appsecurity.cts.AppDataIsolationTests testDirectBootModeWorks None]', 2), ('[android.security.cts.Poc17_09 testPocCve_2017_6983 None]', 2), ('[android.appsecurity.cts.DirectBootHostTest testAutomotiveNativeFbe None]', 2), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNative None]', 2), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootEmulated None]', 2), ('[android.appsecurity.cts.DirectBootHostTest testDirectBootNone None]', 2), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testAppUnableToAccessOtherUserAppDataDirApi29 None]', 1), ('[android.location.cts.gnss.GnssMeasurementWhenNoLocationTest testGnssMeasurementWhenNoLocation None]', 1), ('[android.keystore.cts.CipherTest isDeviceLocked None]', 1), ('[com.android.cts.devicepolicy.ManagedProfilePasswordTest testLockNowWithKeyEviction None]', 1), ('[com.android.cts.devicepolicy.ManagedProfilePasswordTest testResetPasswordWithTokenBeforeUnlock None]', 1), ('[com.android.cts.devicepolicy.ManagedProfilePasswordTest testClearPasswordWithTokenBeforeUnlock None]', 1), ('[com.android.cts.devicepolicy.ManagedProfilePasswordTest testResetPasswordTokenUsableAfterClearingLock None]', 1), ('[com.android.cts.devicepolicy.ManagedProfilePasswordTest testUnlockWorkProfile_deviceWidePassword None]', 1), ('[android.appsecurity.cts.AppDataIsolationTests testAppAbleToAccessItsDataAfterReboot None]', 1), ('[android.content.cts.ContextTest testGetText None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeAuthHandlesFirstChildCreationFail None]', 1), ('[android.provider.cts.contacts.hostside.ShadowCallLogTest testDirectBootCallLog None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"T-4-1"	"9.8.2/T-4-1"	"09080200.840401"	""">9.8.2/T-4-1] MUST display the microphone indicator when an app is accessing audio data from the microphone, but not when the microphone is only accessed by HotwordDetectionService, SOURCE_HOTWORD, ContentCaptureService, or apps holding the roles called out in Section 9.1 Permissions with CDD identifier C-3-X]. [[<a href=""#9_8_2_privacy"""""	""	""	"CDD SOURCE_HOTWORD"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/security/src/android/security/cts/SELinuxHostTest.java', 35), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApkVerityInstallTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/car/src/android/car/cts/CarPropertyManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/cts/LowRamDeviceTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/FileIntegrityManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/car/src/android/car/cts/CarSensorManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/multiuser/src/android/host/multiuser/CreateUsersPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/appwidget/src/android/appwidget/cts/RequestPinAppWidgetTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/DataSaverModeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/filesystem/src/android/filesystem/cts/RandomRWTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarSpeed/src/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/car/PermissionCarExteriorEnvironment/src/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecord_BufferSizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/vr/src/android/vr/cts/VrCpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CompatChangeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/core/runner-axt/src/com/android/cts/runner/CtsTestRunListener.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/ProvisioningTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssTtffTests.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoEncoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/CursorWindowTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/BasicInCallServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 1)]"	"[('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(2,CDD,/android/host/multiuser/CreateUsersPermissionTest.java)', 1), ('(1,CDD,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,CDD,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,CDD,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(3,CDD,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(4,CDD,/android/security/cts/FileIntegrityManagerTest.java)', 1), ('(2,CDD,/android/security/cts/EncryptionTest.java)', 1), ('(3,CDD,/android/graphics/cts/PaintTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecord_BufferSizeTest.java)', 1), ('(1,CDD,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(4,CDD,/android/car/cts/CarSensorManagerTest.java)', 1), ('(3,CDD,/android/appwidget/cts/RequestPinAppWidgetTest.java)', 1), ('(1,CDD,/android/media/cts/AudioTrackTest.java)', 1), ('(2,CDD,/android/vr/cts/VrCpuTest.java)', 1), ('(1,CDD,/android/server/wm/CompatChangeTests.java)', 1), ('(2,CDD,/com/android/cts/net/hostside/DataSaverModeTest.java)', 1), ('(3,CDD,/android/security/identity/cts/HkdfTest.java)', 1), ('(2,CDD,/android/text/cts/FontCoverageTest.java)', 1), ('(2,CDD,/android/graphics/cts/BitmapFactoryTest.java)', 1), ('(2,CDD,/android/app/cts/SystemFeaturesTest.java)', 1), ('(2,CDD,/android/media/cts/AudioRecordTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java)', 1), ('(1,CDD,/com/android/cts/runner/CtsTestRunListener.java)', 1), ('(3,CDD,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 1), ('(2,CDD,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,CDD,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,CDD,/android/security/identity/cts/ProvisioningTest.java)', 1), ('(3,CDD,/android/filesystem/cts/RandomRWTest.java)', 1), ('(2,CDD,/android/app/cts/DownloadManagerTest.java)', 1), ('(6,CDD,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(2,CDD,/android/location/cts/gnss/GnssTtffTests.java)', 1), ('(1,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(1,CDD,/android/media/cts/VideoEncoderTest.java)', 1), ('(6,CDD,/android/car/cts/CarPropertyManagerTest.java)', 1), ('(1,CDD,/android/database/cts/CursorWindowTest.java)', 1), ('(11,CDD,/android/mediav2/cts/ExtractorTest.java)', 1), ('(2,CDD,/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java)', 1), ('(2,CDD,/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java)', 1), ('(1,CDD,/android/security/cts/VerifiedBootTest.java)', 1), ('(7,CDD,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,CDD,/android/mediav2/cts/MuxerTest.java)', 1), ('(3,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java)', 1), ('(3,CDD,/android/location/cts/fine/ScanningSettingsTest.java)', 1), ('(2,CDD,/android/telecom/cts/BasicInCallServiceTest.java)', 1), ('(16,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(7,CDD,/android/hardware/cts/LowRamDeviceTest.java)', 1), ('(2,CDD,/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java)', 1), ('(13,CDD,/android/appsecurity/cts/ApkVerityInstallTest.java)', 1), ('(2,CDD,/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java)', 1), ('(36,CDD,/android/security/cts/SELinuxHostTest.java)', 1)]"	"[('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ on the device is valid.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[e standard AOSP entries.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 4), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_DM)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 3), ('([1:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[1]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[();        install.run(expectingSuccess);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 2), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ verifyFsverityInstall(BASE_APK, SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 2), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[this domain, cardinality test is all thats     * needed     */    @CddTest(requirement=""9.7"")   ])', 2), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CDD]:[2]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[   public final SupportsMultiUserRule mSupportsMultiUserRule = new SupportsMultiUserRule(this);   ])', 1), ('([1:/android/host/multiuser/CreateUsersPermissionTest.java]:[CDD]:[1]:method_text:[ {        createRestrictedProfile(mPrimaryUserId);    }    @CddTest(requirement=""9.5/A-1-3"")   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[CDD]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[CDD]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/renderscript/cts/generated/TestConvert.java]:[CDD]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[2]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[CDD]:[1]:method_text:[ce().hasFeature(FEATURE_INCREMENTAL_DELIVERY));    }    @CddTest(requirement=""4/C-1-1,C-3-1"")   ])', 1), ('([2:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[2]:method_text:[ = CertificateFactory.getInstance(""X.509"");    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[tyManager.isApkVeritySupported());        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/security/cts/FileIntegrityManagerTest.java]:[CDD]:[1]:method_text:[Trusted);        }    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")    @RestrictedBuildTest   ])', 1), ('([2:/android/security/cts/EncryptionTest.java]:[CDD]:[2]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[        Typeface.MONOSPACE,            Typeface.SANS_SERIF,            Typeface.SERIF,    };   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[.getTextPath(""HIJKLMN"", 3, 9, 0, 0, new Path());    }    @CddTest(requirement=""3.8.13/C-1-2"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[CDD]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([2:/android/media/cts/AudioRecord_BufferSizeTest.java]:[CDD]:[2]:method_text:[   48000,    };    private AudioRecord mAudioRecord;    @CddTest(requirement=""5.4.1/C-1-1"")   ])', 1), ('([1:/android/mediav2/cts/CodecDecoderTest.java]:[CDD]:[1]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[2]:method_text:[tedSensors();        assertNotNull(mSupportedSensors);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[assertTrue(""Must support SENSOR_TYPE_GEAR"", foundGear);    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarSensorManagerTest.java]:[CDD]:[1]:method_text:[(""Must support SENSOR_TYPE_NIGHT"", foundNightSensor);    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([2:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[2]:method_text:[he extras        assertEquals(""dummy-2"", resultReceiver.result.getStringExtra(""dummy""));    }   ])', 1), ('([1:/android/appwidget/cts/RequestPinAppWidgetTest.java]:[CDD]:[1]:method_text:[                AppWidgetManager.getInstance(context).isRequestPinAppWidgetSupported());    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[CDD]:[1]:method_text:[ // Start threshold levels that we check.    private enum ThresholdLevel { LOW, MEDIUM, HIGH };   ])', 1), ('([2:/android/vr/cts/VrCpuTest.java]:[CDD]:[2]:method_text:[ic VrCpuTest() {        super(CtsActivity.class);    }    @CddTest(requirement=""7.9.2/C-1-1"")   ])', 1), ('([1:/android/server/wm/CompatChangeTests.java]:[CDD]:[1]:method_text:[-resizeable portrait activity enters size compat mode after resizing the     * display.     */   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[own() throws Exception {        super.tearDown();        setRestrictBackground(false);    }   ])', 1), ('([1:/com/android/cts/net/hostside/DataSaverModeTest.java]:[CDD]:[1]:method_text:[  }    }    @RequiredProperties({NO_DATA_SAVER_MODE})    @CddTest(requirement=""7.4.7/C-2-2"")   ])', 1), ('([3:/android/security/identity/cts/HkdfTest.java]:[CDD]:[3]:method_text:[ hexDecode(ikmHex), hexDecode(saltHex),                        hexDecode(infoHex), size));    }}])', 1), ('([2:/android/text/cts/FontCoverageTest.java]:[CDD]:[2]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ctory.Options();        mOpt2.inScaled = false;        mOpt2.inJustDecodeBounds = true;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[CDD]:[1]:method_text:[ample_rw2, 1920, 1440),                new DNG(R.raw.sample_srw, 5472, 3648),        };    }   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[properly prefixed with ""android."" that are not defined in     * {@link PackageManager}.     */   ])', 1), ('([1:/android/app/cts/SystemFeaturesTest.java]:[CDD]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[        mIsOnPeriodicNotificationCalled = false;        mIsHandleMessageCalled = false;    }   ])', 1), ('([1:/android/media/cts/AudioRecordTest.java]:[CDD]:[1]:method_text:[tDirectionality());        Log.i(TAG, ""******"");    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerNegativeTest.java]:[CDD]:[2]:method_text:[    }        }    }    /**     * Make sure the internal AIDL methods are protected.     */   ])', 1), ('([1:/com/android/cts/runner/CtsTestRunListener.java]:[CDD]:[1]:method_text:[w AssertionError(""Unable to set java.text.DateFormat.is24Hour"", e);            }        }    }}])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[;        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }   ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[CDD]:[1]:method_text:[)));        Assert.assertEquals(expected, Boolean.parseBoolean(result.getStdout().trim()));    }}])', 1), (""([2:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[CDD]:[2]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[CDD]:[1]:method_text:[MediaRecorder.setMaxFileSize(MAX_FILE_SIZE * 10);    }    @CddTest(requirement=""5.4.1/C-1-4"")   ])', 1), ('([1:/android/security/identity/cts/ProvisioningTest.java]:[CDD]:[1]:method_text:[tStackTrace();            assertTrue(false);        }        return certificateChain;    }   ])', 1), ('([2:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[2]:method_text:[   FileUtil.removeFileOrDir(getContext(), DIR_RANDOM_RD);    }    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/filesystem/cts/RandomRWTest.java]:[CDD]:[1]:method_text:[king too long in some device, and thus cannot run multiple times    @CddTest(requirement=""8.2"")   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[JUnit4.class)public class DownloadManagerTest extends DownloadManagerTestBase {    @FlakyTest   ])', 1), ('([1:/android/app/cts/DownloadManagerTest.java]:[CDD]:[1]:method_text:[       mContext.unregisterReceiver(receiver);        }    }    @CddTest(requirement=""7.6.1"")   ])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CDD]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/location/cts/gnss/GnssTtffTests.java]:[CDD]:[2]:method_text:[  @AppModeFull(reason = ""permission ACCESS_LOCATION_EXTRA_COMMANDS not available to instant apps"") ])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[CDD]:[1]:method_text:[60);    }    // Tests encoder profiles required by CDD.    // H264    @NonMediaMainlineTest   ])', 1), ('([2:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[2]:method_text:[G_BRAKE_ON);    }    /**     * Test for {@link CarPropertyManager#getPropertyList()}     */   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[aIdInConfig);                }            }        }    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[pertyIds.GEAR_SELECTION))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ePropertyIds.NIGHT_MODE))                .isNotNull();    }    @CddTest(requirement=""2.5.1"")   ])', 1), ('([1:/android/car/cts/CarPropertyManagerTest.java]:[CDD]:[1]:method_text:[ VehiclePropertyIds.PERF_VEHICLE_SPEED)).isNotNull();    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/database/cts/CursorWindowTest.java]:[CDD]:[1]:method_text:[ndow.isNull(0, 4));        // Test isBlob        assertTrue(cursorWindow.isBlob(0, 4));    }   ])', 1), ('([10:/android/mediav2/cts/ExtractorTest.java]:[CDD]:[10]:method_text:[onLevelFhd60, 1920, 1080});            }            return exhaustiveArgsList;        }       ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android.car.cts.permissioncarspeed/PermissionCarSpeedTest.java]:[CDD]:[1]:method_text:[d()).isIn(PERMISSION_CAR_SPEED_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[              Car.PROPERTY_SERVICE);        assertThat(mCarPropertyManager).isNotNull();    }   ])', 1), ('([1:/android/car/cts/permissioncarexteriorenvironment/PermissionCarExteriorEnvironmentTest.java]:[CDD]:[1]:method_text:[SSION_CAR_EXTERIOR_ENVIRONMENT_PROPERTIES);        }    }    @CddTest(requirement = ""2.5.1"")   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[CDD]:[1]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[2]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[acy API are also     * accessible via Camera2.     */    @CddTest(requirement=""7.5.4/C-0-11"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[ck camera orientation against device orientation     */    @CddTest(requirement=""7.5.5/C-1-1"")   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[for R and S Performance class requirements as specified     * in CDD camera section 7.5     */   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CDD]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[CDD]:[1]:method_text:[s_25fps_aac_stereo_128kbps_11025hz_metadata_gyro_compliant.3gp""},            });        }       ])', 1), ('([3:/android/content/pm/cts/shortcutmanager/ShortcutManagerRequestPinTest.java]:[CDD]:[3]:method_text:[ic final String SHORTCUT_ID = ""s12345"";    @CddTest(requirement=""[3.8.1/C-2-1],[3.8.1/C-3-1]"")   ])', 1), ('([2:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[2]:method_text:[r.MATCH_DEFAULT_ONLY).activityInfo.packageName;    }    @CddTest(requirement = ""7.4.2/C-2-1"")   ])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[CDD]:[1]:method_text:[ wifiManager.isScanAlwaysAvailable()        );    }    @CddTest(requirement = ""7.4.3/C-4-1"")   ])', 1), ('([2:/android/telecom/cts/BasicInCallServiceTest.java]:[CDD]:[2]:method_text:[tDialer);        }        super.tearDown();    }    @CddTest(requirement = ""7.4.1.2/C-1-3"")   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[     getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[   verifyFsverityInstall(incremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[Install(incremental, BASE_APK, SPLIT_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK, BASE_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[PK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[cremental, BASE_APK, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(updateIncremental, SPLIT_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[ll(updateIncremental, BASE_APK);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erityInstall(updateIncremental, BASE_APK);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[X)                .runExpectingFailure();    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[l(incremental, BASE_APK_DM, SPLIT_APK_DM);    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[stall(incremental, BASE_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[tal, BASE_APK_DM, SPLIT_APK_DM);        }    }    @CddTest(requirement = ""9.10/C-0-3,C-0-5"")   ])', 1), ('([2:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[2]:method_text:[ces reported memory to ensure it meets the minimum values described     * in CDD 7.6.1.     */   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[44);            } else {                assertMinMemoryMb(592);            }        }    }   ])', 1), ('([1:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[1]:method_text:[  mContext.getExternalFilesDir(null),                MIN_SHARED_DATA_PARTITION_SIZE_GB);    }   ])', 1), ('([3:/android/hardware/cts/LowRamDeviceTest.java]:[CDD]:[3]:method_text:[%d, Minimum = %d"", partitionName, size, minSizeBytes),                size > minSizeBytes);    }}])', 1), ('([2:/android/content/pm/cts/shortcutmanager/ShortcutManagerClientApiTest.java]:[CDD]:[2]:method_text:[dp_lowram=96,""                + ""icon_format=PNG,""                + ""icon_quality=100"";    }   ])', 1), ('([2:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[2]:method_text:[       getDevice().uninstallPackage(PACKAGE_NAME);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[  .run();        verifyFsverityInstall(BASE_APK);    }    @CddTest(requirement=""9.10/C-0-3"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[FIX)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[erifyFsverityInstall(BASE_APK, BASE_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[_APK, BASE_APK_DM, SPLIT_APK, SPLIT_APK_DM);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[APK)                .runExpectingFailure();    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([1:/android/appsecurity/cts/ApkVerityInstallTest.java]:[CDD]:[1]:method_text:[);        verifyFsverityInstall(SPLIT_APK);    }    @CddTest(requirement=""9.10/C-0-3,C-1-1"")   ])', 1), ('([2:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[CDD]:[2]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");    }   ])', 1), ('([2:/android/security/cts/SELinuxHostTest.java]:[CDD]:[2]:method_text:[selinux policy globally.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[     *     * @throws Exception     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[apps via levelFrom=user.     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ime conditional policy).     *     * @throws Exception     */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);            }        }    }    /* Init is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ ""u:r:vendor_init:s0"");    }    /* Ueventd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/ueventd"");    }    /* healthd may or may not exist */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/healthd"");    }    /* Servicemanager is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/servicemanager"");    }    /* Vold is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[:s0"", ""/system/bin/vold"");    }    /* netd is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[bles-restore"");    }    /* Surface flinger is always there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[/bin/surfaceflinger"");    }    /* Zygote is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[);    }    /* Checks drmserver for devices that require it */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem/bin/drmserver"");    }    /* Installd is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[stem/bin/installd"");    }    /* keystore is always running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[keystore"");    }    /* System server better be running :-P */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[tem_server"");    }    /* Watchdogd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[m/bin/watchdogd"");    }    /* logd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[system/bin/logd"");    }    /* lmkd may or may not be there */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* Wifi may be off so cardinality of 0 or 1 is ok */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[ntroller, if running, always runs in permissioncontroller_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[p:s0"");    }    /* vzwomatrigger may or may not be running */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    }    /* gmscore, if running, always runs in gmscore_app */    @CddTest(requirement=""9.7"")   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[test is all thats     * needed     */    @CddTest(requirement=""9.7"")    @RestrictedBuildTest   ])', 1), ('([1:/android/security/cts/SELinuxHostTest.java]:[CDD]:[1]:method_text:[    /*     * All kthreads should be in kernel context.     */    @CddTest(requirement=""9.7"")   ])', 1)]"	""	""	"[('CDD', 144)]"	"[('[android.mediav2.cts.ExtractorTest isClosed None]', 2), ('[android.appsecurity.cts.ApkVerityInstallTest isIncrementalDeliveryV2Feature None]', 2), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.host.multiuser.CreateUsersPermissionTest testCanCreateRestrictedUser None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.incrementalinstall.cts.IncrementalFeatureTest testFeatureAvailable None]', 1), ('[android.security.cts.FileIntegrityManagerTest testSupportedOnDevicesFirstLaunchedWithR None]', 1), ('[android.security.cts.FileIntegrityManagerTest testCtsReleaseCertificateTrusted None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testGetTextPathStringCountTooHigh None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 1), ('[android.car.cts.CarSensorManagerTest testRequiredSensorsForDrivingState None]', 1), ('[android.car.cts.CarSensorManagerTest testMustSupportNightSensor None]', 1), ('[android.appwidget.cts.RequestPinAppWidgetTest testPinWidget_launcher2 None]', 1), ('[android.media.cts.AudioTrackTest testSetLogSessionId None]', 1), ('[android.vr.cts.VrCpuTest VrCpuTest None]', 1), ('[android.server.wm.CompatChangeTests createManagedConstrainDisplayApisFlagsSession None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest registerBroadcastReceiver None]', 1), ('[com.android.cts.net.hostside.DataSaverModeTest testGetRestrictBackgroundStatus_requiredWhitelistedPackages None]', 1), ('[android.security.identity.cts.HkdfTest testVectors None]', 1), ('[android.graphics.cts.BitmapFactoryTest testImages None]', 1), ('[android.graphics.cts.BitmapFactoryTest parametersForTestDng None]', 1), ('[android.app.cts.SystemFeaturesTest testCameraFeatures None]', 1), ('[android.media.cts.AudioRecordTest testMediaMetrics None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerNegativeTest getTestContext None]', 1), ('[com.android.cts.runner.CtsTestRunListener isPrimitive None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiSupported None]', 1), ('[android.adbmanager.cts.AdbManagerHostDeviceTest test_isadbWifiQrSupported None]', 1), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testRecordingAudioInRawFormats None]', 1), ('[android.filesystem.cts.RandomRWTest testRandomRead None]', 1), ('[android.app.cts.DownloadManagerTest testDownloadManagerSupportsHttpsWithExternalWebServer None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP8Flex360pWithIntraRefresh None]', 1), ('[android.car.cts.CarPropertyManagerTest getPropertyList None]', 1), ('[android.car.cts.CarPropertyManagerTest testGetAreaId None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportGearSelection None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportNightMode None]', 1), ('[android.car.cts.CarPropertyManagerTest testMustSupportPerfVehicleSpeed None]', 1), ('[android.database.cts.CursorWindowTest testAccessDataValues None]', 1), ('[android.mediav2.cts.ExtractorTest testExtractDecodeAndValidate None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest isNotNull None]', 1), ('[android.car.cts.permissioncarspeed.PermissionCarSpeedTest testPermissionCarSpeedGranted None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest isNotNull None]', 1), ('[android.car.cts.permissioncarexteriorenvironment.PermissionCarExteriorEnvironmentTest testPermissionCarExteriorEnvironmentGranted None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRotateAndCropCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testLegacyCameraDeviceParity None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraOrientationAlignedWithDevice None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.mediav2.cts.MuxerTest testOffsetPresentationTimeNative None]', 1), ('[android.location.cts.fine.ScanningSettingsTest isTV None]', 1), ('[android.location.cts.fine.ScanningSettingsTest testWifiScanningSettings None]', 1), ('[android.hardware.cts.LowRamDeviceTest DisplayMetrics None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinimumMemory None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinSharedDataPartitionSize None]', 1), ('[android.hardware.cts.LowRamDeviceTest testMinDataPartitionSize None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBase None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithWrongSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithSplit None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallBaseWithDm None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallEverything None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnly None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyMissingSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallSplitOnlyWithoutBaseSignature None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyBaseHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlyDmHasFsvSig None]', 1), ('[android.appsecurity.cts.ApkVerityInstallTest testInstallOnlySplitHasFsvSig None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.security.cts.SELinuxHostTest testCollectDeviceInfo None]', 1), ('[android.security.cts.SELinuxHostTest testGlobalEnforcing None]', 1), ('[android.security.cts.SELinuxHostTest testNoExemptionsForVendorExecutingCore None]', 1), ('[android.security.cts.SELinuxHostTest testMLSAttributes None]', 1), ('[android.security.cts.SELinuxHostTest testValidSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospSeappContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testAospServiceContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidFileContexts None]', 1), ('[android.security.cts.SELinuxHostTest testValidPropertyContexts None]', 1), ('[android.security.cts.SELinuxHostTest testCoredomainViolators None]', 1), ('[android.security.cts.SELinuxHostTest testNoBugreportDenials None]', 1), ('[android.security.cts.SELinuxHostTest testInitDomain None]', 1), ('[android.security.cts.SELinuxHostTest testUeventdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testHealthdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testServicemanagerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVoldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testNetdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSurfaceflingerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testZygoteDomain None]', 1), ('[android.security.cts.SELinuxHostTest testDrmServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInstalldDomain None]', 1), ('[android.security.cts.SELinuxHostTest testKeystoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSystemServerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWatchdogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLogdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testLmkdDomain None]', 1), ('[android.security.cts.SELinuxHostTest testWpaDomain None]', 1), ('[android.security.cts.SELinuxHostTest testPermissionControllerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testVzwOmaTriggerDomain None]', 1), ('[android.security.cts.SELinuxHostTest testGMSCoreDomain None]', 1), ('[android.security.cts.SELinuxHostTest testInitShellDomain None]', 1), ('[android.security.cts.SELinuxHostTest testRecoveryDomain None]', 1), ('[android.security.cts.SELinuxHostTest testSuDomain None]', 1)]"
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-1-9"	"7.3.10/C-1-9"	"07031000.670109"	"""C-1-9] MUST challenge the user for the recommended primary authentication (e.g. PIN, pattern, password) after no more than twenty false trials and no less than ninety-second backoff time for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. && C-1-9] MUST challenge the user for the recommended primary authentication (e.g. PIN, pattern, password) after no more than twenty false trials and no less than ninety-second backoff time for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. | C-1-9] if the spoof and imposter acceptance rates are higher than 7% as measure by the Android Biometrics Test Protocols. && C-1-9] MUST challenge the user for the recommended primary authentication (e.g. PIN, pattern, password) after no more than twenty false trials and no less than ninety-second backoff time for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. && C-1-9] MUST challenge the user for the recommended primary authentication (e.g. PIN, pattern, password) after no more than twenty false trials and no less than ninety-second backoff time for biometric verification - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric. | C-1-9] if the spoof and imposter acceptance rates are higher than 7% as measure by the Android Biometrics Test Protocols. | C-1-9] - where a false trial is one with an adequate capture quality (BIOMETRIC_ACQUIRED_GOOD) that does not match an enrolled biometric."""	""	""	"BIOMETRIC_ACQUIRED_GOOD PIN"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 19), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentViewTests.java', 13), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/contacts/VoicemailContractTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 4), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/devicepolicy/src/android/devicepolicy/cts/CrossProfileAppsTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/XmlTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 2), ('/home/gpoor/cts-source/cts/tests/fragment/src/android/fragment/cts/FragmentTransactionTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityStarterTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/PathClippingTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityManagerGetConfigTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/ActivityManagerIncidentTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ReplaceWindowTests.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/BitmapBlendModeTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher3/src/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPreBackupTest.java', 1)]"	"[('(3,PIN,/android/media/cts/SoundPoolTest.java)', 1), ('(2,PIN,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(2,PIN,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(2,PIN,/android/text/cts/SelectionTest.java)', 1), ('(3,PIN,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,PIN,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(21,PIN,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(4,PIN,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,PIN,/android/server/wm/OverrideConfigTests.java)', 1), ('(9,PIN,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(10,PIN,/android/server/wm/AssistantStackTests.java)', 1), ('(1,PIN,/android/server/wm/ActivityManagerGetConfigTests.java)', 1), ('(1,PIN,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(15,PIN,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(2,PIN,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(2,PIN,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(1,PIN,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(1,PIN,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(3,PIN,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(2,PIN,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(4,PIN,/android/devicepolicy/cts/CrossProfileAppsTest.java)', 1), ('(8,PIN,/android/util/cts/XmlTest.java)', 1), ('(13,PIN,/android/fragment/cts/FragmentViewTests.java)', 1), ('(7,PIN,/com/android/server/cts/ActivityManagerIncidentTest.java)', 1), ('(2,PIN,/android/media/cts/AudioTrackTest.java)', 1), ('(1,PIN,/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java)', 1), ('(3,PIN,/android/fragment/cts/FragmentTransactionTest.java)', 1), ('(2,PIN,/android/server/wm/lifecycle/ActivityStarterTests.java)', 1), ('(2,PIN,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(2,PIN,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(1,PIN,/android/server/wm/ReplaceWindowTests.java)', 1), ('(2,PIN,/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java)', 1), ('(1,PIN,/com/android/cts/devicepolicy/AccountCheckHostSideTest.java)', 1), ('(2,PIN,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,PIN,/android/media/cts/VisualizerTest.java)', 1), ('(5,PIN,/android/provider/cts/contacts/VoicemailContractTest.java)', 1), ('(4,PIN,/android/uirendering/cts/testclasses/PathClippingTests.java)', 1), ('(1,PIN,/android/telephony/cts/SignalStrengthTest.java)', 1), ('(9,PIN,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(6,PIN,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(3,PIN,/android/view/inputmethod/cts/InputMethodManagerTest.java)', 1), ('(1,PIN,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(1,PIN,/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java)', 1), ('(1,PIN,/android/uirendering/cts/testclasses/BitmapBlendModeTest.java)', 1), ('(2,PIN,/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPreBackupTest.java)', 1)]"	"[('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();            assertEquals(1, cursor.getInt(0));        }    }   ])', 3), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[PIN]:[1]:method_text:[  assertThat(mHdmiControlManager.getHdmiCecEnabled()).isEqualTo(originalValue);        }    }   ])', 2), ('([1:/android/provider/cts/contacts/VoicemailContractTest.java]:[PIN]:[1]:method_text:[           cursor.moveToFirst();            assertEquals(0, cursor.getInt(0));        }    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[PIN]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[PIN]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[PIN]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[PIN]:[2]:method_text:[drawable = new BitmapDrawable();        mExpandableListView.setGroupIndicator(drawable);    }   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[PIN]:[1]:method_text:[getSelectionStart(builder));        assertEquals(3, Selection.getSelectionEnd(builder));    }   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[PIN]:[1]:method_text:[getSelectionStart(builder));        assertEquals(8, Selection.getSelectionEnd(builder));    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[PIN]:[1]:method_text:[etrics.keySet().contains(GOOGLE_CLEARKEY_VENDOR_ID));        drm.close();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[PIN]:[1]:method_text:[   BaseEncoding.base16().encode(sid2).toLowerCase()));       drm.close();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[PIN]:[1]:method_text:[ng(hexSid),            lessThanOrEqualTo(endTimesMs.getLong(hexSid)));        drm.close();    }}])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[PIN]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[PIN]:[1]:method_text:[ingRequestedWhileIdle());        assertEquals(infos, request.getSignalThresholdInfos());    }   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[PIN]:[1]:method_text:[teRequest.CREATOR.createFromParcel(p);        assertThat(newRequest).isEqualTo(request);    }   ])', 1), ('([3:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[PIN]:[3]:method_text:[ed"");        } catch (IllegalArgumentException | NullPointerException expected) {        }    }}])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[2]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[tion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[of these information, just make sure they are in right     * condition(>0 or not null).     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[Radio HAL Version: "" + version,                version.first < 1 || version.second < 0);    }   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[2]:method_text:[m) -> tm.getSubscriberId());        assertEquals(globalSubscriberId, localSubscriberId);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[nyManager,                tp -> tp.setSystemSelectionChannels(Collections.emptyList()));    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[isDataEnabled(),                        5 /*times*/, TOLERANCE/5 /*timeout per poll*/));    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[CE);        }        assertEquals(mServiceState, mTelephonyManager.getServiceState());    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[    /**     * Tests that the device properly reports the contents of EF_FPLMN or null     */   ])', 1), (""([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[ption e) {        }    }    /**     * Tests that UiccCardsInfo methods don't crash.     */   ])"", 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[  /**     * Tests that the device properly reports the contents of NetworkSelectionMode     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[    /**     * Tests that the device properly check whether selection mode was manual.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[onAllowed()));    }    /**     * Construct a CallAttributes object and test getters.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[ABLED,                TelephonyManager.SIM_STATE_LOADED).contains(simApplicationState));    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[PIN]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[(1, extender.getPages().size());        assertEquals(page2, extender.getPages().get(0));    }   ])', 1), ('([2:/android/app/cts/WearableExtenderTest.java]:[PIN]:[2]:method_text:[ion.Builder(0, ""title"", null);    }    /** Notification.Action.WearableExtender functions */   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[PIN]:[1]:method_text:[                countSpec(ActivityCallback.ON_CONFIGURATION_CHANGED, CountSpec.EQUALS, 0));    }}])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[PIN]:[3]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());        }    }    @MediumTest   ])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[PIN]:[6]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[PIN]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([6:/android/server/wm/AssistantStackTests.java]:[PIN]:[6]:method_text:[used."",                    WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[PIN]:[2]:method_text:[t contain pinned stack."",                WINDOWING_MODE_PINNED, ACTIVITY_TYPE_STANDARD);    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[PIN]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/server/wm/ActivityManagerGetConfigTests.java]:[PIN]:[1]:method_text:[""Expected features does not match"",                featureNames, deviceConfig.features);    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[PIN]:[1]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([3:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[PIN]:[3]:method_text:[uthEphemeralOrPinned(/* isEphemeralDataset= */ null, /* isPinned= */true);    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[PIN]:[2]:method_text:[thEphemeralOrPinned(/* isEphemeralDataset= */ true, /* isPinned= */false);    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[PIN]:[2]:method_text:[hEphemeralOrPinned(/* isEphemeralDataset= */ false, /* isPinned= */false);    }    @Presubmit   ])', 1), ('([8:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[PIN]:[8]:method_text:[ord"");        mUiBot.waitForIdle();        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([2:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[PIN]:[2]:method_text:[esult = runCommand(""cmd deviceidle enabled deep"").trim();        return result.equals(""1"");    }}])', 1), (""([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[PIN]:[2]:method_text:[     * no contacts if there are no starred or frequent contacts in the user's contacts.     */   ])"", 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[PIN]:[1]:method_text:[   assumeTrue(""Skipping test: profile owner is not on system user"", mUserId == USER_SYSTEM);    }}])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[PIN]:[1]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PIN]:[1]:method_text:[ties"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PIN]:[1]:method_text:[bled"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[PIN]:[1]:method_text:[ion {        Utils.runDeviceTests(getDevice(), packageName, testClassName, testMethodName);    }}])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[PIN]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[PIN]:[1]:method_text:[);        assertThat(targetProfiles).contains(sDeviceState.primaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[PIN]:[1]:method_text:[());        assertMainActivityLaunchedForUser(sDeviceState.primaryUser().userHandle());    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[PIN]:[1]:method_text:[ileSwitchingLabel(                sDeviceState.primaryUser().userHandle())).isNotNull();    }   ])', 1), ('([1:/android/devicepolicy/cts/CrossProfileAppsTest.java]:[PIN]:[1]:method_text:[chingIconDrawable(                sDeviceState.primaryUser().userHandle())).isNotNull();    }   ])', 1), ('([4:/android/util/cts/XmlTest.java]:[PIN]:[4]:method_text:[ST + ""><"" + TAG_SON + "" "" + ATT_NAME + ""=\\"""" + STR_ABC            + ""\\""/></"" + TAG_TEST + "">"";   ])', 1), ('([4:/android/util/cts/XmlTest.java]:[PIN]:[4]:method_text:[   mVec.add(STR_START_PREFIX_MAPPING_TAG + prefix);            mVec.add(uri);        }    }   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[ds the Views in the proper order. Popping the back stack    // should remove the correct Views.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[agments remove the right Views. Popping the back stack should    // add the Views back properly   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[    // Removing a hidden fragment should remove the View and popping should bring it back hidden   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[ragment should do nothing to the View and popping should bring    // the Fragment back detached   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[t should remove the View from the hierarchy. Then popping it should    // bring it back VISIBLE   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[nt should remove the View from the hierarchy. Then popping it should    // bring it back hidden   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[gment should add the View back into the hierarchy. Then popping it should    // remove it again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[agment should add the View as GONE the hierarchy. Then popping it should    // remove it again.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[   }    // Simple replace of one fragment in a container. Popping should replace it back again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[    }    // Replace of multiple fragments in a container. Popping should replace it back again   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[    // Replace of empty container. Should act as add and popping should just remove the fragment   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[ensure that popping and adding a fragment properly track the fragments added    // and removed.   ])', 1), ('([1:/android/fragment/cts/FragmentViewTests.java]:[PIN]:[1]:method_text:[tions together.    // When a non-backstack fragment will be raised, it should not be destroyed.   ])', 1), ('([7:/com/android/server/cts/ActivityManagerIncidentTest.java]:[PIN]:[7]:method_text:[eDescriptor()));        }    }    /**     * Tests activity manager dumps processes.     */   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[PIN]:[1]:method_text:[ec);        // -------- tear down --------------        track.release();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[PIN]:[1]:method_text:[.getPackageManager().hasSystemFeature(                PackageManager.FEATURE_AUDIO_PRO);    }   ])', 1), ('([1:/android/autofillservice/cts/servicebehavior/DisableAutofillTest.java]:[PIN]:[1]:method_text:[+ ""ms, passedTime=""                + passedTime + "")"");        SystemClock.sleep(napTime);    }}])', 1), ('([1:/android/fragment/cts/FragmentTransactionTest.java]:[PIN]:[1]:method_text:[ingStateLoss()     * and commitNowAllowingStateLoss() by just dropping the transaction.     */   ])', 1), ('([2:/android/fragment/cts/FragmentTransactionTest.java]:[PIN]:[2]:method_text:[ceState) {            return inflater.inflate(R.layout.text_a, container, false);        }    }}])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[PIN]:[1]:method_text:[within different tasks during sleeping. The no-history activity must be     * finished.     */   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[PIN]:[1]:method_text:[    * no-history activity during sleeping. The no-history activity must not be finished.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[PIN]:[1]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[PIN]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/telephony/cts/SubscriptionManagerTest.java]:[PIN]:[1]:method_text:[p, null);            fail();        } catch (NullPointerException expected) {        }    }   ])', 1), ('([1:/android/telephony/cts/SubscriptionManagerTest.java]:[PIN]:[1]:method_text:[nsInGroup(uuid);        assertNotNull(infoList);        assertTrue(infoList.isEmpty());    }   ])', 1), ('([1:/android/server/wm/ReplaceWindowTests.java]:[PIN]:[1]:method_text:[  assumeTrue(""Skipping test: no multi-window support"", supportsSplitScreenMultiWindow());    }   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAugmentedLoginActivityTest.java]:[PIN]:[2]:method_text:[        // Expect the inline suggestion to disappear.        mUiBot.assertNoDatasets();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/AccountCheckHostSideTest.java]:[PIN]:[1]:method_text:[clean up after a failure: "" + e.getMessage());            }            throw e;        }    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[PIN]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[PIN]:[1]:method_text:[seVisualizer();        }    }    //Test case 4.2: test measurement of peak / RMS in Long MP3   ])', 1), ('([3:/android/uirendering/cts/testclasses/PathClippingTests.java]:[PIN]:[3]:method_text:[vas.clipOutPath(path2);        canvas.drawColor(Color.BLUE);        canvas.restore();    };   ])', 1), ('([1:/android/uirendering/cts/testclasses/PathClippingTests.java]:[PIN]:[1]:method_text:[(),                        R.drawable.pathclippingtest_torus, new MSSIMComparer(0.65)));    }   ])', 1), ('([1:/android/telephony/cts/SignalStrengthTest.java]:[PIN]:[1]:method_text:[RK_TYPE_IDEN: /* fall through */            default:                return null;        }    }}])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[PIN]:[1]:method_text:[ metadata.     * Uses a two channel 248 Hz sine tone at 48 kHz sampling rate for input.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[PIN]:[2]:method_text:[C decoder.     * Uses a two channel 248 Hz sine tone at 48 kHz sampling rate for input.     */   ])', 1), ('([2:/android/media/cts/DecoderTestAacDrc.java]:[PIN]:[2]:method_text:[4; // -16.0 dBFs    /**     * Test USAC decoder with different target loudness levels     */   ])', 1), ('([4:/android/media/cts/DecoderTestAacDrc.java]:[PIN]:[4]:method_text:[tamps,                drcParams, decoderName, runtimeChange, -2);        return decoded;    }}])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[ge flag argument.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[* Test two image stream (YUV420_888 and RAW_SENSOR) capture by using ImageReader.     *     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[* ImageReader factory method that has usage flag argument, and uses a custom usage flag.     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[geReader with the     * ImageReader factory method that has usage flag argument.     *     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[EG outputs for the same frame match for each YUV     * resolution and format supported.     */   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[PIN]:[1]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[PIN]:[2]:method_text:[ ""\\n""                    + ""enabled="" + dumpInputMethodInfoList(enabledImes));        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodManagerTest.java]:[PIN]:[1]:method_text:[""]"";    }    @AppModeFull(reason = ""Instant apps cannot rely on ACTION_CLOSE_SYSTEM_DIALOGS"")   ])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[PIN]:[1]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java]:[PIN]:[1]:method_text:[-instant) apps.     *     * <p>Regression test for Bug 152876819.</p>     */    @AppModeFull   ])', 1), ('([1:/android/uirendering/cts/testclasses/BitmapBlendModeTest.java]:[PIN]:[1]:method_text:[nt, true)                .runWithVerifier(new SamplePointVerifier(SAMPLE_POINTS, colors));    }}])', 1), ('([2:/android/content/pm/cts/shortcut/backup/publisher3/ShortcutManagerPreBackupTest.java]:[PIN]:[2]:method_text:[nifestShortcuts())                .haveIds(""ms1"", ""ms2"")                .areAllNotPinned();   }}])', 1)]"	""	""	"[('PIN', 117)]"	"[('[android.fragment.cts.FragmentViewTests isDetached None]', 2), ('[android.fragment.cts.FragmentViewTests getVisibility None]', 2), ('[android.widget.cts.ExpandableListViewTest testSetGroupIndicator None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_HdmiCecEnabled_ListenerWithCustomExecutor None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_HdmiCecEnabled_Listener None]', 1), ('[android.text.cts.SelectionTest testMoveUpAfterTyping None]', 1), ('[android.text.cts.SelectionTest testMoveDownAfterTyping None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsEmpty None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsSession None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsGetKeyRequest None]', 1), ('[android.telephony.cts.SignalStrengthUpdateRequestTest testBuilderWithValidParams None]', 1), ('[android.telephony.cts.SignalStrengthUpdateRequestTest testParcel None]', 1), ('[android.telephony.cts.SignalStrengthUpdateRequestTest testEquals None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDevicePolicyApn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testListen None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetRadioHalVersion None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCreateForPhoneAccountHandle None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSystemSelectionChannels None]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetSettings None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetServiceState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSendDialerSpecialCode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfoException None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetUiccCardsInfo None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeManual None]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsManualNetworkSelectionAllowed None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimApplicationState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.app.cts.WearableExtenderTest testWearableExtender None]', 1), ('[android.app.cts.WearableExtenderTest testWriteToParcel None]', 1), ('[android.server.wm.OverrideConfigTests testReceiveOverrideConfigFromRelayout None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackZOrder None]', 1), ('[android.server.wm.AssistantStackTests testDisallowEnterPiPFromAssistantStack None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[android.server.wm.ActivityManagerGetConfigTests isLowRamDevice None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_tappingSecondTimeNotTrigger None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthPinnedPresentationSelectedAndAutofilled None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthEphemeralIsTrue None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthEphemeralIsFalse None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthEphemeralNotSet None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testAppIdleAndBatterySaver_tempPowerSaveAndAppIdleWhitelists None]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testSetAutoTimeEnabled None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradePriorities None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testUpdatedSystemAppPreservedOnReboot None]', 1), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest startMainActivity_callingFromWorkProfile_targetIsPrimaryUser_launches None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingLabel_callingFromWorProfile_targetIsPrimaryUser_notNull None]', 1), ('[android.devicepolicy.cts.CrossProfileAppsTest getProfileSwitchingIconDrawable_callingFromWorkProfile_targetIsPrimaryUser_notNull None]', 1), ('[android.util.cts.XmlTest testParseStringContentHandler None]', 1), ('[android.fragment.cts.FragmentViewTests isHidden None]', 1), ('[android.fragment.cts.FragmentViewTests addInvisibleAndGoneFragments None]', 1), ('[com.android.server.cts.ActivityManagerIncidentTest testDumpServices None]', 1), ('[android.media.cts.AudioTrackTest testPlayStaticData None]', 1), ('[android.media.cts.AudioTrackTest testPlayChannelIndexStreamBuffer None]', 1), ('[android.autofillservice.cts.servicebehavior.DisableAutofillTest testDisableActivity None]', 1), ('[android.fragment.cts.FragmentTransactionTest isEmpty None]', 1), ('[android.fragment.cts.FragmentTransactionTest testGetLayoutInflater None]', 1), ('[android.server.wm.lifecycle.ActivityStarterTests testNoHistoryActivityNotFinished None]', 1), ('[android.server.wm.lifecycle.ActivityStarterTests testNoHistoryActivityWithDifferentTask None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSubscriptionGrouping None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testSubscriptionGroupingWithPermission None]', 1), ('[android.autofillservice.cts.inline.InlineAugmentedLoginActivityTest testAugmentedAutoFill_startTypingThenHideInlineSuggestion None]', 1), ('[com.android.cts.devicepolicy.AccountCheckHostSideTest testInheritTestOnly None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.media.cts.VisualizerTest test4_1MeasurePeakRms None]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_dirty None]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_retainDirty_notDirty None]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_explicitNotDirty None]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_null_dirty None]', 1), ('[android.provider.cts.contacts.VoicemailContractTest testForeignUpdate_NotNormalized_normalized None]', 1), ('[android.uirendering.cts.testclasses.PathClippingTests testCircleWithCircle None]', 1), ('[android.telephony.cts.SignalStrengthTest testSignalStrength None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcHeavyM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcClipM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacInternalClipM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcOutputLoudnessM4a None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpeg None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpegWithUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRaw None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderPrivateWithProtectedUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRawWithUsageFlag None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 1), ('[android.view.inputmethod.cts.InputMethodManagerTest testGetInputMethodList None]', 1), ('[android.view.inputmethod.cts.InputMethodManagerTest testGetEnabledInputMethodList None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.inputmethodservice.cts.hostside.InputMethodServiceLifecycleTest testInputUnbindsOnAppStopInstant None]', 1), ('[android.uirendering.cts.testclasses.BitmapBlendModeTest testDstOutBlendMode None]', 1), ('[android.content.pm.cts.shortcut.backup.publisher3.ShortcutManagerPreBackupTest testPreBackup None]', 1)]"
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	"C-1-4"	"3.5.2/C-1-4"	"03050200.670104"	"""C-1-4] MUST NOT render the app unable to respond to activity intents, service bindings, content provider requests, or explicit broadcasts. App Hibernation in AOSP meets the above requirements. <h3 id=""36_api_namespaces"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-4"	"2.2.7.1/H-1-4"	"02020701.720104"	"""5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. && 5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. | 5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30fps. *Only 2 instances are required if VP9 codec is present."""	""	""	"VP9 AVC HEVC"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AdaptivePlaybackTest.java', 27), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EncodeDecodeTest.java', 18), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 6), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 5), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderConformanceTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 3), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderSurfaceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ThumbnailUtilsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecUnitTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/mediastress/src/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/media/bitstreams/src/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecUnitTest.java', 1)]"	"[('(3,VP9,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 2), ('(1,HEVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 2), ('(1,AVC,/android/mediav2/cts/CodecUnitTest.java)', 2), ('(6,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,VP9,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,HEVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(8,VP9,/android/media/cts/DecoderConformanceTest.java)', 1), ('(8,AVC,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(3,VP9,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,AVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,HEVC,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,HEVC,/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java)', 1), ('(7,AVC,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 1), ('(11,AVC,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(1,HEVC,/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java)', 1), ('(33,VP9,/android/media/cts/DecodeAccuracyTest.java)', 1), ('(3,HEVC,/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java)', 1), ('(26,AVC,/android/media/cts/EncodeDecodeTest.java)', 1), ('(19,AVC,/android/media/cts/MediaCodecTest.java)', 1), ('(7,VP9,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(13,AVC,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(5,HEVC,/android/mediav2/cts/CodecDecoderSurfaceTest.java)', 1), ('(2,HEVC,/android/media/cts/ThumbnailUtilsTest.java)', 1), ('(38,AVC,/android/media/cts/MediaRecorderTest.java)', 1), ('(40,VP9,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(1,AVC,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(40,HEVC,/android/media/cts/AdaptivePlaybackTest.java)', 1), ('(8,AVC,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(9,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(7,VP9,/android/mediav2/cts/ExtractorTest.java)', 1), ('(11,AVC,/android/mediav2/cts/ExtractorTest.java)', 1), ('(7,HEVC,/android/mediav2/cts/ExtractorTest.java)', 1)]"	"[('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, false, false);    }   ])', 3), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, MIME_TYPE_AVC, true, false);        SurfaceToSurfaceWrapper.runTest(this, true, false);    }   ])', 3), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[ mime,            String testFile, String muxFile, int bitrate, int framerate);    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[HEVC]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 2), ('([1:/android/mediav2/cts/CodecUnitTest.java]:[AVC]:[1]:method_text:[    } catch (IllegalStateException e) {                // expected            }        }       ])', 2), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[sTest(""hls_variant/index.m3u8"", 60 * 1000, LOCAL_HLS_BITS_PER_MS, false /*isAudioOnly*/);    }   ])', 2), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[GHT_CENC, false /* scrambled */,            MediaDrm.KEY_TYPE_STREAMING);    }    @Presubmit   ])', 2), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[Mime, mInpPrefix + mTestFile,                    tmpPath, mBitrate, mFrameRate));        }    }}])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([2:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[AVC]:[2]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[         }            }        }    }    /**     * Test VP9 decoders from vendor.     */   ])', 1), (""([3:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[3]:method_text:[O_VP9, false /* isGoog */);    }    /**     * Test Google's VP9 decoder from libvpx.     */   ])"", 1), ('([2:/android/media/cts/DecoderConformanceTest.java]:[VP9]:[2]:method_text:[s Exception {        decodeTestVectors(MediaFormat.MIMETYPE_VIDEO_VP9, true /* isGoog */);    }}])', 1), ('([8:/android/hardware/camera2/cts/RecordingTest.java]:[AVC]:[8]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[VP9]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[AVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/mediav2/cts/CodecDecoderTest.java]:[HEVC]:[3]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/media/cts/bitstreams/HevcYuv420BitstreamsFullTest.java]:[HEVC]:[3]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([7:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AVC]:[7]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[fig.getValue(HTTP_H264_BASE_AAC_VIDEO_1_KEY);        playVideoTest(urlString, 640, 360);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   playVideoTest(urlString, 640, 360);    }    // Streaming HLS video downloaded from YouTube   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[   localHlsTest(""audio_only/index.m3u8"", 60 * 1000, -1, true /*isAudioOnly*/);        }    }   ])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[2]:method_text:[000, -1, false /*isAudioOnly*/);        }    }    // Streaming audio from local HTTP server   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[ // skip        }        localHlsTest(""hls.m3u8"", false, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", true, false, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[; // skip        }        localHlsTest(""hls.m3u8"", false, true, false /*isAudioOnly*/);    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AVC]:[1]:method_text:[c void quit() {            mLooper.quit();            mMediaPlayer.release();        }    }   ])', 1), ('([1:/android/mediastress/cts/HEVCR720pAacLongPlayerTest.java]:[HEVC]:[1]:method_text:[""bbb_full.ffmpeg.1280x720.mp4.libx265_1140kbps_30fps.libfaac_stereo_128kbps_48000Hz.mp4""    };   ])', 1), ('([33:/android/media/cts/DecodeAccuracyTest.java]:[VP9]:[33]:method_text:[ DecodeAccuracyTest(String testname, String fileName) {        this.fileName = fileName;    }   ])', 1), ('([3:/android/media/cts/bitstreams/HevcYuv444BitstreamsFullTest.java]:[HEVC]:[3]:method_text:[packageToRun, boolean enforce) {        super(prefix, path, pkg, packageToRun, enforce);    }   ])', 1), ('([5:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[5]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[76, 144, 1000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[20, 240, 2000000, MIME_TYPE_AVC, true, false);        encodeDecodeVideoFromBuffer(false);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[ead, so we have to hand control off to a new thread for the duration of     * the test.     */   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 144, 1000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[, 240, 2000000, MIME_TYPE_AVC, true, false);        BufferToSurfaceWrapper.runTest(this);    }   ])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[1]:method_text:[of byte[] buffers and decoded into Surfaces.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([4:/android/media/cts/EncodeDecodeTest.java]:[AVC]:[4]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([2:/android/media/cts/MediaCodecTest.java]:[AVC]:[2]:method_text:[ createInputSurface() with a non-Surface color format is not required to throw exception     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[ts:     * <br> dequeueInputBuffer() fails when encoder configured with an input Surface     */   ])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[AVC]:[1]:method_text:[t mMaxW;        public int mMaxH;        public int mFps;        public int mBitRate;    };   ])', 1), ('([14:/android/media/cts/MediaCodecTest.java]:[AVC]:[14]:method_text:[ception     * <br> getInputBuffer() after the failed queueSecureInputBuffer() succeeds.     */   ])', 1), (""([7:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[VP9]:[7]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), (""([13:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[AVC]:[13]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), (""([5:/android/mediav2/cts/CodecDecoderSurfaceTest.java]:[HEVC]:[5]:method_text:[face.     * In these scenarios, Timestamp and it's ordering is verified.     */    @LargeTest   ])"", 1), ('([1:/android/media/cts/ThumbnailUtilsTest.java]:[HEVC]:[1]:method_text:[tents(mDir);    }    @After    public void tearDown() {        deleteContents(mDir);    }   ])', 1), ('([1:/android/media/cts/ThumbnailUtilsTest.java]:[HEVC]:[1]:method_text:[mageThumbnail(file, TEST_SIZES[0], null);        assertOrientationForThumbnail(bitmap);    }   ])', 1), ('([2:/android/media/cts/MediaRecorderTest.java]:[AVC]:[2]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([6:/android/media/cts/MediaRecorderTest.java]:[AVC]:[6]:method_text:[         encSurface.release();            encSurface = null;        }        return 1;    }   ])', 1), ('([29:/android/media/cts/MediaRecorderTest.java]:[AVC]:[29]:method_text:[) {            MediaUtils.skipTest(""VideoCapabilities or surface not found"");        }    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[AVC]:[1]:method_text:[boolean hasH264() {        return MediaUtils.hasEncoder(MediaFormat.MIMETYPE_VIDEO_AVC);    }   ])', 1), ('([16:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[16]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveEarlyEos()   { ex(VP9(),   adaptiveEarlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveEosFlushSeek()   { ex(VP9(),   adaptiveEosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSkipAhead()   { ex(VP9(),   adaptiveSkipAhead); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSkipBack()   { ex(VP9(),   adaptiveSkipBack); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveReconfigDrc()   { ex(VP9(),   adaptiveReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSmallReconfigDrc()   { ex(VP9(),   adaptiveSmallReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveDrc()  { ex(VP9(),  adaptiveDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveDrcEarlyEos()  { ex(VP9(),  new AdaptiveDrcEarlyEosTest()); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_adaptiveSmallDrc()   { ex(VP9(),   adaptiveSmallDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_earlyEos()   { ex(VP9(),   earlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_eosFlushSeek()   { ex(VP9(),   eosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[VP9]:[2]:method_text:[public void testVP9_flushConfigureDrc()   { ex(VP9(),   flushConfigureDrc); }    ])', 1), ('([1:/android/media/cts/AdaptivePlaybackTest.java]:[AVC]:[1]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([16:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[16]:method_text:[ void onlyTexture() { ex(H264(HW), new EarlyEosTest().texture()); }    /* inidividual tests */   ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveEarlyEos()  { ex(HEVC(),  adaptiveEarlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveEosFlushSeek()  { ex(HEVC(),  adaptiveEosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSkipAhead()  { ex(HEVC(),  adaptiveSkipAhead); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSkipBack()  { ex(HEVC(),  adaptiveSkipBack); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveReconfigDrc()  { ex(HEVC(),  adaptiveReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSmallReconfigDrc()  { ex(HEVC(),  adaptiveSmallReconfigDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveDrc() { ex(HEVC(), adaptiveDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveDrcEarlyEos() { ex(HEVC(), new AdaptiveDrcEarlyEosTest()); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_adaptiveSmallDrc()  { ex(HEVC(),  adaptiveSmallDrc); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_earlyEos()  { ex(HEVC(),  earlyEos); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_eosFlushSeek()  { ex(HEVC(),  eosFlushSeek); }    ])', 1), ('([2:/android/media/cts/AdaptivePlaybackTest.java]:[HEVC]:[2]:method_text:[public void testHEVC_flushConfigureDrc()  { ex(HEVC(),  flushConfigureDrc); }    ])', 1), ('([2:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[2]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[ + key + "", value="" + keyStatus.get(key));        }        return true;    }    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[NC, VIDEO_HEIGHT_CENC, false /* scrambled */,                MediaDrm.KEY_TYPE_OFFLINE);    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[TS, VIDEO_HEIGHT_MPEG2TS, true /* scrambled */,            MediaDrm.KEY_TYPE_STREAMING);    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[AVC]:[1]:method_text:[on e) {            throw new Error(e.getMessage() + ""-"" + key);        }    }    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[pPrefix + mTestFile, tmpPath,                            mBitrate, mFrameRate));        }    }}])', 1), ('([9:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[9]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[VP9]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([4:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[4]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([7:/android/mediav2/cts/ExtractorTest.java]:[AVC]:[7]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1), ('([2:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[2]:method_text:[   testExtractor.unselectTrack(trackID);            }            return result;        }       ])', 1), ('([5:/android/mediav2/cts/ExtractorTest.java]:[HEVC]:[5]:method_text:[acted and         * compared with each other for similarity.         */        @LargeTest       ])', 1)]"	""	""	"[('AVC', 58), ('VP9', 29), ('HEVC', 26)]"	"[('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 3), ('[android.mediav2.cts.EncodeDecodeAccuracyTest testEncodeDecodeAccuracyRGB None]', 3), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 3), ('[android.mediav2.cts.CodecDecoderSurfaceTest getDisplayMetrics None]', 3), ('[android.media.cts.AdaptivePlaybackTest EarlyEosTest None]', 3), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 3), ('[android.mediav2.cts.ExtractorTest isClosed None]', 3), ('[android.mediav2.cts.ExtractorTest testDataSourceNative None]', 3), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurface None]', 2), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurfaceNative None]', 2), ('[android.mediav2.cts.CodecUnitTest TestApi None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Other None]', 1), ('[android.media.cts.DecoderConformanceTest testVP9Goog None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video1 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHTTP_H264Base_AAC_Video2 None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHLS None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsWithHeadersCookies None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_audio_only_overridable None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_unmuxed_1500k None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStream None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithQueryString None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithRedirect None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayHlsStreamWithTimedId3 None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBufferQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToBuffer720p None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToBuffer720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromBufferToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromBufferToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQCIF None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurfaceQVGA None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720p None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.MediaCodecTest testException None]', 1), ('[android.media.cts.MediaCodecTest testAsyncStopAndReset None]', 1), ('[android.media.cts.MediaCodecTest testConcurrentAudioVideoEncodings None]', 1), ('[android.media.cts.MediaCodecTest testCryptoInfoPattern None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.media.cts.MediaRecorderTest testSetMaxFileSize None]', 1), ('[android.media.cts.MediaRecorderTest testProfileAvcBaselineLevel1 None]', 1), ('[android.media.cts.MediaRecorderTest testPersistentSurfaceRecordingTimeLapse None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveEosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSkipAhead None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSkipBack None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSmallReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveDrcEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_adaptiveSmallDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_earlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_eosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testVP9_flushConfigureDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveEosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSkipAhead None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSkipBack None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSmallReconfigDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveDrcEarlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_adaptiveSmallDrc None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_earlyEos None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_eosFlushSeek None]', 1), ('[android.media.cts.AdaptivePlaybackTest testHEVC_flushConfigureDrc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testReleaseOfflineLicense None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc2 None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackOfflineCenc None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testClearKeyPlaybackMpeg2ts None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testPlaybackMpeg2ts None]', 1)]"
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	"H-1-3"	"2.2.7.1/H-1-3"	"02020701.720103"	"""5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. && 5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. | 5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods."""	""	""	"VideoCapabilities.getSupportedPerformancePoints getSupportedPerformancePoints() CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances()"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPairPerfTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/mediapc/src/android/mediapc/cts/MultiDecoderPairPerfTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecListTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecCapabilitiesTest.java', 1)]"	"[('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiEncoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/media/cts/DecoderTest.java)', 1), ('(1,VideoCapabilities.getSupportedPerformancePoints,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getSupportedPerformancePoints(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,CodecCapabilities.getMaxSupportedInstances,/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(1,getMaxSupportedInstances(),/android/mediapc/cts/MultiDecoderPairPerfTest.java)', 1), ('(2,getSupportedPerformancePoints(),/android/media/cts/MediaCodecListTest.java)', 1), ('(2,getMaxSupportedInstances(),/android/media/cts/MediaCodecCapabilitiesTest.java)', 1)]"	"[('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ances. Also ensures that all the concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[ and ensures that all the     * concurrent sessions succeed in encoding.     */    @LargeTest   ])', 1), ('([1:/android/media/cts/DecoderTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[       continue;            }            return true;        }        return false;    }   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[VideoCapabilities.getSupportedPerformancePoints]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getSupportedPerformancePoints()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[CodecCapabilities.getMaxSupportedInstances]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([1:/android/mediapc/cts/MultiDecoderPairPerfTest.java]:[getMaxSupportedInstances()]:[1]:method_text:[urrent sessions succeed in decoding with meeting the expected frame rate.     */    @LargeTest   ])', 1), ('([2:/android/media/cts/MediaCodecListTest.java]:[getSupportedPerformancePoints()]:[2]:method_text:[ntial performance point data"",                    describedTypes.contains(type));        }    }}])', 1), ('([2:/android/media/cts/MediaCodecCapabilitiesTest.java]:[getMaxSupportedInstances()]:[2]:method_text:[/media_codecs.xml: \\n"";           fail(failMessage + xmlOverrides.toString());        }    }   ])', 1)]"	""	""	"[('getMaxSupportedInstances()', 5), ('getSupportedPerformancePoints()', 4), ('VideoCapabilities.getSupportedPerformancePoints', 3), ('CodecCapabilities.getMaxSupportedInstances', 3)]"	"[('[android.media.cts.DecoderTest testTunneledVideoFlush None]', 1), ('[android.media.cts.MediaCodecListTest testAllHardwareAcceleratedVideoCodecsPublishPerformancePoints None]', 1), ('[android.media.cts.MediaCodecCapabilitiesTest testGetMaxSupportedInstances None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"T-4-2"	"9.8.2/T-4-2"	"09080200.840402"	""">9.8.2/T-4-2] MUST not hide the microphone indicator for system apps that have visible user interfaces or direct user interaction. If Television device implementations declare android.hardware.camera.any, they: [[<a href=""#9_8_2_privacy"""""	""	""	"android.hardware.camera.any"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1)]"	"[('(1,android.hardware.camera.any,/android/adbmanager/cts/AdbManagerHostDeviceTest.java)', 2)]"	"[('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera.any]:[1]:method_text:[has-feature "" + feature);        return Boolean.parseBoolean(result.getStdout().trim());    }   ])', 2)]"	""	""	"[('android.hardware.camera.any', 2)]"	""
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-2-3"	"2.2.7.4/H-2-3"	"02020704.720203"	"""8.2/H-2-3] MUST ensure a sequential read performance of at least 250 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"182:543329) 7.3.2  . Magnetometer"	"7.3.2"	"C-1-10"	"7.3.2/C-1-10"	"07030200.670110"	"""C-1-10] MUST implement the TYPE_MAGNETIC_FIELD_UNCALIBRATED sensor. If device implementations include a 3-axis magnetometer, an accelerometer sensor, and a 3-axis gyroscope sensor, they: """	""	""	"TYPE_MAGNETIC_FIELD_UNCALIBRATED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SingleSensorTests.java', 9), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingTests.java', 4), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorSupportTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorBatchingFifoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorDirectReportTest.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorParameterRangeTest.java', 1)]"	"[('(2,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorBatchingFifoTest.java)', 1), ('(4,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorBatchingTests.java)', 1), ('(1,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorIntegrationTests.java)', 1), ('(1,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorDirectReportTest.java)', 1), ('(1,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorParameterRangeTest.java)', 1), ('(9,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SingleSensorTests.java)', 1), ('(2,TYPE_MAGNETIC_FIELD_UNCALIBRATED,/android/hardware/cts/SensorSupportTest.java)', 1)]"	"[('([2:/android/hardware/cts/SensorBatchingFifoTest.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[2]:method_text:[IBRATED,                getReservedFifoLength(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED));    }   ])', 1), ('([1:/android/hardware/cts/SensorBatchingTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[tchingSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_FASTEST, BATCHING_PERIOD);    }   ])', 1), ('([1:/android/hardware/cts/SensorBatchingTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[nBatchingSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_50HZ, BATCHING_PERIOD);    }   ])', 1), ('([1:/android/hardware/cts/SensorBatchingTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[nFlushSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_FASTEST, BATCHING_PERIOD);    }   ])', 1), ('([1:/android/hardware/cts/SensorBatchingTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ runFlushSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_50HZ, BATCHING_PERIOD);    }   ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[le {        verifySensorReconfigureWhileActive(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED);    }   ])', 1), ('([1:/android/hardware/cts/SensorDirectReportTest.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[D,                                             Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED);    }   ])', 1), ('([1:/android/hardware/cts/SensorParameterRangeTest.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[or.TYPE_MAGNETIC_FIELD_UNCALIBRATED,                UNCAL_MAGNETOMETER_MIN_FIFO_LENGTH);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[nSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, SensorManager.SENSOR_DELAY_FASTEST);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[s Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_200HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[s Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_100HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ws Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_50HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ws Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_25HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ws Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_15HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ws Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_10HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ows Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_5HZ);    }   ])', 1), ('([1:/android/hardware/cts/SingleSensorTests.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[ows Throwable {        runSensorTest(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED, RATE_1HZ);    }   ])', 1), ('([1:/android/hardware/cts/SensorSupportTest.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[Support(Sensor.TYPE_MAGNETIC_FIELD_UNCALIBRATED);    }    @CddTest(requirement=""7.3.9/C-2-7"")   ])', 1), ('([1:/android/hardware/cts/SensorSupportTest.java]:[TYPE_MAGNETIC_FIELD_UNCALIBRATED]:[1]:method_text:[     return (mSensorManager != null && mSensorManager.getDefaultSensor(sensorType) != null);    }}])', 1)]"	""	""	"[('TYPE_MAGNETIC_FIELD_UNCALIBRATED', 19)]"	"[('[android.hardware.cts.SensorBatchingFifoTest testUncalMagnetometerFifoLength None]', 1), ('[android.hardware.cts.SensorBatchingTests testMagneticFieldUncalibrated_fastest_batching None]', 1), ('[android.hardware.cts.SensorBatchingTests testMagneticFieldUncalibrated_50hz_batching None]', 1), ('[android.hardware.cts.SensorBatchingTests testMagneticFieldUncalibrated_fastest_flush None]', 1), ('[android.hardware.cts.SensorBatchingTests testMagneticFieldUncalibrated_50hz_flush None]', 1), ('[android.hardware.cts.SensorIntegrationTests testUncalibratedMagneticFieldReconfigureWhileActive None]', 1), ('[android.hardware.cts.SensorDirectReportTest testRateIndependencyMagUncalMagSingleChannel None]', 1), ('[android.hardware.cts.SensorParameterRangeTest testUncalMagnetometerFifoLength None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_fastest None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_200hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_100hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_50hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_25hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_15hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_10hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_5hz None]', 1), ('[android.hardware.cts.SingleSensorTests testMagneticFieldUncalibrated_1hz None]', 1), ('[android.hardware.cts.SensorSupportTest testSupportsMagneticFieldUncalibrated None]', 1), ('[android.hardware.cts.SensorSupportTest testSupportsRotationVectorIfHasAGM None]', 1)]"
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	"C-1-3"	"3.5.2/C-1-3"	"03050200.670103"	"""C-1-3]. && C-1-3]. | C-1-3] MUST only apply restrictions affecting all device users when there is evidence that the package has not been used by ANY user for some period of time. This duration is STRONGLY RECOMMENDED to be one month or longer."""	""	""	"RECOMMENDED ANY"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 18), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/PrintAttributesTest.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/DrawableWrapperTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamObjectTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 2), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/TestMedia.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/BugreportManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/BatteryStatsManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/fragment/src/android/fragment/cts/FragmentLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RSASignatureTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ActivityManagerGetConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MinimalPostProcessingTests.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/EmbossMaskFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/fragment/src/android/fragment/cts/FragmentTransactionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/cts/MatrixCursor_RowBuilderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowContextPolicyTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/allocation-tracking/app/src/android/jvmti/cts/JvmtiTrackingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/NetworkRegistrationInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/backgroundactivity/src/android/server/wm/BackgroundActivityLaunchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1)]"	"[('(4,ANY,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(1,ANY,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,ANY,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(8,ANY,/android/transition/cts/FadeTest.java)', 1), ('(1,ANY,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(5,ANY,/RestoreAnyVersionTest.java)', 1), ('(3,ANY,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(2,ANY,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ANY,/android/view/cts/PointerCaptureTest.java)', 1), ('(29,ANY,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(2,ANY,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(2,ANY,/android/server/wm/AssistantStackTests.java)', 1), ('(1,ANY,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,ANY,/android/server/wm/ActivityManagerGetConfigTests.java)', 1), ('(2,ANY,/android/security/cts/STKFrameworkTest.java)', 1), ('(1,ANY,/android/adb/cts/AdbHostTest.java)', 1), ('(3,ANY,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(1,ANY,/android/server/wm/MinimalPostProcessingTests.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,ANY,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,ANY,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,ANY,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(1,ANY,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(2,ANY,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(8,ANY,/android/view/cts/ActionModeTest.java)', 1), ('(1,ANY,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,ANY,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(5,ANY,/android/security/cts/TestMedia.java)', 1), ('(1,ANY,/android/graphics/cts/EmbossMaskFilterTest.java)', 1), ('(5,ANY,/android/media/cts/AudioTrackTest.java)', 1), ('(3,ANY,/android/autofillservice/cts/FillEventHistoryTest.java)', 1), ('(4,ANY,/android/util/proto/cts/ProtoOutputStreamObjectTest.java)', 1), ('(1,ANY,/android/fragment/cts/FragmentTransactionTest.java)', 1), ('(1,ANY,/android/database/cts/MatrixCursor_RowBuilderTest.java)', 1), ('(1,ANY,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(3,ANY,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(1,ANY,/android/server/wm/WindowContextPolicyTests.java)', 1), ('(1,ANY,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(1,ANY,/android/jvmti/cts/JvmtiTrackingTest.java)', 1), ('(1,ANY,/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java)', 1), ('(2,ANY,/android/carrierapi/cts/BugreportManagerTest.java)', 1), ('(1,ANY,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java)', 1), ('(4,ANY,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(38,ANY,/android/graphics/drawable/cts/DrawableWrapperTest.java)', 1), ('(15,ANY,/android/print/cts/PrintAttributesTest.java)', 1), ('(1,ANY,/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(1,ANY,/android/server/wm/BackgroundActivityLaunchTest.java)', 1), ('(6,ANY,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(1,ANY,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(3,ANY,/android/telephony/cts/BatteryStatsManagerTest.java)', 1), ('(2,ANY,/android/fragment/cts/FragmentLifecycleTest.java)', 1), ('(2,ANY,/android/keystore/cts/RSASignatureTest.java)', 1), ('(29,ANY,/android/view/cts/ViewTest.java)', 1)]"	"[('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[butes to the second selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ibutes to the third selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ed to be the second selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ted to be the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 2), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[n so that it does not affect other tests.            view.cancelDragAndDrop();        }    }   ])', 2), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[ times(1)).onItemClick(eq(mExpandableListView),                any(), eq(100), eq(99L));    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[upClick(eq(mExpandableListView),                any(), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ANY]:[1]:method_text:[(eq(mExpandableListView),                any(), eq(0), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[ANY]:[1]:method_text:[tch (IOException e) {            Log.w(TAG, ""Failed to connect to "" + server, e);        }    }}])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[ANY]:[1]:method_text:[ppears if the dev option is set even if the user specifically     * set to suppress it.     */   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[ANY]:[1]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([4:/android/transition/cts/FadeTest.java]:[ANY]:[4]:method_text:[e4);        verify(mListener, never()).onTransitionEnd(any());        waitForEnd(1000);    }   ])', 1), ('([3:/android/transition/cts/FadeTest.java]:[ANY]:[3]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ANY]:[1]:method_text:[neration, including requesting Key Attestation, for all supported key     * algorithms.     */   ])', 1), ('([5:/RestoreAnyVersionTest.java]:[ANY]:[5]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[ANY]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([2:/android/media/cts/MediaDrmMetricsTest.java]:[ANY]:[2]:method_text:[   BaseEncoding.base16().encode(sid2).toLowerCase()));       drm.close();    }    @Presubmit   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ANY]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ANY]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[ANY]:[1]:method_text:[Capture(true);        releaseCaptureSync(mTarget);        assertPointerCapture(false);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[tion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[of these information, just make sure they are in right     * condition(>0 or not null).     */   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[3]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[2]:method_text:[yManager#getRadioPowerState()} does not throw any exception     * and returns radio on.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ow any     * exception. TODO enhance later if we have an API to get data enabled state.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ootRadio()} does not throw any exception     * and final radio state is radio power on.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[pType(int)} does not throw any exception     * for all supported subscription app type.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[   * Verifies that {@link TelephonyManager#getIsimDomain()} does not throw any exception     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[* and has the correct permissions.     */    @Ignore(""API moved back to @hide for Android R."")   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ ensure {@link NetworkRegistrationInfo#isRoaming()} does not throw any     * exception.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[throw any     * exception and returns valid result     * @see ServiceState.RoamingType     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[ exception and returns valid result     * @see android.telephony.Annotation.NetworkType     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[2]:method_text:[;        }    }    /**     * Tests {@link TelephonyManager#updateAvailableNetworks}     */   ])', 1), ('([10:/android/telephony/cts/TelephonyManagerTest.java]:[ANY]:[10]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[ANY]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[ANY]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ANY]:[1]:method_text:[tack should be focused."",                mDefaultWindowingMode, ACTIVITY_TYPE_STANDARD);    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ANY]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[ANY]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/server/wm/ActivityManagerGetConfigTests.java]:[ANY]:[1]:method_text:[""Expected features does not match"",                featureNames, deviceConfig.features);    }   ])', 1), ('([2:/android/security/cts/STKFrameworkTest.java]:[ANY]:[2]:method_text:[as it is protected by permission in             * patched devices             */        }    }}])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[ANY]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[ANY]:[1]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 1), ('([1:/android/server/wm/MinimalPostProcessingTests.java]:[ANY]:[1]:method_text:[ssingRequested(displayId);        assertTrue(supported ? requested == on : !requested);    }   ])', 1), ('([1:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[ANY]:[1]:method_text:[xception for adding too many strokes."");        } catch (RuntimeException e) {        }    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[ANY]:[1]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ClipDescriptionTest.java]:[ANY]:[1]:method_text:[        assertThat(clipboardManager.getPrimaryClipDescription().isStyledText()).isTrue();    }   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[ANY]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[ANY]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ANY]:[1]:method_text:[    .isEqualTo(0L);        } finally {            serviceConnection.unbind();        }    }   ])', 1), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[ANY]:[1]:method_text:[reStatsForUid.getDataBytes())                .isEqualTo(0L);        blobData.delete();    }   ])', 1), ('([1:/android/view/cts/ActionModeTest.java]:[ANY]:[1]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([7:/android/view/cts/ActionModeTest.java]:[ANY]:[7]:method_text:[nGetContentRect(any(ActionMode.class), any(View.class),                any(Rect.class));    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[ANY]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[ANY]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationImeTests.java]:[ANY]:[2]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([3:/android/security/cts/TestMedia.java]:[ANY]:[3]:method_text:[ * Vulnerability Behaviour: SIGSEGV in self     */    @SecurityTest(minPatchLevel = ""2018-10"")   ])', 1), ('([2:/android/security/cts/TestMedia.java]:[ANY]:[2]:method_text:[ test methods     ******************************************************************************/}])', 1), ('([1:/android/graphics/cts/EmbossMaskFilterTest.java]:[ANY]:[1]:method_text:[xel) + Color.green(pixel) + Color.blue(pixel);            }        }        return color;    }}])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[ANY]:[2]:method_text:[        track.release();        Thread.sleep(waitMsec); // wait for release to complete    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[e2 > 0);    }    // Test AudioTrack to see if there are any problems with large frame counts.   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[ble to create "" + MAX_TRACKS + "" tracks - that\'s too many!"",            n < MAX_TRACKS);    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[ANY]:[1]:method_text:[uires HW support,              // however other exception failures are not OK.        }    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[no events where generated        InstrumentedAutoFillService.assertNoFillEventHistory();    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[but     * the user manually entered values that match what was provided by the service.     */   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[ANY]:[1]:method_text:[entered values that match what was provided by the service on different     * datasets.     */   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[1]:method_text:[ed startObject / endObject calls: too many endObject     * with objects that have data.     */   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[2]:method_text:[t mismatched startObject / endObject calls: too many endObject     * with empty objects     */   ])', 1), ('([1:/android/util/proto/cts/ProtoOutputStreamObjectTest.java]:[ANY]:[1]:method_text:[ startObject / endObject calls: Trailing startObject     * with objects that have data.     */   ])', 1), ('([1:/android/fragment/cts/FragmentTransactionTest.java]:[ANY]:[1]:method_text:[ingStateLoss()     * and commitNowAllowingStateLoss() by just dropping the transaction.     */   ])', 1), ('([1:/android/database/cts/MatrixCursor_RowBuilderTest.java]:[ANY]:[1]:method_text:[      }        assertNotNull(cursor.newRow());        assertEquals(2, cursor.getCount());    }}])', 1), ('([1:/android/telephony/cts/SubscriptionManagerTest.java]:[ANY]:[1]:method_text:[tSubscriptionId() == activeDataSubIdCurrent);            assertTrue(foundSub);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[ remaining delegations.            setDelegatedScopes(DELEGATE_APP_PKG, null);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[ANY]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[ANY]:[1]:method_text:[ first initialized. Calling this API at     * any other time should throw an exception.     */   ])', 1), ('([1:/android/server/wm/WindowContextPolicyTests.java]:[ANY]:[1]:method_text:[    for (int i = 0; i < 6; i++) {            createWindowContext(display.mId);        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiInfoTest.java]:[ANY]:[1]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([1:/android/jvmti/cts/JvmtiTrackingTest.java]:[ANY]:[1]:method_text:[        Double.class.getName();    }    private ArrayList<Object> l = new ArrayList<>(100);   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityWindowReportingTest.java]:[ANY]:[1]:method_text:[ = mActivity.getWindow().getDecorView().getWindowToken();        });        return params;    }}])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[;        FileUtils.closeQuietly(mScreenshotFd);        killCurrentBugreportIfRunning();    }   ])', 1), ('([1:/android/carrierapi/cts/BugreportManagerTest.java]:[ANY]:[1]:method_text:[ssertThat(bugreportFile2.length()).isEqualTo(0L);        assertFdIsClosed(bugreportFd2);    }   ])', 1), ('([1:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_PhoneTest.java]:[ANY]:[1]:method_text:[= 0);        assertEquals(label, Phone.getTypeLabel(mResources, Phone.TYPE_CUSTOM, label));    }}])', 1), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[ANY]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[4]:method_text:[pper(Drawable dr) {            super(dr);        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[3]:method_text:[      verify(cb, never()).invalidateDrawable(any());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([9:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[9]:method_text:[ never()).scheduleDrawable(any(), any(), anyLong());    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[6]:method_text:[heduleDrawable(null, null);        verify(cb, never()).unscheduleDrawable(any(), any());    }   ])', 1), ('([4:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[4]:method_text:[w(any());        wrapper.draw(null);        verify(mockDrawable, times(1)).draw(any());    }   ])', 1), ('([1:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[1]:method_text:[wrapper.getPadding(new Rect());        verify(mockDrawable, times(1)).getPadding(any());    }   ])', 1), ('([6:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[6]:method_text:[isible());        verify(mockDrawable, times(1)).setVisible(anyBoolean(), anyBoolean());    }   ])', 1), ('([3:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[3]:method_text:[        wrapper.setAlpha(-1);        verify(mockDrawable, times(1)).setAlpha(anyInt());    }   ])', 1), ('([2:/android/graphics/drawable/cts/DrawableWrapperTest.java]:[ANY]:[2]:method_text:[apper.setColorFilter(null);        verify(mockDrawable, times(1)).setColorFilter(any());    }   ])', 1), ('([3:/android/print/cts/PrintAttributesTest.java]:[ANY]:[3]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[ibutes to the first selection.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[the     * default attributes.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[   * supported by the printer.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/print/cts/PrintAttributesTest.java]:[ANY]:[1]:method_text:[because of historical reasons.     *     * @throws Exception If anything is unexpected     */   ])', 1), ('([1:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[ANY]:[1]:method_text:[nsure {@link NetworkRegistrationInfo#isSearching()} does not throw any     * exception.     */   ])', 1), ('([1:/android/server/wm/BackgroundActivityLaunchTest.java]:[ANY]:[1]:method_text:[      stopTestPackage(TEST_PACKAGE_APP_B);        AppOpsUtils.reset(APP_A_PACKAGE_NAME);    }   ])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[ANY]:[1]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 1), ('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[ANY]:[5]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[ANY]:[1]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/telephony/cts/BatteryStatsManagerTest.java]:[ANY]:[1]:method_text:[StatsManagerTest{    /** Test that {@link CellularBatteryStats} getters return sane values. */   ])', 1), ('([2:/android/telephony/cts/BatteryStatsManagerTest.java]:[ANY]:[2]:method_text:[tteryStats.getTimeInRxSignalStrengthLevelMicros(                anyInt())).isAtLeast(-1L);    }}])', 1), ('([1:/android/fragment/cts/FragmentLifecycleTest.java]:[ANY]:[1]:method_text:[ter this state.        assertFalse(""fragment is detached"", strictFragment.isDetached());    }   ])', 1), ('([1:/android/fragment/cts/FragmentLifecycleTest.java]:[ANY]:[1]:method_text:[onCreateView.     * This means the child fragment will have received onAttach/onCreate.     */   ])', 1), ('([1:/android/keystore/cts/RSASignatureTest.java]:[ANY]:[1]:method_text:[  }        }        SIGNATURE_ALGORITHMS = sigAlgs.toArray(new String[sigAlgs.size()]);    }   ])', 1), ('([1:/android/keystore/cts/RSASignatureTest.java]:[ANY]:[1]:method_text:[     R.raw.rsa_key4_4096_pkcs8, R.raw.rsa_key4_4096_cert, importParams),                });    }}])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[ND_IN_MILLIS, mActivity::hasWindowFocus);        assertTrue(mActivity.hasWindowFocus());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[gate);        view.setTouchDelegate(null);        assertNull(view.getTouchDelegate());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[, times(1)).onCreateContextMenu(                    any(), eq(view), any());        });    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[        assertFalse(view.dispatchGenericMotionEvent(event3));        event3.recycle();    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[rent.hasShowContextMenuForChild());        verify(listener, times(1)).onLongClick(view);    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[False(parent.hasShowContextMenuForChildXY());        verify(listener).onLongClick(view);    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[        assertTrue(view.performLongClick());        assertTrue(view.isLongClickable());    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[rue(view.performContextClick());        verify(listener, times(1)).onContextClick(view);    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[   assertTrue(view.performContextClick());        assertTrue(view.isContextClickable());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[istener.fired()); // checks that both up and down were received        listener.reset();    }   ])', 1), ('([3:/android/view/cts/ViewTest.java]:[ANY]:[3]:method_text:[getValue().getKeyCode());        assertFalse(view.hasCalledOnKeyUp());    }    @UiThreadTest   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[ventTime(), 20 /*delta*/);        }        event1.recycle();        event2.recycle();    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[   assertEquals(new Rect(9, 8, 11, 11), grandParent.getLastRequestedChildRectOnScreen());    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[rify(touchListener, times(1)).onTouch(view, obscuredTouch);        reset(touchListener);    }   ])', 1), ('([2:/android/view/cts/ViewTest.java]:[ANY]:[2]:method_text:[).when(shadowBuilder).onProvideShadowMetrics(any(), any());        return shadowBuilder;    }   ])', 1), ('([1:/android/view/cts/ViewTest.java]:[ANY]:[1]:method_text:[uInflater getMenuInflater() {                    return null;                }            };   ])', 1)]"	""	""	"[('ANY', 135)]"	"[('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testPerformItemClick None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnGroupClickListener None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnChildClickListener None]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testDevSettingOverride None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest testMode None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateECKeyPairUsingStrongBox None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsSession None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest testRequestAndReleaseWorkOnAnyView None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDevicePolicyApn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testListen None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetImeiForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetRadioPowerState None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetCarrierDataEnabled None]', 1), ('[android.telephony.cts.TelephonyManagerTest testRebootRadio None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetAidForAppType None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetIsimDomain None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoRegisteredPlmn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoIsRoaming None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoGetRoamingType None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testPreferredOpportunisticDataSubscription None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackFinishToPreviousApp None]', 1), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.server.wm.ActivityManagerGetConfigTests isLowRamDevice None]', 1), ('[android.security.cts.STKFrameworkTest testInterceptedSIMCommandsToTelephony None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_manualRequest None]', 1), ('[android.server.wm.MinimalPostProcessingTests isMinimalPostProcessingSupported None]', 1), ('[android.accessibilityservice.cts.GestureDescriptionTest testAddStroke_allowUpToMaxPaths None]', 1), ('[android.content.cts.ClipDescriptionTest testIsStyledText None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_acquireLease None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testStorageAttribution_withExpiredLease None]', 1), ('[android.view.cts.ActionModeTest testInvalidateContentRectOnFloatingCallsCallback None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite None]', 1), ('[android.security.cts.TestMedi testPocCVE_2018_9527 None]', 1), ('[android.graphics.cts.EmbossMaskFilterTest testEmbossMaskFilter None]', 1), ('[android.media.cts.AudioTrackTest testPlayStreamData None]', 1), ('[android.media.cts.AudioTrackTest testAudioTrackBufferSize None]', 1), ('[android.media.cts.AudioTrackTest testMaxAudioTracks None]', 1), ('[android.media.cts.AudioTrackTest testTunerConfiguration None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_whenServiceDidntDoAnything None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_oneDatasetSelected_Changed_thenChangedBack None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_noDatasetSelected_butManuallyEntered None]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithData None]', 1), ('[android.util.proto.cts.ProtoOutputStreamObjectTest testTooManyEndObjectsWithoutData None]', 1), ('[android.fragment.cts.FragmentTransactionTest isEmpty None]', 1), ('[android.database.cts.MatrixCursor_RowBuilderTest testAdd None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testGetActiveDataSubscriptionId None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest registerServiceWrappers None]', 1), ('[android.server.wm.WindowContextPolicyTests testCreateTooManyWindowContextWithoutViewThrowException None]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties None]', 1), ('[android.accessibilityservice.cts.AccessibilityWindowReportingTest testGetAnchorForDropDownForAutoCompleteTextView_returnsTextViewNode None]', 1), ('[android.carrierapi.cts.BugreportManagerTest TestName None]', 1), ('[android.carrierapi.cts.BugreportManagerTest hasEarlyReportFinished None]', 1), ('[android.provider.cts.contacts.ContactsContract_CommonDataKinds_PhoneTest testGetTypeLabel None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testInvalidateDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testScheduleDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testUnscheduleDrawable None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testDraw None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testGetPadding None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetVisible None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetAlpha None]', 1), ('[android.graphics.drawable.cts.DrawableWrapperTest testSetColorFilter None]', 1), ('[android.print.cts.PrintAttributesTest isEmpty None]', 1), ('[android.telephony.cts.NetworkRegistrationInfoTest testGetEmergencyServices None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.telephony.cts.BatteryStatsManagerTest testGetCellularBatteryStats None]', 1), ('[android.fragment.cts.FragmentLifecycleTest isAdded None]', 1), ('[android.fragment.cts.FragmentLifecycleTest fragmentDestroyedOnFinish None]', 1), ('[android.keystore.cts.RSASignatureTest testSmallKeyRejected None]', 1), ('[android.view.cts.ViewTest testAccessTouchDelegate None]', 1), ('[android.view.cts.ViewTest testCreateContextMenu None]', 1), ('[android.view.cts.ViewTest testSetOnGenericMotionListener None]', 1), ('[android.view.cts.ViewTest testPerformLongClick None]', 1), ('[android.view.cts.ViewTest testPerformLongClickXY_WithListener None]', 1), ('[android.view.cts.ViewTest testSetOnLongClickListener None]', 1), ('[android.view.cts.ViewTest testPerformContextClick None]', 1), ('[android.view.cts.ViewTest testSetOnContextClickListener None]', 1), ('[android.view.cts.ViewTest testUnhandledKeys None]', 1), ('[android.view.cts.ViewTest testDispatchKeyEvent None]', 1), ('[android.view.cts.ViewTest testDispatchTouchEvent None]', 1), ('[android.view.cts.ViewTest testRequestRectangleOnScreen5 None]', 1), ('[android.view.cts.ViewTest testFilterTouchesWhenObscured None]', 1), ('[android.view.cts.ViewTest testOverlappingRendering None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_detachedView None]', 1), ('[android.view.cts.ViewTest testUpdateDragShadow_noActiveDrag None]', 1)]"
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-0-2"	"7.3.10/C-0-2"	"07031000.670002"	"""C-0-2] of section 9.11."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"17:166031) 2.2.7.1  . Media"	"2.2.7.1"	""	"2.2.7.1"	"02020701.48"	"""data-text=""2.2.7.1. Media"">2.2.7.1. Media If Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. [5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p resolution@30 fps. [5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC or HEVC) in any codec combination running concurrently at 720p@30 fps resolution. [5.1/H-1-7] MUST have a codec initialization latency of 65 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. [5.1/H-1-8] MUST have a codec initialization latency of 50 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load.Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. [5.3/H-1-1] MUST NOT drop more than 1 frame in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. [5.3/H-1-2] MUST NOT drop more than 1 frame in 10 seconds during a video resolution change in a 30 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128Kbps AAC audio playback. [5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [5.1/H-1-1] MUST advertise the maximum number of hardware video decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-2] MUST support 6 instances of hardware video decoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30 fps. *Only 2 instances are required if VP9 codec is present. [5.1/H-1-3] MUST advertise the maximum number of hardware video encoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-4] MUST support 6 instances of hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p resolution@30fps. *Only 2 instances are required if VP9 codec is present. [5.1/H-1-5] MUST advertise the maximum number of hardware video encoder and decoder sessions that can be run concurrently in any codec combination via the CodecCapabilities.getMaxSupportedInstances() and VideoCapabilities.getSupportedPerformancePoints() methods. [5.1/H-1-6] MUST support 6 instances of hardware video decoder and hardware video encoder sessions (AVC, HEVC, VP9* or later) in any codec combination running concurrently at 720p@30fps resolution. *Only 2 instances are required if VP9 codec is present. [5.1/H-1-7] MUST have a codec initialization latency of 50 ms or less for a 1080p or smaller video encoding session for all hardware video encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. [5.1/H-1-8] MUST have a codec initialization latency of 40 ms or less for a 128 kbps or lower bitrate audio encoding session for all audio encoders when under load. Load here is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs together with the 1080p audio-video recording initialization. [5.3/H-1-1] MUST NOT drop more than 2 frames in 10 seconds (i.e less than 0.333 percent frame drop) for a 1080p 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. [5.3/H-1-2] MUST NOT drop more than 2 frames in 10 seconds during a video resolution change in a 60 fps video session under load. Load is defined as a concurrent 1080p to 720p video-only transcoding session using hardware video codecs, as well as a 128 kbps AAC audio playback. [5.6/H-1-1] MUST have a tap-to-tone latency of less than 100 milliseconds using the OboeTester tap-to-tone test or CTS Verifier tap-to-tone test. <h4 id=""2272_camera"" """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA android.os.Build.VERSION load.Load VideoCapabilities.getSupportedPerformancePoints MEDIA_PERFORMANCE_CLASS HEVC VP9 getSupportedPerformancePoints() AVC AAC CTS CodecCapabilities.getMaxSupportedInstances getMaxSupportedInstances()"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java', 13), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/BlobStore/src/com/android/cts/blob/BlobStoreManagerTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 6), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContentProviderOperationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/http/cts/ApacheHttpClientTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/networksecurityconfig/networksecurityconfig-downloadmanager/src/android/security/net/config/cts/DownloadManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/STKFrameworkTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AliasActivityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/PermissionInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ToneGeneratorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/GestureDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/CreateItemsRequestTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipDescriptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/CompilerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/apps/statsdapp/src/com/android/server/cts/device/statsdatom/DirectoryTests.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/health/cts/HealthStatsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSForEachTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/sensor/sensorratepermission/EventConnectionAPI30/src/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/manifest_enabled_sdk_29/src/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ScriptTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/Color_ColorLongTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/multiuser/src/android/multiuser/cts/SplitSystemUserTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/src/android/permission/cts/ConnectivityManagerPermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContextThemeWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/PrecompiledLayoutTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/DecodeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/assist/src/android/assist/cts/FocusChangeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ShapeTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/ValueAnimatorTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteWalTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/FlagSecureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/InputDeviceEnabledTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_DefaultFocusHighlightTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/EcKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/LeadingMarginSpan_StandardTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicConvolve5x5.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/IntrinsicLut.java', 1), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/BatchUpdatesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestAcos.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(1,AAC,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(1,CTS,/android/security/cts/STKFrameworkTest.java)', 1), ('(2,CTS,/android/adb/cts/AdbHostTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,CTS,/android/app/cts/AliasActivityTest.java)', 1), ('(6,CTS,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(36,CTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,CTS,/android/content/pm/cts/PermissionInfoTest.java)', 1), ('(1,CTS,/android/media/cts/ToneGeneratorTest.java)', 1), ('(2,CTS,/android/accessibilityservice/cts/GestureDescriptionTest.java)', 1), ('(1,CTS,/android/security/identity/cts/CreateItemsRequestTest.java)', 1), ('(3,CTS,/android/content/cts/ContentProviderOperationTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java)', 1), ('(3,CTS,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(5,CTS,/android/content/cts/ClipDescriptionTest.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java)', 1), ('(1,CTS,/com/android/cts/deviceowner/AffiliationTest.java)', 1), ('(17,CTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,CTS,/android/print/cts/CustomPrintOptionsTest.java)', 1), ('(4,CTS,/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(8,CTS,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(3,CTS,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(1,CTS,/android/media/cts/MediaController2Test.java)', 1), ('(1,CTS,/android/renderscript/cts/CompilerTest.java)', 1), ('(1,CTS,/com/android/server/cts/device/statsdatom/DirectoryTests.java)', 1), ('(1,CTS,/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java)', 1), ('(1,CTS,/android/media/cts/AudioMetadataTest.java)', 1), ('(1,CTS,/android/os/health/cts/HealthStatsTest.java)', 1), ('(1,CTS,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,CTS,/android/cts/rscpp/RSForEachTest.java)', 1), ('(6,CTS,/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java)', 1), ('(2,CTS,/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java)', 1), ('(2,CTS,/android/renderscript/cts/ScriptTest.java)', 1), ('(1,CTS,/android/ndef/cts/NdefTest.java)', 1), ('(1,CTS,/android/graphics/cts/Color_ColorLongTest.java)', 1), ('(5,CTS,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,CTS,/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java)', 1), ('(1,CTS,/android/multiuser/cts/SplitSystemUserTest.java)', 1), ('(1,CTS,/android/permission/cts/ConnectivityManagerPermissionTest.java)', 1), ('(24,CTS,/com/android/cts/blob/BlobStoreManagerTest.java)', 1), ('(164,CTS,/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java)', 1), ('(1,CTS,/android/view/cts/ContextThemeWrapperTest.java)', 1), ('(6,CTS,/android/net/http/cts/ApacheHttpClientTest.java)', 1), ('(2,CTS,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(2,CTS,/android/view/cts/PrecompiledLayoutTest.java)', 1), ('(1,AAC,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(3,CTS,/android/security/net/config/cts/DownloadManagerTest.java)', 1), ('(1,CTS,/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java)', 1), ('(2,CTS,/android/security/cts/DecodeTest.java)', 1), ('(1,CTS,/android/assist/cts/FocusChangeTest.java)', 1), ('(5,CTS,/android/uirendering/cts/testclasses/ShapeTests.java)', 1), ('(4,CTS,/android/view/cts/ActionModeTest.java)', 1), ('(2,CTS,/android/animation/cts/ValueAnimatorTest.java)', 1), ('(1,CTS,/android/content/res/cts/ConfigurationTest.java)', 1), ('(1,CTS,/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteWalTest.java)', 1), ('(19,CTS,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(1,CTS,/android/assist/cts/FlagSecureTest.java)', 1), ('(1,CTS,/android/view/cts/InputDeviceEnabledTest.java)', 1), ('(1,HEVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,VP9,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(6,AVC,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(1,CTS,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(3,CTS,/android/view/cts/View_DefaultFocusHighlightTest.java)', 1), ('(1,CTS,/android/keystore/cts/EcKeyGenPerformanceTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(4,CTS,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 1), ('(1,CTS,/android/text/style/cts/LeadingMarginSpan_StandardTest.java)', 1), ('(1,CTS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(9,CTS,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicConvolve5x5.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java)', 1), ('(1,CTS,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(1,CTS,/android/renderscript/cts/IntrinsicLut.java)', 1), ('(1,CTS,/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(7,CTS,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/BatchUpdatesTest.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestAcos.java)', 1), ('(2,HEVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(3,VP9,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(2,AVC,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(3,CTS,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[1]:method_text:[ctSuccess */);            }        } finally {            blobData.delete();        }    }   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[AAC]:[1]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([1:/android/security/cts/STKFrameworkTest.java]:[CTS]:[1]:method_text:[ been sent from SIM card to Telephony using     * zero-permission malicious application     */   ])', 1), ('([2:/android/adb/cts/AdbHostTest.java]:[CTS]:[2]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([3:/android/appsecurity/cts/LocationPolicyTest.java]:[CTS]:[3]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/app/cts/AliasActivityTest.java]:[CTS]:[1]:method_text:[ctivityTest extends InstrumentationTestCase {    private static final long SLEEP_TIME = 1000;   ])', 1), ('([6:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[CTS]:[6]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([32:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[32]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[ugmentedHelper.resetAugmentedService();        augmentedService.waitUntilDisconnected();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[CTS]:[1]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestNativeCospi.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/content/pm/cts/PermissionInfoTest.java]:[CTS]:[1]:method_text:[e internet, so this permission is not required to send data to ""            + ""the internet."";   ])', 1), ('([1:/android/media/cts/ToneGeneratorTest.java]:[CTS]:[1]:method_text:[ ""TODO: evaluate and port to instant"")public class ToneGeneratorTest extends AndroidTestCase {   ])', 1), ('([2:/android/accessibilityservice/cts/GestureDescriptionTest.java]:[CTS]:[2]:method_text:[ath = new Path();        mNominalPath.moveTo(0, 0);        mNominalPath.lineTo(10, 10);    }   ])', 1), ('([1:/android/security/identity/cts/CreateItemsRequestTest.java]:[CTS]:[1]:method_text:[t java.util.Map;import co.nstant.in.cbor.CborException;public class CreateItemsRequestTest {   ])', 1), ('([2:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[2]:method_text:[   public void setUp() throws Exception {        provider = mock(ContentProvider.class);    }   ])', 1), ('([1:/android/content/cts/ContentProviderOperationTest.java]:[CTS]:[1]:method_text:[ty check            return Objects.equals(bundle.toString(), other.toString());        });    }}])', 1), ('([1:/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java]:[CTS]:[1]:method_text:[Check for validity.     * 3. Sleep.     * 4. Do it 10 times and compare with old ones.     */   ])', 1), ('([2:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[2]:method_text:[ng RINGER_TITLE = ""CTS ringer title"";    private static final int MAX_NUMBER_OF_ATTEMPTS = 10;   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[CTS]:[1]:method_text:[ATION, uri);    }    /** Resets and cleans up to a valid state. This method must not fail. */   ])', 1), ('([5:/android/content/cts/ClipDescriptionTest.java]:[CTS]:[5]:method_text:[        mUiDevice.wakeUp();        launchActivity(MockActivity.class);    }    @UiThreadTest   ])', 1), ('([1:/com/android/cts/appsearch/app/AppSearchManagerCtsTest.java]:[CTS]:[1]:method_text:[.app.appsearch.AppSearchManager;import org.junit.Test;public class AppSearchManagerCtsTest {   ])', 1), ('([1:/com/android/cts/deviceowner/AffiliationTest.java]:[CTS]:[1]:method_text:[_POLICY_SERVICE);        mAdminComponent = BasicAdminReceiver.getComponentName(context);    }   ])', 1), ('([17:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[CTS]:[17]:method_text:[pdown when     * authentication done and then back to original Activity.     */    @Presubmit   ])', 1), ('([1:/android/print/cts/CustomPrintOptionsTest.java]:[CTS]:[1]:method_text:[Helper.cancelPrinting();        waitForPrinterDiscoverySessionDestroyCallbackCalled(1);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_CommonDataKinds_StructuredPostalTest.java]:[CTS]:[4]:method_text:[) throws Exception {        super.setUp();        mResources = mContext.getResources();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([7:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[7]:method_text:[();    }    /**     * Test GPS measurements registration with full tracking enabled.     */   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[CTS]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[CTS]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[CTS]:[1]:method_text:[(mSession != null) {            mSession.close();            mSession = null;        }    }   ])', 1), (""([1:/android/renderscript/cts/CompilerTest.java]:[CTS]:[1]:method_text:[ins symbols that can't be resolved at runtime,     * which should trigger an exception.     */   ])"", 1), ('([1:/com/android/server/cts/device/statsdatom/DirectoryTests.java]:[CTS]:[1]:method_text:[t.Assert.assertFalse;import static org.junit.Assert.assertTrue;public class DirectoryTests {   ])', 1), ('([1:/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java]:[CTS]:[1]:method_text:[geManager().hasSystemFeature(                PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([1:/android/media/cts/AudioMetadataTest.java]:[CTS]:[1]:method_text:[a.BaseMap>        KEY_BASE_MAP = AudioMetadata.createKey(""data"", AudioMetadata.BaseMap.class);   ])', 1), ('([1:/android/os/health/cts/HealthStatsTest.java]:[CTS]:[1]:method_text:["").longValue());    }    /**     * Tests parceling empty HealthStats.     */    @SmallTest   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[CTS]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/android/cts/rscpp/RSForEachTest.java]:[CTS]:[1]:method_text:[        System.loadLibrary(""rscpptest_jni"");    }    native boolean testForEach(String path);   ])', 1), ('([6:/android/sensorratepermission/cts/eventconnectionapi30/EventConnectionAPI30Test.java]:[CTS]:[6]:method_text:[ConnectionTestHelper.flipAndAssertMicToggleOff(mUserID, mSensorPrivacyManager);        }    }   ])', 1), ('([2:/android/cts/tagging/sdk29/manifest_enabled/TaggingTest.java]:[CTS]:[2]:method_text:[ org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)@SmallTestpublic class TaggingTest {   ])', 1), ('([2:/android/renderscript/cts/ScriptTest.java]:[CTS]:[2]:method_text:[mport android.renderscript.cts.ScriptC_negate;public class ScriptTest extends RSBaseCompute {   ])', 1), ('([1:/android/ndef/cts/NdefTest.java]:[CTS]:[1]:method_text:[ ASCII = Charset.forName(""US-ASCII"");    static final Charset UTF8 = Charset.forName(""UTF-8"");   ])', 1), ('([1:/android/graphics/cts/Color_ColorLongTest.java]:[CTS]:[1]:method_text:[nit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class Color_ColorLongTest {   ])', 1), ('([5:/android/view/inspector/cts/WindowInspectorTest.java]:[CTS]:[5]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/contentcaptureservice/cts/unit/ContentCaptureContextTest.java]:[CTS]:[1]:method_text:[);    @Before    public void setExtras() {        mExtras.putString(""DUDE"", ""SWEET"");    }   ])', 1), ('([1:/android/multiuser/cts/SplitSystemUserTest.java]:[CTS]:[1]:method_text:[st.InstrumentationTestCase;public class SplitSystemUserTest extends InstrumentationTestCase {   ])', 1), ('([1:/android/permission/cts/ConnectivityManagerPermissionTest.java]:[CTS]:[1]:method_text:[ <p>Tests Permission:     *   {@link android.Manifest.permission#ACCESS_NETWORK_STATE}.     */   ])', 1), ('([4:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[4]:method_text:[CE_SEC = 2;    private static final long TIMEOUT_WAIT_FOR_IDLE_MS = 2_000;    // TODO: Make it a])', 1), ('([3:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[3]:method_text:[  runShellCmd(""cmd blob_store clear-all-blobs"");        mContext.getFilesDir().delete();    }   ])', 1), ('([2:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[2]:method_text:[* expectSuccess */);        }, Pair.create(KEY_MAX_COMMITTED_BLOBS, String.valueOf(1)));    }   ])', 1), ('([5:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[5]:method_text:[ 1111L, ""tag2"");            assertThat(blobHandle1).isNotEqualTo(blobHandle2);        }    }   ])', 1), ('([8:/com/android/cts/blob/BlobStoreManagerTest.java]:[CTS]:[8]:method_text:[) {            mCommandReceiver = null;            mContext.unbindService(this);        }    }}])', 1), (""([100:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[100]:method_text:[     * no contacts if there are no starred or frequent contacts in the user's contacts.     */   ])"", 1), (""([7:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[7]:method_text:[s in the correct order if there are only starred contacts in the user's     * contacts.     */   ])"", 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[CONTENT_STREQUENT_URI, ids,                false, sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[oredValuesWithContactsFilter(Contacts.CONTENT_STREQUENT_URI, ids,                false);    }   ])', 1), ('([6:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[6]:method_text:[NT_FILTER_URI}     * correctly filters the returned contacts with the given user input.     */   ])', 1), ('([3:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[3]:method_text:[ithContactsFilter(uri, ids, false,                sContentValues[1], sContentValues[0]);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[ld(),                STREQUENT_PROJECTION,                new long[]{ids[0]}        );    }   ])', 1), ('([5:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[5]:method_text:[ntactsFilter(uri, mDataIds, false,                sContentValues[0], sContentValues[2]);    }   ])', 1), ('([4:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[4]:method_text:[ ranking order.        assertCursorStoredValuesWithContactsFilter(uri, mDataIds, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[      STREQUENT_PHONE_ONLY_PROJECTION,                new long[]{mDataIds[0]}        );    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[   assertCursorStoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids, false);    }   ])', 1), ('([2:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[2]:method_text:[StoredValuesWithContactsFilter(Contacts.CONTENT_FREQUENT_URI, ids,                true);    }   ])', 1), ('([26:/android/provider/cts/contacts/ContactsContract_FrequentsStrequentsTest.java]:[CTS]:[26]:method_text:[).load();        return new long[] {contact.getId(), contact2.getId(), contact3.getId()};    }}])', 1), ('([1:/android/view/cts/ContextThemeWrapperTest.java]:[CTS]:[1]:method_text:[    public void setup() {        mContext = InstrumentationRegistry.getTargetContext();    }   ])', 1), ('([5:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[5]:method_text:[id tearDown() throws Exception {        super.tearDown();        mWebServer.shutdown();    }   ])', 1), ('([1:/android/net/http/cts/ApacheHttpClientTest.java]:[CTS]:[1]:method_text:[ytesRead;            }        }        assertEquals(message, expectedNumBytes, numBytes);    }}])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[CTS]:[2]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([2:/android/view/cts/PrecompiledLayoutTest.java]:[CTS]:[2]:method_text:[ make sure that we get equivalent layouts when    // inflated with and without precompilation.   ])', 1), ('([1:/android/security/net/config/cts/DownloadManagerTest.java]:[AAC]:[1]:method_text:[r(R.raw.valid_chain, R.raw.test_key);        runDownloadManagerTest(serverSocket, true);    }   ])', 1), ('([3:/android/security/net/config/cts/DownloadManagerTest.java]:[CTS]:[3]:method_text:[ength: 5\\r\\n\\r\\nhello"";    private static final long TIMEOUT = 3 * DateUtils.SECOND_IN_MILLIS;   ])', 1), ('([1:/android/server/wm/lifecycle/ActivityLifecycleLegacySplitScreenTests.java]:[CTS]:[1]:method_text:[ Exception {        super.setUp();        assumeTrue(supportsSplitScreenMultiWindow());    }   ])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[CTS]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1), ('([2:/android/security/cts/DecodeTest.java]:[CTS]:[2]:method_text:[. Instead, it should fail to     * decode.     */    @SecurityTest(minPatchLevel = ""2017-07"")   ])', 1), ('([1:/android/assist/cts/FocusChangeTest.java]:[CTS]:[1]:method_text:[espite the Assistant Firing""                    + Utils.TIMEOUT_MS + ""msec."");        }    }   ])', 1), ('([5:/android/uirendering/cts/testclasses/ShapeTests.java]:[CTS]:[5]:method_text:[h;@MediumTest@RunWith(AndroidJUnit4.class)public class ShapeTests extends ActivityTestBase {   ])', 1), ('([4:/android/view/cts/ActionModeTest.java]:[CTS]:[4]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[CTS]:[2]:method_text:[tatic void afterClass() {        ValueAnimator.setDurationScale(sPreviousAnimatorScale);    }   ])', 1), ('([1:/android/content/res/cts/ConfigurationTest.java]:[CTS]:[1]:method_text:[ation.NAVIGATION_NONAV;        mConfig.orientation = Configuration.ORIENTATION_PORTRAIT;    }   ])', 1), ('([1:/android/view/animation/cts/LayoutAnimationController_AnimationParametersTest.java]:[CTS]:[1]:method_text:[t@RunWith(AndroidJUnit4.class)public class LayoutAnimationController_AnimationParametersTest {   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteWalTest.java]:[CTS]:[1]:method_text:[AL file size is bigger than the threshold, and make sure     * the file gets truncated.     */   ])', 1), ('([19:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[CTS]:[19]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/android/assist/cts/FlagSecureTest.java]:[CTS]:[1]:method_text:[rotected void customSetup() throws Exception {        startTestActivity(TEST_CASE_TYPE);    }   ])', 1), ('([1:/android/view/cts/InputDeviceEnabledTest.java]:[CTS]:[1]:method_text:[rgetContext().getSystemService(InputManager.class);        assertNotNull(mInputManager);    }   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[HEVC]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[ mime,            String testFile, String muxFile, int bitrate, int framerate);    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VP9]:[1]:method_text:[Mime, mInpPrefix + mTestFile,                    tmpPath, mBitrate, mFrameRate));        }    }}])', 1), ('([6:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[AVC]:[6]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[CTS]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/view/cts/View_DefaultFocusHighlightTest.java]:[CTS]:[3]:method_text:[=            new ActivityTestRule<>(DefaultFocusHighlightCtsActivity.class);    @UiThreadTest   ])', 1), ('([1:/android/keystore/cts/EcKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[nceTest extends PerformanceTestBase {    final int[] SUPPORTED_CURVES = {224, 256, 384, 521};   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[CTS]:[4]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 1), ('([1:/android/text/style/cts/LeadingMarginSpan_StandardTest.java]:[CTS]:[1]:method_text:[RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class LeadingMarginSpan_StandardTest {   ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationImeTests.java]:[CTS]:[1]:method_text:[ss, WINDOWING_MODE_FULLSCREEN);        mRootView = mActivity.getWindow().getDecorView();    }   ])', 1), ('([9:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[CTS]:[9]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicConvolve5x5.java]:[CTS]:[1]:method_text:[, si, e, cf3, ""test convolve"", 3, w, h, sc);        si.destroy();        sr.destroy();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ClearProfileOwnerNegativeTest.java]:[CTS]:[1]:method_text:[clear profile owner"", e.getMessage());            }        }        super.tearDown();    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[CTS]:[1]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/renderscript/cts/IntrinsicLut.java]:[CTS]:[1]:method_text:[.set_green(mGreen);        mScript.set_blue(mBlue);        mScript.set_alpha(mAlpha);    }   ])', 1), ('([1:/com/android/cts/appsearch/app/BatchResultCallbackCtsTest.java]:[CTS]:[1]:method_text:[able;import org.junit.Test;import java.util.Set;public class BatchResultCallbackCtsTest {   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([7:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[CTS]:[7]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/autofillservice/cts/unittests/BatchUpdatesTest.java]:[CTS]:[1]:method_text:[tchUpdatesTest {    private final BatchUpdates.Builder mBuilder = new BatchUpdates.Builder();   ])', 1), ('([2:/android/renderscript/cts/generated/TestAcos.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HEVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([2:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[2]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[VP9]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[AVC]:[1]:method_text:[rames"", 0 == mBadFrames);            if (mMuxOutput) new File(tmpPath).delete();        }    }}])', 1), ('([3:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[CTS]:[3]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1)]"	""	""	"[('CTS', 208), ('VERSION_CODES', 6), ('VP9', 5), ('HEVC', 3), ('AVC', 3), ('AAC', 2)]"	"[('[android.mediav2.cts.CodecEncoderSurfaceTest isCodecNameValid None]', 4), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 4), ('[android.mediav2.cts.EncodeDecodeAccuracyTest testEncodeDecodeAccuracyRGB None]', 3), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 2), ('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.SoundPoolTest exists None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.server.wm.AssistantStackTests AssistantSession None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testServiceLifecycle None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.content.cts.ContentProviderOperationTest testLayering None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testChangeDefaultUris None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest InlineAuthenticationTest None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled None]', 1), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incompleteData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testSessionCommit_incorrectData None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testCommitSession_countLimitExceeded None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleEquality None]', 1), ('[com.android.cts.blob.BlobStoreManagerTest testBlobHandleCreation None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_noStarredOrFrequents None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_frequentsOnlyInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_starredAndFrequentsInCorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_withFilter None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnlyFrequentsOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testStrequents_phoneOnly_projection None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_noFrequentsReturnsEmptyCursor None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequents_CorrectOrder None]', 1), ('[android.provider.cts.contacts.ContactsContract_FrequentsStrequentsTest testFrequent_projection None]', 1), ('[android.net.http.cts.ApacheHttpClientTest testExecute None]', 1), ('[android.security.net.config.cts.DownloadManagerTest testConfigTrustedCaAccepted None]', 1), ('[android.database.sqlite.cts.SQLiteWalTest exists None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurface None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest testSimpleEncodeFromSurfaceNative None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.renderscript.cts.IntrinsicConvolve5x5 finish None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.renderscript.cts.IntrinsicLut createTest None]', 1)]"
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-3"	"3.18/C-0-3"	"03180000.670003"	"""C-0-3] MUST NOT extend either the .apk, Android Manifest, Dalvik bytecode, or RenderScript bytecode formats in such a way that would prevent those files from installing and running correctly on other compatible devices. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-8"	"9.9.3/C-1-8"	"09090300.670108"	"""C-1-8] CE keys MUST be bound to a user&#39;s lock screen credentials."""	""	""	""	""	""	""	""	*	""	""	""	""	""	""	""	""	""	""	""	""	""
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-9"	"3.18/C-0-9"	"03180000.670009"	"""C-0-9] MUST support verifying .apk files using the APK Signature Scheme v4. If device implementations are already launched on an earlier Android version and cannot meet the requirements && C-0-9] MUST support verifying .apk files using the APK Signature Scheme v4. If device implementations are already launched on an earlier Android version and cannot meet the requirements | C-0-9] through a system software update, they MAY be exempted from these requirements. <h2 id=""5_multimedia_compatibility"" """	""	""	"APK"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 35), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 24), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 17), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/DecelerateInterpolatorTest.java', 1)]"	"[('(8,APK,/android/net/cts/TrafficStatsTest.java)', 1), ('(3,APK,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(8,APK,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(15,APK,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,APK,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(2,APK,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(59,APK,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,APK,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(3,APK,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(1,APK,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(3,APK,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(3,APK,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(45,APK,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(15,APK,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(3,APK,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(4,APK,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(3,APK,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(2,APK,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(134,APK,/com/android/cts/rollback/host/app/HostTestHelper.java)', 1), ('(1,APK,/android/view/animation/cts/DecelerateInterpolatorTest.java)', 1), ('(108,APK,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1)]"	"[('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass1;->method1(,LClass1;->field1:"");    }   ])', 5), ('([2:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[2]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass2;->method2(,LClass2;->field2:"");    }   ])', 5), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 3), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[sion.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenSession_shouldThrow"", args);    }   ])', 2), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[.getSetting(""global"", SETTING_SIGNED_CONFIG_VERSION))                .isEqualTo(""null"");    }   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[acks of staged installs involving only apks.     * Confirms TestApp.A2 was rolled back.     */   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[pks.     * Commits TestApp.A2 and TestApp.B2 as a staged install with rollback enabled.     */   ])', 2), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[onId());        assertThat(InstallUtils.getInstalledVersion(TestApp.Apex)).isEqualTo(2);    }   ])', 2), ('([8:/android/net/cts/TrafficStatsTest.java]:[APK]:[8]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([3:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[APK]:[3]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[he blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[s the blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }}])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[1]:method_text:[P_PKG, ""test.instant.cookie.CookieTest"",                ""testCookieUpdateAndRetrieval"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[instant.cookie.CookieTest"",                ""testCookiePersistedAcrossInstantInstalls2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[st.instant.cookie.CookieTest"",                ""testCookiePersistedUpgradeFromInstant2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[est.instant.cookie.CookieTest"",                ""testCookieResetOnNonInstantReinstall2"");    }   ])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[APK]:[2]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[APK]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([22:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[22]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK 2 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK B and make it the default SMS app and make sure the service gets bound.     */   ])', 1), (""([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[, mCurrentUserId);    }    /**     * APK 3 doesn't have a valid service to be bound.     */   ])"", 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[_CLIENT_SERVICE"");    }    /**     * APK 4 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[ ""More than one"");    }    /**     * APK 5 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[SERVICE not found"");    }    /**     * APK 6\'s service doesn\'t have android:process.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[     * Make sure when the SMS app gets updated, the service still gets bound correctly.     */   ])', 1), ('([5:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[5]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[entUserId);    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[  }    /**     * Make sure when the SMS app is uninstalled, the binding will be gone.     */   ])', 1), ('([4:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[4]:method_text:[  /**     * Make sure when the SMS app changes, the service still gets bound correctly.     */   ])', 1), ('([3:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[3]:method_text:[s"",                    ""^finder,\\\\[Default\\\\sSMS\\\\sapp\\\\],"" + userId + "","");        });    }   ])', 1), ('([7:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[7]:method_text:[      }        assertUserHasNoConnection(userId);        assertUserHasNoFinder(userId);    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[dis=3,\\\\#died=2,backoff=5000"");        });    }    /**     * Test the feature flag.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[UT_SEC, () -> {            checkBound(PACKAGE_A, SERVICE_1, mCurrentUserId);        });    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[_A, SERVICE_1, mCurrentUserId);        assertOomAdjustment(PACKAGE_A, PACKAGE_A_PROC, 200);    }}])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[2]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[1]:method_text:[            getDevice(), TEST_PKG, "".LocationPolicyTest"", ""testLocationPolicyPermissions"");    }}])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[APK]:[1]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[APK]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);            }        }        throw new TimeoutException();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[APK]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[groundWhitelist(oldUid, false);        assertRestrictBackgroundWhitelist(newUid, false);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[nstallPackage(TEST_APP2_APK);        assertPowerSaveModeWhitelist(TEST_APP2_PKG, false);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[APK]:[1]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([26:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[26]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[).getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[ce().getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }}])', 1), ('([11:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[11]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[).installPackage(                mBuildHelper.getTestFile(SHIM_UPDATE_FAIL_APK), true));    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ties"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[bled"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ion {        Utils.runDeviceTests(getDevice(), packageName, testClassName, testMethodName);    }}])', 1), ('([2:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[2]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[1]:method_text:[;        runDeviceTestAsUserInPkgB(""testGlobalGetDocuments_nonexist"", mSecondaryUserId);    }   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[s the output of ""dumpsys storaged --force --hours 0.01"".     *     * @throws Exception     */   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([3:/android/permission/cts/OneTimePermissionTest.java]:[APK]:[3]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([2:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[APK]:[2]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([5:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[5]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[nvolving only apks.     * Commits TestApp.A2 as a staged install with rollback enabled.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Confirms a staged rollback is available for TestApp.A2 and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ rollbacks are available for TestApp.A2 and TestApp.b2, and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[installs involving only apks.     * Confirms TestApp.A2 and TestApp.B2 was rolled back.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[Confirms staged rollbacks are available for TestApp.A2, and commits the     * rollback.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[     * <p> We start by installing version 2. The test ultimately rolls back from 3 to 2.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[  * Test rollbacks of staged installs involving only apex.     * Commit rollback phase.     */   ])', 1), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[ * Test rollbacks of staged installs involving only apex.     * Confirm rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[rsion();        Install.single(TestApp.Apex2).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[rollbacks of staged installs involving apex and apk.     * Install first version phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Enable rollback phase.     */   ])', 1), ('([4:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[4]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Commit rollback phase.     */   ])', 1), ('([17:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[17]:method_text:[Test rollbacks of staged installs involving apex and apk.     * Confirm rollback phase.     */   ])', 1), ('([10:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[10]:method_text:[that apex update expires existing rollbacks for that apex.     * Enable rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[      Install.single(Apex2SignedBobRotRollback).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[le(TestApp.A1).commit();        Install.single(TestApp.A2).setEnableRollback().commit();    }   ])', 1), ('([24:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[24]:method_text:[tation().getContext();        return new File(context.getFilesDir(), APK_VERSION_FILENAME);    }}])', 1), ('([1:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[APK]:[1]:method_text:[a8);        // check whether it starts even faster        assertTrue(delta5 > delta1);    }   ])', 1), ('([49:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[49]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[ remaining delegations.            setDelegatedScopes(DELEGATE_APP_PKG, null);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                .setBoolean(true)                .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[      executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");    }    @RequiresDevice   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[          .setBoolean(true)                    .setInt(0)                    .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[;        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStatePreMApp"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ist(mUserId, false /* disabled */);            clearVoiceInteractionService();        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[S_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                    .build());        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ANAGEMENT_APK, mUserId);        executeDeviceTestClass("".AllowedAccountManagementTest"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNTS, false, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[UNTS, false, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[aller app is called directly rather than via intents from    // the DelegatedCertinstallerTest.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[    // inside. But these restrictions must have no effect on the device/profile owner behavior.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[;        } finally {            setDefaultContentCaptureServiceEnabled(true);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[abled(true);            executeDeviceTestClass("".MeteredDataRestrictionTest"");        }    }   ])', 1), ('([11:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[11]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[{            getDevice().uninstallPackage(INTENT_RECEIVER_PKG);        }    }    @LargeTest   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[that the app launches        executeSuspendPackageTestMethod(""testPackageNotSuspended"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[G + "".ClearApplicationDataTest"",                ""testSharedPreferenceCleared"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[e) throws Exception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[oolean(false)                .setStrings(PERMISSIONS_APP_PKG)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1)]"	""	""	"[('APK', 128)]"	"[('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openBlob None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openBlob None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieUpdateAndRetrieval None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedAcrossInstantInstalls None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedUpgradeFromInstant None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieResetOnNonInstantReinstall None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind1 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind2 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBindB None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound3 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound4 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound5 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound6 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceEnabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceDisabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUninstall None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSwitchDefaultApp None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSecondaryUser None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testCrashAndAutoRebind None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testFeatureDisabled None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testOomAdjustment None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.appsecurity.cts.LocationPolicyTest testLocationPolicyPermissions None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_reinstall None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testBatterySaverMode_reinstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallAfterInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigNotDowngraded None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallOtherPackage None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadSignatureIgnored None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Config None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Signature None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyValidOnDebuggableBuild None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyNotValidOnNonDebuggableBuild None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradeRestricted None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradePriorities None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testUpdatedSystemAppPreservedOnReboot None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest testPackageUninstall_onLockedUser None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper dropShellPermissionIdentity None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase4 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkRollbackByAnotherInstaller_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper isCheckpointSupported None]', 1), ('[android.view.animation.cts.DecelerateInterpolatorTest testDecelerateInterpolator None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegationCertSelection None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpn None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnLockDown None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrantPreMApp None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_deviceAndProfileOwnerAlwaysAllowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegatedCertInstaller None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetWallpaper_disallowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTask None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackageWithPackageManager None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testClearApplicationData_testPkg None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPrintingPolicy None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUninstallBlockedLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-3"	"7.4.2.4/C-1-3"	"07040204.670103"	"""C-1-3] MUST support IEEE 802.11u standard, specifically related to Network Discovery and Selection, such as Generic Advertisement Service (GAS) and Access Network Query Protocol (ANQP)."""	""	""	"GAS IEEE ANQP"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/tagging/sdk_30/src/android/cts/tagging/sdk30/TaggingTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrack_ListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/Camera_SizeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/MotionEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/input/InputEventTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeDecoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/MotionEventTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/preference/src/android/preference/cts/PreferenceGroupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioRecordTest.java', 1)]"	"[('(1,GAS,/android/server/wm/AssistantStackTests.java)', 2), ('(3,GAS,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 2), ('(2,GAS,/android/media/cts/AudioRecordTest.java)', 2), ('(6,GAS,/android/hardware/camera2/cts/RobustnessTest.java)', 2), ('(2,GAS,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(5,GAS,/android/hardware/camera2/cts/StaticMetadataTest.java)', 2), ('(1,GAS,/android/view/cts/MotionEventTest.java)', 2), ('(2,GAS,/android/media/cts/AudioTrack_ListenerTest.java)', 1), ('(3,GAS,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(1,IEEE,/android/media/cts/AudioTrackTest.java)', 1), ('(1,GAS,/android/app/cts/UiModeManagerTest.java)', 1), ('(2,GAS,/android/hardware/cts/Camera_SizeTest.java)', 1), ('(6,GAS,/android/cts/tagging/sdk30/TaggingTest.java)', 1), ('(2,GAS,/android/view/cts/input/InputEventTest.java)', 1), ('(1,GAS,/android/media/cts/NativeDecoderTest.java)', 1), ('(1,GAS,/android/webkit/cts/WebViewTest.java)', 1), ('(12,IEEE,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(3,GAS,/android/preference/cts/PreferenceGroupTest.java)', 1)]"	"[('([1:/android/server/wm/AssistantStackTests.java]:[GAS]:[1]:method_text:[vityType(                            ACTIVITY_TYPE_ASSISTANT).isFullscreen());        }    }   ])', 2), ('([2:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[GAS]:[2]:method_text:[AAAAAAAAAAAcAAAAcAAAAAIA"" +                    ""AAAAAAAAAQAAAAAAAAAAEAAAAQAAAHAAAAA=""),    };   ])', 2), ('([1:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[GAS]:[1]:method_text:[      for (ExpectedMethod m : methods) {            m.ensureHasMethod(target);        }    }   ])', 2), ('([2:/android/media/cts/AudioRecordTest.java]:[GAS]:[2]:method_text:[nstrumentation().getTargetContext();    }    /*     * Microphone Direction API tests     */   ])', 2), ('([6:/android/hardware/camera2/cts/RobustnessTest.java]:[GAS]:[6]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 2), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[GAS]:[2]:method_text:[al distortion        }    }    /**     * Cross-check StreamConfigurationMap output     */   ])', 2), ('([5:/android/hardware/camera2/cts/StaticMetadataTest.java]:[GAS]:[5]:method_text:[ces.        }    }    /**     * Test max number of output stream reported by device     */   ])', 2), ('([1:/android/view/cts/MotionEventTest.java]:[GAS]:[1]:method_text:[);            assertEquals(axes[i], MotionEvent.axisFromString(axisToString));        }    }   ])', 2), ('([2:/android/media/cts/AudioTrack_ListenerTest.java]:[GAS]:[2]:method_text:[        private ArrayList<Integer> mOnPeriodicNotificationCalled = new ArrayList<Integer>();    }}])', 1), ('([2:/android/media/cts/StreamingMediaPlayerTest.java]:[GAS]:[2]:method_text:[yback should have failed"");        } finally {            mServer.shutdown();        }    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[GAS]:[1]:method_text:[InterruptedIOException();                    }                }            };        }    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[IEEE]:[1]:method_text:[ // Start threshold levels that we check.    private enum ThresholdLevel { LOW, MEDIUM, HIGH };   ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[GAS]:[1]:method_text:[ngAsUser(UserHandle.USER_SYSTEM, key)                : SettingsUtils.getSecureSetting(key);    }}])', 1), ('([2:/android/hardware/cts/Camera_SizeTest.java]:[GAS]:[2]:method_text:[st = new Camera_SizeTest();        test.setName(testName);        testSuite.addTest(test);    }}])', 1), ('([1:/android/cts/tagging/sdk30/TaggingTest.java]:[GAS]:[1]:method_text:[  assertTrue(receiver.await());        assertFalse(Utils.mistaggedKernelUaccessFails());    }   ])', 1), ('([3:/android/cts/tagging/sdk30/TaggingTest.java]:[GAS]:[3]:method_text:[(                    TestActivity.class, false /*initialTouchMode*/, true /*launchActivity*/);   ])', 1), ('([2:/android/cts/tagging/sdk30/TaggingTest.java]:[GAS]:[2]:method_text:[y.callActivity(HeapZeroInitMemtagAsyncActivity.class);      assertFalse(activity.failed());    }}])', 1), ('([2:/android/view/cts/input/InputEventTest.java]:[GAS]:[2]:method_text:[alue());            assertEquals(axis, MotionEvent.axisFromString(axisToString));        }    }}])', 1), ('([1:/android/media/cts/NativeDecoderTest.java]:[GAS]:[1]:method_text:[         String path, String[] keys, String[] values, boolean testNativeSource);    @Presubmit   ])', 1), ('([1:/android/webkit/cts/WebViewTest.java]:[GAS]:[1]:method_text:[nalUrl, mWebView.getUrl());        assertEquals(redirectUrl, mWebView.getOriginalUrl());    }   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[4]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[2]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([3:/android/net/wifi/rtt/cts/WifiRttTest.java]:[IEEE]:[3]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([3:/android/preference/cts/PreferenceGroupTest.java]:[GAS]:[3]:method_text:[oup.setOrderingAsAdded(false);        assertFalse(mPreferenceGroup.isOrderingAsAdded());    }   ])', 1)]"	""	""	"[('GAS', 28), ('IEEE', 5)]"	"[('[android.server.wm.AssistantStackTests testLaunchingAssistantActivityIntoAssistantStack None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest testSucessfulRetransform None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest testRetransformFailures None]', 2), ('[android.media.cts.AudioRecordTest testGetActiveRecordingConfiguration None]', 2), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testDepthOutputCharacteristics None]', 2), ('[android.hardware.camera2.cts.StaticMetadataTest testHwSupportedLevel None]', 2), ('[android.view.cts.MotionEventTest testAxisFromToString None]', 2), ('[android.media.cts.AudioTrack_ListenerTest testStaticAudioTrackCallbackWithHandler None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testPlayMp3Stream1Ssl None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testBlockingReadRelease None]', 1), ('[android.media.cts.AudioTrackTest testSetLogSessionId None]', 1), ('[android.app.cts.UiModeManagerTest testEnterCarModePrioritizedDenied None]', 1), ('[android.hardware.cts.Camera_SizeTest testMaxAspectRatios None]', 1), ('[android.cts.tagging.sdk30.TaggingTest testMemoryTagAsyncChecksEnabled None]', 1), ('[android.cts.tagging.sdk30.TaggingTest testMemoryTagAsyncActivityChecksEnabled None]', 1), ('[android.cts.tagging.sdk30.TaggingTest testHeapZeroInitMemtagAsyncActivity None]', 1), ('[android.view.cts.input.InputEventTest testAxisFromToString None]', 1), ('[android.media.cts.NativeDecoderTest testExtractor None]', 1), ('[android.webkit.cts.WebViewTest testGetOriginalUrl None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestAp None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge None]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation None]', 1), ('[android.preference.cts.PreferenceGroupTest testSetOrderingAsAdded None]', 1)]"
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-1"	"2.2.7.2/H-1-1"	"02020702.720101"	"""7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID. && 7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID. | 7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"197:593606) 7.4.2  . IEEE 802.11"	"7.4.2"	"C-1-8"	"7.4.2/C-1-8"	"07040200.670108"	"""C-1-8] MUST use one consistent MAC address (SHOULD NOT randomize MAC address halfway through a scan)."""	""	""	"MAC"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 27), ('/home/gpoor/cts-12-source/cts/tests/tests/animation/src/android/animation/cts/ValueAnimatorTest.java', 23), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 20), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/inspector/cts/WindowInspectorTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/assist/src/android/assist/cts/FocusChangeTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ActionModeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaController2Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1)]"	"[('(15,MAC,/android/view/cts/VerifyInputEventTest.java)', 1), ('(27,MAC,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(5,MAC,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(9,MAC,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(1,MAC,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(9,MAC,/android/transition/cts/FadeTest.java)', 1), ('(15,MAC,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(8,MAC,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(20,MAC,/android/view/cts/PointerCaptureTest.java)', 1), ('(8,MAC,/android/server/wm/KeyguardInputTests.java)', 1), ('(4,MAC,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(19,MAC,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(7,MAC,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(68,MAC,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(4,MAC,/android/media/cts/Session2CommandTest.java)', 1), ('(135,MAC,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(29,MAC,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(1,MAC,/android/media/cts/MediaController2Test.java)', 1), ('(5,MAC,/android/view/inspector/cts/WindowInspectorTest.java)', 1), ('(1,MAC,/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java)', 1), ('(2,MAC,/android/assist/cts/FocusChangeTest.java)', 1), ('(6,MAC,/android/view/cts/ActionModeTest.java)', 1), ('(46,MAC,/android/animation/cts/ValueAnimatorTest.java)', 1)]"	"[('([4:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[4]:method_text:[d not receive expected event: "" + expected, awaitedEvent);    }    @MediumTest    @Presubmit   ])', 4), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ake sure the onAnimationEnd(anim) is called.        assertTrue(myListener.mEndIsCalled);    }   ])', 3), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[MAC]:[1]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 2), ('([3:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[3]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 2), ('([10:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[10]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 2), ('([5:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[5]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 2), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[1]:method_text:[utofillWhitelist((Set<String>) null,                        (Set<ComponentName>) null));    }   ])', 2), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[();        assertTrue(animatedValue >= start);        assertTrue(animatedValue <= end);    }   ])', 2), ('([5:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[5]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[2]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 1), ('([2:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[2]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[1]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 1), ('([3:/android/view/cts/VerifyInputEventTest.java]:[MAC]:[3]:method_text:[   boolean flagValue = (expectedFlags & flag) != 0;        assertEquals(flagValue, actual);    }}])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[6]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([10:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[10]:method_text:[xpandableListView(mActivity, attrs);        new ExpandableListView(mActivity, attrs, 0);    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[1]:method_text:[).getDrawable(R.drawable.scenery);        mExpandableListView.setChildDivider(drawable);    }   ])', 1), ('([6:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[6]:method_text:[           } catch (NullPointerException e) {            }        });    }    @UiThreadTest   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[2]:method_text:[e p2 = dest.onSaveInstanceState();        assertNotNull(p1);        assertNotNull(p2);    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[MAC]:[2]:method_text:[otected void dispatchDraw(Canvas canvas) {            super.dispatchDraw(canvas);        }    }}])', 1), ('([5:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[MAC]:[5]:method_text:[TypeB"", MULTI_STEP_MIGRATOR_B)                    .setVersion(4)                    .build();   ])', 1), ('([2:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[MAC]:[2]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([7:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[MAC]:[7]:method_text:[eption {        mUiBot.waitForWindowChange(() -> mActivity.onUsername(View::requestFocus));    }}])', 1), ('([1:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[MAC]:[1]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([4:/android/transition/cts/FadeTest.java]:[MAC]:[4]:method_text:[;    }    // After a transition, a transitioned view as part of a scene should not be removed   ])', 1), ('([5:/android/transition/cts/FadeTest.java]:[MAC]:[5]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[3]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[1]:method_text:[      }        // Verify alias is actually deleted.        assertGranted(alias, false);    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[1]:method_text:[n.get(i - 1).verify(certChain.get(i).getPublicKey());        }        return certChain;    }   ])', 1), (""([2:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[2]:method_text:[;        }        // Verify they're actually gone.        assertGranted(alias, false);    }   ])"", 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[1]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[1]:method_text:[      assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();        }    }   ])', 1), ('([6:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[MAC]:[6]:method_text:[ationSupported() {        return mDevicePolicyManager.isUniqueDeviceAttestationSupported();    }}])', 1), ('([6:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[6]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[1]:method_text:[        assertTrue(alphaValue <= endAlpha);            lastValue = alphaValue;        }    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[MAC]:[1]:method_text:[ild) {            super.showChild(parent, child);            mShowChild = true;        }    }}])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[MAC]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([4:/android/view/cts/PointerCaptureTest.java]:[MAC]:[4]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[MAC]:[1]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([5:/android/server/wm/KeyguardInputTests.java]:[MAC]:[5]:method_text:[the keyguard, and inject BACK key. Ensure that the BACK key goes     * to the activity.     */   ])', 1), ('([3:/android/server/wm/KeyguardInputTests.java]:[MAC]:[3]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([2:/android/bluetooth/cts/ScanFilterTest.java]:[MAC]:[2]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([2:/android/bluetooth/cts/ScanFilterTest.java]:[MAC]:[2]:method_text:[;        assertFalse(""device filter fails"", filter.matches(mScanResult));    }    @SmallTest   ])', 1), ('([17:/android/telephony/cts/TelephonyManagerTest.java]:[MAC]:[17]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([4:/android/view/cts/View_LayoutPositionTest.java]:[MAC]:[4]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/view/cts/View_LayoutPositionTest.java]:[MAC]:[2]:method_text:[assertEquals(right + h_offset, nright);        assertEquals(bottom + v_offset, nbottom);    }   ])', 1), ('([1:/android/view/cts/View_LayoutPositionTest.java]:[MAC]:[1]:method_text:[ssertEquals(5, view.getPaddingRight());        assertEquals(1000, view.getPaddingBottom());    }}])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[5]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[6]:method_text:[ive expected event: "" + expected, awaitedTextChangeEvent);    }    @MediumTest    @Presubmit   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[5]:method_text:[nt);    }    @MediumTest    @AppModeFull    @SuppressWarnings(""deprecation"")    @Presubmit   ])', 1), ('([8:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[8]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());        }    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[2]:method_text:[        } finally {            service.disableSelfAndRemove();        }    }    @MediumTest   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[5]:method_text:[d to use the correct package"");        }    }    @AppModeFull    @MediumTest    @Presubmit   ])', 1), ('([5:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[5]:method_text:[();            revokeBindAppWidgetPermission();        }    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[3]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[1]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[3]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[MAC]:[4]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([3:/android/media/cts/Session2CommandTest.java]:[MAC]:[3]:method_text:[M_EXTRAS);        assertEquals(TEST_CUSTOM_ACTION, commandWithAction.getCustomAction());    }   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[MAC]:[1]:method_text:[, dest.readString());        assertEquals(command.getCustomExtras(), dest.readBundle());    }   ])', 1), ('([2:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[2]:method_text:[ed() {                mActivity = getActivity();            }        };    }    @Presubmit   ])', 1), ('([9:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[9]:method_text:[veRequest.structure, ID_PASSWORD);        assertTextAndValue(passwordNode, ""malkovich"");    }   ])', 1), ('([10:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[10]:method_text:[veRequest.structure, ID_PASSWORD);        assertTextAndValue(passwordNode, ""malkovich"");    }   ])', 1), ('([7:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[7]:method_text:[   mUiBot.selectDataset(""The Dude"");        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([5:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[5]:method_text:[iBot.assertUiGone();    }    @FlakyTest(bugId = 162372863) // Re-add @Presubmit after fixing.   ])', 1), ('([2:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[2]:method_text:[/ Make sure Augmented Autofill UI is shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([6:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[6]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 1), ('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[1]:method_text:[elListener(listener);        // Assert results        listener.assertOnCancelCalled();    }   ])', 1), ('([8:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[8]:method_text:[GROOT""));        assertViewAutofillState(mActivity.getUsername(), false);    }    @Presubmit   ])', 1), ('([11:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[11]:method_text:[;        mAugmentedUiBot.assertUiGone();        callback.assertUiHiddenEvent(username);    }   ])', 1), ('([4:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[4]:method_text:[AugmentedUiBot.assertUiGone();        currentActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[2]:method_text:[(componentName, usernameId);        assertThat(requestResult).isFalse();    }    @Presubmit   ])', 1), ('([4:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[4]:method_text:[is shown.        mAugmentedUiBot.assertUiShown(usernameId, ""Augment Me"");    }    @Presubmit   ])', 1), ('([4:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[4]:method_text:[requestAutofill(componentName, usernameId);        assertThat(requestResult).isFalse();    }   ])', 1), ('([7:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[7]:method_text:[ui.click();        mActivity.assertAutoFilled();        mAugmentedUiBot.assertUiGone();    }   ])', 1), ('([6:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[6]:method_text:[hown        mUiBot.assertNoDatasetsEver();        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([5:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[5]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([2:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[2]:method_text:[ke sure Augmented Autofill UI is not shown.        mAugmentedUiBot.assertUiNeverShown();    }   ])', 1), ('([2:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[MAC]:[2]:method_text:[...     * - No augmented autofill calls when the main service is not set.     * - etc...     */}])', 1), ('([2:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[2]:method_text:[;        mUiBot.assertNoDatasets();        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[2]:method_text:[le();        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([12:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[12]:method_text:[ord"");        mUiBot.waitForIdle();        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([4:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[4]:method_text:[ts();        // Check the results.        mActivity.assertAutoFilled();    }    @Presubmit   ])', 1), ('([4:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[4]:method_text:[ggestionsRequest())                .isEqualTo(inlineSuggestionsRequest2);    }    @Presubmit   ])', 1), ('([5:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[MAC]:[5]:method_text:[.selectByRelativeId(id);        mUiBot.waitForIdle();        mUiBot.assertDatasets(names);    }}])', 1), ('([1:/android/media/cts/MediaController2Test.java]:[MAC]:[1]:method_text:[{            assertTrue(controllerCallback.awaitOnDisconnected(WAIT_TIME_MS));        }    }   ])', 1), ('([4:/android/view/inspector/cts/WindowInspectorTest.java]:[MAC]:[4]:method_text:[;    @Before    public void setup() {        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([1:/android/view/inspector/cts/WindowInspectorTest.java]:[MAC]:[1]:method_text:[window view is the decor view"",                view, mActivity.getWindow().getDecorView());    }}])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[MAC]:[1]:method_text:[ption {        mDpm.uninstallCaCert(null, TEST_CA.getBytes());        super.tearDown();    }   ])', 1), ('([1:/android/assist/cts/FocusChangeTest.java]:[MAC]:[1]:method_text:[espite the Assistant Firing""                    + Utils.TIMEOUT_MS + ""msec."");        }    }   ])', 1), ('([1:/android/assist/cts/FocusChangeTest.java]:[MAC]:[1]:method_text:[ST_CASE_TYPE);        waitToGainFocus();        startSession();        waitToLoseFocus();    }}])', 1), ('([4:/android/view/cts/ActionModeTest.java]:[MAC]:[4]:method_text:[umentationRegistry.getInstrumentation();        mActivity = mActivityRule.getActivity();    }   ])', 1), ('([2:/android/view/cts/ActionModeTest.java]:[MAC]:[2]:method_text:[nGetContentRect(any(ActionMode.class), any(View.class),                any(Rect.class));    }   ])', 1), ('([5:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[5]:method_text:[tatic void afterClass() {        ValueAnimator.setDurationScale(sPreviousAnimatorScale);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[n(valueAnimatorLocal);        assertEquals(mDuration, valueAnimatorLocal.getDuration());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ = mActivity.view.bounceYAnimator;        assertTrue(valueAnimatorReturned.isRunning());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ueAnimator);        assertEquals(ValueAnimator.RESTART, mValueAnimator.getRepeatMode());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[tion(mValueAnimator);        assertEquals(repeatCount, mValueAnimator.getRepeatCount());    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[nim, false);        verify(listener, timeout(450).times(1)).onAnimationEnd(anim, false);    }   ])', 1), ('([3:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[3]:method_text:[assertTrue(currentValue > 50);        mActivityRule.runOnUiThread(delayedAnim::cancel);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[(l1, times(1)).onAnimationResume(a1);        verify(l2, times(0)).onAnimationResume(a1);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[entFraction, EPSILON);        assertEquals(50, currentValue, EPSILON);    }    @UiThreadTest   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[ator.getFrameDelay();            assertEquals(frameDelay, actualFrameDelay);        });    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[3, times(0)).onAnimationUpdate(a1);        verify(l4, atLeast(1)).onAnimationUpdate(a1);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[alueAnimator);        assertTrue(interpolator.equals(mValueAnimator.getInterpolator()));    }   ])', 1), ('([5:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[5]:method_text:[r);        float y = mActivity.view.newBall.getY();        assertEquals(y, endY, 0.0f);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[ public float getInterpolation(float input) {            return input * input;        }    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[assertEquals(0, green);        mActivityRule.runOnUiThread(valueAnimatorLocal::cancel);    }   ])', 1), ('([2:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[2]:method_text:[or.getAnimatedFraction() >= 0.5f);        mActivityRule.runOnUiThread(animator::cancel);    }   ])', 1), ('([1:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[1]:method_text:[nOnUiThread(() -> {            animator.start();            animator.end();        });    }   ])', 1), ('([11:/android/animation/cts/ValueAnimatorTest.java]:[MAC]:[11]:method_text:[         message.append(values[i]).append("" "");        }        return message.toString();    }}])', 1)]"	""	""	"[('MAC', 128)]"	"[('[android.view.cts.VerifyInputEventTest testKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testKeyEventWithoutHmac None]', 1), ('[android.view.cts.VerifyInputEventTest testMotionEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testMotionEventWithoutHmac None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testDeviceIdBecomesVirtualForInjectedMotions None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testConstructor None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetChildDivider None]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroupSmooth None]', 1), ('[android.widget.cts.ExpandableListViewTest testOnSaveInstanceState None]', 1), ('[android.widget.cts.ExpandableListViewTest testDispatchDraw None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_loadTest None]', 1), ('[android.autofillservice.cts.LoginWithCustomHighlightActivityTest testAutofillCustomHighlight_multipleFields_hasHighlight None]', 1), ('[android.transition.cts.FadeTest testFadeOutTransition None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanInstallAndRemoveValidRsaKeypair None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanInstallWithAutomaticAccess None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanInstallCertChain None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCert None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCertChain None]', 1), ('[android.animation.cts.LayoutAnimationTest testAnimationWithAnimator None]', 1), ('[android.animation.cts.LayoutAnimationTest testSetStagger None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.bluetooth.cts.ScanFilterTest testDeviceAddressFilter None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetPhoneCount None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.view.cts.View_LayoutPositionTest testPositionInParent None]', 1), ('[android.view.cts.View_LayoutPositionTest testPadding None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeViewSelectedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeViewClickedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeViewLongClickedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeViewFocusedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeViewTextChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeWindowStateChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testInterrupt_notifiesService None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFaked None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFakedAppWidget None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.media.cts.Session2CommandTest testGetCustomAction None]', 1), ('[android.media.cts.Session2CommandTest testWriteToParcel None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_notImportantForAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_notImportantForAutofill_allowAutofillOnOtherField None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_mainServiceReturnedNull_augmentedAutofillOneField None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_augmentedFillRequestCancelled None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_mainServiceReturnedNull_augmentedAutofillTwoFields None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testCancellationSignalCalledAfterTimeout None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testCancellationSignalCalled_retriggerAugmentedAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_multipleRequests None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_thenEditField None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_callback None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_rotateDevice None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_noPreviousRequest_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_hasPreviousRequestViewNotFocused_requestAutofill None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_manualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_autoThenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_valueChangedOnSecondRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutoFill_mainServiceDisabled_tappingSecondTimeNotTrigger None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testSetAugmentedAutofillWhitelist_noStandardServiceSet None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testSetAugmentedAutofillWhitelist_notAugmentedService None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutofill_packageNotWhitelisted None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAugmentedAutofill_activityNotWhitelisted None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testFillResponseAuth None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthTwoFields None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthEphemeralNotSet None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthFilteringUsingRegex None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthInlineSuggestionsRequestForTwoPartitions None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthClientStateSetOnIntentOnly None]', 1), ('[android.media.cts.MediaController2Test testCallback_onSessionCommand None]', 1), ('[android.view.inspector.cts.WindowInspectorTest testGetGlobalWindowViews None]', 1), ('[android.assist.cts.FocusChangeTest testLayerCausesUnderlyingActivityToLoseFocus None]', 1), ('[android.view.cts.ActionModeTest testInvalidateContentRectOnFloatingCallsCallback None]', 1), ('[android.animation.cts.ValueAnimatorTest testDuration None]', 1), ('[android.animation.cts.ValueAnimatorTest testIsRunning None]', 1), ('[android.animation.cts.ValueAnimatorTest testRepeatMode None]', 1), ('[android.animation.cts.ValueAnimatorTest testRepeatCount None]', 1), ('[android.animation.cts.ValueAnimatorTest testListenerCallbackWithStartDelay None]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentPlayTime None]', 1), ('[android.animation.cts.ValueAnimatorTest testPauseListener None]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentPlayTimeAfterStart None]', 1), ('[android.animation.cts.ValueAnimatorTest testSetCurrentFraction None]', 1), ('[android.animation.cts.ValueAnimatorTest testGetFrameDelay None]', 1), ('[android.animation.cts.ValueAnimatorTest testUpdateListeners None]', 1), ('[android.animation.cts.ValueAnimatorTest testValuesSetterAndGetter None]', 1), ('[android.animation.cts.ValueAnimatorTest testSetObjectValues None]', 1), ('[android.animation.cts.ValueAnimatorTest testSetInterpolator None]', 1), ('[android.animation.cts.ValueAnimatorTest testEnd None]', 1), ('[android.animation.cts.ValueAnimatorTest testGetAnimatedFraction None]', 1), ('[android.animation.cts.ValueAnimatorTest testOfFloat None]', 1), ('[android.animation.cts.ValueAnimatorTest testOfInt None]', 1), ('[android.animation.cts.ValueAnimatorTest testOfArgb None]', 1), ('[android.animation.cts.ValueAnimatorTest testNoDelayOnSeekAnimation None]', 1), ('[android.animation.cts.ValueAnimatorTest testNotifiesAfterEnd None]', 1), ('[android.animation.cts.ValueAnimatorTest testAnimationDurationNoShortenByTinkeredScale None]', 1)]"
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-1-4"	"2.2.7.4/H-1-4"	"02020704.720104"	"""8.2/H-1-4] MUST ensure a random read performance of at least 25 MB/s. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: """	""	""	"VERSION_CODES android.os.Build.VERSION_CODES.MEDIA MEDIA_PERFORMANCE_CLASS android.os.Build.VERSION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 13), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java', 8), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 3), ('/home/gpoor/cts-12-source/cts/common/device-side/bedstead/nene/src/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java', 3), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/PrivilegedLocationPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/rotationresolverservice/src/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/os/UffdGc/src/android/os/cts/uffdgc/UserfaultfdTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/security/src/android/security/cts/VerifiedBootTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/role/src/android/app/role/cts/RoleManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssLocationValuesTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/sdkextensions/src/android/os/ext/cts/SdkExtensionsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dexmetadata/app/src/com/android/cts/dexmetadata/InstallDexMetadataTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/mediaparser/src/android/media/mediaparser/cts/MediaParserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreTrashedTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacFormat.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incrementalinstall/src/android/incrementalinstall/cts/IncrementalFeatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/testsdk29/src/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/ProxyInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssNavigationMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_privileged/src/android/location/cts/privileged/GnssLocationValuesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_MediaTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStoreMatchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkWatchlistTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Audio_GenresTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/bootstats/src/android/bootstats/cts/BootStatsHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaCodecTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AlarmManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaRecorderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/NetworkStatsBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/CodecEncoderSurfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/secure_element/access_control/AccessControlApp2/src/android/omapi/accesscontrol2/cts/AccessControlTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncoderColorAspectsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/src/android/scopedstorage/cts/ScopedStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_FilesTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityButtonTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src_target/com/android/test/usesnativesharedlibrary/LoadTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_gnss/src/android/location/cts/gnss/GnssMeasurementRegistrationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerProcessStateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BasicApiTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorUnitTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1)]"	"[('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java)', 2), ('(2,VERSION_CODES,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CameraManagerTest.java)', 2), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreTrashedTest.java)', 1), ('(1,VERSION_CODES,/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java)', 1), ('(14,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacFormat.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(1,VERSION_CODES,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java)', 1), ('(1,VERSION_CODES,/android/incrementalinstall/cts/IncrementalFeatureTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/EncryptionTest.java)', 1), ('(2,VERSION_CODES,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(2,android.os.Build.VERSION,/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/ProxyInfoTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssNavigationMessageTest.java)', 1), ('(4,VERSION_CODES,/android/app/cts/NotificationTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/privileged/GnssLocationValuesTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_MediaTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java)', 1), ('(2,VERSION_CODES,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,android.os.Build.VERSION,/android/os/cts/uffdgc/UserfaultfdTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStoreMatchTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkWatchlistTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Audio_GenresTest.java)', 1), ('(7,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,VERSION_CODES,/android/bootstats/cts/BootStatsHostTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaCodecTest.java)', 1), ('(3,VERSION_CODES,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,android.os.Build.VERSION,/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/AlarmManagerTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaRecorderTest.java)', 1), ('(1,VERSION_CODES,/android/net/cts/NetworkStatsBinderTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,android.os.Build.VERSION,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/CodecEncoderSurfaceTest.java)', 1), ('(1,VERSION_CODES,/android/view/inputmethod/cts/FocusHandlingTest.java)', 1), ('(1,VERSION_CODES,/android/omapi/accesscontrol2/cts/AccessControlTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/EncoderColorAspectsTest.java)', 1), ('(3,VERSION_CODES,/android/security/cts/VerifiedBootTest.java)', 1), ('(1,VERSION_CODES,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,VERSION_CODES,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(1,VERSION_CODES,/android/scopedstorage/cts/ScopedStorageTest.java)', 1), ('(2,VERSION_CODES,/android/app/role/cts/RoleManagerTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_FilesTest.java)', 1), ('(2,VERSION_CODES,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(1,VERSION_CODES,/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/gnss/GnssLocationValuesTest.java)', 1), ('(2,VERSION_CODES,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(2,android.os.Build.VERSION,/android/location/cts/privileged/PrivilegedLocationPermissionTest.java)', 1), ('(7,VERSION_CODES,/android/app/cts/NotificationManagerTest.java)', 1), ('(1,VERSION_CODES,/android/accessibilityservice/cts/AccessibilityButtonTest.java)', 1), ('(1,VERSION_CODES,_target/com/android/test/usesnativesharedlibrary/LoadTest.java)', 1), ('(1,VERSION_CODES,/android/location/cts/gnss/GnssMeasurementRegistrationTest.java)', 1), ('(1,VERSION_CODES,/android/app/cts/ActivityManagerProcessStateTest.java)', 1), ('(2,VERSION_CODES,/android/os/ext/cts/SdkExtensionsTest.java)', 1), ('(1,VERSION_CODES,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java)', 1), ('(9,VERSION_CODES,/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java)', 1), ('(1,VERSION_CODES,/android/alarmmanager/cts/BasicApiTests.java)', 1), ('(2,VERSION_CODES,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,android.os.Build.VERSION,/com/android/cts/dexmetadata/InstallDexMetadataTest.java)', 1), ('(1,VERSION_CODES,/android/mediav2/cts/ExtractorUnitTest.java)', 1), ('(2,VERSION_CODES,/android/media/mediaparser/cts/MediaParserTest.java)', 1), ('(3,VERSION_CODES,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(1,VERSION_CODES,/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java)', 1), ('(1,VERSION_CODES,/android/media/cts/DecoderTestXheAac.java)', 1)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[} finally {            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 4), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 3), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[    assertTrue(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 3), ('([1:/android/accessibilityservice/cts/AccessibilityButtonSdk29Test.java]:[VERSION_CODES]:[1]:method_text:[FLAG_REQUEST_ACCESSIBILITY_BUTTON)                == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[ This follows the Manage Channel     * command described in TS 102 221 Section 11.1.17.     */   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[VERSION_CODES]:[1]:method_text:[r a logical channel and makes sure appropriate     * errors are returned from the UICC.     */   ])', 2), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[VERSION_CODES]:[1]:method_text:[  hardwareLevel != CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_GRANTED);        }    }   ])', 2), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[withoutPermission(                        DECLARED_PERMISSION_NOT_HELD_BY_SHELL_PRE_S));    }   ])', 2), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([1:/android/location/cts/privileged/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_Artists_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStoreTrashedTest.java]:[VERSION_CODES]:[1]:method_text:[meName);    }    /**     * Verify that we can trash and untrash an item that we own.     */   ])', 1), ('([1:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[VERSION_CODES]:[1]:method_text:[InterruptedException ex) {                // pass            }        }        return n;    }}])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/media/cts/DecoderTestAacFormat.java]:[VERSION_CODES]:[1]:method_text:[  * Verify downmixing to stereo at decoding of MPEG-4 HE-AAC 5.0 and 5.1 channel streams     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[VERSION_CODES]:[1]:method_text:[     * Verify correct decoding of MPEG-4 AAC with output level normalization to -23dBFS.     */   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[VERSION_CODES]:[1]:method_text:[                      mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));        }    }   ])', 1), ('([1:/android/incrementalinstall/cts/IncrementalFeatureTest.java]:[VERSION_CODES]:[1]:method_text:[tLaunchApiLevel() >= 30 /* Build.VERSION_CODES.R */);    }    @CddTest(requirement=""4/C-1-1"")   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([1:/android/location/cts/fine/LocationManagerFineTest.java]:[VERSION_CODES]:[1]:method_text:[;        } else {            mManager.setTestProviderEnabled(provider, enabled);        }    }}])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ockLocationProvider(InstrumentationRegistry.getInstrumentation(),                false);    }   ])', 1), ('([3:/android/security/cts/EncryptionTest.java]:[VERSION_CODES]:[3]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[VERSION_CODES]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([2:/android/rotationresolverservice/cts/CtsRotationResolverServiceDeviceTest.java]:[android.os.Build.VERSION]:[2]:method_text:[    @After    public void tearDown() {        clearTestableRotationResolverService();    }   ])', 1), ('([1:/android/net/cts/ProxyInfoTest.java]:[VERSION_CODES]:[1]:method_text:[      proxy2.getExclusionList());        assertEquals(TEST_URI, proxy2.getPacFileUrl());    }   ])', 1), ('([1:/android/location/cts/gnss/GnssNavigationMessageTest.java]:[VERSION_CODES]:[1]:method_text:[tSvid());        assertEquals(GnssNavigationMessage.TYPE_GPS_L2CNAV, message.getType());    }   ])', 1), ('([1:/android/app/cts/NotificationTest.java]:[VERSION_CODES]:[1]:method_text:[   assertFalse(notification.extras.getBoolean(Notification.EXTRA_IS_GROUP_CONVERSATION));    }   ])', 1), (""([1:/android/location/cts/privileged/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[* 2. Get low-power GNSS locations.     * 3. Check whether all fields' value make sense.     */   ])"", 1), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[VERSION_CODES]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_PlaylistsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[VERSION_CODES]:[1]:method_text:[    } catch (Exception ignore) {}    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[VERSION_CODES]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_MediaTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_AlbumsTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/os/cts/uffdgc/UserfaultfdTest.java]:[VERSION_CODES]:[2]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/android/os/cts/uffdgc/UserfaultfdTest.java]:[android.os.Build.VERSION]:[1]:method_text:[ if a userfault from kernel-space fails or not. It is  // not allowed for unprivileged processes. ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[VERSION_CODES]:[1]:method_text:[}    }    private interface SetWifiCallback {        void onComplete(boolean isSuccess);    }}])', 1), ('([1:/android/provider/cts/media/MediaStoreMatchTest.java]:[VERSION_CODES]:[1]:method_text:[olumeName);        mExternalImages = MediaStore.Images.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/cts/NetworkWatchlistTest.java]:[VERSION_CODES]:[1]:method_text:[ager.getNetworkWatchlistConfigHash() correctly     * returns the hash of config we set.     */   ])', 1), ('([1:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[VERSION_CODES]:[1]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Audio_GenresTest.java]:[VERSION_CODES]:[1]:method_text:[lver = mContext.getContentResolver();        Log.d(TAG, ""Using volume "" + mVolumeName);    }   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[2]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/bootstats/cts/BootStatsHostTest.java]:[VERSION_CODES]:[2]:method_text:[ = device;    }    @Override    public ITestDevice getDevice() {        return mDevice;    }}])', 1), ('([1:/android/media/cts/MediaCodecTest.java]:[VERSION_CODES]:[1]:method_text:[s are thrown from MediaCodec     * methods when called in incorrect operational states.     */   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> ShellCommand.builder(INVALID_COMMAND_LEGACY_OUTPUT).execute());    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[VERSION_CODES]:[2]:method_text:[ACY_OUTPUT).execute())                .contains(INVALID_COMMAND_EXPECTED_LEGACY_OUTPUT);    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/utils/ShellCommandTest.java]:[android.os.Build.VERSION]:[1]:method_text:[L_OUTPUT_FILTER = (output) -> false;    private static final String COMMAND = ""pm list users"";   ])', 1), ('([1:/android/app/cts/AlarmManagerTest.java]:[VERSION_CODES]:[1]:method_text:[                    ? nextAlarmClock.getTriggerTime()                    : null);        }    }}])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[VERSION_CODES]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/media/cts/MediaRecorderTest.java]:[VERSION_CODES]:[1]:method_text:[   mNextOutputFileStartedCond = null;        mActivity = null;        super.tearDown();    }   ])', 1), ('([1:/android/net/cts/NetworkStatsBinderTest.java]:[VERSION_CODES]:[1]:method_text:[        if (match != null) return match.applicationInfo.uid;        return INVALID_UID;    }   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[VERSION_CODES]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/media/cts/MediaDrmClearkeyTest.java]:[android.os.Build.VERSION]:[1]:method_text:[      }    }    /**     * Tests KEY_TYPE_RELEASE for offline license.     */    @Presubmit   ])', 1), ('([1:/android/mediav2/cts/CodecEncoderSurfaceTest.java]:[VERSION_CODES]:[1]:method_text:[face mode.The output has to     * be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[VERSION_CODES]:[1]:method_text:[ event -> ""showSoftInput"".equals(event.getEventName()), TIMEOUT);            }        }    }   ])', 1), ('([1:/android/omapi/accesscontrol2/cts/AccessControlTest.java]:[VERSION_CODES]:[1]:method_text:[nectionTimer != null) {                connectionTimer.cancel();            }        }    }   ])', 1), ('([1:/android/mediav2/cts/EncoderColorAspectsTest.java]:[VERSION_CODES]:[1]:method_text:[pareParamList(exhaustiveArgsList, isEncoder, needAudio, needVideo, false);    }    @SmallTest   ])', 1), ('([2:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[2]:method_text:[feature flag android.hardware.ram.normal is exempt if    * it launched on a pre-P level.    */   ])', 1), ('([1:/android/security/cts/VerifiedBootTest.java]:[VERSION_CODES]:[1]:method_text:[ on the device"",                pm.hasSystemFeature(PackageManager.FEATURE_VERIFIED_BOOT));    }}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[VERSION_CODES]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[VERSION_CODES]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([1:/android/scopedstorage/cts/ScopedStorageTest.java]:[VERSION_CODES]:[1]:method_text:[ executeShellCommand(""am get-current-user"");        return Integer.parseInt(userId.trim());    }}])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[PP_PACKAGE_NAME);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/app/role/cts/RoleManagerTest.java]:[VERSION_CODES]:[1]:method_text:[ification(true));    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S, codeName = ""S"")   ])', 1), ('([1:/android/provider/cts/media/MediaStore_FilesTest.java]:[VERSION_CODES]:[1]:method_text:[ntUri(mVolumeName);        mExternalFiles = MediaStore.Files.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[ing the specifier to set a band.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[VERSION_CODES]:[1]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([1:/com.android.cts.deviceadmin/DeviceAdminPasswordTest.java]:[VERSION_CODES]:[1]:method_text:[l() {        return mContext.getApplicationContext().getApplicationInfo().targetSdkVersion;    }}])', 1), (""([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[*   * Get the location info from the device   * check whether all fields' value make sense   */ ])"", 1), ('([1:/android/location/cts/gnss/GnssLocationValuesTest.java]:[VERSION_CODES]:[1]:method_text:[range of [0, 5] m/s"",          location.getSpeed() >= 0 && location.getSpeed() <= 5);    }  }}])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([1:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[VERSION_CODES]:[1]:method_text:[;        mLocationManager.setExtraLocationControllerPackageEnabled(originalPackageEnabeld);    }}])', 1), ('([2:/android/location/cts/privileged/PrivilegedLocationPermissionTest.java]:[android.os.Build.VERSION]:[2]:method_text:[ry.getInstrumentation().getUiAutomation()                .dropShellPermissionIdentity();    }   ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[2]:method_text:[alFilter);            mNotificationManager.setNotificationPolicy(origPolicy);        }    }   ])', 1), ('([1:/android/app/cts/NotificationManagerTest.java]:[VERSION_CODES]:[1]:method_text:[lse)) {            fail(""Failed to cancel notification id="" + notificationId);        }    }   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityButtonTest.java]:[VERSION_CODES]:[1]:method_text:[REQUEST_ACCESSIBILITY_BUTTON)                        == FLAG_REQUEST_ACCESSIBILITY_BUTTON);    }}])', 1), ('([1:_target/com/android/test/usesnativesharedlibrary/LoadTest.java]:[VERSION_CODES]:[1]:method_text:[()));    }    /**     * Tests if libs listed in unavailable.txt are all non-loadable     */   ])', 1), ('([1:/android/location/cts/gnss/GnssMeasurementRegistrationTest.java]:[VERSION_CODES]:[1]:method_text:[ents.  Retry outdoors?"",                !events.isEmpty());        softAssert.assertAll();    }}])', 1), ('([1:/android/app/cts/ActivityManagerProcessStateTest.java]:[VERSION_CODES]:[1]:method_text:[ /**     * Test that switching between two ""can\'t save state"" apps is handled properly.     */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[ { }        }    }    /** Verifies that getExtensionVersion only return existing versions */   ])', 1), ('([1:/android/os/ext/cts/SdkExtensionsTest.java]:[VERSION_CODES]:[1]:method_text:[versions yet.            assertEquals(0, SdkExtensions.getExtensionVersion(sdk));        }    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[VERSION_CODES]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/AlwaysOnVpnUnsupportedTest.java]:[android.os.Build.VERSION]:[1]:method_text:[AYS_ON}</li> * </ul> */public class AlwaysOnVpnUnsupportedTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[n(PERMISSION_HELD_BY_SHELL))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[ss,                () -> sTestApis.permissions().withoutPermission(INSTALL_PERMISSION));    }   ])', 1), ('([2:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[2]:method_text:[ON_NOT_HELD_BY_SHELL_PRE_S))                    .isEqualTo(PERMISSION_DENIED);        }    }   ])', 1), ('([1:/test/java/com/android/bedstead/nene/permissions/PermissionsTest.java]:[VERSION_CODES]:[1]:method_text:[all the testapp without granting all runtime    //  permissions, add a test that this works pre-Q}])', 1), ('([1:/android/alarmmanager/cts/BasicApiTests.java]:[VERSION_CODES]:[1]:method_text:[   public void onAlarm() {            onReceive(null, new Intent(mTargetAction));        }    }}])', 1), ('([2:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[VERSION_CODES]:[2]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/com/android/cts/dexmetadata/InstallDexMetadataTest.java]:[android.os.Build.VERSION]:[1]:method_text:[  }    /**     * Verify that we installed the .dm files for base (no split install).     */   ])', 1), ('([1:/android/mediav2/cts/ExtractorUnitTest.java]:[VERSION_CODES]:[1]:method_text:[lic static class TestApi {        @Rule        public TestName testName = new TestName();       ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[public void setUp() {        assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);    }   ])', 1), ('([1:/android/media/mediaparser/cts/MediaParserTest.java]:[VERSION_CODES]:[1]:method_text:[aParser.getLogSessionId()).isSameInstanceAs(logSessionId);        mediaParser.release();    }   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[sCoupledSinkSupportedAtSource());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[VERSION_CODES]:[1]:method_text:[_SOURCE, info.getR2DeviceInfo());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Video_ThumbnailsTest.java]:[VERSION_CODES]:[1]:method_text:[mVolumeName);        mExternalVideo = MediaStore.Video.Media.getContentUri(mVolumeName);    }   ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[VERSION_CODES]:[1]:method_text:[* Verify the correct decoding of USAC bitstreams with different MPEG-D DRC effect types.     */   ])', 1)]"	""	""	"[('VERSION_CODES', 120), ('android.os.Build.VERSION', 9)]"	"[('[android.accessibilityservice.cts.AccessibilityButtonSdk29Test postTestTearDown None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 2), ('[android.location.cts.fine.LocationManagerFineTest currentTimeMillis None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccOpenLogicalChannelWithInvalidP2 None]', 2), ('[android.carrierapi.cts.CarrierApiTest testIccTransmitApduLogicalChannel None]', 2), ('[android.rotationresolverservice.cts.CtsRotationResolverServiceDeviceTest clearTestableRotationResolverService None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testNoLegacyOnQ None]', 2), ('[android.os.cts.uffdgc.UserfaultfdTest isAutomotive None]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry None]', 2), ('[android.media.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest None]', 2), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest dropShellPermissionIdentity None]', 2), ('[android.location.cts.privileged.GnssMeasurementRegistrationTest testGnssMeasurementRegistration_enableFullTracking None]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability None]', 1), ('[com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest testSetNotExistCertInstallerPackage None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testRegisterGnssNavigationMessageCallback None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.net.cts.ProxyInfoTest testBuildPacProxy None]', 1), ('[android.location.cts.gnss.GnssNavigationMessageTest testGnssNavigationMessageMandatoryFieldRanges None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_noConversationTitle None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withConversationTitle_legacy None]', 1), ('[android.app.cts.NotificationTest testMessagingStyle_isGroupConversation_withoutConversationTitle_legacy None]', 1), ('[android.location.cts.privileged.GnssLocationValuesTest dropShellPermissionIdentity None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSetOnServiceDeadCallback None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None]', 1), ('[android.net.cts.NetworkWatchlistTest isAtLeastP None]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection None]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection None]', 1), ('[android.bootstats.cts.BootStatsHostTest testBootStats None]', 1), ('[android.app.cts.AlarmManagerTest testSetAlarmClock None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.media.cts.MediaRecorderTest MediaRecorderTest None]', 1), ('[android.mediav2.cts.CodecEncoderSurfaceTest isHandheld None]', 1), ('[android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleWithoutFocusedEditorView None]', 1), ('[android.omapi.accesscontrol2.cts.AccessControlTest OnConnectedListener None]', 1), ('[android.security.cts.VerifiedBootTest testVerifiedBootSupport None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 1), ('[android.scopedstorage.cts.ScopedStorageTest testInstantAppsCantAccessExternalStorage None]', 1), ('[android.app.role.cts.RoleManagerTest cannotBypassRoleQualificationWithoutPermission None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testUserRejectionWithSpecificSsid None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact None]', 1), ('[com.android.cts.deviceadmin.DeviceAdminPasswordTest testResetPasswordDeprecated None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testAccuracyFields None]', 1), ('[android.location.cts.gnss.GnssLocationValuesTest testLocationRegularFields None]', 1), ('[android.location.cts.privileged.PrivilegedLocationPermissionTest testExtraLocationControllerPackage None]', 1), ('[android.app.cts.NotificationManagerTest testPostPCanToggleAlarmsMediaSystemTest None]', 1), ('[android.app.cts.NotificationManagerTest testGetSuppressedVisualEffects_ranking None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testSetNotificationPolicy_P_setOldNewFields None]', 1), ('[android.app.cts.NotificationManagerTest testNotificationListener_cancelNotifications None]', 1), ('[android.accessibilityservice.cts.AccessibilityButtonTest testUpdateRequestAccessibilityButtonFlag_targetSdkGreaterThanQ_ignoresUpdate None]', 1), ('[android.location.cts.gnss.GnssMeasurementRegistrationTest testGnssMeasurementRegistration None]', 1), ('[android.app.cts.ActivityManagerProcessStateTest testCantSaveStateLaunchAndBackground None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testBadArgument None]', 1), ('[android.os.ext.cts.SdkExtensionsTest testValidValues None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withPermission_shellPermission_permissionIsGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_alreadyGranted_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest autoclose_withoutPermission_permissionIsGrantedAgain None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_installPermission_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_permissionIsNotGranted None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_permissionIsAlreadyGrantedInInstrumentedApp_androidPreQ_throwsException None]', 1), ('[test.java.com.android.bedstead.nene.permissions.PermissionsTest withoutPermission_androidSAndAbove_restoresPreviousPermissionContext None]', 1), ('[android.alarmmanager.cts.BasicApiTests testSetAlarmClock None]', 1), ('[android.mediav2.cts.ExtractorUnitTest TestName None]', 1), ('[android.media.mediaparser.cts.MediaParserTest testLogSessionId None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiCoupledSink None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdR2Info None]', 1), ('[android.media.cts.DecoderTestXheAac isAlias None]', 1)]"
"246:691929) 9.1  . Permissions"	"9.1"	"C-0-12"	"9.1/C-0-12"	"09010000.670012"	"""C-0-12] MUST NOT provide any custom functions or APIs to bypass the permission restrictions defined in setPermissionPolicy and setPermissionGrantState APIs. """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-2"	"2.2.7.2/H-1-2"	"02020702.720102"	"""7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 4 megapixels supporting video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID. && 7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 4 megapixels supporting video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID. | 7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 5 megapixels and support video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"101:372410) 3.15  . Instant Apps"	"3.15"	"C-0-7"	"3.15/C-0-7"	"03150000.670007"	"""C-0-7] MUST allow running Instant Apps to be accessed from the Recents function if the Recents function is available on the device. If device implementations support Instant Apps, they: """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	""	"9.8.12"	"09081200.48"	"""data-text=""9.8.12. Music Recognition"">9.8.12. Music Recognition Android, through the System API MusicRecognitionManager, supports a mechanism for device implementations to request music recognition, given an audio record, and delegate the music recognition to a privileged app implementing the MusicRecognitionService API. If device implementations include a service that implements the System API MusicRecognitionManager or any proprietary service that streams audio data as described as above, they: [C-1-1] MUST enforce that the caller of MusicRecognitionManager holds the MANAGE_MUSIC_RECOGNITION permission [C-1-2] MUST enforce that a single, pre-installed, music recognition application implements MusicRecognitionService. [C-1-3] MUST NOT allow users to replace the MusicRecognitionManagerService or MusicRecognitionService with a user-installable application or service. [C-1-4] MUST ensure that when MusicRecognitionManagerService accesses the audio record and forwards it to the application implementing the MusicRecognitionService, the audio access is tracked via invocations of AppOpsManager.noteOp / startOp. If device implementations of MusicRecognitionManagerService or MusicRecognitionService store any audio data captured, they: [C-2-1] MUST NOT store any raw audio or audio fingerprints on disk at all, or in memory for longer than 14 days. [C-2-2] MUST NOT share such data beyond the MusicRecognitionService, except with explicit user consent every time it is shared. <h4 id=""9813_sensorprivacymanager"" """	""	""	"AppOpsManager.noteOp MANAGE_MUSIC_RECOGNITION"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java', 1), ('/home/gpoor/cts-12-source/cts/tests/musicrecognition/src/android/musicrecognition/cts/MusicRecognitionManagerTest.java', 1)]"	"[('(1,AppOpsManager.noteOp,/android/app/cts/ActivityManagerApi29Test.java)', 1), ('(1,MANAGE_MUSIC_RECOGNITION,/android/musicrecognition/cts/MusicRecognitionManagerTest.java)', 1)]"	"[('([1:/android/app/cts/ActivityManagerApi29Test.java]:[AppOpsManager.noteOp]:[1]:method_text:[ access count and reject count     * in HistoricalOps.      *     * @throws Exception     */   ])', 1), ('([1:/android/musicrecognition/cts/MusicRecognitionManagerTest.java]:[MANAGE_MUSIC_RECOGNITION]:[1]:method_text:[doptShellPermissionIdentity(                ""android.permission.MANAGE_MUSIC_RECOGNITION"");    }}])', 1)]"	""	""	"[('AppOpsManager.noteOp', 1), ('MANAGE_MUSIC_RECOGNITION', 1)]"	"[('[android.app.cts.ActivityManagerApi29Test testFgsLocationWithAppOps None]', 1), ('[android.musicrecognition.cts.MusicRecognitionManagerTest testRecordAudioOpsAreTracked None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-1-7"	"7.4.2.4/C-1-7"	"07040204.670107"	"""C-1-7] MUST process the AAA server certificate as described in Hotspot 2.0 R3 specification."""	""	""	"AAA"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/DatasetFilteringTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/DatasetFilteringTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/DnsResolverTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/pm/cts/ChecksumsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/jvmti/redefining/app/src/android/jvmti/cts/JvmtiRedefineClassesTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFilteringTest.java', 2), ('/home/gpoor/cts-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/long_to_int/Test_long_to_int.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFilteringTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestExp.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestClamp.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/FontCoverageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/calendarprovider/src/android/provider/cts/calendar/CalendarTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/hardware/src/android/hardware/lights/cts/LightsManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionRekeyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/RunningAppProcessInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/VirtualContainerActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/fonts/NativeSystemFontTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/identity/src/android/security/identity/cts/HkdfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/SignatureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/StagefrightTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ColorTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/CVE_2021_0691.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestCopysign.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/LruCacheTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestMax.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/MacTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/SplitApp/src/com/android/cts/splitapp/SplitAppTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/WorkSourceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/lights/cts/LightsManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/AmbiguousBundlesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SpannableStringBuilderTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/V3SigningSchemeRotation/src/android/appsecurity/cts/v3rotationtests/V3RotationTest.java', 1)]"	"[('(2,AAA,/android/autofillservice/cts/inline/InlineFilteringTest.java)', 2), ('(1833,AAA,/android/jvmti/cts/JvmtiRedefineClassesTest.java)', 2), ('(2,AAA,/android/security/identity/cts/HkdfTest.java)', 2), ('(2,AAA,/android/hardware/lights/cts/LightsManagerTest.java)', 2), ('(1,AAA,/com/android/cts/splitapp/SplitAppTest.java)', 2), ('(6,AAA,/android/text/cts/SelectionTest.java)', 1), ('(1,AAA,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(10,AAA,/android/net/cts/DnsResolverTest.java)', 1), ('(2,AAA,/android/renderscript/cts/generated/TestExp.java)', 1), ('(2,AAA,/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java)', 1), ('(3,AAA,/android/content/pm/cts/ChecksumsTest.java)', 1), ('(1,AAA,/android/renderscript/cts/generated/TestClamp.java)', 1), ('(3,AAA,/android/text/cts/FontCoverageTest.java)', 1), ('(4,AAA,/android/provider/cts/calendar/CalendarTest.java)', 1), ('(1,AAA,/android/net/cts/Ikev2VpnTest.java)', 1), ('(1,AAA,/android/net/ipsec/ike/cts/IkeSessionRekeyTest.java)', 1), ('(1,AAA,/android/security/cts/RunningAppProcessInfoTest.java)', 1), ('(2,AAA,/android/autofillservice/cts/VirtualContainerActivityTest.java)', 1), ('(1,AAA,/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java)', 1), ('(1,AAA,/android/graphics/fonts/NativeSystemFontTest.java)', 1), ('(10,AAA,/android/widget/cts/TextViewTest.java)', 1), ('(2,AAA,/dot/junit/opcodes/long_to_int/Test_long_to_int.java)', 1), ('(1,AAA,/android/keystore/cts/SignatureTest.java)', 1), ('(1,AAA,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(4,AAA,/android/text/cts/StaticLayoutTest.java)', 1), ('(30,AAA,/android/security/cts/StagefrightTest.java)', 1), ('(2,AAA,/android/graphics/cts/ColorTest.java)', 1), ('(2,AAA,/android/security/cts/CVE_2021_0691.java)', 1), ('(15,AAA,/android/webkit/cts/WebSettingsTest.java)', 1), ('(1,AAA,/android/renderscript/cts/generated/TestCopysign.java)', 1), ('(2,AAA,/android/util/cts/LruCacheTest.java)', 1), ('(1,AAA,/android/renderscript/cts/generated/TestMax.java)', 1), ('(1,AAA,/android/keystore/cts/MacTest.java)', 1), ('(12,AAA,/android/autofillservice/cts/DatasetFilteringTest.java)', 1), ('(12,AAA,/android/autofillservice/cts/commontests/DatasetFilteringTest.java)', 1), ('(2,AAA,/android/net/ipsec/ike/cts/IkeSessionPskTest.java)', 1), ('(1,AAA,/android/os/cts/WorkSourceTest.java)', 1), ('(2,AAA,/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java)', 1), ('(1,AAA,/android/security/cts/AmbiguousBundlesTest.java)', 1), ('(1,AAA,/android/text/cts/SpannableStringBuilderTest.java)', 1), ('(1,AAA,/android/appsecurity/cts/v3rotationtests/V3RotationTest.java)', 1)]"	"[('([2:/android/autofillservice/cts/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[callback.assertUiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }   ])', 3), ('([2:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[callback.assertUiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }   ])', 3), ('([1:/android/autofillservice/cts/inline/InlineFilteringTest.java]:[AAA]:[1]:method_text:[.setText(""""));        mUiBot.waitForIdleSync();        mUiBot.assertDatasets(""sergey"");    }   ])', 2), ('([1:/android/autofillservice/cts/inline/InlineFilteringTest.java]:[AAA]:[1]:method_text:[rIdleSync();        mUiBot.assertDatasets(""pinned"");        sReplier.getNextFillRequest();    }}])', 2), ('([365:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAA]:[365]:method_text:[             ""TRANSFORMED - post Finish private method call"",                }, output);    }   ])', 2), ('([1252:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAA]:[1252]:method_text:[AAAAAAAAAAAcAAAAcAAAAAIA"" +                    ""AAAAAAAAAQAAAAAAAAAAEAAAAQAAAHAAAAA=""),    };   ])', 2), ('([216:/android/jvmti/cts/JvmtiRedefineClassesTest.java]:[AAA]:[216]:method_text:[      for (ExpectedMethod m : methods) {            m.ensureHasMethod(target);        }    }   ])', 2), ('([2:/android/security/identity/cts/HkdfTest.java]:[AAA]:[2]:method_text:[ hexDecode(ikmHex), hexDecode(saltHex),                        hexDecode(infoHex), size));    }}])', 2), ('([1:/com/android/cts/splitapp/SplitAppTest.java]:[AAA]:[1]:method_text:[);            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            return i;        }    }   ])', 2), ('([1:/android/text/cts/SelectionTest.java]:[AAA]:[1]:method_text:[getSelectionStart(builder));        assertEquals(3, Selection.getSelectionEnd(builder));    }   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[AAA]:[1]:method_text:[getSelectionStart(builder));        assertEquals(8, Selection.getSelectionEnd(builder));    }   ])', 1), ('([2:/android/text/cts/SelectionTest.java]:[AAA]:[2]:method_text:[getSelectionStart(builder));        assertEquals(5, Selection.getSelectionEnd(builder));    }   ])', 1), ('([2:/android/text/cts/SelectionTest.java]:[AAA]:[2]:method_text:[etSelectionStart(builder));        assertEquals(12, Selection.getSelectionEnd(builder));    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestConvert.java]:[AAA]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[AAA]:[1]:method_text:[    assertGreaterThan(mMsg + "" No question found"", mDnsAnswer.getQDCount(), 0);        }    }   ])', 1), ('([5:/android/net/cts/DnsResolverTest.java]:[AAA]:[5]:method_text:[              callback.waitForAnswer());            callback.assertNXDomain();        }    }   ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[AAA]:[1]:method_text:[  latch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS));            } while (retry);        }    }   ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[AAA]:[1]:method_text:[solver.DnsException error) {            mErrorMsg = mMsg + error.getMessage();        }    }   ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[AAA]:[1]:method_text:[         assertTrue(msg + "" returned Ipv4 results"", !callback.hasIpv4Answer());        }    }   ])', 1), ('([1:/android/net/cts/DnsResolverTest.java]:[AAA]:[1]:method_text:[   queryV6 ? !callback.hasIpv4Answer() : !callback.hasIpv6Answer());            }        }    }}])', 1), ('([2:/android/renderscript/cts/generated/TestExp.java]:[AAA]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[AAA]:[2]:method_text:[nCompatMode() {        assumeTrue(""test not applicable when on compat mode"", !mCompatMode);    }}])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[AAA]:[1]:method_text:[    + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }    @LargeTest   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[AAA]:[1]:method_text:[                   + ""e2c8b6baa16ef54014ad6c5b90c37b26b0f5c8aeb01b63a1db2eca133091c8d1"");    }   ])', 1), ('([1:/android/content/pm/cts/ChecksumsTest.java]:[AAA]:[1]:method_text:[                   + ""5f2888afcb71524196dda0d6dd16a6a3292bb75b431b8ff74fb60d796e882f80"");    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestClamp.java]:[AAA]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([3:/android/text/cts/FontCoverageTest.java]:[AAA]:[3]:method_text:[      }        // Unknown locale. Return an empty set.        return UnicodeSet.EMPTY;    }   ])', 1), ('([4:/android/provider/cts/calendar/CalendarTest.java]:[AAA]:[4]:method_text:[tResolver = getInstrumentation().getTargetContext().getContentResolver();    }    @MediumTest   ])', 1), ('([2:/android/hardware/lights/cts/LightsManagerTest.java]:[AAA]:[2]:method_text:[anager.getLightState(mLights.get(i)).getColor()).isEqualTo(0x00);            }        }    }   ])', 1), ('([1:/android/net/cts/Ikev2VpnTest.java]:[AAA]:[1]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionRekeyTest.java]:[AAA]:[1]:method_text:[    mFirstChildSessionCallback.awaitOnClosed();        mIkeSessionCallback.awaitOnClosed();    }}])', 1), ('([1:/android/security/cts/RunningAppProcessInfoTest.java]:[AAA]:[1]:method_text:[se/+"" +                ""/aaa0fee0d7a8da347a0c47cef5249c70efee209e"", (appList.size() == 1));    }}])', 1), ('([2:/android/autofillservice/cts/VirtualContainerActivityTest.java]:[AAA]:[2]:method_text:[nCompatMode() {        assumeTrue(""test not applicable when on compat mode"", !mCompatMode);    }}])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[AAA]:[1]:method_text:[ecutor,                mIkeSessionCallback,                mFirstChildSessionCallback);    }   ])', 1), ('([1:/android/graphics/fonts/NativeSystemFontTest.java]:[AAA]:[1]:method_text:[ }                        }                    }                }            }        }    }}])', 1), ('([8:/android/widget/cts/TextViewTest.java]:[AAA]:[8]:method_text:[w.setFontVariationSettings("""");        assertNull(mTextView.getFontVariationSettings());    }   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[AAA]:[1]:method_text:[ horizontalPosFix;        assertEquals(midOffset, mTextView.getOffsetForPosition(x, y));    }   ])', 1), ('([1:/android/widget/cts/TextViewTest.java]:[AAA]:[1]:method_text:[ertEquals(line.length() + (line.length() - 1) / 2, mTextView.getOffsetForPosition(x, y));    }   ])', 1), ('([1:/dot/junit/opcodes/long_to_int/Test_long_to_int.java]:[AAA]:[1]:method_text:[s Test_long_to_int extends DxTestCase {    /**     * @title Argument = 0xAAAAFFEEDDCCl     */   ])', 1), ('([1:/dot/junit/opcodes/long_to_int/Test_long_to_int.java]:[AAA]:[1]:method_text:[(0xFFEEDDCC, t.run(0xAAAAFFEEDDCCl));    }    /**     * @title Argument = -123456789     */   ])', 1), ('([1:/android/keystore/cts/SignatureTest.java]:[AAA]:[1]:method_text:[e7a42b1ddff0c""));    }    private static final long DAY_IN_MILLIS = TestUtils.DAY_IN_MILLIS;   ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[AAA]:[1]:method_text:[             mPackageManager.hasSystemFeature(PackageManager.FEATURE_SECURE_LOCK_SCREEN);    }   ])', 1), ('([4:/android/text/cts/StaticLayoutTest.java]:[AAA]:[4]:method_text:[draw eventualy calls TextLine.draw which was the problematic method.        layout.draw(c);    }}])', 1), (""([30:/android/security/cts/StagefrightTest.java]:[AAA]:[30]:method_text:[(); // wait for thread to exit so we're sure the player was released      server.join();    }   ])"", 1), ('([2:/android/graphics/cts/ColorTest.java]:[AAA]:[2]:method_text:[sync with colors in android.R.color"",                colors.length, numPublicApiColors);    }   ])', 1), ('([2:/android/security/cts/CVE_2021_0691.java]:[AAA]:[2]:method_text:[e void installPackage() throws Exception {        installPackage(TEST_APP, new String[0]);    }}])', 1), ('([9:/android/webkit/cts/WebSettingsTest.java]:[AAA]:[9]:method_text:[>.<minor>     * Chrome/<major>.<minor>.<branch>.<build>[ Mobile] Safari/<major>.<minor>     */   ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[AAA]:[6]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.     */   ])', 1), ('([1:/android/renderscript/cts/generated/TestCopysign.java]:[AAA]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/util/cts/LruCacheTest.java]:[AAA]:[2]:method_text:[cache.put(""j"", ""JJJ""); // should evict h and i        assertSnapshot(cache, ""j"", ""JJJ"");    }   ])', 1), ('([1:/android/renderscript/cts/generated/TestMax.java]:[AAA]:[1]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/android/keystore/cts/MacTest.java]:[AAA]:[1]:method_text:[25738990e6d0""));    }    private static final long DAY_IN_MILLIS = TestUtils.DAY_IN_MILLIS;   ])', 1), ('([2:/android/autofillservice/cts/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[ould be shown again        changeUsername("""");        mUiBot.assertDatasets(aa, ab, b);    }   ])', 1), ('([1:/android/autofillservice/cts/DatasetFilteringTest.java]:[AAA]:[1]:method_text:[callback.assertUiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }   ])', 1), ('([2:/android/autofillservice/cts/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[ null value always shown        changeUsername(""aaa"");        mUiBot.assertDatasets(b);    }   ])', 1), ('([1:/android/autofillservice/cts/DatasetFilteringTest.java]:[AAA]:[1]:method_text:[show the datasets now to protect privacy.            mUiBot.assertDatasets(c);        }    }   ])', 1), ('([2:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[gain        changeUsername("""");        mUiBot.assertDatasets(aa, ab, b);    }    @Presubmit   ])', 1), ('([1:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[AAA]:[1]:method_text:[UiHiddenEvent(mActivity.getUsername());        mUiBot.assertNoDatasets();    }    @Presubmit   ])', 1), ('([2:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[AAA]:[2]:method_text:[ null value always shown        changeUsername(""aaa"");        mUiBot.assertDatasets(b);    }   ])', 1), ('([1:/android/autofillservice/cts/commontests/DatasetFilteringTest.java]:[AAA]:[1]:method_text:[show the datasets now to protect privacy.            mUiBot.assertDatasets(c);        }    }   ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[AAA]:[1]:method_text:[rmissionAfterClass() throws Exception {        setAppOp(OP_MANAGE_IPSEC_TUNNELS, false);    }   ])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[AAA]:[1]:method_text:[p);        verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);    }   ])', 1), ('([1:/android/os/cts/WorkSourceTest.java]:[AAA]:[1]:method_text:[        assertFalse(ws.isEmpty());        ws.clear();        assertTrue(ws.isEmpty());    }   ])', 1), ('([2:/android/hardware/lights/cts/LightsManagerTest.java]:[AAA]:[2]:method_text:[getColor()).isEqualTo(                        initialColors[i]);            }        }    }   ])', 1), ('([2:/android/net/ipsec/ike/cts/IkeSessionMschapV2Test.java]:[AAA]:[2]:method_text:[ecutor,                mIkeSessionCallback,                mFirstChildSessionCallback);    }   ])', 1), ('([1:/android/security/cts/AmbiguousBundlesTest.java]:[AAA]:[1]:method_text:[mbiguator);    }    /*     * b/71714464     */    @SecurityTest(minPatchLevel = ""2018-04"")   ])', 1), ('([1:/android/text/cts/SpannableStringBuilderTest.java]:[AAA]:[1]:method_text:[Watcher replaces each character with \'a\'.        assertEquals(""aaaaa"", builder.toString());    }}])', 1), ('([1:/android/appsecurity/cts/v3rotationtests/V3RotationTest.java]:[AAA]:[1]:method_text:[2100d260fb1d1f176cf9b7fa60098bfd24319f4905a3e5fda1""                    + ""00a6fe1a2ab19ff09e"";   ])', 1)]"	""	""	"[('AAA', 79)]"	"[('[android.autofillservice.cts.DatasetFilteringTest testFilter None]', 5), ('[android.autofillservice.cts.commontests.DatasetFilteringTest testFilter None]', 5), ('[android.autofillservice.cts.inline.InlineFilteringTest testFiltering_privacy_textReplacement None]', 2), ('[android.autofillservice.cts.inline.InlineFilteringTest testFiltering_pinnedAreNotFiltered None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest Finish None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest testSucessfulRetransform None]', 2), ('[android.jvmti.cts.JvmtiRedefineClassesTest testRetransformFailures None]', 2), ('[android.security.identity.cts.HkdfTest testVectors None]', 2), ('[android.hardware.lights.cts.LightsManagerTest testControlMultipleLights None]', 2), ('[android.text.cts.SelectionTest testMoveUpAfterTyping None]', 1), ('[android.text.cts.SelectionTest testMoveDownAfterTyping None]', 1), ('[android.text.cts.SelectionTest testMultilineLengthMoveDownAfterSelection None]', 1), ('[android.text.cts.SelectionTest testMultilineLengthMoveUpAfterSelection None]', 1), ('[android.net.cts.DnsResolverTest getTestableNetworks None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryNXDomainInlineWithPrivateDns None]', 1), ('[android.net.cts.DnsResolverTest testRawQueryCancel None]', 1), ('[android.net.cts.DnsResolverTest testCancelBeforeQuery None]', 1), ('[android.net.cts.DnsResolverTest testQueryCancelForInetAddress None]', 1), ('[android.net.cts.DnsResolverTest testPrivateDnsBypass None]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testDatasetFiltering None]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllChecksums None]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedV1AllChecksums None]', 1), ('[android.content.pm.cts.ChecksumsTest testFixedAllIncrementalChecksums None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionRekeyTest testRekeyTransportModeChildSa None]', 1), ('[android.security.cts.RunningAppProcessInfoTest testRunningAppProcessInfo None]', 1), ('[android.autofillservice.cts.VirtualContainerActivityTest testDatasetFiltering None]', 1), ('[android.graphics.fonts.NativeSystemFontTest testMatchFamilyStyleCharacter_notCrash None]', 1), ('[android.widget.cts.TextViewTest testSetGetFontVariationSettings None]', 1), ('[android.widget.cts.TextViewTest testGetOffsetForPositionSingleLineLtr None]', 1), ('[android.widget.cts.TextViewTest testGetOffsetForPositionMultiLineLtr None]', 1), ('[dot.junit.opcodes.long_to_int.Test_long_to_int testN1 None]', 1), ('[android.text.cts.StaticLayoutTest testBidiVisibleEnd None]', 1), ('[android.security.cts.StagefrightTest testStagefright_cve_2017_13279 None]', 1), ('[com.android.cts.splitapp.SplitAppTest testFeatureBase None]', 1), ('[android.security.cts.CVE_2021_0691 testRunDeviceTest None]', 1), ('[android.webkit.cts.WebSettingsTest WebSettingsTest None]', 1), ('[android.webkit.cts.WebSettingsTest testAllowMixedMode None]', 1), ('[android.util.cts.LruCacheTest testEvictionWithCustomSizes None]', 1), ('[android.autofillservice.cts.DatasetFilteringTest testFilter_injectingEvents None]', 1), ('[android.autofillservice.cts.DatasetFilteringTest testFilter_usingKeyboard None]', 1), ('[com.android.cts.splitapp.SplitAppTest testFeatureWarmBase None]', 1), ('[android.autofillservice.cts.commontests.DatasetFilteringTest testFilter_injectingEvents None]', 1), ('[android.autofillservice.cts.commontests.DatasetFilteringTest testFilter_usingKeyboard None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest setUpTunnelPermissionBeforeClass None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 None]', 1), ('[android.os.cts.WorkSourceTest testIsEmptyOnClear None]', 1), ('[android.security.cts.AmbiguousBundlesTest test_android_CVE_2017_13311 None]', 1), ('[android.text.cts.SpannableStringBuilderTest testGetTextWatcherDepth None]', 1)]"
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-8"	"2.2.7.2/H-1-8"	"02020702.720108"	"""7.5/H-1-8] MUST support CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_RAW and android.graphics.ImageFormat.RAW_SENSOR for the primary back camera. <h4 id=""2273_hardware"" """	""	""	"REQUEST_AVAILABLE_CAPABILITIES_RAW CameraMetadata.REQUEST android.graphics.ImageFormat.RAW RAW_SENSOR"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 7), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 5), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StillCaptureTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureRawTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureRawTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/SystemFeaturesTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CtsUtilsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/PerformanceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ZoomCaptureTest.java', 1)]"	"[('(8,RAW_SENSOR,/android/hardware/camera2/cts/ImageReaderTest.java)', 2), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CaptureRequestTest.java)', 2), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CaptureRequestTest.java)', 2), ('(2,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CameraDeviceTest.java)', 2), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CameraDeviceTest.java)', 2), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/CaptureResultTest.java)', 2), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CaptureResultTest.java)', 2), ('(2,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/RobustnessTest.java)', 2), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/RobustnessTest.java)', 2), ('(3,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/DngCreatorTest.java)', 2), ('(4,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/StaticMetadataTest.java)', 2), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/StaticMetadataTest.java)', 2), ('(3,RAW_SENSOR,/android/hardware/camera2/cts/BurstCaptureRawTest.java)', 2), ('(4,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/StillCaptureTest.java)', 2), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/StillCaptureTest.java)', 2), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/PerformanceTest.java)', 2), ('(1,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/app/cts/SystemFeaturesTest.java)', 1), ('(10,RAW_SENSOR,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(4,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(10,RAW_SENSOR,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,RAW_SENSOR,/android/hardware/camera2/cts/CtsUtilsTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/ZoomCaptureTest.java)', 1), ('(2,RAW_SENSOR,/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java)', 1), ('(3,REQUEST_AVAILABLE_CAPABILITIES_RAW,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(5,RAW_SENSOR,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(1,CameraMetadata.REQUEST,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(5,RAW_SENSOR,/android/hardware/camera2/cts/DngCreatorTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/StillCaptureTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ AE/AF can settle.     * - Capturing with a request targeting all three output streams.     */   ])', 4), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[/false);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[*/true);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[SENSOR);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[* Test two image stream (YUV420_888 and RAW_SENSOR) capture by using ImageReader.     *     */   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[* ImageReader factory method that has usage flag argument, and uses a custom usage flag.     */   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[geReader with the     * ImageReader factory method that has usage flag argument.     *     */   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[EG outputs for the same frame match for each YUV     * resolution and format supported.     */   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 2), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 2), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[RAW_SENSOR]:[1]:method_text:[ack level should be     *   close enough to the optical black level values.     * </p>     */   ])', 2), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[2]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 2), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[RAW_SENSOR]:[1]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 2), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 2), ('([1:/android/hardware/camera2/cts/CaptureResultTest.java]:[RAW_SENSOR]:[1]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 2), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 2), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 2), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[RAW_SENSOR]:[2]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[1]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[1]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[pported yet.        }    }    /**     * Test values for the available session keys.     */   ])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ cross-check the high speed sizes and fps ranges from     * the StreamConfigurationMap.     */   ])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[1]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[1]:method_text:[     }    }    /**     * Test values for static metadata used by the RAW capability.     */   ])', 2), ('([3:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[3]:method_text:[ cross-check the high speed sizes and fps ranges from     * the StreamConfigurationMap.     */   ])', 2), ('([1:/android/hardware/camera2/cts/StaticMetadataTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[ces.        }    }    /**     * Test max number of output stream reported by device     */   ])', 2), ('([3:/android/hardware/camera2/cts/StaticMetadataTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[3]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 2), ('([1:/android/hardware/camera2/cts/StaticMetadataTest.java]:[RAW_SENSOR]:[1]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 2), ('([1:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[RAW_SENSOR]:[1]:method_text:[own();    }    /**     * Verify raw sensor size information is correctly configured.     */   ])', 2), ('([2:/android/hardware/camera2/cts/BurstCaptureRawTest.java]:[RAW_SENSOR]:[2]:method_text:[            }            } finally {                closeDevice();            }        }    }}])', 2), ('([1:/android/hardware/camera2/cts/StillCaptureTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[t basic Raw ZSL capture. Raw buffer avaiablility is checked, but raw buffer data is not.     */   ])', 2), ('([1:/android/hardware/camera2/cts/StillCaptureTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[e scan is triggered to make sure the AF     * converges in reasonable time.     * </p>     */   ])', 2), ('([2:/android/hardware/camera2/cts/StillCaptureTest.java]:[RAW_SENSOR]:[2]:method_text:[sRegionsSupported && mStaticInfo.hasFocuser();        }        return isRegionsSupported;    }}])', 2), ('([2:/android/hardware/camera2/cts/PerformanceTest.java]:[RAW_SENSOR]:[2]:method_text:[, and the frame duration, which is the timestamp     * gap between results.     * </p>     */   ])', 2), ('([1:/android/app/cts/SystemFeaturesTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[          if (camera != null) {                camera.release();            }        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[2]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([6:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[6]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[REQUEST_AVAILABLE_CAPABILITIES_RAW]:[1]:method_text:[nputSize));            }        }    }    /**     * Check depth output capability     */   ])', 1), ('([5:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RAW_SENSOR]:[5]:method_text:[nputSize));            }        }    }    /**     * Check depth output capability     */   ])', 1), ('([1:/android/hardware/camera2/cts/CtsUtilsTest.java]:[RAW_SENSOR]:[1]:method_text:[ int getPixelStride() { return 1; }    @Override public ByteBuffer getBuffer() { return buffer; }}])', 1), ('([2:/android/hardware/camera2/cts/ZoomCaptureTest.java]:[RAW_SENSOR]:[2]:method_text:[ fail(""wait for image available timed out after "" + timeout + ""ms"");            }        }    }}])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[     testMultiResolutionImageReaderForFormat(ImageFormat.RAW_SENSOR, /*repeating*/false);    }   ])', 1), ('([1:/android/hardware/camera2/cts/MultiResolutionImageReaderTest.java]:[RAW_SENSOR]:[1]:method_text:[      testMultiResolutionImageReaderForFormat(ImageFormat.RAW_SENSOR, /*repeating*/true);    }   ])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[CameraMetadata.REQUEST]:[1]:method_text:[  if (inputWriter != null) {                inputWriter.close();            }        }    }   ])', 1), ('([3:/android/hardware/camera2/cts/DngCreatorTest.java]:[RAW_SENSOR]:[3]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1)]"	""	""	"[('RAW_SENSOR', 52), ('REQUEST_AVAILABLE_CAPABILITIES_RAW', 36), ('CameraMetadata.REQUEST', 1)]"	"[('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters None]', 4), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 4), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables None]', 4), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageBasic None]', 4), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail None]', 4), ('[android.hardware.camera2.cts.DngCreatorTest testDngRenderingByBitmapFactor None]', 4), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStreamConfigurationMap None]', 4), ('[android.hardware.camera2.cts.StaticMetadataTest testCapabilities None]', 4), ('[android.hardware.camera2.cts.ImageReaderTest testRaw None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingRaw None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testLongProcessingRepeatingRaw None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpegWithUsageFlag None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRaw None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderPrivateWithProtectedUsageFlag None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRawWithUsageFlag None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 2), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes None]', 2), ('[android.hardware.camera2.cts.CaptureRequestTest testBlackLevelLock None]', 2), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStaticRawCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testUltraHighResolutionSensorCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testKeys None]', 2), ('[android.hardware.camera2.cts.StaticMetadataTest testHwSupportedLevel None]', 2), ('[android.hardware.camera2.cts.BurstCaptureRawTest testTimestamp None]', 2), ('[android.hardware.camera2.cts.StillCaptureTest testBasicRawCapture None]', 2), ('[android.hardware.camera2.cts.StillCaptureTest testBasicRawZslCapture None]', 2), ('[android.hardware.camera2.cts.StillCaptureTest testFullRawCapture None]', 2), ('[android.hardware.camera2.cts.StillCaptureTest testFullRawZSLCapture None]', 2), ('[android.hardware.camera2.cts.StillCaptureTest testFocalLengths None]', 2), ('[android.hardware.camera2.cts.PerformanceTest testSingleCapture None]', 2), ('[android.app.cts.SystemFeaturesTest testCameraFeatures None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageBasicMaximumResolution None]', 1), ('[android.hardware.camera2.cts.CtsUtilsTest testCopyPad3to5 None]', 1), ('[android.hardware.camera2.cts.ZoomCaptureTest testRawZoomCapture None]', 1), ('[android.hardware.camera2.cts.MultiResolutionImageReaderTest testMultiResolutionImageReaderRaw None]', 1), ('[android.hardware.camera2.cts.MultiResolutionImageReaderTest testMultiResolutionImageReaderRepeatingRaw None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryMaximumResolutionReprocessConfigurations None]', 1)]"
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-7"	"2.2.7.2/H-1-7"	"02020702.720107"	"""7.5/H-1-7] For apps targeting API level 31 or higher, the camera device MUST NOT support JPEG capture resolutions smaller than 1080p for both primary cameras."""	""	""	"JPEG"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 10), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ReprocessCaptureTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/OfflineSessionTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 7), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ExifInterfaceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapFactoryTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/ImageDecoderTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeImageReaderTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/NativeImageReaderTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/CameraPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/Bitmap_CompressFormatTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/Camera_SizeTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_DownloadsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/TriggerContentTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/scopedstorage/legacy/src/android/scopedstorage/cts/legacy/LegacyStorageTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/content/src/android/content/cts/ClipboardManagerTest.java', 1)]"	"[('(89,JPEG,/android/hardware/camera2/cts/ImageReaderTest.java)', 2), ('(9,JPEG,/android/hardware/camera2/cts/CameraDeviceTest.java)', 2), ('(8,JPEG,/android/hardware/camera2/cts/NativeImageReaderTest.java)', 2), ('(19,JPEG,/android/hardware/camera2/cts/StaticMetadataTest.java)', 2), ('(6,JPEG,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(3,JPEG,/android/provider/cts/media/MediaStore_DownloadsTest.java)', 1), ('(29,JPEG,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(6,JPEG,/android/permission/cts/CameraPermissionTest.java)', 1), ('(22,JPEG,/android/hardware/camera2/cts/OfflineSessionTest.java)', 1), ('(5,JPEG,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(12,JPEG,/android/media/cts/ExifInterfaceTest.java)', 1), ('(27,JPEG,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(1,JPEG,/android/jobscheduler/cts/TriggerContentTest.java)', 1), ('(1,JPEG,/android/scopedstorage/cts/legacy/LegacyStorageTest.java)', 1), ('(6,JPEG,/android/os/cts/StrictModeTest.java)', 1), ('(6,JPEG,/android/graphics/cts/BitmapFactoryTest.java)', 1), ('(3,JPEG,/android/graphics/cts/Bitmap_CompressFormatTest.java)', 1), ('(71,JPEG,/android/hardware/camera2/cts/RobustnessTest.java)', 1), ('(13,JPEG,/android/hardware/cts/Camera_SizeTest.java)', 1), ('(1,JPEG,/android/content/cts/ClipboardManagerTest.java)', 1), ('(119,JPEG,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(2,JPEG,/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java)', 1), ('(97,JPEG,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 1), ('(8,JPEG,/android/graphics/cts/ImageDecoderTest.java)', 1), ('(33,JPEG,/android/hardware/camera2/cts/ReprocessCaptureTest.java)', 1)]"	"[('([5:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[5]:method_text:[ }    @Override    public void tearDown() throws Exception {        super.tearDown();    }   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[1]:method_text:[/ true);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[3]:method_text:[/false);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[3]:method_text:[*/true);            } finally {                closeDevice(id);            }        }    }   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[1]:method_text:[sing ImageReader.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 2), ('([4:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[4]:method_text:[ge flag argument.     *     * <p>Both stream formats are mandatory for Camera2 API</p>     */   ])', 2), ('([3:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[3]:method_text:[* Test two image stream (YUV420_888 and RAW_SENSOR) capture by using ImageReader.     *     */   ])', 2), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[1]:method_text:[EG outputs for the same frame match for each YUV     * resolution and format supported.     */   ])', 2), ('([66:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[66]:method_text:[    }    /**     * Test that images captured after discarding free buffers are valid.     */   ])', 2), ('([2:/android/hardware/camera2/cts/ImageReaderTest.java]:[JPEG]:[2]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 2), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[JPEG]:[1]:method_text:[           mSession.close();        }    }    /**     * Test session configuration.     */   ])', 2), ('([8:/android/hardware/camera2/cts/CameraDeviceTest.java]:[JPEG]:[8]:method_text:[    /**     * Verify audio restrictions are set properly for single CameraDevice usage     */   ])', 2), ('([3:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[JPEG]:[3]:method_text:[log for details"",                testJpegNative(mDebugFileNameBase, mOverrideCameraId));    }   ])', 2), ('([3:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[JPEG]:[3]:method_text:[or details"",                testDepthJpegNative(mDebugFileNameBase, mOverrideCameraId));    }   ])', 2), ('([2:/android/hardware/camera2/cts/NativeImageReaderTest.java]:[JPEG]:[2]:method_text:[  private static native boolean testImageReaderCloseAcquiredImagesNative(String overrideCameraId);}])', 2), ('([14:/android/hardware/camera2/cts/StaticMetadataTest.java]:[JPEG]:[14]:method_text:[ces.        }    }    /**     * Test max number of output stream reported by device     */   ])', 2), ('([5:/android/hardware/camera2/cts/StaticMetadataTest.java]:[JPEG]:[5]:method_text:[eraId, capabilityName));            }        }    }    /**     * Test lens facing.     */   ])', 2), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[JPEG]:[1]:method_text:[is test uses STILL_CAPTURE intent, and exercises path where     * enableZsl is enabled.     */   ])', 1), ('([4:/android/hardware/camera2/cts/BurstCaptureTest.java]:[JPEG]:[4]:method_text:[de.     * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.     */   ])', 1), ('([1:/android/hardware/camera2/cts/BurstCaptureTest.java]:[JPEG]:[1]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([3:/android/provider/cts/media/MediaStore_DownloadsTest.java]:[JPEG]:[3]:method_text:[, null)) {            assertEquals(mInitialDownloadsCount, cursor.getCount());        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[JPEG]:[1]:method_text:[ is also     * checked to make sure no frame drop caused by video snapshot.     * </p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[JPEG]:[1]:method_text:[ capture images are validated according to the capture     * configuration.     * </p>     */   ])', 1), ('([27:/android/hardware/camera2/cts/RecordingTest.java]:[JPEG]:[27]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([5:/android/permission/cts/CameraPermissionTest.java]:[JPEG]:[5]:method_text:[ Requires Permission:     * {@link android.Manifest.permission#CAMERA}.     */    @MediumTest   ])', 1), (""([1:/android/permission/cts/CameraPermissionTest.java]:[JPEG]:[1]:method_text:[sn't translating the EPERM error status into            // a SecurityException.        }    }}])"", 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[1]:method_text:[ied about the     * remaining offline requests via the registered offline callback.</p>     */   ])', 1), ('([3:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[3]:method_text:[cks behave as expected     * in case the camera supports offline depth jpeg output.</p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[7]:method_text:[callbacks behave as expected     * in case the camera supports offline HEIC output.</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[1]:method_text:[ssion and receive     * all corresponding callbacks according to the documentation.</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[1]:method_text:[nitialize a new regular capture session     * in parallel with the offline session.</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[1]:method_text:[eive the expected sequence abort callbacks when switching     * to offline session.</p>     */   ])', 1), ('([1:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[1]:method_text:[re correctly advertised and switching to offline     * mode is failing as expected.</p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/OfflineSessionTest.java]:[JPEG]:[7]:method_text:[))                fail(""Remote offline session test activity is still running"");        }    }}])', 1), ('([5:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[JPEG]:[5]:method_text:[     isA(CaptureRequest.class),                                isA(CaptureFailure.class));    }}])', 1), ('([3:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[3]:method_text:[         .detectUnbufferedIo()                .penaltyDeath()                .build());    }   ])', 1), ('([2:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[2]:method_text:[  testExifInterfaceForReadAndWrite(EXIF_BYTE_ORDER_II_JPEG, R.array.exifbyteorderii_jpg);    }   ])', 1), ('([2:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[2]:method_text:[  testExifInterfaceForReadAndWrite(EXIF_BYTE_ORDER_MM_JPEG, R.array.exifbyteordermm_jpg);    }   ])', 1), ('([2:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[2]:method_text:[ smoothly.        testExifInterfaceForReadAndWrite(VOLANTIS_JPEG, R.array.volantis_jpg);    }   ])', 1), ('([2:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[2]:method_text:[tExifInterfaceForStandalone(EXIF_BYTE_ORDER_MM_JPEG, R.array.exifbyteordermm_standalone);    }   ])', 1), ('([1:/android/media/cts/ExifInterfaceTest.java]:[JPEG]:[1]:method_text:[            throw new EOFException();        }        return (short) ((ch1 << 8) + (ch2));    }}])', 1), ('([27:/android/hardware/camera2/cts/CaptureResultTest.java]:[JPEG]:[27]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([1:/android/jobscheduler/cts/TriggerContentTest.java]:[JPEG]:[1]:method_text:[ize(); i++) {            assertEquals(expectedPath.get(i), actualPath.get(i));        }    }   ])', 1), ('([1:/android/scopedstorage/cts/legacy/LegacyStorageTest.java]:[JPEG]:[1]:method_text:[ } finally {                deleteWithMediaProviderNoThrow(uri);            }        }    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[JPEG]:[2]:method_text:[image/jpeg"");                    getContext().startActivity(intent);                });    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[JPEG]:[1]:method_text:[tThat(info.getStackTrace()).contains(badUri + "" exposed beyond app"");                });    }   ])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[JPEG]:[2]:method_text:[                 getContext().startActivity(intent);                });    }    @AppModeFull   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[JPEG]:[1]:method_text:[t.SECONDS);        assertTrue(v instanceof FileUriExposedViolation);    }    @AppModeInstant   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[JPEG]:[1]:method_text:[ctory.Options();        mOpt2.inScaled = false;        mOpt2.inJustDecodeBounds = true;    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[JPEG]:[1]:method_text:[rayOutputStream();        assertTrue(b2.compress(Bitmap.CompressFormat.JPEG, 50, baos));    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[JPEG]:[1]:method_text:[28, false, true);        decodeConfigs(R.drawable.grayscale_png, 128, 128, false, true);    }   ])', 1), ('([1:/android/graphics/cts/BitmapFactoryTest.java]:[JPEG]:[1]:method_text:[= resId;            this.width    = width;            this.height   = height;        }    }   ])', 1), ('([2:/android/graphics/cts/BitmapFactoryTest.java]:[JPEG]:[2]:method_text:[ring obtainPath() throws IOException {        return Utils.obtainPath(R.drawable.start, 0);    }}])', 1), ('([2:/android/graphics/cts/Bitmap_CompressFormatTest.java]:[JPEG]:[2]:method_text:[     assertEquals(CompressFormat.WEBP_LOSSLESS, CompressFormat.valueOf(""WEBP_LOSSLESS""));    }   ])', 1), ('([1:/android/graphics/cts/Bitmap_CompressFormatTest.java]:[JPEG]:[1]:method_text:[at) {            assertTrue(b.compress(format, 24, new ByteArrayOutputStream()));        }    }}])', 1), ('([5:/android/hardware/camera2/cts/RobustnessTest.java]:[JPEG]:[5]:method_text:[nput/output combinations for each hardware     * level and capability work as expected.     */   ])', 1), ('([7:/android/hardware/camera2/cts/RobustnessTest.java]:[JPEG]:[7]:method_text:[  if (inputWriter != null) {                inputWriter.close();            }        }    }   ])', 1), ('([13:/android/hardware/camera2/cts/RobustnessTest.java]:[JPEG]:[13]:method_text:[processable mandatory stream combinations are     * present and advertised accordingly.     */   ])', 1), ('([46:/android/hardware/camera2/cts/RobustnessTest.java]:[JPEG]:[46]:method_text:[AG, ""getMaxPreviewSize Failed. ""+e.toString());        }        return PREVIEW_SIZE_BOUND;    }}])', 1), ('([1:/android/hardware/cts/Camera_SizeTest.java]:[JPEG]:[1]:method_text:[see {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}     */   ])', 1), ('([12:/android/hardware/cts/Camera_SizeTest.java]:[JPEG]:[12]:method_text:[st = new Camera_SizeTest();        test.setName(testName);        testSuite.addTest(test);    }}])', 1), ('([1:/android/content/cts/ClipboardManagerTest.java]:[JPEG]:[1]:method_text:[null, null, contentUri7),                new ExpectedClipItem(null, null, contentUri8));    }   ])', 1), ('([3:/android/hardware/camera2/cts/DngCreatorTest.java]:[JPEG]:[3]:method_text:[captured for the first reported camera device to be saved to an output file.     * </p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/DngCreatorTest.java]:[JPEG]:[7]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), ('([17:/android/hardware/camera2/cts/DngCreatorTest.java]:[JPEG]:[17]:method_text:[s test     * using:     * adb shell setprop log.tag.DngCreatorTest VERBOSE     * </p>     */   ])', 1), ('([7:/android/hardware/camera2/cts/DngCreatorTest.java]:[JPEG]:[7]:method_text:[  * Test basic DNG creation, ensure that the DNG image can be rendered by BitmapFactory.     */   ])', 1), ('([85:/android/hardware/camera2/cts/DngCreatorTest.java]:[JPEG]:[85]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[JPEG]:[1]:method_text:[ySupportedSizes(extensionChars, id, extension, ImageFormat.JPEG);            }        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/CameraExtensionCharacteristicsTest.java]:[JPEG]:[1]:method_text:[< latencyRange.getUpper()));                    }                }            }        }    }}])', 1), ('([35:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[35]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 1), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[1]:method_text:[     }    }    /**     * Test values for static metadata used by the RAW capability.     */   ])', 1), ('([6:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[6]:method_text:[wbLock));            }        }    }    /**     * Check reprocessing capabilities.     */   ])', 1), ('([3:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[3]:method_text:[   }        }    }    /**     * Check ultra high resolution sensor characteristics.     */   ])', 1), ('([2:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[2]:method_text:[nputSize));            }        }    }    /**     * Check depth output capability     */   ])', 1), ('([45:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[45]:method_text:[al distortion        }    }    /**     * Cross-check StreamConfigurationMap output     */   ])', 1), ('([5:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[JPEG]:[5]:method_text:[ cross-check the high speed sizes and fps ranges from     * the StreamConfigurationMap.     */   ])', 1), ('([3:/android/graphics/cts/ImageDecoderTest.java]:[JPEG]:[3]:method_text:[,            resId -> getAsFileUri(resId),            resId -> getAsContentUri(resId),    };   ])', 1), ('([2:/android/graphics/cts/ImageDecoderTest.java]:[JPEG]:[2]:method_text:[      } catch (IOException e) {            fail(""Failed with exception "" + e);        }    }   ])', 1), ('([1:/android/graphics/cts/ImageDecoderTest.java]:[JPEG]:[1]:method_text:[   assertTrue(saveByteCount < normalByteCount);                }            }        }    }   ])', 1), ('([1:/android/graphics/cts/ImageDecoderTest.java]:[JPEG]:[1]:method_text:[            fail(""Decoding "" + uri.toString() + "" yielded "" + e);            }        }    }   ])', 1), ('([1:/android/graphics/cts/ImageDecoderTest.java]:[JPEG]:[1]:method_text:[ect[] getRecordsAsSources() {        return Utils.crossProduct(getRecords(), mCreators);    }   ])', 1), ('([1:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[1]:method_text:[KEYS,    }    /**     * Test YUV_420_888 -> YUV_420_888 with maximal supported sizes     */   ])', 1), ('([1:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[1]:method_text:[);        }    }    /**     * Test YUV_420_888 -> JPEG with maximal supported sizes     */   ])', 1), ('([3:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[3]:method_text:[);        }    }    /**     * Test YUV_420_888 -> HEIC with maximal supported sizes     */   ])', 1), ('([1:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[1]:method_text:[0_888);        }    }    /**     * Test OPAQUE -> JPEG with maximal supported sizes     */   ])', 1), ('([3:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[3]:method_text:[.JPEG);        }    }    /**     * Test OPAQUE -> HEIC with maximal supported sizes     */   ])', 1), ('([2:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[2]:method_text:[ter.queueInputBuffer may become     * stuck due to stale buffers from previous session.     */   ])', 1), ('([2:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[2]:method_text:[      }    }    /**     * Test burst reprocessing captures with and without preview.     */   ])', 1), (""([1:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[1]:method_text:[put's exif data for the largest input and output sizes for each     * supported format.     */   ])"", 1), ('([4:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[4]:method_text:[         }            } finally {                closeDevice();            }        }    }   ])', 1), ('([15:/android/hardware/camera2/cts/ReprocessCaptureTest.java]:[JPEG]:[15]:method_text:[   public TotalCaptureResult getTotalCaptureResult() {            return mResult;        }    }}])', 1)]"	""	""	"[('JPEG', 108)]"	"[('[android.hardware.camera2.cts.ImageReaderTest testDynamicDepth None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testJpeg None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testRepeatingJpeg None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testInvalidAccessTest None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpeg None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testYuvAndJpegWithUsageFlag None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testImageReaderYuvAndRawWithUsageFlag None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testAllOutputYUVResolutions None]', 2), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 2), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateCustomSession None]', 2), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters None]', 2), ('[android.hardware.camera2.cts.NativeImageReaderTest testJpeg None]', 2), ('[android.hardware.camera2.cts.NativeImageReaderTest testDepthJpeg None]', 2), ('[android.hardware.camera2.cts.NativeImageReaderTest testImageReaderCloseAcquiredImages None]', 2), ('[android.hardware.camera2.cts.StaticMetadataTest testHwSupportedLevel None]', 2), ('[android.hardware.camera2.cts.StaticMetadataTest testCapabilities None]', 2), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurst None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testJpegBurst None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.provider.cts.media.MediaStore_DownloadsTest testMediaInDownloadsDir None]', 1), ('[android.hardware.camera2.cts.RecordingTest testMediaCodecRecording None]', 1), ('[android.hardware.camera2.cts.RecordingTest testVideoSnapshot None]', 1), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.permission.cts.CameraPermissionTest testCamera None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testInvalidOutput None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineCallbacks None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineDepthJpeg None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testDeviceCloseAndOpen None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionClose None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testOfflineSessionWithRegularSession None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testRepeatingSequenceAbort None]', 1), ('[android.hardware.camera2.cts.OfflineSessionTest testUnsupportedOfflineSessionOutputs None]', 1), ('[android.hardware.camera2.cts.SurfaceViewPreviewTest testDeferredSurfaces None]', 1), ('[android.media.cts.ExifInterfaceTest testReadExifDataFromExifByteOrderIIJpeg None]', 1), ('[android.media.cts.ExifInterfaceTest testReadExifDataFromExifByteOrderMMJpeg None]', 1), ('[android.media.cts.ExifInterfaceTest testReadExifDataFromVolantisJpg None]', 1), ('[android.media.cts.ExifInterfaceTest testStandaloneDataForRead None]', 1), ('[android.media.cts.ExifInterfaceTest testSetDateTime None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.jobscheduler.cts.TriggerContentTest exists None]', 1), ('[android.scopedstorage.cts.legacy.LegacyStorageTest testInsertWithUnsupportedMimeType None]', 1), ('[android.os.cts.StrictModeTest testFileUriExposure None]', 1), ('[android.os.cts.StrictModeTest testFileUriExposure_Chooser None]', 1), ('[android.os.cts.StrictModeTest testContentUriWithoutPermission None]', 1), ('[android.os.cts.StrictModeTest testVmPenaltyListener None]', 1), ('[android.graphics.cts.BitmapFactoryTest testImages None]', 1), ('[android.graphics.cts.BitmapFactoryTest testParcel None]', 1), ('[android.graphics.cts.BitmapFactoryTest testConfigs None]', 1), ('[android.graphics.cts.BitmapFactoryTest testJpegInfiniteLoop None]', 1), ('[android.graphics.cts.BitmapFactoryTest testDecodePngFromPipe None]', 1), ('[android.graphics.cts.Bitmap_CompressFormatTest testValueOf None]', 1), ('[android.graphics.cts.Bitmap_CompressFormatTest testValues None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryOutputCombinations None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryReprocessConfigurations None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyMandatoryOutputCombinationTables None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testVerifyReprocessMandatoryOutputCombinationTables None]', 1), ('[android.hardware.cts.Camera_SizeTest testConstructor None]', 1), ('[android.hardware.cts.Camera_SizeTest testMaxAspectRatios None]', 1), ('[android.content.cts.ClipboardManagerTest testSetPrimaryClip_multipleMimeTypes None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testSingleImageThumbnail None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testRaw16JpegMaximumResolutionConsistency None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testRaw16JpegConsistency None]', 1), ('[android.hardware.camera2.cts.DngCreatorTest testDngRenderingByBitmapFactor None]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testExtensionSizes None]', 1), ('[android.hardware.camera2.cts.CameraExtensionCharacteristicsTest testExtensionLatencyRanges None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testKeys None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStaticBurstCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testReprocessingCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testUltraHighResolutionSensorCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testDepthOutputCharacteristics None]', 1), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testStreamConfigurationMap None]', 1), ('[android.graphics.cts.ImageDecoderTest exists None]', 1), ('[android.graphics.cts.ImageDecoderTest testConserveMemory None]', 1), ('[android.graphics.cts.ImageDecoderTest testRespectOrientation None]', 1), ('[android.graphics.cts.ImageDecoderTest testJpegInfiniteLoop None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testBasicYuvToYuvReprocessing None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testBasicYuvToJpegReprocessing None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testBasicOpaqueToYuvReprocessing None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testBasicOpaqueToJpegReprocessing None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testCrossSessionCaptureException None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testQueueImageWithoutRequest None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testReprocessTimestamps None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testReprocessJpegExif None]', 1), ('[android.hardware.camera2.cts.ReprocessCaptureTest testReprocessRequestKeys None]', 1)]"
"7.1.4"	"7.1.4"	"C-2-3"	"7.1.4/C-2-3"	"07010400.670203"	"""C-2-3] MUST report the maximum version of the OpenGL ES dEQP tests supported via the android.software.opengles.deqp.level feature flag."""	""	""	"android.software.opengles.deqp.level EQP"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1)]"	"[('(10,EQP,/android/graphics/cts/VulkanDeqpLevelTest.java)', 2), ('(3,EQP,/android/hardware/camera2/cts/HeifWriterTest.java)', 2), ('(1,EQP,/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java)', 1), ('(1,EQP,/android/net/ipsec/ike/cts/IkeSessionPskTest.java)', 1)]"	"[('([4:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[4]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 2), ('([3:/android/hardware/camera2/cts/HeifWriterTest.java]:[EQP]:[3]:method_text:[           }            // TODO: add more key validations.        }        return result;    }}])', 2), ('([1:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[EQP]:[1]:method_text:[RESP);        verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);    }}])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[ATURE_VULKAN_DEQP_LEVEL,                            MINIMUM_VULKAN_DEQP_LEVEL));        }    }}])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[kageManager.FEATURE_VULKAN_DEQP_LEVEL,                        MINIMUM_VULKAN_DEQP_LEVEL));    }}])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[EQP]:[1]:method_text:[p);        verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);    }   ])', 1)]"	""	""	"[('EQP', 8)]"	"[('[android.graphics.cts.VulkanDeqpLevelTest testVulkanDeqpLevel None]', 2), ('[android.hardware.camera2.cts.HeifWriterTest testHeif None]', 2), ('[android.net.ipsec.ike.cts.IkeSessionDigitalSignatureTest testIkeSessionSetupAndChildSessionSetupWithTransportMode None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 None]', 1)]"
"255:716831) 9.8.2  . Recording"	"9.8.2"	"H-4-2"	"9.8.2/H-4-2"	"09080200.720402"	""">9.8.2/H-4-2] MUST display the list of Recent and Active apps using microphone as returned from PermissionManager.getIndicatorAppOpUsageData(), along with any attribution messages associated with them. [<a href=""#9_8_2_privacy"""""	""	""	"PermissionManager.getIndicatorAppOpUsageData getIndicatorAppOpUsageData()"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"202:600769) 7.4.2.5  . Wi"	"7.4.2.5"	"C-1-4"	"7.4.2.5/C-1-4"	"07040205.670104"	"""C-1-4] MUST be accurate to within 2 meters at 80 MHz bandwidth at the 68th percentile (as calculated with the Cumulative Distribution Function). <h5 id=""7426_wi-fi_keepalive_offload"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-16"	"9.9.3/C-1-16"	"09090300.670116"	"""C-1-16] MUST ensure that all non-deleted encrypted filenames on persistent storage in distinct directories were encrypted using distinct combinations of encryption key and initialization vector (IV). """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"104:385404) 3.18  . Contacts"	"3.18"	"C-0-2"	"3.18/C-0-2"	"03180000.670002"	"""C-0-2] MUST support verifying “.apk” files using the APK Signature Scheme v3 , APK Signature Scheme v2 and JAR signing."""	""	""	"JAR APK"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 35), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 24), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 17), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/DecelerateInterpolatorTest.java', 1)]"	"[('(8,APK,/android/net/cts/TrafficStatsTest.java)', 1), ('(3,APK,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(8,APK,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(15,APK,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,APK,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(2,APK,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(59,APK,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,APK,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(3,APK,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(1,APK,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(3,APK,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(3,APK,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(45,APK,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(15,APK,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(3,APK,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(4,APK,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(3,APK,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(2,APK,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(134,APK,/com/android/cts/rollback/host/app/HostTestHelper.java)', 1), ('(1,APK,/android/view/animation/cts/DecelerateInterpolatorTest.java)', 1), ('(108,APK,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1)]"	"[('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass1;->method1(,LClass1;->field1:"");    }   ])', 5), ('([2:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[2]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass2;->method2(,LClass2;->field2:"");    }   ])', 5), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 3), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[sion.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenSession_shouldThrow"", args);    }   ])', 2), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[.getSetting(""global"", SETTING_SIGNED_CONFIG_VERSION))                .isEqualTo(""null"");    }   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[acks of staged installs involving only apks.     * Confirms TestApp.A2 was rolled back.     */   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[pks.     * Commits TestApp.A2 and TestApp.B2 as a staged install with rollback enabled.     */   ])', 2), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[onId());        assertThat(InstallUtils.getInstalledVersion(TestApp.Apex)).isEqualTo(2);    }   ])', 2), ('([8:/android/net/cts/TrafficStatsTest.java]:[APK]:[8]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([3:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[APK]:[3]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[he blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[s the blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }}])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[1]:method_text:[P_PKG, ""test.instant.cookie.CookieTest"",                ""testCookieUpdateAndRetrieval"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[instant.cookie.CookieTest"",                ""testCookiePersistedAcrossInstantInstalls2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[st.instant.cookie.CookieTest"",                ""testCookiePersistedUpgradeFromInstant2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[est.instant.cookie.CookieTest"",                ""testCookieResetOnNonInstantReinstall2"");    }   ])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[APK]:[2]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[APK]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([22:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[22]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK 2 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK B and make it the default SMS app and make sure the service gets bound.     */   ])', 1), (""([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[, mCurrentUserId);    }    /**     * APK 3 doesn't have a valid service to be bound.     */   ])"", 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[_CLIENT_SERVICE"");    }    /**     * APK 4 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[ ""More than one"");    }    /**     * APK 5 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[SERVICE not found"");    }    /**     * APK 6\'s service doesn\'t have android:process.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[     * Make sure when the SMS app gets updated, the service still gets bound correctly.     */   ])', 1), ('([5:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[5]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[entUserId);    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[  }    /**     * Make sure when the SMS app is uninstalled, the binding will be gone.     */   ])', 1), ('([4:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[4]:method_text:[  /**     * Make sure when the SMS app changes, the service still gets bound correctly.     */   ])', 1), ('([3:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[3]:method_text:[s"",                    ""^finder,\\\\[Default\\\\sSMS\\\\sapp\\\\],"" + userId + "","");        });    }   ])', 1), ('([7:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[7]:method_text:[      }        assertUserHasNoConnection(userId);        assertUserHasNoFinder(userId);    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[dis=3,\\\\#died=2,backoff=5000"");        });    }    /**     * Test the feature flag.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[UT_SEC, () -> {            checkBound(PACKAGE_A, SERVICE_1, mCurrentUserId);        });    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[_A, SERVICE_1, mCurrentUserId);        assertOomAdjustment(PACKAGE_A, PACKAGE_A_PROC, 200);    }}])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[2]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[1]:method_text:[            getDevice(), TEST_PKG, "".LocationPolicyTest"", ""testLocationPolicyPermissions"");    }}])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[APK]:[1]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[APK]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);            }        }        throw new TimeoutException();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[APK]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[groundWhitelist(oldUid, false);        assertRestrictBackgroundWhitelist(newUid, false);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[nstallPackage(TEST_APP2_APK);        assertPowerSaveModeWhitelist(TEST_APP2_PKG, false);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[APK]:[1]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([26:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[26]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[).getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[ce().getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }}])', 1), ('([11:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[11]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[).installPackage(                mBuildHelper.getTestFile(SHIM_UPDATE_FAIL_APK), true));    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ties"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[bled"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ion {        Utils.runDeviceTests(getDevice(), packageName, testClassName, testMethodName);    }}])', 1), ('([2:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[2]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[1]:method_text:[;        runDeviceTestAsUserInPkgB(""testGlobalGetDocuments_nonexist"", mSecondaryUserId);    }   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[s the output of ""dumpsys storaged --force --hours 0.01"".     *     * @throws Exception     */   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([3:/android/permission/cts/OneTimePermissionTest.java]:[APK]:[3]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([2:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[APK]:[2]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([5:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[5]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[nvolving only apks.     * Commits TestApp.A2 as a staged install with rollback enabled.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Confirms a staged rollback is available for TestApp.A2 and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ rollbacks are available for TestApp.A2 and TestApp.b2, and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[installs involving only apks.     * Confirms TestApp.A2 and TestApp.B2 was rolled back.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[Confirms staged rollbacks are available for TestApp.A2, and commits the     * rollback.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[     * <p> We start by installing version 2. The test ultimately rolls back from 3 to 2.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[  * Test rollbacks of staged installs involving only apex.     * Commit rollback phase.     */   ])', 1), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[ * Test rollbacks of staged installs involving only apex.     * Confirm rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[rsion();        Install.single(TestApp.Apex2).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[rollbacks of staged installs involving apex and apk.     * Install first version phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Enable rollback phase.     */   ])', 1), ('([4:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[4]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Commit rollback phase.     */   ])', 1), ('([17:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[17]:method_text:[Test rollbacks of staged installs involving apex and apk.     * Confirm rollback phase.     */   ])', 1), ('([10:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[10]:method_text:[that apex update expires existing rollbacks for that apex.     * Enable rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[      Install.single(Apex2SignedBobRotRollback).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[le(TestApp.A1).commit();        Install.single(TestApp.A2).setEnableRollback().commit();    }   ])', 1), ('([24:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[24]:method_text:[tation().getContext();        return new File(context.getFilesDir(), APK_VERSION_FILENAME);    }}])', 1), ('([1:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[APK]:[1]:method_text:[a8);        // check whether it starts even faster        assertTrue(delta5 > delta1);    }   ])', 1), ('([49:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[49]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[ remaining delegations.            setDelegatedScopes(DELEGATE_APP_PKG, null);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                .setBoolean(true)                .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[      executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");    }    @RequiresDevice   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[          .setBoolean(true)                    .setInt(0)                    .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[;        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStatePreMApp"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ist(mUserId, false /* disabled */);            clearVoiceInteractionService();        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[S_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                    .build());        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ANAGEMENT_APK, mUserId);        executeDeviceTestClass("".AllowedAccountManagementTest"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNTS, false, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[UNTS, false, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[aller app is called directly rather than via intents from    // the DelegatedCertinstallerTest.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[    // inside. But these restrictions must have no effect on the device/profile owner behavior.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[;        } finally {            setDefaultContentCaptureServiceEnabled(true);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[abled(true);            executeDeviceTestClass("".MeteredDataRestrictionTest"");        }    }   ])', 1), ('([11:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[11]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[{            getDevice().uninstallPackage(INTENT_RECEIVER_PKG);        }    }    @LargeTest   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[that the app launches        executeSuspendPackageTestMethod(""testPackageNotSuspended"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[G + "".ClearApplicationDataTest"",                ""testSharedPreferenceCleared"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[e) throws Exception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[oolean(false)                .setStrings(PERMISSIONS_APP_PKG)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1)]"	""	""	"[('APK', 128)]"	"[('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openBlob None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openBlob None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieUpdateAndRetrieval None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedAcrossInstantInstalls None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedUpgradeFromInstant None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieResetOnNonInstantReinstall None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind1 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind2 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBindB None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound3 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound4 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound5 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound6 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceEnabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceDisabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUninstall None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSwitchDefaultApp None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSecondaryUser None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testCrashAndAutoRebind None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testFeatureDisabled None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testOomAdjustment None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.appsecurity.cts.LocationPolicyTest testLocationPolicyPermissions None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_reinstall None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testBatterySaverMode_reinstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallAfterInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigNotDowngraded None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallOtherPackage None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadSignatureIgnored None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Config None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Signature None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyValidOnDebuggableBuild None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyNotValidOnNonDebuggableBuild None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradeRestricted None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradePriorities None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testUpdatedSystemAppPreservedOnReboot None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest testPackageUninstall_onLockedUser None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper dropShellPermissionIdentity None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase4 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkRollbackByAnotherInstaller_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper isCheckpointSupported None]', 1), ('[android.view.animation.cts.DecelerateInterpolatorTest testDecelerateInterpolator None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegationCertSelection None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpn None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnLockDown None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrantPreMApp None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_deviceAndProfileOwnerAlwaysAllowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegatedCertInstaller None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetWallpaper_disallowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTask None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackageWithPackageManager None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testClearApplicationData_testPkg None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPrintingPolicy None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUninstallBlockedLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 1)]"
"101:372410) 3.15  . Instant Apps"	"3.15"	"C-0-5"	"3.15/C-0-5"	"03150000.670005"	"""C-0-5] MUST provide a user affordance to view and delete Instant Apps locally cached for each individual app package."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"246:691929) 9.1  . Permissions"	"9.1"	"C-4-1"	"9.1/C-4-1"	"09010000.670401"	"""C-4-1] MUST fulfill all requirements outlined for device implementations in section &quot;9.8.6 Content Capture&quot;."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"86:340540) 3.8.13  . Unicode and Font"	"3.8.13"	"C-1-3"	"3.8.13/C-1-3"	"03081300.670103"	"""C-1-3] MUST NOT remove or modify NotoColorEmoji.tff in the system image. (It is acceptable to add a new emoji font to override emoji in NotoColorEmoji.tff) SHOULD support the skin tone and diverse family emojis as specified in the Unicode Technical Report #51. If device implementations include an IME, they: SHOULD provide an input method to the user for these emoji characters. Android includes support to render Myanmar fonts. Myanmar has several non-Unicode compliant fonts, commonly known as “Zawgyi,” for rendering Myanmar languages. If device implementations include support for Burmese, they: *"""	""	""	"NotoColorEmoji.tff IME"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 8), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1)]"	"[('(56,IME,/android/view/cts/VerifyInputEventTest.java)', 1), ('(10,IME,/android/media/cts/SoundPoolTest.java)', 1), ('(4,IME,/android/net/cts/TrafficStatsTest.java)', 1), ('(42,IME,/android/telecom/cts/VideoCallTest.java)', 1), ('(65,IME,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(16,IME,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(5,IME,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(2,IME,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(61,IME,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(23,IME,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(33,IME,/android/content/res/cts/FractionTest.java)', 1), ('(2,IME,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,IME,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(13,IME,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(6,IME,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(7,IME,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,IME,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(4,IME,/android/transition/cts/FadeTest.java)', 1), ('(23,IME,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(25,IME,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(9,IME,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(4,IME,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(3,IME,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(30,IME,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(17,IME,/android/view/cts/PointerCaptureTest.java)', 1), ('(10,IME,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(2,IME,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(58,IME,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(5,IME,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1)]"	"[('([6:/android/view/cts/VerifyInputEventTest.java]:[IME]:[6]:method_text:[nd therefore does not have an hmac     * set properly.     * Verification should fail.     */   ])', 2), ('([6:/android/view/cts/VerifyInputEventTest.java]:[IME]:[6]:method_text:[vent that came from system, but has been tempered with.     * Verification should fail.     */   ])', 2), ('([6:/android/view/cts/VerifyInputEventTest.java]:[IME]:[6]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 2), ('([4:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[4]:method_text:[  .build();        assertThat(doGet(mDb, ""namespace"", ""id1"")).containsExactly(expected);    }   ])', 2), ('([4:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[4]:method_text:[   .build();        assertThat(doGet(mDb, ""namespace"", ""id"")).containsExactly(expected);    }   ])', 2), ('([3:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[IME]:[3]:method_text:[l callback"");        }        mHdmiControlManager.removeHotplugEventListener(listener);    }   ])', 2), ('([7:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[IME]:[7]:method_text:[  assertThat(mHdmiControlManager.getHdmiCecEnabled()).isEqualTo(originalValue);        }    }   ])', 2), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 2), ('([6:/android/view/cts/VerifyInputEventTest.java]:[IME]:[6]:method_text:[peatCount */);        mAutomation.injectInputEvent(upEvent, true);        waitForKey();    }   ])', 1), ('([14:/android/view/cts/VerifyInputEventTest.java]:[IME]:[14]:method_text:[   boolean flagValue = (expectedFlags & flag) != 0;        assertEquals(flagValue, actual);    }}])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[IME]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([9:/android/media/cts/SoundPoolTest.java]:[IME]:[9]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[IME]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[IME]:[1]:method_text:[ * (20 + 32 + bytes);    }    @AppModeFull(reason = ""Socket cannot bind in instant app mode"")   ])', 1), ('([2:/android/net/cts/TrafficStatsTest.java]:[IME]:[2]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[IME]:[1]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[IME]:[2]:method_text:[be some overhead associated with configuring the camera at the start of     * the call.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[IME]:[2]:method_text:[    /**     * Tests ability to request the camera capabilities from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[IME]:[1]:method_text:[ONS);    }    /**     * Tests ability to request data usage from the video provider.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[IME]:[1]:method_text:[     * Tests ability to receive changes to the peer dimensions from the video provider.     */   ])', 1), ('([3:/android/telecom/cts/VideoCallTest.java]:[IME]:[3]:method_text:[ });    }    /**     * Tests ability to set the device orientation via the provider.     */   ])', 1), ('([32:/android/telecom/cts/VideoCallTest.java]:[IME]:[32]:method_text:[append("" To: "");        expectedSb.append(toProfile);        return expectedSb.toString();    }}])', 1), ('([25:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[IME]:[25]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([22:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[IME]:[22]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[IME]:[18]:method_text:[Matcher() {        return event -> TextUtils.equals(""onFinishInput"", event.getEventName());    }}])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[1]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[1]:method_text:[ongType() {        mExpandableListView.setAdapter((ListAdapter) null);    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[1]:method_text:[ times(1)).onItemClick(eq(mExpandableListView),                any(), eq(100), eq(99L));    }   ])', 1), ('([4:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[4]:method_text:[should throw NullPointerException"");        } catch (NullPointerException e) {        }    }   ])', 1), ('([4:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[4]:method_text:[           } catch (NullPointerException e) {            }        });    }    @UiThreadTest   ])', 1), ('([3:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[3]:method_text:[ointerException"");        } catch (NullPointerException e) {        }    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[1]:method_text:[upClick(eq(mExpandableListView),                any(), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[IME]:[1]:method_text:[(eq(mExpandableListView),                any(), eq(0), eq(0), eq(0L));    }    @UiThreadTest   ])', 1), ('([1:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[IME]:[1]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([4:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[IME]:[4]:method_text:[.gone(By.text(INLINE_REPLY_REMOTE_INPUT_CAPTION)), UI_TIMEOUT);        Thread.sleep(1000);    }}])', 1), ('([1:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[IME]:[1]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[IME]:[1]:method_text:[dle#getAppId     */    private static int getAppId(int uid) {        return uid % 100000;    }}])', 1), ('([3:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[3]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([4:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[4]:method_text:[t.getErrorMessage())                .contains(""Property config \'to\' not found for key"");    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[2]:method_text:[""                                + ""But the schema types doesn\'t exist in the request"");    }   ])', 1), ('([8:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[8]:method_text:[        assertThat(doGet(mDb, ""namespace"", ""adult-id"")).containsExactly(expectedInAdult);    }   ])', 1), ('([24:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[24]:method_text:[TypeB"", MULTI_STEP_MIGRATOR_B)                    .setVersion(4)                    .build();   ])', 1), ('([4:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[IME]:[4]:method_text:[      .build();        assertThat(doGet(mDb, ""namespace"", ""id"")).containsExactly(expected);    }}])', 1), ('([3:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[IME]:[3]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([33:/android/content/res/cts/FractionTest.java]:[IME]:[33]:method_text:[ in resource 0x""                + Integer.toHexString(resid) + "" "" + mValue, diff > prec);    }}])', 1), ('([1:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[IME]:[1]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([1:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[IME]:[1]:method_text:[eption {        mUiBot.waitForWindowChange(() -> mActivity.onUsername(View::requestFocus));    }}])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[IME]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([6:/android/mediapc/cts/MultiEncoderPerfTest.java]:[IME]:[6]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([7:/android/mediapc/cts/MultiEncoderPerfTest.java]:[IME]:[7]:method_text:[     }        // Achieved frame rate is not compared as this test runs in byte buffer mode.    }}])', 1), ('([3:/android/bluetooth/cts/BasicAdapterTest.java]:[IME]:[3]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([3:/android/bluetooth/cts/BasicAdapterTest.java]:[IME]:[3]:method_text:[                mAdapterNameChangedlock.unlock();                }            }        }    };}])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[IME]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([5:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[IME]:[5]:method_text:[tch (IOException e) {            Log.w(TAG, ""Failed to connect to "" + server, e);        }    }}])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[IME]:[1]:method_text:[e.getUriFor(settingName),                Settings.Secure::getInt, Settings.Secure::putInt);    }}])', 1), ('([1:/android/transition/cts/FadeTest.java]:[IME]:[1]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[IME]:[2]:method_text:[;    }    // After a transition, a transitioned view as part of a scene should not be removed   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[IME]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[IME]:[3]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[IME]:[3]:method_text:[neration, including requesting Key Attestation, for all supported key     * algorithms.     */   ])', 1), ('([13:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[IME]:[13]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[IME]:[1]:method_text:[           ""Profile Owner is not allowed to access Device IDs."");            }        }    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[IME]:[3]:method_text:[ationSupported() {        return mDevicePolicyManager.isUniqueDeviceAttestationSupported();    }}])', 1), ('([12:/android/media/cts/MediaDrmMetricsTest.java]:[IME]:[12]:method_text:[   BaseEncoding.base16().encode(sid2).toLowerCase()));       drm.close();    }    @Presubmit   ])', 1), ('([13:/android/media/cts/MediaDrmMetricsTest.java]:[IME]:[13]:method_text:[ng(hexSid),            lessThanOrEqualTo(endTimesMs.getLong(hexSid)));        drm.close();    }}])', 1), ('([9:/android/renderscript/cts/generated/TestRootn.java]:[IME]:[9]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([2:/android/animation/cts/LayoutAnimationTest.java]:[IME]:[2]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[IME]:[1]:method_text:[polator, mLayoutTransition.getInterpolator(                LayoutTransition.APPEARING));    }   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[IME]:[1]:method_text:[ild) {            super.showChild(parent, child);            mShowChild = true;        }    }}])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[IME]:[2]:method_text:[NotExist(""/sdcard/test.txt"");        assertFileDoesNotExist(""/data/local/tmp/test.txt"");    }   ])', 1), ('([1:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[IME]:[1]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([4:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[4]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([7:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[7]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([4:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[4]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([4:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[4]:method_text:[arkTime)).isTrue();    }    // Test that anomaly detection integrates with perfetto properly.   ])', 1), ('([3:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[3]:method_text:[(tracingEnabled).isTrue();        }    }    // Tests that anomaly detection for gauge works.   ])', 1), ('([4:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[4]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([3:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[IME]:[3]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([11:/android/view/cts/PointerCaptureTest.java]:[IME]:[11]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([4:/android/view/cts/PointerCaptureTest.java]:[IME]:[4]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[IME]:[1]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[IME]:[1]:method_text:[eractions();        // Check the regular dispatch again.        verifyHoverDispatch();    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IME]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([9:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IME]:[9]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/keystore/cts/ECDSASignatureTest.java]:[IME]:[1]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([1:/android/keystore/cts/ECDSASignatureTest.java]:[IME]:[1]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[2]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[3]:method_text:[ uiAutomation.grantRuntimePermission(packageName, permission.ACCESS_BACKGROUND_LOCATION);    }   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[2]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[4]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([12:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[12]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[nyManager,                tp -> tp.setSystemSelectionChannels(Collections.emptyList()));    }   ])', 1), ('([8:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[8]:method_text:[isDataEnabled(),                        5 /*times*/, TOLERANCE/5 /*timeout per poll*/));    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[4]:method_text:[ (manufacturer code) or null.     * The MC should match the first 8 digits of the MEID.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[   }    /**     * Tests that the device properly reports either a valid IMEI or null.     */   ])', 1), ('([6:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[6]:method_text:[   }    /**     * Tests that the device properly reports either a valid IMEI or null.     */   ])', 1), ('([8:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[8]:method_text:[yManager#getRadioPowerState()} does not throw any exception     * and returns radio on.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[pType(int)} does not throw any exception     * for all supported subscription app type.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[ ensure {@link NetworkRegistrationInfo#isRoaming()} does not throw any     * exception.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IME]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[IME]:[2]:method_text:[ission2.protectionLevel                        & PermissionInfo.PROTECTION_MASK_BASE));     }   ])', 1), ('([3:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[IME]:[3]:method_text:[ssion(Manifest.permission.STEAL_AUDIO2),                PackageManager.PERMISSION_DENIED);    } }])', 1)]"	""	""	"[('IME', 113)]"	"[('[android.view.cts.VerifyInputEventTest testKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testKeyEventWithoutHmac None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testMotionEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testMotionEventWithoutHmac None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testDeviceIdBecomesVirtualForInjectedKeys None]', 1), ('[android.view.cts.VerifyInputEventTest testDeviceIdBecomesVirtualForInjectedMotions None]', 1), ('[android.media.cts.SoundPoolTest testAutoPauseResume None]', 1), ('[android.net.cts.TrafficStatsTest testThreadStatsTag None]', 1), ('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveSessionModifyResponse None]', 1), ('[android.telecom.cts.VideoCallTest testChangeCamera None]', 1), ('[android.telecom.cts.VideoCallTest testRequestCameraCapabilities None]', 1), ('[android.telecom.cts.VideoCallTest testReceiveCallSessionEvent None]', 1), ('[android.telecom.cts.VideoCallTest testReceivePeerDimensionChange None]', 1), ('[android.telecom.cts.VideoCallTest testSetPauseImage None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetAdapterOfWrongType None]', 1), ('[android.widget.cts.ExpandableListViewTest testPerformItemClick None]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testExpandGroupSmooth None]', 1), ('[android.widget.cts.ExpandableListViewTest testCollapseGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnGroupClickListener None]', 1), ('[android.widget.cts.ExpandableListViewTest testSetOnChildClickListener None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest testInlineReply None]', 1), ('[android.appsecurity.cts.StatsdAppSecurityAtomTest testRoleHolder None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_downgrade None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_sourceToNowhere None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toAnotherType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toMultipleDestinationType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_loadTest None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep1To4 None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep2To4 None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_multiStep3To4 None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHotplugEventListener None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHotplugEventListener_WithCustomExecutor None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_HdmiCecEnabled_ListenerWithCustomExecutor None]', 1), ('[android.hardware.hdmi.cts.HdmiControlManagerTest testHdmiCecConfig_HdmiCecEnabled_Listener None]', 1), ('[android.content.res.cts.FractionTest testFractions None]', 1), ('[android.autofillservice.cts.LoginWithCustomHighlightActivityTest testAutofillCustomHighlight_multipleFields_hasHighlight None]', 1), ('[android.mediapc.cts.MultiEncoderPerfTest test720p None]', 1), ('[android.bluetooth.cts.BasicAdapterTest test_listenUsingRfcommWithServiceRecord None]', 1), ('[com.android.cts.delegate.NetworkLoggingDelegateTest testNetworkLogging None]', 1), ('[android.server.wm.UnsupportedErrorDialogTests testAnrIsNotShown None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest testFadeOutTransition None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateECKeyPairUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testProfileOwnerCannotAttestDeviceUniqueIds None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCertChain None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsSession None]', 1), ('[android.media.cts.MediaDrmMetricsTest testGetMetricsGetKeyRequest None]', 1), ('[android.animation.cts.LayoutAnimationTest testSetInterpolator None]', 1), ('[android.animation.cts.LayoutAnimationTest testSetStagger None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeDeletesFiles None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testValueAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPerfetto None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testEventDispatch None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testProtectedBroadcasts None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetImei None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize None]', 1), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize None]', 1), ('[android.telephony.cts.TelephonyManagerTest testHasCarrierPrivilegesViaCarrierConfigs None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCallForwarding None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetCallForwarding None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetPhoneCount None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSystemSelectionChannels None]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetSettings None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetTac None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMc None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetImei None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetImeiForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testRebootRadio None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoRegisteredPlmn None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[com.android.cts.escalatepermission.PermissionEscalationTest testCannotEscalateNonRuntimePermissionsToRuntime None]', 1), ('[com.android.cts.escalatepermission.PermissionEscalationTest testRuntimePermissionsAreNotGranted None]', 1)]"
"190:576119) 7.3.10  . Biometric Sensors"	"7.3.10"	"C-2-9"	"7.3.10/C-2-9"	"07031000.670209"	"""C-2-9] MUST make the biometric sensor available to third-party applications. If device implementations wish to treat a biometric sensor as Class 3 (formerly Strong), they: """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-2-1"	"2.2.7.4/H-2-1"	"02020704.720201"	"""8.2/H-2-1] MUST ensure a sequential write performance of at least 125 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"66:300552) 3.5.1  . Application Restriction"	"3.5.1"	"C-2-1"	"3.5.1/C-2-1"	"03050100.670201"	"""C-2-1]MUST follow the implementation described in this document. <h4 id=""352_application_hibernation"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"242:676721) 8.3  . Power"	"8.3"	"C-1-6"	"8.3/C-1-6"	"08030000.670106"	"""C-1-6] MUST provide user affordance to display all apps that are exempted from App Standby and Doze power-saving modes or any battery optimizations and MUST implement the ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS intent to ask the user to allow an app to ignore battery optimizations."""	""	""	"ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1)]"	"[('(1,ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS,/android/systemintents/cts/TestSystemIntents.java)', 2)]"	"[('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS]:[1]:method_text:[etInstrumentation().getContext();        mPackageManager = mContext.getPackageManager();    }   ])', 2)]"	""	""	"[('ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS', 2)]"	""
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	""	"2.2.7.2"	"02020702.48"	"""data-text=""2.2.7.2. Camera"">2.2.7.2. Camera If Handheld device implementations return android.os.Build.VERSION_CODES.R for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID. [7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 4 megapixels supporting video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID. [7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for back primary and LIMITED or better for front primary camera. [7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras. [7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. [7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 600ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. If Handheld device implementations return android.os.Build.VERSION_CODES.S for android.os.Build.VERSION_CODES.MEDIA_PERFORMANCE_CLASS, then they: [7.5/H-1-1] MUST have a primary rear facing camera with a resolution of at least 12 megapixels supporting video capture at 4k@30fps. The primary rear-facing camera is the rear-facing camera with the lowest camera ID. [7.5/H-1-2] MUST have a primary front facing camera with a resolution of at least 5 megapixels and support video capture at 1080p@30fps. The primary front-facing camera is the front-facing camera with the lowest camera ID. [7.5/H-1-3] MUST support android.info.supportedHardwareLevel property as FULL or better for both primary cameras. [7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras. [7.5/H-1-5] MUST have camera2 JPEG capture latency &lt; 1000 ms for 1080p resolution as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. [7.5/H-1-6] MUST have camera2 startup latency (open camera to first preview frame) &lt; 500 ms as measured by the CTS camera PerformanceTest under ITS lighting conditions (3000K) for both primary cameras. [7.5/H-1-7] For apps targeting API level 31 or higher, the camera device MUST NOT support JPEG capture resolutions smaller than 1080p for both primary cameras. [7.5/H-1-8] MUST support CameraMetadata.REQUEST_AVAILABLE_CAPABILITIES_RAW and android.graphics.ImageFormat.RAW_SENSOR for the primary back camera. <h4 id=""2273_hardware"" """	""	""	"VERSION_CODES android.info.supportedHardwareLevel android.os.Build.VERSION MEDIA_PERFORMANCE_CLASS ITS CameraMetadata.SENSOR SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME CTS android.graphics.ImageFormat.RAW RAW_SENSOR android.os.Build.VERSION_CODES.MEDIA FULL CameraMetadata.REQUEST JPEG REQUEST_AVAILABLE_CAPABILITIES_RAW LIMITED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 14), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AssistantStackTests.java', 12), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/SoundPoolTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/alert/AnomalyDetectionTests.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/appsearch/src/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/PointerCaptureTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/VerifyInputEventTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/VideoCallTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DisplayTests.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 2), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaPlayerDrmTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/FadeTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc17_05.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/backup/RestoreAnyVersion/src/RestoreAnyVersionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/unittests/RegexValidatorTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/ClickableSpanTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/VibrationAttributesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephonyprovider/src/android/telephonyprovider/cts/SmsConversationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/shortcutmanager/src/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/rscpp/src/android/cts/rscpp/RSScriptTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/hardware/src/android/hardware/hdmi/cts/HdmiControlManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/FractionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/install/src/android/cts/install/host/UpgradeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/proto/src/android/util/proto/cts/ProtoOutputStreamUInt32Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/RsaKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/mediapc/src/android/mediapc/cts/MultiEncoderPerfTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BasicAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/UnsupportedErrorDialogTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/database/src/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/SelectionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmMetricsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestRootn.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/assist/src/android/assist/cts/DisableContextTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/securitybulletin/src/android/security/cts/Poc18_05.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardInputTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthUpdateRequestTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapRGBAF16Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanFilterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/transition/src/android/transition/cts/SharedElementCallbackTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/EscalateToRuntimePermissions/src/com/android/cts/escalatepermission/PermissionEscalationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/View_LayoutPositionTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/graphics/gpuprofiling/src/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/ContextMoreTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/WearableExtenderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/OverrideConfigTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/AbsSavedStateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/netlegacy22.permission/src/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/Session2CommandTest.java', 1)]"	"[('(1,CTS,/android/text/style/cts/ClickableSpanTest.java)', 1), ('(2,ITS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(1,CTS,/android/view/cts/VerifyInputEventTest.java)', 1), ('(3,VERSION_CODES,/android/media/cts/SoundPoolTest.java)', 1), ('(2,CTS,/android/media/cts/SoundPoolTest.java)', 1), ('(3,FULL,/android/media/cts/SoundPoolTest.java)', 1), ('(1,LIMITED,/android/media/cts/SoundPoolTest.java)', 1), ('(1,CTS,/android/os/cts/VibrationAttributesTest.java)', 1), ('(1,CTS,/android/net/cts/TrafficStatsTest.java)', 1), ('(2,FULL,/android/net/cts/TrafficStatsTest.java)', 1), ('(3,ITS,/android/telecom/cts/VideoCallTest.java)', 1), ('(2,CTS,/android/telecom/cts/VideoCallTest.java)', 1), ('(19,CTS,/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java)', 1), ('(2,CTS,/android/telephonyprovider/cts/SmsConversationTest.java)', 1), ('(5,ITS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(2,CTS,/android/widget/cts/ExpandableListViewTest.java)', 1), ('(7,CTS,/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java)', 1), ('(1,CTS,/android/cts/rscpp/RSScriptTest.java)', 1), ('(7,CTS,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(2,CTS,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(4,FULL,/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java)', 1), ('(1,CTS,/android/hardware/hdmi/cts/HdmiControlManagerTest.java)', 1), ('(1,CTS,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(2,CTS,/android/content/res/cts/FractionTest.java)', 1), ('(3,CTS,/android/cts/install/host/UpgradeTest.java)', 1), ('(1,ITS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(4,CTS,/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java)', 1), ('(2,CTS,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,FULL,/android/media/cts/MediaPlayerDrmTest.java)', 1), ('(2,CTS,/android/util/proto/cts/ProtoOutputStreamUInt32Test.java)', 1), ('(1,CTS,/android/keystore/cts/RsaKeyGenPerformanceTest.java)', 1), ('(1,CTS,/android/mediapc/cts/MultiEncoderPerfTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/BasicAdapterTest.java)', 1), ('(2,CTS,/com/android/cts/delegate/NetworkLoggingDelegateTest.java)', 1), ('(1,CTS,/android/server/wm/UnsupportedErrorDialogTests.java)', 1), ('(1,CTS,/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java)', 1), ('(1,CTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(1,CTS,/android/text/cts/SelectionTest.java)', 1), ('(3,CTS,/android/transition/cts/FadeTest.java)', 1), ('(1,ITS,/android/security/cts/Poc17_05.java)', 1), ('(1,CTS,/android/security/cts/Poc17_05.java)', 1), ('(3,CTS,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(3,FULL,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,ITS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(4,CTS,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(1,CTS,/RestoreAnyVersionTest.java)', 1), ('(2,FULL,/RestoreAnyVersionTest.java)', 1), ('(1,CTS,/android/media/cts/MediaDrmMetricsTest.java)', 1), ('(6,CTS,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(7,FULL,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(1,CTS,/android/server/wm/DisplayTests.java)', 1), ('(2,FULL,/android/server/wm/DisplayTests.java)', 1), ('(2,CTS,/android/renderscript/cts/generated/TestRootn.java)', 1), ('(1,ITS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(1,CTS,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(1,CTS,/android/assist/cts/DisableContextTest.java)', 1), ('(5,CTS,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(1,CTS,/android/security/cts/Poc18_05.java)', 1), ('(1,ITS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(7,CTS,/android/cts/statsd/alert/AnomalyDetectionTests.java)', 1), ('(1,ITS,/android/view/cts/PointerCaptureTest.java)', 1), ('(18,CTS,/android/view/cts/PointerCaptureTest.java)', 1), ('(1,CTS,/android/server/wm/KeyguardInputTests.java)', 1), ('(1,CTS,/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java)', 1), ('(1,CTS,/android/telephony/cts/SignalStrengthUpdateRequestTest.java)', 1), ('(1,CTS,/android/graphics/cts/BitmapRGBAF16Test.java)', 1), ('(5,CTS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,CTS,/android/bluetooth/cts/ScanFilterTest.java)', 1), ('(1,CTS,/android/transition/cts/SharedElementCallbackTest.java)', 1), ('(12,ITS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(2,CTS,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(3,FULL,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(10,ITS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(14,CTS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,CTS,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,FULL,/android/autofillservice/cts/unittests/RegexValidatorTest.java)', 1), ('(2,CTS,/com/android/cts/escalatepermission/PermissionEscalationTest.java)', 1), ('(3,CTS,/android/view/cts/View_LayoutPositionTest.java)', 1), ('(2,CTS,/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java)', 1), ('(1,CTS,/android/content/cts/ContextMoreTest.java)', 1), ('(1,CTS,/android/app/cts/WearableExtenderTest.java)', 1), ('(1,CTS,/android/server/wm/OverrideConfigTests.java)', 1), ('(2,CTS,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(32,CTS,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(3,FULL,/android/accessibilityservice/cts/AccessibilityEndToEndTest.java)', 1), ('(8,ITS,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/server/wm/AssistantStackTests.java)', 1), ('(24,FULL,/android/server/wm/AssistantStackTests.java)', 1), ('(1,CTS,/android/view/cts/AbsSavedStateTest.java)', 1), ('(24,CTS,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,CTS,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(2,CTS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,CTS,/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java)', 1), ('(1,CTS,/android/media/cts/Session2CommandTest.java)', 1), ('(2,ITS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(14,CTS,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1), ('(10,FULL,/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java)', 1)]"	"[('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[n     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 4), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.     * Expects a security exception since the caller does not have carrier privileges.     */   ])', 2), ('([1:/android/text/style/cts/ClickableSpanTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class ClickableSpanTest {   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[peatCount */);        mAutomation.injectInputEvent(upEvent, true);        waitForKey();    }   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[ITS]:[1]:method_text:[ld contain the virtual device id, which is consistent with what the     * app receives.     */   ])', 1), ('([1:/android/view/cts/VerifyInputEventTest.java]:[CTS]:[1]:method_text:[y = mActivityRule.getActivity();        PollingCheck.waitFor(mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[p(waitMsec * 10);        mSoundPool.stop(streamID);        mSoundPool.unload(sampleID);    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[ by themselves; no way to check        mSoundPool.release();        mSoundPool = null;    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[VERSION_CODES]:[1]:method_text:[soundIds) {            mSoundPool.unload(sound);        }        mSoundPool.release();    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[CTS]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([2:/android/media/cts/SoundPoolTest.java]:[FULL]:[2]:method_text:[       mSoundPool.release();            mSoundPool = null;            return;        }    }   ])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[FULL]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/media/cts/SoundPoolTest.java]:[LIMITED]:[1]:method_text:[oundPool.play(sampleId, SILENT, SILENT, 1, 0, 1);        }        mSoundPool.stop(stream);    }}])', 1), ('([1:/android/os/cts/VibrationAttributesTest.java]:[CTS]:[1]:method_text:[tionEffect TEST_PREBAKED =            VibrationEffect.get(VibrationEffect.EFFECT_CLICK, true);   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[CTS]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[FULL]:[1]:method_text:[not within range ["" + lower + "", "" + upper + ""]"",                range.contains(value));    }   ])', 1), ('([1:/android/net/cts/TrafficStatsTest.java]:[FULL]:[1]:method_text:[ * (20 + 32 + bytes);    }    @AppModeFull(reason = ""Socket cannot bind in instant app mode"")   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[ITS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([1:/android/telecom/cts/VideoCallTest.java]:[ITS]:[1]:method_text:[    /**     * Tests ability to start a 1-way video call and retrieve its video state.     */   ])', 1), ('([2:/android/telecom/cts/VideoCallTest.java]:[CTS]:[2]:method_text:[    /**     * Tests ability to start a 2-way video call and retrieve its video state.     */   ])', 1), ('([18:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[18]:method_text:[ new UnlockScreenRule();    private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);   ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[CTS]:[1]:method_text:[able window hosted by a different process     * temporarily becomes the focused window.     */   ])', 1), ('([2:/android/telephonyprovider/cts/SmsConversationTest.java]:[CTS]:[2]:method_text:[s test is to check most recent insert sms body equals to the Conversation     * Snippet     */   ])', 1), ('([1:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[1]:method_text:[PE_CHILD,                ExpandableListView.getPackedPositionType(0x8000000000000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0x7FFFFFFF, ExpandableListView.getPackedPositionGroup(0x7FFFFFFF00000000L));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[ITS]:[2]:method_text:[assertEquals(0xffffffff, ExpandableListView.getPackedPositionChild(0x80000000ffffffffL));    }   ])', 1), ('([2:/android/widget/cts/ExpandableListViewTest.java]:[CTS]:[2]:method_text:[tivity::hasWindowFocus);        mExpandableListView = mActivity.getExpandableListView();    }   ])', 1), ('([7:/android/content/pm/cts/shortcutmanager/ShortcutManagerThrottlingTest.java]:[CTS]:[7]:method_text:[        runCommandForNoOutput(getInstrumentation(), ""am force-stop "" + TARGET_PACKAGE);    }   ])', 1), ('([1:/android/cts/rscpp/RSScriptTest.java]:[CTS]:[1]:method_text:[c {        System.loadLibrary(""rscpptest_jni"");    }    native boolean testSet(String path);   ])', 1), ('([7:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[CTS]:[7]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[CTS]:[2]:method_text:[      mDb.setSchema(new SetSchemaRequest.Builder().setForceOverride(true).build()).get();    }   ])', 1), ('([1:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[1]:method_text:[t.getErrorMessage())                .contains(""Property config \'to\' not found for key"");    }   ])', 1), ('([1:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[1]:method_text:[  .build();        assertThat(doGet(mDb, ""namespace"", ""id1"")).containsExactly(expected);    }   ])', 1), ('([2:/com/android/cts/appsearch/external/app/AppSearchSchemaMigrationCtsTestBase.java]:[FULL]:[2]:method_text:[        assertThat(doGet(mDb, ""namespace"", ""adult-id"")).containsExactly(expectedInAdult);    }   ])', 1), ('([1:/android/hardware/hdmi/cts/HdmiControlManagerTest.java]:[CTS]:[1]:method_text:[CEC));        mHdmiControlManager = context.getSystemService(HdmiControlManager.class);    }   ])', 1), ('([1:/com/android/cts/host/blob/DataCleanupTest.java]:[CTS]:[1]:method_text:[obStoreHostTest {    private static final String TEST_CLASS = TARGET_PKG + "".DataCleanupTest"";   ])', 1), ('([2:/android/content/res/cts/FractionTest.java]:[CTS]:[2]:method_text:[  mResources = mContext.getResources();        mValue = new TypedValue();    }    @SmallTest   ])', 1), ('([3:/android/cts/install/host/UpgradeTest.java]:[CTS]:[3]:method_text:[t updating APEX"",                    mShimApexRule.isUpdatingApexSupported());        }    }   ])', 1), ('([1:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[ITS]:[1]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([4:/android/autofillservice/cts/LoginWithCustomHighlightActivityTest.java]:[CTS]:[4]:method_text:[tatus();    }    @After    public void teardown() {        MyDrawable.clearStatus();    }   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[CTS]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/media/cts/MediaPlayerDrmTest.java]:[FULL]:[2]:method_text:[inal Uri CENC_VIDEO_URL_DOWNLOADED = getUriFromFile(""car_cenc-20120827-88.mp4"");    // Tests   ])', 1), ('([2:/android/util/proto/cts/ProtoOutputStreamUInt32Test.java]:[CTS]:[2]:method_text:[------------------------------------------------------    /**     * Test writeUInt32.     */   ])', 1), ('([1:/android/keystore/cts/RsaKeyGenPerformanceTest.java]:[CTS]:[1]:method_text:[ds PerformanceTestBase {    private final int[] SUPPORTED_RSA_KEY_SIZES = {2048, 3072, 4096};   ])', 1), ('([1:/android/mediapc/cts/MultiEncoderPerfTest.java]:[CTS]:[1]:method_text:[sync});                }            }        }        return argsList;    }    @LargeTest   ])', 1), ('([1:/android/bluetooth/cts/BasicAdapterTest.java]:[CTS]:[1]:method_text:[eChanged = mAdapterNameChangedlock.newCondition();        mIsAdapterNameChanged = false;    }   ])', 1), ('([2:/com/android/cts/delegate/NetworkLoggingDelegateTest.java]:[CTS]:[2]:method_text:[tDown = new CountDownLatch(1);        NetworkLogsReceiver.mExceptionFromReceiver = null;    }   ])', 1), ('([1:/android/server/wm/UnsupportedErrorDialogTests.java]:[CTS]:[1]:method_text:[}    /** Make sure the developer options apply correctly leading to the dialog being shown. */   ])', 1), ('([1:/android/database/sqlite/cts/SQLiteMisuseExceptionTest.java]:[CTS]:[1]:method_text:[ android.test.AndroidTestCase;public class SQLiteMisuseExceptionTest extends AndroidTestCase {   ])', 1), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[CTS]:[1]:method_text:[SOURCE_STR = ""This is a char sequence."";    private AlteredCharSequence mAlteredCharSequence;   ])', 1), ('([1:/android/text/cts/SelectionTest.java]:[CTS]:[1]:method_text:[oncurrent.CountDownLatch;@SmallTest@RunWith(AndroidJUnit4.class)public class SelectionTest {   ])', 1), ('([2:/android/transition/cts/FadeTest.java]:[CTS]:[2]:method_text:[();        mFade.setDuration(200);        mTransition = mFade;        resetListener();    }   ])', 1), ('([1:/android/transition/cts/FadeTest.java]:[CTS]:[1]:method_text:[                * (sigX + sigY + CONSTANT_C2);        ssim /= denom;        return ssim;    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[ITS]:[1]:method_text:[   AdbUtils.runPocAssertExitStatusNotVulnerable(""CVE-2016-5867"", getDevice(), 60);        }    }}])', 1), ('([1:/android/security/cts/Poc17_05.java]:[CTS]:[1]:method_text:[nner.class)public class Poc17_05 extends SecurityTestCase {    /**     *  b/34277115     */   ])', 1), ('([3:/android/appsecurity/cts/InstantCookieHostTest.java]:[CTS]:[3]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[FULL]:[2]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[FULL]:[1]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[_PADDING_RSA_PKCS1)            .setIsStrongBoxBacked(useStrongBox)            .build();    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[ITS]:[1]:method_text:[            assertThat(useStrongBox && !hasStrongBox()).isTrue();            }        }    }   ])', 1), ('([4:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[CTS]:[4]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([1:/RestoreAnyVersionTest.java]:[CTS]:[1]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([2:/RestoreAnyVersionTest.java]:[FULL]:[2]:method_text:[ublic void setUp() {        Log.i(TAG, ""set up"");        mContext = getTargetContext();    }   ])', 1), ('([1:/android/media/cts/MediaDrmMetricsTest.java]:[CTS]:[1]:method_text:[       } catch (Exception e) {            return ""unavailable"";        }    }    @Presubmit   ])', 1), ('([6:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[CTS]:[6]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([1:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[1]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[age(false);        Assert.assertTrue(runDeviceTests(TEST_PKG, TEST_CLASS, TEST_PASSES));    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[kage(false);        Assert.assertTrue(runDeviceTests(TEST_PKG, TEST_CLASS, TEST_FAILS));    }   ])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[FULL]:[2]:method_text:[on {        installPackage(TEST_APP, instant ? new String[]{""--instant""} : new String[0]);    }}])', 1), (""([1:/android/server/wm/DisplayTests.java]:[CTS]:[1]:method_text:[ that the global configuration is equal to the default display's override configuration.     */   ])"", 1), ('([1:/android/server/wm/DisplayTests.java]:[FULL]:[1]:method_text:[InsetsControllerControlsSystemBars is not set to true for     * non-automotive devices.     */   ])', 1), ('([1:/android/server/wm/DisplayTests.java]:[FULL]:[1]:method_text:[y.mFullConfiguration.densityDpi;        assertEquals(CUSTOM_DENSITY_DPI, newDensityDpi);    }   ])', 1), ('([2:/android/renderscript/cts/generated/TestRootn.java]:[CTS]:[2]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[ITS]:[1]:method_text:[Key);        verify.update(data);        assertThat(verify.verify(signature)).isTrue();    }   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[CTS]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/android/animation/cts/LayoutAnimationTest.java]:[CTS]:[1]:method_text:[    public void teardown() {        ValueAnimator.setDurationScale(mOldAnimationScale);    }   ])', 1), ('([1:/android/assist/cts/DisableContextTest.java]:[CTS]:[1]:method_text:[StructureEnabled.TRUE, ScreenshotEnabled.TRUE);        logContextAndScreenshotSetting();    }   ])', 1), ('([3:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[3]:method_text:[odeDeviceTest extends BaseHostJUnit4Test {    private static final int ONE_MINUTE = 60 * 1000;   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[CTS]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([1:/android/security/cts/Poc18_05.java]:[CTS]:[1]:method_text:[    * Does not require root but must be a hostside test to avoid a race     * condition     */   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[ITS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([2:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[2]:method_text:[ for count works.    // Also tests that anomaly detection works when spanning multiple buckets.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[tection for duration works.    // Also tests that refractory periods in anomaly detection work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[   }    // Tests that anomaly detection for duration works even when the alarm fires too late.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[).getAlertId()).isEqualTo(ALERT_ID);    }    // Tests that anomaly detection for value works.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[ireSince(markTime)).isTrue();    }    // Test that anomaly detection for pulled metrics work.   ])', 1), ('([1:/android/cts/statsd/alert/AnomalyDetectionTests.java]:[CTS]:[1]:method_text:[  .setId(ANOMALY_EVENT_ID)                              .setWhat(ANOMALY_DETECT_MATCH_ID));    }}])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[ITS]:[1]:method_text:[ointerCaptureChanged());        assertFalse(mTarget2.hasCalledOnPointerCaptureChange());    }   ])', 1), ('([15:/android/view/cts/PointerCaptureTest.java]:[CTS]:[15]:method_text:[d(R.id.target2);        PollingCheck.waitFor(TIMEOUT_DELTA, mActivity::hasWindowFocus);    }   ])', 1), ('([1:/android/view/cts/PointerCaptureTest.java]:[CTS]:[1]:method_text:[rtFalse(mTarget.hasPointerCapture());        assertFalse(mActivity.hasPointerCapture());    }   ])', 1), ('([2:/android/view/cts/PointerCaptureTest.java]:[CTS]:[2]:method_text:[ivity.hasWindowFocus());        assertPointerCapture(false);        activity.finish();    }   ])', 1), ('([1:/android/server/wm/KeyguardInputTests.java]:[CTS]:[1]:method_text:[sertNoMoreEvents() {        KeyEvent event = mActivity.popKey();        assertNull(event);    }}])', 1), ('([1:/com/android/cts/deviceandprofileowner/CommonCriteriaModeTest.java]:[CTS]:[1]:method_text:[d.cts.deviceandprofileowner;public class CommonCriteriaModeTest extends BaseDeviceAdminTest {   ])', 1), ('([1:/android/telephony/cts/SignalStrengthUpdateRequestTest.java]:[CTS]:[1]:method_text:[getPackageManager()                .hasSystemFeature(PackageManager.FEATURE_TELEPHONY));    }   ])', 1), ('([1:/android/graphics/cts/BitmapRGBAF16Test.java]:[CTS]:[1]:method_text:[nsparentBitmap = BitmapFactory.decodeResource(mResources, R.raw.p3_transparent, options);    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[CTS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/bluetooth/cts/ScanFilterTest.java]:[CTS]:[1]:method_text:[000000L);            mFilterBuilder = new ScanFilter.Builder();        }    }    @SmallTest   ])', 1), ('([1:/android/transition/cts/SharedElementCallbackTest.java]:[CTS]:[1]:method_text:[ SharedElementCallbackTest {    private static class Callback extends SharedElementCallback {}   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([6:/android/keystore/cts/ECDSASignatureTest.java]:[ITS]:[6]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[CTS]:[2]:method_text:[Arrays;import java.util.Collection;public class ECDSASignatureTest extends AndroidTestCase {   ])', 1), ('([1:/android/keystore/cts/ECDSASignatureTest.java]:[FULL]:[1]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[FULL]:[2]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[4]:method_text:[ter.getAddress();    }    private static final String ISO_COUNTRY_CODE_PATTERN = ""[a-z]{2}"";   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[cation code) or     * null.     * The TAC should match the first 8 digits of the IMEI.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[ (manufacturer code) or null.     * The MC should match the first 8 digits of the MEID.     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[2]:method_text:[ }    /**     * Tests that the device properly sets and pads the contents of EF_FPLMN     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[ITS]:[1]:method_text:[            fail(""testDisAllowedNetworkTypes: SecurityException not expected"");        }    }   ])', 1), ('([7:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[7]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[mergencyNumberList.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[.isEmergencyNumber.     *     * Also enforce country-specific emergency number in CTS.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[  }    }    /**     * Tests {@link TelephonyManager#getSupportedRadioAccessFamily()}     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[CTS]:[1]:method_text:[ minor) {        if (major < 0 || minor < 0) return 0;        return major * 100 + minor;    }}])', 1), ('([1:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[CTS]:[1]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/android/autofillservice/cts/unittests/RegexValidatorTest.java]:[FULL]:[2]:method_text:[nWith(AndroidJUnit4.class)@AppModeFull(reason = ""Unit test"")public class RegexValidatorTest {   ])', 1), ('([2:/com/android/cts/escalatepermission/PermissionEscalationTest.java]:[CTS]:[2]:method_text:[org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PermissionEscalationTest {   ])', 1), ('([3:/android/view/cts/View_LayoutPositionTest.java]:[CTS]:[3]:method_text:[ public void setup() {        mActivity = mActivityRule.getActivity();    }    @UiThreadTest   ])', 1), ('([2:/android/graphics/gpuprofiling/cts/CtsFrameTracerDataSourceTest.java]:[CTS]:[2]:method_text:[TURE_EMBEDDED, FEATURE_LEANBACK_ONLY,                FEATURE_WATCH, FEATURE_TELEVISION);    }   ])', 1), ('([1:/android/content/cts/ContextMoreTest.java]:[CTS]:[1]:method_text:[n a while and     * make sure getSystemService() still returns non-null.     */    @LargeTest   ])', 1), ('([1:/android/app/cts/WearableExtenderTest.java]:[CTS]:[1]:method_text:[d void setUp() throws Exception {        super.setUp();        mContext = getContext();    }   ])', 1), ('([1:/android/server/wm/OverrideConfigTests.java]:[CTS]:[1]:method_text:[deConfigTests */@Presubmitpublic class OverrideConfigTests extends ActivityManagerTestBase {   ])', 1), ('([2:/android/graphics/cts/CameraVulkanGpuTest.java]:[CTS]:[2]:method_text:[ class CameraVulkanGpuTest {    static {        System.loadLibrary(""ctsgraphics_jni"");    }   ])', 1), ('([16:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[16]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[ after update"",                editTextNode.isHeading());    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[g(R.string.button_tooltip),                buttonNode.getTooltipText());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[List())));        assertTrue(hasTooltipShowing(R.id.buttonWithTooltip));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[resh();        assertThat(buttonNode.getTraversalBefore(), nullValue());    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[refresh();        assertThat(editNode.getTraversalAfter(), nullValue());    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[r one        assertThat(labelForNode.getLabeledBy(), equalTo(editNode));    }    @MediumTest   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[1]:method_text:[argThat(event -> event.getActionMasked() == MotionEvent.ACTION_OUTSIDE));    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:["",                node.getViewIdResourceName());        node.recycle();    }    @MediumTest   ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[2]:method_text:[ {            enableTouchExploration(sInstrumentation, false);        }    }    @MediumTest   ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[CTS]:[3]:method_text:[tic int getCurrentUser() {        return android.os.Process.myUserHandle().getIdentifier();    }}])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[          sInstrumentation, sUiAutomation, mActivityRule);    }    @MediumTest    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[nt);    }    @MediumTest    @AppModeFull    @SuppressWarnings(""deprecation"")    @Presubmit   ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[FULL]:[1]:method_text:[d to use the correct package"");        }    }    @AppModeFull    @MediumTest    @Presubmit   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[used."",                    WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);        }    }   ])', 1), ('([3:/android/server/wm/AssistantStackTests.java]:[ITS]:[3]:method_text:[ should be focused."",                WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[ITS]:[2]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[ITS]:[1]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[CTS]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[FULL]:[1]:method_text:[isplayId;            mDefaultWindowingMode = getDefaultDisplayWindowingMode();        }    }   ])', 1), ('([5:/android/server/wm/AssistantStackTests.java]:[FULL]:[5]:method_text:[vityType(                            ACTIVITY_TYPE_ASSISTANT).isFullscreen());        }    }   ])', 1), ('([1:/android/server/wm/AssistantStackTests.java]:[FULL]:[1]:method_text:[ should be focused."",                WINDOWING_MODE_UNDEFINED, ACTIVITY_TYPE_ASSISTANT);    }   ])', 1), ('([6:/android/server/wm/AssistantStackTests.java]:[FULL]:[6]:method_text:[tack should be focused."",                mDefaultWindowingMode, ACTIVITY_TYPE_STANDARD);    }   ])', 1), ('([7:/android/server/wm/AssistantStackTests.java]:[FULL]:[7]:method_text:[;                mWmState.assertVisibility(TEST_ACTIVITY, true);            }        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[FULL]:[2]:method_text:[,                    mWmState.getTaskByActivity(ASSISTANT_ACTIVITY).mTaskId);        }    }   ])', 1), ('([2:/android/server/wm/AssistantStackTests.java]:[FULL]:[2]:method_text:[antName) throws Exception {            super.set(getActivityName(assistantName));        }    }}])', 1), ('([1:/android/view/cts/AbsSavedStateTest.java]:[CTS]:[1]:method_text:[junit.runner.RunWith;@SmallTest@RunWith(AndroidJUnit4.class)public class AbsSavedStateTest {   ])', 1), ('([23:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[23]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[CTS]:[1]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[CTS]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[CTS]:[2]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([1:/android/net/cts/legacy/api22/permission/NoNetworkStatePermissionTest.java]:[CTS]:[1]:method_text:[ssion:     *   {@link android.Manifest.permission#CHANGE_NETWORK_STATE}.     */    @SmallTest   ])', 1), ('([1:/android/media/cts/Session2CommandTest.java]:[CTS]:[1]:method_text:[le TEST_CUSTOM_EXTRAS = new Bundle();    private final Bundle TEST_RESULT_DATA = new Bundle();   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[ITS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[8]:method_text:[ew AssertionFailedError(""Expected roughly "" + expected + "" but was "" + actual);        }    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[    mContentResolver.delete(fileuri, null, null);        assertFileNotExists(imagePath);    }   ])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[2]:method_text:[fileUri, null /* where */, null /* where args */);        new File(sourcePath).delete();    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[t in sdcard            fail(""There is no sdcard attached! "" + e.getMessage());        }    }   ])', 1), ('([1:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[CTS]:[1]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1), ('([2:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[FULL]:[2]:method_text:[));        // delete        assertEquals(1, mContentResolver.delete(uri, null, null));    }   ])', 1), ('([8:/android/provider/cts/media/MediaStore_Images_ThumbnailsTest.java]:[FULL]:[8]:method_text:[       if (e.errno != OsConstants.ENOENT) {                throw e;            }        }    }}])', 1)]"	""	""	"[('CTS', 107), ('FULL', 32), ('ITS', 27), ('VERSION_CODES', 3), ('LIMITED', 1)]"	"[('[android.media.cts.SoundPoolTest exists None]', 2), ('[android.media.cts.SoundPoolTest testAutoPauseResume None]', 2), ('[android.cts.statsd.alert.AnomalyDetectionTests testPulledAnomalyDetection None]', 2), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize None]', 2), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize None]', 2), ('[android.telephony.cts.TelephonyManagerTest testIsPotentialEmergencyNumber None]', 2), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest postTestTearDown None]', 2), ('[android.server.wm.AssistantStackTests testAssistantStackLaunchNewTaskWithDockedStack None]', 2), ('[android.server.wm.AssistantStackTests testTranslucentAssistantActivityStackVisibility None]', 2), ('[android.server.wm.AssistantStackTests testPinnedStackWithAssistant None]', 2), ('[android.server.wm.AssistantStackTests AssistantSession None]', 2), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailGenerationAndCleanup None]', 2), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testInsertUpdateDelete None]', 2), ('[android.view.cts.VerifyInputEventTest testTamperedKeyEvent None]', 1), ('[android.view.cts.VerifyInputEventTest testTamperedMotionEvent None]', 1), ('[android.net.cts.TrafficStatsTest testThreadStatsTag None]', 1), ('[android.telecom.cts.VideoCallTest testMakeTwoWayVideoCall None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule None]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges None]', 1), ('[android.telephonyprovider.cts.SmsConversationTest setupTestEnvironment None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionType None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionGroup None]', 1), ('[android.widget.cts.ExpandableListViewTest testGetPackedPositionChild None]', 1), ('[android.widget.cts.ExpandableListViewTest getExpandableListView None]', 1), ('[android.content.pm.cts.shortcutmanager.ShortcutManagerThrottlingTest getTestContext None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase isEmpty None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toAnotherType None]', 1), ('[com.android.cts.appsearch.external.app.AppSearchSchemaMigrationCtsTestBase testSchemaMigration_toMultipleDestinationType None]', 1), ('[android.cts.install.host.UpgradeTest isUpdatingApexSupported None]', 1), ('[android.transition.cts.FadeTest resetListener None]', 1), ('[android.transition.cts.FadeTest endVisibilityIsCorrect None]', 1), ('[android.security.cts.Poc17_05 testPocCVE_2016_5867 None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testNotUserSelectableAliasCanBeChosenViaPolicy None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateKeyPairWithKeyAttestationUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsPassesFull None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsFailsFull None]', 1), ('[android.sample.cts.SampleHostJUnit4DeviceTest testRunDeviceTestsAssumeFailsFull None]', 1), ('[android.server.wm.DisplayTests testDefaultDisplayOverrideConfiguration None]', 1), ('[android.server.wm.DisplayTests testCreateVirtualDisplayWithCustomConfig None]', 1), ('[com.android.cts.certinstaller.PreSelectedKeyAccessTest testAccessingPreSelectedAliasExpectingSuccess None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests currentTimeMillis None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testCountAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetection None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testDurationAnomalyDetectionForLateAlarms None]', 1), ('[android.cts.statsd.alert.AnomalyDetectionTests testGaugeAnomalyDetection None]', 1), ('[android.view.cts.PointerCaptureTest testPointerCaptureChangeDispatch None]', 1), ('[android.view.cts.PointerCaptureTest uptimeMillis None]', 1), ('[android.view.cts.PointerCaptureTest testWindowFocusChangeEndsCapture None]', 1), ('[android.view.cts.PointerCaptureTest testActivityFocusChangeEndsCapture None]', 1), ('[android.server.wm.KeyguardInputTests testReceiveKeysOnTopOfKeyguard None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetMode None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testIsManualNetworkSelectionAllowedWithoutPermission None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkType None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetNetworkSelectionModeWithoutPermission None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceIdForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimLocale None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetTac None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetForbiddenPlmns None]', 1), ('[android.telephony.cts.TelephonyManagerTest testDisAllowedNetworkTypes None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetNetworkSelectionMode None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetNetworkSelectionModeAutomatic None]', 1), ('[android.telephony.cts.TelephonyManagerTest testCallQuality None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetEmergencyNumberList None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetSimCardState None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testViewHeadingReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTooltipTextActionsReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalBeforeReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTraversalAfterReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testLabelForReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testA11yActionTriggerMotionEventActionOutside None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateInfoReportedToAccessibility None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateWithEbtBetweenView_ReHoverDelegate_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTouchDelegateCoverParentWithEbt_HoverChildAndBack_FocusTargetAgain None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeWindowStateChangedAccessibilityEvent None]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testPackageNameCannotBeFaked None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackZOrder None]', 1), ('[android.server.wm.AssistantStackTests testLaunchingAssistantActivityIntoAssistantStack None]', 1), ('[android.server.wm.AssistantStackTests testAssistantStackFinishToPreviousApp None]', 1), ('[android.server.wm.AssistantStackTests testLaunchIntoSameTask None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest getDisplayMetrics None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testQueryExternalMiniThumbnails None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testThumbnailOrderedQuery None]', 1), ('[android.provider.cts.media.MediaStore_Images_ThumbnailsTest testStoreImagesMediaExternal None]', 1)]"
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-2-4"	"2.2.7.4/H-2-4"	"02020704.720204"	"""8.2/H-2-4] MUST ensure a random read performance of at least 40 MB/s. <h3 id=""23_television_requirements"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"67:301999) 3.5.2  . Application Hibernation"	"3.5.2"	"C-1-6"	"3.5.2/C-1-6"	"03050200.670106"	"""C-1-6] and"""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"144:444095) 5.5.4  . Audio Offload"	"5.5.4"	""	"5.5.4"	"05050400.48"	"""data-text=""5.5.4. Audio Offload"">5.5.4. Audio Offload If device implementations support audio offload playback, they: [C-SR] Are STRONGLY RECOMMENDED to trim the played gapless audio content when specified by the [AudioTrack gapless API]( https://developer.android.com/reference/android/media/AudioTrack#setOffloadDelayPadding(int,%20int)) and the media container for MediaPlayer. <h3 id=""56_audio_latency"" """	""	""	"RECOMMENDED"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RecordingTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/widget29/src/android/widget/cts29/ToastTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/HwBinderTest.java', 1)]"	"[('(6,RECOMMENDED,/android/widget/cts29/ToastTest.java)', 2), ('(18,RECOMMENDED,/android/view/accessibility/cts/AccessibilityManagerTest.java)', 2), ('(112,RECOMMENDED,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,RECOMMENDED,/android/os/cts/HwBinderTest.java)', 2), ('(1,RECOMMENDED,/android/view/cts/ViewConfigurationTest.java)', 2), ('(1,RECOMMENDED,/android/hardware/camera2/cts/RecordingTest.java)', 1), ('(1,RECOMMENDED,/android/media/cts/AudioTrackTest.java)', 1), ('(3,RECOMMENDED,/android/admin/cts/DevicePolicyManagerTest.java)', 1), ('(7,RECOMMENDED,/android/widget/cts/ToastTest.java)', 1)]"	"[('([6:/android/widget/cts29/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 2), ('([18:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[RECOMMENDED]:[18]:method_text:[;        } catch (IOException e) {            fail(""Fail to run shell command"");        }    }}])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[1]:method_text:[ations contain a few required formats and sizes.     */    @CddTest(requirement=""7.5.1/C-1-2"")   ])', 2), ('([67:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[67]:method_text:[yConfig);            }        } finally {            closeDevice(cameraId);        }    }   ])', 2), ('([44:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[RECOMMENDED]:[44]:method_text:[            }        }    }    /**     * Test {@link CameraCharacteristics#getKeys}     */   ])', 2), ('([1:/android/os/cts/HwBinderTest.java]:[RECOMMENDED]:[1]:method_text:[fset), 0.0);            assertEquals(2.0, blob.getDouble(offset + 8), 0.0);        }),    };   ])', 2), ('([1:/android/view/cts/ViewConfigurationTest.java]:[RECOMMENDED]:[1]:method_text:[     assertTrue(scaledMinScalingSpanMm < 40.5); // 1.5 times the recommended size of 27mm    }   ])', 2), ('([1:/android/hardware/camera2/cts/RecordingTest.java]:[RECOMMENDED]:[1]:method_text:[ate int         mQueuedCount = 0;        private boolean     mExpectInvalidSurface = false;    }}])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[RECOMMENDED]:[1]:method_text:[wn when setBufferSizeInBytes""                  + "" is excluded from builder"");        }    }   ])', 1), ('([3:/android/admin/cts/DevicePolicyManagerTest.java]:[RECOMMENDED]:[3]:method_text:[h (SecurityException e) {            assertDeviceOwnerMessage(e.getMessage());        }    }   ])', 1), ('([1:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[1]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);        }    }   ])', 1), ('([6:/android/widget/cts/ToastTest.java]:[RECOMMENDED]:[6]:method_text:[("" "")                .append(value);        SystemUtil.runShellCommand(cmd.toString());    }   ])', 1)]"	"https://developer.android.com"	""	"[('RECOMMENDED', 19)]"	"[('[android.widget.cts29.ToastTest testAccessDuration_withA11yTimeoutEnabled None]', 2), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest getCharacteristics None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testAvailableStreamConfigs None]', 2), ('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testRecommendedStreamConfigurations None]', 2), ('[android.view.cts.ViewConfigurationTest testInstanceValues None]', 2), ('[android.hardware.camera2.cts.RecordingTest testRecordingWithDifferentPreviewSizes None]', 1), ('[android.media.cts.AudioTrackTest testAc3BuilderNoBufferSize None]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetRecommendedGlobalProxy_failIfNotDeviceOwner None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled None]', 1)]"
"16:159295) 2.2.7  . Handheld Media Performance Class"	"2.2.7"	""	"2.2.7"	"02020700.48"	"""data-text=""2.2.7. Handheld Media Performance Class"">2.2.7. Handheld Media Performance Class See Section 7.11 for the definition of media performance class. <h4 id=""2271_media"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"18:169364) 2.2.7.2  . Camera"	"2.2.7.2"	"H-1-4"	"2.2.7.2/H-1-4"	"02020702.720104"	"""7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras. && 7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras. | 7.5/H-1-4] MUST support CameraMetadata.SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME for both primary cameras."""	""	""	"SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME CameraMetadata.SENSOR"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/RobustnessTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/DngCreatorTest.java', 1)]"	"[('(1,SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,CameraMetadata.SENSOR,/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java)', 2), ('(1,CameraMetadata.SENSOR,/android/hardware/camera2/cts/DngCreatorTest.java)', 1), ('(5,CameraMetadata.SENSOR,/android/hardware/camera2/cts/RobustnessTest.java)', 1)]"	"[('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 2), ('([1:/android/hardware/camera2/cts/ExtendedCameraCharacteristicsTest.java]:[CameraMetadata.SENSOR]:[1]:method_text:[      Log.w(TAG, ""Unknown hardware level "" + level);        return Integer.toString(level);    }}])', 2), ('([1:/android/hardware/camera2/cts/DngCreatorTest.java]:[CameraMetadata.SENSOR]:[1]:method_text:[ printed to logcat.     */    private static native boolean validateDngNative(byte[] dngBuffer);}])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[CameraMetadata.SENSOR]:[2]:method_text:[nput/output combinations for each hardware     * level and capability work as expected.     */   ])', 1), ('([1:/android/hardware/camera2/cts/RobustnessTest.java]:[CameraMetadata.SENSOR]:[1]:method_text:[  if (inputWriter != null) {                inputWriter.close();            }        }    }   ])', 1), ('([2:/android/hardware/camera2/cts/RobustnessTest.java]:[CameraMetadata.SENSOR]:[2]:method_text:[ll expected mandatory stream combinations are present and     * advertised accordingly.     */   ])', 1)]"	""	""	"[('CameraMetadata.SENSOR', 6), ('SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME', 2)]"	"[('[android.hardware.camera2.cts.ExtendedCameraCharacteristicsTest testCameraPerfClassCharacteristics None]', 4), ('[android.hardware.camera2.cts.DngCreatorTest testDngRenderingByBitmapFactor None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryMaximumResolutionOutputCombinations None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testMandatoryMaximumResolutionReprocessConfigurations None]', 1), ('[android.hardware.camera2.cts.RobustnessTest testOisDataMode None]', 1)]"
"19:170348) 2.2.7.3  . Hardware"	"2.2.7.3"	"H-2-1"	"2.2.7.3/H-2-1"	"02020703.720201"	"""7.1.1.1/H-2-1] MUST have screen resolution of at least 1080p. && 7.1.1.1/H-2-1] MUST have screen resolution of at least 1080p. | 7.1.1.3/H-2-1] MUST have screen density of at least 400 dpi. && 7.1.1.1/H-2-1] MUST have screen resolution of at least 1080p. && 7.1.1.1/H-2-1] MUST have screen resolution of at least 1080p. | 7.1.1.3/H-2-1] MUST have screen density of at least 400 dpi. | 7.6.1/H-2-1] MUST have at least 6 GB of physical memory. <h4 id=""2274_performance"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"3.9.1"	"3.9.1"	"C-1-9"	"3.9.1/C-1-9"	"03090100.670109"	"""C-1-9] MUST send the ACTION_ADMIN_POLICY_COMPLIANCE intent to the Device Owner app if a Device Owner is established during provisioning regardless of the provisioning method used. The user must not be able to proceed in the Setup Wizard until the Device Owner app finishes. When the device implementation has user data, it: """	""	""	"ACTION_ADMIN_POLICY_COMPLIANCE"	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"262:730795) 9.8.9  . Installed apps"	"9.8.9"	"C-0-2"	"9.8.9/C-0-2"	"09080900.670002"	"""C-0-2] MUST NOT give to any app, read or write access to files in any other app’s dedicated, app-specific directory within external storage. The only exceptions are as follows: The external storage provider authority (e.g. apps like DocumentsUI). Download Provider which uses the “downloads” provider authority for downloading files to app storage. Platform-signed media transfer protocol (MTP) apps which use the privileged permission ACCESS_MTP to enable transferring files to another device. Apps which install other apps and have the permission INSTALL_PACKAGES can access only “obb” directories for the purpose of managing APK expansion files. <h4 id=""9810_connectivity_bug_report"" """	""	""	"INSTALL_PACKAGES ACCESS_MTP MTP APK"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 36), ('/home/gpoor/cts-source/cts/hostsidetests/rollback/app/src/com/android/cts/rollback/host/app/HostTestHelper.java', 25), ('/home/gpoor/cts-12-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 17), ('/home/gpoor/cts-12-source/cts/hostsidetests/signedconfig/hostside/src/com/android/cts/signedconfig/SignedConfigHostTest.java', 15), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/InstantCookieHostTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PrivilegedUpdateTests.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/blobstore/src/com/android/cts/host/blob/DataCleanupTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/net/src/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AccessSerialNumberTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/LocationPolicyTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsearch/src/android/appsearch/cts/AppSearchMultiUserTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/dumpsys/src/android/dumpsys/cts/StoragedDumpsysTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/TrafficStatsTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/StatsdAppSecurityAtomTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/sample/src/android/sample/cts/SampleHostJUnit4DeviceTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/testharness/src/android/testharness/cts/TestHarnessModeDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/WriteExternalStorageApp/src/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/DeviceIdentifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/OneTimePermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ApkVerityTestApp/src/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/animation/cts/DecelerateInterpolatorTest.java', 1)]"	"[('(8,APK,/android/net/cts/TrafficStatsTest.java)', 1), ('(3,APK,/android/appsecurity/cts/StatsdAppSecurityAtomTest.java)', 1), ('(8,APK,/com/android/cts/host/blob/DataCleanupTest.java)', 1), ('(15,APK,/android/appsecurity/cts/InstantCookieHostTest.java)', 1), ('(2,APK,/android/sample/cts/SampleHostJUnit4DeviceTest.java)', 1), ('(2,APK,/android/testharness/cts/TestHarnessModeDeviceTest.java)', 1), ('(59,APK,/com/android/cts/appbinding/AppBindingHostTest.java)', 1), ('(6,APK,/android/appsecurity/cts/AccessSerialNumberTest.java)', 1), ('(3,APK,/android/appsecurity/cts/LocationPolicyTest.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/PasswordComplexityTest.java)', 1), ('(1,APK,/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java)', 1), ('(3,APK,/android/appsecurity/cts/DeviceIdentifierTest.java)', 1), ('(3,APK,/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java)', 1), ('(1,APK,/com/android/cts/devicepolicy/MixedProfileOwnerTest.java)', 1), ('(45,APK,/com/android/cts/signedconfig/SignedConfigHostTest.java)', 1), ('(15,APK,/android/appsecurity/cts/PrivilegedUpdateTests.java)', 1), ('(3,APK,/android/appsearch/cts/AppSearchMultiUserTest.java)', 1), ('(4,APK,/android/dumpsys/cts/StoragedDumpsysTest.java)', 1), ('(3,APK,/android/permission/cts/OneTimePermissionTest.java)', 1), ('(2,APK,/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java)', 1), ('(1,INSTALL_PACKAGES,/com/android/cts/rollback/host/app/HostTestHelper.java)', 1), ('(134,APK,/com/android/cts/rollback/host/app/HostTestHelper.java)', 1), ('(1,APK,/android/view/animation/cts/DecelerateInterpolatorTest.java)', 1), ('(1,INSTALL_PACKAGES,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(108,APK,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1)]"	"[('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass1;->method1(,LClass1;->field1:"");    }   ])', 5), ('([2:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[2]:method_text:[LACKLIST_EXEMPTIONS)).isEqualTo(                ""LClass2;->method2(,LClass2;->field2:"");    }   ])', 5), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 3), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[sion.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenSession_shouldThrow"", args);    }   ])', 2), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[.getSetting(""global"", SETTING_SIGNED_CONFIG_VERSION))                .isEqualTo(""null"");    }   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[acks of staged installs involving only apks.     * Confirms TestApp.A2 was rolled back.     */   ])', 2), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[pks.     * Commits TestApp.A2 and TestApp.B2 as a staged install with rollback enabled.     */   ])', 2), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[onId());        assertThat(InstallUtils.getInstalledVersion(TestApp.Apex)).isEqualTo(2);    }   ])', 2), ('([8:/android/net/cts/TrafficStatsTest.java]:[APK]:[8]:method_text:[xb"", mobileRxBytesAfter, mobileRxBytesBefore,                mobileRxBytesBefore + 200000);    }}])', 1), ('([3:/android/appsecurity/cts/StatsdAppSecurityAtomTest.java]:[APK]:[3]:method_text:[ortUtils.clearReports(getDevice());        getDevice().uninstallPackage(STATSD_APP_PKG);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[he blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }   ])', 1), ('([2:/com/android/cts/host/blob/DataCleanupTest.java]:[APK]:[2]:method_text:[s the blob.        runDeviceTest(TARGET_PKG, TEST_CLASS, ""testOpenBlob_shouldThrow"", args);    }}])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[ception {        uninstallPackage(INSTANT_COOKIE_APP_PKG);        clearAppCookieData();    }   ])', 1), ('([1:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[1]:method_text:[P_PKG, ""test.instant.cookie.CookieTest"",                ""testCookieUpdateAndRetrieval"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[instant.cookie.CookieTest"",                ""testCookiePersistedAcrossInstantInstalls2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[st.instant.cookie.CookieTest"",                ""testCookiePersistedUpgradeFromInstant2"");    }   ])', 1), ('([2:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[2]:method_text:[est.instant.cookie.CookieTest"",                ""testCookieResetOnNonInstantReinstall2"");    }   ])', 1), ('([4:/android/appsecurity/cts/InstantCookieHostTest.java]:[APK]:[4]:method_text:[s Exception {        getDevice().executeShellCommand(""pm clear "" + INSTANT_COOKIE_APP_PKG);    }}])', 1), ('([2:/android/sample/cts/SampleHostJUnit4DeviceTest.java]:[APK]:[2]:method_text:[  public void setUp() throws Exception {        uninstallPackage(getDevice(), TEST_PKG);    }   ])', 1), ('([2:/android/testharness/cts/TestHarnessModeDeviceTest.java]:[APK]:[2]:method_text:[e, but it should have been wiped."", path),                getDevice().doesFileExist(path));    }}])', 1), ('([22:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[22]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK 2 and make it the default SMS app and make sure the service gets bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[   * Install APK B and make it the default SMS app and make sure the service gets bound.     */   ])', 1), (""([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[, mCurrentUserId);    }    /**     * APK 3 doesn't have a valid service to be bound.     */   ])"", 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[_CLIENT_SERVICE"");    }    /**     * APK 4 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[ ""More than one"");    }    /**     * APK 5 doesn\'t have a valid service to be bound.     */   ])', 1), ('([2:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[2]:method_text:[SERVICE not found"");    }    /**     * APK 6\'s service doesn\'t have android:process.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[     * Make sure when the SMS app gets updated, the service still gets bound correctly.     */   ])', 1), ('([5:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[5]:method_text:[ntUserId));    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[entUserId);    }    /**     * Make sure the service responds to setComponentEnabled.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[  }    /**     * Make sure when the SMS app is uninstalled, the binding will be gone.     */   ])', 1), ('([4:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[4]:method_text:[  /**     * Make sure when the SMS app changes, the service still gets bound correctly.     */   ])', 1), ('([3:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[3]:method_text:[s"",                    ""^finder,\\\\[Default\\\\sSMS\\\\sapp\\\\],"" + userId + "","");        });    }   ])', 1), ('([7:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[7]:method_text:[      }        assertUserHasNoConnection(userId);        assertUserHasNoFinder(userId);    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[dis=3,\\\\#died=2,backoff=5000"");        });    }    /**     * Test the feature flag.     */   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[UT_SEC, () -> {            checkBound(PACKAGE_A, SERVICE_1, mCurrentUserId);        });    }   ])', 1), ('([1:/com/android/cts/appbinding/AppBindingHostTest.java]:[APK]:[1]:method_text:[_A, SERVICE_1, mCurrentUserId);        assertOomAdjustment(PACKAGE_A, PACKAGE_A_PROC, 200);    }}])', 1), ('([4:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[4]:method_text:[ion {        super.tearDown();        getDevice().uninstallPackage(ACCESS_SERIAL_PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AccessSerialNumberTest.java]:[APK]:[2]:method_text:[android.os.cts.AccessSerialModernTest"",                ""testAccessSerialPermissionNeeded"");    }}])', 1), ('([2:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[2]:method_text:[public void tearDown() throws Exception {        getDevice().uninstallPackage(TEST_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/LocationPolicyTest.java]:[APK]:[1]:method_text:[            getDevice(), TEST_PKG, "".LocationPolicyTest"", ""testLocationPolicyPermissions"");    }}])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[APK]:[1]:method_text:[en) {            getDevice().uninstallPackage(PKG);        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/writeexternalstorageapp/ChangeDefaultUris.java]:[APK]:[1]:method_text:[eUnit.MILLISECONDS.sleep(500);            }        }        throw new TimeoutException();    }}])', 1), ('([3:/android/appsecurity/cts/DeviceIdentifierTest.java]:[APK]:[3]:method_text:[ {        super.tearDown();        getDevice().uninstallPackage(DEVICE_IDENTIFIER_PKG);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[   /**************************     * Data Saver Mode tests. *     **************************/   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[groundWhitelist(oldUid, false);        assertRestrictBackgroundWhitelist(newUid, false);    }   ])', 1), ('([1:/com/android/cts/net/HostsideRestrictBackgroundNetworkTests.java]:[APK]:[1]:method_text:[nstallPackage(TEST_APP2_APK);        assertPowerSaveModeWhitelist(TEST_APP2_PKG, false);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[APK]:[1]:method_text:[N_RECEIVER_TEST_CLASS, mUserId));        super.tearDown();    }    @Override    @FlakyTest   ])', 1), ('([26:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[26]:method_text:[  assertThat(getDevice().installPackage(getTestApk(apkName), false, extraArgs)).isNull();    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[).getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }   ])', 1), ('([1:/com/android/cts/signedconfig/SignedConfigHostTest.java]:[APK]:[1]:method_text:[ce().getSetting(""global"", SETTING_BLACKLIST_EXEMPTIONS))                .isEqualTo(""null"");    }}])', 1), ('([11:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[11]:method_text:[stallPackage(TEST_PKG);        getDevice().executeShellCommand(""pm enable "" + SHIM_PKG);    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[).installPackage(                mBuildHelper.getTestFile(SHIM_UPDATE_FAIL_APK), true));    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ties"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[bled"");        } finally {            getDevice().uninstallPackage(SHIM_PKG);        }    }   ])', 1), ('([1:/android/appsecurity/cts/PrivilegedUpdateTests.java]:[APK]:[1]:method_text:[ion {        Utils.runDeviceTests(getDevice(), packageName, testClassName, testMethodName);    }}])', 1), ('([2:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[2]:method_text:[ (mSecondaryUserId > 0) {            getDevice().removeUser(mSecondaryUserId);        }    }   ])', 1), ('([1:/android/appsearch/cts/AppSearchMultiUserTest.java]:[APK]:[1]:method_text:[;        runDeviceTestAsUserInPkgB(""testGlobalGetDocuments_nonexist"", mSecondaryUserId);    }   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[s the output of ""dumpsys storaged --force --hours 0.01"".     *     * @throws Exception     */   ])', 1), ('([2:/android/dumpsys/cts/StoragedDumpsysTest.java]:[APK]:[2]:method_text:[TestIO = true;                }            }            assertTrue(hasTestIO);        }    }}])', 1), ('([3:/android/permission/cts/OneTimePermissionTest.java]:[APK]:[3]:method_text:[ions_timeout_millis"",                        mOldOneTimePermissionTimeoutValue, false));    }   ])', 1), ('([2:/android/appsecurity/cts/apkveritytestapp/InstalledFilesCheck.java]:[APK]:[2]:method_text:[TestAppJni"");    }    private static native boolean hasFsverityNative(@NonNull String path);   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[INSTALL_PACKAGES]:[1]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 1), ('([5:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[5]:method_text:[s InterruptedException, IOException {        InstallUtils.dropShellPermissionIdentity();    }   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[nvolving only apks.     * Commits TestApp.A2 as a staged install with rollback enabled.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Confirms a staged rollback is available for TestApp.A2 and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ rollbacks are available for TestApp.A2 and TestApp.b2, and commits the     * rollback.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[installs involving only apks.     * Confirms TestApp.A2 and TestApp.B2 was rolled back.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[Confirms staged rollbacks are available for TestApp.A2, and commits the     * rollback.     */   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[     * <p> We start by installing version 2. The test ultimately rolls back from 3 to 2.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[  * Test rollbacks of staged installs involving only apex.     * Commit rollback phase.     */   ])', 1), ('([15:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[15]:method_text:[ * Test rollbacks of staged installs involving only apex.     * Confirm rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[rsion();        Install.single(TestApp.Apex2).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[rollbacks of staged installs involving apex and apk.     * Install first version phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Enable rollback phase.     */   ])', 1), ('([4:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[4]:method_text:[ Test rollbacks of staged installs involving apex and apk.     * Commit rollback phase.     */   ])', 1), ('([17:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[17]:method_text:[Test rollbacks of staged installs involving apex and apk.     * Confirm rollback phase.     */   ])', 1), ('([10:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[10]:method_text:[that apex update expires existing rollbacks for that apex.     * Enable rollback phase.     */   ])', 1), ('([2:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[2]:method_text:[      Install.single(Apex2SignedBobRotRollback).setStaged().setEnableRollback().commit();    }   ])', 1), ('([1:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[1]:method_text:[le(TestApp.A1).commit();        Install.single(TestApp.A2).setEnableRollback().commit();    }   ])', 1), ('([24:/com/android/cts/rollback/host/app/HostTestHelper.java]:[APK]:[24]:method_text:[tation().getContext();        return new File(context.getFilesDir(), APK_VERSION_FILENAME);    }}])', 1), ('([1:/android/view/animation/cts/DecelerateInterpolatorTest.java]:[APK]:[1]:method_text:[a8);        // check whether it starts even faster        assertTrue(delta5 > delta1);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[INSTALL_PACKAGES]:[1]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1), ('([49:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[49]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");        }        super.tearDown();    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[elper"",            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);    }   ])', 1), ('([5:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[5]:method_text:[Delegations} to test that     *    the scope can only be delegatd to one app at a time.     */   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[ remaining delegations.            setDelegatedScopes(DELEGATE_APP_PKG, null);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[kageName(CERT_INSTALLER_PKG)                .setBoolean(true)                .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[      executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");    }    @RequiresDevice   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[hod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");        }    }    @RequiresDevice   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[          .setBoolean(true)                    .setInt(0)                    .build());    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[;        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStatePreMApp"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ist(mUserId, false /* disabled */);            clearVoiceInteractionService();        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[S_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)                    .build());        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[ANAGEMENT_APK, mUserId);        executeDeviceTestClass("".AllowedAccountManagementTest"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNTS, false, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[UNTS, false, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[, ACCOUNT_TYPE, mUserId);        }        executeAccountTest(""testAddAccount_allowed"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[CCOUNT_TYPE, mUserId);        }        executeAccountTest(""testRemoveAccount_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[aller app is called directly rather than via intents from    // the DelegatedCertinstallerTest.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[n app, that tries to set wallpaper.    // Non-admin apps must not violate any user restriction.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[    // inside. But these restrictions must have no effect on the device/profile owner behavior.   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                ""testDisallowAutofill_allowed"");    }   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[;        } finally {            setDefaultContentCaptureServiceEnabled(true);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[           ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[abled(true);            executeDeviceTestClass("".MeteredDataRestrictionTest"");        }    }   ])', 1), ('([11:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[11]:method_text:[TEST_APP_PKG);            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);        }    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[{            getDevice().uninstallPackage(INTENT_RECEIVER_PKG);        }    }    @LargeTest   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[pendPackageTest"", ""testSuspendNotSuspendablePackages"");    }    @FlakyTest(bugId = 141314026)   ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[2]:method_text:[that the app launches        executeSuspendPackageTestMethod(""testPackageNotSuspended"");    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[G + "".ClearApplicationDataTest"",                ""testSharedPreferenceCleared"", mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[e) throws Exception {        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);    }   ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[1]:method_text:[oolean(false)                .setStrings(PERMISSIONS_APP_PKG)                .build());    }   ])', 1), ('([3:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[APK]:[3]:method_text:[and(                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);    }}])', 1)]"	""	""	"[('APK', 128), ('INSTALL_PACKAGES', 2)]"	"[('[com.android.cts.rollback.host.app.HostTestHelper dropShellPermissionIdentity None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None]', 2), ('[android.net.cts.TrafficStatsTest testTrafficStatsForLocalhost None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstall_openBlob None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openSession None]', 1), ('[com.android.cts.host.blob.DataCleanupTest testPackageUninstallAndReboot_openBlob None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieUpdateAndRetrieval None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedAcrossInstantInstalls None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookiePersistedUpgradeFromInstant None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieResetOnNonInstantReinstall None]', 1), ('[android.appsecurity.cts.InstantCookieHostTest testCookieValidWhenSignedWithTwoCerts None]', 1), ('[android.testharness.cts.TestHarnessModeDeviceTest testHarnessModeRemovesInstalledAppsAndData None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind1 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBind2 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleBindB None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound3 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound4 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound5 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSimpleNotBound6 None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUpgrade None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceEnabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testServiceDisabledByDefault None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testUninstall None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSwitchDefaultApp None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testSecondaryUser None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testCrashAndAutoRebind None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testFeatureDisabled None]', 1), ('[com.android.cts.appbinding.AppBindingHostTest testOomAdjustment None]', 1), ('[android.appsecurity.cts.AccessSerialNumberTest testSerialAccessPolicy None]', 1), ('[android.appsecurity.cts.LocationPolicyTest testLocationPolicyPermissions None]', 1), ('[com.android.cts.writeexternalstorageapp.ChangeDefaultUris testResetDefaultUris None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testDataSaverMode_reinstall None]', 1), ('[com.android.cts.net.HostsideRestrictBackgroundNetworkTests testBatterySaverMode_reinstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest uninstallTestApps None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigAppliedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallAfterInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstall None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigRemainsAfterUninstallInstant None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigNotDowngraded None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testConfigUpgradedOnInstallOtherPackage None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadSignatureIgnored None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Config None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testBadBase64Signature None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyValidOnDebuggableBuild None]', 1), ('[com.android.cts.signedconfig.SignedConfigHostTest testDebugKeyNotValidOnNonDebuggableBuild None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests isDefaultAbi None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradeRestricted None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testPrivilegedAppUpgradePriorities None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testDisableUpdatedSystemApp None]', 1), ('[android.appsecurity.cts.PrivilegedUpdateTests testUpdatedSystemAppPreservedOnReboot None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest isMultiUserSupported None]', 1), ('[android.appsearch.cts.AppSearchMultiUserTest testPackageUninstall_onLockedUser None]', 1), ('[android.dumpsys.cts.StoragedDumpsysTest testStoragedOutput None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkOnlyMultipleStagedPartialRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlyStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexOnlySystemVersionStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase3 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexAndApkStagedRollback_Phase4 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApexKeyRotationStagedRollback_Phase2 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper testApkRollbackByAnotherInstaller_Phase1 None]', 1), ('[com.android.cts.rollback.host.app.HostTestHelper isCheckpointSupported None]', 1), ('[android.view.animation.cts.DecelerateInterpolatorTest testDecelerateInterpolator None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictionIsRestricted None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegation None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegationCertSelection None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpn None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnLockDown None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageUninstalled None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnPackageLogged None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPermissionGrantPreMApp None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testScreenCaptureDisabled_assist None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testApplicationHidden None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_deviceAndProfileOwnerAlwaysAllowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_userRestrictionRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledAddAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAccountManagement_disabledRemoveAccount None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDelegatedCertInstaller None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetWallpaper_disallowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentCapture_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowContentSuggestions_allowed None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetMeteredDataDisabledPackages None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPackageInstallUserRestrictions None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTask None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackage None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSuspendPackageWithPackageManager None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testClearApplicationData_testPkg None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPrintingPolicy None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetUninstallBlockedLogged None]', 1)]"
"7.1.4"	"7.1.4"	"C-2-5"	"7.1.4/C-2-5"	"07010400.670205"	"""C-2-5] MUST pass all OpenGL ES dEQP Tests in the test lists between version 132383489 and the version specified in the android.software.opengles.deqp.level feature flag, for each supported OpenGL ES version."""	""	""	"android.software.opengles.deqp.level EQP"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/VulkanDeqpLevelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/ipsec/src/android/net/ipsec/ike/cts/IkeSessionPskTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1)]"	"[('(10,EQP,/android/graphics/cts/VulkanDeqpLevelTest.java)', 2), ('(3,EQP,/android/hardware/camera2/cts/HeifWriterTest.java)', 2), ('(1,EQP,/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java)', 1), ('(1,EQP,/android/net/ipsec/ike/cts/IkeSessionPskTest.java)', 1)]"	"[('([4:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[4]:method_text:[              }            }        }    }    @CddTest(requirement = ""7.1.4.2/C-1-8,C-1-9"")   ])', 2), ('([3:/android/hardware/camera2/cts/HeifWriterTest.java]:[EQP]:[3]:method_text:[           }            // TODO: add more key validations.        }        return result;    }}])', 2), ('([1:/android/net/ipsec/ike/cts/IkeSessionDigitalSignatureTest.java]:[EQP]:[1]:method_text:[RESP);        verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);    }}])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[ATURE_VULKAN_DEQP_LEVEL,                            MINIMUM_VULKAN_DEQP_LEVEL));        }    }}])', 1), ('([6:/android/graphics/cts/VulkanDeqpLevelTest.java]:[EQP]:[6]:method_text:[kageManager.FEATURE_VULKAN_DEQP_LEVEL,                        MINIMUM_VULKAN_DEQP_LEVEL));    }}])', 1), ('([1:/android/net/ipsec/ike/cts/IkeSessionPskTest.java]:[EQP]:[1]:method_text:[p);        verifyCloseIkeAndChildBlocking(firstTransformRecordA, firstTransformRecordB);    }   ])', 1)]"	""	""	"[('EQP', 8)]"	"[('[android.graphics.cts.VulkanDeqpLevelTest testVulkanDeqpLevel None]', 2), ('[android.hardware.camera2.cts.HeifWriterTest testHeif None]', 2), ('[android.net.ipsec.ike.cts.IkeSessionDigitalSignatureTest testIkeSessionSetupAndChildSessionSetupWithTransportMode None]', 1), ('[android.net.ipsec.ike.cts.IkeSessionPskTest testIkeSessionSetupAndChildSessionSetupWithTunnelModeV6 None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-5"	"9.9.3/C-1-5"	"09090300.670105"	"""C-1-5] MUST encrypt file contents and filesystem metadata using AES-256-XTS or Adiantum. AES-256-XTS refers to the Advanced Encryption Standard with a 256-bit cipher key length, operated in XTS mode; the full length of the key is 512 bits. Adiantum refers to Adiantum-XChaCha12-AES, as specified at https://github.com/google/adiantum. Filesystem metadata is data such as file sizes, ownership, modes, and extended attributes (xattrs)."""	"Annotated "	""	"AES XTS github.com"	""	""	""	""	*	""	""	2	"android.security.cts.MetadataEncryptionTest"	"testMetadataEncryptionIsEnabled()"	"CtsSecurityHostTestCases"	"[('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/PaintTest.java', 26), ('/home/gpoor/cts-source/cts/tests/tests/textclassifier/src/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java', 11), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 9), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FillEventHistoryTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/CanvasDrawGlyphsTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextSwitcherTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/text/cts/MeasuredTextTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ExternalStorageHostTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/BoringLayoutTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowMetricsWindowContextTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/StreamingMediaPlayerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/AesKeyGenPerformanceTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierMessagingServiceWrapperTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineAuthenticationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContextThemeWrapperTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/SwitchTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/PathClippingTests.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/EncryptionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/AppExitTest/src/android/app/cts/ActivityManagerAppExitInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/MutableAutofillIdTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/commontests/LoginActivityCommonTestCase.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/autofillservice/src/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/PathClippingTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/EglContextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/inline/InlineWebViewActivityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutGetLineLeftRightTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityNodeInfoTest.java', 1)]"	"[('(1,XTS,/android/uirendering/cts/testclasses/PathClippingTests.java)', 2), ('(1,XTS,/android/telephony/cts/CarrierConfigManagerTest.java)', 2), ('(1,XTS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(2,XTS,/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java)', 1), ('(1,XTS,/android/autofillservice/cts/inline/InlineAuthenticationTest.java)', 1), ('(4,XTS,/android/view/cts/ContextThemeWrapperTest.java)', 1), ('(7,XTS,/android/autofillservice/cts/FillEventHistoryTest.java)', 1), ('(1,XTS,/android/widget/cts/SwitchTest.java)', 1), ('(6,XTS,/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java)', 1), ('(1,XTS,/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java)', 1), ('(5,AES,/android/hardware/camera2/cts/BurstCaptureTest.java)', 1), ('(1,XTS,/android/view/cts/ViewTest.java)', 1), ('(5,AES,/android/security/cts/EncryptionTest.java)', 1), ('(1,AES,/android/graphics/cts/PaintTest.java)', 1), ('(101,XTS,/android/graphics/cts/PaintTest.java)', 1), ('(29,XTS,/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java)', 1), ('(17,XTS,/android/text/cts/BoringLayoutTest.java)', 1), ('(2,XTS,/android/app/cts/ActivityManagerAppExitInfoTest.java)', 1), ('(2,AES,/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java)', 1), ('(6,XTS,/android/autofillservice/cts/MutableAutofillIdTest.java)', 1), ('(48,XTS,/android/widget/cts/TextSwitcherTest.java)', 1), ('(4,XTS,/android/server/wm/WindowMetricsWindowContextTests.java)', 1), ('(11,AES,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(2,XTS,/android/autofillservice/cts/commontests/LoginActivityCommonTestCase.java)', 1), ('(1,AES,/android/hardware/camera2/cts/SurfaceViewPreviewTest.java)', 1), ('(1,XTS,/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java)', 1), ('(1,XTS,/android/app/cts/NotificationTest.java)', 1), ('(2,AES,/android/media/cts/StreamingMediaPlayerTest.java)', 1), ('(4,XTS,/android/graphics/text/cts/MeasuredTextTest.java)', 1), ('(2,AES,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(1,XTS,/android/opengl/cts/EglContextTest.java)', 1), ('(9,AES,/android/keystore/cts/AesKeyGenPerformanceTest.java)', 1), ('(1,XTS,/android/autofillservice/cts/inline/InlineWebViewActivityTest.java)', 1), ('(9,XTS,/android/telephony/cts/CarrierMessagingServiceWrapperTest.java)', 1), ('(9,XTS,/android/graphics/cts/CanvasDrawGlyphsTest.java)', 1), ('(2,XTS,/android/text/cts/StaticLayoutGetLineLeftRightTest.java)', 1), ('(14,AES,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1), ('(7,XTS,/android/view/accessibility/cts/AccessibilityNodeInfoTest.java)', 1), ('(30,AES,/android/appsecurity/cts/ExternalStorageHostTest.java)', 1)]"	"[('([1:/android/autofillservice/cts/augmented/AugmentedLoginActivityTest.java]:[XTS]:[1]:method_text:[veRequest.structure, ID_PASSWORD);        assertTextAndValue(passwordNode, ""malkovich"");    }   ])', 2), ('([1:/android/telephony/cts/CarrierConfigManagerTest.java]:[XTS]:[1]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 2), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[t(), fm.ascent, 0.0f);            assertEquals(p.descent(), fm.descent, 0.0f);        }    }   ])', 2), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[), fmi.ascent);            assertEquals(Math.round(p.descent()), fmi.descent);        }    }   ])', 2), ('([1:/android/graphics/text/cts/MeasuredTextTest.java]:[XTS]:[1]:method_text:[t, false)));        assertTrue(ssbBitmap.sameAs(makeBitmapFromPct(text, paint, false)));    }   ])', 2), ('([1:/android/graphics/cts/CanvasDrawGlyphsTest.java]:[XTS]:[1]:method_text:[p.sameAs(glyphBmp2)).isTrue();        assertThat(glyphBmp.sameAs(expectedBmp)).isTrue();    }   ])', 2), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[2]:method_text:[    public void testMediaEscalation() throws Exception {        doMediaEscalation(MEDIA);    }   ])', 2), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[2]:method_text:[ublic void testMediaEscalation28() throws Exception {        doMediaEscalation(MEDIA_28);    }   ])', 2), ('([10:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[10]:method_text:[     runDeviceTests(config.pkg, config.clazz, ""testMediaEscalation_RequestDelete"", user);    }   ])', 2), ('([1:/android/text/cts/AlteredCharSequenceTest.java]:[XTS]:[1]:method_text:[   public CharSequence subSequence(int start, int end) {            return null;        }    }}])', 1), ('([1:/android/autofillservice/cts/inline/InlineAuthenticationTest.java]:[XTS]:[1]:method_text:[.selectByRelativeId(id);        mUiBot.waitForIdle();        mUiBot.assertDatasets(names);    }}])', 1), ('([4:/android/view/cts/ContextThemeWrapperTest.java]:[XTS]:[4]:method_text:[tyle, defValue),                ta.getInt(R.styleable.TextAppearance_textStyle, defValue));    }}])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[e.getFillEvents(1);        assertFillEventForSaveShown(events.get(0), NULL_DATASET_ID);    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[Id, ""id2"");            assertThat(event2.getManuallyEnteredField()).isEmpty();        }    }   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[by the user,     * neither the user entered values that were present in these datasets.     */   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[re selected by the user,     * and the user changed the values provided by the service.     */   ])', 1), (""([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[ected by the user,     * and the user didn't change the values provided by the service.     */   ])"", 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[entered values that match what was provided by the service on different     * datasets.     */   ])', 1), ('([1:/android/autofillservice/cts/FillEventHistoryTest.java]:[XTS]:[1]:method_text:[  assertThat(manuallyEnteredFields.get(passwordId)).containsExactly(""id2"", ""id3"");        }    }}])', 1), ('([1:/android/widget/cts/SwitchTest.java]:[XTS]:[1]:method_text:[           () -> mSwitch.setShowText(false));        assertFalse(mSwitch.getShowText());    }   ])', 1), ('([6:/android/accessibilityservice/cts/AccessibilityTextTraversalTest.java]:[XTS]:[6]:method_text:[T_MS);    }    private String getString(int id) {        return mActivity.getString(id);    }}])', 1), ('([1:/android/autofillservice/cts/inline/InlineFillEventHistoryTest.java]:[XTS]:[1]:method_text:[etShown(events.get(0));        assertFillEventForSaveShown(events.get(3), NULL_DATASET_ID);    }}])', 1), ('([1:/android/uirendering/cts/testclasses/PathClippingTests.java]:[XTS]:[1]:method_text:[     helper.loadData(""<body style=\\""background-color:blue\\"">"");        };    }    @LargeTest   ])', 1), ('([5:/android/hardware/camera2/cts/BurstCaptureTest.java]:[AES]:[5]:method_text:[ameDuration/1e6,                        limit95FrameDuration/1e6));            }        }    }}])', 1), ('([1:/android/view/cts/ViewTest.java]:[XTS]:[1]:method_text:[.class,        android.widget.ZoomButton.class,        android.widget.ZoomControls.class,    };}])', 1), ('([5:/android/security/cts/EncryptionTest.java]:[AES]:[5]:method_text:[able    // to instant apps    @AppModeFull    @CddTest(requirement=""9.9.2/C-0-1,C-0-2,C-0-3"")   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[AES]:[1]:method_text:[SCULAPIUS                p.hasGlyph(""\\uD83D\\uDC69\\u200D\\u2695\\uFE0F""));  // above + VS16    }   ])', 1), ('([15:/android/graphics/cts/PaintTest.java]:[XTS]:[15]:method_text:[++) {            assertEquals(""i: "" + i, expectedWidth, measured[i][0], 0.0f);        }    }   ])', 1), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[ spacing20 = p.getFontSpacing();            assertTrue(spacing20 > spacing10);        }    }   ])', 1), ('([7:/android/graphics/cts/PaintTest.java]:[XTS]:[7]:method_text:[f);        p.setTextScaleX(0.0f);        assertEquals(0.0f, p.getTextScaleX(), 0.0f);    }   ])', 1), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[      float ascent20 = p.ascent();            assertTrue(ascent20 < ascent10);        }    }   ])', 1), ('([7:/android/graphics/cts/PaintTest.java]:[XTS]:[7]:method_text:[);        p.setTextSkewX(-0.25f);        assertEquals(-0.25f, p.getTextSkewX(), 0.0f);    }   ])', 1), ('([9:/android/graphics/cts/PaintTest.java]:[XTS]:[9]:method_text:[uals to 0        p.setTextSize(0.0f);        assertEquals(0.0f, p.getTextSize(), 0.0f);    }   ])', 1), ('([10:/android/graphics/cts/PaintTest.java]:[XTS]:[10]:method_text:[idths[2][i], 0.0f);            assertEquals(widths[2][i], widths[3][i], 0.0f);        }    }   ])', 1), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[  float descent20 = p.descent();            assertTrue(descent20 > descent10);        }    }   ])', 1), ('([2:/android/graphics/cts/PaintTest.java]:[XTS]:[2]:method_text:[.right);        assertTrue(bounds2.bottom - bounds2.top > bounds1.bottom - bounds1.top);    }   ])', 1), ('([6:/android/graphics/cts/PaintTest.java]:[XTS]:[6]:method_text:[   verifyMeasureText(text, textChars, textSpan, 4, 7, widths[4] + widths[5] + widths[6]);    }   ])', 1), ('([4:/android/graphics/cts/PaintTest.java]:[XTS]:[4]:method_text:[Equals(widths[2], widths[3], 0.0f);        assertEquals(widths[3], expectedWidth, 0.0f);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[     new Paint().getRunAdvance(string, 0, string.length(), 1, string.length(), false, 1);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[    new Paint().getRunAdvance(string, 0, string.length(), -1, string.length(), false, 0);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[ForAdvance(string, -1, string.length(), 0, string.length(), false,                0.0f);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[tForAdvance(string, 0, string.length(), 1, string.length(), false,                0.0f);    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[m);        p.setElegantTextHeight(false);        assertFalse(p.isElegantTextHeight());    }   ])', 1), ('([5:/android/graphics/cts/PaintTest.java]:[XTS]:[5]:method_text:[   p1.setTextSize(p2.getTextSize());        assertTrue(p1.equalsForTextMeasurement(p2));    }   ])', 1), ('([5:/android/graphics/cts/PaintTest.java]:[XTS]:[5]:method_text:[ p1.setTextSkewX(p2.getTextSkewX());        assertTrue(p1.equalsForTextMeasurement(p2));    }   ])', 1), ('([5:/android/graphics/cts/PaintTest.java]:[XTS]:[5]:method_text:[1.setTextScaleX(p2.getTextScaleX());        assertTrue(p1.equalsForTextMeasurement(p2));    }   ])', 1), ('([1:/android/graphics/cts/PaintTest.java]:[XTS]:[1]:method_text:[TART_HYPHEN_EDIT_NO_EDIT);        paint.setEndHyphenEdit(Paint.END_HYPHEN_EDIT_NO_EDIT);    }   ])', 1), ('([6:/android/graphics/cts/PaintTest.java]:[XTS]:[6]:method_text:[            contextStart, contextCount, true, offset, cursorOpt));        return result;    }   ])', 1), ('([1:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[1]:method_text:[d123"";    private static final LocaleList LOCALES = LocaleList.forLanguageTags(""fr,en,de,es"");   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[etId());        assertEquals(BUNDLE_VALUE, selection.getExtras().getString(BUNDLE_KEY));    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[idenceScore(""random_type""), ACCEPTED_DELTA);        assertEquals(id, selection.getId());    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[      assertNull(selection.getId());        assertTrue(selection.getExtras().isEmpty());    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[selection.getConfidenceScore(TextClassifier.TYPE_OTHER),                ACCEPTED_DELTA);    }   ])', 1), ('([2:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[2]:method_text:[rams() {        new TextSelection.Builder(-1 /* start */, END)                .build();    }   ])', 1), ('([2:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[2]:method_text:[arams() {        new TextSelection.Builder(START, 0 /* end */)                .build();    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[fBoundsIndex = selection.getEntityCount();        selection.getEntity(outOfBoundsIndex);    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[ocales());        assertEquals(BUNDLE_VALUE, request.getExtras().getString(BUNDLE_KEY));    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[(null)                        .build();        assertNull(request.getDefaultLocales());    }   ])', 1), ('([3:/android/view/textclassifier/cts/TextClassifierValueObjectsTest.java]:[XTS]:[3]:method_text:[sertNull(request.getDefaultLocales());        assertTrue(request.getExtras().isEmpty());    }   ])', 1), ('([6:/android/text/cts/BoringLayoutTest.java]:[XTS]:[6]:method_text:[ToBitmap(layoutWithPrecomputed);        assertTrue(msg, resultBMP.sameAs(expectedBMP));    }   ])', 1), ('([11:/android/text/cts/BoringLayoutTest.java]:[XTS]:[11]:method_text:[ALE,                                DEFAULT_METRICS,                                true);    }}])', 1), ('([2:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[XTS]:[2]:method_text:[tSep, start);        assertTrue(end > start);        return dump.substring(start, end);    }   ])', 1), ('([2:/com/android/cts/verifier/security/UnlockedDeviceRequiredTest.java]:[AES]:[2]:method_text:[iometricManager mBiometricManager;        private KeyguardManager mKeyguardManager;        private])', 1), ('([6:/android/autofillservice/cts/MutableAutofillIdTest.java]:[XTS]:[6]:method_text:[ext2).isNotNull();        assertThat(node2Context2.getText().toString()).isEqualTo(""NOD2"");    }}])', 1), ('([9:/android/widget/cts/TextSwitcherTest.java]:[XTS]:[9]:method_text:[Activity();        mTextSwitcher = (TextSwitcher) mActivity.findViewById(R.id.switcher);    }   ])', 1), ('([2:/android/widget/cts/TextSwitcherTest.java]:[XTS]:[2]:method_text:[ew TextSwitcher(mActivity);        new TextSwitcher(mActivity, null);    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/TextSwitcherTest.java]:[XTS]:[11]:method_text:[.toString()));        assertSame(tv2, mTextSwitcher.getCurrentView());    }    @UiThreadTest   ])', 1), ('([11:/android/widget/cts/TextSwitcherTest.java]:[XTS]:[11]:method_text:[.toString()));        assertSame(tv1, mTextSwitcher.getCurrentView());    }    @UiThreadTest   ])', 1), ('([15:/android/widget/cts/TextSwitcherTest.java]:[XTS]:[15]:method_text:[/ issue 1695243, not clear what is supposed to happen if the LayoutParams is null.        }    }}])', 1), ('([2:/android/server/wm/WindowMetricsWindowContextTests.java]:[XTS]:[2]:method_text:[TestSession());        mWindowContextSession.assertWindowContextMetricsMatchesLayout();    }   ])', 1), ('([2:/android/server/wm/WindowMetricsWindowContextTests.java]:[XTS]:[2]:method_text:[splayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;            return params;        }    }}])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[2]:method_text:[xpectedSecret.getEncoded()),                Arrays.toString(actualSecret.getEncoded()));    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[5]:method_text:[.i(TAG, ""Deleted "" + (latestImportedEntryNumber + 1) + "" keys"");        }    }    @LargeTest   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[AES]:[4]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([2:/android/autofillservice/cts/commontests/LoginActivityCommonTestCase.java]:[XTS]:[2]:method_text:[ndNodeByResourceId(request.structure, ID_PASSWORD).isFocused()).isFalse();    }    @Presubmit   ])', 1), ('([1:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[AES]:[1]:method_text:[rent native internals, and multiple Surfaces pointing to the same actual consumer object     */   ])', 1), (""([1:/android/autofillservice/cts/dropdown/VirtualContainerActivityTest.java]:[XTS]:[1]:method_text:[gain, but then we wouldn't be effectively testing that the context was committed    @Presubmit   ])"", 1), ('([1:/android/app/cts/NotificationTest.java]:[XTS]:[1]:method_text:[ode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().permitAll().build());        }    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/PathClippingTests.java]:[XTS]:[1]:method_text:[er(webview, fence);            helper.loadData(BLUE_RED_HTML);        };    }    @LargeTest   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AES]:[1]:method_text:[   localHlsTest(""audio_only/index.m3u8"", 60 * 1000, -1, true /*isAudioOnly*/);        }    }   ])', 1), ('([1:/android/media/cts/StreamingMediaPlayerTest.java]:[AES]:[1]:method_text:[000, -1, false /*isAudioOnly*/);        }    }    // Streaming audio from local HTTP server   ])', 1), ('([1:/android/graphics/text/cts/MeasuredTextTest.java]:[XTS]:[1]:method_text:[);        sPaint.setTypeface(tf);        sPaint.setTextSize(10.0f);  // Make 1em = 10px    }   ])', 1), ('([1:/android/graphics/text/cts/MeasuredTextTest.java]:[XTS]:[1]:method_text:[ paint, true)));        assertTrue(ssbBitmap.sameAs(makeBitmapFromPct(text, paint, true)));    }}])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[AES]:[2]:method_text:[reAlias));        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 1), ('([1:/android/opengl/cts/EglContextTest.java]:[XTS]:[1]:method_text:[blic class EglContextTest {    /**     * Tests creating then releasing an EGL context.     */   ])', 1), ('([2:/android/keystore/cts/AesKeyGenPerformanceTest.java]:[AES]:[2]:method_text:[rmanceTest extends PerformanceTestBase {    final int[] SUPPORTED_AES_KEY_SIZES = {128, 256};   ])', 1), ('([7:/android/keystore/cts/AesKeyGenPerformanceTest.java]:[AES]:[7]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([1:/android/autofillservice/cts/inline/InlineWebViewActivityTest.java]:[XTS]:[1]:method_text:[ndValue(usernameNode2, ""dudeu"");        Helper.assertTextAndValue(passwordNode2, ""sweetp"");    }}])', 1), ('([3:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[XTS]:[3]:method_text:[e the all CarrierMessagingServices can send data sms and     * triggers valid callback.     */   ])', 1), ('([6:/android/telephony/cts/CarrierMessagingServiceWrapperTest.java]:[XTS]:[6]:method_text:[e the all CarrierMessagingServices can send data sms and     * triggers valid callback.     */   ])', 1), ('([1:/android/graphics/cts/CanvasDrawGlyphsTest.java]:[XTS]:[1]:method_text:[_ORIGIN_X, DRAW_ORIGIN_Y, paint);        assertThat(glyphBmp.sameAs(textBmp)).isTrue();    }   ])', 1), ('([1:/android/graphics/cts/CanvasDrawGlyphsTest.java]:[XTS]:[1]:method_text:[       paint        );        assertThat(firstThreeBmp.sameAs(firstTwoBmp)).isFalse();    }   ])', 1), ('([1:/android/graphics/cts/CanvasDrawGlyphsTest.java]:[XTS]:[1]:method_text:[   paint        );        assertThat(bmp.sameAs(differentGlyphPositionBmp)).isFalse();    }   ])', 1), ('([4:/android/graphics/cts/CanvasDrawGlyphsTest.java]:[XTS]:[4]:method_text:[            paint        );        assertThat(bmp.sameAs(twiceTextSizeBmp)).isFalse();    }   ])', 1), ('([2:/android/text/cts/StaticLayoutGetLineLeftRightTest.java]:[XTS]:[2]:method_text:[ign == Alignment.ALIGN_CENTER */                mExpectedAlign = ALIGN_CENTER;        }    }   ])', 1), ('([7:/android/view/accessibility/cts/AccessibilityNodeInfoTest.java]:[XTS]:[7]:method_text:[ reset"", info.isTextEntryKey());    }    private static class MockBinder extends Binder {    }}])', 1), ('([2:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[2]:method_text:[g, MEDIA.clazz, ""testMediaEscalation_RequestWriteFilePathSupport"",                user);    }   ])', 1), ('([4:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[4]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ])', 1), ('([1:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[1]:method_text:[    * the system will show the user confirmation dialog.     *     * @throws Exception     */   ])', 1), ('([3:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[3]:method_text:[he     * system will show the user confirmation dialog.     *     * @throws Exception     */   ])', 1), ('([3:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[3]:method_text:[, the system will NOT show the user confirmation dialog.     *     * @throws Exception     */   ])', 1), ('([3:/android/appsecurity/cts/ExternalStorageHostTest.java]:[AES]:[3]:method_text:[re : features) {            Assume.assumeFalse(featureList.contains(feature));        }    }   ])', 1)]"	"https://github.com"	""	"[('XTS', 86), ('AES', 25)]"	"[('[android.graphics.cts.CanvasDrawGlyphsTest isTrue None]', 3), ('[android.graphics.cts.CanvasDrawGlyphsTest isFalse None]', 3), ('[android.uirendering.cts.testclasses.PathClippingTests testTextClip None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation28 None]', 2), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation29 None]', 2), ('[android.text.cts.AlteredCharSequenceTest testToString None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_neitherServiceCanAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.augmented.AugmentedLoginActivityTest testAutoFill_notImportantForAutofill_thenManualRequest None]', 1), ('[android.autofillservice.cts.inline.InlineAuthenticationTest testDatasetAuthClientStateSetOnIntentOnly None]', 1), ('[android.view.cts.ContextThemeWrapperTest testApplyOverrideConfiguration None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_idlessDatasetSelected_datasetWithIdIgnored None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_idlessDatasetIgnored_datasetWithIdSelected None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_oneDatasetSelected None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_multipleDatasetsSelected None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_noDatasetSelected_butManuallyEntered None]', 1), ('[android.autofillservice.cts.FillEventHistoryTest testContextCommitted_noDatasetSelected_butManuallyEntered_matchingMultipleDatasets None]', 1), ('[android.widget.cts.SwitchTest testAccessText None]', 1), ('[android.accessibilityservice.cts.AccessibilityTextTraversalTest testSelectionPositionForNonEditableView None]', 1), ('[android.autofillservice.cts.inline.InlineFillEventHistoryTest testOneDatasetAndSave None]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh None]', 1), ('[android.view.cts.ViewTest testIsShowingLayoutBounds None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable None]', 1), ('[android.security.cts.EncryptionTest aesIsFast None]', 1), ('[android.graphics.cts.PaintTest testHasGlyph None]', 1), ('[android.graphics.cts.PaintTest testBreakText None]', 1), ('[android.graphics.cts.PaintTest testGetFontSpacing None]', 1), ('[android.graphics.cts.PaintTest testAccessTextScaleX None]', 1), ('[android.graphics.cts.PaintTest testAscent None]', 1), ('[android.graphics.cts.PaintTest testAccessTextSkewX None]', 1), ('[android.graphics.cts.PaintTest testAccessTextSize None]', 1), ('[android.graphics.cts.PaintTest testGetTextWidths None]', 1), ('[android.graphics.cts.PaintTest testGetFontMetrics1 None]', 1), ('[android.graphics.cts.PaintTest testGetFontMetrics2 None]', 1), ('[android.graphics.cts.PaintTest testDescent None]', 1), ('[android.graphics.cts.PaintTest testGetTextBounds None]', 1), ('[android.graphics.cts.PaintTest testGetFontMetricsInt1 None]', 1), ('[android.graphics.cts.PaintTest testGetFontMetricsInt2 None]', 1), ('[android.graphics.cts.PaintTest testMeasureText None]', 1), ('[android.graphics.cts.PaintTest testMeasureTextWithLongText None]', 1), ('[android.graphics.cts.PaintTest testGetRunAdvanceStartLessThanContextStart None]', 1), ('[android.graphics.cts.PaintTest testGetRunAdvanceContextStartNegative None]', 1), ('[android.graphics.cts.PaintTest testGetOffsetForAdvanceContextStartNegative None]', 1), ('[android.graphics.cts.PaintTest testGetOffsetForAdvanceStartLessThanContextStart None]', 1), ('[android.graphics.cts.PaintTest testElegantText None]', 1), ('[android.graphics.cts.PaintTest testEqualsForTextMeasurment_textSize None]', 1), ('[android.graphics.cts.PaintTest testEqualsForTextMeasurment_textSkew None]', 1), ('[android.graphics.cts.PaintTest testEqualsForTextMeasurment_textScale None]', 1), ('[android.graphics.cts.PaintTest testHyphenEdit None]', 1), ('[android.graphics.cts.PaintTest testGetTextRunAdvances None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_differentParams None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_defaultValues None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_prunedConfidenceScore None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_invalidStartParams None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_invalidEndParams None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelection_entityIndexOutOfBounds None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelectionRequest None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelectionRequest_nullValues None]', 1), ('[android.view.textclassifier.cts.TextClassifierValueObjectsTest testTextSelectionRequest_defaultValues None]', 1), ('[android.text.cts.BoringLayoutTest testDraw None]', 1), ('[android.text.cts.BoringLayoutTest testPrecomputedText None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testOther None]', 1), ('[com.android.cts.verifier.security.UnlockedDeviceRequiredTest setPassFailButtonClickListeners None]', 1), ('[android.autofillservice.cts.MutableAutofillIdTest testSave_serviceExpectingOldId None]', 1), ('[android.widget.cts.TextSwitcherTest testConstructor None]', 1), ('[android.widget.cts.TextSwitcherTest testSetText None]', 1), ('[android.widget.cts.TextSwitcherTest testSetCurrentText None]', 1), ('[android.widget.cts.TextSwitcherTest testAddView None]', 1), ('[android.server.wm.WindowMetricsWindowContextTests testMetricsMatchesLayoutOnWindowContext None]', 1), ('[android.server.wm.WindowMetricsWindowContextTests testMetricsMatchesDisplayAreaOnWindowContext None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_KeyOperations_Wrap_Unencrypted_Success None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES None]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_AES None]', 1), ('[android.autofillservice.cts.commontests.LoginActivityCommonTestCase testAutofill_twoDatasets_selectSecondDataset None]', 1), ('[android.hardware.camera2.cts.SurfaceViewPreviewTest testPreparePerformance None]', 1), ('[android.autofillservice.cts.dropdown.VirtualContainerActivityTest testSave_submitButtonClicked None]', 1), ('[android.app.cts.NotificationTest testBuildStrictMode None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_audio_only_overridable None]', 1), ('[android.media.cts.StreamingMediaPlayerTest testHlsSampleAes_bbb_unmuxed_1500k None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isSimCardPresent None]', 1), ('[android.graphics.text.cts.MeasuredTextTest testCanvasDrawTextRun_sameOutputTestForLatinText None]', 1), ('[android.graphics.text.cts.MeasuredTextTest testCanvasDrawTextRun_sameOutputTestForCJKText None]', 1), ('[android.graphics.text.cts.MeasuredTextTest testCanvasDrawTextRun_sameOutputTestForRTLText None]', 1), ('[android.keystore.cts.KeyAttestationTest testAesAttestation None]', 1), ('[android.keystore.cts.AesKeyGenPerformanceTest testAesKeyGen None]', 1), ('[android.autofillservice.cts.inline.InlineWebViewActivityTest testAutofillAndSave None]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendTextSms None]', 1), ('[android.telephony.cts.CarrierMessagingServiceWrapperTest testSendMultipartTextSms None]', 1), ('[android.view.accessibility.cts.AccessibilityNodeInfoTest testIsHeadingTakesOldApiIntoAccount None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testMediaEscalation_RequestWriteFilePathSupport None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_userDenied None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_noRESAndMES_showConfirmDialog None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_noMANAGEMEDIA_showConfirmDialog None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_withNoAML_showConfirmDialog None]', 1), ('[android.appsecurity.cts.ExternalStorageHostTest testCreateRequest_withPermission_notShowConfirmDialog None]', 1)]"
"270:744174) 9.9.3  . Encryption Methods"	"9.9.3"	"C-1-15"	"9.9.3/C-1-15"	"09090300.670115"	"""C-1-15] MUST ensure that all non-deleted blocks of encrypted file contents on persistent storage were encrypted using combinations of encryption key and initialization vector (IV) that depend on both the file and the offset within the file. In addition, all such combinations MUST be distinct, except where the encryption is done using inline encryption hardware that only supports an IV length of 32 bits. """	Found reference in comments, incomplete test technical reasons	""	""	""	""	""	""	*	""	""	1	cts/tests/tests/security/native/encryption/FileBasedEncryptionPolicyTest.cpp	validateEncryptionFlags	""	""	""	""	""	""	""	""
"20:171592) 2.2.7.4  . Performance"	"2.2.7.4"	"H-2-2"	"2.2.7.4/H-2-2"	"02020704.720202"	"""8.2/H-2-2] MUST ensure a random write performance of at least 10 MB/s."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"68:305198) 3.6  . API Namespaces"	"3.6"	"C-1-1"	"3.6/C-1-1"	"03060000.670101"	"""C-1-1] MUST NOT be in a NDK library or a library owned by another organization as described here. If a device implementer proposes to improve one of the package namespaces above (such as by adding useful new functionality to an existing API, or adding a new API), the implementer SHOULD visit source.android.com and begin the process for contributing changes and code, according to the information on that site. Note that the restrictions above correspond to standard conventions for naming APIs in the Java programming language; this section simply aims to reinforce those conventions and make them binding through inclusion in this Compatibility Definition. <h3 id=""37_runtime_compatibility"" """	""	""	"NDK"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/BitmapTest.java', 13), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EncodeDecodeTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/DigitsKeyListenerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaActivityTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/KeyEventInjectionTest.java', 4), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/AlertDialog_BuilderTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/ExtractorTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ExpandableListViewWithHeadersTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ContentPaneFocusTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/AuthBoundKeyTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/GridViewTest.java', 2), ('/home/gpoor/cts-source/cts/tools/release-parser/tests/src/com/android/cts/releaseparser/SoParserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/SpinnerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/InstrumentationTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/atrace/src/android/atrace/cts/AtraceHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/Ikev2VpnTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsListViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ListViewTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/NativeMediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AppDataIsolationTestApp/AppA/src/com/android/cts/appdataisolation/appa/AppATests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/SyncTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/AbsSeekBarTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/LayoutTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TabHostTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/SharedMemoryTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/LayoutTests.java', 1), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorNativeTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionWrapperTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/view/src/android/view/cts/ASurfaceControlTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/SurfaceViewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/ArrayMapTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/NumberKeyListenerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/EditTextTest.java', 1), ('/home/gpoor/cts-source/cts/tests/media/src/android/mediav2/cts/MuxerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioPlayRoutingNative.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActionBarTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/DatePickerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/method/cts/TimeKeyListenerTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/hdmicec/src/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/library/src_target/com/android/test/usesnativesharedlibrary/LoadTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyFactoryTest.java', 1)]"	"[('(25,NDK,/android/view/cts/ViewTest.java)', 2), ('(3,NDK,/android/hardware/camera2/cts/CameraManagerTest.java)', 2), ('(1,NDK,/android/server/wm/LayoutTests.java)', 2), ('(27,NDK,/android/graphics/cts/BitmapTest.java)', 2), ('(3,NDK,/android/media/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(2,NDK,/android/widget/cts/ExpandableListViewWithHeadersTest.java)', 1), ('(5,NDK,/android/view/cts/ContentPaneFocusTest.java)', 1), ('(6,NDK,/android/appsecurity/cts/AuthBoundKeyTest.java)', 1), ('(1,NDK,/android/media/tv/cts/TvViewTest.java)', 1), ('(2,NDK,/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java)', 1), ('(8,NDK,/android/hardware/camera2/cts/CaptureResultTest.java)', 1), ('(12,NDK,/android/widget/cts/GridViewTest.java)', 1), ('(1,NDK,/com/android/cts/appdataisolation/appa/AppATests.java)', 1), ('(6,NDK,/com/android/cts/releaseparser/SoParserTest.java)', 1), ('(1,NDK,/android/graphics/cts/SyncTest.java)', 1), ('(2,NDK,/android/widget/cts/AbsSeekBarTest.java)', 1), ('(12,NDK,/android/widget/cts/TabHostTest.java)', 1), ('(1,NDK,/android/os/cts/SharedMemoryTest.java)', 1), ('(2,NDK,/android/widget/cts/SpinnerTest.java)', 1), ('(22,NDK,/android/media/cts/EncodeDecodeTest.java)', 1), ('(2,NDK,/android/hardware/cts/SensorNativeTest.java)', 1), ('(4,NDK,/android/app/cts/InstrumentationTest.java)', 1), ('(2,NDK,/android/view/inputmethod/cts/InputConnectionWrapperTest.java)', 1), ('(7,NDK,/android/atrace/cts/AtraceHostTest.java)', 1), ('(4,NDK,/android/app/cts/AlertDialog_BuilderTest.java)', 1), ('(8,NDK,/android/net/cts/Ikev2VpnTest.java)', 1), ('(8,NDK,/android/media/cts/MediaActivityTest.java)', 1), ('(2,NDK,/android/view/cts/ASurfaceControlTest.java)', 1), ('(27,NDK,/android/text/method/cts/DigitsKeyListenerTest.java)', 1), ('(4,NDK,/android/widget/cts/AbsListViewTest.java)', 1), ('(1,NDK,/android/server/wm/SurfaceViewTest.java)', 1), ('(2,NDK,/android/util/cts/ArrayMapTest.java)', 1), ('(12,NDK,/android/mediav2/cts/ExtractorTest.java)', 1), ('(3,NDK,/android/text/method/cts/NumberKeyListenerTest.java)', 1), ('(2,NDK,/android/widget/cts/EditTextTest.java)', 1), ('(4,NDK,/android/view/inputmethod/cts/InputMethodServiceTest.java)', 1), ('(1,NDK,/android/mediav2/cts/MuxerTest.java)', 1), ('(2,NDK,/android/media/cts/AudioPlayRoutingNative.java)', 1), ('(3,NDK,/android/widget/cts/ListViewTest.java)', 1), ('(2,NDK,/android/app/cts/ActionBarTest.java)', 1), ('(8,NDK,/android/widget/cts/DatePickerTest.java)', 1), ('(4,NDK,/android/text/method/cts/TimeKeyListenerTest.java)', 1), ('(1,NDK,/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java)', 1), ('(1,NDK,_target/com/android/test/usesnativesharedlibrary/LoadTest.java)', 1), ('(6,NDK,/android/view/cts/KeyEventInjectionTest.java)', 1), ('(1,NDK,/android/keystore/cts/KeyFactoryTest.java)', 1)]"	"[('([2:/android/view/cts/ViewTest.java]:[NDK]:[2]:method_text:[  mInstrumentation.sendKeySync(event);        assertTrue(view.hasCalledOnKeyShortcut());    }   ])', 2), ('([1:/android/view/cts/ViewTest.java]:[NDK]:[1]:method_text:[mentation.sendKeySync(event);        assertTrue(view.hasCalledDispatchUnhandledMove());    }   ])', 2), ('([11:/android/view/cts/ViewTest.java]:[NDK]:[11]:method_text:[istener.fired()); // checks that both up and down were received        listener.reset();    }   ])', 2), ('([7:/android/view/cts/ViewTest.java]:[NDK]:[7]:method_text:[r().removeOnPreDrawListener(this);                return true;            }        });    }   ])', 2), ('([3:/android/view/cts/ViewTest.java]:[NDK]:[3]:method_text:[PointerSync(event);        assertTrue(fitWindowsView.isInTouchMode());    }    @UiThreadTest   ])', 2), ('([1:/android/view/cts/ViewTest.java]:[NDK]:[1]:method_text:[view.hasCalledDispatchKeyEventPreIme());        assertTrue(view.hasCalledOnKeyPreIme());    }   ])', 2), ('([1:/android/hardware/camera2/cts/CameraManagerTest.java]:[NDK]:[1]:method_text:[    }    // Test: that properties queried between the Java SDK and the C++ NDK are equivalent.   ])', 2), ('([2:/android/hardware/camera2/cts/CameraManagerTest.java]:[NDK]:[2]:method_text:[t lensFacing);    // Test: that an exception is thrown if an invalid device id is passed down.   ])', 2), ('([1:/android/server/wm/LayoutTests.java]:[NDK]:[1]:method_text:[ (activity) {                return childWindowGotKeyEvent[0];            }        });    }   ])', 2), ('([2:/android/media/cts/EncodeDecodeTest.java]:[NDK]:[2]:method_text:[  * a PersistentSurface and decoded onto a Surface.  The output is checked for validity.     */   ])', 2), ('([6:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[6]:method_text:[ not be accepted,     *     because text view accepts only one decimal point per field.     */   ])', 2), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[t,                nCompress(bitmap, nativeCompressFormat(format), 50, stream, storage));    }   ])', 2), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[    nValidateBitmapInfo(hardware, 10, 20, true);        nValidateNdkAccessFails(bitmap);    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[            assertEquals(""Config: "" + pair.config, pair.format, nativeFormat);        }    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[ssertEquals(""Config: "" + pair.config, pair.format, nativeFormat);            }        }    }   ])', 2), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[            new Object[] { Config.RGBA_F16,  ANDROID_BITMAP_FORMAT_RGBA_F16 },        };    }   ])', 2), ('([2:/android/graphics/cts/BitmapTest.java]:[NDK]:[2]:method_text:[Bitmap.recycle();                }                bm.recycle();            }        }    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[            assertEquals(DataSpace.ADATASPACE_SCRGB_LINEAR, nGetDataSpace(bm));        }    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[ssertEquals(DataSpace.ADATASPACE_SRGB_LINEAR, nGetDataSpace(bm));            }        }    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[e.fromColorSpace(colorSpace),                        dataSpace);            }        }    }   ])', 2), ('([1:/android/graphics/cts/BitmapTest.java]:[NDK]:[1]:method_text:[Space = nGetDataSpace(bm);        assertEquals(DataSpace.ADATASPACE_UNKNOWN, dataSpace);    }   ])', 2), ('([6:/android/graphics/cts/BitmapTest.java]:[NDK]:[6]:method_text:[          + "" at quality "" + quality, matched);                }            }        }    }   ])', 2), ('([4:/android/graphics/cts/BitmapTest.java]:[NDK]:[4]:method_text:[tory.Options();        options.inPreferredConfig = Config.HARDWARE;        return options;    }}])', 2), ('([3:/android/media/cts/NativeMediaDrmClearkeyTest.java]:[NDK]:[3]:method_text:[);        buffer.putLong(uuid.getLeastSignificantBits());        return buffer.array();    }   ])', 1), ('([1:/android/widget/cts/ExpandableListViewWithHeadersTest.java]:[NDK]:[1]:method_text:[View, null);        assertFalse(mExpandableListView.isGroupExpanded(0));    }    @LargeTest   ])', 1), ('([1:/android/widget/cts/ExpandableListViewWithHeadersTest.java]:[NDK]:[1]:method_text:[ mExpandableListView, null);        assertTrue(mExpandableListView.isGroupExpanded(0));    }   ])', 1), ('([2:/android/view/cts/ContentPaneFocusTest.java]:[NDK]:[2]:method_text:[eens.            mActivityRule.runOnUiThread(() -> assertTrue(v1.hasFocus()));        }    }   ])', 1), ('([3:/android/view/cts/ContentPaneFocusTest.java]:[NDK]:[3]:method_text:[vent.META_META_ON);        mInstrumentation.sendKeySync(keyEvent);        Thread.sleep(2);    }}])', 1), ('([4:/android/appsecurity/cts/AuthBoundKeyTest.java]:[NDK]:[4]:method_text:[    public void tearDown() throws Exception {        getDevice().uninstallPackage(PKG);    }   ])', 1), ('([2:/android/appsecurity/cts/AuthBoundKeyTest.java]:[NDK]:[2]:method_text:[           getDevice().executeShellCommand(""cmd lock_settings clear --old 12345"");        }    }}])', 1), ('([1:/android/media/tv/cts/TvViewTest.java]:[NDK]:[1]:method_text:[yEvent.getAction());        assertEquals(unhandled.getKeyCode(), keyEvent.getKeyCode());    }   ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[NDK]:[1]:method_text:[                  View.GONE, TIMEOUT);            expectImeInvisible(TIMEOUT);        }    }   ])', 1), ('([1:/android/view/inputmethod/cts/KeyboardVisibilityControlTest.java]:[NDK]:[1]:method_text:[nsure it.        builder.setNavigationBarColor(navigationBarColor);        return builder;    }}])', 1), ('([8:/android/hardware/camera2/cts/CaptureResultTest.java]:[NDK]:[8]:method_text:[* End generated code     *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/}])', 1), ('([10:/android/widget/cts/GridViewTest.java]:[NDK]:[10]:method_text:[eq(mGridView), any(View.class),                eq(NUM_COLUMNS), eq((long) NUM_COLUMNS));    }   ])', 1), ('([2:/android/widget/cts/GridViewTest.java]:[NDK]:[2]:method_text:[iew.mOnDetachCount);        assertFalse(theView.isTemporarilyDetached());    }    @LargeTest   ])', 1), ('([1:/com/android/cts/appdataisolation/appa/AppATests.java]:[NDK]:[1]:method_text:[rue;        }        return PropertyUtil.isVendorApiLevelNewerThan(Build.VERSION_CODES.R);    }}])', 1), ('([3:/com/android/cts/releaseparser/SoParserTest.java]:[NDK]:[3]:method_text:[    /**     * Test {@link SoParser} with an NDK SO file     *     * @throws Exception     */   ])', 1), ('([3:/com/android/cts/releaseparser/SoParserTest.java]:[NDK]:[3]:method_text:[     * Test {@link SoParser} with an CTS GTEST EXE file     *     * @throws Exception     */   ])', 1), ('([1:/android/graphics/cts/SyncTest.java]:[NDK]:[1]:method_text:[er    public void teardown() throws Throwable {        EGL14.eglTerminate(mEglDisplay);    }   ])', 1), ('([2:/android/widget/cts/AbsSeekBarTest.java]:[NDK]:[2]:method_text:[yEvent);        assertEquals(oldProgress - keyProgressIncrement, seekBar.getProgress());    }   ])', 1), ('([12:/android/widget/cts/TabHostTest.java]:[NDK]:[12]:method_text:[0,                        KeyEvent.normalizeMetaState(metaState)));            }        }    }}])', 1), ('([1:/android/os/cts/SharedMemoryTest.java]:[NDK]:[1]:method_text:[sertFalse(nWriteByte(sharedMemory, 0, (byte) 2));        assertEquals(5, buffer.get(0));    }   ])', 1), ('([1:/android/widget/cts/SpinnerTest.java]:[NDK]:[1]:method_text:[, dropDownBackground.getBounds().height(),                false, Color.YELLOW, 1, true);    }   ])', 1), ('([1:/android/widget/cts/SpinnerTest.java]:[NDK]:[1]:method_text:[erruptedException e) {            fail(""unexpected InterruptedException : ""+ e);        }    }}])', 1), ('([1:/android/media/cts/EncodeDecodeTest.java]:[NDK]:[1]:method_text:[byte[] buffers and decoded into ByteBuffers.  The output is checked for     * validity.     */   ])', 1), ('([2:/android/media/cts/EncodeDecodeTest.java]:[NDK]:[2]:method_text:[hrough     * a Surface and decoded onto a Surface.  The output is checked for validity.     */   ])', 1), ('([15:/android/media/cts/EncodeDecodeTest.java]:[NDK]:[15]:method_text:[tePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000 / FRAME_RATE;    }}])', 1), ('([2:/android/hardware/cts/SensorNativeTest.java]:[NDK]:[2]:method_text:[de    public void tearDown() throws Exception {        nativeTearDown(mNativeInstance);    }   ])', 1), ('([2:/android/app/cts/InstrumentationTest.java]:[NDK]:[2]:method_text:[ls(KeyEvent.KEYCODE_0, mActivity.getKeyDownList().get(0).getKeyCode());    }    @UiThreadTest   ])', 1), ('([2:/android/app/cts/InstrumentationTest.java]:[NDK]:[2]:method_text:[d onCreate() {            super.onCreate();            mIsOnCreateCalled = true;        }    }}])', 1), ('([2:/android/view/inputmethod/cts/InputConnectionWrapperTest.java]:[NDK]:[2]:method_text:[ */);        verify(inputConnection, times(1)).commitContent(inputContentInfo, 0, null);    }   ])', 1), ('([3:/android/atrace/cts/AtraceHostTest.java]:[NDK]:[3]:method_text:[ead.getSlices().get(1);        assertEquals(""ndk::beginEndSection"", ndkSlice.getName());    }   ])', 1), ('([4:/android/atrace/cts/AtraceHostTest.java]:[NDK]:[4]:method_text:[cBeginEndSection"", ndkSlice.getName());        assertEquals(4770, ndkSlice.getCookie());    }   ])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[1]:method_text:[wing                    return showing;                }            }        }.run();    }   ])', 1), ('([2:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[2]:method_text:[     assertEquals(KeyEvent.ACTION_UP, keyEvent1Captor.getAllValues().get(1).getAction());    }   ])', 1), ('([1:/android/app/cts/AlertDialog_BuilderTest.java]:[NDK]:[1]:method_text:[nregisterDataSetObserver(            android.database.DataSetObserver observer) {        }    }}])', 1), ('([3:/android/net/cts/Ikev2VpnTest.java]:[NDK]:[3]:method_text:[EST_MTU, profile.getMaxMtu());        assertFalse(profile.isRestrictedToTestNetworks());    }   ])', 1), ('([5:/android/net/cts/Ikev2VpnTest.java]:[NDK]:[5]:method_text:[vate(), ""AndroidOpenSSL"");        return new CertificateAndKey(cert, keyPair.getPrivate());    }}])', 1), ('([1:/android/media/cts/MediaActivityTest.java]:[NDK]:[1]:method_text:[hanges a stream volume even after the session is released,     * without being ignored.     */   ])', 1), ('([2:/android/media/cts/MediaActivityTest.java]:[NDK]:[2]:method_text:[yEvent.KEYCODE_VOLUME_UP);            return checkAnyStreamVolumeChanged();        }));    }   ])', 1), ('([1:/android/media/cts/MediaActivityTest.java]:[NDK]:[1]:method_text:[ent(testKeyEvent);        assertTrue(latch.await(WAIT_TIME_MS, TimeUnit.MILLISECONDS));    }   ])', 1), ('([4:/android/media/cts/MediaActivityTest.java]:[NDK]:[4]:method_text:[unexpected InterruptedException"");            }        }        return pollingCount >= 0;    }}])', 1), ('([2:/android/view/cts/ASurfaceControlTest.java]:[NDK]:[2]:method_text:[ +/- 10% error rate. This is based on the error    // rate allowed in the SurfaceViewSyncTests   ])', 1), ('([4:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[4]:method_text:[ot be accepted,     *     because text view accepts minus sign iff it at the beginning.     */   ])', 1), (""([6:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[6]:method_text:[ed.     *  5. remove DigitsKeyListener and Press '5' key, this key will not be accepted     */   ])"", 1), ('([5:/android/text/method/cts/DigitsKeyListenerTest.java]:[NDK]:[5]:method_text:[TextView, KeyEvent.KEYCODE_5);        assertEquals(""5"", mTextView.getText().toString());    }   ])', 1), ('([2:/android/widget/cts/AbsListViewTest.java]:[NDK]:[2]:method_text:[mListView.getSelectedItemPosition());        assertTrue(mListView.shouldDrawSelector());    }   ])', 1), ('([2:/android/widget/cts/AbsListViewTest.java]:[NDK]:[2]:method_text:[oid resetIsOnScrollChangedCalled() {            mIsOnScrollChangedCalled = false;        }    }}])', 1), ('([1:/android/server/wm/SurfaceViewTest.java]:[NDK]:[1]:method_text:[ mMockSurfaceView.isDetachedFromWindow() &&                !mMockSurfaceView.isShown());    }   ])', 1), ('([2:/android/util/cts/ArrayMapTest.java]:[NDK]:[2]:method_text:[next();            fail();        } catch (NoSuchElementException expected) {        }    }   ])', 1), ('([3:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[3]:method_text:[        assertEquals(""SDK and NDK checksums mismatch"", sdkChecksum, ndkChecksum);        }       ])', 1), ('([6:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[6]:method_text:[     }        private native boolean nativeTestDataSource(String srcPath, String srcUrl);       ])', 1), ('([3:/android/mediav2/cts/ExtractorTest.java]:[NDK]:[3]:method_text:[te point for a given         * choice of timestamp and mode.         */        @LargeTest       ])', 1), ('([3:/android/text/method/cts/NumberKeyListenerTest.java]:[NDK]:[3]:method_text:[k(accept, c);        }        public int getInputType() {            return 0;        }    }}])', 1), ('([2:/android/widget/cts/EditTextTest.java]:[NDK]:[2]:method_text:[tion, mEditText1, KeyEvent.KEYCODE_NUMPAD_ENTER);        assertTrue(mEditText2.hasFocus());    }}])', 1), ('([1:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[NDK]:[1]:method_text:[) {                // This is fine.  We actually expect timeout.            }        }    }   ])', 1), ('([3:/android/view/inputmethod/cts/InputMethodServiceTest.java]:[NDK]:[3]:method_text:[putMethodService#onUpdateCursorAnchorInfo(CursorAnchorInfo)}     * will be called back.     */   ])', 1), ('([1:/android/mediav2/cts/MuxerTest.java]:[NDK]:[1]:method_text:[ate class, like TestNoCSDMux, instead of being part of         * TestSimpleMux?         */       ])', 1), ('([2:/android/media/cts/AudioPlayRoutingNative.java]:[NDK]:[2]:method_text:[  }    //    // Tests    //    // Test a basic Aquire/Release cycle on the default player.   ])', 1), ('([1:/android/widget/cts/ListViewTest.java]:[NDK]:[1]:method_text:[der.mOnDetachCount);        assertFalse(header.isTemporarilyDetached());    }    @MediumTest   ])', 1), ('([2:/android/widget/cts/ListViewTest.java]:[NDK]:[2]:method_text:[ew.mOnDetachCount);        assertFalse(theView.isTemporarilyDetached());    }    @MediumTest   ])', 1), ('([2:/android/app/cts/ActionBarTest.java]:[NDK]:[2]:method_text:[owFocusSignal.await(1000, TimeUnit.MILLISECONDS));        assertFalse(menuIsVisible[0]);    }   ])', 1), ('([8:/android/widget/cts/DatePickerTest.java]:[NDK]:[8]:method_text:[CalledOnRestoreInstanceState() {            return mCalledOnRestoreInstanceState;        }    }}])', 1), ('([4:/android/text/method/cts/TimeKeyListenerTest.java]:[NDK]:[4]:method_text:[protected char[] getAcceptedChars() {            return super.getAcceptedChars();        }    }}])', 1), ('([1:/android/hdmicec/cts/audio/HdmiCecRemoteControlPassThroughTest.java]:[NDK]:[1]:method_text:[Pressed> [secondKeycode] before a     * <User Control Released> [firstKeycode] is sent.     */   ])', 1), ('([1:_target/com/android/test/usesnativesharedlibrary/LoadTest.java]:[NDK]:[1]:method_text:[()));    }    /**     * Tests if libs listed in unavailable.txt are all non-loadable     */   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[gPress(TEST_KEYCODE);    }    /**     * Long press event can be injected through ADB     */   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[ess(TEST_KEYCODE);    }    /**     * Inject a regular key event through UiAutomation     */   ])', 1), ('([1:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[1]:method_text:[heckKeyPress(TEST_KEYCODE);    }    /**     * Inject a regular key event through ADB     */   ])', 1), ('([3:/android/view/cts/KeyEventInjectionTest.java]:[NDK]:[3]:method_text:[ent(KeyEvent.ACTION_UP, keyCode, 0 /* repeatCount */);        assertLongPressNotReceived();    }}])', 1), ('([1:/android/keystore/cts/KeyFactoryTest.java]:[NDK]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/graphics/cts/BitmapTest.java]:[NDK]:[3]:method_text:[ paint = new Paint();        paint.setShader(gradient);        canvas.drawPaint(paint);    }   ])', 1), ('([3:/android/graphics/cts/BitmapTest.java]:[NDK]:[3]:method_text:[t(Named.LINEAR_SRGB)                || cs == ColorSpace.get(Named.LINEAR_EXTENDED_SRGB);    }   ])', 1)]"	""	""	"[('NDK', 117)]"	"[('[android.view.cts.ViewTest testOnKeyShortcut None]', 2), ('[android.view.cts.ViewTest testDispatchUnhandledMove None]', 2), ('[android.view.cts.ViewTest testUnhandledKeys None]', 2), ('[android.view.cts.ViewTest testOnKeyDownOrUp None]', 2), ('[android.view.cts.ViewTest testTouchMode None]', 2), ('[android.view.cts.ViewTest testKeyPreIme None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerGetCameraCharacteristics None]', 2), ('[android.hardware.camera2.cts.CameraManagerTest testCameraCharacteristicsNdkFromSdk None]', 2), ('[android.server.wm.LayoutTests testChangingFocusableFlag None]', 2), ('[android.graphics.cts.BitmapTest testNdkAccessAfterRecycle None]', 2), ('[android.graphics.cts.BitmapTest testNdkFormats None]', 2), ('[android.graphics.cts.BitmapTest testNdkFormatsHardware None]', 2), ('[android.graphics.cts.BitmapTest testNullBitmapNdk None]', 2), ('[android.graphics.cts.BitmapTest isPremultiplied None]', 2), ('[android.graphics.cts.BitmapTest testNdkDataSpaceF16Extended None]', 2), ('[android.graphics.cts.BitmapTest testNdkDataSpaceNonExtended None]', 2), ('[android.graphics.cts.BitmapTest testNdkDataSpace None]', 2), ('[android.graphics.cts.BitmapTest testNdkDataSpaceAlpha8 None]', 2), ('[android.graphics.cts.BitmapTest testNdkDataSpaceNullBitmap None]', 2), ('[android.graphics.cts.BitmapTest testNdkCompressBadParameter None]', 2), ('[android.media.cts.NativeMediaDrmClearkeyTest isWatchDevice None]', 1), ('[android.widget.cts.ExpandableListViewWithHeadersTest testExpandOnFirstPosition None]', 1), ('[android.widget.cts.ExpandableListViewWithHeadersTest testExpandOnFirstGroup None]', 1), ('[android.view.cts.ContentPaneFocusTest testAccessActionBar None]', 1), ('[android.view.cts.ContentPaneFocusTest testNoFocusablesInContent None]', 1), ('[android.media.tv.cts.TvViewTest testTrackChange None]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testFloatingImeHideKeyboardAfterBackPressed None]', 1), ('[android.view.inputmethod.cts.KeyboardVisibilityControlTest testRestoreImeVisibility_noRestoreForHiddenWithForwardNav None]', 1), ('[android.hardware.camera2.cts.CaptureResultTest testResultTimestamps None]', 1), ('[android.widget.cts.GridViewTest testPressKey None]', 1), ('[android.widget.cts.GridViewTest testFullyDetachUnusedViewOnScrollForFocus None]', 1), ('[com.android.cts.appdataisolation.appa.AppATests testOtherUserDirsNotAccessible None]', 1), ('[com.android.cts.releaseparser.SoParserTest testNdkSo None]', 1), ('[android.widget.cts.AbsSeekBarTest testAccessKeyProgressIncrement None]', 1), ('[android.widget.cts.TabHostTest testKeyboardNavigation None]', 1), ('[android.os.cts.SharedMemoryTest testNdkInterop None]', 1), ('[android.widget.cts.SpinnerTest testDropDownBackgroundDropdownMode None]', 1), ('[android.widget.cts.SpinnerTest testDropDownBackgroundDialogMode None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testEncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromSurfaceToSurface720pNdk None]', 1), ('[android.media.cts.EncodeDecodeTest testVP8EncodeDecodeVideoFromPersistentSurfaceToSurface720pNdk None]', 1), ('[android.app.cts.InstrumentationTest testSendKeyDownUpSync None]', 1), ('[android.app.cts.InstrumentationTest testSendKeySync None]', 1), ('[android.view.inputmethod.cts.InputConnectionWrapperTest testInputConnectionWrapper None]', 1), ('[android.atrace.cts.AtraceHostTest testBeginEndSection None]', 1), ('[android.atrace.cts.AtraceHostTest testAsyncBeginEndSection None]', 1), ('[android.app.cts.AlertDialog_BuilderTest testSetNeutralButtonWithParamCharSequence None]', 1), ('[android.app.cts.AlertDialog_BuilderTest testSetOnKeyListener None]', 1), ('[android.app.cts.AlertDialog_BuilderTest testShow None]', 1), ('[android.net.cts.Ikev2VpnTest Ikev2VpnTest None]', 1), ('[android.net.cts.Ikev2VpnTest testStartStopVpnProfileV6 None]', 1), ('[android.media.cts.MediaActivityTest testVolumeKey_whileSessionAlive None]', 1), ('[android.media.cts.MediaActivityTest testVolumeKey_afterSessionReleased None]', 1), ('[android.media.cts.MediaActivityTest testMediaKey_whileSessionAlive None]', 1), ('[android.media.cts.MediaActivityTest testMediaKey_whileSessionReleased None]', 1), ('[android.view.cts.ASurfaceControlTest testSurfaceTransaction_apply None]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener1 None]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener2 None]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener3 None]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener4 None]', 1), ('[android.text.method.cts.DigitsKeyListenerTest testDigitsKeyListener5 None]', 1), ('[android.widget.cts.AbsListViewTest testSelectorOnScreen None]', 1), ('[android.widget.cts.AbsListViewTest testEnterKey None]', 1), ('[android.server.wm.SurfaceViewTest testOnDetachedFromWindow None]', 1), ('[android.util.cts.ArrayMapTest testCanNotIteratePastEnd_keySetIterator None]', 1), ('[android.mediav2.cts.ExtractorTest testFileDescriptor None]', 1), ('[android.mediav2.cts.ExtractorTest testUrlDataSource None]', 1), ('[android.mediav2.cts.ExtractorTest testExtract None]', 1), ('[android.text.method.cts.NumberKeyListenerTest testPressKey None]', 1), ('[android.widget.cts.EditTextTest testEnterKey None]', 1), ('[android.view.inputmethod.cts.InputMethodServiceTest testSendDownUpKeyEvents None]', 1), ('[android.mediav2.cts.MuxerTest testSimpleMux None]', 1), ('[android.widget.cts.ListViewTest testFullDetachHeaderViewOnScrollForFocus None]', 1), ('[android.widget.cts.ListViewTest testFullyDetachUnusedViewOnScrollForFocus None]', 1), ('[android.app.cts.ActionBarTest testOptionsMenuKey None]', 1), ('[android.widget.cts.DatePickerTest testEnterKey None]', 1), ('[android.text.method.cts.TimeKeyListenerTest testTimeKeyListener None]', 1), ('[android.view.cts.KeyEventInjectionTest testLongPressKeyEventInjectedViaInstrumentation None]', 1), ('[android.view.cts.KeyEventInjectionTest testLongPressKeyEventInjectedViaAdb None]', 1), ('[android.view.cts.KeyEventInjectionTest testKeyEventInjectedViaInstrumentation None]', 1), ('[android.view.cts.KeyEventInjectionTest testKeyEventInjectedViaAdb None]', 1), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePrivateKeyAndKeyInfoReflectsAllAuthorizations None]', 1)]"
"194:582721) 7.4.1  . Telephony"	"7.4.1"	"C-4-1"	"7.4.1/C-4-1"	"07040100.670401"	"""C-4-1] MUST NOT report ‘NETWORK_TYPE_IWLAN’ via NetworkRegistrationInfo#getAccessNetworkTechnology() when NetworkRegistrationInfo#getTransportType() is reported as ‘TRANSPORT_TYPE_WWAN’ for the same NetworkRegistrationInfo instance. If device implementations support a single IP Multimedia Subsystem (IMS) registration for both multimedia telephony service (MMTEL) and rich communication service (RCS) features and are expected to comply with cellular carrier requirements regarding using a single IMS registration for all IMS signalling traffic, they: """	""	""	"getTransportType() TRANSPORT_TYPE_WWAN MMTEL getAccessNetworkTechnology() RCS NETWORK_TYPE_IWLAN IMS"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsSsDataTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/NetworkRegistrationInfoTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/CarrierApiTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/os/src/android/os/cts/StrictModeTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/ThrottleStatusTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/ImsiEncryptionInfoTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/validation/BatteryStatsValidationTests.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/ImsExternalCallStateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SignalStrengthTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/CodecDecoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/StateSetTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RtpHeaderExtensionTypeTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/SelfManagedConnectionServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaDrmClearkeyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VideoEncoderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/ApnSettingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telephony3/src/android/telephony3/cts/TelephonyManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/video/src/android/video/cts/VideoEncoderDecoderTest.java', 1)]"	"[('(3,IMS,/android/telephony/cts/CarrierConfigManagerTest.java)', 2), ('(8,IMS,/android/carrierapi/cts/CarrierApiTest.java)', 2), ('(1,NETWORK_TYPE_IWLAN,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 2), ('(4,IMS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(1,getTransportType(),/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(6,TRANSPORT_TYPE_WWAN,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(4,getAccessNetworkTechnology(),/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,NETWORK_TYPE_IWLAN,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(26,IMS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(17,RCS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(51,IMS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(9,IMS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(6,IMS,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(19,MMTEL,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(18,RCS,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(46,IMS,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(1,IMS,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,getTransportType(),/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(5,TRANSPORT_TYPE_WWAN,/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(2,getAccessNetworkTechnology(),/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(1,NETWORK_TYPE_IWLAN,/android/telephony/cts/NetworkRegistrationInfoTest.java)', 1), ('(1,NETWORK_TYPE_IWLAN,/android/telephony/cts/SignalStrengthTest.java)', 1), ('(1,getTransportType(),/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(2,MMTEL,/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(12,IMS,/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(1,MMTEL,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(53,RCS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(74,IMS,/android/telephony/ims/cts/EabControllerTest.java)', 1), ('(1,getTransportType(),/android/telephony/cts/ThrottleStatusTest.java)', 1), ('(1,TRANSPORT_TYPE_WWAN,/android/telephony/cts/ThrottleStatusTest.java)', 1), ('(1,IMS,/android/telephony/cts/ThrottleStatusTest.java)', 1), ('(1,IMS,/android/mediav2/cts/CodecDecoderTest.java)', 1), ('(3,IMS,/android/util/cts/StateSetTest.java)', 1), ('(2,IMS,/android/telephony/ims/cts/RtpHeaderExtensionTypeTest.java)', 1), ('(1,IMS,/android/telecom/cts/SelfManagedConnectionServiceTest.java)', 1), ('(193,IMS,/android/telephony/ims/cts/ImsSsDataTest.java)', 1), ('(3,IMS,/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java)', 1), ('(8,IMS,/android/os/cts/StrictModeTest.java)', 1), ('(4,IMS,/android/telephony/cts/ImsiEncryptionInfoTest.java)', 1), ('(8,IMS,/android/cts/statsd/validation/BatteryStatsValidationTests.java)', 1), ('(12,IMS,/android/telephony/ims/cts/ImsExternalCallStateTest.java)', 1), ('(2,IMS,/android/media/cts/MediaDrmClearkeyTest.java)', 1), ('(1,IMS,/android/media/cts/VideoEncoderTest.java)', 1), ('(4,IMS,/android/telephony/cts/ApnSettingTest.java)', 1), ('(2,IMS,/android/telephony3/cts/TelephonyManagerTest.java)', 1), ('(5,RCS,/android/video/cts/VideoEncoderDecoderTest.java)', 1)]"	"[('([2:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[2]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 3), ('([3:/android/telephony/cts/CarrierConfigManagerTest.java]:[IMS]:[3]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 2), ('([2:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[2]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 2), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[VILEGE_LISTENERS =            READ_PHONE_STATE_LISTENERS | READ_PRECISE_PHONE_STATE_LISTENERS;   ])', 2), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[Data = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeIcb());    }   ])', 2), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[NETWORK_TYPE_IWLAN]:[1]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 2), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([2:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[2]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[1]:method_text:[RMISSION_MASK;    /**     * Verify the documented permissions for PhoneStateListener.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[getTransportType()]:[1]:method_text:[ ensure {@link NetworkRegistrationInfo#isRoaming()} does not throw any     * exception.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[ ensure {@link NetworkRegistrationInfo#isRoaming()} does not throw any     * exception.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[throw any     * exception and returns valid result     * @see ServiceState.RoamingType     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[TRANSPORT_TYPE_WWAN]:[2]:method_text:[ exception and returns valid result     * @see android.telephony.Annotation.NetworkType     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[TRANSPORT_TYPE_WWAN]:[2]:method_text:[  }    /**     * Tests that the device properly reports either a valid MEID or null.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[getAccessNetworkTechnology()]:[1]:method_text:[ exception and returns valid result     * @see android.telephony.Annotation.NetworkType     */   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[getAccessNetworkTechnology()]:[3]:method_text:[  }    /**     * Tests that the device properly reports either a valid MEID or null.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[NETWORK_TYPE_IWLAN]:[1]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([6:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[6]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[1]:method_text:[rifyDeviceId(deviceId);    }    /**     * Tests the max number of active SIMs method     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[2]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([11:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[11]:method_text:[) {            // IllegalArgumentException is okay, just not SecurityException        }    }   ])', 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[5]:method_text:[ fail(""testResetCarrierKeysForImsiEncryption: SecurityException not expected"");        }    }   ])', 1), ('([4:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[4]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([3:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[3]:method_text:[                + "" activity intent filter must have a > 0 priority."", 0, info.priority);    }   ])', 1), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[5]:method_text:[ission.MODIFY_PHONE_STATE"");            }            unregisterUceObserver();        }    }   ])', 1), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[RCS]:[5]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([16:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[16]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[5]:method_text:[                + "" activity intent filter must have a > 0 priority."", 0, info.priority);    }   ])', 1), ('([14:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[14]:method_text:[ission.MODIFY_PHONE_STATE"");            }            unregisterUceObserver();        }    }   ])', 1), ('([16:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[16]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([9:/android/server/wm/WindowInsetsAnimationImeTests.java]:[IMS]:[9]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[IMS]:[1]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[IMS]:[5]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), (""([1:/android/telephony/cts/SubscriptionManagerTest.java]:[MMTEL]:[1]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([18:/android/telephony/cts/SubscriptionManagerTest.java]:[MMTEL]:[18]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), (""([2:/android/telephony/cts/SubscriptionManagerTest.java]:[RCS]:[2]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([16:/android/telephony/cts/SubscriptionManagerTest.java]:[RCS]:[16]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), (""([9:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[9]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([2:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[2]:method_text:[il(""Device must have a valid default data subId for validation"");            }        }    }   ])', 1), ('([5:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[5]:method_text:[()                        < subList.get(i).getSubscriptionId());            }        }    }   ])', 1), ('([30:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[30]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[IMS]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[getTransportType()]:[2]:method_text:[        assertEquals(AccessNetworkConstants.TRANSPORT_TYPE_WWAN, nri.getTransportType());    }   ])', 1), ('([2:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[TRANSPORT_TYPE_WWAN]:[2]:method_text:[      assertNotSame(nri2.hashCode(), nri3.hashCode());        assertNotSame(nri2, nri3);    }   ])', 1), ('([2:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[TRANSPORT_TYPE_WWAN]:[2]:method_text:[        assertEquals(AccessNetworkConstants.TRANSPORT_TYPE_WWAN, nri.getTransportType());    }   ])', 1), ('([1:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[rs = NetworkRegistrationInfo.CREATOR.createFromParcel(p);        assertEquals(nri, newNrs);    }}])', 1), ('([2:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[getAccessNetworkTechnology()]:[2]:method_text:[     assertEquals(TelephonyManager.NETWORK_TYPE_EHRPD, nri.getAccessNetworkTechnology());    }   ])', 1), ('([1:/android/telephony/cts/NetworkRegistrationInfoTest.java]:[NETWORK_TYPE_IWLAN]:[1]:method_text:[      assertNotSame(nri2.hashCode(), nri3.hashCode());        assertNotSame(nri2, nri3);    }   ])', 1), ('([1:/android/telephony/cts/SignalStrengthTest.java]:[NETWORK_TYPE_IWLAN]:[1]:method_text:[RK_TYPE_IDEN: /* fall through */            default:                return null;        }    }}])', 1), ('([1:/android/telephony/cts/PhoneStateListenerTest.java]:[getTransportType()]:[1]:method_text:[taConnectionApnTypeBitMask();        mPreciseDataConnectionState.getDataConnectionApn();    }   ])', 1), ('([2:/android/telephony/cts/PhoneStateListenerTest.java]:[MMTEL]:[2]:method_text:[   // be not barred.        assertNotEquals(hasBarringTypeUnknown, hasBarringTypeKnown);    }   ])', 1), ('([3:/android/telephony/cts/PhoneStateListenerTest.java]:[IMS]:[3]:method_text:[        if (mHandlerThread != null) {            mHandlerThread.quitSafely();        }    }   ])', 1), ('([9:/android/telephony/cts/PhoneStateListenerTest.java]:[IMS]:[9]:method_text:[        }        }        assertThat(mOnImsCallDisconnectCauseChangedCalled).isTrue();    }   ])', 1), ('([1:/android/telephony/ims/cts/EabControllerTest.java]:[MMTEL]:[1]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([11:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[11]:method_text:[   mErrorQueue.clear();        mCompleteQueue.clear();        mCapabilityQueue.clear();    }   ])', 1), ('([3:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[3]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 1), ('([35:/android/telephony/ims/cts/EabControllerTest.java]:[RCS]:[35]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([33:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[33]:method_text:[   mErrorQueue.clear();        mCompleteQueue.clear();        mCapabilityQueue.clear();    }   ])', 1), ('([35:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[35]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1), ('([1:/android/telephony/cts/ThrottleStatusTest.java]:[getTransportType()]:[1]:method_text:[.getThrottleExpiryTimeMillis());        assertEquals(RETRY_TYPE, status.getRetryType());    }   ])', 1), ('([1:/android/telephony/cts/ThrottleStatusTest.java]:[TRANSPORT_TYPE_WWAN]:[1]:method_text:[LIS = 5005;    private static final int RETRY_TYPE = ThrottleStatus.RETRY_TYPE_NEW_CONNECTION;   ])', 1), ('([1:/android/telephony/cts/ThrottleStatusTest.java]:[IMS]:[1]:method_text:[LIS = 5005;    private static final int RETRY_TYPE = ThrottleStatus.RETRY_TYPE_NEW_CONNECTION;   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[yManager.getSimState())                .isNotEqualTo(TelephonyManager.SIM_STATE_ABSENT);    }   ])', 1), ('([4:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[4]:method_text:[SecurityException e) {            fail(NO_CARRIER_PRIVILEGES_FAILURE_MESSAGE);        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[SecurityException e) {            fail(NO_CARRIER_PRIVILEGES_FAILURE_MESSAGE);        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[ng group.     *     * <p>This test required the device has more than one subscription.     */   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[             ""Visit https://source.android.com/devices/tech/config/uicc.html"");        }    }   ])', 1), ('([4:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[4]:method_text:[           }        } catch (SecurityException e) {            failMessage();        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[<String>());        } catch (SecurityException e) {            failMessage();        }    }   ])', 1), ('([1:/android/carrierapi/cts/CarrierApiTest.java]:[IMS]:[1]:method_text:[sting group.     *     * This test required the device has more than one subscription.     */   ])', 1), ('([1:/android/mediav2/cts/CodecDecoderTest.java]:[IMS]:[1]:method_text:[lowed tolerance. The output has to be consistent (not flaky) in all runs.     */    @LargeTest   ])', 1), ('([3:/android/util/cts/StateSetTest.java]:[IMS]:[3]:method_text:[t i : stateSet2) {            assertEquals(stateSet2[i - 1], stateSet[i - 1]);        }    }   ])', 1), ('([2:/android/telephony/ims/cts/RtpHeaderExtensionTypeTest.java]:[IMS]:[2]:method_text:[    private static final Uri TEST_URI = Uri.parse(""http://developer.android.com/092020/test1"");   ])', 1), ('([1:/android/telecom/cts/SelfManagedConnectionServiceTest.java]:[IMS]:[1]:method_text:[A self-managed {@link android.telecom.PhoneAccount} cannot also be a connection manager.     */   ])', 1), ('([10:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[10]:method_text:[l.ArrayList;import java.util.List;@RunWith(AndroidJUnit4.class)public class ImsSsDataTest {   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[rcel(parcel);        parcel.recycle();        assertTrue(unparceledData.isTypeClip());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[rue(unparceledData.isTypeCf());        assertTrue(unparceledData.isTypeUnConditional());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[dData = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeCw());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeColr());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeColp());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[ata = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeClir());    }   ])', 1), ('([44:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[44]:method_text:[a = (ImsSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeBarring());    }   ])', 1), ('([9:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[9]:method_text:[msSsData) parcelUnparcel(data);        assertTrue(unparceledData.isTypeInterrogation());    }   ])', 1), ('([18:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[18]:method_text:[equestType());        assertEquals(ImsSsData.SS_CFU, unparceledData.getServiceType());    }   ])', 1), ('([17:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[17]:method_text:[nfo.getNumber());        assertEquals(info.getTimeSeconds(), testInfo.getTimeSeconds());    }   ])', 1), ('([23:/android/telephony/ims/cts/ImsSsDataTest.java]:[IMS]:[23]:method_text:[a.CREATOR.createFromParcel(parcel);        parcel.recycle();        return unparceledData;    }}])', 1), ('([3:/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java]:[IMS]:[3]:method_text:[permission must be able to access ""                    + ""the device IDs: "" + e);        }    }}])', 1), ('([2:/android/os/cts/StrictModeTest.java]:[IMS]:[2]:method_text:[icy);    }    public interface ThrowingRunnable {        void run() throws Exception;    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[IMS]:[1]:method_text:[e the logic to CtsInputMethodTestCases        verifyIms(VERIFY_MODE_GET_WINDOW_MANAGER);    }   ])', 1), ('([1:/android/os/cts/StrictModeTest.java]:[IMS]:[1]:method_text:[fail(""Expected to get incorrect use exception from calling getDisplay() on Application"");    }   ])', 1), ('([4:/android/os/cts/StrictModeTest.java]:[IMS]:[4]:method_text:[nager.FEATURE_WIFI)                || pm.hasSystemFeature(PackageManager.FEATURE_ETHERNET);    }}])', 1), ('([2:/android/telephony/cts/ImsiEncryptionInfoTest.java]:[IMS]:[2]:method_text:[XD57aGJRvQS4pxkP8ANhM="";    /**     * Tests the parceling/un-parceling of the object.     */   ])', 1), ('([2:/android/telephony/cts/ImsiEncryptionInfoTest.java]:[IMS]:[2]:method_text:[Factory.getInstance(""X.509"");        return cf.generateCertificate(istream).getPublicKey();    }}])', 1), ('([4:/android/cts/statsd/validation/BatteryStatsValidationTests.java]:[IMS]:[4]:method_text:[untFromBS).isGreaterThan(0L);        assertThat(countFromBS).isEqualTo(countFromStatsd);    }   ])', 1), ('([4:/android/cts/statsd/validation/BatteryStatsValidationTests.java]:[IMS]:[4]:method_text:[(countFromBS).isGreaterThan(0L);        assertThat(countFromBS).isEqualTo(countFromStatsd);    }}])', 1), ('([6:/android/telephony/ims/cts/ImsExternalCallStateTest.java]:[IMS]:[6]:method_text:[rg.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class ImsExternalCallStateTest {   ])', 1), ('([6:/android/telephony/ims/cts/ImsExternalCallStateTest.java]:[IMS]:[6]:method_text:[e, unparceledInfo.getCallType());        assertEquals(isHeld, unparceledInfo.isCallHeld());    }}])', 1), ('([2:/android/media/cts/MediaDrmClearkeyTest.java]:[IMS]:[2]:method_text:[getSurfaces() {        return Arrays.asList(getActivity().getSurfaceHolder().getSurface());    }}])', 1), ('([1:/android/media/cts/VideoEncoderTest.java]:[IMS]:[1]:method_text:[G-4 are not defined for 720p or 1080p    // test for it, in case device claims support for it.   ])', 1), ('([4:/android/telephony/cts/ApnSettingTest.java]:[IMS]:[4]:method_text:[       EXPECTED_INT_TO_STRING_MAP.put(ApnSetting.TYPE_XCAP, ApnSetting.TYPE_XCAP_STRING);    }   ])', 1), ('([2:/android/telephony3/cts/TelephonyManagerTest.java]:[IMS]:[2]:method_text:[ce identifiers, caught ""                    + ""SecurityException instead: "" + e);        }    }}])', 1), ('([5:/android/video/cts/VideoEncoderDecoderTest.java]:[RCS]:[5]:method_text:[ePresentationTime(int frameIndex) {        return 132 + frameIndex * 1000000L / mFrameRate;    }}])', 1)]"	""	""	"[('IMS', 74), ('RCS', 12), ('TRANSPORT_TYPE_WWAN', 8), ('NETWORK_TYPE_IWLAN', 5), ('getTransportType()', 4), ('MMTEL', 4), ('getAccessNetworkTechnology()', 3)]"	"[('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 3), ('[android.telephony.cts.SubscriptionManagerTest testRestoreAllSimSpecificSettingsFromBackup None]', 3), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities None]', 3), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoRegisteredPlmn None]', 2), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoGetRoamingType None]', 2), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistationStateGetAccessNetworkTechnology None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilityDiscoveryIntentReceiverExists None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testGetAndSetUceSetting None]', 2), ('[android.telephony.ims.cts.RcsUceAdapterTest testMethodPermissions None]', 2), ('[android.telephony.cts.NetworkRegistrationInfoTest testGetTransportType None]', 2), ('[android.telephony.cts.NetworkRegistrationInfoTest testEquals None]', 2), ('[android.telephony.ims.cts.EabControllerTest beforeAllTests None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestCapabilities None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestAvailabilities None]', 2), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredCapabilities None]', 2), ('[android.carrierapi.cts.CarrierApiTest testSubscriptionInfoListing None]', 2), ('[android.carrierapi.cts.CarrierApiTest testTelephonyApisAreAccessible None]', 2), ('[android.carrierapi.cts.CarrierApiTest testVoicemailStatusTableIsAccessible None]', 2), ('[android.carrierapi.cts.CarrierApiTest testAddSubscriptionToExistingGroupForMultipleSims None]', 2), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry None]', 2), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetLine1Number None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetSimSerialNumber None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetForbiddenPlmns None]', 1), ('[android.telephony.cts.TelephonyManagerTest testNetworkRegistrationInfoIsRoaming None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceId None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCarrierInfoForImsiEncryption None]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetCarrierKeysForImsiEncryption None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testCorrectness None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testActiveSubscriptions None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise None]', 1), ('[android.telephony.cts.NetworkRegistrationInfoTest testParcel None]', 1), ('[android.telephony.cts.NetworkRegistrationInfoTest testGetAccessNetworkTechnology None]', 1), ('[android.telephony.cts.SignalStrengthTest testSignalStrength None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnPreciseDataConnectionStateChanged None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnBarringInfoChanged None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnImsCallDisconnectCauseChanged None]', 1), ('[android.telephony.cts.ThrottleStatusTest testBuilderAndGetters None]', 1), ('[android.carrierapi.cts.CarrierApiTest testSimCardPresent None]', 1), ('[android.carrierapi.cts.CarrierApiTest isSimCardPresent None]', 1), ('[android.mediav2.cts.CodecDecoderTest isFormatSupported None]', 1), ('[android.util.cts.StateSetTest testTrimStateSet None]', 1), ('[android.telecom.cts.SelfManagedConnectionServiceTest testRegisterSimSelfManagedConnectionService None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isSimCardPresent None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testParcelUnparcel None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeCF None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeCW None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeColr None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeColp None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeClir None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeIcb None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeIcbAnon None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testServiceTypeBarring None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testRequestTypeInterrogation None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testConstructor None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testSetCallForwardingInfo None]', 1), ('[android.telephony.ims.cts.ImsSsDataTest testSetSuppServiceInfo None]', 1), ('[com.android.cts.deviceandprofileowner.DeviceIdentifiersTest testProfileOwnerCanGetDeviceIdentifiersWithPermission None]', 1), ('[android.os.cts.StrictModeTest testIncorrectContextUse_GetSystemService None]', 1), ('[android.os.cts.StrictModeTest testIncorrectContextUse_GetDisplay None]', 1), ('[android.os.cts.StrictModeTest testIncorrectContextUse_GetViewConfiguration None]', 1), ('[android.telephony.cts.ImsiEncryptionInfoTest testParcel None]', 1), ('[android.cts.statsd.validation.BatteryStatsValidationTests testServiceStartCount None]', 1), ('[android.cts.statsd.validation.BatteryStatsValidationTests testServiceLaunchCount None]', 1), ('[android.telephony.ims.cts.ImsExternalCallStateTest isCallPullable None]', 1), ('[android.media.cts.MediaDrmClearkeyTest testIsCryptoSchemeSupportedWithSecurityLevel None]', 1), ('[android.media.cts.VideoEncoderTest testOtherVP9Surf480p None]', 1), ('[android.telephony3.cts.TelephonyManagerTest testDeviceIdentifiersAreNotAccessible None]', 1), ('[android.video.cts.VideoEncoderDecoderTest testVp9Other3Perf3840x2160 None]', 1)]"
"201:599616) 7.4.2.4  . Wi"	"7.4.2.4"	"C-3-1"	"7.4.2.4/C-3-1"	"07040204.670301"	"""C-3-1] MUST enable Passpoint by default. <h5 id=""7425_wi-fi_location_wi-fi_round_trip_time_-_rtt"" """	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"265:736337) 9.8.12  . Music Recognition"	"9.8.12"	"C-1-2"	"9.8.12/C-1-2"	"09081200.670102"	"""C-1-2] MUST enforce that a single, pre-installed, music recognition application implements MusicRecognitionService."""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""	""
"194:582721) 7.4.1  . Telephony"	"7.4.1"	"C-5-2"	"7.4.1/C-5-2"	"07040100.670502"	"""C-5-2] MUST declare the android.hardware.telephony.ims.singlereg feature flag and provide a complete implementation of the SipTransport API, the GbaService API, dedicated bearer indications using the IRadio 1.6 HAL, and provisioning via Auto Configuration Server (ACS) or other proprietary provisioning mechanism using the IMS Configuration API. <h5 id=""7411_number_blocking_compatibility"" """	""	""	"IMS ACS HAL android.hardware.telephony.ims.singlereg"	""	""	""	""	""	""	""	""	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/ReduceTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioTrackTest.java', 7), ('/home/gpoor/cts-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/iget_short/Test_iget_short.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/uirendering/src/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/EabControllerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/ims/cts/RcsUceAdapterTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/SubscriptionManagerTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/DecoderTestAacDrc.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/view/src/android/view/cts/ViewTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/animation/src/android/animation/cts/LayoutAnimationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestNativeCospi.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestAcos.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/VisualizerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestTan.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestLog.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestErfc.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestTanh.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestCospi.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestConvert.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestHalfRsqrt.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/renderscript/src/android/renderscript/cts/generated/TestAtanpi.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/PhoneStateListenerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/AlteredCharSequenceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/CameraVulkanGpuTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adb/src/android/adb/cts/AdbHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationImeTests.java', 1), ('/home/gpoor/cts-12-source/cts/tests/media/src/android/mediav2/cts/EncodeDecodeAccuracyTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/media/src/android/media/cts/MediaSyncEventTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/windowmanager/src/android/server/wm/lifecycle/ActivityStarterTests.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/util/src/android/util/cts/RangeTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/ImageReaderTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/telephony/current/src/android/telephony/cts/CarrierConfigManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/HmacKeyGenPerformanceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ScrollViewTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/framework/base/biometrics/src/android/server/biometrics/BiometricServiceTests.java', 1), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/LocationManagerFineTest.java', 1)]"	"[('(2,ACS,/android/text/cts/AlteredCharSequenceTest.java)', 1), ('(18,HAL,/com/android/cts/deviceandprofileowner/KeyManagementTest.java)', 1), ('(2,HAL,/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java)', 1), ('(7,HAL,/android/animation/cts/LayoutAnimationTest.java)', 1), ('(4,IMS,/android/permission/cts/telephony/TelephonyManagerPermissionTest.java)', 1), ('(26,IMS,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(8,HAL,/android/telephony/cts/TelephonyManagerTest.java)', 1), ('(1,HAL,/android/graphics/cts/CameraVulkanGpuTest.java)', 1), ('(51,IMS,/android/telephony/ims/cts/RcsUceAdapterTest.java)', 1), ('(1,HAL,/android/adb/cts/AdbHostTest.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestNativeCospi.java)', 1), ('(1,HAL,/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java)', 1), ('(9,IMS,/android/server/wm/WindowInsetsAnimationImeTests.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestAcos.java)', 1), ('(1,HAL,/android/mediav2/cts/EncodeDecodeAccuracyTest.java)', 1), ('(8,HAL,/android/media/cts/AudioTrackTest.java)', 1), ('(6,HAL,/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java)', 1), ('(5,HAL,/android/media/cts/MediaSyncEventTest.java)', 1), ('(1,HAL,/android/server/wm/lifecycle/ActivityStarterTests.java)', 1), ('(41,HAL,/android/renderscript/cts/ReduceTest.java)', 1), ('(6,IMS,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(2,HAL,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(6,HAL,/android/util/cts/RangeTest.java)', 1), ('(46,IMS,/android/telephony/cts/SubscriptionManagerTest.java)', 1), ('(1,HAL,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(1,IMS,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,HAL,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(2,HAL,/android/media/cts/VisualizerTest.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestTan.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestLog.java)', 1), ('(6,HAL,/android/media/cts/DecoderTestAacDrc.java)', 1), ('(1,HAL,/android/hardware/camera2/cts/ImageReaderTest.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestErfc.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestTanh.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestCospi.java)', 1), ('(18,HAL,/android/view/cts/ViewTest.java)', 1), ('(3,IMS,/android/telephony/cts/CarrierConfigManagerTest.java)', 1), ('(2,ACS,/android/keystore/cts/HmacKeyGenPerformanceTest.java)', 1), ('(979,HAL,/android/renderscript/cts/generated/TestConvert.java)', 1), ('(54,HAL,/android/renderscript/cts/generated/TestHalfRsqrt.java)', 1), ('(2,HAL,/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java)', 1), ('(102,HAL,/android/renderscript/cts/generated/TestAtanpi.java)', 1), ('(12,IMS,/android/telephony/cts/PhoneStateListenerTest.java)', 1), ('(1,HAL,/android/widget/cts/ScrollViewTest.java)', 1), ('(7,HAL,/dot/junit/opcodes/iget_short/Test_iget_short.java)', 1), ('(5,HAL,/android/hardware/camera2/cts/CaptureRequestTest.java)', 1), ('(7,HAL,/android/server/biometrics/BiometricServiceTests.java)', 1), ('(2,HAL,/android/location/cts/fine/LocationManagerFineTest.java)', 1), ('(74,IMS,/android/telephony/ims/cts/EabControllerTest.java)', 1)]"	"[('([5:/android/renderscript/cts/ReduceTest.java]:[HAL]:[5]:method_text:[expected "" + goodResult);                    }                }            }        }    }   ])', 3), ('([2:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[2]:method_text:[NLY);        // Verify the onCompleted is called        waitForResult(mCompleteQueue);    }   ])', 3), ('([1:/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java]:[HAL]:[1]:method_text:[       Color.WHITE                }, 20)); // Tolerance set to account for interpolation    }   ])', 2), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[HAL]:[1]:method_text:[st"",                ""testSettingConstraintsWithComplexQualityAndResetWithLowerQuality"");    }   ])', 2), ('([2:/android/text/cts/AlteredCharSequenceTest.java]:[ACS]:[2]:method_text:[ce.getClass().getName();        assertFalse(0 == acsClassName.compareTo(spanClassName));    }   ])', 1), ('([1:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[HAL]:[1]:method_text:[ void tearDown() throws Exception {        mActivity.finish();        super.tearDown();    }   ])', 1), ('([7:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[HAL]:[7]:method_text:[neration, including requesting Key Attestation, for all supported key     * algorithms.     */   ])', 1), ('([5:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[HAL]:[5]:method_text:[s);            mDevicePolicyManager.removeKeyPair(getWho(), dev_unique_alias);        }    }   ])', 1), ('([3:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[HAL]:[3]:method_text:[lly {            mDevicePolicyManager.removeKeyPair(getWho(), someAlias);        }    }       ])', 1), ('([2:/com/android/cts/deviceandprofileowner/KeyManagementTest.java]:[HAL]:[2]:method_text:[ationSupported() {        return mDevicePolicyManager.isUniqueDeviceAttestationSupported();    }}])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[HAL]:[1]:method_text:[Exception {        super.setUp();    }    // Test that this app can access pre-granted alias   ])', 1), ('([1:/com/android/cts/certinstaller/PreSelectedKeyAccessTest.java]:[HAL]:[1]:method_text:[Key);        verify.update(data);        assertThat(verify.verify(signature)).isTrue();    }   ])', 1), ('([2:/android/animation/cts/LayoutAnimationTest.java]:[HAL]:[2]:method_text:[sertEquals(appearingAnimator, mLayoutTransition.getAnimator(LayoutTransition.APPEARING));    }   ])', 1), ('([5:/android/animation/cts/LayoutAnimationTest.java]:[HAL]:[5]:method_text:[        assertTrue(alphaValue <= endAlpha);            lastValue = alphaValue;        }    }   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[1]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([2:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[2]:method_text:[     * Requires Permission:     * {@link android.Manifest.permission#READ_PHONE_STATE}.     */   ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[IMS]:[1]:method_text:[RMISSION_MASK;    /**     * Verify the documented permissions for PhoneStateListener.     */   ])', 1), ('([6:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[6]:method_text:[will be public in S, this test     * is commented and will be un-commented in Android S.     *   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[1]:method_text:[rifyDeviceId(deviceId);    }    /**     * Tests the max number of active SIMs method     */   ])', 1), ('([2:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[2]:method_text:[or a valid MAC address     * if only a WiFi device. At least one of them must be valid.     */   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[1]:method_text:[caller does not have carrier privileges or is not the     * current default dialer app.     */   ])', 1), ('([11:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[11]:method_text:[) {            // IllegalArgumentException is okay, just not SecurityException        }    }   ])', 1), ('([5:/android/telephony/cts/TelephonyManagerTest.java]:[IMS]:[5]:method_text:[ fail(""testResetCarrierKeysForImsiEncryption: SecurityException not expected"");        }    }   ])', 1), ('([4:/android/telephony/cts/TelephonyManagerTest.java]:[HAL]:[4]:method_text:[ckageManager.FEATURE_TELEPHONY)                && mTelephonyManager.getPhoneCount() > 0;    }   ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[HAL]:[3]:method_text:[Radio HAL Version: "" + version,                version.first < 1 || version.second < 0);    }   ])', 1), ('([1:/android/telephony/cts/TelephonyManagerTest.java]:[HAL]:[1]:method_text:[nyManager,                tp -> tp.setSystemSelectionChannels(Collections.emptyList()));    }   ])', 1), ('([1:/android/graphics/cts/CameraVulkanGpuTest.java]:[HAL]:[1]:method_text:[;    }    private static native void loadCameraAndVerifyFrameImport(AssetManager assetManager);}])', 1), ('([16:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[16]:method_text:[)) {            fail(""This test requires that there is a SIM in the device!"");        }    }   ])', 1), ('([5:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[5]:method_text:[                + "" activity intent filter must have a > 0 priority."", 0, info.priority);    }   ])', 1), ('([14:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[14]:method_text:[ission.MODIFY_PHONE_STATE"");            }            unregisterUceObserver();        }    }   ])', 1), ('([16:/android/telephony/ims/cts/RcsUceAdapterTest.java]:[IMS]:[16]:method_text:[ext getContext() {        return InstrumentationRegistry.getInstrumentation().getContext();    }}])', 1), ('([1:/android/adb/cts/AdbHostTest.java]:[HAL]:[1]:method_text:[c7c6d5edcbe04454eb9a40f947ac0a3045f64eb    // for the patch that enabled this on Pixel devices.   ])', 1), ('([94:/android/renderscript/cts/generated/TestNativeCospi.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestNativeCospi.java]:[HAL]:[8]:method_text:[spiHalf2Half2();        checkNativeCospiHalf3Half3();        checkNativeCospiHalf4Half4();    }}])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[HAL]:[1]:method_text:[  } finally {            assertThat(mDpm.removeKeyPair(null, alias)).isTrue();        }    }   ])', 1), ('([9:/android/server/wm/WindowInsetsAnimationImeTests.java]:[IMS]:[9]:method_text:[.get(callback.imeAnimSteps.size() - 1).insets                        .getInsets(ime()));    }   ])', 1), ('([94:/android/renderscript/cts/generated/TestAcos.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestAcos.java]:[HAL]:[8]:method_text:[        checkAcosHalf2Half2();        checkAcosHalf3Half3();        checkAcosHalf4Half4();    }}])', 1), ('([1:/android/mediav2/cts/EncodeDecodeAccuracyTest.java]:[HAL]:[1]:method_text:[he     * decoder is expected to produce the color information accurately     */    @LargeTest   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[ereo*/);    }    // Test case 4: setPlaybackRate() with half the content rate returns SUCCESS   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[ case 7: setPlaybackRate() and retrieve value, should be the same for    // half the content SR   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[ TEST_CONF,                WAIT_TIME_MS, TEST_LOOP_DURATION, TEST_ADDITIONAL_DRAIN_MS);    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[ec);        // -------- tear down --------------        track.release();    }    @Presubmit   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[.ENCODING_PCM_16BIT,                AudioTrack.MODE_STREAM,                streamName);    }   ])', 1), ('([2:/android/media/cts/AudioTrackTest.java]:[HAL]:[2]:method_text:[rackStartTimeNs, streamName);        } finally {            track.release();        }    }   ])', 1), ('([1:/android/media/cts/AudioTrackTest.java]:[HAL]:[1]:method_text:[}        track.release();    }    // Test AudioTrack to ensure we can build after a failure.   ])', 1), ('([1:/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java]:[HAL]:[1]:method_text:[       Color.RED,                }, 20)); // Tolerance set to account for interpolation    }   ])', 1), ('([1:/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java]:[HAL]:[1]:method_text:[        Color.RED,                }, 20)); // Tolerance set to account for interpolation    }   ])', 1), ('([2:/android/uirendering/cts/testclasses/ViewFadingEdgeTests.java]:[HAL]:[2]:method_text:[          Color.WHITE                }, 20)); // Tolerance set to account for interpolation    }}])', 1), ('([5:/android/media/cts/MediaSyncEventTest.java]:[HAL]:[5]:method_text:[ackageManager().hasSystemFeature(                PackageManager.FEATURE_AUDIO_LOW_LATENCY);    }}])', 1), ('([1:/android/server/wm/lifecycle/ActivityStarterTests.java]:[HAL]:[1]:method_text:[ * second activity is launched with FLAG_ACTIVITY_NEW_TASK and FLAG_ACTIVITY_CLEAR_TASK.     */   ])', 1), ('([2:/android/renderscript/cts/ReduceTest.java]:[HAL]:[2]:method_text:[ idx = 0; idx < input.length; ++idx)            rslt += input[idx];        return rslt;    }   ])', 1), ('([4:/android/renderscript/cts/ReduceTest.java]:[HAL]:[4]:method_text:[arrayResult = new short[] { vectorResult.x, vectorResult.y };        return arrayResult;    }   ])', 1), ('([9:/android/renderscript/cts/ReduceTest.java]:[HAL]:[9]:method_text:[putArray[1]),                              new Short2(outputArray[2], outputArray[3]) };    }   ])', 1), ('([5:/android/renderscript/cts/ReduceTest.java]:[HAL]:[5]:method_text:[          result[i % 4] = Math.min(result[i % 4], inputArray[i]);        return result;    }   ])', 1), ('([1:/android/renderscript/cts/ReduceTest.java]:[HAL]:[1]:method_text:[0x4567_89ab_cdef_0123L};    private static final int[] oorInput = createInputArrayInt(1, 22);   ])', 1), ('([5:/android/renderscript/cts/ReduceTest.java]:[HAL]:[5]:method_text:[t; expected "" + goodResult);                    }                }            }        }    }}])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[IMS]:[1]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[IMS]:[5]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[HAL]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[HAL]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([6:/android/util/cts/RangeTest.java]:[HAL]:[6]:method_text:[erifyHashCodeEquals(negativeOneTenthPositiveOneTenth, negativeOneTenthPositiveOneTenth2);    }   ])', 1), (""([9:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[9]:method_text:[R} network must both be     * either defined or undefined; you can't cross the streams.     */   ])"", 1), ('([2:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[2]:method_text:[il(""Device must have a valid default data subId for validation"");            }        }    }   ])', 1), ('([5:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[5]:method_text:[()                        < subList.get(i).getSubscriptionId());            }        }    }   ])', 1), ('([30:/android/telephony/cts/SubscriptionManagerTest.java]:[IMS]:[30]:method_text:[ion expected"");        } catch (SecurityException e) {            // expected        }    }   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[IMS]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[HAL]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[HAL]:[1]:method_text:[           releaseVisualizer();        }    }    //Test case 2.1: test capture with listener   ])', 1), ('([1:/android/media/cts/VisualizerTest.java]:[HAL]:[1]:method_text:[   //----------------------------------    //Test case 3.0: test setting NONE measurement mode   ])', 1), ('([94:/android/renderscript/cts/generated/TestTan.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestTan.java]:[HAL]:[8]:method_text:[);        checkTanHalf2Half2();        checkTanHalf3Half3();        checkTanHalf4Half4();    }}])', 1), ('([94:/android/renderscript/cts/generated/TestLog.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestLog.java]:[HAL]:[8]:method_text:[);        checkLogHalf2Half2();        checkLogHalf3Half3();        checkLogHalf4Half4();    }}])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[HAL]:[1]:method_text:[   * Apply only half of the light compression DRC and normalize to -20dBFS output level.     */   ])', 1), ('([4:/android/media/cts/DecoderTestAacDrc.java]:[HAL]:[4]:method_text:[ata.     * Disable light compression DRC to test if MediaFormat keys reach the decoder.     */   ])', 1), ('([1:/android/media/cts/DecoderTestAacDrc.java]:[HAL]:[1]:method_text:[tamps,                drcParams, decoderName, runtimeChange, -2);        return decoded;    }}])', 1), ('([1:/android/hardware/camera2/cts/ImageReaderTest.java]:[HAL]:[1]:method_text:[.     */    private static native boolean validateDynamicDepthNative(byte[] dynamicDepthBuffer);}])', 1), ('([94:/android/renderscript/cts/generated/TestErfc.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestErfc.java]:[HAL]:[8]:method_text:[        checkErfcHalf2Half2();        checkErfcHalf3Half3();        checkErfcHalf4Half4();    }}])', 1), ('([94:/android/renderscript/cts/generated/TestTanh.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestTanh.java]:[HAL]:[8]:method_text:[        checkTanhHalf2Half2();        checkTanhHalf3Half3();        checkTanhHalf4Half4();    }}])', 1), ('([94:/android/renderscript/cts/generated/TestCospi.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestCospi.java]:[HAL]:[8]:method_text:[     checkCospiHalf2Half2();        checkCospiHalf3Half3();        checkCospiHalf4Half4();    }}])', 1), ('([6:/android/view/cts/ViewTest.java]:[HAL]:[6]:method_text:[m);        assertEquals(ptParent.x, point.x);        assertEquals(ptParent.y, point.y);    }   ])', 1), ('([6:/android/view/cts/ViewTest.java]:[HAL]:[6]:method_text:[.left + halfWidth, rect.right);        assertEquals(rect.top + halfHeight, rect.bottom);    }   ])', 1), ('([6:/android/view/cts/ViewTest.java]:[HAL]:[6]:method_text:[should throw NullPointerException"");        } catch (NullPointerException e) {        }    }   ])', 1), ('([3:/android/telephony/cts/CarrierConfigManagerTest.java]:[IMS]:[3]:method_text:[E_BOOL.startsWith(                                CarrierConfigManager.Gps.KEY_PREFIX));    }   ])', 1), ('([2:/android/keystore/cts/HmacKeyGenPerformanceTest.java]:[ACS]:[2]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([913:/android/renderscript/cts/generated/TestConvert.java]:[HAL]:[913]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([66:/android/renderscript/cts/generated/TestConvert.java]:[HAL]:[66]:method_text:[kConvertUlong2Half2();        checkConvertUlong3Half3();        checkConvertUlong4Half4();    }}])', 1), ('([49:/android/renderscript/cts/generated/TestHalfRsqrt.java]:[HAL]:[49]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([5:/android/renderscript/cts/generated/TestHalfRsqrt.java]:[HAL]:[5]:method_text:[tFloat2Float2();        checkHalfRsqrtFloat3Float3();        checkHalfRsqrtFloat4Float4();    }}])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[HAL]:[1]:method_text:[iceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");        }    }    @RequiresDevice   ])', 1), ('([94:/android/renderscript/cts/generated/TestAtanpi.java]:[HAL]:[94]:method_text:[ +                (relaxed ? ""_relaxed"" : """") + "":\\n"" + message.toString(), errorFound);    }   ])', 1), ('([8:/android/renderscript/cts/generated/TestAtanpi.java]:[HAL]:[8]:method_text:[  checkAtanpiHalf2Half2();        checkAtanpiHalf3Half3();        checkAtanpiHalf4Half4();    }}])', 1), ('([3:/android/telephony/cts/PhoneStateListenerTest.java]:[IMS]:[3]:method_text:[        if (mHandlerThread != null) {            mHandlerThread.quitSafely();        }    }   ])', 1), ('([9:/android/telephony/cts/PhoneStateListenerTest.java]:[IMS]:[9]:method_text:[        }        }        assertThat(mOnImsCallDisconnectCauseChangedCalled).isTrue();    }   ])', 1), ('([1:/android/widget/cts/ScrollViewTest.java]:[HAL]:[1]:method_text:[  assertEquals((100 - 0) / 2, mScrollViewRegular.getMaxScrollAmount());    }    @UiThreadTest   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[  /**     * @constraint B1     * @title iget_short shall not work for reference fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[}    /**     * @constraint B1     * @title iget_short shall not work for char fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[ }    /**     * @constraint B1     * @title iget_short shall not work for int fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[}    /**     * @constraint B1     * @title iget_short shall not work for byte fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[    /**     * @constraint B1     * @title iget_short shall not work for boolean fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[    /**     * @constraint B1     * @title iget_short shall not work for double fields     */   ])', 1), ('([1:/dot/junit/opcodes/iget_short/Test_iget_short.java]:[HAL]:[1]:method_text:[}    /**     * @constraint B1     * @title iget_short shall not work for long fields     */   ])', 1), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[HAL]:[1]:method_text:[);            }        }    }    /**     * Test face detection modes and results.     */   ])', 1), ('([4:/android/hardware/camera2/cts/CaptureRequestTest.java]:[HAL]:[4]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;            }        }    }}])', 1), ('([7:/android/server/biometrics/BiometricServiceTests.java]:[HAL]:[7]:method_text:[tils.numberOfSpecifiedOperations(state, id, BiometricsProto.CM_RESET_LOCKOUT));        }    }   ])', 1), ('([2:/android/location/cts/fine/LocationManagerFineTest.java]:[HAL]:[2]:method_text:[   return;        }        assertThat(gnssHardwareModelName.length()).isGreaterThan(3);    }   ])', 1), ('([33:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[33]:method_text:[   mErrorQueue.clear();        mCompleteQueue.clear();        mCapabilityQueue.clear();    }   ])', 1), ('([35:/android/telephony/ims/cts/EabControllerTest.java]:[IMS]:[35]:method_text:[imes--;        } while (retryTimes > 0 && Instant.now().getEpochSecond() < expirationTime);    }}])', 1)]"	""	""	"[('HAL', 87), ('IMS', 29), ('ACS', 2)]"	"[('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey None]', 2), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testPasswordRequirementsApi None]', 2), ('[android.text.cts.AlteredCharSequenceTest testMake None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest finish None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanGenerateECKeyPairUsingStrongBox None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testUniqueDeviceAttestationUsingDifferentAttestationCert None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testUniqueDeviceAttestationFailsWhenUnsupported None]', 1), ('[com.android.cts.deviceandprofileowner.KeyManagementTest testCanSetKeyPairCertChain None]', 1), ('[com.android.cts.certinstaller.PreSelectedKeyAccessTest testAccessingPreSelectedAliasExpectingSuccess None]', 1), ('[android.animation.cts.LayoutAnimationTest testSetAnimator None]', 1), ('[android.animation.cts.LayoutAnimationTest testAnimationWithAnimator None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetLine1Number None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testGetSimSerialNumber None]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testSetForbiddenPlmns None]', 1), ('[android.telephony.cts.TelephonyManagerTest testTelephonyManager None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetDeviceId None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMaxNumberOfSimultaneouslyActiveSims None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetMeidForSlot None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCarrierInfoForImsiEncryption None]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetCarrierKeysForImsiEncryption None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetRadioHalVersion None]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetSystemSelectionChannels None]', 1), ('[android.graphics.cts.CameraVulkanGpuTest testCameraImportAndRendering None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest beforeAllTests None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testCapabilityDiscoveryIntentReceiverExists None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testGetAndSetUceSetting None]', 1), ('[android.telephony.ims.cts.RcsUceAdapterTest testMethodPermissions None]', 1), ('[android.renderscript.cts.generated.TestNativeCospi testNativeCospi None]', 1), ('[com.android.cts.certinstaller.DirectDelegatedCertInstallerTest testGenerateKeyPairWithoutDeviceIdAttestation None]', 1), ('[android.server.wm.WindowInsetsAnimationImeTests testAnimationCallbacks_overlapping_opposite None]', 1), ('[android.renderscript.cts.generated.TestAcos testAcos None]', 1), ('[android.mediav2.cts.EncodeDecodeAccuracyTest isValid None]', 1), ('[android.media.cts.AudioTrackTest testSetStereoVolumeMid None]', 1), ('[android.media.cts.AudioTrackTest testSetPlaybackRateTwiceOutputSR None]', 1), ('[android.media.cts.AudioTrackTest testPlayStaticDataShort None]', 1), ('[android.media.cts.AudioTrackTest testPlayStaticData None]', 1), ('[android.media.cts.AudioTrackTest testGetTimestamp None]', 1), ('[android.media.cts.AudioTrackTest testFastTimestamp None]', 1), ('[android.media.cts.AudioTrackTest testVariableSpeedPlayback None]', 1), ('[android.uirendering.cts.testclasses.ViewFadingEdgeTests testCreateLeftFade None]', 1), ('[android.uirendering.cts.testclasses.ViewFadingEdgeTests testCreateRightFade None]', 1), ('[android.uirendering.cts.testclasses.ViewFadingEdgeTests testCreateTopFade None]', 1), ('[android.uirendering.cts.testclasses.ViewFadingEdgeTests testCreateBottomFade None]', 1), ('[android.uirendering.cts.testclasses.ViewFadingEdgeTests testCreateLeftAndRightFade None]', 1), ('[android.media.cts.MediaSyncEventTest testParcelableWriteToParcelCreate None]', 1), ('[android.server.wm.lifecycle.ActivityStarterTests testLaunchAliasActivity None]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMax None]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMaxHalf None]', 1), ('[android.renderscript.cts.ReduceTest testFindMinAndMaxHalf2 None]', 1), ('[android.renderscript.cts.ReduceTest testBadSillySumInputLengthMismatch None]', 1), ('[android.renderscript.cts.ReduceTest testBadOorrSca None]', 1), ('[android.renderscript.cts.ReduceTest testBadOorrVec4 None]', 1), ('[android.renderscript.cts.ReduceTest testBadOorrArr9 None]', 1), ('[android.renderscript.cts.ReduceTest testBadOorrArr9Vec4 None]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor None]', 1), ('[android.util.cts.RangeTest testEquals None]', 1), ('[android.telephony.cts.SubscriptionManagerTest isSupported None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testCorrectness None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testActiveSubscriptions None]', 1), ('[android.telephony.cts.SubscriptionManagerTest testRestoreAllSimSpecificSettingsFromBackup None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise None]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled None]', 1), ('[android.media.cts.VisualizerTest test2_0PollingCapture None]', 1), ('[android.media.cts.VisualizerTest test2_1ListenerCapture None]', 1), ('[android.renderscript.cts.generated.TestTan testTan None]', 1), ('[android.renderscript.cts.generated.TestLog testLog None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcFullM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcHalfM4a None]', 1), ('[android.media.cts.DecoderTestAacDrc testDecodeAacDrcOutputLoudnessM4a None]', 1), ('[android.hardware.camera2.cts.ImageReaderTest testUsageRespected None]', 1), ('[android.renderscript.cts.generated.TestErfc testErfc None]', 1), ('[android.renderscript.cts.generated.TestTanh testTanh None]', 1), ('[android.renderscript.cts.generated.TestCospi testCospi None]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRectPoint None]', 1), ('[android.view.cts.ViewTest testGetGlobalVisibleRect None]', 1), ('[android.view.cts.ViewTest testGetLocalVisibleRect None]', 1), ('[android.telephony.cts.CarrierConfigManagerTest isDataCapable None]', 1), ('[android.keystore.cts.HmacKeyGenPerformanceTest testHmacKeyGen None]', 1), ('[android.renderscript.cts.generated.TestConvert testConvert None]', 1), ('[android.renderscript.cts.generated.TestHalfRsqrt testHalfRsqrt None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testAlwaysOnVpnAcrossReboot None]', 1), ('[android.renderscript.cts.generated.TestAtanpi testAtanpi None]', 1), ('[android.telephony.cts.PhoneStateListenerTest testOnImsCallDisconnectCauseChanged None]', 1), ('[android.widget.cts.ScrollViewTest testGetMaxScrollAmount None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE7 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE8 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE9 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE10 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE11 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE12 None]', 1), ('[dot.junit.opcodes.iget_short.Test_iget_short testVFE13 None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testFlashTurnOff None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes None]', 1), ('[android.server.biometrics.BiometricServiceTests testLockoutResetRequestedAfterBiometricUnlock_whenStrong None]', 1), ('[android.location.cts.fine.LocationManagerFineTest testGetGnssHardwareModelName None]', 1), ('[android.telephony.ims.cts.EabControllerTest beforeAllTests None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestCapabilities None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestAvailabilities None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredCapabilities None]', 1), ('[android.telephony.ims.cts.EabControllerTest testRequestExpiredAvailabilities None]', 1)]"
