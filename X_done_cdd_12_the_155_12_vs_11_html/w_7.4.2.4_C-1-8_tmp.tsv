"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-8"	"7.4.2.4/C-1-8"	"07040204.670108"	"""C-1-8] MUST support user control of provisioning through the Wi-Fi picker."""	""	"wifi"	"view picker passpoint wifi button"	"passpoint wifi picker view button"	""	""	""	"[('android.net.wifi.cts.WifiManagerTest', 118), ('android.net.wifi.cts.WifiNetworkSuggestionTest', 39), ('android.net.wifi.cts.WifiHotspot2Test', 27), ('android.net.wifi.cts.WifiEnterpriseConfigTest', 16), ('android.net.wifi.aware.cts.SingleDeviceTest', 16), ('android.net.wifi.cts.WifiNetworkSpecifierTest', 13), ('android.net.wifi.cts.WifiLocationInfoTest', 13), ('android.net.wifi.passpoint.cts.PasspointConfigurationTest', 12), ('android.net.wifi.cts.ConnectedNetworkScorerTest', 10), ('android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest', 9), ('android.net.wifi.cts.ConcurrencyTest', 8), ('android.net.wifi.cts.WifiBackupRestoreTest', 8), ('android.net.wifi.rtt.cts.WifiRttTest', 7), ('android.cts.statsdatom.wifi.WifiStatsTests', 7), ('android.net.wifi.cts.WifiConfigurationTest', 6), ('android.net.wifi.cts.ScanResultTest', 6), ('android.net.wifi.p2p.cts.WifiP2pWfdInfoTest', 5), ('android.net.wifi.cts.WifiInfoTest', 5), ('android.net.wifi.nl80211.cts.WifiNl80211ManagerTest', 5), ('android.net.wifi.cts.EasyConnectStatusCallbackTest', 4), ('android.net.wifi.p2p.cts.WifiP2pInfoTest', 4), ('android.net.wifi.cts.WifiMigrationTest', 4), ('android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest', 4), ('android.net.wifi.cts.ConfigParserTest', 4), ('android.net.wifi.nl80211.cts.NativeWifiClientTest', 4), ('android.net.wifi.p2p.cts.WifiP2pConfigTest', 4), ('com.android.cts.verifier.wifi.BaseTestActivity', 3), ('android.net.wifi.p2p.cts.WifiP2pServiceRequestTest', 3), ('android.net.wifi.cts.WifiLockTest', 3), ('com.android.cts.verifier.wifiaware.TestListActivity', 3), ('android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest', 3), ('com.android.cts.verifier.wifiaware.BaseTestActivity', 3), ('android.net.wifi.cts.PpsMoParserTest', 3), ('android.net.wifi.p2p.cts.WifiP2pDeviceTest', 3), ('com.android.cts.verifier.wifi.TestListActivity', 3), ('android.net.wifi.cts.MulticastLockTest', 2), ('android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test', 2), ('android.net.wifi.cts.SupplicantStateTest', 2), ('android.net.wifi.passpoint.cts.HomeSpTest', 2), ('android.net.wifi.cts.WifiFrameworkInitializerTest', 2), ('android.net.wifi.cts.CoexUnsafeChannelTest', 1), ('com.android.cts.verifier.wifiaware.DataPathOobOpenResponderTestActivity', 1), ('android.net.wifi.cts.app.ScheduleJobActivity', 1), ('com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase', 1), ('com.android.cts.verifier.wifi.NetworkSuggestionSsidPostConnectTestActivity', 1), ('android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathOpenUnsolicitedPublishAcceptAnyTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPassphraseUnsolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifiaware.BaseTestCase', 1), ('com.android.cts.verifier.wifiaware.DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity', 1), ('android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPmkSolicitedPublishAcceptAnyTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkRequestSpecificNetworkSpecifierTestActivity', 1), ('com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase', 1), ('android.net.wifi.nl80211.cts.NativeScanResultTest', 1), ('com.android.cts.verifier.wifiaware.DataPathOobPassphraseResponderTestActivity', 1), ('android.net.wifi.cts.app.RetrieveTransportInfoAndReturnStatusActivity', 1), ('com.android.cts.verifier.wifi.TestUtils', 1), ('android.net.wifi.cts.WifiJUnit3TestBase', 1), ('com.android.cts.verifier.wifiaware.DataPathOpenUnsolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPassphraseSolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathOpenSolicitedPublishAcceptAnyTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPmkUnsolicitedPublishAcceptAnyTestActivity', 1), ('com.android.cts.verifier.wifiaware.DiscoveryRangingPublishTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPmkUnsolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkRequestUnavailableNetworkSpecifierTestActivity', 1), ('com.android.cts.deviceowner.wificonfigcreator.WifiConfigCreatorActivity', 1), ('android.net.wifi.nl80211.cts.PnoSettingsTest', 1), ('android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity', 1), ('android.net.wifi.cts.TestHelper', 1), ('com.android.cts.verifier.wifi.NetworkRequestPatternNetworkSpecifierTestActivity', 1), ('android.net.wifi.nl80211.cts.PnoNetworkTest', 1), ('com.android.cts.verifier.wifiaware.DataPathOpenSolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkSuggestionConnectionFailureTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkSuggestionModificationInPlaceTestActivity', 1), ('com.android.cts.verifier.wifiaware.DataPathPassphraseSolicitedPublishAcceptAnyTestActivity', 1), ('android.net.wifi.cts.WaitForResultActivity', 1), ('android.net.wifi.nl80211.cts.RadioChainInfoTest', 1), ('com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase', 1), ('com.android.cts.verifier.wifiaware.CallbackUtils', 1), ('com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase', 1), ('com.android.cts.verifier.wifi.CallbackUtils', 1), ('com.android.cts.verifier.wifi.NetworkSuggestionSsidBssidTestActivity', 1), ('android.net.wifi.rtt.cts.TestBase', 1), ('com.android.cts.verifier.wifi.BaseTestCase', 1), ('com.android.cts.verifier.wifiaware.DataPathPmkSolicitedPublishTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkSuggestionSsidTestActivity', 1), ('com.android.cts.verifier.wifi.NetworkRequestInvalidCredentialNetworkSpecifierTestActivity', 1), ('android.net.wifi.cts.WifiJUnit4TestBase', 1), ('android.wifibroadcasts.app.WifiBroadcastsDeviceActivity', 1), ('com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase', 1)]"	"[('setUp', 32), ('getContext', 27), ('countDown', 19), ('getInstrumentation', 14), ('Object', 11), ('tearDown', 11), ('notify', 10), ('getAction', 9), ('getBytes', 9), ('notifyAll', 8), ('getPackageManager', 8), ('BroadcastReceiver', 7), ('Handler', 6), ('toString', 6), ('getScanResults', 5), ('Intent', 4), ('getClass', 4), ('getClassLoader', 4), ('StringBuilder', 4), ('readLine', 4), ('PasspointConfiguration', 4), ('HomeSp', 4), ('getIntent', 3), ('build', 3), ('setUpClass', 3), ('Builder', 3), ('generateRandomPassphrase', 3), ('getSSID', 3), ('start', 3), ('getLooper', 3), ('MySync', 3), ('IntentFilter', 3), ('onUnavailable', 3), ('startScan', 2), ('getState', 2), ('getResources', 2), ('startScanAndWaitForResults', 2), ('getConnectionInfo', 2), ('getMeteredOverride', 2), ('onAttachFailed', 2), ('waitForAnyCallback', 2), ('canSerializeAndDeserialize', 2), ('obtain', 2), ('generateConfigurationFromProfile', 2), ('Credential', 2), ('UserCredential', 2), ('CertificateCredential', 2), ('SimCredential', 2), ('poll', 2), ('waitForCapabilitiesChanged', 2), ('hashCode', 2), ('generateConfigurationFromPPSMOTree', 2), ('getFriendlyName', 2), ('getFqdn', 2), ('getPackageName', 2), ('show', 2), ('Bundle', 1), ('printStackTrace', 1), ('hasWifi', 1), ('StringBuffer', 1), ('newSingleThreadScheduledExecutor', 1), ('getDevice', 1), ('getTransportInfo', 1), ('getSupplicantState', 1), ('getBSSID', 1), ('Random', 1), ('EasyConnectStatusCallback', 1), ('waitForStateChange', 1), ('getSession', 1), ('myUserHandle', 1), ('turnScreenOn', 1), ('turnScreenOff', 1), ('onScanResultsAvailable', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MyResponse', 1), ('DeviceWiphyCapabilities', 1), ('waitForAttach', 1), ('onIdentityChanged', 1), ('waitForMac', 1), ('waitForNetworkCapabilities', 1), ('waitForCallbacks', 1), ('await', 1), ('onSessionConfigUpdated', 1), ('onSessionConfigFailed', 1), ('onSessionTerminated', 1), ('waitForRangingResults', 1), ('runAll', 1), ('run', 1), ('getCurrentCountryCode', 1), ('executeAttach', 1), ('AttachCb', 1), ('NetworkCallback', 1), ('getNetwork', 1), ('getNetworkCapabilities', 1), ('waitForAvailable', 1), ('waitForUnavailable', 1), ('waitForLost', 1), ('getMacAddress', 1), ('toByteArray', 1), ('enableLocationIfNotEnabled', 1), ('getSimpleName', 1)]"	"[('CtsWifiTestCases', 384), ('CtsStatsdAtomHostTestCases', 7), ('CtsWifiBroadcastsHostTestCases', 2)]"	""	"com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase"	"getBytes"	""	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 118), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 39), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 27), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLocationInfoTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 7), ('/home/gpoor/cts-12-source/cts/hostsidetests/statsdatom/src/android/cts/statsdatom/wifi/WifiStatsTests.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/EasyConnectStatusCallbackTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pInfoTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeWifiClientTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pConfigTest.java', 4), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestActivity.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiLockTest.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/TestListActivity.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestActivity.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java', 3), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestListActivity.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MulticastLockTest.java', 2), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/src/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/SupplicantStateTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiFrameworkInitializerTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/CoexUnsafeChannelTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/ScheduleJobActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/BaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/NativeScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiJUnit3TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/WifiConfigCreator/src/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/CtsWifiLocationTestApp/src/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/TestHelper.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoNetworkTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WaitForResultActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/RadioChainInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/CallbackUtils.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/BaseTestCase.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiJUnit4TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/hostsidetests/wifibroadcasts/app/src/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java', 1), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java', 1)]"	"[('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(14,wifi,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(31,wifi,/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java)', 1), ('(7,wifi,/android/net/wifi/cts/CoexUnsafeChannelTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java)', 1), ('(3,wifi,/android/net/wifi/cts/app/ScheduleJobActivity.java)', 1), ('(47,wifi,/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java)', 1), ('(16,wifi,/android/net/wifi/cts/MulticastLockTest.java)', 1), ('(4,wifi,/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java)', 1), ('(9,wifi,/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1348,wifi,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java)', 1), ('(9,wifi,/com/android/cts/verifier/wifiaware/BaseTestCase.java)', 1), ('(154,wifi,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(82,wifi,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(36,wifi,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(168,wifi,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(18,view,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(26,wifi,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(13,button,/com/android/cts/verifier/wifi/BaseTestActivity.java)', 1), ('(8,wifi,/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java)', 1), ('(16,wifi,/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(5,wifi,/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java)', 1), ('(86,wifi,/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java)', 1), ('(7,wifi,/android/net/wifi/nl80211/cts/NativeScanResultTest.java)', 1), ('(23,wifi,/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java)', 1), ('(69,wifi,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(100,wifi,/android/net/wifi/cts/WifiLocationInfoTest.java)', 1), ('(17,wifi,/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java)', 1), ('(27,wifi,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(3,wifi,/android/net/wifi/cts/WifiJUnit3TestBase.java)', 1), ('(55,wifi,/android/net/wifi/cts/EasyConnectStatusCallbackTest.java)', 1), ('(19,wifi,/android/net/wifi/p2p/cts/WifiP2pInfoTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(64,wifi,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(156,wifi,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(33,wifi,/android/net/wifi/cts/WifiLockTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(109,wifi,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java)', 1), ('(10,view,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(15,wifi,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(7,button,/com/android/cts/verifier/wifiaware/TestListActivity.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java)', 1), ('(5,wifi,/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java)', 1), ('(22,wifi,/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java)', 1), ('(8,wifi,/android/net/wifi/nl80211/cts/PnoSettingsTest.java)', 1), ('(5,wifi,/android/net/wifi/cts/SupplicantStateTest.java)', 1), ('(9,wifi,/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java)', 1), ('(147,wifi,/android/net/wifi/cts/TestHelper.java)', 1), ('(5,wifi,/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(135,wifi,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(7,wifi,/android/net/wifi/nl80211/cts/PnoNetworkTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java)', 1), ('(4,wifi,/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java)', 1), ('(44,wifi,/android/net/wifi/cts/WifiMigrationTest.java)', 1), ('(4,wifi,/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java)', 1), ('(222,wifi,/android/net/wifi/cts/ConcurrencyTest.java)', 1), ('(89,wifi,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java)', 1), ('(13,wifi,/android/net/wifi/cts/WaitForResultActivity.java)', 1), ('(32,wifi,/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java)', 1), ('(14,view,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(1,wifi,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(5,button,/com/android/cts/verifier/wifiaware/BaseTestActivity.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(6,wifi,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(7,wifi,/android/net/wifi/nl80211/cts/RadioChainInfoTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(8,wifi,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(26,wifi,/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java)', 1), ('(71,wifi,/android/cts/statsdatom/wifi/WifiStatsTests.java)', 1), ('(18,wifi,/com/android/cts/verifier/wifiaware/CallbackUtils.java)', 1), ('(35,wifi,/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java)', 1), ('(30,wifi,/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java)', 1), ('(1,wifi,/com/android/cts/verifier/wifi/CallbackUtils.java)', 1), ('(20,wifi,/android/net/wifi/nl80211/cts/NativeWifiClientTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(6,wifi,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(208,wifi,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(4,wifi,/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java)', 1), ('(59,wifi,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(8,wifi,/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java)', 1), ('(18,wifi,/com/android/cts/verifier/wifi/BaseTestCase.java)', 1), ('(2,wifi,/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java)', 1), ('(10,view,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(33,wifi,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(8,button,/com/android/cts/verifier/wifi/TestListActivity.java)', 1), ('(4,wifi,/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java)', 1), ('(5,wifi,/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(143,wifi,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,wifi,/android/net/wifi/cts/WifiJUnit4TestBase.java)', 1), ('(96,wifi,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1), ('(8,wifi,/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java)', 1), ('(12,wifi,/android/net/wifi/cts/WifiFrameworkInitializerTest.java)', 1), ('(21,wifi,/android/net/wifi/p2p/cts/WifiP2pConfigTest.java)', 1), ('(25,wifi,/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([6:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[6]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 4), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[1]:method_text:[using restricted suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 3), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[18]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[1]:method_text:[    /**     * Tests the entire connection flow using a BSSID pattern in the specifier.     */   ])', 2), (""([8:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[8]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 2), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 2), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[1]:method_text:[uested for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[1]:method_text:[estion for platform to connect).     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 2), ('([5:/android/net/wifi/p2p/cts/WifiP2pInfoTest.java]:[wifi]:[5]:method_text:[sGroupOwner);        assertEquals(info.groupOwnerAddress, copiedInfo.groupOwnerAddress);    }   ])', 2), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[ds.     * <p>     * Test that getting a set client private key produces the same value     */   ])', 2), ('([3:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 2), ('([2:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[2]:method_text:[ suggestion for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 2), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([10:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[wifi]:[10]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([4:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[wifi]:[4]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([12:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[wifi]:[12]:method_text:[Instrumentation().getContext();        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([5:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[wifi]:[5]:method_text:[.isContentProtectionSupported());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[wifi]:[3]:method_text:[sCoupledSinkSupportedAtSource());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[wifi]:[6]:method_text:[_SOURCE, info.getR2DeviceInfo());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/p2p/cts/WifiP2pWfdInfoTest.java]:[wifi]:[5]:method_text:[_SOURCE);        assertEquals(WifiP2pWfdInfo.DEVICE_TYPE_WFD_SOURCE, info.getDeviceInfo());    }}])', 1), ('([7:/android/net/wifi/cts/CoexUnsafeChannelTest.java]:[wifi]:[7]:method_text:[D_24_GHZ;    final static int TEST_CHANNEL = 6;    final static int TEST_POWER_CAP_DBM = -50;   ])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOobOpenResponderTestActivity.java]:[wifi]:[2]:method_text:[th_oob_open_responder,                R.string.aware_data_path_oob_open_responder_info, 0);    }}])', 1), ('([3:/android/net/wifi/cts/app/ScheduleJobActivity.java]:[wifi]:[3]:method_text:[s);        jobScheduler.schedule(jobInfo);        Log.v(TAG,""Job scheduled: "" + jobInfo);    }}])', 1), ('([47:/com/android/cts/verifier/wifiaware/testcase/DataPathOutOfBandTestCase.java]:[wifi]:[47]:method_text:[estMsgReceived(mContext.getString(R.string.aware_status_lifecycle_ok));        return true;    }}])', 1), ('([8:/android/net/wifi/cts/MulticastLockTest.java]:[wifi]:[8]:method_text:[TAG = ""MulticastLockTest"";    /**     * Verify acquire and release of Multicast locks     */   ])', 1), ('([8:/android/net/wifi/cts/MulticastLockTest.java]:[wifi]:[8]:method_text:[/ releasing again after release: but ignored for non-referenced locks        mcl.release();    }}])', 1), ('([4:/com/android/cts/verifier/wifi/NetworkSuggestionSsidPostConnectTestActivity.java]:[wifi]:[4]:method_text:[t_connect,                R.string.wifi_test_network_suggestion_ssid_post_connect_info, 0);    }}])', 1), ('([9:/android/net/wifi/cts/app/TriggerScanAndReturnStatusActivity.java]:[wifi]:[9]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([158:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[158]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[    /**     * Test wifi scanning when Wifi is off and location scanning is turned on.     */   ])', 1), ('([15:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[15]:method_text:[rify that privileged call fails.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[8]:method_text:[erify transition through states.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[16]:method_text:[able properties     * 2.DhcpInfo properties     * 3.wifi state     * 4.ConnectionInfo     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[21]:method_text:[t.wifi.cts.WifiManagerTest --method testWifiScanTimestamp     */    @VirtualDeviceNotSupported   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[          + numFreshAps;        assertTrue(msg, numFreshAps * 2 >= mScanResults.size());    }   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[4]:method_text:[urn getContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[SignalLevel()}], and its value is monotonically increasing as     * the RSSI increases.     */   ])', 1), ('([31:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[31]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), (""([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[   * Verify calls to deprecated API's all fail for non-settings apps targeting >= Q SDK.     */   ])"", 1), ('([32:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[32]:method_text:[ }    /**     * Test the WifiManager APIs that return whether a feature is supported.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[    }    /**     * Verify non DO apps cannot call removeNonCallerConfiguredNetworks.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[{        }    }    /**     * Test coverage for the constructor of AddNetworkResult.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[leged(WifiConfiguration)} throws a     * SecurityException when called by a normal app.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[NetworkPrivileged(WifiConfiguration)} throws an exception when     * null is the input.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[ailure status code when adding an enterprise config with mandatory fields not filled in.     */   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[20]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([38:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[38]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([29:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[29]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[                task.run();                task = tasks.poll();            }        }    }   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[ck(capabilityCallback);            uiAutomation.dropShellPermissionIdentity();        }    }   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[3]:method_text:[ intended to be granted to only those apps with direct user     * access and no others.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[3]:method_text:[unctionality.  The permission is intended to be granted to only the device setup wizard.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[3]:method_text:[The permission is intended to be granted to only the device managed     * provisioning.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[4]:method_text:[on#WIFI_SET_DEVICE_MOBILITY_STATE} permission     * is held by at most one application.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[sion#NETWORK_CARRIER_PROVISIONING} permission     * is held by at most one application.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[4]:method_text:[WIFI_UPDATE_USABILITY_STATS_SCORE}     * permission is held by at most one application.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[een turns off while wifi is disabled     * but location is on.     * @throws Exception     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[not turned off when the screen turns off while wifi is enabled.     * @throws Exception     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[e platform supports a reasonable number of suggestions per app.     * @throws Exception     */   ])', 1), ('([26:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[26]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[13]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[ Verify that startTetheredHotspot with specific channel config.     * @throws Exception     */   ])', 1), ('([39:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[39]:method_text:[fiManager#connect(int, WifiManager.ActionListener)} to an existing saved     * network.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[ect(WifiConfiguration, WifiManager.ActionListener)} to an     * existing saved network.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[ation, WifiManager.ActionListener)} by marking     * an existing saved network metered.     */   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[20]:method_text:[er)} by adding/removing a new     * network.     */    @AsbSecurityTest(cveBugId = 159373687)   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[20]:method_text:[ryMacAddresses()} returns at least one valid MAC address.     */    @VirtualDeviceNotSupported   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[    /**     * Tests {@link WifiManager#isApMacRandomizationSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[     * Tests {@link WifiManager#isConnectedMacRandomizationSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[**     * Tests {@link WifiManager#isPreferredNetworkOffloadSupported()} does not crash.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[4]:method_text:[ /** Test that PNO scans reconnects us when the device is disconnected and the screen is off. */   ])', 1), ('([14:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[14]:method_text:[     }    }    /**     * Tests {@link WifiManager#isTdlsSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[pported();    }    /**     * Tests {@link WifiManager#isStaApConcurrencySupported().     */   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[17]:method_text:[ateCallback(Executor,     * WifiManager.TrafficStateCallback)} by sending some traffic.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[r#setScanAlwaysAvailable(boolean)} &     * {@link WifiManager#isScanAlwaysAvailable()}.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[r#setScanThrottleEnabled(boolean)} &     * {@link WifiManager#isScanThrottleEnabled()}.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[nager#setAutoWakeupEnabled(boolean)} &     * {@link WifiManager#isAutoWakeupEnabled()}.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[tVerboseLoggingEnabled(boolean)} &     * {@link WifiManager#isVerboseLoggingEnabled()}.     */   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[17]:method_text:[;        }    }    /**     * Tests {@link WifiManager#setVerboseLoggingLevel(int)}.     */   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[16]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[ngLevel(int)} for show key mode.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[u add the     * networks back after reset, the ownership of saved networks will change.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[ash.     * TODO(b/150891569): deprecate it in Android S, this API is not used anywhere.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[s clear to connect     * again.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[ }    /**     * Test that the wifi country code is either null, or a length-2 string.     */   ])', 1), ('([13:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[13]:method_text:[kCallback} when connected to a Wifi network,     * and returns null when not connected.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[19]:method_text:[));    }    /**     * Tests {@link WifiManager#isWpa3SaeSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[    }    /**     * Tests {@link WifiManager#isWpa3SuiteBSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[   }    /**     * Tests {@link WifiManager#isEnhancedOpenSupported()} does not crash.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[21]:method_text:[response depends on device support and hence both true/false     * are valid responses.     */   ])', 1), ('([41:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[41]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[ Tests {@link WifiManager#setTdlsEnabledWithMacAddress(String, boolean)} does not crash.     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[ing == RANDOMIZATION_PERSISTENT.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([20:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[20]:method_text:[ Tests {@link WifiManager#getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List)}     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[y());    }    /**     * Tests {@link WifiManager#getMatchingScanResults(List, List)}     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[pty());    }    /**     * Tests {@link WifiManager#disableEphemeralNetwork(String)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[;        }    }    /**     * Tests {@link WifiManager#allowAutojoin(int, boolean)}.     */   ])', 1), ('([16:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[16]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[8]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[     }    }    /**     * Tests {@link WifiManager#isWapiSupported()} does not crash.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[cKeySupported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[eH2eSupported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[ayR2Supported()} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[Supported()} returns true     * if this device supports it, otherwise, ensure no crash.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[ager.isP2pSupported();        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[5]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[alse     * are valid responses.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([17:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[17]:method_text:[he needed privileged permissions     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[d, no-op is also valid behavior.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([11:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[11]:method_text:[ork configurations are rejected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([26:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[26]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[8]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[9]:method_text:[nabled)} and     * {@link WifiManager#isCarrierNetworkOffloadEnabled} work as expected.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[12]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([8:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[8]:method_text:[nnels(int, int))} does not crash     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[10]:method_text:[nels(int, int))} does not crash.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[6]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([4:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[4]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[wifi]:[7]:method_text:[ic void onUserApprovalStatusChange(int status) {            mBlocker.countDown();        }    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[licited_publish,                R.string.aware_data_path_open_unsolicited_publish_info, 0);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1), ('([9:/com/android/cts/verifier/wifiaware/BaseTestCase.java]:[wifi]:[9]:method_text:[       hexChars[base++] = hexArray[v & 0x0F];        }        return new String(hexChars);    }}])', 1), ('([84:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[84]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[1]:method_text:[    /**     * Tests the entire connection flow using a SSID pattern in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[2]:method_text:[    /**     * Tests the entire connection flow using a specific BSSID in the specifier.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[1]:method_text:[ing the specifier to set a band.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([13:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[13]:method_text:[the device (that     * can provide internet connectivity) when the request is released.     */   ])', 1), (""([4:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[4]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 1), (""([11:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[11]:method_text:[e networks.     * Note: Can't do end to end tests for such networks in CTS environment.     */   ])"", 1), ('([13:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[13]:method_text:[fiedBy(specifier2)).isTrue();    }    /**     * Test WifiNetworkSpecifier redaction.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[wifi]:[7]:method_text:[e();        } else {            assertThat(redacted.equals(specifier)).isTrue();        }    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPassphraseUnsolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[d_publish,                R.string.aware_data_path_passphrase_unsolicited_publish_info, 0);    }}])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[13]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[tation.contains(identity));        assertFalse(stringRepresentation.contains(password));    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[ases())                .isEqualTo(new String[]{CERTIFICATE_ALIAS1, CERTIFICATE_ALIAS2});    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[    config.setCaPath(CA_PATH);        assertThat(config.getCaPath()).isEqualTo(CA_PATH);    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[qualTo(CLIENT_CERTIFICATE_ALIAS);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[;        assertThat(config.getClientKeyPairAlias()).isEqualTo(CLIENT_CERTIFICATE_ALIAS);    }   ])', 1), ('([8:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[8]:method_text:[ow an IllegalArgumentException!"");        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[PI_CERT_SUITE);        assertThat(config.getWapiCertSuite()).isEqualTo(WAPI_CERT_SUITE);    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[ase2Method(Phase2.NONE);        assertThat(config.isAuthenticationSimBased()).isFalse();    }   ])', 1), ('([7:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[7]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([11:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[11]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([10:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[10]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[wifi]:[3]:method_text:[;        assertEquals(TEST_DECORATED_IDENTITY_PREFIX, config.getDecoratedIdentityPrefix());    }}])', 1), ('([10:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[10]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([8:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[8]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[4]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[2]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[4]:method_text:[et(0).getStatus());    }    /**     * Verify ranging request with aware peer handle.     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[4]:method_text:[  - Failure ratio < threshold (constant)     *   - Result margin < threshold (constant)     */   ])', 1), ('([4:/android/net/wifi/rtt/cts/WifiRttTest.java]:[wifi]:[4]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([84:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[84]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[9]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[6]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[2]:method_text:[etered network     * will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[wifi]:[1]:method_text:[            sTestNetwork, suggestion, mExecutorService, Set.of(NET_CAPABILITY_OEM_PRIVATE));    }}])', 1), ('([18:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[view]:[18]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([26:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[wifi]:[26]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([13:/com/android/cts/verifier/wifi/BaseTestActivity.java]:[button]:[13]:method_text:[end(""\\n"");                mWifiProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([8:/android/net/wifi/cts/app/RetrieveScanResultsAndReturnStatusActivity.java]:[wifi]:[8]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([8:/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java]:[wifi]:[8]:method_text:[pend(String.format(Locale.US, ""%02x"", b & 0xff));        }        return sb.toString();    }   ])', 1), ('([5:/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java]:[wifi]:[5]:method_text:[                        TEST_UPNP_QUERY);        assertEquals(rawRequest, upnpRequest);    }   ])', 1), ('([3:/android/net/wifi/p2p/cts/WifiP2pServiceRequestTest.java]:[wifi]:[3]:method_text:[ntException"");        } catch (IllegalArgumentException ex) {            return;        }    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[_solicited_publish,                R.string.aware_data_path_pmk_solicited_publish_info, 0);    }}])', 1), ('([5:/com/android/cts/verifier/wifi/NetworkRequestSpecificNetworkSpecifierTestActivity.java]:[wifi]:[5]:method_text:[work_request_specific,                R.string.wifi_test_network_request_specific_info, 0);    }}])', 1), ('([86:/com/android/cts/verifier/wifi/testcase/NetworkSuggestionTestCase.java]:[wifi]:[86]:method_text:[        mWifiManager.removeNetworkSuggestions(new ArrayList<>());        super.tearDown();    }}])', 1), ('([7:/android/net/wifi/nl80211/cts/NativeScanResultTest.java]:[wifi]:[7]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([11:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[wifi]:[11]:method_text:[s the string was not logged to Logcat from the activity.     *     * @throws Exception     */   ])', 1), ('([12:/android/wifibroadcasts/cts/WifiBroadcastsHostJUnit4Test.java]:[wifi]:[12]:method_text:[s part of CTS Pre-conditions        device.executeShellCommand(""svc wifi enable; sleep 1"");    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOobPassphraseResponderTestActivity.java]:[wifi]:[2]:method_text:[hrase_responder,                R.string.aware_data_path_oob_passphrase_responder_info, 0);    }}])', 1), ('([33:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[33]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([14:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[14]:method_text:[tring());            }        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([12:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[12]:method_text:[RT, configuration.getAuthType());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([3:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[3]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[5]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiConfigurationTest.java]:[wifi]:[2]:method_text:[ration.setDeletionPriority(1);        assertEquals(1, configuration.getDeletionPriority());    }}])', 1), ('([84:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[84]:method_text:[E_NAME,                WIFI_LOCATION_TEST_APP_RETRIEVE_TRANSPORT_INFO_SERVICE), status);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[2]:method_text:[E_NAME, ACCESS_BACKGROUND_LOCATION);        triggerScanBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[ACKAGE_NAME, ACCESS_FINE_LOCATION);        triggerScanBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[2]:method_text:[ACCESS_BACKGROUND_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[AME, ACCESS_FINE_LOCATION);        retrieveScanResultsBgServiceAndAssertStatusIs(false);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[, ACCESS_FINE_LOCATION);        retrieveConnectionInfoFgActivityAndAssertStatusIs(true);    }   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[2]:method_text:[ESS_BACKGROUND_LOCATION);        retrieveConnectionInfoBgServiceAndAssertStatusIs(true);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[gServiceAndAssertStatusIs(false);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[gActivityAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[2]:method_text:[BgServiceAndAssertStatusIs(true);    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiLocationInfoTest.java]:[wifi]:[1]:method_text:[NAME, ACCESS_FINE_LOCATION);        retrieveTransportInfoBgServiceAndAssertStatusIs(false);    }}])', 1), ('([17:/android/net/wifi/cts/app/RetrieveTransportInfoAndReturnStatusActivity.java]:[wifi]:[17]:method_text:[TATUS_EXTRA, canRetrieveSsidFromTransportInfo(TAG, connectivityManager)));        finish();    }}])', 1), ('([27:/com/android/cts/verifier/wifi/TestUtils.java]:[wifi]:[27]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([3:/android/net/wifi/cts/WifiJUnit3TestBase.java]:[wifi]:[3]:method_text:[alse, UserHandle.getUserHandleForUid(Process.myUid()));        }        super.tearDown();    }}])', 1), ('([24:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[wifi]:[24]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([11:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[wifi]:[11]:method_text:[* Since Easy Connect requires 2 devices, start Easy Connect session and expect an error.     */   ])', 1), ('([7:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[wifi]:[7]:method_text:[sion and expect a     * DPP URI     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([13:/android/net/wifi/cts/EasyConnectStatusCallbackTest.java]:[wifi]:[13]:method_text:[h (IllegalArgumentException expected) {}        uiAutomation.dropShellPermissionIdentity();    }}])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pInfoTest.java]:[wifi]:[4]:method_text:[nfoTest extends AndroidTestCase {    public String TEST_GROUP_OWNER_ADDRESS = ""192.168.43.1"";   ])', 1), ('([5:/android/net/wifi/p2p/cts/WifiP2pInfoTest.java]:[wifi]:[5]:method_text:[o.isGroupOwner);        assertEquals(info.groupOwnerAddress, copiedInfo.groupOwnerAddress);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOpenUnsolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[licited_publish,                R.string.aware_data_path_open_unsolicited_publish_info, 0);    }}])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([12:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[12]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[l#Credential(Credential)} method.     * <p>     * Test the Credential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[edential)} method.     * <p>     * Test the Credential.UserCredential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[redential)} method.     * <p>     * Test the Credential.SimCredential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[   * <p>     * Test that getting a set client certificate chain produces the same value     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[3]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[wifi]:[4]:method_text:[vider.getFriendlyName());        assertEquals(TEST_SERVER_URI, osuProvider.getServerUri());    }}])', 1), ('([70:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[70]:method_text:[t in the CDD. However, the tested values are     *   based on the Wi-Fi Aware protocol.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[5]:method_text:[gitimate. When no resources are used, the value should equal to     *   the capability.     */   ])', 1), ('([4:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[4]:method_text:[Fi Aware availability change we get a broadcast + the API returns     * correct status.     */   ])', 1), ('([13:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[13]:method_text:[reManager.isAvailable());    }    /**     * Validate that can attach to Wi-Fi Aware.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[5]:method_text:[spond to enable/disable and will not result in a new     * MAC address being generated.     */   ])', 1), ('([3:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[3]:method_text:[idate a successful publish discovery session lifetime: publish, update publish, destroy.     */   ])', 1), ('([11:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[11]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[2]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([12:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[12]:method_text:[thin the specified     * time (and validates that the terminate callback is triggered).     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[2]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([2:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[2]:method_text:[an arbitrary peer MAC address. Validate     * that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[5]:method_text:[trary peer     * MAC address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[5]:method_text:[trary peer MAC     * address.     * Validate that receive an onUnavailable() callback.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[6]:method_text:[able());        session.close();    }    /**     * Test WifiAwareNetworkSpecifier.     */   ])', 1), ('([5:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[5]:method_text:[iedBy(anotherNetworkSpecifier));    }    /**     * Test ParcelablePeerHandle parcel.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[wifi]:[6]:method_text:[        assertTrue(mWifiAwareManager.isDeviceAttached());        }        return session;    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[ted_publish,                R.string.aware_data_path_passphrase_solicited_publish_info, 0);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([12:/android/net/wifi/cts/WifiLockTest.java]:[wifi]:[12]:method_text:[WifiLockTest"";    /**     * Verify acquire and release of High Performance wifi locks     */   ])', 1), ('([5:/android/net/wifi/cts/WifiLockTest.java]:[wifi]:[5]:method_text:[L_HIGH_PERF);    }    /**     * Verify acquire and release of Low latency wifi locks     */   ])', 1), ('([16:/android/net/wifi/cts/WifiLockTest.java]:[wifi]:[16]:method_text:[// releasing again after release: but ignored for non-referenced locks        wl.release();    }}])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([70:/android/net/wifi/cts/ScanResultTest.java]:[wifi]:[70]:method_text:[          mMySync.wait(WAIT_MSEC);        return mMySync.expectedState == expectedState;    }   ])', 1), ('([12:/android/net/wifi/cts/ScanResultTest.java]:[wifi]:[12]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([5:/android/net/wifi/cts/ScanResultTest.java]:[wifi]:[5]:method_text:[           }        }    }    /** Test that the copy constructor copies fields correctly. */   ])', 1), ('([3:/android/net/wifi/cts/ScanResultTest.java]:[wifi]:[3]:method_text:[lTo(TEST_FREQUENCY);        assertThat(scanResult2.timestamp).isEqualTo(TEST_TIMESTAMP);    }   ])', 1), ('([19:/android/net/wifi/cts/ScanResultTest.java]:[wifi]:[19]:method_text:[sidQuoted);        assertThat(currentNetwork.frequency).isEqualTo(wifiInfo.getFrequency());    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[olicited_publish,                R.string.aware_data_path_pmk_unsolicited_publish_info, 0);    }}])', 1), ('([10:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[view]:[10]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([15:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[wifi]:[15]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([7:/com/android/cts/verifier/wifiaware/TestListActivity.java]:[button]:[7]:method_text:[_WIFI_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DiscoveryRangingPublishTestActivity.java]:[wifi]:[2]:method_text:[iscovery_ranging_publish,                R.string.aware_discovery_ranging_publish_info, 0);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPmkUnsolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[olicited_publish,                R.string.aware_data_path_pmk_unsolicited_publish_info, 0);    }}])', 1), ('([5:/com/android/cts/verifier/wifi/NetworkRequestUnavailableNetworkSpecifierTestActivity.java]:[wifi]:[5]:method_text:[equest_unavailable,                R.string.wifi_test_network_request_unavailable_info, 0);    }}])', 1), ('([22:/com/android/cts/deviceowner/wificonfigcreator/WifiConfigCreatorActivity.java]:[wifi]:[22]:method_text:[pted while changing wifi settings"", ie);        } finally {            finish();        }    }}])', 1), ('([8:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[wifi]:[8]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/cts/SupplicantStateTest.java]:[wifi]:[2]:method_text:[mport android.test.AndroidTestCase;public class SupplicantStateTest extends AndroidTestCase {   ])', 1), ('([3:/android/net/wifi/cts/SupplicantStateTest.java]:[wifi]:[3]:method_text:[NINITIALIZED));        assertFalse(SupplicantState.isValidState(SupplicantState.INVALID));    }}])', 1), ('([9:/android/net/wifi/cts/app/RetrieveConnectionInfoAndReturnStatusActivity.java]:[wifi]:[9]:method_text:[setResult(RESULT_OK, new Intent().putExtra(SCAN_STATUS_EXTRA, succeeded));        finish();    }}])', 1), ('([147:/android/net/wifi/cts/TestHelper.java]:[wifi]:[147]:method_text:[ult.WIFI_BAND_60_GHZ;        } else {            return ScanResult.UNSPECIFIED;        }    }}])', 1), ('([5:/com/android/cts/verifier/wifi/NetworkRequestPatternNetworkSpecifierTestActivity.java]:[wifi]:[5]:method_text:[etwork_request_pattern,                R.string.wifi_test_network_request_pattern_info, 0);    }}])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([56:/android/net/wifi/cts/WifiInfoTest.java]:[wifi]:[56]:method_text:[.expectedState == STATE_WIFI_CHANGING)                mMySync.wait(WAIT_MSEC);        }    }   ])', 1), ('([65:/android/net/wifi/cts/WifiInfoTest.java]:[wifi]:[65]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiInfoTest.java]:[wifi]:[5]:method_text:[CurrentSecurityType and getCurrentSecurityType work as expected     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/WifiInfoTest.java]:[wifi]:[9]:method_text:[er.build();        assertEquals(WifiInfo.SECURITY_TYPE_SAE, info.getCurrentSecurityType());    }}])', 1), ('([7:/android/net/wifi/nl80211/cts/PnoNetworkTest.java]:[wifi]:[7]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathOpenSolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[solicited_publish,                R.string.aware_data_path_open_solicited_publish_info, 0);    }}])', 1), ('([4:/com/android/cts/verifier/wifi/NetworkSuggestionConnectionFailureTestActivity.java]:[wifi]:[4]:method_text:[_failure,                R.string.wifi_test_network_suggestion_connection_failure_info, 0);    }}])', 1), ('([13:/android/net/wifi/cts/WifiMigrationTest.java]:[wifi]:[13]:method_text:[     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiMigrationTest.java]:[wifi]:[8]:method_text:[    /**     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.     */   ])', 1), ('([6:/android/net/wifi/cts/WifiMigrationTest.java]:[wifi]:[6]:method_text:[eFile(int)} and     * {@link WifiMigration#removeUserConfigStoreFile(int, UserHandle)}.     */   ])', 1), ('([17:/android/net/wifi/cts/WifiMigrationTest.java]:[wifi]:[17]:method_text:[Handle.of(ActivityManager.getCurrentUser()));        } catch (Exception ignore) {        }    }}])', 1), ('([4:/com/android/cts/verifier/wifi/NetworkSuggestionModificationInPlaceTestActivity.java]:[wifi]:[4]:method_text:[place,                R.string.wifi_test_network_suggestion_modification_in_place_info, 0);    }}])', 1), ('([127:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[127]:method_text:[ED, mMySync.expectedP2pState);        removeAllPersistentGroups();        return true;    }   ])', 1), ('([6:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[6]:method_text:[nse));        assertEquals(WifiP2pManager.WIFI_P2P_STATE_ENABLED, mMyResponse.p2pState);    }   ])', 1), ('([16:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[16]:method_text:[ponse.discoveryState);        mWifiP2pManager.stopPeerDiscovery(mWifiP2pChannel, null);    }   ])', 1), ('([27:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[27]:method_text:[  assertTrue(waitForServiceResponse(mMyResponse));        return mMyResponse.deviceName;    }   ])', 1), ('([10:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[10]:method_text:[orServiceResponse(mMyResponse));        });        return mMyResponse.persistentGroups;    }   ])', 1), ('([14:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[14]:method_text:[tNull(persistentGroups);        assertEquals(0, persistentGroups.getGroupList().size());    }   ])', 1), ('([8:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[8]:method_text:[orServiceResponse(mMyResponse));            assertTrue(mMyResponse.success);        });    }   ])', 1), ('([14:/android/net/wifi/cts/ConcurrencyTest.java]:[wifi]:[14]:method_text:[   assertTrue(waitForServiceResponse(mMyResponse));        assertTrue(mMyResponse.success);    }}])', 1), ('([80:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[wifi]:[80]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[wifi]:[3]:method_text:[work using internet connectivity API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[wifi]:[3]:method_text:[peer API which is rejected by user.     * 3. Verify that only one connection is active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[wifi]:[3]:method_text:[ion available for apps.        assertThat(mTestHelper.getNumWifiConnections()).isEqualTo(1);    }])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPassphraseSolicitedPublishAcceptAnyTestActivity.java]:[wifi]:[2]:method_text:[ted_publish,                R.string.aware_data_path_passphrase_solicited_publish_info, 0);    }}])', 1), ('([13:/android/net/wifi/cts/WaitForResultActivity.java]:[wifi]:[13]:method_text:[ONDS)).isTrue();        synchronized (mStatusLock) {            return mStatus;        }    }}])', 1), ('([8:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[wifi]:[8]:method_text:[} object can be serialized and deserialized,     *  while keeping its values unchanged.     */   ])', 1), ('([13:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[wifi]:[13]:method_text:[apa.hashCode());    }    /** Test mapping wifi standard support into channel width support */   ])', 1), ('([11:/android/net/wifi/nl80211/cts/DeviceWiphyCapabilitiesTest.java]:[wifi]:[11]:method_text:[;        assertThat(capa.isChannelWidthSupported(ScanResult.CHANNEL_WIDTH_80MHZ)).isTrue();    }}])', 1), ('([14:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[view]:[14]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([1:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[wifi]:[1]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([5:/com/android/cts/verifier/wifiaware/BaseTestActivity.java]:[button]:[5]:method_text:[        }                mAwareProgress.setVisibility(View.GONE);            }        });    }}])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([6:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[wifi]:[6]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([7:/android/net/wifi/nl80211/cts/RadioChainInfoTest.java]:[wifi]:[7]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([7:/android/net/wifi/cts/ConfigParserTest.java]:[wifi]:[7]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/ConfigParserTest.java]:[wifi]:[1]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([26:/com/android/cts/verifier/wifi/testcase/NetworkRequestTestCase.java]:[wifi]:[26]:method_text:[vityManager.unregisterNetworkCallback(mNetworkCallback);        }        super.tearDown();    }}])', 1), ('([6:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[6]:method_text:[@Override    public void setBuild(IBuildInfo buildInfo) {        mCtsBuild = buildInfo;    }   ])', 1), ('([10:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[10]:method_text:[tMode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_HIGH_PERF);        }    }   ])', 1), ('([10:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[10]:method_text:[ode())                    .isEqualTo(WifiModeEnum.WIFI_MODE_FULL_LOW_LATENCY);        }    }   ])', 1), ('([8:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[8]:method_text:[ckStateChanged().getTag();            assertThat(tag).isEqualTo(EXPECTED_TAG);        }    }   ])', 1), ('([12:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[12]:method_text:[ported.Trigger.RECONNECT_SAME_NETWORK);        assertThat(a1.getNetworkUsed()).isTrue();    }   ])', 1), ('([15:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[15]:method_text:[_SERVICE);            assertThat(a.getScanDurationMillis()).isGreaterThan(0);        }    }   ])', 1), ('([10:/android/cts/statsdatom/wifi/WifiStatsTests.java]:[wifi]:[10]:method_text:[er()).isEqualTo(stateOn);        assertThat(a1.getState().getNumber()).isEqualTo(stateOff);    }}])', 1), ('([18:/com/android/cts/verifier/wifiaware/CallbackUtils.java]:[wifi]:[18]:method_text:[us = ON_RESULTS;            mResults = results;            mBlocker.countDown();        }    }}])', 1), ('([18:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[wifi]:[18]:method_text:[tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(mContext));    }   ])', 1), ('([3:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[wifi]:[3]:method_text:[id onFailure(int reason) {}                    });        } catch (Exception ignore) {}    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[wifi]:[2]:method_text:[;            manager.getTxPacketCounters(""wlan0"");        } catch (Exception ignore) {}    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[wifi]:[2]:method_text:[    } catch (Exception ignore) {}    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([10:/android/net/wifi/nl80211/cts/WifiNl80211ManagerTest.java]:[wifi]:[10]:method_text:[ener));        manager.unregisterCountryCodeChangedListener(testCountryCodeChangeListener);    }}])', 1), ('([30:/com/android/cts/verifier/wifiaware/testcase/DiscoveryBaseTestCase.java]:[wifi]:[30]:method_text:[reSession.close();            mWifiAwareSession = null;        }        super.tearDown();    }}])', 1), ('([1:/com/android/cts/verifier/wifi/CallbackUtils.java]:[wifi]:[1]:method_text:[ mOnCapabilitiesChangedBlocker.await(mCallbackTimeoutInMs, TimeUnit.MILLISECONDS);        }    }}])', 1), ('([10:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[wifi]:[10]:method_text:[ tests if Wifi is not supported        assumeTrue(WifiFeature.isWifiSupported(context));    }   ])', 1), ('([2:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[wifi]:[2]:method_text:[EST_MAC));        assertThat(client.getMacAddress().toByteArray()).isEqualTo(TEST_MAC);    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[wifi]:[4]:method_text:[(client);        assertThat(clientDeserialized.hashCode()).isEqualTo(client.hashCode());    }   ])', 1), ('([4:/android/net/wifi/nl80211/cts/NativeWifiClientTest.java]:[wifi]:[4]:method_text:[tes(new byte[] { 7, 8, 9, 10, 11, 12 }));        assertThat(client2).isNotEqualTo(client);    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[wifi]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([85:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[85]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([20:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[20]:method_text:[* Tests the {@link android.net.wifi.WifiManager#updateWifiUsabilityScore(int, int, int)}     */   ])', 1), ('([6:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[6]:method_text:[#setWifiScoringEnabled(boolean)}     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([14:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[14]:method_text:[* {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(WifiConnectedSessionInfo)}.     */   ])', 1), ('([3:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[3]:method_text:[  /**     * Tests the {@link android.net.wifi.WifiConnectedNetworkScorer#onStart(int)}.     */   ])', 1), ('([26:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[26]:method_text:[r works even after wifi restart.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([38:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[38]:method_text:[  *     * Verifies that the external scorer is not notified for local only connections.     */   ])', 1), ('([10:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[10]:method_text:[oem paid suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[4]:method_text:[ private suggestion connections.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[wifi]:[2]:method_text:[corerForRestrictedSuggestionConnection(                Set.of(NET_CAPABILITY_OEM_PRIVATE));    }}])', 1), ('([4:/com/android/cts/verifier/wifi/NetworkSuggestionSsidBssidTestActivity.java]:[wifi]:[4]:method_text:[stion_ssid_bssid,                R.string.wifi_test_network_suggestion_ssid_bssid_info, 0);    }}])', 1), ('([59:/android/net/wifi/rtt/cts/TestBase.java]:[wifi]:[59]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[wifi]:[4]:method_text:[import android.test.AndroidTestCase;public class WifiP2pDeviceTest extends AndroidTestCase {   ])', 1), ('([2:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[wifi]:[2]:method_text:[   assertFalse(dev.wpsDisplaySupported());        assertFalse(dev.wpsKeypadSupported());    }   ])', 1), ('([2:/android/net/wifi/p2p/cts/WifiP2pDeviceTest.java]:[wifi]:[2]:method_text:[iP2pDevice dev = new WifiP2pDevice();        assertFalse(dev.isServiceDiscoveryCapable());    }}])', 1), ('([18:/com/android/cts/verifier/wifi/BaseTestCase.java]:[wifi]:[18]:method_text:[ when the test failed (test is done).         */        void onTestFailed(String reason);    }}])', 1), ('([2:/com/android/cts/verifier/wifiaware/DataPathPmkSolicitedPublishTestActivity.java]:[wifi]:[2]:method_text:[_solicited_publish,                R.string.aware_data_path_pmk_solicited_publish_info, 0);    }}])', 1), ('([10:/com/android/cts/verifier/wifi/TestListActivity.java]:[view]:[10]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([33:/com/android/cts/verifier/wifi/TestListActivity.java]:[wifi]:[33]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([8:/com/android/cts/verifier/wifi/TestListActivity.java]:[button]:[8]:method_text:[OURCE_SETTINGS));                    }                });        builder.create().show();    }}])', 1), ('([4:/com/android/cts/verifier/wifi/NetworkSuggestionSsidTestActivity.java]:[wifi]:[4]:method_text:[etwork_suggestion_ssid,                R.string.wifi_test_network_suggestion_ssid_info, 0);    }}])', 1), ('([5:/com/android/cts/verifier/wifi/NetworkRequestInvalidCredentialNetworkSpecifierTestActivity.java]:[wifi]:[5]:method_text:[_credential,                R.string.wifi_test_network_request_invalid_credential_info, 0);    }}])', 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), (""([54:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[54]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([14:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[14]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), ('([47:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[47]:method_text:[ is deserialized correctly from AOSP     * legacy supplicant/ipconf backup data format.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[9]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.0 format.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[9]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.1 format.     */   ])', 1), ('([9:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[9]:method_text:[   * Verify that 3 network configuration is deserialized correctly from AOSP 1.2 format.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[wifi]:[1]:method_text:[tions(),                () -> mWifiManager.restoreBackupData(loadResourceFile(V1_2_FILE)));    }}])', 1), ('([3:/android/net/wifi/cts/WifiJUnit4TestBase.java]:[wifi]:[3]:method_text:[User(                    false, UserHandle.getUserHandleForUid(Process.myUid()));        }    }}])', 1), ('([76:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[76]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1), ('([3:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[3]:method_text:[y requested for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 1), ('([2:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[2]:method_text:[y requested for platform to connect).     * 3. Verify that only 1 connection is active.     */   ])', 1), ('([2:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[wifi]:[2]:method_text:[on available for apps.        assertThat(mTestHelper.getNumWifiConnections()).isEqualTo(1);    }}])', 1), ('([8:/android/wifibroadcasts/app/WifiBroadcastsDeviceActivity.java]:[wifi]:[8]:method_text:[stered "" + action);        Toast.makeText(mContext, ""Started"", Toast.LENGTH_SHORT).show();    }}])', 1), ('([7:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[wifi]:[7]:method_text:[ first initialized. Calling this API at     * any other time should throw an exception.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiFrameworkInitializerTest.java]:[wifi]:[5]:method_text:[            + ""SystemServiceRegistry!"");        } catch (IllegalStateException expected) {}    }}])', 1), ('([7:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[wifi]:[7]:method_text:[T_OWNER_FREQ = 2447;    private static final String TEST_DEVICE_ADDRESS = ""aa:bb:cc:dd:ee:ff"";   ])', 1), ('([6:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[wifi]:[6]:method_text:[);        assertEquals(copiedConfig.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[wifi]:[4]:method_text:[R_BAND);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_PERSISTENT);    }   ])', 1), ('([4:/android/net/wifi/p2p/cts/WifiP2pConfigTest.java]:[wifi]:[4]:method_text:[OWNER_FREQ);        assertEquals(config.getNetworkId(), WifiP2pGroup.NETWORK_ID_TEMPORARY);    }}])', 1), ('([25:/com/android/cts/verifier/wifiaware/testcase/DataPathInBandTestCase.java]:[wifi]:[25]:method_text:[    + ""finish"");                return false;            }        }        return true;    }}])', 1)]"	""	""	"[('wifi', 381), ('passpoint', 57), ('view', 4), ('button', 4)]"	"[('[com.android.cts.verifier.wifi.BaseTestActivity setPassFailButtonClickListeners None]', 3), ('[com.android.cts.verifier.wifiaware.TestListActivity setPassFailButtonClickListeners None]', 3), ('[com.android.cts.verifier.wifiaware.BaseTestActivity setPassFailButtonClickListeners None]', 3), ('[com.android.cts.verifier.wifi.TestListActivity setPassFailButtonClickListeners None]', 3), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 2), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 2), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdInfo CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiCoupledSink CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdR2Info CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pWfdInfoTest testWifiP2pWfdDeviceInfo CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathOutOfBandTestCase executeTest None]', 1), ('[android.net.wifi.cts.MulticastLockTest testMulticastLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.TriggerScanAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerScanWhenWifiOffLocationTurnedOn CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystemShouldFailNoPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRestartWifiSubsystem CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiManagerProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiScanTimestamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConvertBetweenChannelFrequencyMhz CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSignal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDeprecatedApis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetSupportedFeatures CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testRemoveNonCallerConfiguredNetworksNotAllowed CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkResultCreation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedNotAllowedForNormalApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedBadInput CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedFailureBadEnterpriseConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotSingleRequestByApps CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithConfigBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkStackPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSettingsPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkSetupWizardPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkManagedProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiSetDeviceMobilityStatePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testNetworkCarrierProvisioningPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testUpdateWifiUsabilityStatsScorePermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiDisabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScreenOffDoesNotTurnOffWifiScanningWhenWifiEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetGetSoftApConfigurationAndSoftApCapabilityCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartTetheredHotspotWithChannelConfigAndSoftApStateAndInfoCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithNetworkId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testConnectWithWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSave CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testForget CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetFactoryMacAddresses CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsApMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsConnectedMacRandomizationSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPreferredNetworkOffloadSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPnoScan CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsTdlsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsStaApConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTrafficStateCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanAlwaysAvailable CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testScanThrottleEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAutoWakeUpEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testVerboseLoggingEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLogging CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeNonUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetVerboseLoggingShowKeyModeUserBuild CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFactoryReset CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testWifiNetworkConnectionStatistics CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartAndStopRestrictingAutoJoinToSubscriptionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCountryCode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetCurrentNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaeSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SuiteBSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsEnhancedOpenSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs5GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs6GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetTdlsEnabledWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSuggestionBuilderNonPersistentRandomization CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllWifiConfigForMatchedNetworkSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetMatchingScanResults CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testDisableEphemeralNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinGlobal CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWapiSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaePublicKeySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWpa3SaeH2eSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsWifiDisplayR2Supported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsP2pSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIs60GhzBandSupportedOnSOrNewer CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCoexMethodsShouldFailNoPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testListenOnCoexUnsafeChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsDecoratedIdentitySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetCarrierNetworkOffloadEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedUsableChannelsOnROrOlder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetAllowedChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddRemoveSuggestionUserApprovalStatusListener CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.BaseTestCase executeTest None]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithSpecificSsid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithSsidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithSpecificBssid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testConnectionWithBssidPattern CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testUserRejectionWithSpecificSsid CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testWifiBandInNetworkCallback CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testEnsureAutoConnectToInternetConnectionOnRelease CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa2Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise192bit CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testRedact CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testEnterpriseConfigDoesNotPrintPassword CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaCertificateAliases CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetCaPath CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientCertificateAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetClientKeyPairAlias CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetOcsp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testGetSetWapiCertSuite CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsAuthenticationSimBased CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithMacAddress CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testAwareRttWithPeerHandle CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithNonEnterpriseNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidAndOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPaidNetCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testConnectSuggestionFailureWithOemPrivateNetCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveScanResultsAndReturnStatusActivity isEmpty None]', 1), ('[android.net.wifi.p2p.cts.WifiP2pServiceRequestTest testValidRawRequest CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pServiceRequestTest testInvalidRawRequest CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkSuggestionTestCase isEmpty None]', 1), ('[android.wifibroadcasts.cts.WifiBroadcastsHostJUnit4Test testCleanLogcat CtsWifiBroadcastsHostTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testWifiConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailurePsk8021X CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailure8021xEapSae CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testSetGetDeletionPriority CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanTriggerNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testScanResultsRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testConnectionInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForForegroundActivityWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalAllowedForBackgroundServiceWithBackgroundLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLocationInfoTest testTransportInfoRetrievalNotAllowedForBackgroundServiceWithFineLocationPermission CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveTransportInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.WifiJUnit3TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testConfiguratorInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeInitiatorOnFailure CtsWifiTestCases]', 1), ('[android.net.wifi.cts.EasyConnectStatusCallbackTest testEnrolleeResponderUriGeneration CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pInfoTest testWifiP2pInfoNoGroup CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pInfoTest testWifiP2pInfoGroupOwner CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pInfoTest testWifiP2pInfoGroupClient CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testHomeSpCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCertCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetCertificate CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialClientCertificateChain CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialSetGetClientPrivateKey CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testOsuProviderGetters CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest waitForListener CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testCharacteristics CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAvailableAwareResources CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAvailabilityStatusChange CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachNoIdentity CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAttachDiscoveryAddressChanges CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeDiscoverySuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSendMessageFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathOpenOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPassphraseOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testDataPathPmkOutOfBandFail CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testWifiAwareNetworkSpecifier CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testAwareResourcesConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLockTest testHiPerfWifiLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiLockTest testLowLatencyWifiLock CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultTimeStamp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultConstructors CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultMatchesWifiInfo CtsWifiTestCases]', 1), ('[com.android.cts.deviceowner.wificonfigcreator.WifiConfigCreatorActivity finish None]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks CtsWifiTestCases]', 1), ('[android.net.wifi.cts.SupplicantStateTest testIsValidState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.app.RetrieveConnectionInfoAndReturnStatusActivity finish None]', 1), ('[android.net.wifi.cts.TestHelper isEmpty CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoCurrentSecurityType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettings CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationConfigStore CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testConcurrency CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testRequestDiscoveryState CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testRequestNetworkInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testSetDeviceName CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testPersistentGroupOperation CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testP2pListening CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest testP2pService CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testConnectToPeerPeerNetworkWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testConnectToInternetNetworkWhenConnectedToPeerPeerNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest testPeerToPeerConnectionRejectWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WaitForResultActivity isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest isTrue CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.DeviceWiphyCapabilitiesTest testMappingWifiStandardIntoChannelWidthSupport CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.testcase.NetworkRequestTestCase isEmpty None]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests isNotNull CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockHighPerf CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiLockLowLatency CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiMulticastLock CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiReconnect CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsScanAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.cts.statsdatom.wifi.WifiStatsTests testWifiScanLogsStateChangedAtoms CtsStatsdAtomHostTestCases]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSendMgmtFrame CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testGetTxPacketCounters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testSetOnServiceDeadCallback CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.WifiNl80211ManagerTest testCountryCodeChangeListener CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DiscoveryBaseTestCase IdentityListenerSingleShot None]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.NativeWifiClientTest testEquals CtsWifiTestCases]', 1), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testWifiUsabilityStatsEntry CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testUpdateWifiUsabilityScore CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiScoringEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionInfo CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testConnectedNetworkScorerWithSessionId CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerOnSubsystemRestart CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForSpecifierConnection CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPaidSuggestionConnection CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest testSetWifiConnectedNetworkScorerForOemPrivateSuggestionConnection CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pDeviceTest testDefaultWpsMethodSupportCheck CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pDeviceTest testDefaultDeviceCapabilityCheck CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifi.BaseTestCase executeTest None]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromLegacyBackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_0BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_1BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testRestoreFromV1_2BackupFormat CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiJUnit4TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPaidSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToInternetNetworkWhenConnectedToOemPrivateSuggestion CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPaidSuggestionFailureWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToOemPrivateSuggestionFailureWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPaidNetCapabilityWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest testConnectToSuggestionFailureWithOemPrivateNetCapabilityWhenConnectedToInternetNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest registerServiceWrappers CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiFrameworkInitializerTest testRegisterServiceWrappers_failsWhenCalledOutsideOfSystemServiceRegistry CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForPersist CtsWifiTestCases]', 1), ('[android.net.wifi.p2p.cts.WifiP2pConfigTest testWifiP2pConfigBuilderForNonPersist CtsWifiTestCases]', 1), ('[com.android.cts.verifier.wifiaware.testcase.DataPathInBandTestCase executeTest None]', 1)]"	""	""	""	""	""	""	""	""	""
