"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"7.4.2.4  . Wi"	"7.4.2.4"	"C-1-6"	"7.4.2.4/C-1-6"	"07040204.670106"	"""C-1-6] MUST support at least the following subset of device provisioning protocols as defined in the Wi-Fi Alliance Passpoint R2: EAP-TTLS authentication and SOAP-XML."""	""	"wifi"	"EAP TTLS SOAP XML"	"passpoint"	""	""	""	"[('android.appwidget.cts.AppWidgetTest', 20), ('com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest', 10), ('android.appwidget.cts.DarkTextThemeTest', 4), ('android.car.cts.CarAppFocusManagerTest', 4), ('android.widget.cts.ViewFlipperTest', 2), ('android.security.net.config.cts.NestedDomainConfigTest', 2), ('android.cts.backup.includeexcludeapp.IncludeExcludeTest', 2), ('android.graphics.drawable.cts.ColorDrawableTest', 2), ('android.widget.cts.ZoomButtonTest', 2), ('com.android.cts.releaseparser.XmlParser', 1), ('android.content.cts.util.XmlUtils', 1), ('android.atrace.cts.AtraceHostTestBase', 1), ('android.signature.cts.XmlApiParser', 1), ('android.permission.cts.FileSystemPermissionTest', 1), ('android.os.cts.NoExecutePermissionTest', 1), ('android.media.cts.RingtoneManagerTest', 1)]"	"[('setUp', 6), ('length', 5), ('setupFiles', 4), ('setup', 3), ('getDevice', 3), ('getInstrumentation', 3), ('getTargetContext', 3), ('pressHome', 3), ('getDepth', 2), ('next', 2), ('toString', 2), ('getActivity', 2), ('tearDown', 2), ('getClassName', 2), ('getContext', 2), ('getFilesDir', 2), ('getDataDir', 2), ('hasAppWidgets', 1), ('getType', 1), ('setAdditionalInfo', 1), ('decode', 1), ('readMapXml', 1), ('FastXmlSerializer', 1), ('name', 1), ('endDocument', 1), ('requireApk', 1), ('printStackTrace', 1), ('turnScreenOn', 1), ('getIDevice', 1), ('newInstance', 1), ('getAttributeCount', 1), ('newPullParser', 1), ('newInputStream', 1), ('getName', 1), ('getText', 1), ('getNamespace', 1), ('getLineNumber', 1), ('getColumnNumber', 1), ('getPositionDescription', 1), ('trySplit', 1), ('estimateSize', 1), ('getSimpleName', 1), ('getCar', 1), ('getActiveAppTypes', 1), ('setupCrossProfileApps', 1), ('wakeupDeviceAndPressHome', 1), ('wakeUp', 1), ('pressMenu', 1), ('readTargetUser', 1), ('getArguments', 1), ('getMediaDirString', 1)]"	"[('CtsAppWidgetTestCases', 24), ('CtsWidgetTestCases', 4), ('CtsCarTestCases', 4), ('CtsNetSecConfigNestedDomainConfigTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsContentTestCases', 1), ('CtsAtraceHostTestCases', 1), ('CtsPermissionTestCases', 1), ('CtsMediaTestCases', 1)]"	""	"android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest"	"getContext"	"CtsWifiTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiManagerTest.java', 29), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSuggestionTest.java', 26), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiHotspot2Test.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiEnterpriseConfigTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/PpsMoParserTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/WifiRttTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConfigParserTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiConfigurationTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiNetworkSpecifierTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/aware/cts/SingleDeviceTest.java', 2), ('/home/gpoor/cts-12-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/wifi/TestUtils.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ScanResultTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiInfoTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/passpoint/cts/HomeSpTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConnectedNetworkScorerTest.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/rtt/cts/TestBase.java', 1), ('/home/gpoor/cts-12-source/cts/tests/tests/wifi/src/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java', 1)]"	"[('(7,EAP,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(25,passpoint,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(2,TTLS,/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java)', 1), ('(32,EAP,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(97,passpoint,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,XML,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(2,TTLS,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(1,SOAP,/android/net/wifi/cts/WifiManagerTest.java)', 1), ('(4,EAP,/android/net/wifi/cts/WifiNetworkSpecifierTest.java)', 1), ('(61,EAP,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(4,TTLS,/android/net/wifi/cts/WifiEnterpriseConfigTest.java)', 1), ('(5,EAP,/android/net/wifi/rtt/cts/WifiRttTest.java)', 1), ('(36,EAP,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(31,passpoint,/android/net/wifi/cts/WifiNetworkSuggestionTest.java)', 1), ('(12,EAP,/android/net/wifi/cts/WifiConfigurationTest.java)', 1), ('(1,EAP,/com/android/cts/verifier/wifi/TestUtils.java)', 1), ('(17,EAP,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(53,passpoint,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,XML,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(2,TTLS,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(1,SOAP,/android/net/wifi/cts/WifiHotspot2Test.java)', 1), ('(12,TTLS,/android/net/wifi/aware/cts/SingleDeviceTest.java)', 1), ('(1,passpoint,/android/net/wifi/cts/ScanResultTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiInfoTest.java)', 1), ('(2,EAP,/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java)', 1), ('(1,passpoint,/android/net/wifi/passpoint/cts/HomeSpTest.java)', 1), ('(3,EAP,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(13,passpoint,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(1,XML,/android/net/wifi/cts/ConfigParserTest.java)', 1), ('(6,EAP,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(8,passpoint,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(6,XML,/android/net/wifi/cts/PpsMoParserTest.java)', 1), ('(1,EAP,/android/net/wifi/cts/ConnectedNetworkScorerTest.java)', 1), ('(2,EAP,/android/net/wifi/rtt/cts/TestBase.java)', 1), ('(2,EAP,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,passpoint,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(3,XML,/android/net/wifi/cts/WifiBackupRestoreTest.java)', 1), ('(2,EAP,/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java)', 1)]"	"[('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 10), ('([4:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[4]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 5), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 3), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[EAP]:[2]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([5:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[EAP]:[5]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([3:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[3]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ generated is the same for two instances with different     * HomeSp node but same FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[rated is different for two instances with the same     * HomeSp node but different FQDN     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[ifier generated is different for two instances with different     * SIM Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[erated is different for two instances with different     * Realm in the Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[o instances with different     * password and same username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[s different for two instances with different     * username in the User Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[fier generated is different for two instances with different     * Cert Credential node     */   ])', 1), ('([2:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[2]:method_text:[prefix methods work as expected.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([6:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[passpoint]:[6]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[TTLS]:[1]:method_text:[   /**     * Verify that the unique identifier generated is identical for two instances     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/PasspointConfigurationTest.java]:[TTLS]:[1]:method_text:[etClientCertificateChain(null);        cred.setClientPrivateKey(null);        return cred;    }}])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[3]:method_text:[ith proper permissions.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[3]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[5]:method_text:[uration)} works     * with merging types properly when the calling app has permissions.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[2]:method_text:[spot request at a time.     *     * Note: Location mode must be enabled for this test.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[5]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[4]:method_text:[rectly.     * @throws Exception     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[5]:method_text:[tap capability callback to test different     * configuration.     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[2]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[EAP]:[3]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Verify that changing the mac randomization setting of a Passpoint configuration.     */   ])', 1), ('([21:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[21]:method_text:[ce it would give those     * apps extremely broad access to connectivity functionality.     */   ])', 1), ('([7:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[7]:method_text:[ing it once it is added, and comparing it     * to the local copy of the configuration.     */   ])', 1), ('([18:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[18]:method_text:[ Use API change     * metered override, verify Passpoint configuration changes with it.     */   ])', 1), ('([19:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[19]:method_text:[}     * starts a subscription provisioning, and confirm a status callback invoked once.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[**     * Tests {@link WifiManager#setTdlsEnabled(InetAddress, boolean)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#allowAutojoinPasspoint(String, boolean)}.     */   ])', 1), ('([12:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[12]:method_text:[        }    }    /**     * Tests {@link WifiManager#allowAutojoinGlobal(boolean)}.     */   ])', 1), ('([4:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[4]:method_text:[ if the release is older than S.     */    @SdkSuppress(maxSdkVersion = Build.VERSION_CODES.R)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[is not even given to shell user.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[    }    /**     * Tests {@link WifiManager#flushPasspointAnqpCache)} does not crash.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[2]:method_text:[    /**     * Tests {@link WifiManager#isDecoratedIdentitySupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[1]:method_text:[eature is enabled on the device.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), (""([3:/android/net/wifi/cts/WifiManagerTest.java]:[passpoint]:[3]:method_text:[emove SuggestionUserApprovalStatusListener. And verify the listener's     * stickiness.     */   ])"", 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[XML]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[TTLS]:[1]:method_text:[ivileged(WifiConfiguration)} works properly when the     * calling app has permissions.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[TTLS]:[1]:method_text:[     * Tests {@link WifiManager#isPasspointTermsAndConditionsSupported)} does not crash.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiManagerTest.java]:[SOAP]:[1]:method_text:[);        }        return -1;    }    /**     * Test creation of WifiManager Lock.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[EAP]:[2]:method_text:[    /**     * Tests the entire connection flow using a specific SSID in the specifier.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSpecifierTest.java]:[EAP]:[2]:method_text:[fiedBy(specifier2)).isTrue();    }    /**     * Test WifiNetworkSpecifier redaction.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[1]:method_text:[ext().getPackageManager().hasSystemFeature(                PackageManager.FEATURE_WIFI);    }   ])', 1), ('([20:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[20]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([10:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[10]:method_text:[ase2Method(Phase2.NONE);        assertThat(config.isAuthenticationSimBased()).isFalse();    }   ])', 1), ('([4:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[4]:method_text:[getPassword()).isEqualTo(PASSWORD);        assertThat(copy.getRealm()).isEqualTo(REALM);    }   ])', 1), ('([9:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[9]:method_text:[tEapMethod(Eap.AKA);        assertFalse(noValidationConfig.isEapMethodServerCertUsed());    }   ])', 1), ('([3:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[3]:method_text:[            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.PEAP);    }   ])', 1), ('([1:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[1]:method_text:[{            return;        }        testIsEnterpriseConfigServerCertEnabled(Eap.TLS);    }   ])', 1), ('([13:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[EAP]:[13]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[TTLS]:[2]:method_text:[JECT_MATCH);        assertTrue(config.getDomainSuffixMatch().equals(DOM_SUBJECT_MATCH));    }   ])', 1), ('([2:/android/net/wifi/cts/WifiEnterpriseConfigTest.java]:[TTLS]:[2]:method_text:[ectMatch);        return config;    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[EAP]:[1]:method_text:[st contains more range operations than allowed (by API) that we     * get an exception.     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/WifiRttTest.java]:[EAP]:[2]:method_text:[oo ""                + ""many peers"");    }    /**     * Verify ResponderLocation API     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[EAP]:[1]:method_text:[   }    /**     * Verify ranging request with aware peer Mac address and peer handle.     */   ])', 1), ('([1:/android/net/wifi/rtt/cts/WifiRttTest.java]:[EAP]:[1]:method_text:[Number of successful measurements is 0"", 0, numSuccessful[i]);                }         */    }}])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[1]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[rprise     * network will fail.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[ a network using suggestion API.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([5:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[5]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([1:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[1]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([7:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[7]:method_text:[   }    /**     * Tests {@link android.net.wifi.WifiNetworkSuggestion.Builder} class.     */   ])', 1), ('([8:/android/net/wifi/cts/WifiNetworkSuggestionTest.java]:[passpoint]:[8]:method_text:[etworkSuggestion.Builder} class.     */    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([4:/android/net/wifi/cts/WifiConfigurationTest.java]:[EAP]:[4]:method_text:[Manager = (WifiManager) mContext                .getSystemService(Context.WIFI_SERVICE);    }   ])', 1), ('([6:/android/net/wifi/cts/WifiConfigurationTest.java]:[EAP]:[6]:method_text:[RT, configuration.getAuthType());    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([2:/android/net/wifi/cts/WifiConfigurationTest.java]:[EAP]:[2]:method_text:[ {            // empty        }    }    @SdkSuppress(minSdkVersion = Build.VERSION_CODES.S)   ])', 1), ('([1:/com/android/cts/verifier/wifi/TestUtils.java]:[EAP]:[1]:method_text:[er::new, StringBuilder::appendCodePoint, StringBuilder::append)                .toString();    }}])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[2]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[1]:method_text:[edential)} method.     * <p>     * Test the Credential.UserCredential copy constructor     */   ])', 1), ('([3:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[3]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[2]:method_text:[}  method.     * <p>     * Test that getting a set certificate produces the same value     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[EAP]:[9]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([2:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[2]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tion#getSubscriptionExpirationTimeMillis()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[onfiguration#getUniqueId()} method.     * <p>     * Test unique identifier is not null     */   ])', 1), ('([11:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[11]:method_text:[PasspointConfiguration#isAutojoinEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[tConfiguration#isMacRandomizationEnabled()} method.     * <p>     * Test default value     */   ])', 1), ('([5:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[5]:method_text:[ PasspointConfiguration#isOsuProvisioned()} method.     * <p>     * Test default value     */   ])', 1), ('([7:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[7]:method_text:[nfiguration)} method.     * <p>     * Test the PasspointConfiguration copy constructor     */   ])', 1), ('([9:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[9]:method_text:[{@link HomeSp#HomeSp(HomeSp)} method.     * <p>     * Test the HomeSp copy constructor     */   ])', 1), ('([4:/android/net/wifi/cts/WifiHotspot2Test.java]:[passpoint]:[4]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[XML]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[TTLS]:[1]:method_text:[  * method.     * <p>     * Test the Credential.CertificateCredential copy constructor     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[TTLS]:[1]:method_text:[ <p>     * Test that getting a set friendly name and server URI produces the same value     */   ])', 1), ('([1:/android/net/wifi/cts/WifiHotspot2Test.java]:[SOAP]:[1]:method_text:[asspointConfiguration#getMeteredOverride()} method.     * <p>     * Test default value     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[TTLS]:[6]:method_text:[ssful subscribe discovery session lifetime: subscribe, update subscribe,     * destroy.     */   ])', 1), ('([6:/android/net/wifi/aware/cts/SingleDeviceTest.java]:[TTLS]:[6]:method_text:[ device cannot send to a real peer -     * validate that sending to a bogus peer fails.     */   ])', 1), ('([1:/android/net/wifi/cts/ScanResultTest.java]:[passpoint]:[1]:method_text:[           break;                }            }        }   }    @VirtualDeviceNotSupported   ])', 1), ('([3:/android/net/wifi/cts/WifiInfoTest.java]:[passpoint]:[3]:method_text:[ that was set, and that     * calling build multiple times returns different instances.     */   ])', 1), ('([2:/android/net/wifi/cts/MultiStaConcurrencyWifiNetworkSpecifierTest.java]:[EAP]:[2]:method_text:[ to a network using peer to peer API.     * 3. Verify that both connections are active.     */   ])', 1), ('([1:/android/net/wifi/passpoint/cts/HomeSpTest.java]:[passpoint]:[1]:method_text:[JUnit3TestBase {    /**     * Verify that the anyOis set and get APIs work as expected     */   ])', 1), ('([3:/android/net/wifi/cts/ConfigParserTest.java]:[EAP]:[3]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([9:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[9]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([4:/android/net/wifi/cts/ConfigParserTest.java]:[passpoint]:[4]:method_text:[ifi-config"", configStr.getBytes());        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([1:/android/net/wifi/cts/ConfigParserTest.java]:[XML]:[1]:method_text:[ file is parsed successfully with the matching contents.     *     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[EAP]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([6:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[6]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([2:/android/net/wifi/cts/PpsMoParserTest.java]:[passpoint]:[2]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([5:/android/net/wifi/cts/PpsMoParserTest.java]:[XML]:[5]:method_text:[Parse and verify all supported fields under PPS MO tree.     *     * @throws Exception     */   ])', 1), ('([1:/android/net/wifi/cts/PpsMoParserTest.java]:[XML]:[1]:method_text:[PpsMoParser.parseMoText(ppsMoTree);        assertTrue(actualConfig.equals(expectedConfig));    }}])', 1), ('([1:/android/net/wifi/cts/ConnectedNetworkScorerTest.java]:[EAP]:[1]:method_text:[ilityStatsEntry} retrieved from     * {@link WifiManager.OnWifiUsabilityStatsListener}.     */   ])', 1), ('([2:/android/net/wifi/rtt/cts/TestBase.java]:[EAP]:[2]:method_text:[RE_SCAN_MILLIS);            }            scanCount++;        }        return bestTestAp;    }}])', 1), (""([2:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[EAP]:[2]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[passpoint]:[3]:method_text:[retrieveSoftApBackupData()} &     * {@link WifiManager#restoreSoftApBackupData(byte[])}     */   ])', 1), (""([3:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[XML]:[3]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.     */   ])"", 1), ('([2:/android/net/wifi/cts/MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest.java]:[EAP]:[2]:method_text:[work using restricted suggestion API.     * 3. Verify that both connections are active.     */   ])', 1)]"	""	""	"[('passpoint', 57), ('EAP', 53), ('TTLS', 10), ('XML', 6), ('SOAP', 2)]"	"[('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testSetGetDecoratedIdentityPrefix CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testInsecureEnterpriseConfigurationsRejected CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest ProvisioningCallback CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialGetClientPrivateKey CtsWifiTestCases]', 3), ('[android.net.wifi.cts.PpsMoParserTest getRoamingConsortiumOis CtsWifiTestCases]', 3), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedFailureBadEnterpriseConfig CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiManagerTest testIsWifiStandardsSupported CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testSettersAndGetters CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTTLS CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest isLocationEnabled CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiPassphrase CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithStandardApi CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3EnterpriseWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBRsaCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Enterprise192bitWithSuiteBEccCerts CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWapiEnterprise CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testGetUniqueId CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiHotspot2Test testUserCredentialCopyConstructor CtsWifiTestCases]', 2), ('[android.net.wifi.cts.PpsMoParserTest testParsePPSMOTree CtsWifiTestCases]', 2), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 2), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testEqualUniqueId CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameHomeSpSameFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentHomeSpDifferentFqdn CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentSimCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentRealm CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdSameUserInUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentUserCredential CtsWifiTestCases]', 1), ('[android.net.wifi.passpoint.cts.PasspointConfigurationTest testUniqueIdDifferentCertCredential CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testCalculateSignalLevel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddNetworkPrivilegedMergingTypeSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMaxNumberOfNetworkSuggestionsPerApp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testTetheredBridgedApWifiForcedChannel CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartLocalOnlyHotspotWithNullBssidConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testMacRandomizationSettingPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAddOrUpdatePasspointConfiguration CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testSetPasspointMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testStartSubscriptionProvisioning CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoin CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testAllowAutojoinPasspoint CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsMultiStaConcurrencySupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testIsPasspointTermsAndConditionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testManageCountryCodeMethodsFailWithoutPermissions CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testFlushPasspointAnqpCache CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testGetUsableChannels CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiManagerTest testPasspointCapability CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSpecifierTest testBuilderForWpa3Enterprise192bit CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsAuthenticationSimBased CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertNotEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithPeap CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiEnterpriseConfigTest testIsEnterpriseConfigServerCertEnabledWithTls CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTest11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRequestTooLarge CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestApWithResponderLocation CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.WifiRttTest testRangingToTestNon11mcAp CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithCarrierMergedNetworkWithUnmeteredNetwork CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa2Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3Passphrase CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithWpa3SaeH2eOnlyMode CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiNetworkSuggestionTest testBuilderWithPasspointConfig CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthType CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiConfigurationTest testGetAuthTypeFailure8021xEapSae CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testSimCredentialCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetMeteredOverride CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testGetSubscriptionExpirationTimeMillis CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsAutojoinEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsMacRandomizationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testIsOsuProvisioned CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiHotspot2Test testPasspointConfigurationCopyConstructor CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testPublishLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.aware.cts.SingleDeviceTest testSubscribeLimitedTtlSuccess CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ScanResultTest testScanResultProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiInfoTest testWifiInfoProperties CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyWifiNetworkSpecifierTest isStaConcurrencyForLocalOnlyConnectionsSupported CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConfigParserTest testParseConfigFile CtsWifiTestCases]', 1), ('[android.net.wifi.cts.ConnectedNetworkScorerTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.rtt.cts.TestBase isLocationEnabled CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreBackupData CtsWifiTestCases]', 1), ('[android.net.wifi.cts.MultiStaConcurrencyRestrictedWifiNetworkSuggestionTest isStaConcurrencyForRestrictedConnectionsSupported CtsWifiTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
