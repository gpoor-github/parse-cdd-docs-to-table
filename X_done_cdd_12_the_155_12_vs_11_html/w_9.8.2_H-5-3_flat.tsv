"Section"	"section_id"	"req_id"	"full_key"	"manual_search_terms"	"requirement"	"Test Availability"	"class_def"	"method"	"module"	"matched_terms"	"methods_string"	"file_name"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"Test Level"
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"SELinuxNeverallowRulesTest"	"isSepolicySplit"	""	"1: system"	"public void test#!/usr/bin/env python

src_header = """"""/*
 *.
 */

package android.security.cts;

import android.platform.test.annotations.RestrictedBuildTest;
import com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper;
import com.android.compatibility.common.util.PropertyUtil;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;
import com.android.tradefed.testtype.IDeviceTest;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;

/**
 * Neverallow Rules SELinux tests.
 */
public class SELinuxNeverallowRulesTest extends DeviceTestCase implements IBuildReceiver, IDeviceTest {
    private File sepolicyAnalyze;
    private File devicePolicyFile;
    private File deviceSystemPolicyFile;

    private IBuildInfo mBuild;
    private int mVendorSepolicyVersion = -1;
    private int mSystemSepolicyVersion = -1;

    /**
     * A reference to the device under test.
     */
    private ITestDevice mDevice;

    /**
     * {@inheritDoc}
     */
    @Override
    public void setBuild(IBuildInfo build) {
        mBuild = build;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setDevice(ITestDevice device) {
        super.setDevice(device);
        mDevice = device;
    }
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(mBuild);
        sepolicyAnalyze = android.security.cts.SELinuxHostTest.copyResourceToTempFile(""/sepolicy-analyze"");
        sepolicyAnalyze.setExecutable(true);

        devicePolicyFile = android.security.cts.SELinuxHostTest.getDevicePolicyFile(mDevice);

        if (isSepolicySplit()) {
            deviceSystemPolicyFile =
                    android.security.cts.SELinuxHostTest.getDeviceSystemPolicyFile(mDevice);

            // Caching this variable to save time.
            if (mVendorSepolicyVersion == -1) {
                mVendorSepolicyVersion =
                        android.security.cts.SELinuxHostTest.getVendorSepolicyVersion(mBuild, mDevice);
            }
            if (mSystemSepolicyVersion == -1) {
                mSystemSepolicyVersion =
                        android.security.cts.SELinuxHostTest.getSystemSepolicyVersion(mBuild);
            }
        }
    }

    private boolean isFullTrebleDevice() throws Exception {
        return android.security.cts.SELinuxHostTest.isFullTrebleDevice(mDevice);
    }

    private boolean isDeviceLaunchingWithR() throws Exception {
        return PropertyUtil.getFirstApiLevel(mDevice) > 29;
    }

    private boolean isDeviceLaunchingWithS() throws Exception {
        return PropertyUtil.getFirstApiLevel(mDevice) > 30;
    }

    private boolean isCompatiblePropertyEnforcedDevice() throws Exception {
        return android.security.cts.SELinuxHostTest.isCompatiblePropertyEnforcedDevice(mDevice);
    }

    private boolean isSepolicySplit() throws Exception {
        return android.security.cts.SELinuxHostTest.isSepolicySplit(mDevice);
    }
""""""
src_body = """"
src_footer = """"""}
""""""

src_method = """"""
    @RestrictedBuildTest"	"/home/gpoor/cts-12-source/cts/tools/selinux/SELinuxNeverallowTestFrame.py"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"SELinuxNeverallowRulesTest"	"testNeverallowRules"	""	"2: system direct"	"public void testNeverallowRules() throws Exception {
        String neverallowRule = ""$NEVERALLOW_RULE_HERE$"";
        boolean fullTrebleOnly = $TREBLE_ONLY_BOOL_HERE$;
        boolean launchingWithROnly = $LAUNCHING_WITH_R_ONLY_BOOL_HERE$;
        boolean launchingWithSOnly = $LAUNCHING_WITH_S_ONLY_BOOL_HERE$;
        boolean compatiblePropertyOnly = $COMPATIBLE_PROPERTY_ONLY_BOOL_HERE$;

        if ((fullTrebleOnly) && (!isFullTrebleDevice())) {
            // This test applies only to Treble devices but this device isn't one
            return;
        }
        if ((launchingWithROnly) && (!isDeviceLaunchingWithR())) {
            // This test applies only to devices launching with R or later but this device isn't one
            return;
        }
        if ((launchingWithSOnly) && (!isDeviceLaunchingWithS())) {
            // This test applies only to devices launching with S or later but this device isn't one
            return;
        }
        if ((compatiblePropertyOnly) && (!isCompatiblePropertyEnforcedDevice())) {
            // This test applies only to devices on which compatible property is enforced but this
            // device isn't one
            return;
        }

        // If sepolicy is split and vendor sepolicy version is behind platform's,
        // only test against platform policy.
        File policyFile =
                (isSepolicySplit() && mVendorSepolicyVersion < mSystemSepolicyVersion) ?
                deviceSystemPolicyFile :
                devicePolicyFile;

        /* run sepolicy-analyze neverallow check on policy file using given neverallow rules */
        ProcessBuilder pb = new ProcessBuilder(sepolicyAnalyze.getAbsolutePath(),
                policyFile.getAbsolutePath(), ""neverallow"", ""-w"", ""-n"",
                neverallowRule);
        pb.redirectOutput(ProcessBuilder.Redirect.PIPE);
        pb.redirectErrorStream(true);
        Process p = pb.start();
        BufferedReader result = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        StringBuilder errorString = new StringBuilder();
        while ((line = result.readLine()) != null) {
            errorString.append(line);
            errorString.append(""\\n"");
        }
        p.waitFor();
        assertTrue(""The following errors were encountered when validating the SELinux""
                   + ""neverallow rule:\\n"" + neverallowRule + ""\\n"" + errorString,
                   errorString.length() == 0);
    }
"""""""	"/home/gpoor/cts-12-source/cts/tools/selinux/SELinuxNeverallowTestFrame.py"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.tradefed.CtsTradefedTest"	"testSuiteInfoLoad"	""	"1: system"	"public void testSuiteInfoLoad() throws Exception {
        // Test the values in the manifest can be loaded
        File root = FileUtil.createTempDir(""root"");
        System.setProperty(PROPERTY_NAME, root.getAbsolutePath());
        File base = new File(root, ""android-cts"");
        base.mkdirs();
        File tests = new File(base, ""testcases"");
        tests.mkdirs();
        CompatibilityBuildProvider provider = new CompatibilityBuildProvider();
        OptionSetter setter = new OptionSetter(provider);
        setter.setOptionValue(""plan"", SUITE_PLAN);
        setter.setOptionValue(""dynamic-config-url"", DYNAMIC_CONFIG_URL);
        IBuildInfo info = provider.getBuild();
        CompatibilityBuildHelper helper = new CompatibilityBuildHelper(info);
        assertEquals(""Incorrect suite full name"", SUITE_FULL_NAME, helper.getSuiteFullName());
        assertEquals(""Incorrect suite name"", SUITE_NAME, helper.getSuiteName());
        FileUtil.recursiveDelete(root);
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/tradefed/CtsTradefedTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.common.tradefed.presubmit.PresubmitSetupValidation"	"testDependencyCommonsCompress"	""	"1: system"	"public void testDependencyCommonsCompress() throws Exception {
        ClassLoader loader = ClassLoader.getSystemClassLoader();
        // This will throw an exception if dependency isn't met.
        loader.loadClass(""org.apache.commons.compress.archivers.zip.ZipFile"");
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/PresubmitSetupValidation.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.common.tradefed.presubmit.ValidateTestsAbi"	"testApksAbis"	""	"1: system"	"public void testApksAbis() {
        String ctsRoot = System.getProperty(""CTS_ROOT"");
        File testcases = new File(ctsRoot, ""/android-cts/testcases/"");
        if (!testcases.exists()) {
            fail(String.format(""%s does not exists"", testcases));
            return;
        }
        File[] listApks = testcases.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                for (String apk : APK_EXCEPTIONS) {
                    if (name.startsWith(apk)) {
                        return false;
                    }
                }

                return name.endsWith("".apk"");
            }
        });
        assertTrue(listApks.length > 0);
        int maxAbi = 0;
        Map<String, Integer> apkToAbi = new HashMap<>();

        for (File testApk : listApks) {
            AaptParser result = AaptParser.parse(testApk);
            // Retry as we have seen flake with aapt sometimes.
            if (result == null) {
                for (int i = 0; i < 2; i++) {
                    result = AaptParser.parse(testApk);
                    if (result != null) {
                        break;
                    }
                }
                // If still couldn't parse the apk
                if (result == null) {
                    fail(String.format(""Fail to run 'aapt dump badging %s'"",
                            testApk.getAbsolutePath()));
                }
            }
            // We only check the apk that have native code
            if (!result.getNativeCode().isEmpty()) {
                List<String> supportedAbiApk = result.getNativeCode();
                Set<String> buildTarget = AbiUtils.getAbisForArch(
                        TestSuiteInfo.getInstance().getTargetArchs().get(0));
                // first check, all the abis in the buildTarget are supported
                for (String abiBT : buildTarget) {
                    Boolean findMatch = false;
                    for (String abiApk : supportedAbiApk) {
                        if (abiApk.equals(abiBT)) {
                            findMatch = true;
                            break;
                        }
                    }
                    if (!findMatch) {
                        fail(String.format(""apk %s %s does not support our abis [%s]"",
                                testApk.getName(), supportedAbiApk, buildTarget));
                    }
                }
                apkToAbi.put(testApk.getName(), supportedAbiApk.size());
                maxAbi = Math.max(maxAbi, buildTarget.size());
            }
        }

        // We do a second pass to make sure nobody is short on abi
        for (Entry<String, Integer> apk : apkToAbi.entrySet()) {
            if (apk.getValue() < maxAbi) {
                fail(String.format(""apk %s only has %s abi when it should have %s"", apk.getKey(),
                        apk.getValue(), maxAbi));
            }
        }
    }

    /**
     * Test that when CTS has multiple abis, we have binary for each ABI. In this case the abi will
     * be the same with different bitness (only case supported by build system).
     * <p/>
     * If there is only one bitness, then we check that it's the right one.
     */"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ValidateTestsAbi.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.common.tradefed.presubmit.ValidateTestsAbi"	"testBinariesAbis"	""	"2: system direct"	"public void testBinariesAbis() {
        String ctsRoot = System.getProperty(""CTS_ROOT"");
        File testcases = new File(ctsRoot, ""/android-cts/testcases/"");
        if (!testcases.exists()) {
            fail(String.format(""%s does not exist"", testcases));
            return;
        }
        String[] listBinaries = testcases.list(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if (name.contains(""."")) {
                    return false;
                }
                if (BINARY_EXCEPTIONS.contains(name)) {
                    return false;
                }
                for (String suffixException : BINARY_SUFFIX_EXCEPTIONS) {
                    if (name.endsWith(suffixException)) {
                        return false;
                    }
                }
                File file = new File(dir, name);
                if (file.isDirectory()) {
                    return false;
                }
                if (!file.canExecute()) {
                    return false;
                }
                try {
                    // Ignore python binaries
                    if (FileUtil.readStringFromFile(file).startsWith(""#!/usr/bin/env python"")) {
                        return false;
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                for(String pattern: BINARY_EXCEPTIONS_REGEX) {
                    Matcher matcher = Pattern.compile(pattern).matcher(name);
                    if (matcher.matches()) {
                        return false;
                    }
                }
                return true;
            }
        });
        assertTrue(listBinaries.length > 0);
        List<String> orderedList = Arrays.asList(listBinaries);
        // we sort to have binary starting with same name, next to each other. The last two
        // characters of their name with be the bitness (32 or 64).
        Collections.sort(orderedList);
        Set<String> buildTarget = AbiUtils.getAbisForArch(
                TestSuiteInfo.getInstance().getTargetArchs().get(0));
        // We expect one binary per abi of CTS, they should be appended with 32 or 64
        for (int i = 0; i < orderedList.size(); i=i + buildTarget.size()) {
            List<String> subSet = orderedList.subList(i, i + buildTarget.size());
            if (subSet.size() > 1) {
                String base = subSet.get(0).substring(0, subSet.get(0).length() - 2);
                for (int j = 0; j < subSet.size(); j++) {
                    assertEquals(base, subSet.get(j).substring(0, subSet.get(j).length() - 2));
                }
            } else {
                String bitness = AbiUtils.getBitness(buildTarget.iterator().next());
                assertTrue(subSet.get(i).endsWith(bitness));
            }
        }
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ValidateTestsAbi.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.common.tradefed.presubmit.CtsConfigLoadingTest"	"testConfigurationLoad"	""	"3: system user direct"	"public void testConfigurationLoad() throws Exception {
        String ctsRoot = System.getProperty(""CTS_ROOT"");
        File testcases = new File(ctsRoot, ""/android-cts/testcases/"");
        if (!testcases.exists()) {
            fail(String.format(""%s does not exists"", testcases));
            return;
        }
        File[] listConfig = testcases.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if (name.endsWith("".config"")) {
                    return true;
                }
                return false;
            }
        });
        assertTrue(listConfig.length > 0);
        // Create a FolderBuildInfo to similate the CompatibilityBuildProvider
        FolderBuildInfo stubFolder = new FolderBuildInfo(""-1"", ""-1"");
        stubFolder.setRootDir(new File(ctsRoot));
        stubFolder.addBuildAttribute(CompatibilityBuildHelper.SUITE_NAME, ""CTS"");
        stubFolder.addBuildAttribute(""ROOT_DIR"", ctsRoot);
        TestInformation stubTestInfo = TestInformation.newBuilder().build();
        stubTestInfo.executionFiles().put(FilesKey.TESTS_DIRECTORY, new File(ctsRoot));

        List<String> missingMandatoryParameters = new ArrayList<>();
        // We expect to be able to load every single config in testcases/
        for (File config : listConfig) {
            IConfiguration c = ConfigurationFactory.getInstance()
                    .createConfigurationFromArgs(new String[] {config.getAbsolutePath()});
            if (c.getDeviceConfig().size() > 2) {
                throw new ConfigurationException(String.format(""%s declares more than 2 devices."", config));
            }
            for (IDeviceConfiguration dConfig : c.getDeviceConfig()) {
                // Ensure the deprecated ApkInstaller is not used anymore.
                for (ITargetPreparer prep : dConfig.getTargetPreparers()) {
                    if (prep.getClass().isAssignableFrom(ApkInstaller.class)) {
                        throw new ConfigurationException(
                                String.format(""%s: Use com.android.tradefed.targetprep.suite.""
                                        + ""SuiteApkInstaller instead of com.android.compatibility.""
                                        + ""common.tradefed.targetprep.ApkInstaller, options will be ""
                                        + ""the same."", config));
                    }
                    if (prep.getClass().isAssignableFrom(PreconditionPreparer.class)) {
                        throw new ConfigurationException(
                                String.format(
                                        ""%s: includes a PreconditionPreparer (%s) which is not ""
                                                + ""allowed in modules."",
                                        config.getName(), prep.getClass()));
                    }
                    if (prep.getClass().isAssignableFrom(DeviceSetup.class)) {
                       DeviceSetup deviceSetup = (DeviceSetup) prep;
                       if (!deviceSetup.isForceSkipSystemProps()) {
                           throw new ConfigurationException(
                                   String.format(""%s: %s needs to be configured with ""
                                           + ""<option name=\""force-skip-system-props\"" ""
                                           + ""value=\""true\"" /> in CTS."",
                                                 config.getName(), prep.getClass()));
                       }
                    }
                }
            }
            // We can ensure that Host side tests are not empty.
            for (IRemoteTest test : c.getTests()) {
                // Check that all the tests runners are well supported.
                if (!SUPPORTED_CTS_TEST_TYPE.contains(test.getClass().getCanonicalName())) {
                    throw new ConfigurationException(
                            String.format(
                                    ""testtype %s is not officially supported by CTS. ""
                                            + ""The supported ones are: %s"",
                                    test.getClass().getCanonicalName(), SUPPORTED_CTS_TEST_TYPE));
                }
                if (test instanceof HostTest) {
                    HostTest hostTest = (HostTest) test;
                    // We inject a made up folder so that it can find the tests.
                    hostTest.setBuild(stubFolder);
                    hostTest.setTestInformation(stubTestInfo);
                    int testCount = hostTest.countTestCases();
                    if (testCount == 0) {
                        throw new ConfigurationException(
                                String.format(""%s: %s reports 0 test cases."",
                                        config.getName(), test));
                    }
                }
                if (test instanceof GTest) {
                    if (((GTest) test).isRebootBeforeTestEnabled()) {
                        throw new ConfigurationException(String.format(
                                ""%s: instead of reboot-before-test use a RebootTargetPreparer ""
                                + ""which is more optimized during sharding."", config.getName()));
                    }
                }
                // Tests are expected to implement that interface.
                if (!(test instanceof ITestFilterReceiver)) {
                    throw new IllegalArgumentException(String.format(
                            ""Test in module %s must implement ITestFilterReceiver."",
                            config.getName()));
                }
                // Ensure that the device runner is the AJUR one if explicitly specified.
                if (test instanceof AndroidJUnitTest) {
                    AndroidJUnitTest instru = (AndroidJUnitTest) test;
                    if (instru.getRunnerName() != null &&
                            !ALLOWED_INSTRUMENTATION_RUNNER_NAME.contains(instru.getRunnerName())) {
                        // Some runner are exempt
                        if (!RUNNER_EXCEPTION.contains(instru.getRunnerName())) {
                            throw new ConfigurationException(
                                    String.format(""%s: uses '%s' instead of on of '%s' that are ""
                                            + ""expected"", config.getName(), instru.getRunnerName(),
                                            ALLOWED_INSTRUMENTATION_RUNNER_NAME));
                        }
                    }
                }
            }

            ConfigurationDescriptor cd = c.getConfigurationDescription();
            Assert.assertNotNull(config + "": configuration descriptor is null"", cd);
            List<String> component = cd.getMetaData(METADATA_COMPONENT);
            Assert.assertNotNull(String.format(""Missing module metadata field \""component\"", ""
                    + ""please add the following line to your AndroidTest.xml:\n""
                    + ""<option name=\""config-descriptor:metadata\"" key=\""component\"" ""
                    + ""value=\""...\"" />\nwhere \""value\"" must be one of: %s\n""
                    + ""config: %s"", KNOWN_COMPONENTS, config),
                    component);
            Assert.assertEquals(String.format(""Module config contains more than one \""component\"" ""
                    + ""metadata field: %s\nconfig: %s"", component, config),
                    1, component.size());
            String cmp = component.get(0);
            Assert.assertTrue(String.format(""Module config contains unknown \""component\"" metadata ""
                    + ""field \""%s\"", supported ones are: %s\nconfig: %s"",
                    cmp, KNOWN_COMPONENTS, config), KNOWN_COMPONENTS.contains(cmp));

            if (""misc"".equals(cmp)) {
                String configFileName = config.getName();
                Assert.assertTrue(
                        String.format(
                                ""Adding new module %s to \""misc\"" component is restricted, ""
                                        + ""please pick a component that your module fits in"",
                                configFileName),
                        KNOWN_MISC_MODULES.contains(configFileName));
            }

            // Check that specified parameters are expected
            boolean res =
                    checkModuleParameters(
                            config.getName(), cd.getMetaData(ITestSuite.PARAMETER_KEY));
            if (!res) {
                missingMandatoryParameters.add(config.getName());
            }
            // Check that specified tokens are expected
            checkTokens(config.getName(), cd.getMetaData(ITestSuite.TOKEN_KEY));

            // Ensure each CTS module is tagged with <option name=""test-suite-tag"" value=""cts"" />
            Assert.assertTrue(String.format(
                    ""Module config %s does not contains ""
                    + ""'<option name=\""test-suite-tag\"" value=\""cts\"" />'"", config.getName()),
                    cd.getSuiteTags().contains(""cts""));

            // Check not-shardable: JarHostTest cannot create empty shards so it should never need
            // to be not-shardable.
            if (cd.isNotShardable()) {
                for (IRemoteTest test : c.getTests()) {
                    if (test.getClass().isAssignableFrom(JarHostTest.class)) {
                        throw new ConfigurationException(
                                String.format(""config: %s. JarHostTest does not need the ""
                                    + ""not-shardable option."", config.getName()));
                    }
                }
            }
            // Ensure options have been set
            c.validateOptions();
        }

        // Exempt the allow list
        missingMandatoryParameters.removeAll(ALLOWLIST_MODULE_PARAMETERS);
        // Ensure the mandatory fields are filled
        if (!missingMandatoryParameters.isEmpty()) {
            String msg =
                    String.format(
                            ""The following %s modules are missing some of the mandatory ""
                                    + ""parameters [instant_app, not_instant_app, ""
                                    + ""multi_abi, not_multi_abi, ""
                                    + ""secondary_user, not_secondary_user]: '%s'"",
                            missingMandatoryParameters.size(), missingMandatoryParameters);
            throw new ConfigurationException(msg);
        }
    }

    /** Test that all parameter metadata can be resolved. */
    private boolean checkModuleParameters(String configName, List<String> parameters)
            throws ConfigurationException {
        if (parameters == null) {
            return false;
        }
        Map<String, Boolean> families = createFamilyCheckMap();
        for (String param : parameters) {
            try {
                ModuleParameters p = ModuleParameters.valueOf(param.toUpperCase());
                if (families.containsKey(p.getFamily())) {
                    families.put(p.getFamily(), true);
                }
            } catch (IllegalArgumentException e) {
                throw new ConfigurationException(
                        String.format(""Config: %s includes an unknown parameter '%s'."",
                                configName, param));
            }
        }
        if (families.containsValue(false)) {
            return false;
        }
        return true;
    }

    /** Test that all tokens can be resolved. */
    private void checkTokens(String configName, List<String> tokens) throws ConfigurationException {
        if (tokens == null) {
            return;
        }
        for (String token : tokens) {
            try {
                TokenProperty.valueOf(token.toUpperCase());
            } catch (IllegalArgumentException e) {
                throw new ConfigurationException(
                        String.format(
                                ""Config: %s includes an unknown token '%s'."", configName, token));
            }
        }
    }

    private Map<String, Boolean> createFamilyCheckMap() {
        Map<String, Boolean> families = new HashMap<>();
        for (String family : MANDATORY_PARAMETERS_FAMILY) {
            families.put(family, false);
        }
        return families;
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/CtsConfigLoadingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.compatibility.common.tradefed.presubmit.ApkPackageNameCheck"	"testApkPackageNames"	""	"1: system"	"public void testApkPackageNames() throws Exception {
        String ctsRoot = System.getProperty(""CTS_ROOT"");
        File testcases = new File(ctsRoot, ""/android-cts/testcases/"");
        if (!testcases.exists()) {
            fail(String.format(""%s does not exists"", testcases));
            return;
        }
        File[] listConfig = testcases.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                if (name.endsWith("".config"")) {
                    return true;
                }
                return false;
            }
        });
        assertTrue(listConfig.length > 0);
        // We check all apk installed by all modules
        Map<String, String> packageNames = new HashMap<>();

        for (File config : listConfig) {
            IConfiguration c = ConfigurationFactory.getInstance()
                    .createConfigurationFromArgs(new String[] {config.getAbsolutePath()});
            // For each config, we check all the apk it's going to install
            List<File> apkNames = new ArrayList<>();
            List<String> packageListNames = new ArrayList<>();
            for (IDeviceConfiguration dConfig : c.getDeviceConfig()) {
                for (ITargetPreparer prep : dConfig.getTargetPreparers()) {
                    if (prep instanceof TestAppInstallSetup) {
                        apkNames.addAll(((TestAppInstallSetup) prep).getTestsFileName());
                    }
                    // Ensure the files requested to be pushed exist.
                    if (prep instanceof FilePusher && ((FilePusher) prep).shouldAppendBitness()) {
                        for (File f : ((PushFilePreparer) prep).getPushSpecs(null).values()) {
                            String path = f.getPath();
                            if (!new File(testcases, path + ""32"").exists()
                                    || !new File(testcases, path + ""64"").exists()) {
                                // TODO: Enforce should abort on failure is True in CTS
                                if (((FilePusher) prep).shouldAbortOnFailure()) {
                                    fail(
                                            String.format(
                                                    ""File %s[32/64] wasn't found in testcases/ while ""
                                                            + ""it's expected to be pushed as part of ""
                                                            + ""%s"",
                                                    path, config.getName()));
                                }
                            }
                        }
                    } else if (prep instanceof PushFilePreparer) {
                        for (File f : ((PushFilePreparer) prep).getPushSpecs(null).values()) {
                            String path = f.getPath();
                            if (!new File(testcases, path).exists()) {
                                // TODO: Enforce should abort on failure is True in CTS
                                if (((PushFilePreparer) prep).shouldAbortOnFailure()) {
                                    fail(
                                            String.format(
                                                    ""File %s wasn't found in testcases/ while it's ""
                                                            + ""expected to be pushed as part of %s"",
                                                    path, config.getName()));
                                }
                            }
                        }
                    }
                }
    
                for (File apk : apkNames) {
                    String apkName = apk.getName();
                    File apkFile = new File(testcases, apkName);
                    if (!apkFile.exists()) {
                        fail(String.format(""Module %s is trying to install %s which does not ""
                                + ""exists in testcases/"", config.getName(), apkFile));
                    }
                    AaptParser res = AaptParser.parse(apkFile);
                    assertNotNull(res);
                    String packageName = res.getPackageName();
                    String put = packageNames.put(packageName, apkName);
                    packageListNames.add(packageName);
                    // The package already exists and it's a different apk
                    if (put != null && !apkName.equals(put) && !EXCEPTION_LIST.contains(packageName)) {
                        fail(String.format(""Module %s: Package name '%s' from apk '%s' was already ""
                                + ""added by previous apk '%s'."",
                                config.getName(), packageName, apkName, put));
                    }
                }
            }
            // Catch a test trying to run something it doesn't install.
            List<IRemoteTest> tests = c.getTests();
            for (IRemoteTest test : tests) {
                if (test instanceof InstrumentationTest) {
                    InstrumentationTest instrumentationTest = (InstrumentationTest) test;
                    if (instrumentationTest.getPackageName() != null) {
                        if (!packageListNames.contains(instrumentationTest.getPackageName())) {
                            throw new ConfigurationException(
                                    String.format(""Module %s requests to run '%s' but it's not ""
                                        + ""part of any apks."",
                                        config.getName(), instrumentationTest.getPackageName()));
                        }
                    }
                }
            }
        }
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-tradefed/tests/src/com/android/compatibility/common/tradefed/presubmit/ApkPackageNameCheck.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"IncrementalDeqpTest"	"assert_not_called"	""	"2: system user"	"public void test# Lint as: python3
#
#.

""""""Tests for incremental_deqp.""""""

import incremental_deqp
import os
import unittest
from unittest.mock import MagicMock
from unittest.mock import patch

@patch('incremental_deqp.AdbHelper', MagicMock())
class IncrementalDeqpTest(unittest.TestCase):

  def setUp(self):
    testfile_dir = os.path.dirname(os.path.abspath(__file__))
    self.testdata_dir = testfile_dir +'/testdata'
    self.dependency_collector = incremental_deqp.DeqpDependencyCollector(None, None, None)
    self.parser = incremental_deqp._get_parser()

  def test_update_dependency(self):
    """"""Test update_dependency gets correct dEQP dependency from dump file.""""""
    dump_file = 'testdata/perf_dump.txt'
    deps = set()
    self.dependency_collector.update_dependency(deps, dump_file)
    self.assertEqual(len(deps),2)
    self.assertIn('file_2', deps)
    self.assertIn('file_3', deps)

  def test_check_test_log_all_test_executed(self):
    """"""Test check_test_log returns true if all tests are executed.""""""
    test_file = 'testdata/test_list.txt'
    log_file = 'testdata/log_1.qpa'
    self.assertTrue(self.dependency_collector.check_test_log(test_file, log_file))

  def test_check_test_log_test_crashed(self):
    """"""Test check_test_log returns false if tests are crashed.""""""
    test_file = 'testdata/test_list.txt'
    log_file = 'testdata/log_2.qpa'
    self.assertFalse(self.dependency_collector.check_test_log(test_file, log_file))

  def test_get_test_binary_name(self):
    """"""Test get_test_binary_name gets dEQP binary name based on test name.""""""
    self.assertEqual(self.dependency_collector.get_test_binary_name('vk-32'), 'deqp-binary')
    self.assertEqual(self.dependency_collector.get_test_binary_name('vk-64'), 'deqp-binary64')
    with self.assertRaises(incremental_deqp.TestError):
      self.dependency_collector.get_test_binary_name('test')

  def test_get_test_log_name(self):
    """"""Test get_test_log_name gets correct test log name based on test name.""""""
    self.assertEqual(self.dependency_collector.get_test_log_name('test'), 'test.qpa')

  def test_get_perf_name(self):
    """"""Test get_perf_name gets correct perf file name based on test name.""""""
    self.assertEqual(self.dependency_collector.get_test_perf_name('test'), 'test.data')

  def test_get_perf_dump_name(self):
    """"""Test get_perf_dump_name gets correct perf dump file name based on test name.""""""
    self.assertEqual(self.dependency_collector.get_perf_dump_name('test'), 'test-perf-dump.txt')

  def test_get_test_list_name(self):
    """"""Test get_test_list_name gets test list name based on test name.""""""
    self.assertEqual(self.dependency_collector.get_test_list_name('vk-32'), 'vk-master-subset.txt')
    self.assertEqual(self.dependency_collector.get_test_list_name('gles3-32'),
                     'gles3-master-subset.txt')
    with self.assertRaises(incremental_deqp.TestError):
      self.dependency_collector.get_test_list_name('test')

  def test_valid_dependency(self):
    """"""Test if dependency is valid.""""""
    self.assertTrue(incremental_deqp._is_deqp_dependency('/file/a.so'))
    self.assertFalse(incremental_deqp._is_deqp_dependency('/apex/a.so'))

  def test_build_helper_compare_build_with_device_files_true(self):
    """"""Test BuildHelper.compare_base_build_with_device_files returns true.""""""
    build_helper = incremental_deqp.BuildHelper()
    deqp_deps = ['/system/deqp_dependency_file_a.so', '/vendor/deqp_dependency_file_b.so']
    base_build_file = './testdata/base_build_target-files.zip'

    def side_effect(command):
      if 'file_a.so' in command:
        return b'placeholder\nplaceholder\n'
      if 'file_b.so' in command:
        return b'placeholder\nplaceholder\nplaceholder\n\n'

    adb = incremental_deqp.AdbHelper()
    adb.run_shell_command = MagicMock(side_effect=side_effect)
    self.assertTrue(build_helper.compare_base_build_with_device_files(
        deqp_deps, adb, base_build_file)[0])

  def test_compare_build_with_device_files_false(self):
    """"""Test BuildHelper.compare_base_build_with_device_files returns false.""""""
    deqp_deps = ['/system/deqp_dependency_file_a.so', '/vendor/deqp_dependency_file_b.so']
    build_helper = incremental_deqp.BuildHelper()
    base_build_file = './testdata/base_build_target-files.zip'
    def side_effect(command):
      if 'file_a.so' in command:
        return b'different text'
      if 'file_b.so' in command:
        return b'placeholder\nplaceholder\nplaceholder\n\n'

    adb = incremental_deqp.AdbHelper()
    adb.run_shell_command = MagicMock(side_effect=side_effect)
    self.assertFalse(build_helper.compare_base_build_with_device_files(
        deqp_deps, adb, base_build_file)[0])

  def test_build_helper_compare_build_with_current_build_true(self):
    """"""Test BuildHelper.compare_base_build_with_current_build returns true.""""""
    build_helper = incremental_deqp.BuildHelper()
    deqp_deps = ['/system/deqp_dependency_file_a.so', '/vendor/deqp_dependency_file_b.so']
    base_build_file = './testdata/base_build_target-files.zip'

    self.assertTrue(build_helper.compare_base_build_with_current_build(
        deqp_deps, base_build_file, base_build_file)[0])

  def test_build_helper_compare_build_with_current_build_false(self):
    """"""Test BuildHelper.compare_base_build_with_current_build returns false.""""""
    build_helper = incremental_deqp.BuildHelper()
    deqp_deps = ['/system/deqp_dependency_file_a.so', '/vendor/deqp_dependency_file_b.so']
    base_build_file = './testdata/base_build_target-files.zip'
    current_build_file = './testdata/current_build_target-files.zip'

    self.assertFalse(build_helper.compare_base_build_with_current_build(
        deqp_deps, current_build_file, base_build_file)[0])

  def test_build_helper_get_system_fingerprint(self):
    """"""Test BuildHelper gets system fingerprint.""""""
    build_helper = incremental_deqp.BuildHelper()
    build_file = './testdata/base_build_target-files.zip'

    self.assertEqual(('generic/aosp_cf_x86_64_phone/vsoc_x86_64:S/AOSP.MASTER/7363308:'
                      'userdebug/test-keys'), build_helper.get_system_fingerprint(build_file))


  @patch('incremental_deqp.BuildHelper', autospec=True)
  @patch('incremental_deqp._save_deqp_deps', autospec=True)
  @patch('incremental_deqp.DeqpDependencyCollector', autospec=True)
  @patch('incremental_deqp.AdbHelper', autospec=True)
  def test_local_run_generate_deps_only(self, adb_helper_mock, dependency_collector_mock,
                                        save_deps_mock, build_helper_mock):
    """"""Test generate_deps_only option in local_run.""""""
    dependency_collector_mock.return_value.get_deqp_dependency.return_value = {'a.so'}
    args = self.parser.parse_args(['--generate_deps_only'])
    incremental_deqp._local_run(args, '')
    save_deps_mock.assert_called_once_with({'a.so'}, 'dEQP-dependency.txt')
    build_helper_mock.assert_not_called()

  def test_local_run_missing_extra_deps(self):
    """"""Test local_run throws exception if extra_deqp_dependency.txt is missing.""""""
    args = self.parser.parse_args(['-t ./testdata'])
    with self.assertRaises(incremental_deqp.TestResourceError):
      incremental_deqp._local_run(args, '')

  @patch('incremental_deqp._generate_report', autospec=True)
  @patch('incremental_deqp.BuildHelper', autospec=True)
  @patch('incremental_deqp._save_deqp_deps', autospec=True)
  @patch('incremental_deqp.DeqpDependencyCollector', autospec=True)
  @patch('incremental_deqp.AdbHelper', autospec=True)
  def test_local_run_compare_build(self, adb_helper_mock, dependency_collector_mock,
                                   save_deps_mock, build_helper_mock, generate_report_mock):
    """"""Test local_run could compare build based on dependency.""""""
    dependency_collector_mock.return_value.get_deqp_dependency.return_value = {'a.so'}
    build_helper_mock.return_value.compare_base_build_with_device_files.return_value = [False, {}]
    args = self.parser.parse_args(['-b', 'base_build', '-t', self.testdata_dir])

    incremental_deqp._local_run(args, '')

    save_deps_mock.assert_called_once_with({'a.so', 'extra_a.so'}, 'dEQP-dependency.txt')
    build_helper_mock.assert_called_once_with(False)

if __name__ == '__main__':
  unittest.main()"	"/home/gpoor/cts-12-source/cts/tools/incremental-cts/incremental_deqp_test.py"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.preconditions.cts.PreconditionsTest"	"testScreenUnlocked"	""	"1: system"	"public void testScreenUnlocked() throws Exception {
        PackageManager pm = this.getContext().getPackageManager();
        if (pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK)
                || pm.hasSystemFeature(PackageManager.FEATURE_WATCH)
                || pm.hasSystemFeature(PackageManager.FEATURE_AUTOMOTIVE)) {
            Log.i(TAG, ""Skipping screen lock precondition for this device type"");
            return; // do not test for unlocked screen on devices with no screen lock
        }
        assertFalse(""Device must have screen lock disabled"",
                ScreenLockHelper.isDeviceSecure(this.getContext()));
    }

    /**
     * Test if device has accessible external storage
     * @throws Exception
     */"	"/home/gpoor/cts-12-source/cts/tools/cts-preconditions/src/com/android/preconditions/cts/PreconditionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.holo_capture.CaptureHolo"	"testCaptureHolo"	""	"1: system"	"public void testCaptureHolo() throws InterruptedException {
        setActivityInitialTouchMode(true);
        CaptureActivity activity = getActivity();
        KeyguardManager keyguardManager =
                (KeyguardManager) activity.getSystemService(Context.KEYGUARD_SERVICE);
        keyguardManager.newKeyguardLock(""holo_capture"").disableKeyguard();
        activity.waitForCompletion();
    }
}"	"/home/gpoor/cts-12-source/cts/tools/cts-holo-generation/src/com/android/cts/holo_capture/CaptureHolo.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_static_range.Test_invoke_static_range"	"testN1"	""	"1: user"	"public void testN1() {
        T_invoke_static_range_1 t = new T_invoke_static_range_1();
        assertEquals(1234567, t.run());
    }

    /**
     * @title Static method from user class
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_static_range/Test_invoke_static_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testN2"	""	"1: direct"	"public void testN2() {
        T_invoke_direct_2 t = new T_invoke_direct_2();
        assertEquals(345, t.run());
    }


    /**
     * @title Check that new frame is created by invoke_direct
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testN7"	""	"1: direct"	"public void testN7() {
        T_invoke_direct_21 t = new T_invoke_direct_21();
        assertEquals(1, t.run());
    }



    /**
     * @title objref is null
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testE3"	""	"1: direct"	"public void testE3() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_8"",
                   NullPointerException.class);
    }

    /**
     * @title Native method can't be linked
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testE5"	""	"1: direct"	"public void testE5() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_9"",
                   UnsatisfiedLinkError.class);
    }

    /**
     * @constraint A13
     * @title invalid constant pool index
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE1"	""	"1: direct"	"public void testVFE1() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_3"", VerifyError.class);
    }

    /**
     * @constraint A15
     * @title invoke-direct may not be used to invoke &lt;clinit&gt;
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE3"	""	"1: direct"	"public void testVFE3() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_4"", VerifyError.class);
    }

    /**
     * @constraint B4
     * @title invoke-direct target must be in self or superclass
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE4"	""	"1: direct"	"public void testVFE4() {
        //@uses dot.junit.opcodes.invoke_direct.TSuper
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_6"", VerifyError.class);
    }

    /**
     * @constraint B1
     * @title number of arguments
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE5"	""	"1: direct"	"public void testVFE5() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_5"", VerifyError.class);
    }

    /**
     * @constraint B1
     * @title int is passed instead of obj ref
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE6"	""	"1: direct"	"public void testVFE6() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_10"", VerifyError.class);
    }


    /**
     * @constraint B9
     * @title number of arguments passed to method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE8"	""	"1: direct"	"public void testVFE8() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_14"", VerifyError.class);
    }

    /**
     * @constraint B9
     * @title types of arguments passed to method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE9"	""	"1: direct"	"public void testVFE9() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_24"", VerifyError.class);
    }

    /**
     * @constraint B10
     * @title assignment incompatible references when accessing protected method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE10"	""	"1: direct"	"public void testVFE10() {
        //@uses dot.junit.opcodes.invoke_direct.TPlain
        //@uses dot.junit.opcodes.invoke_direct.TSuper
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_25"", VerifyError.class);
    }

    /**
     * @constraint B5
     * @title  Superclass' method call
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE11"	""	"1: direct"	"public void testVFE11() {
        //@uses dot.junit.opcodes.invoke_direct.TSuper
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_1"",
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint A23
     * @title number of registers
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE12"	""	"1: direct"	"public void testVFE12() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_15"", VerifyError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to call undefined method.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE13"	""	"1: direct"	"public void testVFE13() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_7"", NoSuchMethodError.class);
    }

    /**
     * @constraint n/a
     * @title Method has different signature.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE14"	""	"1: direct"	"public void testVFE14() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_16"", NoSuchMethodError.class);
    }

    /**
     * @constraint n/a
     * @title Attempt to invoke static method. Java throws IncompatibleClassChangeError
     * on first access. Dalvik threw VerifyError on class loading.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE15"	""	"1: direct"	"public void testVFE15() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_11"",
                   IncompatibleClassChangeError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to invoke private method of superclass.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE16"	""	"1: direct"	"public void testVFE16() {
        //@uses dot.junit.opcodes.invoke_direct.TSuper
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_12"",
                   IllegalAccessError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to invoke abstract method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE17"	""	"1: direct"	"public void testVFE17() {
        //@uses dot.junit.opcodes.invoke_direct.TAbstract
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_13"",
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint B5
     * @title An instance initializer must only be invoked on an uninitialized instance.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE18"	""	"1: direct"	"public void testVFE18() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_17"", VerifyError.class);
    }

    /**
     * @constraint B8
     * @title attempt to access inherited instance field before <init> is called
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE19"	""	"1: direct"	"public void testVFE19() {
        //@uses dot.junit.opcodes.invoke_direct.TSuper
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_18"", VerifyError.class);
    }

    /**
     * @constraint A13
     * @title attempt to invoke interface method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE20"	""	"1: direct"	"public void testVFE20() {
        loadAndRun(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_26"",
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint B6
     * @title instance methods may only be invoked on already initialized instances.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct.Test_invoke_direct"	"testVFE21"	""	"1: direct"	"public void testVFE21() {
        load(""dot.junit.opcodes.invoke_direct.d.T_invoke_direct_27"", VerifyError.class);
    }
}"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct/Test_invoke_direct.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_static.Test_invoke_static"	"testN1"	""	"1: user"	"public void testN1() {
        T_invoke_static_1 t = new T_invoke_static_1();
        assertEquals(1234567, t.run());
    }

    /**
     * @title Static method from user class
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_static/Test_invoke_static.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testN2"	""	"1: direct"	"public void testN2() {
        T_invoke_direct_range_2 t = new T_invoke_direct_range_2();
        assertEquals(345, t.run());
    }


    /**
     * @title Check that new frame is created by invoke_direct_range
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testN7"	""	"1: direct"	"public void testN7() {
        T_invoke_direct_range_21 t = new T_invoke_direct_range_21();
        assertEquals(1, t.run());
    }



    /**
     * @title objref is null
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testE3"	""	"1: direct"	"public void testE3() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_8"",
                   NullPointerException.class);
    }

    /**
     * @title Native method can't be linked
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testE5"	""	"1: direct"	"public void testE5() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_9"",
                   UnsatisfiedLinkError.class);
    }

    /**
     * @constraint A14
     * @title invalid constant pool index
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE1"	""	"1: direct"	"public void testVFE1() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_3"", VerifyError.class);
    }

    /**
     * @constraint A15
     * @title invoke-direct may not be used to invoke &lt;clinit&gt;
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE3"	""	"1: direct"	"public void testVFE3() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_4"", VerifyError.class);
    }

    /**
     * @constraint B4
     * @title invoke-direct target must be in self or superclass
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE4"	""	"1: direct"	"public void testVFE4() {
        //@uses dot.junit.opcodes.invoke_direct_range.TSuper
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_6"", VerifyError.class);
    }

    /**
     * @constraint B1
     * @title number of arguments
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE5"	""	"1: direct"	"public void testVFE5() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_5"", VerifyError.class);
    }

    /**
     * @constraint B1
     * @title int is passed instead of obj ref
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE6"	""	"1: direct"	"public void testVFE6() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_10"", VerifyError.class);
    }


    /**
     * @constraint B9
     * @title number of arguments passed to method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE8"	""	"1: direct"	"public void testVFE8() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_14"", VerifyError.class);
    }

    /**
     * @constraint B9
     * @title types of arguments passed to method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE9"	""	"1: direct"	"public void testVFE9() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_24"", VerifyError.class);
    }

    /**
     * @constraint B10
     * @title assignment incompatible references when accessing protected method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE10"	""	"1: direct"	"public void testVFE10() {
        //@uses dot.junit.opcodes.invoke_direct_range.TPlain
        //@uses dot.junit.opcodes.invoke_direct_range.TSuper
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_25"", VerifyError.class);
    }

    /**
     * @constraint B5
     * @title  Superclass' method call
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE11"	""	"1: direct"	"public void testVFE11() {
        //@uses dot.junit.opcodes.invoke_direct_range.TSuper
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_1"", 
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint A23
     * @title number of registers
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE12"	""	"1: direct"	"public void testVFE12() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_15"", VerifyError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to call undefined method.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE13"	""	"1: direct"	"public void testVFE13() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_7"",
                   NoSuchMethodError.class);
    }

    /**
     * @constraint n/a
     * @title Method has different signature.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE14"	""	"1: direct"	"public void testVFE14() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_16"",
                   NoSuchMethodError.class);
    }

    /**
     * @constraint n/a
     * @title Attempt to invoke static method. Java throws IncompatibleClassChangeError
     * on first access. Dalvik threw VerifyError on class loading.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE15"	""	"1: direct"	"public void testVFE15() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_11"",
                   IncompatibleClassChangeError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to invoke private method of superclass. Java throws IllegalAccessError
     * on first access but Dalvik throws VerifyError on class loading.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE16"	""	"1: direct"	"public void testVFE16() {
        //@uses dot.junit.opcodes.invoke_direct_range.TSuper
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_12"",
                   IllegalAccessError.class);
    }


    /**
     * @constraint n/a
     * @title Attempt to invoke abstract method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE17"	""	"1: direct"	"public void testVFE17() {
        //@uses dot.junit.opcodes.invoke_direct_range.TAbstract
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_13"",
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint B5
     * @title An instance initializer must only be invoked on an uninitialized instance.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE18"	""	"1: direct"	"public void testVFE18() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_17"", VerifyError.class);
    }

    /**
     * @constraint B8
     * @title attempt to access inherited instance field before <init> is called
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE19"	""	"1: direct"	"public void testVFE19() {
        //@uses dot.junit.opcodes.invoke_direct_range.TSuper
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_18"", VerifyError.class);
    }

    /**
     * @constraint A14
     * @title attempt to invoke interface method
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE20"	""	"1: direct"	"public void testVFE20() {
        loadAndRun(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_26"",
                   IncompatibleClassChangeError.class);
    }

    /**
     * @constraint B6
     * @title instance methods may only be invoked on already initialized instances.
     */"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"dot.junit.opcodes.invoke_direct_range.Test_invoke_direct_range"	"testVFE21"	""	"1: direct"	"public void testVFE21() {
        load(""dot.junit.opcodes.invoke_direct_range.d.T_invoke_direct_range_27"", VerifyError.class);
    }
}"	"/home/gpoor/cts-12-source/cts/tools/vm-tests-tf/src/dot/junit/opcodes/invoke_direct_range/Test_invoke_direct_range.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.google.android.cts.settings.PrivacyDeviceOwnerTest"	"isHeadlessSystemUserMode"	"CtsSettingsHostTestCases"	"2: system user"	"public void test/*
 *.
 */
package com.google.android.cts.settings;

import com.android.compatibility.common.tradefed.build.CompatibilityBuildHelper;
import com.android.ddmlib.Log.LogLevel;
import com.android.ddmlib.testrunner.RemoteAndroidTestRunner;
import com.android.ddmlib.testrunner.TestResult.TestStatus;
import com.android.tradefed.build.IBuildInfo;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.device.ITestDevice;
import com.android.tradefed.log.LogUtil.CLog;
import com.android.tradefed.result.CollectingTestListener;
import com.android.tradefed.result.TestDescription;
import com.android.tradefed.result.TestResult;
import com.android.tradefed.result.TestRunResult;
import com.android.tradefed.testtype.DeviceTestCase;
import com.android.tradefed.testtype.IBuildReceiver;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;

/** Set of tests for Device Owner use cases. */
public class PrivacyDeviceOwnerTest extends DeviceTestCase implements IBuildReceiver {
    private static final String RUNNER = ""androidx.test.runner.AndroidJUnitRunner"";

    private static final String DEVICE_OWNER_APK = ""CtsSettingsDeviceOwnerApp.apk"";
    private static final String DEVICE_OWNER_PKG = ""com.google.android.cts.deviceowner"";

    private static final String ADMIN_RECEIVER_TEST_CLASS = "".DeviceOwnerTest$BasicAdminReceiver"";
    private static final String CLEAR_DEVICE_OWNER_TEST_CLASS = "".ClearDeviceOwnerTest"";

    // TODO (b/174775905) move to ITestDevice.
    private static final int USER_SYSTEM = 0;

    /**
     * The defined timeout (in milliseconds) is used as a maximum waiting time when expecting the
     * command output from the device. At any time, if the shell command does not output anything
     * for a period longer than defined timeout the Tradefed run terminates.
     */
    private static final long DEFAULT_SHELL_TIMEOUT_MILLIS = TimeUnit.MINUTES.toMillis(20);

    /** instrumentation test runner argument key used for individual test timeout */
    protected static final String TEST_TIMEOUT_INST_ARGS_KEY = ""timeout_msec"";

    /**
     * Sets timeout (in milliseconds) that will be applied to each test. In the event of a test
     * timeout it will log the results and proceed with executing the next test.
     */
    private static final long DEFAULT_TEST_TIMEOUT_MILLIS = TimeUnit.MINUTES.toMillis(10);

    protected boolean mHasFeature;
    protected IBuildInfo mCtsBuild;

    private int mDeviceOwnerUserId;
    private int mTestUserId;

    @Override
    public void setBuild(IBuildInfo buildInfo) {
        mCtsBuild = buildInfo;
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mHasFeature = hasDeviceFeature(""android.software.device_admin"");
        if (!mHasFeature) return;

        mTestUserId = getDevice().getCurrentUser();
        if (isHeadlessSystemUserMode()) {
            mDeviceOwnerUserId = USER_SYSTEM;
        } else {
            mDeviceOwnerUserId = mTestUserId;
        }

        installPackage(mDeviceOwnerUserId, DEVICE_OWNER_APK);

        if (isHeadlessSystemUserMode()) {
            grantDpmWrapperPermissions(mTestUserId);
        }
    }

    @Override
    protected void tearDown() throws Exception {
        if (mHasFeature) {
            assertTrue(
                    ""Failed to remove device owner."",
                    runDeviceTests(
                            DEVICE_OWNER_PKG,
                            DEVICE_OWNER_PKG + CLEAR_DEVICE_OWNER_TEST_CLASS,
                            null));
            getDevice().uninstallPackage(DEVICE_OWNER_PKG);
        }

        super.tearDown();
    }

    /** The case: app is the device owner, has work policy info. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.google.android.cts.settings.PrivacyDeviceOwnerTest"	"testNonDeviceOwnerWithoutInfo"	"CtsSettingsHostTestCases"	"3: system user apps"	"public void testNonDeviceOwnerWithoutInfo() throws Exception {
        if (!mHasFeature) {
            return;
        }
        executeDeviceOwnerTest(""testNonDeviceOwnerWithoutInfo"");
    }

    private void executeDeviceOwnerTest(String testMethodName) throws Exception {
        String testClass = DEVICE_OWNER_PKG + "".DeviceOwnerTest"";
        assertTrue(
                testClass + "" failed."",
                runDeviceTests(DEVICE_OWNER_PKG, testClass, testMethodName));
    }

    protected void installPackage(int userId, String appFileName)
            throws FileNotFoundException, DeviceNotAvailableException {
        CLog.d(""Installing app %s on user %d"", appFileName, userId);
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(mCtsBuild);
        List<String> extraArgs = new LinkedList<>();
        extraArgs.add(""-t"");
        String result =
                getDevice()
                        .installPackageForUser(
                                buildHelper.getTestFile(appFileName),
                                true,
                                true,
                                userId,
                                extraArgs.toArray(new String[extraArgs.size()]));
        assertNull(""Failed to install "" + appFileName + "" on user "" + userId + "": "" + result,
                result);
    }

    protected boolean runDeviceTests(
            String pkgName, @Nullable String testClassName, @Nullable String testMethodName)
            throws DeviceNotAvailableException {
        if (testClassName != null && testClassName.startsWith(""."")) {
            testClassName = pkgName + testClassName;
        }
        RemoteAndroidTestRunner testRunner =
                new RemoteAndroidTestRunner(pkgName, RUNNER, getDevice().getIDevice());
        testRunner.setMaxTimeToOutputResponse(DEFAULT_SHELL_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
        testRunner.addInstrumentationArg(
                TEST_TIMEOUT_INST_ARGS_KEY, Long.toString(DEFAULT_TEST_TIMEOUT_MILLIS));

        if (testClassName != null && testMethodName != null) {
            testRunner.setMethodName(testClassName, testMethodName);
        } else if (testClassName != null) {
            testRunner.setClassName(testClassName);
        }

        CollectingTestListener listener = new CollectingTestListener();
        CLog.i(""Running %s.%s on user %d"", testClassName, testMethodName, mTestUserId);
        boolean runResult = getDevice().runInstrumentationTestsAsUser(testRunner, mTestUserId,
                listener);

        final TestRunResult result = listener.getCurrentRunResults();
        if (result.isRunFailure()) {
            throw new AssertionError(
                    ""Failed to successfully run device tests for ""
                            + result.getName()
                            + "": ""
                            + result.getRunFailureMessage());
        }
        if (result.getNumTests() == 0) {
            throw new AssertionError(""No tests were run on the device"");
        }

        if (result.hasFailedTests()) {
            // build a meaningful error message
            StringBuilder errorBuilder = new StringBuilder(""On-device tests failed:\n"");
            for (Map.Entry<TestDescription, TestResult> resultEntry :
                    result.getTestResults().entrySet()) {
                if (!resultEntry.getValue().getStatus().equals(TestStatus.PASSED)) {
                    errorBuilder.append(resultEntry.getKey().toString());
                    errorBuilder.append("":\n"");
                    errorBuilder.append(resultEntry.getValue().getStackTrace());
                }
            }
            throw new AssertionError(errorBuilder.toString());
        }

        return runResult;
    }

    private void setDeviceOwner() throws DeviceNotAvailableException {
        String componentName = DEVICE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS;
        String command = ""dpm set-device-owner '"" + componentName + ""'"";
        String commandOutput = getDevice().executeShellCommand(command);
        CLog.logAndDisplay(LogLevel.INFO, ""Output for command "" + command + "": "" + commandOutput);
        assertTrue(
                commandOutput + "" expected to start with \""Success:\"" "" + commandOutput,
                commandOutput.startsWith(""Success:""));
    }

    protected boolean hasDeviceFeature(String requiredFeature) throws DeviceNotAvailableException {
        String command = ""pm list features"";
        String commandOutput = getDevice().executeShellCommand(command);
        CLog.i(""Output for command "" + command + "": "" + commandOutput);

        Set<String> availableFeatures = new HashSet<>();
        for (String feature : commandOutput.split(""\\s+"")) {
            // Each line in the output of the command has the format ""feature:{FEATURE_VALUE}"".
            String[] tokens = feature.split("":"");
            assertTrue(
                    ""\"""" + feature + ""\"" expected to have format feature:{FEATURE_VALUE}"",
                    tokens.length > 1);
            assertEquals(feature, ""feature"", tokens[0]);
            availableFeatures.add(tokens[1]);
        }
        boolean result = availableFeatures.contains(requiredFeature);
        if (!result) {
            CLog.d(""Device doesn't have required feature "" + requiredFeature + "". Test won't run."");
        }
        return result;
    }

    protected void grantDpmWrapperPermissions(int userId) throws Exception {
        // TODO(b/176993670): INTERACT_ACROSS_USERS is needed by DevicePolicyManagerWrapper to
        // get the current user; the permission is available on mDeviceOwnerUserId because it
        // was installed with -g, but not on mPrimaryUserId as the app is intalled by code
        // (DPMS.manageUserUnchecked(), which don't grant it (as this is a privileged permission
        // that's not available to 3rd party apps). If we get rid of DevicePolicyManagerWrapper,
        // we won't need to grant it anymore.
        CLog.i(""Granting INTERACT_ACROSS_USERS to DO %s on user %d as it will need to send ordered ""
                + ""broadcasts to user 0"", DEVICE_OWNER_PKG, userId);
        getDevice().executeShellCommand(""pm grant --user "" + userId + "" "" + DEVICE_OWNER_PKG
                + "" android.permission.INTERACT_ACROSS_USERS"");
    }

    // TODO (b/174775905) remove after exposing the check from ITestDevice.
    boolean isHeadlessSystemUserMode() throws DeviceNotAvailableException {
        return isHeadlessSystemUserMode(getDevice());
    }

    // TODO (b/174775905) remove after exposing the check from ITestDevice.
    public static boolean isHeadlessSystemUserMode(ITestDevice device)
            throws DeviceNotAvailableException {
        final String result = device
                .executeShellCommand(""getprop ro.fw.mu.headless_system_user"").trim();
        return ""true"".equalsIgnoreCase(result);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/src/com/google/android/cts/settings/PrivacyDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.google.android.cts.deviceowner.DeviceOwnerTest"	"isTrue"	""	"3: system user apps"	"public void test/*
 *.
 */
package com.google.android.cts.deviceowner;

import static android.server.wm.WindowManagerState.STATE_RESUMED;

import static com.google.common.truth.Truth.assertWithMessage;

import android.app.admin.DeviceAdminReceiver;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.RemoteException;
import android.provider.Settings;
import android.server.wm.WindowManagerStateHelper;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.Until;
import android.test.InstrumentationTestCase;
import android.util.Log;

import androidx.test.InstrumentationRegistry;

import com.android.bedstead.dpmwrapper.DeviceOwnerHelper;
import com.android.bedstead.dpmwrapper.TestAppSystemServiceFactory;
import com.android.compatibility.common.util.enterprise.DeviceAdminReceiverUtils;

/**
 * Class for device-owner based tests.
 *
 * <p>This class handles making sure that the test is the device owner and that it has an active
 * admin registered if necessary. The admin component can be accessed through {@link #getWho()}.
 */
public final class DeviceOwnerTest extends InstrumentationTestCase {

    private static final String TAG = DeviceOwnerTest.class.getSimpleName();

    private static final String WORK_POLICY_INFO_TEXT = ""Your work policy info"";

    public static final int TIMEOUT_MS = 2_000;

    protected Context mContext;
    protected UiDevice mDevice;

    /** Device Admin receiver for DO. */
    public static final class BasicAdminReceiver extends DeviceAdminReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            // Ignore intents used by DpmWrapper IPC between current and system users
            if (DeviceOwnerHelper.runManagerMethod(this, context, intent)) return;

            // Hack used to manually disable the admin during development
            if (DeviceAdminReceiverUtils.disableSelf(context, intent)) return;

            super.onReceive(context, intent);
        }
    }

    static final String PACKAGE_NAME = DeviceOwnerTest.class.getPackage().getName();
    static final ComponentName RECEIVER_COMPONENT =
            new ComponentName(PACKAGE_NAME, BasicAdminReceiver.class.getName());

    protected DevicePolicyManager mDevicePolicyManager;
    protected PackageManager mPackageManager;
    protected boolean mIsDeviceOwner;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getInstrumentation().getContext();
        mDevice = UiDevice.getInstance(getInstrumentation());
        mPackageManager = mContext.getPackageManager();
        mDevicePolicyManager = TestAppSystemServiceFactory.getDevicePolicyManager(mContext,
                BasicAdminReceiver.class);

        mIsDeviceOwner = mDevicePolicyManager.isDeviceOwnerApp(PACKAGE_NAME);
        Log.d(TAG, ""setup(): dpm="" + mDevicePolicyManager + "", isDO: "" + mIsDeviceOwner);

        if (mIsDeviceOwner) {
            assertWithMessage(""isAdminActive(%s)"", RECEIVER_COMPONENT)
                    .that(mDevicePolicyManager.isAdminActive(RECEIVER_COMPONENT)).isTrue();

            // Note DPM.getDeviceOwner() now always returns null on non-DO users as of NYC.
            assertWithMessage(""%s.getDeviceOwner()"", mDevicePolicyManager)
                    .that(mDevicePolicyManager.getDeviceOwner()).isEqualTo(PACKAGE_NAME);
        }

        try {
            mDevice.setOrientationNatural();
        } catch (RemoteException e) {
            throw new RuntimeException(""failed to freeze device orientation"", e);
        }
        wakeupDeviceAndPressHome();
    }

    private void wakeupDeviceAndPressHome() throws Exception {
        mDevice.wakeUp();
        mDevice.pressMenu();
        mDevice.pressHome();
    }

    @Override
    protected void tearDown() throws Exception {
        mDevice.pressBack();
        mDevice.pressHome();
        mDevice.waitForIdle(TIMEOUT_MS); // give UI time to finish animating
    }

    private boolean launchPrivacyAndCheckWorkPolicyInfo() throws Exception {
        // Launch Settings
        launchSettingsPage(InstrumentationRegistry.getContext(), Settings.ACTION_PRIVACY_SETTINGS);

        // Wait for loading permission usage data.
        mDevice.waitForIdle(TIMEOUT_MS);

        Log.d(TAG, ""Waiting "" + TIMEOUT_MS + ""ms for the '"" + WORK_POLICY_INFO_TEXT + ""' message"");

        return (null != mDevice.wait(Until.findObject(By.text(WORK_POLICY_INFO_TEXT)), TIMEOUT_MS));
    }

    private void launchSettingsPage(Context ctx, String pageName) throws Exception {
        Intent intent = new Intent(pageName);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);

        ComponentName componentName =
                ctx.getPackageManager()
                        .resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY)
                        .getComponentInfo()
                        .getComponentName();
        ctx.startActivity(intent);

        new WindowManagerStateHelper().waitForActivityState(componentName, STATE_RESUMED);
    }

    private void disableWorkPolicyInfoActivity() {
        mContext.getPackageManager()
                .setComponentEnabledSetting(
                        new ComponentName(mContext, WorkPolicyInfoActivity.class),
                        PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
                        PackageManager.DONT_KILL_APP);
    }

    private void launchPrivacySettingsAndAssertWorkPolicyInfoIsShowing() throws Exception {
        assertWithMessage(""Work policy info (%s) on settings entry"", WORK_POLICY_INFO_TEXT)
                .that(launchPrivacyAndCheckWorkPolicyInfo()).isTrue();
    }

    private void launchPrivacySettingsAndAssertWorkPolicyInfoIsNotShowing() throws Exception {
        assertWithMessage(""Work policy info (%s) on settings entry"", WORK_POLICY_INFO_TEXT)
                .that(launchPrivacyAndCheckWorkPolicyInfo()).isFalse();
    }

    /**
     * If the app is the active device owner and has work policy info, then we should have a Privacy
     * entry for it.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/settings/app/DeviceOwnerApp/src/com/google/android/cts/deviceowner/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher3.ShortcutManagerPreBackupTest"	"testPreBackup"	""	"2: user apps"	"public void testPreBackup() {
        getLauncherApps().pinShortcuts(PUBLISHER1_PKG, list(""s3"", ""ms1"", ""ms2""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER2_PKG, list(""s1"", ""s3"", ""ms2""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER3_PKG, list(""s1"", ""s3"", ""ms1""),
                getUserHandle());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher3/src/android/content/pm/cts/shortcut/backup/launcher3/ShortcutManagerPreBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest"	"testRestoreWrongKey"	""	"1: visible"	"public void testRestoreWrongKey() {
        // Restored pinned shortcuts are from a package with a different signature, so the dynamic
        // pinned shortcuts should be disabled-invisible.

        assertWith(getManager().getDynamicShortcuts())
                .isEmpty();

        assertWith(getManager().getPinnedShortcuts())
                .haveIds(""ms1"", ""ms2"");

        assertWith(getManager().getManifestShortcuts())
                .haveIds(""ms1"", ""ms2"")
                .areAllPinned()
                .areAllEnabled();

        final ShortcutInfo s1 = new ShortcutInfo.Builder(getContext(), ""s1"")
                .setShortLabel(""shortlabel1_new_one"")
                .setActivity(getActivity(""MainActivity""))
                .setIntents(new Intent[]{new Intent(""main"")})
                .build();

        assertTrue(getManager().addDynamicShortcuts(list(s1)));

        final ShortcutInfo s2 = new ShortcutInfo.Builder(getContext(), ""s2"")
                .setShortLabel(""shortlabel2_updated"")
                .build();
        assertTrue(getManager().updateShortcuts(list(s2)));

        assertWith(getManager().getDynamicShortcuts())
                .haveIds(""s1"") // s2 not in the list.
                .areAllEnabled();
    }

    /**
     * Restored on an older version that have no manifest shortcuts.
     *
     * In this case, the publisher wouldn't see the manifest shortcuts, and they're overwritable.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher4old/src/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.publisher4.ShortcutManagerPostBackupTest"	"testInvisibleIgnored"	""	"1: visible"	"public void testInvisibleIgnored() throws Exception {
        assertNoShortcuts();

        // Make sure ""disable"" won't change the disabled reason. Also make sure ""enable"" won't
        // enable them.
        getManager().disableShortcuts(list(""s1"", ""s2"", ""ms1""));
        assertNoShortcuts();

        getManager().enableShortcuts(list(""ms1"", ""s2""));
        assertNoShortcuts();

        getManager().enableShortcuts(list(""ms1""));
        assertNoShortcuts();

        getManager().removeDynamicShortcuts(list(""s1"", ""ms1""));
        assertNoShortcuts();

        getManager().removeAllDynamicShortcuts();
        assertNoShortcuts();


        // Force launcher 4 to be the default launcher so it'll receive the pin request.
        setDefaultLauncher(getInstrumentation(),
                ""android.content.pm.cts.shortcut.backup.launcher4"");

        // Update, set and add have been tested already, so let's test ""pin"".

        final CountDownLatch latch = new CountDownLatch(1);

        PersistableBundle pb = new PersistableBundle();
        pb.putBoolean(""acceptit"", true);

        final ShortcutInfo ms2 = new ShortcutInfo.Builder(getContext(), ""ms2"")
                .setShortLabel(""ms2_new_one"")
                .setActivity(getActivity(""MainActivity""))
                .setIntents(new Intent[]{new Intent(""main2"")})
                .setExtras(pb)
                .build();

        final String myIntentAction = ""cts-shortcut-intent_"" + new SecureRandom().nextInt();
        final IntentFilter myFilter = new IntentFilter(myIntentAction);

        final BroadcastReceiver onResult = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };
        getContext().registerReceiver(onResult, myFilter);
        assertTrue(getManager().requestPinShortcut(ms2,
                PendingIntent.getBroadcast(getContext(), 0, new Intent(myIntentAction),
                        PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_MUTABLE_UNAUDITED).getIntentSender()));

        assertTrue(""Didn't receive requestPinShortcut() callback."",
                latch.await(30, TimeUnit.SECONDS));

        assertWith(getManager().getPinnedShortcuts())
                .haveIds(""ms2"")
                .areAllNotDynamic()
                .areAllNotManifest()
                .areAllMutable()
                .areAllPinned()
                .forAllShortcuts(si -> {
                    // requestPinShortcut() acts as an update in this case, so even though
                    // the original shortcut hada  long label, this one does not.
                    assertTrue(TextUtils.isEmpty(si.getLongLabel()));
                });
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/publisher4old/src/android/content/pm/cts/shortcut/backup/publisher4/ShortcutManagerPostBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher2.ShortcutManagerPostBackupTest"	"testWithUninstall_afterAppRestore"	""	"1: visible"	"public void testWithUninstall_afterAppRestore() {
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER1_PKG))
                .haveIds(""ms1"", ""ms2"", ""s3"")
                .areAllEnabled()

                .selectByIds(""s3"", ""ms2"")
                .areAllPinned()

                .revertToOriginalList()
                .selectByIds(""ms1"")
                .areAllNotPinned();

        // Note s3 and ms2 were disabled before backup, so they were not backed up.
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER2_PKG))
                .haveIds(""ms1"", ""ms2"", ""s2"")
                .areAllEnabled()

                .selectByIds(""s2"", ""ms1"")
                .areAllPinned()

                .revertToOriginalList()
                .selectByIds(""ms2"")
                .areAllNotPinned();

        // Package3 doesn't support backup&restore.
        // However, the manifest-shortcuts will be republished anyway, so they're still pinned.
        // The dynamic shortcuts can't be restored, but we'll still restore them as disabled
        // shortcuts that are not visible to the publisher.
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER3_PKG))
                .haveIds(""ms1"", ""ms2"", ""s2"", ""s3"")
                .areAllPinned()

                .selectByIds(""ms1"", ""ms2"")
                .areAllEnabled()
                .areAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_NOT_DISABLED)

                .revertToOriginalList()
                .selectByIds(""s2"", ""s3"")
                .areAllDisabled()
                .areAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_BACKUP_NOT_SUPPORTED)
        ;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher2/src/android/content/pm/cts/shortcut/backup/launcher2/ShortcutManagerPostBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher2.ShortcutManagerPreBackupTest"	"testPreBackup"	""	"2: user apps"	"public void testPreBackup() {
        getLauncherApps().pinShortcuts(PUBLISHER1_PKG, list(""s3"", ""ms2""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER2_PKG, list(""s2"", ""s3"", ""ms1""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER3_PKG, list(""s2"", ""s3"", ""ms1"", ""ms2""),
                getUserHandle());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher2/src/android/content/pm/cts/shortcut/backup/launcher2/ShortcutManagerPreBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher4.ShortcutManagerPostBackupTest"	"testInvisibleIgnored"	""	"1: visible"	"public void testInvisibleIgnored() {
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER4_PKG))
                .haveIds(""ms1"", ""ms2"", ""s1"", ""s2"")

                .selectByIds(""ms1"", ""s1"", ""s2"")
                .areAllPinned()
                .areAllDisabled()
                .areAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_VERSION_LOWER)
                .areAllNotDynamic()
                .areAllNotManifest()

                .revertToOriginalList()
                .selectByIds(""ms2"")
                .areAllEnabled()
                .areAllPinned()
                .areAllNotDynamic()
                .areAllNotManifest();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher4old/src/android/content/pm/cts/shortcut/backup/launcher4/ShortcutManagerPostBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher4.ShortcutManagerPreBackupTest"	"testPreBackup"	""	"2: user apps"	"public void testPreBackup() {
        // Pin all the shortcuts.
        getLauncherApps().pinShortcuts(PUBLISHER4_PKG, list(""s1"", ""s2"", ""ms1"", ""ms2""),
                getUserHandle());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher4old/src/android/content/pm/cts/shortcut/backup/launcher4/ShortcutManagerPreBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher1.ShortcutManagerPostBackupTest"	"testWithUninstall_afterAppRestore"	""	"1: visible"	"public void testWithUninstall_afterAppRestore() {
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER1_PKG))
                .haveIds(""ms1"", ""ms2"", ""s1"")
                .areAllEnabled()

                .selectByIds(""s1"", ""ms1"")
                .areAllPinned()

                .revertToOriginalList()
                .selectByIds(""ms2"")
                .areAllNotPinned();

        // Note s3 and ms2 were disabled before backup, so they were not backed up.
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER2_PKG))
                .haveIds(""ms1"", ""ms2"", ""s1"", ""s2"")
                .areAllEnabled()

                .selectByIds(""s1"", ""s2"")
                .areAllPinned()

                .revertToOriginalList()
                .selectByIds(""ms1"")
                .areAllNotPinned();

        // Package3 doesn't support backup&restore.
        // However, the manifest-shortcuts will be republished anyway, so they're still pinned.
        // The dynamic shortcuts can't be restored, but we'll still restore them as disabled
        // shortcuts that are not visible to the publisher.
        assertWith(getPackageShortcuts(ShortcutManagerPreBackupTest.PUBLISHER3_PKG))
                .haveIds(""ms1"", ""ms2"", ""s1"", ""s2"")
                .areAllPinned()

                .selectByIds(""ms1"", ""ms2"")
                .areAllEnabled()
                .areAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_NOT_DISABLED)

                .revertToOriginalList()
                .selectByIds(""s1"", ""s2"")
                .areAllDisabled()
                .areAllWithDisabledReason(ShortcutInfo.DISABLED_REASON_BACKUP_NOT_SUPPORTED)
                ;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher1/src/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPostBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.backup.launcher1.ShortcutManagerPreBackupTest"	"testPreBackup"	""	"2: user apps"	"public void testPreBackup() {
        getLauncherApps().pinShortcuts(PUBLISHER1_PKG, list(""s1"", ""ms1""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER2_PKG, list(""s1"", ""s2"", ""ms2""), getUserHandle());
        getLauncherApps().pinShortcuts(PUBLISHER3_PKG, list(""s1"", ""s2"", ""ms1"", ""ms2""),
                getUserHandle());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/backup/launcher1/src/android/content/pm/cts/shortcut/backup/launcher1/ShortcutManagerPreBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	Test missing possiblu	"android.content.pm.cts.shortcut.upgrade.ShortcutManagerPreUpgradeTest"	"testPreUpgrade"	""	"1: apps"	"public void testPreUpgrade() {
        Log.i(Consts.TAG, ""Pre: ResIDs="" + R.drawable.black_32x32 + "", "" + R.drawable.black_64x64);

        // Publish shortcuts with drawable icons.
        final Icon icon1 = Icon.createWithResource(getContext(), R.drawable.black_32x32);
        final Icon icon2 = Icon.createWithResource(getContext(), R.drawable.black_64x64);

        // Store the original resource ID in the extras.
        final PersistableBundle b1 = new PersistableBundle();
        b1.putInt(Consts.EXTRA_ICON_RES_ID, R.drawable.black_32x32);
        final ShortcutInfo s1 = new ShortcutInfo.Builder(getContext(), ""s1"")
                .setShortLabel(""shortlabel1"")
                .setIcon(icon1)
                .setIntents(new Intent[]{new Intent(Intent.ACTION_VIEW)})
                .setExtras(b1)
                .build();

        final PersistableBundle b2 = new PersistableBundle();
        b2.putInt(Consts.EXTRA_ICON_RES_ID, R.drawable.black_64x64);
        final ShortcutInfo s2 = new ShortcutInfo.Builder(getContext(), ""s2"")
                .setShortLabel(""shortlabel2"")
                .setIcon(icon2)
                .setIntents(new Intent[]{new Intent(Intent.ACTION_VIEW)})
                .setExtras(b2)
                .build();

        assertTrue(getManager().setDynamicShortcuts(list(s1, s2)));

        // Set this package as a default launcher to access LauncherApps.
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Check the published icons as a launcher.
        assertIconDimensions(getContext().getPackageName(), ""s1"", icon1);
        assertIconDimensions(getContext().getPackageName(), ""s2"", icon2);

        // Paranoid: this should fail.
        boolean notThrown = false;
        try {
            assertIconDimensions(getContext().getPackageName(), ""s1"", icon2);
            notThrown = true;
        } catch (AssertionFailedError expected) {
            // okay
        }
        assertFalse(notThrown);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/upgrade/src/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPreUpgradeTest.java"	"Can not find ""indicator"" what do the code call this?"	tbd not sure	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.upgrade.ShortcutManagerPostUpgradeTest"	"testPostUpgrade"	""	"1: apps"	"public void testPostUpgrade() {
        Log.i(Consts.TAG, ""Post: ResIDs="" + R.drawable.black_32x32 + "", "" + R.drawable.black_64x64);

        // Get the shortcuts published by the ""pre"" apk.

        // Check their original res IDs (stored in the extras) and make sure the res IDs are
        // different now.
        assertWith(getManager().getDynamicShortcuts())
                .haveIds(""s1"", ""s2"")
                .forShortcutWithId(""s1"", s -> {
                    assertTrue(
                            R.drawable.black_32x32 !=
                            s.getExtras().getInt(Consts.EXTRA_ICON_RES_ID));
                })
                .forShortcutWithId(""s2"", s -> {
                    assertTrue(
                            R.drawable.black_64x64 !=
                            s.getExtras().getInt(Consts.EXTRA_ICON_RES_ID));
                });

        // Next, actually fetch the icons as a launcher, and make sure the dimensions are correct.
        final Icon icon1 = Icon.createWithResource(getContext(), R.drawable.black_32x32);
        final Icon icon2 = Icon.createWithResource(getContext(), R.drawable.black_64x64);

        // Set this package as a default launcher to access LauncherApps.
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Check the published icons as a launcher.
        assertIconDimensions(getContext().getPackageName(), ""s1"", icon1);
        assertIconDimensions(getContext().getPackageName(), ""s2"", icon2);

        // Paranoid: this should fail.
        boolean notThrown = false;
        try {
            assertIconDimensions(getContext().getPackageName(), ""s1"", icon2);
            notThrown = true;
        } catch (AssertionFailedError expected) {
            // okay
        }
        assertFalse(notThrown);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/upgrade/src/android/content/pm/cts/shortcut/upgrade/ShortcutManagerPostUpgradeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test05_getAndLaunch_managed"	""	"3: system user apps"	"public void test05_getAndLaunch_managed() {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        final UserHandle userCurrent = android.os.Process.myUserHandle();
        final UserHandle userOther = getOtherUser();

        final ShortcutQuery q = new ShortcutQuery()
                .setQueryFlags(ShortcutQuery.FLAG_MATCH_DYNAMIC)
                .setPackage(getContext().getPackageName())
                .setShortcutIds(list(""s1""));

        assertWith(getLauncherApps().getShortcuts(q, userCurrent))
                .haveIds(""s1"")
                .areAllDynamic()
                .forShortcutWithId(""s1"", si -> {
                    assertEquals(""label2"", si.getShortLabel());
                    assertEquals(userCurrent, si.getUserHandle());
                });

        // Accessing the main profile from the managed profile, which will not throw, but will
        // return an empty result.
        assertWith(getLauncherApps().getShortcuts(q, userOther)).isEmpty();

        // TODO Make sure the activity actually starts.
        getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,
                userCurrent);

        try {
            // This won't throw SecurityException either.
            getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,
                    userOther);
            fail(""Didn't throw ActivityNotFoundException"");
        } catch (ActivityNotFoundException e) {
            // okay
        }
    }

    private UserHandle getOtherUser() {
        for (UserHandle user : getContext().getSystemService(UserManager.class).getUserProfiles()) {
            if (user.equals(android.os.Process.myUserHandle())) {
                continue;
            }
            return user;
        }
        fail(""Other user not found"");
        return null;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test01_managedProfileNotStarted"	""	"2: user apps"	"public void test01_managedProfileNotStarted() {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Get user-0's handle.
        final UserHandle userManaged = getOtherUser();

        final ShortcutQuery q = new ShortcutQuery();

        try {
            getLauncherApps().getShortcuts(q, userManaged);
            fail(""Didn't throw SecurityException"");
        } catch (IllegalStateException e) {
            assertTrue(e.getMessage().contains(""locked or not running""));
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test02_createShortuctsOnPrimaryUser"	""	"1: user"	"public void test02_createShortuctsOnPrimaryUser() {
        assertTrue(getManager().setDynamicShortcuts(list(
                new ShortcutInfo.Builder(getContext(), ""s1"")
                        .setShortLabel(""label1"")
                        .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(
                                new ComponentName(getContext(), MainActivity.class))).build())));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerManagedUserTest"	"test04_getAndLaunch_primary"	""	"2: user apps"	"public void test04_getAndLaunch_primary() {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        final UserHandle userCurrent = android.os.Process.myUserHandle();
        final UserHandle userOther = getOtherUser();

        final ShortcutQuery q = new ShortcutQuery()
                .setQueryFlags(ShortcutQuery.FLAG_MATCH_DYNAMIC)
                .setPackage(getContext().getPackageName())
                .setShortcutIds(list(""s1""));
        assertWith(getLauncherApps().getShortcuts(q, userCurrent))
                .haveIds(""s1"")
                .areAllDynamic()
                .forShortcutWithId(""s1"", si -> {
                    assertEquals(""label1"", si.getShortLabel());
                    assertEquals(userCurrent, si.getUserHandle());
                });
        assertWith(getLauncherApps().getShortcuts(q, userOther))
                .haveIds(""s1"")
                .areAllDynamic()
                .forShortcutWithId(""s1"", si -> {
                    assertEquals(""label2"", si.getShortLabel());
                    assertEquals(userOther, si.getUserHandle());
                });

        // Just call start and make sure they don't throw.
        getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,
                userCurrent);

        // TODO Make sure the activity actually starts.
        getLauncherApps().startShortcut(getContext().getPackageName(), ""s1"", null, null,
                userOther);
    }

    @Suppress // Having a launcher on managed profile is not supported, so don't run."	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerManagedUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerSecondaryUserTest"	"testCreateAndStart"	""	"3: system user apps"	"public void testCreateAndStart() {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Publish a shortcut.
        final UserHandle user = android.os.Process.myUserHandle();

        assertTrue(getManager().setDynamicShortcuts(list(
                new ShortcutInfo.Builder(getContext(), ""s1"")
                    .setShortLabel(""label"")
                    .setIntent(new Intent(Intent.ACTION_VIEW).setComponent(
                            new ComponentName(getContext(), MainActivity.class))).build())));

        // Retrieve as a launcher.
        final ShortcutQuery q = new ShortcutQuery()
                .setQueryFlags(ShortcutQuery.FLAG_MATCH_DYNAMIC)
                .setPackage(getContext().getPackageName())
                .setShortcutIds(list(""s1""));
        final List<ShortcutInfo> list = getLauncherApps().getShortcuts(q, user);
        assertWith(list)
                .haveIds(""s1"")
                .areAllDynamic()
                .forShortcutWithId(""s1"", si -> {
                    assertEquals(user, si.getUserHandle());
                });

        final ShortcutInfo s1 = list.get(0);

        // Just make sure they don't throw SecurityException.
        getLauncherApps().getShortcutIconDrawable(s1, DisplayMetrics.DENSITY_DEFAULT);
        getLauncherApps().getShortcutBadgedIconDrawable(s1, DisplayMetrics.DENSITY_DEFAULT);

        final long now = System.currentTimeMillis();

        // Start it.
        getLauncherApps().startShortcut(s1, null, null);

        retryUntil(() -> MainActivity.getLastCreateTime() >= now, ""Activity not started"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcut.multiuser.ShortcutManagerSecondaryUserTest"	"testDifferentUserNotAccessible"	""	"2: user apps"	"public void testDifferentUserNotAccessible() throws Exception {
        Launcher.setAsDefaultLauncher(getInstrumentation(), getContext());

        // Get user-0's handle.
        final UserHandle user0 = getUser0Handle();

        final ShortcutQuery q = new ShortcutQuery();

        try {
            getLauncherApps().getShortcuts(q, user0);
            fail(""Didn't throw SecurityException"");
        } catch (SecurityException e) {
            assertTrue(e.getMessage().contains(""unrelated profile""));
        }
    }

    private static UserHandle getUser0Handle() throws Exception {
        Method of = UserHandle.class.getMethod(""of"", int.class);

        return (UserHandle) of.invoke(null, 0);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/deviceside/multiuser/src/android/content/pm/cts/shortcut/multiuser/ShortcutManagerSecondaryUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerMultiuserTest"	"testManagedUser"	"CtsShortcutHostTestCases"	"1: user"	"public void testManagedUser() throws Exception {
        if (!mIsMultiuserSupported || !mIsManagedUserSupported) {
            return;
        }
        // First, create users
        final int profileId = createProfile(getPrimaryUserId());

        installAppAsUser(TARGET_APK, getPrimaryUserId());
        installAppAsUser(TARGET_APK, profileId);

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerManagedUserTest"",
                ""test01_managedProfileNotStarted"", getPrimaryUserId());

        getDevice().startUser(profileId, /* wait */ true);

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerManagedUserTest"",
                ""test02_createShortuctsOnPrimaryUser"", getPrimaryUserId());
        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerManagedUserTest"",
                ""test03_createShortuctsOnManagedProfile"", profileId);

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerManagedUserTest"",
                ""test04_getAndLaunch_primary"", getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerMultiuserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerMultiuserTest"	"testSecondaryUser"	"CtsShortcutHostTestCases"	"1: user"	"public void testSecondaryUser() throws Exception {
        if (!mIsMultiuserSupported) {
            return;
        }
        final int secondUserID = getOrCreateSecondaryUser();

        getDevice().startUser(secondUserID, true);
        getDevice().switchUser(secondUserID);
        Thread.sleep(5000);
        installAppAsUser(TARGET_APK, secondUserID);
        waitForBroadcastIdle();
        Thread.sleep(5000);

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerSecondaryUserTest"", secondUserID);

        getDevice().stopUser(secondUserID);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerMultiuserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        installAppAsUser(LAUNCHER1_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER2_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER3_APK, getPrimaryUserId());

        installAppAsUser(PUBLISHER1_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER2_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER3_APK, getPrimaryUserId());

        // Prepare shortcuts
        runDeviceTestsAsUser(PUBLISHER1_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(PUBLISHER2_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(PUBLISHER3_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER1_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER2_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER3_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        // Tweak shortcuts a little bit to make disabled shortcuts.
        runDeviceTestsAsUser(PUBLISHER2_PKG, "".ShortcutManagerPreBackup2Test"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER1_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER2_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER3_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER1_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER2_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER3_PKG);


        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // First, restore launcher 1, which shouldn't see any shortcuts from the packages yet.
        installAppAsUser(LAUNCHER1_APK, getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER1_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall_beforeAppRestore"",
                getPrimaryUserId());

        // Restore the apps.  Even though launcher 2 hasn't been re-installed yet, they should
        // still have pinned shortcuts by launcher 2.
        installAppAsUser(PUBLISHER1_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER2_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER3_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER1_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER2_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER3_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());

        // Now launcher 1 should see shortcuts from these packages.
        runDeviceTestsAsUser(LAUNCHER1_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall_afterAppRestore"",
                getPrimaryUserId());

        // Then restore launcher 2 and check.
        installAppAsUser(LAUNCHER2_APK, getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER2_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall_afterAppRestore"",
                getPrimaryUserId());


        // Run the same package side check.  The result should be the same.
        runDeviceTestsAsUser(PUBLISHER1_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER2_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER3_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithUninstall"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_downgrade"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore_downgrade() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from the new version and pin them.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Restore the old version of the app, and the launcher.
        // (But we don't check the launcher's version, so using old is fine.)
        installAppAsUser(LAUNCHER4_OLD_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_OLD_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoredOnOldVersion"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoredOnOldVersion"",
                getPrimaryUserId());

        // New install the original version. All blocked shortcuts should re-appear.
        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoredOnNewVersion"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoredOnNewVersion"",
                getPrimaryUserId());

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_backupWasDisabled"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore_backupWasDisabled() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from ""nobackup"" version.

        installAppAsUser(PUBLISHER4_NEW_NOBACKUP_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the ""backup-ok"" version. But restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testBackupDisabled"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_backupIsDisabled"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore_backupIsDisabled() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from backup-ok version.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the nobackup version. Restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_NEW_NOBACKUP_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testBackupDisabled"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_wrongKey"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore_wrongKey() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from backup-ok version.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the nobackup version. Restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_NEW_WRONGKEY_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreWrongKey"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreWrongKey"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_noManifestOnOldVersion"	"CtsShortcutHostTestCases"	"2: user apps"	"public void testBackupAndRestore_noManifestOnOldVersion() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from backup-ok version.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the nobackup version. Restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_OLD_NO_MANIFST_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreNoManifestOnOldVersion"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreNoManifestOnOldVersion"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_noManifestOnNewVersion"	"CtsShortcutHostTestCases"	"3: user apps visible"	"public void testBackupAndRestore_noManifestOnNewVersion() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from backup-ok version.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the nobackup version. Restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_NEW_NO_MANIFST_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreNoManifestOnNewVersion"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testRestoreNoManifestOnNewVersion"",
                getPrimaryUserId());
    }

    /**
     * Make sure invisible shortcuts are ignored by all API calls.
     *
     * (Restore from new to old-nomanifest)
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_invisibleIgnored"	"CtsShortcutHostTestCases"	"3: user apps visible"	"public void testBackupAndRestore_invisibleIgnored() throws Exception {
        if (!mSupportsBackup) {
            return;
        }
        dumpsys(""Test start"");

        // First, publish shortcuts from backup-ok version.

        installAppAsUser(PUBLISHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        dumpsys(""Before backup"");

        // Backup
        doBackup();

        // Uninstall all apps
        uninstallPackageAndWaitUntilBroadcastsDrain(LAUNCHER4_PKG);
        uninstallPackageAndWaitUntilBroadcastsDrain(PUBLISHER4_PKG);

        // Make sure the shortcut service handled all the uninstall broadcasts.
        waitUntilPackagesGone();

        // Do it one more time just in case...
        waitUntilBroadcastsDrain();

        // Then restore
        doRestore();

        dumpsys(""After restore"");

        // Install the nobackup version. Restoration is limited.
        installAppAsUser(LAUNCHER4_NEW_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER4_OLD_NO_MANIFST_APK, getPrimaryUserId());
        waitUntilBroadcastsDrain();

        runDeviceTestsAsUser(PUBLISHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testInvisibleIgnored"",
                getPrimaryUserId());

        runDeviceTestsAsUser(LAUNCHER4_PKG, "".ShortcutManagerPostBackupTest"",
                ""testInvisibleIgnored"",
                getPrimaryUserId());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerBackupTest"	"testBackupAndRestore_withNoUninstall"	"CtsShortcutHostTestCases"	"1: user"	"public void testBackupAndRestore_withNoUninstall() throws Exception {
        if (!mSupportsBackup) {
            return;
        }

        installAppAsUser(PUBLISHER1_APK, getPrimaryUserId());
        installAppAsUser(PUBLISHER3_APK, getPrimaryUserId());

        // Prepare shortcuts
        runDeviceTestsAsUser(PUBLISHER1_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());
        runDeviceTestsAsUser(PUBLISHER3_PKG, "".ShortcutManagerPreBackupTest"", getPrimaryUserId());

        // Backup & restore.
        doBackup();
        doRestore();

        // Make sure the manifest shortcuts are re-published.
        runDeviceTestsAsUser(PUBLISHER1_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithNoUninstall"",
                getPrimaryUserId());

        runDeviceTestsAsUser(PUBLISHER3_PKG, "".ShortcutManagerPostBackupTest"",
                ""testWithNoUninstall"",
                getPrimaryUserId());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerBackupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"android.content.pm.cts.shortcuthost.ShortcutManagerUpgradeTest"	"testUpgrade"	"CtsShortcutHostTestCases"	"1: user"	"public void testUpgrade() throws Exception {
        installAppAsUser(VERSION1_APK, getPrimaryUserId());

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerPreUpgradeTest"", getPrimaryUserId());

        installAppAsUser(VERSION2_APK, getPrimaryUserId());

        runDeviceTestsAsUser(TARGET_PKG, "".ShortcutManagerPostUpgradeTest"", getPrimaryUserId());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/shortcuts/hostside/src/android/content/pm/cts/shortcuthost/ShortcutManagerUpgradeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"testAccountCheck"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@LargeTest
    public void testAccountCheck() throws Exception {
        installAppAsUser(APK_AUTH, mProfileOwnerUserId);
        installAppAsUser(APK_NON_TEST_ONLY, mProfileOwnerUserId);
        installAppAsUser(APK_TEST_ONLY, mProfileOwnerUserId);
        runCleanupTestOnlyOwnerAllowingFailure(mProfileOwnerUserId);

        // For tests in headless system user mode, test packages need to be installed for
        // system user even for PO tests since PO will be set via adb command which will require
        // TestAuthenticator installed on system user.
        if (mDeviceOwnerUserId != mProfileOwnerUserId) {
            installAppAsUser(APK_AUTH, mDeviceOwnerUserId);
            installAppAsUser(APK_NON_TEST_ONLY, mDeviceOwnerUserId);
            installAppAsUser(APK_TEST_ONLY, mDeviceOwnerUserId);
            runCleanupTestOnlyOwnerAllowingFailure(mDeviceOwnerUserId);
        }

        runCleanupNonTestOnlyOwnerAllowingFailure();
        removeAllAccountsAllowingFailure();
        try {
//            runTest(""testCheckPreconfiguredAccountFeatures"");
//
//            final boolean hasPreconfiguredAccounts = hasAccounts();
//
//            // All pre-configured accounts must be ""compatible"", so the test-only owner can be
//            // installed.
//            assertTestOnlyInstallable();
//
//            if (hasPreconfiguredAccounts) {
//                assertNonTestOnlyNotInstallable();
//            } else {
//                assertNonTestOnlyInstallable();
//            }
//
            // Incompatible, type A.
            runTest(""testAddIncompatibleA"");

            assertTestOnlyNotInstallable();
            assertNonTestOnlyNotInstallable();

            // Incompatible, type B.
            removeAllAccounts();
            runTest(""testAddIncompatibleB"");

            assertTestOnlyNotInstallable();
            assertNonTestOnlyNotInstallable();

            // Incompatible, type C.
            removeAllAccounts();
            runTest(""testAddIncompatibleC"");

            assertTestOnlyNotInstallable();
            assertNonTestOnlyNotInstallable();

            // Compatible.
            removeAllAccounts();
            runTest(""testAddCompatible"");

            assertTestOnlyInstallable(); // Now test-only owner can be accepted.
            assertNonTestOnlyNotInstallable();

            // 2 compatible accounts.
            removeAllAccounts();
            runTest(""testAddCompatible"");
            runTest(""testAddCompatible"");

            assertTestOnlyInstallable(); // Now test-only owner can be accepted.

            assertNonTestOnlyNotInstallable();

            // 2 compatible accounts + 1 incompatible.
            removeAllAccounts();
            runTest(""testAddIncompatibleA"");
            runTest(""testAddCompatible"");
            runTest(""testAddCompatible"");

            assertTestOnlyNotInstallable();
            assertNonTestOnlyNotInstallable();

            // 2 compatible accounts + 1 incompatible, different order.
            removeAllAccounts();
            runTest(""testAddCompatible"");
            runTest(""testAddCompatible"");
            runTest(""testAddIncompatibleB"");

            assertTestOnlyNotInstallable();
            assertNonTestOnlyNotInstallable();
        } catch (Throwable th) {
            CLog.w(""Tests failed; current accounts are:"");
            CLog.w(getDevice().executeShellCommand(""dumpsys account""));

            // Dump accounts
            throw th;
        }
    }

    /**
     * Make sure even if the ""test-only"" flag changes when an app is updated, we still respect
     * the original value.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"runCleanupNonTestOnlyOwnerAllowingFailure"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import android.platform.test.annotations.LargeTest;

import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Set of tests to test setting DO and PO when there is account on the user.
 *
 * <p>For example, setting DO or PO shall fail at DPMS.hasIncompatibleAccountsOrNonAdbNoLock when
 * there was incompatible account on the user.
 */
public class AccountCheckHostSideTest extends BaseDevicePolicyTest {
    private static final String APK_NON_TEST_ONLY = ""CtsAccountCheckNonTestOnlyOwnerApp.apk"";
    private static final String APK_TEST_ONLY = ""CtsAccountCheckTestOnlyOwnerApp.apk"";
    private static final String APK_TEST_ONLY_UPDATE = ""CtsAccountCheckTestOnlyOwnerUpdateApp.apk"";
    private static final String APK_AUTH = ""CtsAccountCheckAuthApp.apk"";

    private static final String PACKAGE_NON_TEST_ONLY =
            ""com.android.cts.devicepolicy.accountcheck.nontestonly"";
    private static final String PACKAGE_TEST_ONLY =
            ""com.android.cts.devicepolicy.accountcheck.testonly"";
    private static final String PACKAGE_AUTH = ""com.android.cts.devicepolicy.accountcheck.auth"";

    private static final String OWNER_TEST_ONLY = PACKAGE_TEST_ONLY
            + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";
    private static final String OWNER_NON_TEST_ONLY = PACKAGE_NON_TEST_ONLY
            + ""/com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"";

    private static final String TEST_CLASS =
            ""com.android.cts.devicepolicy.accountcheck.AccountCheckTest"";

    private static final String DISALLOW_MODIFY_ACCOUNTS = ""no_modify_accounts"";

    private boolean mDeviceOwnerCanHaveAccounts;
    private boolean mProfileOwnerCanHaveAccounts;
    private int mProfileOwnerUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mProfileOwnerUserId = mPrimaryUserId;
        mDeviceOwnerCanHaveAccounts = !isRestrictionSetOnUser(mDeviceOwnerUserId,
                DISALLOW_MODIFY_ACCOUNTS);
        // Optimization to avoid running dumpsys again
        if (mProfileOwnerUserId == mDeviceOwnerUserId) {
            mProfileOwnerCanHaveAccounts = mDeviceOwnerCanHaveAccounts;
        } else {
            mProfileOwnerCanHaveAccounts = !isRestrictionSetOnUser(mProfileOwnerUserId,
                    DISALLOW_MODIFY_ACCOUNTS);
        }
        CLog.d(""mDeviceOwnerUserId: "" +  mDeviceOwnerUserId
                + "" mDeviceOwnerCanHaveAccounts: "" + mDeviceOwnerCanHaveAccounts
                + "" mProfileOwnerUserId: "" + mProfileOwnerUserId
                + "" mProfileOwnerCanHaveAccounts: "" + mProfileOwnerCanHaveAccounts);
        assumeTrue(""Neither primary user or device owner user is allowed to add accounts"",
                mDeviceOwnerCanHaveAccounts || mProfileOwnerCanHaveAccounts);
    }

    @Override
    public void tearDown() throws Exception {
        if (getDevice().getInstalledPackageNames().contains(PACKAGE_AUTH)) {
            runCleanupTestOnlyOwnerAllowingFailure(mProfileOwnerUserId);
            if (mDeviceOwnerUserId != mProfileOwnerUserId) {
                runCleanupTestOnlyOwnerAllowingFailure(mDeviceOwnerUserId);
            }
            runCleanupNonTestOnlyOwnerAllowingFailure();

            // This shouldn't be needed since we're uninstalling the authenticator,
            // but sometimes the account manager fails to clean up?
            removeAllAccountsAllowingFailure();
        }

        getDevice().uninstallPackage(PACKAGE_AUTH);
        getDevice().uninstallPackage(PACKAGE_TEST_ONLY);
        getDevice().uninstallPackage(PACKAGE_NON_TEST_ONLY);

        super.tearDown();
    }

    private void runTest(String method) throws Exception {
        runTestAsUser(method, mProfileOwnerUserId);
        if (mDeviceOwnerCanHaveAccounts && mProfileOwnerUserId != mDeviceOwnerUserId) {
            runTestAsUser(method, mDeviceOwnerUserId);
        }
    }

    private void runTestAsUser(String method, int userId) throws Exception {
        runDeviceTestsAsUser(PACKAGE_AUTH, TEST_CLASS, method, userId);
    }

    private void runCleanupTestOnlyOwner(int userId) throws Exception {
        assertTrue(removeAdmin(OWNER_TEST_ONLY, userId));
    }

    private void runCleanupTestOnlyOwnerAllowingFailure(int userId) throws Exception {
        try {
            runCleanupTestOnlyOwner(userId);
        } catch (AssertionError ignore) {
        }
    }

    private void runCleanupNonTestOnlyOwner() throws Exception {
        runTest(""testCleanUpNonTestOwner"");
    }

    private void runCleanupNonTestOnlyOwnerAllowingFailure() throws Exception {
        try {
            runCleanupNonTestOnlyOwner();
        } catch (AssertionError ignore) {
        }
    }

    private void removeAllAccounts() throws Exception {
        runTest(""testRemoveAllAccounts"");
    }

    private void removeAllAccountsAllowingFailure() throws Exception {
        try {
            removeAllAccounts();
        } catch (AssertionError ignore) {
        }
    }

    private void assertTestOnlyInstallable() throws Exception {
        if (mDeviceOwnerCanHaveAccounts) {
            setDeviceOwnerOrFail(OWNER_TEST_ONLY, mDeviceOwnerUserId);
            runCleanupTestOnlyOwner(mDeviceOwnerUserId);
        }
        if (mProfileOwnerCanHaveAccounts) {
            setProfileOwnerOrFail(OWNER_TEST_ONLY, mProfileOwnerUserId);
            runCleanupTestOnlyOwner(mProfileOwnerUserId);
        }
    }

    private void assertNonTestOnlyInstallable() throws Exception {
        if (mDeviceOwnerCanHaveAccounts) {
            setDeviceOwnerOrFail(OWNER_NON_TEST_ONLY, mDeviceOwnerUserId);
            runCleanupNonTestOnlyOwner();
        }
        if (mProfileOwnerCanHaveAccounts) {
            setProfileOwnerOrFail(OWNER_NON_TEST_ONLY, mProfileOwnerUserId);
            runCleanupNonTestOnlyOwner();
        }
    }

    private void assertTestOnlyNotInstallable() throws Exception {
        if (mDeviceOwnerCanHaveAccounts) {
            setDeviceOwnerExpectingFailure(OWNER_TEST_ONLY, mDeviceOwnerUserId);
            runCleanupTestOnlyOwnerAllowingFailure(mDeviceOwnerUserId);
        }
        if (mProfileOwnerCanHaveAccounts) {
            setProfileOwnerExpectingFailure(OWNER_TEST_ONLY, mProfileOwnerUserId);
            runCleanupTestOnlyOwnerAllowingFailure(mProfileOwnerUserId);
        }
    }

    private void assertNonTestOnlyNotInstallable() throws Exception {
        if (mDeviceOwnerCanHaveAccounts) {
            setDeviceOwnerExpectingFailure(OWNER_NON_TEST_ONLY, mDeviceOwnerUserId);
            runCleanupNonTestOnlyOwnerAllowingFailure();
        }
        if (mProfileOwnerCanHaveAccounts) {
            setProfileOwnerExpectingFailure(OWNER_NON_TEST_ONLY, mProfileOwnerUserId);
            runCleanupNonTestOnlyOwnerAllowingFailure();
        }
    }

    private boolean hasAccounts() throws Exception {
        final String accountDump = getDevice().executeShellCommand(""dumpsys account"");

        final Pattern p = Pattern.compile(""^\\s*Accounts\\:\\s*(\\d+)"", Pattern.MULTILINE);
        final Matcher m = p.matcher(accountDump);
        if (!m.find()) {
            fail(""Unable to obtain # of accounts"");
            return true;
        }
        final String count = m.group(1);

        CLog.i(""# of preconfigured accounts="" + count);

        return Integer.parseInt(count) > 0;
    }

    /**
     * This set of tests will test whether DO and PO can be set on the user when
     * there is/are different types of accounts added on the target test user.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.AccountCheckHostSideTest"	"testInheritTestOnly"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testInheritTestOnly() throws Exception {
        installAppAsUser(APK_TEST_ONLY, mDeviceOwnerUserId);

        // Set as DO.
        try {
            setDeviceOwnerOrFail(OWNER_TEST_ONLY, mDeviceOwnerUserId);
        } catch (Throwable e) {
            CLog.e(""Unable to install DO, can't continue the test. Skipping.  hasAccounts=""
                    + hasAccounts());
            return;
        }
        try {

            // Override with a package that's not test-only.
            installAppAsUser(APK_TEST_ONLY_UPDATE, mDeviceOwnerUserId);

            // But DPMS keeps the original test-only flag, so it's still removable.
            runCleanupTestOnlyOwner(mDeviceOwnerUserId);

            return;
        } catch (Throwable e) {
            // If failed, re-install the APK with test-only=true.
            try {
                installAppAsUser(APK_TEST_ONLY, mDeviceOwnerUserId);
                runCleanupTestOnlyOwner(mDeviceOwnerUserId);
            } catch (Exception inner) {
                CLog.e(""Unable to clean up after a failure: "" + e.getMessage());
            }

            throw e;
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AccountCheckHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *
 */
package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Ignore;
import org.junit.Test;

/**
 * This class tests the provisioning flow with an APK that declares a single receiver with
 * BIND_DEVICE_ADMIN permissions, which was a requirement for the app sending the
 * ACTION_PROVISION_MANAGED_PROFILE intent before Android M.
 */
// We need multi user to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class ManagedProfileProvisioningSingleAdminTest extends BaseDevicePolicyTest {

    private static final String SINGLE_ADMIN_PKG = ""com.android.cts.devicepolicy.singleadmin"";
    private static final String SINGLE_ADMIN_APP_APK = ""CtsDevicePolicySingleAdminTestApp.apk"";

    private int mProfileUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();


        removeTestUsers();
        installAppAsUser(SINGLE_ADMIN_APP_APK, mPrimaryUserId);
        mProfileUserId = 0;
    }

    @Override
    public void tearDown() throws Exception {
        if (mProfileUserId != 0) {
            removeUser(mProfileUserId);
        }
        getDevice().uninstallPackage(SINGLE_ADMIN_PKG);

        super.tearDown();
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest"	"testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@Ignore(""b/183395856 Figure out if it should be removed or converted to a device side test."")
    public void testEXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME() throws Exception {
        runDeviceTestsAsUser(SINGLE_ADMIN_PKG, "".ProvisioningSingleAdminTest"",
                ""testManagedProfileProvisioning"", mPrimaryUserId);

        mProfileUserId = getFirstManagedProfileUserId();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutKeepScreenOnWindow"	"CtsDevicePolicyManagerTestCases"	"3: system user interaction"	"public void testWorkProfileTimeoutKeepScreenOnWindow() throws Exception {
        assumeHasSecureLockScreenFeature();

        setUpWorkProfileTimeout();

        startTestActivity(mProfileUserId, true);
        Thread.sleep(PROFILE_TIMEOUT_DELAY_MS);

        verifyOnlyProfileLocked(false);
    }

    private void setUpWorkProfileTimeout() throws DeviceNotAvailableException {
        // Set separate challenge.
        changeUserCredential(TEST_PASSWORD, null, mProfileUserId);

        // Make sure the profile is not prematurely locked.
        verifyUserCredential(TEST_PASSWORD, mProfileUserId);
        verifyOnlyProfileLocked(false);
        // Set profile timeout to 5 seconds.
        runProfileTimeoutTest(""testSetWorkProfileTimeout"", mProfileUserId);
    }

    private void verifyOnlyProfileLocked(boolean locked) throws DeviceNotAvailableException {
        final String expectedResultTest = locked ? ""testDeviceLocked"" : ""testDeviceNotLocked"";
        runProfileTimeoutTest(expectedResultTest, mProfileUserId);
        // Primary profile shouldn't be locked.
        runProfileTimeoutTest(""testDeviceNotLocked"", mPrimaryUserId);
    }

    private void simulateUserInteraction(int timeMs) throws Exception {
        final long endTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(timeMs);
        final UserActivityEmulator helper = new UserActivityEmulator(getDevice());
        while (System.nanoTime() < endTime) {
            helper.tapScreen();
            // Just in case to prevent busy loop.
            Thread.sleep(100);
        }
    }

    private void runProfileTimeoutTest(String method, int userId)
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".ProfileTimeoutTestHelper"",
                method, userId);
    }

    private void startTestActivity(int profileUserId, boolean keepScreenOn) throws Exception {
        getDevice().executeShellCommand(String.format(
                ""am start-activity -W --user %d --ez keep_screen_on %s %s/.TimeoutActivity"",
                profileUserId, keepScreenOn, MANAGED_PROFILE_PKG));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutBackground"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testWorkProfileTimeoutBackground() throws Exception {
        assumeHasSecureLockScreenFeature();

        setUpWorkProfileTimeout();

        startTestActivity(mPrimaryUserId, true);
        simulateUserInteraction(PROFILE_TIMEOUT_DELAY_MS);

        verifyOnlyProfileLocked(true);
    }

    /** Profile should get locked if it is in foreground but with no user activity. */
    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutIdleActivity"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWorkProfileTimeoutIdleActivity() throws Exception {
        assumeHasSecureLockScreenFeature();

        setUpWorkProfileTimeout();

        startTestActivity(mProfileUserId, false);
        Thread.sleep(PROFILE_TIMEOUT_DELAY_MS);

        verifyOnlyProfileLocked(true);
    }

    /** User activity in profile should prevent it from locking. */
    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTimeoutTest"	"testWorkProfileTimeoutUserActivity"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testWorkProfileTimeoutUserActivity() throws Exception {
        assumeHasSecureLockScreenFeature();

        setUpWorkProfileTimeout();

        startTestActivity(mProfileUserId, false);
        simulateUserInteraction(PROFILE_TIMEOUT_DELAY_MS);

        verifyOnlyProfileLocked(false);
    }

    /** Keep screen on window flag in the profile should prevent it from locking. */
    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTimeoutTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_MaxUsers"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testCreateAndManageUser_MaxUsers() throws Exception {
        assumeCanCreateOneManagedUser();

        int maxUsers = getDevice().getMaxNumberOfUsersSupported();

        // System user is already there, so we can create up to maxUsers - 1.
        int existingUsers = 1;

        // On headless user mode, current user is also there
        if (isHeadlessSystemUserMode()) {
            existingUsers++;
        }

        CLog.d(""testCreateAndManageUser_MaxUsers(): maxUxers=%d, existingUsers=%d"", maxUsers,
                existingUsers);

        for (int i = 0; i < maxUsers - existingUsers; i++) {
            executeCreateAndManageUserTest(""testCreateAndManageUser"");
        }
        // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.
        executeCreateAndManageUserTest(""testCreateAndManageUser_MaxUsers"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser.
     * {@link android.app.admin.DevicePolicyManager#getSecondaryUsers} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StartInBackground_MaxRunningUsers"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testCreateAndManageUser_StartInBackground_MaxRunningUsers() throws Exception {
        assumeCanStartNewUser();

        int maxUsers = getDevice().getMaxNumberOfUsersSupported();
        int maxRunningUsers = getDevice().getMaxNumberOfRunningUsersSupported();

        // Primary user is already running, so we can create and start up to minimum of above - 1.
        int usersToCreateAndStart = Math.min(maxUsers, maxRunningUsers) - 1;

        // On headless user mode, system user is also running
        if (isHeadlessSystemUserMode()) {
            usersToCreateAndStart--;
        }

        CLog.d(""testCreateAndManageUser_StartInBackground_MaxRunningUsers(): maxUxers=%d, ""
                + ""maxRunningUsers=%d, usersToCreateAndStart=%d"", maxUsers, maxRunningUsers,
                usersToCreateAndStart);
        for (int i = 0; i < usersToCreateAndStart; i++) {
            executeCreateAndManageUserTest(""testCreateAndManageUser_StartInBackground"");
        }

        if (maxUsers > maxRunningUsers) {
            // The next startUserInBackground should return USER_OPERATION_ERROR_MAX_RUNNING_USERS.
            executeCreateAndManageUserTest(
                    ""testCreateAndManageUser_StartInBackground_MaxRunningUsers"");
        } else {
            // The next createAndManageUser should return USER_OPERATION_ERROR_MAX_USERS.
            executeCreateAndManageUserTest(""testCreateAndManageUser_MaxUsers"");
        }
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_Ephemeral"	"CtsDevicePolicyManagerTestCases"	"3: system user apps"	"public void testCreateAndManageUser_Ephemeral() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_Ephemeral"");

        List<Integer> newUsers = getUsersCreatedByTests();
        assertEquals(1, newUsers.size());
        int newUserId = newUsers.get(0);

        // Get the flags of the new user and check the user is ephemeral.
        int flags = getUserFlags(newUserId);
        assertEquals(""Ephemeral flag must be set"", FLAG_EPHEMERAL, flags & FLAG_EPHEMERAL);
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#LEAVE_ALL_SYSTEM_APPS_ENABLED} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_LeaveAllSystemApps"	"CtsDevicePolicyManagerTestCases"	"3: system user apps"	"public void testCreateAndManageUser_LeaveAllSystemApps() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_LeaveAllSystemApps"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetSystemUpdatePolicyLogged"	"CtsDevicePolicyManagerTestCases"	"1: system"	"@Ignore(""b/145932189"")
    public void testSetSystemUpdatePolicyLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetAutomaticInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_INSTALL_AUTOMATIC)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetWindowedInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_INSTALL_WINDOWED)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetPostponeInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_POSTPONE)
                    .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".SystemUpdatePolicyTest"", ""testSetEmptytInstallPolicy"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SYSTEM_UPDATE_POLICY_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setInt(TYPE_NONE)
                    .build());
    }

    @FlakyTest(bugId = 127101449)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testAdminActionBookkeeping"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testAdminActionBookkeeping() throws Exception {
        if (isHeadlessSystemUserMode()) {
            // TODO(b/176993670):ALLOW_TEST_API_ACCESS is needed by DevicePolicyManagerWrapper to
            // access test apis
            allowTestApiAccess(DEVICE_OWNER_PKG);
            // This test has to run as system user since the test will get KeyStore instance for
            // current user.
            executeDeviceOwnerTestMethod("".AdminActionBookkeepingTest"",
                    ""testGetPolicyInstalledCaCerts"");
        } else {
            // This test will be skipped for headless system user mode since headless system user
            // does not have IME.
            executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                    ""testIsDefaultInputMethodSet"");
            executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                    ""testGetPolicyInstalledCaCerts"");
        }

        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testRetrieveSecurityLogs"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testRequestBugreport"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testGetLastNetworkLogRetrievalTime"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testDeviceOwnerOrganizationName"");
        executeDeviceTestMethod("".AdminActionBookkeepingTest"",
                ""testIsDeviceManaged"");

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AdminActionBookkeepingTest"", ""testRetrieveSecurityLogs"");
        }, new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_SECURITY_LOGS_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_PRE_REBOOT_SECURITY_LOGS_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build());
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AdminActionBookkeepingTest"", ""testRequestBugreport"");
        }, new DevicePolicyEventWrapper.Builder(EventId.REQUEST_BUGREPORT_VALUE)
                .setAdminPackageName(DEVICE_OWNER_PKG)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetLocationEnabled"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSetLocationEnabled() throws Exception {
        // Currently this method is only available for device owners, so on headless system user
        // it must run on system user.
        executeDeviceOwnerTestOnDeviceOwnerUser(""SetLocationEnabledTest"");
    }

    /**
     *  Only allow provisioning flow to be disabled if Android TV device
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testAllowProvisioningProperty"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testAllowProvisioningProperty() throws Exception {
        boolean isProvisioningAllowedForNormalUsers =
                getBooleanSystemProperty(""ro.config.allowuserprovisioning"", true);
        assertTrue(isProvisioningAllowedForNormalUsers || isTv());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testDisallowFactoryReset"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testDisallowFactoryReset() throws Exception {
        int adminVersion = 24;
        // NOTE: the restriction must be set on primary user as it will launch SetPolicyActivity,
        // but the admin must be installed on USER_SYSTEM, otherwise wipeData() on headless system
        // user mode would wipe the current user (instead of factory resetting the device)
        changeUserRestrictionOrFail(""no_factory_reset"", true, mPrimaryUserId, DEVICE_OWNER_PKG);
        int adminUserId = USER_SYSTEM;

        String deviceAdminPkg = DeviceAdminHelper.getDeviceAdminApkPackage(adminVersion);
        String deviceAdminReceiver = DeviceAdminHelper.getAdminReceiverComponent(adminVersion);
        try {
            installAppAsUser(DeviceAdminHelper.getDeviceAdminApkFileName(adminVersion),
                    adminUserId);
            setDeviceAdmin(deviceAdminReceiver, adminUserId);
            runDeviceTestsAsUser(
                    deviceAdminPkg,
                    DeviceAdminHelper.getDeviceAdminJavaPackage() + "".WipeDataTest"",
                    ""testWipeDataThrowsSecurityException"", adminUserId);
        } finally {
            removeAdmin(deviceAdminReceiver, adminUserId);
            getDevice().uninstallPackage(deviceAdminPkg);
        }
    }

    // The backup service cannot be enabled if the backup feature is not supported.
    @RequiresAdditionalFeatures({FEATURE_BACKUP})"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_onlyForegroundUserCalledByDeviceOwner"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testListForegroundAffiliatedUsers_onlyForegroundUserCalledByDeviceOwner()
            throws Exception {
        assumeHeadlessSystemUserMode(""redundant, same as ""
                + ""testListForegroundAffiliatedUsers_onlyForegroundUser"");

        // Must temporarily revoke permission to make sure internal checks are allowing it to be
        // called by profile owner
        revokePermission(DEVICE_OWNER_PKG, PERMISSION_INTERACT_ACROSS_USERS, mDeviceOwnerUserId);

        try {
            executeDeviceOwnerTestMethod("".ListForegroundAffiliatedUsersTest"",
                    ""testListForegroundAffiliatedUsers_onlyForegroundUser"");
        } finally {
            grantPermission(DEVICE_OWNER_PKG, PERMISSION_INTERACT_ACROSS_USERS, mDeviceOwnerUserId,
                    /* reason= */ null);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testWifiNetworkConfigurationWithoutFineLocationPermission"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testWifiNetworkConfigurationWithoutFineLocationPermission() throws Exception {
        executeShellCommand(""pm revoke --user %d %s android.permission.ACCESS_FINE_LOCATION"",
                mPrimaryUserId, DEVICE_OWNER_PKG);

        executeDeviceOwnerTest(""WifiNetworkConfigurationWithoutFineLocationPermissionTest"");
    }

    private int createAffiliatedSecondaryUser() throws Exception {
        final int userId = createUser();
        installAppAsUser(INTENT_RECEIVER_APK, userId);
        // For headless system user mode, after DO is setup, PO is already
        // set on the secondary user. Meanwhile, it requires additional permission while
        // using DevicePolicyManagerWrapper while using DPM APIs from secondary user.
        if (!isHeadlessSystemUserMode()) {
            installAppAsUser(DEVICE_OWNER_APK, userId);
            setProfileOwnerOrFail(DEVICE_OWNER_COMPONENT, userId);
        } else {
            grantDpmWrapperPermissions(DEVICE_OWNER_PKG, userId);
        }
        wakeupAndDismissKeyguard();

        // Setting the same affiliation ids on both users
        CLog.d(""createAffiliatedSecondaryUser(): deviceOwnerId="" + mDeviceOwnerUserId
                + "", primaryUserId="" + mPrimaryUserId + "", newUserId="" + userId);
        affiliateUsers(DEVICE_OWNER_PKG, mDeviceOwnerUserId, userId);

        return userId;
    }

    private void executeDeviceTestMethod(String className, String testName,
            Map<String, String> params) throws Exception {
        runDeviceTestsAsUser(DEVICE_OWNER_PKG, className, testName,
                /* deviceOwnerUserId */ mPrimaryUserId, params);
    }

    private void executeCreateAndManageUserTest(String testMethod) throws Exception {
        // These test must be run on device owner user, as it's the only user that's guaranteed  to
        // be always running (otherwise, the test case would crash on headless system user mode if
        // the current user is switched out)
        executeDeviceOwnerTestMethod("".CreateAndManageUserTest"", testMethod);
    }

    private void executeListForegroundAffiliatedUsersTest(String testMethod) throws Exception {
        // These test must be run on device owner user, as it's the only user that's guaranteed  to
        // be always running (otherwise, the test case would crash on headless system user mode if
        // the current user is switched out)
        executeDeviceOwnerTestMethod("".ListForegroundAffiliatedUsersTest"", testMethod);
    }

    private void assertNewUserStopped() throws Exception {
        List<Integer> newUsers = getUsersCreatedByTests();
        assertEquals(1, newUsers.size());
        int newUserId = newUsers.get(0);

        assertFalse(getDevice().isUserRunning(newUserId));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testRemoteBugreportWithTwoUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRemoteBugreportWithTwoUsers() throws Exception {
        assumeCanCreateAdditionalUsers(1);
        final int userId = createUser();
        try {
            executeDeviceTestMethod("".RemoteBugreportTest"",
                    ""testRequestBugreportThrowsSecurityException"");
        } finally {
            removeUser(userId);
        }
    }

    @FlakyTest(bugId = 137071121)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_LowStorage"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_LowStorage() throws Exception {
        assumeCanCreateOneManagedUser();

        try {
            // Force low storage
            getDevice().setSetting(""global"", ""sys_storage_threshold_percentage"", ""100"");
            getDevice().setSetting(""global"", ""sys_storage_threshold_max_bytes"",
                    String.valueOf(Long.MAX_VALUE));

            // The next createAndManageUser should return USER_OPERATION_ERROR_LOW_STORAGE.
            executeCreateAndManageUserTest(""testCreateAndManageUser_LowStorage"");
        } finally {
            getDevice().executeShellCommand(
                    ""settings delete global sys_storage_threshold_percentage"");
            getDevice().executeShellCommand(
                    ""settings delete global sys_storage_threshold_max_bytes"");
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_GetSecondaryUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_GetSecondaryUsers() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_GetSecondaryUsers"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and switch
     * to the user.
     * {@link android.app.admin.DevicePolicyManager#switchUser} is tested.
     */
    @FlakyTest(bugId = 131743223)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_SwitchUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_SwitchUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_SwitchUser"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and switch
     * to the user to test stop user while target user is in foreground.
     * {@link android.app.admin.DevicePolicyManager#stopUser} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_CannotStopCurrentUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_CannotStopCurrentUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_CannotStopCurrentUser"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StartInBackground"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_StartInBackground() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_StartInBackground"");
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method and start
     * the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#startUserInBackground} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StopUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_StopUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_StopUser"");
        assertNewUserStopped();
    }

    /**
     * Test creating an ephemeral user using the DevicePolicyManager's createAndManageUser method
     * and start the user in background, user is then stopped. The user should be removed
     * automatically even when DISALLOW_REMOVE_USER is set.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(
                ""testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"");
        assertEquals(0, getUsersCreatedByTests().size());
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#logoutUser} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_LogoutUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_LogoutUser() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_LogoutUser"");
        assertNewUserStopped();
    }

    /**
     * Test creating an user using the DevicePolicyManager's createAndManageUser method, affiliate
     * the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#isAffiliatedUser} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_Affiliated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_Affiliated() throws Exception {
        assumeCanStartNewUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_Affiliated"");
    }

    /**
     * Test creating an ephemeral user using the DevicePolicyManager's createAndManageUser method,
     * affiliate the user and start the user in background to test APIs on that user.
     * {@link android.app.admin.DevicePolicyManager#isEphemeralUser} is tested.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_SkipSetupWizard"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_SkipSetupWizard() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_SkipSetupWizard"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_AddRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_AddRestrictionSet() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_AddRestrictionSet"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCreateAndManageUser_RemoveRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateAndManageUser_RemoveRestrictionSet() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testCreateAndManageUser_RemoveRestrictionSet"");
    }

    @FlakyTest(bugId = 126955083)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testUserAddedOrRemovedBroadcasts"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserAddedOrRemovedBroadcasts() throws Exception {
        assumeCanCreateOneManagedUser();

        executeCreateAndManageUserTest(""testUserAddedOrRemovedBroadcasts"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testUserSession"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserSession() throws Exception {
        executeDeviceOwnerTest(""UserSessionTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testNetworkLoggingWithTwoUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLoggingWithTwoUsers() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        final int userId = createUser();
        try {
            // The feature can be enabled, but in a ""paused"" state. Attempting to retrieve logs
            // should throw security exception.
            executeDeviceTestMethod("".NetworkLoggingTest"",
                    ""testRetrievingNetworkLogsThrowsSecurityException"");
        } finally {
            removeUser(userId);
        }
    }

    @FlakyTest(bugId = 137092833)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testNetworkLoggingWithSingleUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLoggingWithSingleUser() throws Exception {
        executeDeviceTestMethod("".NetworkLoggingTest"", ""testProvidingWrongBatchTokenReturnsNull"");
        executeDeviceTestMethod("".NetworkLoggingTest"", ""testNetworkLoggingAndRetrieval"",
                Collections.singletonMap(ARG_NETWORK_LOGGING_BATCH_COUNT, Integer.toString(1)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testWifiConfigLockdown"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWifiConfigLockdown() throws Exception {
        assumeHasWifiFeature();

        try (LocationModeSetter locationModeSetter = new LocationModeSetter(getDevice())) {
            installAppAsUser(WIFI_CONFIG_CREATOR_APK, mPrimaryUserId);
            locationModeSetter.setLocationEnabled(true);
            executeDeviceOwnerTest(""WifiConfigLockdownTest"");
        } finally {
            getDevice().uninstallPackage(WIFI_CONFIG_CREATOR_PKG);
        }
    }

    /**
     * Execute WifiSetHttpProxyTest as device owner.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testCannotSetDeviceOwnerAgain"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotSetDeviceOwnerAgain() throws Exception {
        // verify that we can't set the same admin receiver as device owner again
        assertFalse(setDeviceOwner(
                DEVICE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,
                /*expectFailure*/ true));

        // verify that we can't set a different admin receiver as device owner
        try {
            installAppAsUser(MANAGED_PROFILE_APK, mPrimaryUserId);
            assertFalse(setDeviceOwner(
                    MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId,
                    /*expectFailure*/ true));
        } finally {
            // Remove the device owner in case the test fails.
            removeAdmin(MANAGED_PROFILE_PKG + ""/"" + MANAGED_PROFILE_ADMIN, mPrimaryUserId);
            getDevice().uninstallPackage(MANAGED_PROFILE_PKG);
        }
    }

    // Execute HardwarePropertiesManagerTest as a device owner."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testIsManagedProfileProvisioningAllowed_deviceOwnerIsSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
    public void testIsManagedProfileProvisioningAllowed_deviceOwnerIsSet() throws Exception {
        executeDeviceTestMethod("".PreDeviceOwnerTest"",
                ""testIsProvisioningNotAllowedForManagedProfileAction"");
    }

    @FlakyTest(bugId = 137096267)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testPackageInstallCache"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPackageInstallCache() throws Exception {
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(getBuild());
        final File apk = buildHelper.getTestFile(TEST_APP_APK);
        try {
            getDevice().uninstallPackage(TEST_APP_PKG);
            assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));

            // Install the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageInstall"", mPrimaryUserId);
            assertMetricsLogged(getDevice(), () -> {
                runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                        ""testKeepPackageCache"", mPrimaryUserId);
            }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEEP_UNINSTALLED_PACKAGES_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(false)
                    .setStrings(TEST_APP_PKG)
                    .build());

            // Remove the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", mPrimaryUserId);

            assertMetricsLogged(getDevice(), () -> {
                // Should be able to enable the cached package in primary user
                runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                        ""testInstallExistingPackage"", mPrimaryUserId);
            }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_EXISTING_PACKAGE_VALUE)
                    .setAdminPackageName(DEVICE_OWNER_PKG)
                    .setBoolean(false)
                    .setStrings(TEST_APP_PKG)
                    .build());
        } finally {
            String command = ""rm "" + TEST_APP_LOCATION + apk.getName();
            getDevice().executeShellCommand(command);
            getDevice().uninstallPackage(TEST_APP_PKG);
        }
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testPackageInstallCache_multiUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPackageInstallCache_multiUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        final int userId = createAffiliatedSecondaryUser();
        CompatibilityBuildHelper buildHelper = new CompatibilityBuildHelper(getBuild());
        final File apk = buildHelper.getTestFile(TEST_APP_APK);
        try {
            getDevice().uninstallPackage(TEST_APP_PKG);
            assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));

            // Install the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageInstall"", mPrimaryUserId);

            // Should be able to enable the package in secondary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testInstallExistingPackage"", userId);

            // Remove the package in both user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", mPrimaryUserId);
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", userId);

            // Install the package in secondary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageInstall"", userId);

            // Should be able to enable the package in primary user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testInstallExistingPackage"", mPrimaryUserId);

            // Keep the package in cache
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testKeepPackageCache"", mPrimaryUserId);

            // Remove the package in both user
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", mPrimaryUserId);
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testPackageUninstall"", userId);

            // Should be able to enable the cached package in both users
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testInstallExistingPackage"", userId);
            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PackageInstallTest"",
                    ""testInstallExistingPackage"", mPrimaryUserId);
        } finally {
            String command = ""rm "" + TEST_APP_LOCATION + apk.getName();
            getDevice().executeShellCommand(command);
            getDevice().uninstallPackage(TEST_APP_PKG);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testDefaultSmsApplication"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDefaultSmsApplication() throws Exception {
        assumeHasTelephonyFeature();

        installAppAsUser(SIMPLE_SMS_APP_APK, mPrimaryUserId);

        executeDeviceTestMethod("".DefaultSmsApplicationTest"", ""testSetDefaultSmsApplication"");

        getDevice().uninstallPackage(SIMPLE_SMS_APP_PKG);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testNoHiddenActivityFoundTest"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testNoHiddenActivityFoundTest() throws Exception {
        try {
            // Install app to primary user
            installAppAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_APK, mPrimaryUserId);
            installAppAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_SUPPORT_APK, mPrimaryUserId);
            installAppAsUser(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK, mPrimaryUserId);

            // Run test to check if launcher api shows hidden app
            String mSerialNumber = Integer.toString(getUserSerialNumber(mPrimaryUserId));
            runDeviceTestsAsUser(BaseLauncherAppsTest.LAUNCHER_TESTS_PKG,
                    BaseLauncherAppsTest.LAUNCHER_TESTS_CLASS,
                    ""testDoPoNoTestAppInjectedActivityFound"",
                    mPrimaryUserId, Collections.singletonMap(BaseLauncherAppsTest.PARAM_TEST_USER,
                            mSerialNumber));
        } finally {
            getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);
            getDevice().uninstallPackage(BaseLauncherAppsTest.LAUNCHER_TESTS_SUPPORT_APK);
            getDevice().uninstallPackage(BaseLauncherAppsTest.LAUNCHER_TESTS_APK);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_singleUser_verifyMetricIsLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_singleUser_verifyMetricIsLogged()
            throws Exception {
        final List<Integer> otherUserIds = new ArrayList<>();
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);

            // Set the package under test as a protected package.
            assertMetricsLogged(getDevice(),
                    () -> executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                            ""testSetUserControlDisabledPackages""),
                    new DevicePolicyEventWrapper.Builder(
                            EventId.SET_USER_CONTROL_DISABLED_PACKAGES_VALUE)
                            .setAdminPackageName(DEVICE_OWNER_PKG)
                            .setStrings(new String[] {SIMPLE_APP_PKG})
                            .build());
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_singleUser_verifyPackageNotStopped"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_singleUser_verifyPackageNotStopped()
            throws Exception {
        final List<Integer> otherUserIds = new ArrayList<>();
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);
            // Set the package under test as a protected package.
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testSetUserControlDisabledPackages"");

            // Try to stop the package on the primary user.
            tryStoppingProtectedPackage(otherUserIds, /* canUserStopPackage= */ false);
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_singleUser_reboot_verifyPackageNotStopped"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_singleUser_reboot_verifyPackageNotStopped()
            throws Exception {
        final List<Integer> otherUserIds = new ArrayList<>();
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);
            // Set the package under test as a protected package.
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testSetUserControlDisabledPackages"");

            // Reboot and verify protected packages are persisted
            rebootAndWaitUntilReady();

            // The simple app package seems to be set into stopped state on reboot.
            // Launch the activity again to get it out of stopped state on the primary user.
            startProtectedPackage(otherUserIds);
            // Try to stop the package on the primary user.
            tryStoppingProtectedPackage(otherUserIds, /* canUserStopPackage= */ false);
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_multiUser_verifyMetricIsLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_multiUser_verifyMetricIsLogged()
            throws Exception {
        assumeCanCreateAdditionalUsers(1);
        final int userId = createUser();
        final List<Integer> otherUserIds = new ArrayList<>();
        otherUserIds.add(userId);
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);

            // Set the package under test as a protected package.
            assertMetricsLogged(getDevice(),
                    () -> executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                            ""testSetUserControlDisabledPackages""),
                    new DevicePolicyEventWrapper.Builder(
                            EventId.SET_USER_CONTROL_DISABLED_PACKAGES_VALUE)
                            .setAdminPackageName(DEVICE_OWNER_PKG)
                            .setStrings(new String[] {SIMPLE_APP_PKG})
                            .build());
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, userId);
            removeUser(userId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_multiUser_verifyPackageNotStopped"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_multiUser_verifyPackageNotStopped()
            throws Exception {
        assumeCanCreateAdditionalUsers(1);
        final int userId = createUser();
        final List<Integer> otherUserIds = new ArrayList<>();
        otherUserIds.add(userId);
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);
            // Set the package under test as a protected package.
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testSetUserControlDisabledPackages"");

            // Try to stop the package under test on all users.
            tryStoppingProtectedPackage(otherUserIds, /* canUserStopPackage= */ false);
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, userId);
            removeUser(userId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testSetUserControlDisabledPackages_multiUser_reboot_verifyPackageNotStopped"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserControlDisabledPackages_multiUser_reboot_verifyPackageNotStopped()
            throws Exception {
        assumeCanCreateAdditionalUsers(1);
        final int userId = createUser();
        final List<Integer> otherUserIds = new ArrayList<>();
        otherUserIds.add(userId);
        try {
            setupDeviceForSetUserControlDisabledPackagesTesting(otherUserIds);
            // Set the package under test as a protected package.
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testSetUserControlDisabledPackages"");

            // Reboot and verify protected packages are persisted.
            rebootAndWaitUntilReady();

            // The simple app package seems to be set into stopped state on reboot.
            // Launch the activity again to get it out of stopped state for all users.
            startProtectedPackage(otherUserIds);
            // Try to stop the package under test on all users.
            tryStoppingProtectedPackage(otherUserIds, /* canUserStopPackage= */ false);
        } finally {
            cleanupProtectedPackage(otherUserIds);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, mPrimaryUserId);
            getDevice().uninstallPackageForUser(SIMPLE_APP_APK, userId);
            removeUser(userId);
        }
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * installs the app and starts the activity for the package that is under test for the primary
     * user and provided users.
     * @param otherUserIds The user Ids apart from the primary user that were created
     */
    private void setupDeviceForSetUserControlDisabledPackagesTesting(List<Integer> otherUserIds)
            throws Exception {
        // Install app on the primary user and other users.
        installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);
        if (!otherUserIds.isEmpty()) {
            for (Integer userId : otherUserIds) {
                installAppAsUser(SIMPLE_APP_APK, userId);
            }
        }

        // Start the activity of the package under test on the primary user and other users.
        startProtectedPackage(otherUserIds);
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * starts the activity for the package that is under test for the primary user and provided
     * users.
     * @param otherUserIds The user Ids apart from the primary user that were created
     */
    private void startProtectedPackage(List<Integer> otherUserIds) throws Exception {
        startProtectedPackage(mPrimaryUserId);
        if (!otherUserIds.isEmpty()) {
            for (Integer userId : otherUserIds) {
                switchUser(userId);
                startProtectedPackage(userId);
            }
            switchUser(mPrimaryUserId);
        }
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * starts the activity for the package that is under test for a given user.
     * @param userId The user Id to start the package for
     */
    private void startProtectedPackage(int userId) throws Exception {
        // Launch the app once before starting the test.
        startActivityAsUser(userId, SIMPLE_APP_PKG, SIMPLE_APP_ACTIVITY);
        executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                ""testLaunchActivity"");
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * removes the package under test as a protected package and stops the package under test for
     * the primary user and provided users.
     * @param otherUserIds The user Ids apart from the primary user that were created
     */
    private void cleanupProtectedPackage(List<Integer> otherUserIds) throws Exception {
        executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                ""testClearSetUserControlDisabledPackages"");
        tryStoppingProtectedPackage(otherUserIds, /* canUserStopPackage= */ true);
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * attempts to stop protected package under test for the primary user and provided users.
     * @param otherUserIds The user Ids apart from the primary user that were created
     * @param canUserStopPackage Whether the user can force stop the protected package
     */
    private void tryStoppingProtectedPackage(List<Integer> otherUserIds, boolean canUserStopPackage)
            throws Exception {
        if (!otherUserIds.isEmpty()) {
            for (Integer userId : otherUserIds) {
                // TODO(b/188464764): Run device tests on the required user instead of switching
                //  users
                switchUser(userId);
                tryStoppingProtectedPackage(userId, canUserStopPackage);
            }
            switchUser(mPrimaryUserId);
        }
        tryStoppingProtectedPackage(mPrimaryUserId, canUserStopPackage);
    }

    /**
     * Helper when testing {@link DevicePolicyManager#setUserControlDisabledPackages} API that
     * attempts to stop the protected package under test for a given user.
     * @param userId The user Id to stop the package for
     * @param canUserStopPackage Whether the user can force stop the protected package
     */
    private void tryStoppingProtectedPackage(int userId, boolean canUserStopPackage)
            throws Exception {
        forceStopPackageForUser(SIMPLE_APP_PKG, userId);
        if (canUserStopPackage) {
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testForceStopWithUserControlEnabled"");
        } else {
            executeDeviceTestMethod("".UserControlDisabledPackagesTest"",
                    ""testForceStopWithUserControlDisabled"");
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_notDeviceOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testListForegroundAffiliatedUsers_notDeviceOwner() throws Exception {
        if (!removeAdmin(DEVICE_OWNER_COMPONENT, mDeviceOwnerUserId)) {
            fail(""Failed to remove device owner for user "" + mDeviceOwnerUserId);
        }

        executeDeviceTestMethod("".PreDeviceOwnerTest"",
                ""testListForegroundAffiliatedUsers_notDeviceOwner"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_onlyForegroundUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testListForegroundAffiliatedUsers_onlyForegroundUser() throws Exception {
        executeDeviceTestMethod("".ListForegroundAffiliatedUsersTest"",
                ""testListForegroundAffiliatedUsers_onlyForegroundUser"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_extraUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testListForegroundAffiliatedUsers_extraUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);
        createAffiliatedSecondaryUser();

        executeDeviceTestMethod("".ListForegroundAffiliatedUsersTest"",
                ""testListForegroundAffiliatedUsers_onlyForegroundUser"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_notAffiliated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testListForegroundAffiliatedUsers_notAffiliated() throws Exception {
        assumeCanCreateAdditionalUsers(1);
        int userId = createUser();
        switchUser(userId);

        executeListForegroundAffiliatedUsersTest(""testListForegroundAffiliatedUsers_empty"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerTest"	"testListForegroundAffiliatedUsers_affiliated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testListForegroundAffiliatedUsers_affiliated() throws Exception {
        assumeCanCreateAdditionalUsers(1);
        int userId = createAffiliatedSecondaryUser();
        switchUser(userId);

        executeListForegroundAffiliatedUsersTest(
                ""testListForegroundAffiliatedUsers_onlyForegroundUser"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25"	"testPermissionGrantPreMApp"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionGrantPreMApp() throws Exception {
        installAppAsUser(SIMPLE_PRE_M_APP_APK, mUserId);
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantState_preMApp_preQDeviceAdmin"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTestApi25"	"testResetPasswordDeprecated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResetPasswordDeprecated() throws Exception {
        assumeHasSecureLockScreenFeature();

        executeDeviceTestMethod("".ResetPasswordTest"", ""testResetPasswordDeprecated"");
    }

    protected void executeDeviceTestClass(String className) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, mUserId);
    }

    protected void executeDeviceTestMethod(String className, String testName) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId);
    }

    /**
     * Start SimpleActivity synchronously in a particular user.
     */
    protected void startSimpleActivityAsUser(int userId) throws Exception {
        installAppAsUser(TEST_APP_APK, userId);
        String command = ""am start -W --user "" + userId + "" "" + TEST_APP_PKG + ""/""
                + TEST_APP_PKG + "".SimpleActivity"";
        getDevice().executeShellCommand(command);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTestApi25.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import java.util.Collections;

/**
 * Set of tests for LauncherApps with managed profiles.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class LauncherAppsProfileTest extends BaseLauncherAppsTest {

    private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";
    private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";
    private static final String ADMIN_RECEIVER_TEST_CLASS =
            MANAGED_PROFILE_PKG + "".BaseManagedProfileTest$BasicAdminReceiver"";
    private static final String LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK =
            ""CtsHasLauncherActivityApp.apk"";

    private int mProfileUserId;
    private int mParentUserId;
    private String mProfileSerialNumber;
    private String mMainUserSerialNumber;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        // Create a managed profile
        mParentUserId = mPrimaryUserId;
        mProfileUserId = createManagedProfile(mParentUserId);
        installAppAsUser(MANAGED_PROFILE_APK, mProfileUserId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileUserId);
        mProfileSerialNumber = Integer.toString(getUserSerialNumber(mProfileUserId));
        mMainUserSerialNumber = Integer.toString(getUserSerialNumber(mParentUserId));
        startUserAndWait(mProfileUserId);

        // Install test APK on primary user and the managed profile.
        installTestApps(USER_ALL);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mProfileUserId);
        uninstallTestApps();
        getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testGetActivitiesWithProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetActivitiesWithProfile() throws Exception {
        // Install app for all users.
        installAppAsUser(SIMPLE_APP_APK, mParentUserId);
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);

        // Run tests to check SimpleApp exists in both profile and main user.
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));

        // Run the same test on the managed profile.  This still works.
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",
                mProfileUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));

        // This tries to access main prorfile from work profiel, which is not allowed.
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testAccessPrimaryProfileFromManagedProfile"",
                mProfileUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));

        // Test for getProfiles.
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testGetProfiles_fromMainProfile"",
                mParentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testGetProfiles_fromManagedProfile"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testProfileOwnerAppHiddenInPrimaryProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProfileOwnerAppHiddenInPrimaryProfile() throws Exception {
        String command = ""pm disable --user "" + mParentUserId + "" "" + MANAGED_PROFILE_PKG
                + ""/.PrimaryUserFilterSetterActivity"";
        CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testProfileOwnerInjectedActivityNotFound"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testNoHiddenActivityInProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNoHiddenActivityInProfile() throws Exception {
        // Install app for all users.
        installAppAsUser(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK, mParentUserId);
        installAppAsUser(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK, mProfileUserId);

        // Run tests to check SimpleApp exists in both profile and main user.
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testDoPoNoTestAppInjectedActivityFound"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testHasLauncherActivityAppHasAppDetailsActivityInjected"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageAddedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLauncherCallbackPackageAddedProfile() throws Exception {
        startCallbackService(mPrimaryUserId);
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageAddedCallbackForUser"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageRemovedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLauncherCallbackPackageRemovedProfile() throws Exception {
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
        startCallbackService(mPrimaryUserId);
        getDevice().uninstallPackage(SIMPLE_APP_PKG);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageRemovedCallbackForUser"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testLauncherCallbackPackageChangedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLauncherCallbackPackageChangedProfile() throws Exception {
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
        startCallbackService(mPrimaryUserId);
        installAppAsUser(SIMPLE_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true,
                mProfileUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageChangedCallbackForUser"",
                mParentUserId, Collections.singletonMap(PARAM_TEST_USER, mProfileSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsProfileTest"	"testReverseAccessNoThrow"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testReverseAccessNoThrow() throws Exception {
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);

        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testReverseAccessNoThrow"",
                mProfileUserId, Collections.singletonMap(PARAM_TEST_USER, mMainUserSerialNumber));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAdminHostSideTestApi23"	"testAdminWithNoProtection"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAdminWithNoProtection() throws Exception {
        installAppAsUser(getDeviceAdminApkFileName(), mUserId);
        try {
            setDeviceAdmin(getUnprotectedAdminReceiverComponent(), mUserId);
        } finally {
            runTests(getDeviceAdminApkPackage(), ""ClearDeviceAdminWithNoProtectionTest"");
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi23.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAdminHostSideTestApi24"	"testAdminWithNoProtection"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAdminWithNoProtection() throws Exception {
        installAppAsUser(getDeviceAdminApkFileName(), mUserId);
        setDeviceAdminExpectingFailure(getUnprotectedAdminReceiverComponent(), mUserId,
                ""must be protected with android.permission.BIND_DEVICE_ADMIN"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAdminHostSideTestApi24.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedContactsUris"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testManagedContactsUris() throws Exception {
        runManagedContactsTest(() -> {
            ContactsTestSet contactsTestSet = new ContactsTestSet(ManagedProfileContactsTest.this,
                    MANAGED_PROFILE_PKG, mParentUserId, mProfileUserId);

            contactsTestSet.setCallerIdEnabled(true);
            contactsTestSet.setContactsSearchEnabled(true);
            contactsTestSet.checkIfCanLookupEnterpriseContacts(true);
            contactsTestSet.checkIfCanFilterEnterpriseContacts(true);
            contactsTestSet.checkIfCanFilterSelfContacts();
            return null;
        });
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedQuickContacts"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testManagedQuickContacts() throws Exception {
        runManagedContactsTest(() -> {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testQuickContact"", mParentUserId);
            return null;
        });
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileContactsTest"	"testManagedContactsPolicies"	"CtsDevicePolicyManagerTestCases"	"2: user direct"	"public void testManagedContactsPolicies() throws Exception {
        runManagedContactsTest(() -> {
            ContactsTestSet contactsTestSet = new ContactsTestSet(ManagedProfileContactsTest.this,
                    MANAGED_PROFILE_PKG, mParentUserId, mProfileUserId);
            try {
                contactsTestSet.setCallerIdEnabled(true);
                contactsTestSet.setContactsSearchEnabled(false);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(true);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.setCallerIdEnabled(false);
                contactsTestSet.setContactsSearchEnabled(true);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(true);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.setCallerIdEnabled(false);
                contactsTestSet.setContactsSearchEnabled(false);
                contactsTestSet.checkIfCanLookupEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterEnterpriseContacts(false);
                contactsTestSet.checkIfCanFilterSelfContacts();
                contactsTestSet.checkIfNoEnterpriseDirectoryFound();
                assertMetricsLogged(getDevice(), () -> {
                    contactsTestSet.setCallerIdEnabled(true);
                    contactsTestSet.setCallerIdEnabled(false);
                }, new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setBoolean(false)
                        .build(),
                new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CALLER_ID_DISABLED_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setBoolean(true)
                        .build());
                assertMetricsLogged(getDevice(), () -> {
                    contactsTestSet.setContactsSearchEnabled(true);
                    contactsTestSet.setContactsSearchEnabled(false);
                }, new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setBoolean(false)
                        .build(),
                new DevicePolicyEventWrapper
                        .Builder(EventId.SET_CROSS_PROFILE_CONTACTS_SEARCH_DISABLED_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setBoolean(true)
                        .build());
                return null;
            } finally {
                // reset policies
                contactsTestSet.setCallerIdEnabled(true);
                contactsTestSet.setContactsSearchEnabled(true);
            }
        });
    }

    private void setDirectoryPrefix(String directoryName, int userId)
            throws DeviceNotAvailableException {
        String command = ""content call --uri "" + DIRECTORY_PRIVOIDER_URI
                + "" --user "" + userId
                + "" --method "" + SET_CUSTOM_DIRECTORY_PREFIX_METHOD
                + "" --arg "" + directoryName;
        LogUtil.CLog.d(""Output for command "" + command + "": ""
                + getDevice().executeShellCommand(command));
    }

    private void runManagedContactsTest(Callable<Void> callable) throws Exception {
        try {
            // Allow cross profile contacts search.
            // TODO test both on and off.
            getDevice().executeShellCommand(
                    ""settings put --user "" + mProfileUserId
                    + "" secure managed_profile_contact_remote_search 1"");

            // Wait for updating cache
            waitForBroadcastIdle();

            // Add test account
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testAddTestAccount"", mParentUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testAddTestAccount"", mProfileUserId);

            // Install directory provider to both primary and managed profile
            installAppAsUser(DIRECTORY_PROVIDER_APK, USER_ALL);
            setDirectoryPrefix(PRIMARY_DIRECTORY_PREFIX, mParentUserId);
            setDirectoryPrefix(MANAGED_DIRECTORY_PREFIX, mProfileUserId);

            // Check enterprise directory API works
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testGetDirectoryListInPrimaryProfile"", mParentUserId);

            // Insert Primary profile Contacts
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testPrimaryProfilePhoneAndEmailLookup_insertedAndfound"", mParentUserId);
            // Insert Managed profile Contacts
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testManagedProfilePhoneAndEmailLookup_insertedAndfound"", mProfileUserId);
            // Insert a primary contact with same phone & email as other
            // enterprise contacts
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testPrimaryProfileDuplicatedPhoneEmailContact_insertedAndfound"",
                    mParentUserId);
            // Insert a enterprise contact with same phone & email as other
            // primary contacts
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testManagedProfileDuplicatedPhoneEmailContact_insertedAndfound"",
                    mProfileUserId);

            callable.call();

        } finally {
            // Clean up in managed profile and primary profile
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testCurrentProfileContacts_removeContacts"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testCurrentProfileContacts_removeContacts"", mParentUserId);
            getDevice().uninstallPackage(DIRECTORY_PROVIDER_PKG);
        }
    }

    /*
     * Container for running ContactsTest under multi-user environment
     */
    private static class ContactsTestSet {

        private ManagedProfileContactsTest mManagedProfileContactsTest;
        private String mManagedProfilePackage;
        private int mParentUserId;
        private int mProfileUserId;

        public ContactsTestSet(ManagedProfileContactsTest managedProfileContactsTest,
                String managedProfilePackage, int parentUserId, int profileUserId) {
            mManagedProfileContactsTest = managedProfileContactsTest;
            mManagedProfilePackage = managedProfilePackage;
            mParentUserId = parentUserId;
            mProfileUserId = profileUserId;
        }

        private void runDeviceTestsAsUser(String pkgName, String testClassName,
                String testMethodName, Integer userId) throws DeviceNotAvailableException {
            mManagedProfileContactsTest.runDeviceTestsAsUser(pkgName, testClassName, testMethodName,
                    userId);
        }

        // Enable / Disable
        public void setCallerIdEnabled(boolean enabled) throws DeviceNotAvailableException {
            if (enabled) {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testSetCrossProfileCallerIdDisabled_false"", mProfileUserId);
            } else {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testSetCrossProfileCallerIdDisabled_true"", mProfileUserId);
            }
        }

        // Enable / Disable cross profile contacts search
        public void setContactsSearchEnabled(boolean enabled) throws DeviceNotAvailableException {
            if (enabled) {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testSetCrossProfileContactsSearchDisabled_false"", mProfileUserId);
            } else {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testSetCrossProfileContactsSearchDisabled_true"", mProfileUserId);
            }
        }

        public void checkIfCanLookupEnterpriseContacts(boolean expected)
                throws DeviceNotAvailableException {
            // Primary user cannot use ordinary phone/email lookup api to access
            // managed contacts
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfilePhoneLookup_canNotAccessEnterpriseContact"", mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEmailLookup_canNotAccessEnterpriseContact"", mParentUserId);
            // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access
            // primary contacts
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryContact"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryContact"",
                    mParentUserId);
            // When there exist contacts with the same phone/email in primary &
            // enterprise,
            // primary user can use ENTERPRISE_CONTENT_FILTER_URI to access the
            // primary contact.
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseEmailLookupDuplicated_canAccessPrimaryContact"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterprisePhoneLookupDuplicated_canAccessPrimaryContact"",
                    mParentUserId);

            // Managed user cannot use ordinary phone/email lookup api to access
            // primary contacts
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfilePhoneLookup_canNotAccessPrimaryContact"", mProfileUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEmailLookup_canNotAccessPrimaryContact"", mProfileUserId);
            // Managed user can use ENTERPRISE_CONTENT_FILTER_URI to access
            // enterprise contacts
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",
                    mProfileUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",
                    mProfileUserId);
            // Managed user cannot use ENTERPRISE_CONTENT_FILTER_URI to access
            // primary contacts
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterprisePhoneLookup_canNotAccessPrimaryContact"",
                    mProfileUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterpriseEmailLookup_canNotAccessPrimaryContact"",
                    mProfileUserId);
            // When there exist contacts with the same phone/email in primary &
            // enterprise,
            // managed user can use ENTERPRISE_CONTENT_FILTER_URI to access the
            // enterprise contact.
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterpriseEmailLookupDuplicated_canAccessEnterpriseContact"",
                    mProfileUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterprisePhoneLookupDuplicated_canAccessEnterpriseContact"",
                    mProfileUserId);

            // Check if phone lookup can access primary directories
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories"",
                    mParentUserId);

            // Check if email lookup can access primary directories
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories"",
                    mParentUserId);

            if (expected) {
                // Primary user can use ENTERPRISE_CONTENT_FILTER_URI to access
                // managed profile contacts
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneLookup_canAccessEnterpriseContact"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseEmailLookup_canAccessEnterpriseContact"",
                        mParentUserId);

                // Make sure SIP enterprise lookup works too.
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseSipLookup_canAccessEnterpriseContact"",
                        mParentUserId);

                // Check if phone lookup can access enterprise directories
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories"",
                        mParentUserId);

                // Check if email lookup can access enterprise directories
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories"",
                        mParentUserId);
            } else {
                // Primary user cannot use ENTERPRISE_CONTENT_FILTER_URI to
                // access managed contacts
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessEnterpriseContact"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",
                        mParentUserId);

                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"",
                        mParentUserId);
            }
        }

        public void checkIfCanFilterSelfContacts() throws DeviceNotAvailableException {
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterpriseCallableFilter_canAccessManagedDirectories"",
                    mProfileUserId);

            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testEnterpriseProfileEnterpriseEmailFilter_canAccessManagedDirectories"",
                    mProfileUserId);

            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterpriseContactFilter_canAccessManagedDirectories"",
                    mProfileUserId);

            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories"",
                    mParentUserId);
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testManagedProfileEnterprisePhoneFilter_canAccessManagedDirectories"",
                    mProfileUserId);
        }

        public void checkIfCanFilterEnterpriseContacts(boolean expected)
                throws DeviceNotAvailableException {
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testFilterUriWhenDirectoryParamMissing"", mParentUserId);
            if (expected) {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories"",
                        mParentUserId);
            } else {
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories"",
                        mParentUserId);
                runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                        ""testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories"",
                        mParentUserId);
            }
        }

        public void checkIfNoEnterpriseDirectoryFound() throws DeviceNotAvailableException {
            runDeviceTestsAsUser(mManagedProfilePackage, "".ContactsTest"",
                    ""testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories"",
                    mParentUserId);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSystemUpdatePolicy"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@Ignore(""b/145932189"")
    public void testSystemUpdatePolicy() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.SystemUpdatePolicyTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testInstallUpdate"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testInstallUpdate() throws Exception {
        pushUpdateFileToDevice(""notZip.zi"");
        pushUpdateFileToDevice(""empty.zip"");
        pushUpdateFileToDevice(""wrongPayload.zip"");
        pushUpdateFileToDevice(""wrongHash.zip"");
        pushUpdateFileToDevice(""wrongSize.zip"");
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".systemupdate.InstallUpdateTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPermittedInputMethodsLogged"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testPermittedInputMethodsLogged() throws Exception {
        assertMetricsLogged(getDevice(), () ->
                        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".InputMethodsTest"",
                                ""testPermittedInputMethodsOnParent"", mUserId),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(CALLED_FROM_PARENT, new String[0])
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERMITTED_INPUT_METHODS_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(CALLED_FROM_PARENT, new String[0])
                        .build());
    }

    private void setupIme(String imeComponent, int userId) throws Exception {
        // Wait until IMS service is registered by the system.
        waitForOutput(""Failed waiting for IME to become available"",
                String.format(""ime list --user %d -s -a"", userId),
                s -> s.contains(imeComponent), 10 /* seconds */);

        executeShellCommand(""ime enable "" + imeComponent);
        executeShellCommand(""ime set "" + imeComponent);
    }

    private void assertCanStartPersonalApp(String packageName, boolean canStart)
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(packageName, ""com.android.cts.suspensionchecker.ActivityLaunchTest"",
                canStart ? ""testCanStartActivity"" : ""testCannotStartActivity"", mPrimaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;
import static com.android.cts.devicepolicy.DeviceAndProfileOwnerTest.DEVICE_ADMIN_COMPONENT_FLATTENED;
import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertTrue;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Ignore;
import org.junit.Test;

/**
 * Tests for organization-owned Profile Owner.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class OrgOwnedProfileOwnerTest extends BaseDevicePolicyTest {
    private static final String DEVICE_ADMIN_PKG = DeviceAndProfileOwnerTest.DEVICE_ADMIN_PKG;
    private static final String DEVICE_ADMIN_APK = DeviceAndProfileOwnerTest.DEVICE_ADMIN_APK;
    private static final String CERT_INSTALLER_PKG = DeviceAndProfileOwnerTest.CERT_INSTALLER_PKG;
    private static final String CERT_INSTALLER_APK = DeviceAndProfileOwnerTest.CERT_INSTALLER_APK;
    private static final String DELEGATE_APP_PKG = DeviceAndProfileOwnerTest.DELEGATE_APP_PKG;
    private static final String DELEGATE_APP_APK = DeviceAndProfileOwnerTest.DELEGATE_APP_APK;
    private static final String LOG_TAG_PROFILE_OWNER = ""profile-owner"";

    private static final String ADMIN_RECEIVER_TEST_CLASS =
            DeviceAndProfileOwnerTest.ADMIN_RECEIVER_TEST_CLASS;
    private static final String ACTION_WIPE_DATA =
            ""com.android.cts.deviceandprofileowner.WIPE_DATA"";

    private static final String TEST_APP_APK = ""CtsSimpleApp.apk"";
    private static final String TEST_APP_PKG = ""com.android.cts.launcherapps.simpleapp"";
    private static final String TEST_IME_APK = ""TestIme.apk"";
    private static final String TEST_IME_PKG = ""com.android.cts.testime"";
    private static final String TEST_IME_COMPONENT = TEST_IME_PKG + ""/.TestIme"";
    private static final String SIMPLE_SMS_APP_PKG = ""android.telephony.cts.sms.simplesmsapp"";
    private static final String SIMPLE_SMS_APP_APK = ""SimpleSmsApp.apk"";
    private static final String TEST_LAUNCHER_APK = ""TestLauncher.apk"";
    private static final String TEST_LAUNCHER_COMPONENT =
            ""com.android.cts.testlauncher/android.app.Activity"";
    public static final String SUSPENSION_CHECKER_CLASS =
            ""com.android.cts.suspensionchecker.ActivityLaunchTest"";

    private static final String USER_IS_NOT_STARTED = ""User is not started"";
    private static final long USER_STOP_TIMEOUT_SEC = 60;

    protected int mUserId;
    private static final String DISALLOW_CONFIG_LOCATION = ""no_config_location"";
    private static final String CALLED_FROM_PARENT = ""calledFromParent"";

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mPrimaryUserId);
        switchUser(mPrimaryUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
        restrictManagedProfileRemoval();
    }

    @Override
    public void tearDown() throws Exception {
        // Managed profile and other test users will be removed by BaseDevicePolicyTest.tearDown()
        super.tearDown();
    }

    private void restrictManagedProfileRemoval() throws DeviceNotAvailableException {
            getDevice().executeShellCommand(
                    String.format(""dpm mark-profile-owner-on-organization-owned-device --user %d '%s'"",
                            mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCannotRemoveManagedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotRemoveManagedProfile() throws DeviceNotAvailableException {
        assertThat(getDevice().removeUser(mUserId)).isFalse();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRelinquishControlOverDevice"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRelinquishControlOverDevice() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testSetAndGetLockInfo"",
                mUserId);

        removeOrgOwnedProfile();
        assertHasNoUser(mUserId);

        try {
            installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
            assertTrue(setDeviceOwner(DEVICE_ADMIN_COMPONENT_FLATTENED,
                    mPrimaryUserId, /*expectFailure*/false));
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", ""testLockInfoIsNull"",
                    mPrimaryUserId);
        } finally {
            removeAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED, mPrimaryUserId);
            getDevice().uninstallPackage(DEVICE_ADMIN_PKG);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testLockScreenInfo"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLockScreenInfo() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".LockScreenInfoTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testProfileOwnerCanGetDeviceIdentifiers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProfileOwnerCanGetDeviceIdentifiers() throws Exception {
        // The Profile Owner should have access to all device identifiers.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdentifiersTest"",
                ""testProfileOwnerCanGetDeviceIdentifiersWithPermission"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDevicePolicyManagerParentSupport"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDevicePolicyManagerParentSupport() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".OrgOwnedProfileOwnerParentTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testUserRestrictionSetOnParentLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserRestrictionSetOnParentLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingParentTest"",
                    ""testUserRestrictionLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setStrings(DISALLOW_CONFIG_LOCATION, CALLED_FROM_PARENT)
                        .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testUserRestrictionsSetOnParentAreNotPersisted"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserRestrictionsSetOnParentAreNotPersisted() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testAddUserRestrictionDisallowConfigDateTime_onParent"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testHasUserRestrictionDisallowConfigDateTime"", mPrimaryUserId);
        removeOrgOwnedProfile();
        assertHasNoUser(mUserId);

        // User restrictions are not persist after organization-owned profile owner is removed
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testUserRestrictionDisallowConfigDateTimeIsNotPersisted"", mPrimaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPerProfileUserRestrictionOnParent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPerProfileUserRestrictionOnParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testPerProfileUserRestriction_onParent"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPerDeviceUserRestrictionOnParent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPerDeviceUserRestrictionOnParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                ""testPerDeviceUserRestriction_onParent"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCameraDisabledOnParentIsEnforced"	"CtsDevicePolicyManagerTestCases"	"2: user camera"	"public void testCameraDisabledOnParentIsEnforced() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testAddUserRestrictionCameraDisabled_onParent"", mUserId);
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testCannotOpenCamera"", mPrimaryUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testRemoveUserRestrictionCameraEnabled_onParent"", mUserId);
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UserRestrictionsParentTest"",
                    ""testCanOpenCamera"", mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCameraDisabledOnParentLogged"	"CtsDevicePolicyManagerTestCases"	"2: user camera"	"public void testCameraDisabledOnParentLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingParentTest"",
                            ""testCameraDisabledLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(true)
                        .setStrings(CALLED_FROM_PARENT)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(false)
                        .setStrings(CALLED_FROM_PARENT)
                        .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSecurityLogging"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSecurityLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testSecurityLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSecurityLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSecurityLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".SecurityLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set security logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"",
                    ""testSetDelegateScope_delegationSecurityLogging"", mUserId);

            testSecurityLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".SecurityLoggingDelegateTest"");
        } finally {
            // Remove security logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".SecurityLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testSecurityLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        // Backup stay awake setting because testGenerateLogs() will turn it off.
        final String stayAwake = getDevice().getSetting(""global"", ""stay_on_while_plugged_in"");
        try {
            // Turn logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testEnablingSecurityLogging"", mUserId);
            // Reboot to ensure ro.organization_owned is set to true in logd and logging is on.
            rebootAndWaitUntilReady();
            waitForUserUnlock(mUserId);

            // Generate various types of events on device side and check that they are logged.
            runDeviceTestsAsUser(packageName, testClassName, ""testGenerateLogs"", mUserId);
            getDevice().executeShellCommand(""whoami""); // Generate adb command securty event
            runDeviceTestsAsUser(packageName, testClassName, ""testVerifyGeneratedLogs"", mUserId);

            // Immediately attempting to fetch events again should fail.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSecurityLoggingRetrievalRateLimited"", mUserId);
        } finally {
            // Turn logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testDisablingSecurityLogging"", mUserId);
            // Restore stay awake setting.
            if (stayAwake != null) {
                getDevice().setSetting(""global"", ""stay_on_while_plugged_in"", stayAwake);
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetTime"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetTime() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"", ""testSetTime"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"",
                ""testSetTime_failWhenAutoTimeEnabled"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetTimeZone"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetTimeZone() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"", ""testSetTimeZone"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".TimeManagementTest"",
                ""testSetTimeZone_failIfAutoTimeZoneEnabled"", mUserId);
    }

    @FlakyTest(bugId = 137088260)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWifi"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWifi() throws Exception {
        assumeHasWifiFeature();

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".WifiTest"", ""testGetWifiMacAddress"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testFactoryResetProtectionPolicy"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testFactoryResetProtectionPolicy() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".FactoryResetProtectionPolicyTest"", mUserId);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testIsDeviceOrganizationOwnedWithManagedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsDeviceOrganizationOwnedWithManagedProfile() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",
                ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",
                mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceOwnershipTest"",
                ""testCallingIsOrganizationOwnedWithManagedProfileExpectingTrue"",
                mPrimaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCommonCriteriaMode"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCommonCriteriaMode() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".CommonCriteriaModeTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testAdminConfiguredNetworks"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAdminConfiguredNetworks() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AdminConfiguredNetworksTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testApplicationHiddenParent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testApplicationHiddenParent() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ApplicationHiddenParentTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetKeyguardDisabledFeatures"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetKeyguardDisabledFeatures() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".KeyguardDisabledFeaturesTest"",
                ""testSetKeyguardDisabledFeatures_onParent"", mUserId);
    }

    private void removeOrgOwnedProfile() throws Exception {
        sendWipeProfileBroadcast(mUserId);
        waitUntilUserRemoved(mUserId);
    }

    private void sendWipeProfileBroadcast(int userId) throws Exception {
        final String cmd = ""am broadcast --receiver-foreground --user "" + userId
                + "" -a "" + ACTION_WIPE_DATA
                + "" com.android.cts.deviceandprofileowner/.WipeDataReceiver"";
        getDevice().executeShellCommand(cmd);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionNormalApp"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPersonalAppsSuspensionNormalApp() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Initially the app should be launchable.
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);
        setPersonalAppsSuspended(true);
        // Now the app should be suspended and not launchable
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, false);
        setPersonalAppsSuspended(false);
        // Should be launchable again.
        assertCanStartPersonalApp(DEVICE_ADMIN_PKG, true);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionInstalledApp"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPersonalAppsSuspensionInstalledApp() throws Exception {
        setPersonalAppsSuspended(true);

        installAppAsUser(TEST_IME_APK, mPrimaryUserId);

        // Wait until package install broadcast is processed
        waitForBroadcastIdle();

        assertCanStartPersonalApp(TEST_IME_PKG, false);
        setPersonalAppsSuspended(false);
    }

    private void setPersonalAppsSuspended(boolean suspended) throws DeviceNotAvailableException {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                suspended ? ""testSuspendPersonalApps"" : ""testUnsuspendPersonalApps"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionSms"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPersonalAppsSuspensionSms() throws Exception {
        assumeHasTelephonyFeature();

        // Install an SMS app and make it the default.
        installAppAsUser(SIMPLE_SMS_APP_APK, mPrimaryUserId);
        addSmsRole(SIMPLE_SMS_APP_PKG, mPrimaryUserId);
        try {
            setPersonalAppsSuspended(true);
            // Default sms app should not be suspended.
            assertCanStartPersonalApp(SIMPLE_SMS_APP_PKG, true);
            setPersonalAppsSuspended(false);
        } finally {
            removeSmsRole(SIMPLE_SMS_APP_PKG, mPrimaryUserId);
        }
    }

    private void addSmsRole(String app, int userId) throws Exception {
        executeShellCommand(String.format(
                ""cmd role add-role-holder --user %d android.app.role.SMS %s"", userId, app));
    }

    private void removeSmsRole(String app, int userId) throws Exception {
        executeShellCommand(String.format(
                ""cmd role remove-role-holder --user %d android.app.role.SMS %s"", userId, app));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPersonalAppsSuspensionIme"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPersonalAppsSuspensionIme() throws Exception {
        installAppAsUser(TEST_IME_APK, mPrimaryUserId);
        setupIme(TEST_IME_COMPONENT, mPrimaryUserId);
        setPersonalAppsSuspended(true);
        // Active IME should not be suspended.
        assertCanStartPersonalApp(TEST_IME_PKG, true);
        setPersonalAppsSuspended(false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testCanRestrictAccountManagementOnParentProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRestrictAccountManagementOnParentProfile() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                ""testSetAccountManagementDisabledOnParent"", mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                    ""testAccountManagementDisabled"", mPrimaryUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".AccountManagementParentTest"",
                    ""testEnableAccountManagement"", mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testPermittedInputMethods"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermittedInputMethods() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".InputMethodsTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testScreenCaptureDisabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testScreenCaptureDisabled() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        setPoAsUser(mPrimaryUserId);

        try {
            setScreenCaptureDisabled(true);
        } finally {
            setScreenCaptureDisabled(false);
        }
    }

    private void takeScreenCaptureAsUser(int userId, String testMethodName) throws Exception {
        installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);
        startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",
                testMethodName, userId);
        forceStopPackageForUser(TEST_APP_PKG, userId);
    }

    private void setScreenCaptureDisabled(boolean disabled) throws Exception {
        String testMethodName = disabled
                ? ""testSetScreenCaptureDisabledOnParent_true""
                : ""testSetScreenCaptureDisabledOnParent_false"";
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ScreenCaptureDisabledTest"",
                testMethodName, mUserId);

        testMethodName = disabled
                ? ""testScreenCaptureImpossible""
                : ""testScreenCapturePossible"";

        // Test personal profile
        takeScreenCaptureAsUser(mPrimaryUserId, testMethodName);

        // Test managed profile. This should not be disabled when screen capture is disabled on
        // the parent by the profile owner of an organization-owned device.
        takeScreenCaptureAsUser(mUserId, ""testScreenCapturePossible"");
    }

    private void assertHasNoUser(int userId) throws DeviceNotAvailableException {
        int numWaits = 0;
        final int MAX_NUM_WAITS = 15;
        while (listUsers().contains(userId) && (numWaits < MAX_NUM_WAITS)) {
            try {
                Thread.sleep(1000);
                numWaits += 1;
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        assertThat(listUsers()).doesNotContain(userId);
    }

    private void setPoAsUser(int userId) throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, true, true, userId);
        assertTrue(""Failed to set profile owner"",
                setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                        userId, /* expectFailure */ false));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetPersonalAppsSuspendedLogged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSetPersonalAppsSuspendedLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                            ""testSetPersonalAppsSuspendedLogged"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERSONAL_APPS_SUSPENDED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(true)
                        .build(),
                new DevicePolicyEventWrapper.Builder(EventId.SET_PERSONAL_APPS_SUSPENDED_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setBoolean(false)
                        .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testSetManagedProfileMaximumTimeOffLogged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSetManagedProfileMaximumTimeOffLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
                    runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                            ""testSetManagedProfileMaximumTimeOff"", mUserId);
                }, new DevicePolicyEventWrapper.Builder(
                        EventId.SET_MANAGED_PROFILE_MAXIMUM_TIME_OFF_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setTimePeriod(123456789)
                        .build(),
                new DevicePolicyEventWrapper.Builder(
                        EventId.SET_MANAGED_PROFILE_MAXIMUM_TIME_OFF_VALUE)
                        .setAdminPackageName(DEVICE_ADMIN_PKG)
                        .setTimePeriod(0)
                        .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testWorkProfileMaximumTimeOff() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Sec"", mUserId);

        toggleQuietMode(true);
        // Verify that at some point personal app becomes impossible to launch.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, SUSPENSION_CHECKER_CLASS,
                ""testWaitForActivityNotLaunchable"", mPrimaryUserId);
        toggleQuietMode(false);
        // Ensure the profile is properly started before wipe broadcast is sent in teardown.
        waitForUserUnlock(mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testPersonalAppsSuspendedByTimeout"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testWorkProfileMaximumTimeOff_complianceRequiredBroadcastDefault()
            throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Very long timeout, won't be triggered
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Year"", mUserId);

        try {
            toggleQuietMode(true);
            waitForUserStopped(mUserId);
            toggleQuietMode(false);
            waitForUserUnlock(mUserId);
            // Ensure the DPC has handled the broadcast
            waitForBroadcastIdle();
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementRequiredReceived"", mUserId);

            // Ensure that the default onComplianceAcknowledgementRequired acknowledged compliance.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementNotRequired"", mUserId);

        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testClearComplianceSharedPreference"", mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testWorkProfileMaximumTimeOff_complianceRequiredBroadcastOverride()
            throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        // Very long timeout, won't be triggered
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetManagedProfileMaximumTimeOff1Year"", mUserId);
        // Set shared preference that instructs the receiver to NOT call default implementation.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                ""testSetOverrideOnComplianceAcknowledgementRequired"", mUserId);

        try {
            toggleQuietMode(true);
            waitForUserStopped(mUserId);
            toggleQuietMode(false);
            waitForUserUnlock(mUserId);
            // Ensure the DPC has handled the broadcast
            waitForBroadcastIdle();
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testComplianceAcknowledgementRequiredReceived"", mUserId);

            // Ensure compliance wasn't acknowledged automatically, acknowledge explicitly.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testAcknowledgeCompliance"", mUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                    ""testClearComplianceSharedPreference"", mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDelegatedCertInstallerDeviceIdAttestation"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDelegatedCertInstallerDeviceIdAttestation() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                ""testManualSetCertInstallerDelegate"", mUserId);

        runDeviceTestsAsUser(CERT_INSTALLER_PKG, "".DelegatedDeviceIdAttestationTest"",
                ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testDeviceIdAttestationForProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDeviceIdAttestationForProfileOwner() throws Exception {
        // Test that Device ID attestation works for org-owned profile owner.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdAttestationTest"",
                ""testSucceedsWithProfileOwnerIdsGrant"", mUserId);

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLogging"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".WorkProfileNetworkLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_delegationNetworkLogging"", mUserId);

            testNetworkLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".WorkProfileNetworkLoggingDelegateTest"");
        } finally {
            // Remove network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testNetworkLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        try {
            // Turn network logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_true"", mUserId);

            // Connect to websites from work profile, should be logged.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testConnectToWebsites_shouldBeLogged"", mUserId);
            // Connect to websites from personal profile, should not be logged.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testConnectToWebsites_shouldNotBeLogged"", mPrimaryUserId);

            // Verify all work profile network logs have been received.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs"", mUserId);
        } finally {
            // Turn network logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_false"", mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest"	"testNetworkLoggingLogged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testNetworkLoggingLogged() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        assertMetricsLogged(getDevice(), () -> {
            testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(1)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build(),
           new DevicePolicyEventWrapper.Builder(EventId.RETRIEVE_NETWORK_LOGS_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build(),
           new DevicePolicyEventWrapper.Builder(EventId.SET_NETWORK_LOGGING_ENABLED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setInt(0)
                .setStrings(LOG_TAG_PROFILE_OWNER)
                .build());
    }

    private void toggleQuietMode(boolean quietModeEnable) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".PersonalAppsSuspensionTest"",
                quietModeEnable ? ""testEnableQuietMode"" : ""testDisableQuietMode"", mPrimaryUserId);
    }

    private void setAndStartLauncher(String component) throws Exception {
        String output = getDevice().executeShellCommand(String.format(
                ""cmd package set-home-activity --user %d %s"", mPrimaryUserId, component));
        assertTrue(""failed to set home activity"", output.contains(""Success""));
        executeShellCommand(""am start -W -n "" + component);
    }

    private void waitForUserStopped(int userId) throws Exception {
        waitForOutput(""User is not unlocked."",
                String.format(""am get-started-user-state %d"", userId),
                s -> s.startsWith(USER_IS_NOT_STARTED), USER_STOP_TIMEOUT_SEC);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CustomManagedProfileTest"	"testIsProvisioningAllowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsProvisioningAllowed() throws Exception {
        // Must install the apk since the test runs in the ManagedProfile apk.
        installAppAsUser(MANAGED_PROFILE_APK, mPrimaryUserId);
        try {
            if (mFeaturesCheckerRule.hasRequiredFeatures()) {
                // Since we assume, in ManagedProfileTest, provisioning has to be successful,
                // DevicePolicyManager.isProvisioningAllowed must return true
                assertIsProvisioningAllowed(true, mPrimaryUserId);
            } else {
                // Test the case when feature flag is off
                assertIsProvisioningAllowed(false, mPrimaryUserId);
            }
        } finally {
            getDevice().uninstallPackage(MANAGED_PROFILE_PKG);
        }
    }

    private void assertIsProvisioningAllowed(boolean expected, int userId)
            throws DeviceNotAvailableException {
        final String testName = expected ? ""testIsProvisioningAllowedTrue""
                : ""testIsProvisioningAllowedFalse"";
        CLog.d(""Running test %s on user %d"", testName, userId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PreManagedProfileTest"", testName, userId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"configureNotificationListener"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static org.junit.Assert.assertTrue;

import android.platform.test.annotations.FlakyTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class ManagedProfileWipeTest extends BaseManagedProfileTest {

    private static final String KEY_PROFILE_ID = ""profileId"";
    private final Map<String, String> mTestArgs = new HashMap<>();

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mTestArgs.put(KEY_PROFILE_ID, Integer.toString(mProfileUserId));
        configureNotificationListener();
    }

    @Override
    public void tearDown() throws Exception {
        super.tearDown();
        mTestArgs.clear();
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataWithReason"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeDataWithReason() throws Exception {
        assertTrue(listUsers().contains(mProfileUserId));

        // testWipeDataWithReason() removes the managed profile,
        // so it needs to separated from other tests.
        // Check and clear the notification is presented after work profile got removed, so profile
        // user no longer exists, verification should be run in primary user.
        // Both the profile wipe and notification verification are done on the device side test
        // because notifications are checked using a NotificationListenerService
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".WipeDataNotificationTest"",
                ""testWipeDataWithReasonVerification"",
                mParentUserId,
                mTestArgs);
        // Note: the managed profile is removed by this test, which will make removeUserCommand in
        // tearDown() to complain, but that should be OK since its result is not asserted.
        waitUntilUserRemoved(mProfileUserId);
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeDataLogged() throws Exception {
        assertTrue(listUsers().contains(mProfileUserId));

        // Both the profile wipe and notification verification are done on the device side test
        // because notifications are checked using a NotificationListenerService
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG,
                    "".WipeDataNotificationTest"",
                    ""testWipeDataWithReasonVerification"",
                    mParentUserId,
                    mTestArgs);
        }, new DevicePolicyEventWrapper.Builder(EventId.WIPE_DATA_WITH_REASON_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .setInt(0)
                .setStrings(""notCalledFromParent"")
                .build());
        waitUntilUserRemoved(mProfileUserId);
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeDataWithoutReason"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeDataWithoutReason() throws Exception {
        assertTrue(listUsers().contains(mProfileUserId));

        // testWipeDataWithoutReason() removes the managed profile,
        // so it needs to separated from other tests.
        // Check the notification is not presented after work profile got removed, so profile user
        // no longer exists, verification should be run in primary user.
        // Both the profile wipe and notification verification are done on the device side test
        // because notifications are checked using a NotificationListenerService
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".WipeDataNotificationTest"",
                ""testWipeDataWithoutReasonVerification"",
                mParentUserId,
                mTestArgs);

        // Note: the managed profile is removed by this test, which will make removeUserCommand in
        // tearDown() to complain, but that should be OK since its result is not asserted.
        waitUntilUserRemoved(mProfileUserId);
    }

    /**
     * wipeData() test removes the managed profile, so it needs to be separated from other tests.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileWipeTest"	"testWipeData"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeData() throws Exception {
        assertTrue(listUsers().contains(mProfileUserId));

        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".WipeDataNotificationTest"",
                ""testWipeDataWithEmptyReasonVerification"",
                mParentUserId,
                mTestArgs);

        // Note: the managed profile is removed by this test, which will make removeUserCommand in
        // tearDown() to complain, but that should be OK since its result is not asserted.
        waitUntilUserRemoved(mProfileUserId);
    }

    private void configureNotificationListener() throws DeviceNotAvailableException {
        getDevice().executeShellCommand(""cmd notification allow_listener ""
                + ""com.android.cts.managedprofile/.NotificationListener"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileWipeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ProfileOwnerTestApi23"	"testDelegatedCertInstaller"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDelegatedCertInstaller() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG,
                "".DelegatedCertInstallerTest"", ""testSetNotExistCertInstallerPackage"",  mUserId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTestApi23.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi25"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.annotations.PermissionsTest;

import org.junit.Test;

/**
 * Set of tests for managed profile owner use cases that also apply to device owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTestApi25.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTestApi25 extends DeviceAndProfileOwnerTestApi25 {
    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mUserId);

        super.tearDown();
    }

    @Override
    @PermissionsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi25.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"testNoSystemAppHasSyntheticAppDetailsActivityInjected"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testNoSystemAppHasSyntheticAppDetailsActivityInjected() throws Exception {
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testNoSystemAppHasSyntheticAppDetailsActivityInjected"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import org.junit.Test;

import java.util.Collections;

/**
 * Set of tests for the limit app icon hiding feature.
 */
public class LimitAppIconHidingTest extends BaseLauncherAppsTest {

    private static final String LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK =
            ""CtsHasLauncherActivityApp.apk"";
    private static final String LAUNCHER_TESTS_NO_LAUNCHER_ACTIVITY_APK =
            ""CtsNoLauncherActivityApp.apk"";
    private static final String LAUNCHER_TESTS_NO_PERMISSION_APK =
            ""CtsNoPermissionApp.apk"";

    private String mSerialNumber;
    private int mCurrentUserId;

    @Override
    protected void assumeTestEnabled() throws Exception {
        assumeApiLevel(21);
    }

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mCurrentUserId = getDevice().getCurrentUser();
        mSerialNumber = Integer.toString(getUserSerialNumber(mCurrentUserId));
        uninstallTestApps();
        installTestApps(mCurrentUserId);
    }

    @Override
    public void tearDown() throws Exception {
        uninstallTestApps();

        super.tearDown();
    }

    @Override
    protected void installTestApps(int userId) throws Exception {
        super.installTestApps(mCurrentUserId);
        installAppAsUser(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK, mCurrentUserId);
        installAppAsUser(LAUNCHER_TESTS_NO_LAUNCHER_ACTIVITY_APK, mCurrentUserId);
        installAppAsUser(LAUNCHER_TESTS_NO_PERMISSION_APK, mCurrentUserId);
    }

    @Override
    protected void uninstallTestApps() throws Exception {
        super.uninstallTestApps();
        getDevice().uninstallPackage(LAUNCHER_TESTS_NO_PERMISSION_APK);
        getDevice().uninstallPackage(LAUNCHER_TESTS_NO_LAUNCHER_ACTIVITY_APK);
        getDevice().uninstallPackage(LAUNCHER_TESTS_HAS_LAUNCHER_ACTIVITY_APK);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"testHasLauncherActivityAppHasAppDetailsActivityInjected"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testHasLauncherActivityAppHasAppDetailsActivityInjected() throws Exception {
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testHasLauncherActivityAppHasAppDetailsActivityInjected"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"testNoLauncherActivityAppNotInjected"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNoLauncherActivityAppNotInjected() throws Exception {
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testNoLauncherActivityAppNotInjected"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"testNoPermissionAppNotInjected"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNoPermissionAppNotInjected() throws Exception {
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testNoPermissionAppNotInjected"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LimitAppIconHidingTest"	"testGetSetSyntheticAppDetailsActivityEnabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetSetSyntheticAppDetailsActivityEnabled() throws Exception {
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testGetSetSyntheticAppDetailsActivityEnabled"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LimitAppIconHidingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import org.junit.Test;

import java.util.Collections;

/**
 * Set of tests for LauncherApps attempting to access a non-profiles
 * apps.
 */
public class LauncherAppsMultiUserTest extends BaseLauncherAppsTest {

    private int mSecondaryUserId;
    private String mSecondaryUserSerialNumber;

    @Override
    protected void assumeTestEnabled() throws Exception {
        // We need multi user to be supported in order to create a secondary user
        // and api level 21 to support LauncherApps
        assumeSupportsMultiUser();
        assumeApiLevel(21);
    }

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        uninstallTestApps();
        installTestApps(mPrimaryUserId);
        // Create a secondary user.
        mSecondaryUserId = createUser();
        mSecondaryUserSerialNumber = Integer.toString(getUserSerialNumber(mSecondaryUserId));
        startUser(mSecondaryUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mSecondaryUserId);
        uninstallTestApps();

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"testGetActivitiesForNonProfileFails"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetActivitiesForNonProfileFails() throws Exception {
        installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testGetActivitiesForUserFails"",
                mPrimaryUserId,
                Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsMultiUserTest"	"testNoLauncherCallbackPackageAddedSecondaryUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNoLauncherCallbackPackageAddedSecondaryUser() throws Exception {
        startCallbackService(mPrimaryUserId);
        installAppAsUser(SIMPLE_APP_APK, mPrimaryUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testNoPackageAddedCallbackForUser"",
                mPrimaryUserId,
                Collections.singletonMap(PARAM_TEST_USER, mSecondaryUserSerialNumber));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsMultiUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testDisallowSharingIntoPersonalFromProfile"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testDisallowSharingIntoPersonalFromProfile() throws Exception {
        // Set up activities: PrimaryUserActivity will only be enabled in the personal user
        // This activity is used to find out the ground truth about the system's cross profile
        // intent forwarding activity.
        disableActivityForUser(""PrimaryUserActivity"", mProfileUserId);

        // Tests from the profile side
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                "".DisallowSharingIntoProfileTest"", ""testSharingFromProfile"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testDisallowSharingIntoProfileFromPersonal"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testDisallowSharingIntoProfileFromPersonal() throws Exception {
        // Set up activities: ManagedProfileActivity will only be enabled in the managed profile
        // This activity is used to find out the ground truth about the system's cross profile
        // intent forwarding activity.
        disableActivityForUser(""ManagedProfileActivity"", mParentUserId);

        // Tests from the personal side, which is mostly driven from host side.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DisallowSharingIntoProfileTest"",
                ""testSetUp"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DisallowSharingIntoProfileTest"",
                ""testDisableSharingIntoProfile"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DisallowSharingIntoProfileTest"",
                ""testSharingFromPersonalFails"", mParentUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DisallowSharingIntoProfileTest"",
                ""testEnableSharingIntoProfile"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DisallowSharingIntoProfileTest"",
                ""testSharingFromPersonalSucceeds"", mParentUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileIntentFilters"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileIntentFilters() throws Exception {
        // Set up activities: ManagedProfileActivity will only be enabled in the managed profile and
        // PrimaryUserActivity only in the primary one
        disableActivityForUser(""ManagedProfileActivity"", mParentUserId);
        disableActivityForUser(""PrimaryUserActivity"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"", mProfileUserId);

        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".CrossProfileIntentFilterTest"",
                    ""testAddCrossProfileIntentFilter_all"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(ADD_CROSS_PROFILE_INTENT_FILTER_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .setInt(1)
                .setStrings(""com.android.cts.managedprofile.ACTION_TEST_ALL_ACTIVITY"")
                .build());

        // Set up filters from primary to managed profile
        String command = ""am start -W --user "" + mProfileUserId + "" "" + MANAGED_PROFILE_PKG
                + ""/.PrimaryUserFilterSetterActivity"";
        LogUtil.CLog.d(""Output for command "" + command + "": ""
                + getDevice().executeShellCommand(command));
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".PrimaryUserTest"", mParentUserId);
        // TODO: Test with startActivity
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileContent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileContent() throws Exception {

        // Storage permission shouldn't be granted, we check if missing permissions are respected
        // in ContentTest#testSecurity.
        installAppAsUser(INTENT_SENDER_APK, false /* grantPermissions */, USER_ALL);
        installAppAsUser(INTENT_RECEIVER_APK, USER_ALL);

        // Test from parent to managed
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testRemoveAllFilters"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testAddManagedCanAccessParentFilters"", mProfileUserId);
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".ContentTest"", mParentUserId);

        // Test from managed to parent
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testRemoveAllFilters"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testAddParentCanAccessManagedFilters"", mProfileUserId);
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".ContentTest"", mProfileUserId);

    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileNotificationListeners_EmptyAllowlist"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileNotificationListeners_EmptyAllowlist() throws Exception {

        installAppAsUser(NOTIFICATION_APK, USER_ALL);

        // Profile owner in the profile sets an empty allowlist
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testSetEmptyAllowlist"", mProfileUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
        // Listener outside the profile can only see personal notifications.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testCannotReceiveProfileNotifications"", mParentUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileNotificationListeners_NullAllowlist"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileNotificationListeners_NullAllowlist() throws Exception {

        installAppAsUser(NOTIFICATION_APK, USER_ALL);

        // Profile owner in the profile sets a null allowlist
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testSetNullAllowlist"", mProfileUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
        // Listener outside the profile can see profile and personal notifications
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testCanReceiveNotifications"", mParentUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileNotificationListeners_InAllowlist"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileNotificationListeners_InAllowlist() throws Exception {

        installAppAsUser(NOTIFICATION_APK, USER_ALL);

        // Profile owner in the profile adds listener to the allowlist
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testAddListenerToAllowlist"", mProfileUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
        // Listener outside the profile can see profile and personal notifications
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testCanReceiveNotifications"", mParentUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileNotificationListeners_setAndGet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileNotificationListeners_setAndGet() throws Exception {
        installAppAsUser(NOTIFICATION_APK, USER_ALL);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NotificationListenerTest"",
                ""testSetAndGetPermittedCrossProfileNotificationListeners"", mProfileUserId,
                Collections.singletonMap(PARAM_PROFILE_ID, Integer.toString(mProfileUserId)));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileCopyPaste"	"CtsDevicePolicyManagerTestCases"	"2: user direct"	"public void testCrossProfileCopyPaste() throws Exception {
        installAppAsUser(INTENT_RECEIVER_APK, USER_ALL);
        installAppAsUser(INTENT_SENDER_APK, USER_ALL);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testAllowCrossProfileCopyPaste"", mProfileUserId);
        // Test that managed can see what is copied in the parent.
        testCrossProfileCopyPasteInternal(mProfileUserId, true);
        // Test that the parent can see what is copied in managed.
        testCrossProfileCopyPasteInternal(mParentUserId, true);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testDisallowCrossProfileCopyPaste"", mProfileUserId);
        // Test that managed can still see what is copied in the parent.
        testCrossProfileCopyPasteInternal(mProfileUserId, true);
        // Test that the parent cannot see what is copied in managed.
        testCrossProfileCopyPasteInternal(mParentUserId, false);
    }

    private void testCrossProfileCopyPasteInternal(int userId, boolean shouldSucceed)
            throws DeviceNotAvailableException {
        final String direction = (userId == mParentUserId)
                ? ""testAddManagedCanAccessParentFilters""
                : ""testAddParentCanAccessManagedFilters"";
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                ""testRemoveAllFilters"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileUtils"",
                direction, mProfileUserId);
        if (shouldSucceed) {
            runDeviceTestsAsUser(INTENT_SENDER_PKG, "".CopyPasteTest"",
                    ""testCanReadAcrossProfiles"", userId);
        } else {
            runDeviceTestsAsUser(INTENT_SENDER_PKG, "".CopyPasteTest"",
                    ""testCannotReadAcrossProfiles"", userId);
        }
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileWidgets"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileWidgets() throws Exception {
        try {
            installAppAsUser(WIDGET_PROVIDER_APK, USER_ALL);
            getDevice().executeShellCommand(""appwidget grantbind --user "" + mParentUserId
                    + "" --package "" + WIDGET_PROVIDER_PKG);
            setIdleAllowlist(WIDGET_PROVIDER_PKG, true);
            startWidgetHostService();

            String commandOutput = changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                    ""add-cross-profile-widget"", mProfileUserId);
            assertTrue(""Command was expected to succeed "" + commandOutput,
                    commandOutput.contains(""Status: ok""));

            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileWidgetTest"",
                    ""testCrossProfileWidgetProviderAdded"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    "".CrossProfileWidgetPrimaryUserTest"",
                    ""testHasCrossProfileWidgetProvider_true"", mParentUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    "".CrossProfileWidgetPrimaryUserTest"",
                    ""testHostReceivesWidgetUpdates_true"", mParentUserId);

            commandOutput = changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                    ""remove-cross-profile-widget"", mProfileUserId);
            assertTrue(""Command was expected to succeed "" + commandOutput,
                    commandOutput.contains(""Status: ok""));

            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileWidgetTest"",
                    ""testCrossProfileWidgetProviderRemoved"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    "".CrossProfileWidgetPrimaryUserTest"",
                    ""testHasCrossProfileWidgetProvider_false"", mParentUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    "".CrossProfileWidgetPrimaryUserTest"",
                    ""testHostReceivesWidgetUpdates_false"", mParentUserId);
        } finally {
            changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG, ""remove-cross-profile-widget"",
                    mProfileUserId);
            getDevice().uninstallPackage(WIDGET_PROVIDER_PKG);
        }
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileWidgetsLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileWidgetsLogged() throws Exception {
        try {
            installAppAsUser(WIDGET_PROVIDER_APK, USER_ALL);
            getDevice().executeShellCommand(""appwidget grantbind --user "" + mParentUserId
                    + "" --package "" + WIDGET_PROVIDER_PKG);
            setIdleAllowlist(WIDGET_PROVIDER_PKG, true);
            startWidgetHostService();

            assertMetricsLogged(getDevice(), () -> {
                changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                        ""add-cross-profile-widget"", mProfileUserId);
                changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG,
                        ""remove-cross-profile-widget"", mProfileUserId);
            }, new DevicePolicyEventWrapper
                        .Builder(ADD_CROSS_PROFILE_WIDGET_PROVIDER_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .build(),
                new DevicePolicyEventWrapper
                        .Builder(REMOVE_CROSS_PROFILE_WIDGET_PROVIDER_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .build());
        } finally {
            changeCrossProfileWidgetForUser(WIDGET_PROVIDER_PKG, ""remove-cross-profile-widget"",
                    mProfileUserId);
            getDevice().uninstallPackage(WIDGET_PROVIDER_PKG);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testCrossProfileCalendarPackage"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCrossProfileCalendarPackage() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileCalendarTest"",
                    ""testCrossProfileCalendarPackage"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(SET_CROSS_PROFILE_CALENDAR_PACKAGES_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setStrings(MANAGED_PROFILE_PKG)
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_notProfileOwner_throwsSecurityException"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetCrossProfilePackages_notProfileOwner_throwsSecurityException()
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_notProfileOwner_throwsSecurityException"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testGetCrossProfilePackages_notProfileOwner_throwsSecurityException"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetCrossProfilePackages_notProfileOwner_throwsSecurityException()
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileTest"",
                ""testGetCrossProfilePackages_notProfileOwner_throwsSecurityException"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testGetCrossProfilePackages_notSet_returnsEmpty"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetCrossProfilePackages_notSet_returnsEmpty()
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileTest"",
                ""testGetCrossProfilePackages_notSet_returnsEmpty"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated()
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileTest"",
                ""testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testGetCrossProfilePackages_whenSet_returnsEqual"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetCrossProfilePackages_whenSet_returnsEqual()
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileTest"",
                ""testGetCrossProfilePackages_whenSet_returnsEqual"",
                mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps() throws Exception {
        installAllTestApps();
        setupLogcatForTest();

        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps_noAsserts"");
        waitForBroadcastIdle();

        assertTestAppsReceivedCanInteractAcrossProfilesChangedBroadcast(
                UNSET_CROSS_PROFILE_PACKAGES);
        assertTestAppsDidNotReceiveCanInteractAcrossProfilesChangedBroadcast(
                MAINTAINED_CROSS_PROFILE_PACKAGES);
    }

    private void setupLogcatForTest() throws Exception {
        // Clear and increase logcat buffer size because the test is reading from it.
        final String clearLogcatCommand = ""logcat -c"";
        getDevice().executeShellCommand(clearLogcatCommand);
        final String increaseLogcatBufferCommand = ""logcat -G 16M"";
        getDevice().executeShellCommand(increaseLogcatBufferCommand);
    }

    /** Assumes that logcat is clear before running the test. */
    private void assertTestAppsReceivedCanInteractAcrossProfilesChangedBroadcast(
            Set<String> packageNames)
            throws Exception {
        for (String packageName : packageNames) {
            assertTrue(didTestAppReceiveCanInteractAcrossProfilesChangedBroadcast(
                    packageName, mProfileUserId));
            assertTrue(didTestAppReceiveCanInteractAcrossProfilesChangedBroadcast(
                    packageName, mParentUserId));
        }
    }

    /** Assumes that logcat is clear before running the test. */
    private void assertTestAppsDidNotReceiveCanInteractAcrossProfilesChangedBroadcast(
            Set<String> packageNames)
            throws Exception {
        for (String packageName : packageNames) {
            assertFalse(didTestAppReceiveCanInteractAcrossProfilesChangedBroadcast(
                    packageName, mProfileUserId));
            assertFalse(didTestAppReceiveCanInteractAcrossProfilesChangedBroadcast(
                    packageName, mParentUserId));
        }
    }

    /** Assumes that logcat is clear before running the test. */
    private boolean didTestAppReceiveCanInteractAcrossProfilesChangedBroadcast(
            String packageName, int userId)
            throws Exception {
        // The expected string is defined in the broadcast receiver of the test apps to be
        // packageName#action#userId.
        final String expectedSubstring =
                packageName + ""#"" + ACTION_CAN_INTERACT_ACROSS_PROFILES_CHANGED + ""#"" + userId;
        return readLogcat().contains(expectedSubstring);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_killsApps"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSetCrossProfilePackages_killsApps() throws Exception {
        installAllTestApps();
        launchAllTestAppsInBothProfiles();
        Map<String, List<String>> maintainedPackagesPids = getPackagesPids(
                MAINTAINED_CROSS_PROFILE_PACKAGES_2);
        Map<String, List<String>> unsetPackagesPids = getPackagesPids(
                UNSET_CROSS_PROFILE_PACKAGES_2);

        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_resetsAppOps_noAsserts"");

        for (String packageName : MAINTAINED_CROSS_PROFILE_PACKAGES_2) {
            assertAppRunningInBothProfiles(packageName, maintainedPackagesPids.get(packageName));
        }
        for (String packageName : UNSET_CROSS_PROFILE_PACKAGES_2) {
            assertAppKilledInBothProfiles(packageName, unsetPackagesPids.get(packageName));
        }
    }

    private Map<String, List<String>> getPackagesPids(Set<String> packages) throws Exception {
        Map<String, List<String>> pids = new HashMap<>();
        for (String packageName : packages) {
            pids.put(packageName, Arrays.asList(getAppPid(packageName).split("" "")));
        }
        return pids;
    }

    private void launchAllTestAppsInBothProfiles() throws Exception {
        launchAllTestAppsForUser(mParentUserId);
        launchAllTestAppsForUser(mProfileUserId);
    }

    private void launchAllTestAppsForUser(int userId) throws Exception {
        final String testActivity = ""android.app.Activity"";
        startActivityAsUser(userId, TEST_APP_1_PKG, testActivity);
        startActivityAsUser(userId, TEST_APP_2_PKG, testActivity);
        startActivityAsUser(userId, TEST_APP_3_PKG, testActivity);
        startActivityAsUser(userId, TEST_APP_4_PKG, testActivity);
    }

    private void assertAppRunningInBothProfiles(String packageName, List<String> pids)
            throws Exception {
        Set<String> currentPids = new HashSet<>(
                Arrays.asList(getAppPid(packageName).split("" "")));
        assertThat(currentPids).containsAtLeastElementsIn(pids);
    }

    private void assertAppKilledInBothProfiles(String packageName,  List<String> pids)
            throws Exception {
        Set<String> currentPids = new HashSet<>(
                Arrays.asList(getAppPid(packageName).split("" "")));
        assertThat(currentPids).containsNoneIn(pids);
    }

    private String getAppPid(String packageName) throws Exception {
        return getDevice().executeShellCommand(String.format(""pidof %s"", packageName)).trim();
    }

    private void setIdleAllowlist(String packageName, boolean enabled)
            throws DeviceNotAvailableException {
        String command = ""cmd deviceidle whitelist "" + (enabled ? ""+"" : ""-"") + packageName;
        LogUtil.CLog.d(""Output for command "" + command + "": ""
                + getDevice().executeShellCommand(command));
    }

    private String changeCrossProfileWidgetForUser(String packageName, String command, int userId)
            throws DeviceNotAvailableException {
        String adbCommand = ""am start -W --user "" + userId
                + "" -c android.intent.category.DEFAULT ""
                + "" --es extra-command "" + command
                + "" --es extra-package-name "" + packageName
                + "" "" + MANAGED_PROFILE_PKG + ""/.SetPolicyActivity"";
        String commandOutput = getDevice().executeShellCommand(adbCommand);
        LogUtil.CLog.d(""Output for command "" + adbCommand + "": "" + commandOutput);
        return commandOutput;
    }

    private void startWidgetHostService() throws Exception {
        String command = ""am startservice --user "" + mParentUserId
                + "" -a "" + WIDGET_PROVIDER_PKG + "".REGISTER_CALLBACK ""
                + ""--ei user-extra "" + getUserSerialNumber(mProfileUserId)
                + "" "" + WIDGET_PROVIDER_PKG + ""/.SimpleAppWidgetHostService"";
        LogUtil.CLog.d(""Output for command "" + command + "": ""
                + getDevice().executeShellCommand(command));
    }

    private void installAllTestApps() throws Exception {
        installAppAsUser(TEST_APP_1_APK, USER_ALL);
        installAppAsUser(TEST_APP_2_APK, USER_ALL);
        installAppAsUser(TEST_APP_3_APK, USER_ALL);
        installAppAsUser(TEST_APP_4_APK, USER_ALL);
    }

    private void runWorkProfileDeviceTest(String className, String methodName) throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                className,
                methodName,
                mProfileUserId);
    }

    private String readLogcat() throws Exception {
        getDevice().stopLogcat();
        final String logcat;
        try (InputStreamSource logcatStream = getDevice().getLogcat()) {
            logcat = StreamUtil.getStringFromSource(logcatStream);
        }
        getDevice().startLogcat();
        return logcat;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_isLogged"	"CtsDevicePolicyManagerTestCases"	"1: apps"	"public void testSetCrossProfilePackages_isLogged() throws Exception {
        installAllTestApps();
        assertMetricsLogged(
                getDevice(),
                () -> runWorkProfileDeviceTest(
                        "".CrossProfileTest"", ""testSetCrossProfilePackages_noAsserts""),
                new DevicePolicyEventWrapper.Builder(SET_CROSS_PROFILE_PACKAGES_VALUE)
                        .setAdminPackageName(MANAGED_PROFILE_PKG)
                        .setStrings(TEST_APP_1_PKG)
                        .build());
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_resetsAppOps"	"CtsDevicePolicyManagerTestCases"	"1: apps"	"public void testSetCrossProfilePackages_resetsAppOps() throws Exception {
        installAllTestApps();
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_firstTime_doesNotResetAnyAppOps"");
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_unchanged_doesNotResetAnyAppOps"");
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_noPackagesUnset_doesNotResetAnyAppOps"");
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_somePackagesUnset_doesNotResetAppOpsIfStillSet"");
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_resetsAppOpOfUnsetPackages"");
        runWorkProfileDeviceTest(
                "".CrossProfileTest"",
                ""testSetCrossProfilePackages_resetsAppOpOfUnsetPackagesOnOtherProfile"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileCrossProfileTest"	"testSetCrossProfilePackages_resetsAppOps_isLogged"	"CtsDevicePolicyManagerTestCases"	"1: apps"	"public void testSetCrossProfilePackages_resetsAppOps_isLogged() throws Exception {
        installAllTestApps();
        assertMetricsLogged(
                getDevice(),
                () -> runWorkProfileDeviceTest(
                        "".CrossProfileTest"", ""testSetCrossProfilePackages_resetsAppOps_noAsserts""),
                new DevicePolicyEventWrapper.Builder(SET_INTERACT_ACROSS_PROFILES_APP_OP_VALUE)
                        .setStrings(TEST_APP_4_PKG)
                        .setInt(MODE_DEFAULT)
                        .setBoolean(true) // cross-profile manifest attribute
                        .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileCrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPrimaryUserToPrimaryUser() throws Exception {
        verifyCrossProfileAppsApi(mPrimaryUserId, mPrimaryUserId, NON_TARGET_USER_TEST_CLASS);
    }

    @FlakyTest
    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToManagedProfile"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPrimaryUserToManagedProfile() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mPrimaryUserId, mProfileId, TARGET_USER_TEST_CLASS);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testManagedProfileToPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testManagedProfileToPrimaryUser() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, TARGET_USER_TEST_CLASS);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityComponent"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityComponent() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByComponent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNonMainActivityByComponent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartNotExportedActivityByComponent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityInOtherPackageByComponent"");
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityIntent() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityWithImplicitIntent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByIntent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartMainActivityByIntent_withOptionsBundle"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNonMainActivityByIntent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartNotExportedActivityByIntent"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityInOtherPackageByIntent"");
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntentPermissions"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityIntentPermissions() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCannotStartActivityByIntentWithNoPermissions"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossProfilesPermission"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossUsersPermission"");
        verifyCrossProfileAppsApi(mProfileId, mPrimaryUserId, START_ACTIVITY_TEST_CLASS, ""testCanStartActivityByIntentWithInteractAcrossUsersFullPermission"");
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent_isLogged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityIntent_isLogged() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        assertMetricsLogged(
                getDevice(),
                () -> verifyCrossProfileAppsApi(
                        mProfileId,
                        mPrimaryUserId,
                        START_ACTIVITY_TEST_CLASS,
                        ""testStartActivityByIntent_noAsserts""),
                new DevicePolicyEventWrapper
                        .Builder(START_ACTIVITY_BY_INTENT_VALUE)
                        .setStrings(TEST_PACKAGE)
                        .setBoolean(true) // from work profile
                        .build());
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent_sameTaskByDefault"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityIntent_sameTaskByDefault() throws Exception {
        // TODO(b/171957840): replace with device-side test using an inter-process communication
        //  library.
        if (!mHasManagedUserFeature) {
            return;
        }
        getDevice().clearLogcat();
        verifyCrossProfileAppsApi(
                mProfileId,
                mPrimaryUserId,
                START_ACTIVITY_TEST_CLASS,
                ""testStartActivityIntent_sameTaskByDefault"");
        assertThat(findTaskId(""CrossProfileSameTaskLauncherActivity""))
                .isEqualTo(findTaskId(""NonMainActivity""));
    }

    private int findTaskId(String className) throws Exception {
        final Matcher matcher =
                Pattern.compile(className + ""#taskId#"" + ""(.*?)"" + ""#"").matcher(readLogcat());
        boolean isFound = matcher.find();
        if (!isFound) {
            fail(""Task not found for "" + className);
            return -1;
        }
        return Integer.parseInt(matcher.group(1));
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartActivityIntent_crossProfile_returnsResult"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartActivityIntent_crossProfile_returnsResult() throws Exception {
        // TODO(b/171957840): replace with device-side test using an inter-process communication
        //  library.
        if (!mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(
                mProfileId,
                mPrimaryUserId,
                START_ACTIVITY_TEST_CLASS,
                ""testStartActivityIntent_crossProfile_returnsResult"");
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testPrimaryUserToSecondaryUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testPrimaryUserToSecondaryUser() throws Exception {
        if (!mCanTestMultiUser) {
            return;
        }
        verifyCrossProfileAppsApi(mPrimaryUserId, mSecondaryUserId, NON_TARGET_USER_TEST_CLASS);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testSecondaryUserToManagedProfile"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSecondaryUserToManagedProfile() throws Exception {
        if (!mCanTestMultiUser || !mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mSecondaryUserId, mProfileId, NON_TARGET_USER_TEST_CLASS);

    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testManagedProfileToSecondaryUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testManagedProfileToSecondaryUser() throws Exception {
        if (!mCanTestMultiUser || !mHasManagedUserFeature) {
            return;
        }
        verifyCrossProfileAppsApi(mProfileId, mSecondaryUserId, NON_TARGET_USER_TEST_CLASS);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testStartMainActivity_logged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testStartMainActivity_logged() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        assertMetricsLogged(
                getDevice(),
                () -> {
                    runDeviceTest(
                            mProfileId,
                            mPrimaryUserId,
                            TARGET_USER_TEST_CLASS,
                            ""testStartMainActivity_noAsserts"");
                },
                new DevicePolicyEventWrapper
                        .Builder(CROSS_PROFILE_APPS_START_ACTIVITY_AS_USER_VALUE)
                        .setStrings(new String[] {""com.android.cts.crossprofileappstest""})
                        .build());
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsHostSideTest"	"testGetTargetUserProfiles_logged"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testGetTargetUserProfiles_logged() throws Exception {
        if (!mHasManagedUserFeature) {
            return;
        }
        assertMetricsLogged(
                getDevice(),
                () -> {
                    runDeviceTest(
                            mProfileId,
                            mPrimaryUserId,
                            TARGET_USER_TEST_CLASS,
                            ""testGetTargetUserProfiles_noAsserts"");
                },
                new DevicePolicyEventWrapper
                        .Builder(CROSS_PROFILE_APPS_GET_TARGET_USER_PROFILES_VALUE)
                        .setStrings(new String[] {""com.android.cts.crossprofileappstest""})
                        .build());
    }

    private void verifyCrossProfileAppsApi(int fromUserId, int targetUserId, String testClass)
            throws Exception {
        verifyCrossProfileAppsApi(fromUserId, targetUserId, testClass, /* testMethod= */ null);
    }

    private void verifyCrossProfileAppsApi(int fromUserId, int targetUserId, String testClass, String testMethod)
            throws Exception {
        runDeviceTest(fromUserId, targetUserId, testClass, testMethod);
    }

    private void runDeviceTest(
            int fromUserId, int targetUserId, String testClass, @Nullable String testMethod)
            throws Exception {
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                testClass,
                testMethod,
                fromUserId,
                createTargetUserParam(targetUserId));
    }

    private void createAndStartManagedProfile() throws Exception {
        mProfileId = createManagedProfile(mPrimaryUserId);
        switchUser(mPrimaryUserId);
        startUser(mProfileId);
    }

    private Map<String, String> createTargetUserParam(int targetUserId) throws Exception {
        return Collections.singletonMap(PARAM_TARGET_USER,
                Integer.toString(getUserSerialNumber(targetUserId)));
    }

    private String readLogcat() throws Exception {
        getDevice().stopLogcat();
        final String logcat;
        try (InputStreamSource logcatStream = getDevice().getLogcat()) {
            logcat = StreamUtil.getStringFromSource(logcatStream);
        }
        getDevice().startLogcat();
        return logcat;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.SeparateProfileChallengeTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.AsbSecurityTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Test;

/**
 * Host side tests for separate profile challenge permissions.
 * Run the CtsSeparateProfileChallengeApp device side test.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class SeparateProfileChallengeTest extends BaseDevicePolicyTest {
    private static final String SEPARATE_PROFILE_PKG = ""com.android.cts.separateprofilechallenge"";
    private static final String SEPARATE_PROFILE_APK = ""CtsSeparateProfileChallengeApp.apk"";
    private static final String SEPARATE_PROFILE_TEST_CLASS =
        "".SeparateProfileChallengePermissionsTest"";
    private String mPreviousHiddenApiPolicy = ""0"";

    @Override
    public void setUp() throws Exception {
        super.setUp();

        setHiddenApiPolicyOn();
    }

    @Override
    public void tearDown() throws Exception {

        removeTestUsers();
        getDevice().uninstallPackage(SEPARATE_PROFILE_PKG);
        setHiddenApiPolicyPreviousOrOff();
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/SeparateProfileChallengeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.SeparateProfileChallengeTest"	"testSeparateProfileChallengePermissions"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"@AsbSecurityTest(cveBugId = 128599668)
    public void testSeparateProfileChallengePermissions() throws Exception {
        assumeCanCreateOneManagedUser();

        // Create managed profile.
        final int profileUserId = createManagedProfile(mPrimaryUserId);
        // createManagedProfile doesn't start the user automatically.
        startUser(profileUserId);
        installAppAsUser(SEPARATE_PROFILE_APK, profileUserId);
        executeSeparateProfileChallengeTest(profileUserId);
    }

    protected void setHiddenApiPolicyOn() throws Exception {
        mPreviousHiddenApiPolicy = getDevice().executeShellCommand(
                ""settings get global hidden_api_policy_p_apps"");
        executeShellCommand(""settings put global hidden_api_policy_p_apps 1"");
    }

    protected void setHiddenApiPolicyPreviousOrOff() throws Exception {
        executeShellCommand(""settings put global hidden_api_policy_p_apps ""
            + mPreviousHiddenApiPolicy);
    }

    private void executeSeparateProfileChallengeTest(int userId) throws Exception {
        runDeviceTestsAsUser(SEPARATE_PROFILE_PKG, SEPARATE_PROFILE_TEST_CLASS, userId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/SeparateProfileChallengeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.EphemeralUserTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Tests for ephemeral users and profiles.
 */
public class EphemeralUserTest extends BaseDevicePolicyTest {

    @Override
    protected void assumeTestEnabled() throws Exception {
        assumeCanCreateAdditionalUsers(1);
    }

    @Override
    public void tearDown() throws Exception {
        removeTestUsers();

        super.tearDown();
    }

    /** The user should have the ephemeral flag set if it was created as ephemeral. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.EphemeralUserTest"	"testCreateEphemeralUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateEphemeralUser() throws Exception {
        int userId = createUser(FLAG_EPHEMERAL);
        int flags = getUserFlags(userId);
        assertTrue(""ephemeral flag must be set"", FLAG_EPHEMERAL == (flags & FLAG_EPHEMERAL));
    }

    /** The user should not have the ephemeral flag set if it was not created as ephemeral. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.EphemeralUserTest"	"testCreateLongLivedUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateLongLivedUser() throws Exception {
        int userId = createUser();
        int flags = getUserFlags(userId);
        assertTrue(""ephemeral flag must not be set"", 0 == (flags & FLAG_EPHEMERAL));
    }

    /**
     * Ephemeral user should be automatically removed after it is stopped.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.EphemeralUserTest"	"testRemoveEphemeralOnStop"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRemoveEphemeralOnStop() throws Exception {
        int userId = createUser(FLAG_EPHEMERAL);
        startUser(userId);
        assertTrue(""ephemeral user must exists after start"", listUsers().contains(userId));
        stopUser(userId);
        assertFalse(""ephemeral user must be removed after stop"", listUsers().contains(userId));
    }

    /**
     * The guest should be automatically created ephemeral when the ephemeral-guest feature is set
     * and not ephemeral when the feature is not set.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.EphemeralUserTest"	"testEphemeralGuestFeature"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testEphemeralGuestFeature() throws Exception {
        // Create a guest user.
        int userId = createUser(FLAG_GUEST);
        int flags = getUserFlags(userId);
        if (getGuestUsersEphemeral()) {
            // Check the guest was automatically created ephemeral.
            assertTrue(""ephemeral flag must be set for guest"",
                    FLAG_EPHEMERAL == (flags & FLAG_EPHEMERAL));
        } else {
            // The guest should not be ephemeral.
            assertTrue(""ephemeral flag must not be set for guest"", 0 == (flags & FLAG_EPHEMERAL));
        }
    }

    private boolean getGuestUsersEphemeral() throws Exception {
        String commandOutput = getDevice().executeShellCommand(""dumpsys user"");
        String[] outputLines = commandOutput.split(""\n"");
        for (String line : outputLines) {
            String[] lineParts = line.split("":"");
            if (lineParts.length == 2 && lineParts[0].trim().equals(""All guests ephemeral"")) {
                return Boolean.parseBoolean(lineParts[1].trim());
            }
        }
        return false;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/EphemeralUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testManagedProfileSetup"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testManagedProfileSetup() throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".ManagedProfileSetupTest"",
                mProfileUserId);
    }

    @DoesNotRequireFeature"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testMaxOneManagedProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testMaxOneManagedProfile() throws Exception {
        int newUserId = -1;
        try {
            newUserId = createManagedProfile(mParentUserId);
        } catch (AssertionError expected) {
        }
        if (newUserId > 0) {
            removeUser(newUserId);
            if (mFeaturesCheckerRule.hasRequiredFeatures()) {
                // Exception is Android TV which can create multiple managed profiles
                if (!isTv()) {
                    fail(""Device must allow creating only one managed profile"");
                }
            } else {
                fail(""Device must not allow creating a managed profile"");
            }
        }
    }

    /**
     * Verify that removing a managed profile will remove all networks owned by that profile.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testProfileWifiCleanup"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProfileWifiCleanup() throws Exception {
        assumeHasWifiFeature();

        try (LocationModeSetter locationModeSetter = new LocationModeSetter(getDevice())) {
            locationModeSetter.setLocationEnabled(true);
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, "".WifiTest"", ""testRemoveWifiNetworkIfExists"",
                    mParentUserId);

            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, "".WifiTest"", ""testAddWifiNetwork"", mProfileUserId);

            // Now delete the user - should undo the effect of testAddWifiNetwork.
            removeUser(mProfileUserId);
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, "".WifiTest"", ""testWifiNetworkDoesNotExist"",
                    mParentUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testSettingsIntents"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSettingsIntents() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".SettingsIntentsTest"",
                mProfileUserId);
    }

    /** Tests for the API helper class. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCurrentApiHelper"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCurrentApiHelper() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CurrentApiHelperTest"",
                mProfileUserId);
    }

    /** Test: unsupported public APIs are disabled on a parent profile. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testParentProfileApiDisabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testParentProfileApiDisabled() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ParentProfileTest"",
                ""testParentProfileApiDisabled"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCannotCallMethodsOnParentProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotCallMethodsOnParentProfile() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ParentProfileTest"",
                ""testCannotWipeParentProfile"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ParentProfileTest"",
                ""testCannotCallAutoTimeMethodsOnParentProfile"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ParentProfileTest"",
                ""testCannotCallSetDefaultSmsApplicationOnParentProfile"", mProfileUserId);
    }

    // TODO: This test is not specific to managed profiles, but applies to multi-user in general.
    // Move it to a MultiUserTest class when there is one. Should probably move
    // SetPolicyActivity to a more generic apk too as it might be useful for different kinds
    // of tests (same applies to ComponentDisablingActivity)."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testNoDebuggingFeaturesRestriction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNoDebuggingFeaturesRestriction() throws Exception {
        // If adb is running as root, then the adb uid is 0 instead of SHELL_UID,
        // so the DISALLOW_DEBUGGING_FEATURES restriction does not work and this test
        // fails.
        if (getDevice().isAdbRoot()) {
            CLog.logAndDisplay(LogLevel.WARN,
                    ""Cannot test testNoDebuggingFeaturesRestriction() in eng/userdebug build"");
            return;
        }
        String restriction = ""no_debugging_features"";  // UserManager.DISALLOW_DEBUGGING_FEATURES

        changeUserRestrictionOrFail(restriction, true, mProfileUserId);


        // This should now fail, as the shell is not available to start activities under a different
        // user once the restriction is in place.
        String addRestrictionCommandOutput =
                changeUserRestriction(restriction, true, mProfileUserId);
        assertTrue(
                ""Expected SecurityException when starting the activity ""
                        + addRestrictionCommandOutput,
                addRestrictionCommandOutput.contains(""SecurityException""));
    }

    // Test the bluetooth API from a managed profile."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBluetooth"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testBluetooth() throws Exception {
        assumeHasBluetoothFeature();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothTest"",
                ""testEnableDisable"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothTest"",
                ""testGetAddress"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothTest"",
                ""testListenUsingRfcommWithServiceRecord"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothTest"",
                ""testGetRemoteDevice"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCameraPolicy"	"CtsDevicePolicyManagerTestCases"	"2: user camera"	"public void testCameraPolicy() throws Exception {
        assumeHasCameraFeature();

        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",
                    ""testDisableCameraInManagedProfile"",
                    mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CameraPolicyTest"",
                    ""testEnableCameraInManagedProfile"",
                    mProfileUserId);
        } finally {
            final String adminHelperClass = "".PrimaryUserAdminHelper"";
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG,
                    adminHelperClass, ""testClearDeviceAdmin"", mParentUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testOrganizationInfo"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testOrganizationInfo() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                ""testDefaultOrganizationColor"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                ""testDefaultOrganizationNameIsNull"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".OrganizationInfoTest"",
                mProfileUserId);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".OrganizationInfoTest"",
                    ""testSetOrganizationColor"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ORGANIZATION_COLOR_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testDevicePolicyManagerParentSupport"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDevicePolicyManagerParentSupport() throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG, "".DevicePolicyManagerParentSupportTest"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBluetoothContactSharingDisabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testBluetoothContactSharingDisabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ContactsTest"",
                    ""testSetBluetoothContactSharingDisabled_setterAndGetter"", mProfileUserId);
        }, new DevicePolicyEventWrapper
                    .Builder(EventId.SET_BLUETOOTH_CONTACT_SHARING_DISABLED_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setBoolean(false)
                    .build(),
            new DevicePolicyEventWrapper
                    .Builder(EventId.SET_BLUETOOTH_CONTACT_SHARING_DISABLED_VALUE)
                    .setAdminPackageName(MANAGED_PROFILE_PKG)
                    .setBoolean(true)
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCannotSetProfileOwnerAgain"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotSetProfileOwnerAgain() throws Exception {
        // verify that we can't set the same admin receiver as profile owner again
        assertFalse(setProfileOwner(
                MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mProfileUserId,
                /*expectFailure*/ true));

        // verify that we can't set a different admin receiver as profile owner
        installAppAsUser(DEVICE_OWNER_APK, mProfileUserId);
        assertFalse(setProfileOwner(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mProfileUserId,
                /*expectFailure*/ true));
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCannotSetDeviceOwnerWhenProfilePresent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotSetDeviceOwnerWhenProfilePresent() throws Exception {
        try {
            installAppAsUser(DEVICE_OWNER_APK, mParentUserId);
            assertFalse(setDeviceOwner(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mParentUserId,
                    /*expectFailure*/ true));
        } finally {
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_PKG + ""/"" + DEVICE_OWNER_ADMIN, mParentUserId);
            getDevice().uninstallPackage(DEVICE_OWNER_PKG);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testNfcRestriction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNfcRestriction() throws Exception {
        assumeHasNfcFeatures();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mParentUserId);

        changeUserRestrictionOrFail(""no_outgoing_beam"" /* UserManager.DISALLOW_OUTGOING_BEAM */,
                true, mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareDisabled"", mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".NfcTest"",
                ""testNfcShareEnabled"", mParentUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testIsProvisioningAllowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsProvisioningAllowed() throws DeviceNotAvailableException {
        // Not allowed to add a managed profile from another managed profile.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PreManagedProfileTest"",
                ""testIsProvisioningAllowedFalse"", mProfileUserId);

        // Not allowed to add a managed profile to the parent user if one already exists.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PreManagedProfileTest"",
                ""testIsProvisioningAllowedFalse"", mParentUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testPhoneAccountVisibility"	"CtsDevicePolicyManagerTestCases"	"2: user visible"	"public void testPhoneAccountVisibility() throws Exception {
        assumeHasTelephonyAndConnectionServiceFeatures();

        try {
            // Register phone account in parent user.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testRegisterPhoneAccount"",
                    mParentUserId);
            // The phone account should not be visible in managed user.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testPhoneAccountNotRegistered"",
                    mProfileUserId);
        } finally {
            // Unregister the phone account.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testUnregisterPhoneAccount"",
                    mParentUserId);
        }

        try {
            // Register phone account in profile user.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testRegisterPhoneAccount"",
                    mProfileUserId);
            // The phone account should not be visible in parent user.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testPhoneAccountNotRegistered"",
                    mParentUserId);
        } finally {
            // Unregister the phone account.
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                    ""testUnregisterPhoneAccount"",
                    mProfileUserId);
        }
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testManagedCall"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testManagedCall() throws Exception {
        assumeHasTelephonyAndConnectionServiceFeatures();

        getDevice().executeShellCommand(""telecom set-default-dialer "" + MANAGED_PROFILE_PKG);

        // Place a outgoing call through work phone account using TelecomManager and verify the
        // call is inserted properly.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testOutgoingCallUsingTelecomManager"",
                mProfileUserId);
        // Make sure the call is not inserted into parent user.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testEnsureCallNotInserted"",
                mParentUserId);

        // Place a outgoing call through work phone account using ACTION_CALL and verify the call
        // is inserted properly.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testOutgoingCallUsingActionCall"",
                mProfileUserId);
        // Make sure the call is not inserted into parent user.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testEnsureCallNotInserted"",
                mParentUserId);

        // Add an incoming call with parent user's phone account and verify the call is inserted
        // properly.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testIncomingCall"",
                mProfileUserId);
        // Make sure the call is not inserted into parent user.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testEnsureCallNotInserted"",
                mParentUserId);

        // Add an incoming missed call with parent user's phone account and verify the call is
        // inserted properly.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testIncomingMissedCall"",
                mProfileUserId);
        // Make sure the call is not inserted into parent user.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".PhoneAccountTest"",
                ""testEnsureCallNotInserted"",
                mParentUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testTrustAgentInfo"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTrustAgentInfo() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Set and get trust agent config using child dpm instance.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".TrustAgentInfoTest"",
                ""testSetAndGetTrustAgentConfiguration_child"",
                mProfileUserId);
        // Set and get trust agent config using parent dpm instance.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".TrustAgentInfoTest"",
                ""testSetAndGetTrustAgentConfiguration_parent"",
                mProfileUserId);
        // Unified case
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".TrustAgentInfoTest"",
                ""testSetTrustAgentConfiguration_bothHaveTrustAgentConfigAndUnified"",
                mProfileUserId);
        // Non-unified case
        try {
            changeUserCredential(TEST_PASSWORD, null, mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".TrustAgentInfoTest"",
                    ""testSetTrustAgentConfiguration_bothHaveTrustAgentConfigAndNonUnified"",
                    mProfileUserId);
        } finally {
            changeUserCredential(null, TEST_PASSWORD, mProfileUserId);
        }
    }

    // TODO(b/149580605): Fix this flaky test."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBasicCheck"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@FlakyTest
    @Ignore
    public void testBasicCheck() throws Exception {
        // Install SimpleApp in work profile only and check activity in it can be launched.
        installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BasicTest"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testBluetoothSharingRestriction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testBluetoothSharingRestriction() throws Exception {
        assumeHasBluetoothFeature();

        // Primary profile should be able to use bluetooth sharing.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothSharingRestrictionPrimaryProfileTest"",
                ""testBluetoothSharingAvailable"", mPrimaryUserId);

        // Managed profile owner should be able to control it via DISALLOW_BLUETOOTH_SHARING.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BluetoothSharingRestrictionTest"",
                ""testOppDisabledWhenRestrictionSet"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testProfileOwnerOnPersonalDeviceCannotGetDeviceIdentifiers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProfileOwnerOnPersonalDeviceCannotGetDeviceIdentifiers() throws Exception {
        // The Profile Owner should have access to all device identifiers.
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".DeviceIdentifiersTest"",
                ""testProfileOwnerOnPersonalDeviceCannotGetDeviceIdentifiers"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testSetProfileNameLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetProfileNameLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(
                    MANAGED_PROFILE_PKG, MANAGED_PROFILE_PKG + "".DevicePolicyLoggingTest"",
                    ""testSetProfileNameLogged"", mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PROFILE_NAME_VALUE)
                .setAdminPackageName(MANAGED_PROFILE_PKG)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"userManagerIsManagedProfileReturnsCorrectValues"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void userManagerIsManagedProfileReturnsCorrectValues() throws Exception {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testIsManagedProfileReturnsTrue"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testIsManagedProfileReturnsFalse"", mPrimaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetWorkShortcutIconDrawableFromPersonalProfile"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testCanGetWorkShortcutIconDrawableFromPersonalProfile()
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                ""addDynamicShortcuts"", mProfileUserId);
        try {
            Map<String, String> params = new HashMap<>();
            params.put(""otherProfileUserId"", String.valueOf(mProfileUserId));
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                    ""shortcutIconDrawable_currentToOtherProfile_withUsersFullPermission_isNotNull"",
                    mPrimaryUserId, params);
        } finally {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                    ""removeAllDynamicShortcuts"", mProfileUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetPersonalShortcutIconDrawableFromWorkProfile"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testCanGetPersonalShortcutIconDrawableFromWorkProfile()
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                ""addDynamicShortcuts"", mPrimaryUserId);
        try {
            Map<String, String> params = new HashMap<>();
            params.put(""otherProfileUserId"", String.valueOf(mPrimaryUserId));
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                    ""shortcutIconDrawable_currentToOtherProfile_withUsersFullPermission_isNotNull"",
                    mProfileUserId, params);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                    ""shortcutIconDrawable_currentToOtherProfile_withoutUsersFullPermission_isNull"",
                    mProfileUserId, params);
        } finally {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".LauncherAppsTest"",
                    ""removeAllDynamicShortcuts"", mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanGetProfiles"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanGetProfiles() throws Exception {
        // getAllProfiles should contain both the primary and profile
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testGetAllProfiles"", mPrimaryUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testGetAllProfiles"", mProfileUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testIsProfileReturnsFalse_runAsPrimary"", mPrimaryUserId);

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testIsProfileReturnsTrue_runAsProfile"", mProfileUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testCanCreateProfile"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanCreateProfile() throws Exception {
        // remove pre-created profile
        removeUser(mProfileUserId);

        // create profile from installed app
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".UserManagerTest"",
                ""testCreateProfile_managedProfile"", mPrimaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testResolverActivityLaunchedFromPersonalProfileWithSelectedWorkTab"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResolverActivityLaunchedFromPersonalProfileWithSelectedWorkTab()
            throws Exception {
        installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_1_APK, mProfileUserId);
        installAppAsUser(SHARING_APP_2_APK, mProfileUserId);
        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""addCrossProfileIntents"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""startSwitchToOtherProfileIntent"", mPrimaryUserId);
            assertResolverActivityInForeground(mPrimaryUserId);
        } finally {
            pressHome();
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""clearCrossProfileIntents"", mProfileUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testResolverActivityLaunchedFromWorkProfileWithSelectedPersonalTab"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResolverActivityLaunchedFromWorkProfileWithSelectedPersonalTab()
            throws Exception {
        installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_1_APK, mProfileUserId);
        installAppAsUser(SHARING_APP_2_APK, mProfileUserId);
        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""addCrossProfileIntents"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""startSwitchToOtherProfileIntent"", mProfileUserId);
            assertResolverActivityInForeground(mProfileUserId);
        } finally {
            pressHome();
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""clearCrossProfileIntents"", mProfileUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testChooserActivityLaunchedFromPersonalProfileWithSelectedWorkTab"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testChooserActivityLaunchedFromPersonalProfileWithSelectedWorkTab()
            throws Exception {
        installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_1_APK, mProfileUserId);
        installAppAsUser(SHARING_APP_2_APK, mProfileUserId);
        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""addCrossProfileIntents"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""startSwitchToOtherProfileIntent_chooser"", mPrimaryUserId);
            assertChooserActivityInForeground(mPrimaryUserId);
        } finally {
            pressHome();
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""clearCrossProfileIntents"", mProfileUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileTest"	"testChooserActivityLaunchedFromWorkProfileWithSelectedPersonalTab"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testChooserActivityLaunchedFromWorkProfileWithSelectedPersonalTab()
            throws Exception {
        installAppAsUser(SHARING_APP_1_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_2_APK, mPrimaryUserId);
        installAppAsUser(SHARING_APP_1_APK, mProfileUserId);
        installAppAsUser(SHARING_APP_2_APK, mProfileUserId);
        try {
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""addCrossProfileIntents"", mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""startSwitchToOtherProfileIntent_chooser"", mProfileUserId);
            assertChooserActivityInForeground(mProfileUserId);
        } finally {
            pressHome();
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".CrossProfileSharingTest"",
                    ""clearCrossProfileIntents"", mProfileUserId);
        }
    }

    private void pressHome() throws Exception {
        executeShellCommand(""input keyevent KEYCODE_HOME"");
    }

    private void assertChooserActivityInForeground(int userId)
            throws DeviceNotAvailableException {
        assertActivityInForeground(""android/com.android.internal.app.ChooserActivity"", userId);
    }

    private void assertResolverActivityInForeground(int userId)
            throws DeviceNotAvailableException {
        assertActivityInForeground(""android/com.android.internal.app.ResolverActivity"", userId);
    }

    private void assertActivityInForeground(String fullActivityName, int userId)
            throws DeviceNotAvailableException {
        String commandOutput =
                getDevice().executeShellCommand(""dumpsys activity activities | grep Resumed:"");
        assertThat(commandOutput).contains(""u"" + userId + "" "" + fullActivityName);
    }

    private void changeUserRestrictionOrFail(String key, boolean value, int userId)
            throws DeviceNotAvailableException {
        changeUserRestrictionOrFail(key, value, userId, MANAGED_PROFILE_PKG);
    }

    private String changeUserRestriction(String key, boolean value, int userId)
            throws DeviceNotAvailableException {
        return changeUserRestriction(key, value, userId, MANAGED_PROFILE_PKG);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSync"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRingtoneSync() throws Exception {
        givePackageWriteSettingsPermission(mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",
                ""testRingtoneSync"", mProfileUserId);
    }

    // Test if setting RINGTONE disables sync"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableRingtone"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRingtoneSyncAutoDisableRingtone() throws Exception {
        givePackageWriteSettingsPermission(mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",
                ""testRingtoneDisableSync"", mProfileUserId);
    }

    // Test if setting NOTIFICATION disables sync"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableNotification"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRingtoneSyncAutoDisableNotification() throws Exception {
        givePackageWriteSettingsPermission(mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",
                ""testNotificationDisableSync"", mProfileUserId);
    }

    // Test if setting ALARM disables sync"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfileRingtoneTest"	"testRingtoneSyncAutoDisableAlarm"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRingtoneSyncAutoDisableAlarm() throws Exception {
        givePackageWriteSettingsPermission(mProfileUserId);
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".RingtoneSyncTest"",
                ""testAlarmDisableSync"", mProfileUserId);
    }

    private void givePackageWriteSettingsPermission(int userId) throws DeviceNotAvailableException {
        // Allow app to write to settings (for RingtoneManager.setActualDefaultUri to work)
        String command = ""appops set --user "" + userId + "" "" + MANAGED_PROFILE_PKG
                + "" android:write_settings allow"";
        CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotAddManagedProfileWithDeviceOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotAddManagedProfileWithDeviceOwner() throws Exception {
        assertCannotCreateManagedProfile(mPrimaryUserId);
    }

    /**
     * DISABLED: Test currently disabled because of a bug in managed provisioning.
     * TODO: Re-enable once b/146048940 is fixed.
     * Same as {@link #testCannotAddManagedProfileWithDeviceOwner} except
     * creating managed profile through ManagedProvisioning like normal flow
     */
    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotAddManagedProfileViaManagedProvisioning"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@Ignore(""b/183395856 Migrate to a device side test."")
    public void testCannotAddManagedProfileViaManagedProvisioning()
            throws Exception {
        int profileUserId = provisionCorpOwnedManagedProfile();
        assertFalse(profileUserId >= 0);
    }

    /**
     * Test that isProvisioningAllowed returns false when called with
     * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testProvisioningNotAllowedWithDeviceOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProvisioningNotAllowedWithDeviceOwner() throws Exception {
        assertProvisionManagedProfileNotAllowed(COMP_DPC_PKG);
    }

    /**
     * Both device owner and profile are the same package ({@link #COMP_DPC_PKG}), as setup
     * by createAndManagedUser.
     */
    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testBindDeviceAdminServiceAsUser_secondaryUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testBindDeviceAdminServiceAsUser_secondaryUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        int secondaryUserId = setupManagedSecondaryUser();

        installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);
        installAppAsUser(COMP_DPC_APK2, secondaryUserId);

        // Shouldn't be possible to bind to each other, as they are not affiliated.
        verifyBindDeviceAdminServiceAsUserFails(secondaryUserId);

        // Set the same affiliation ids, and check that DO and PO can now bind to each other.
        setSameAffiliationId(secondaryUserId);
        verifyBindDeviceAdminServiceAsUser(secondaryUserId);
    }

    @FlakyTest(bugId = 141161038)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotRemoveUserIfRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotRemoveUserIfRestrictionSet() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        int secondaryUserId = setupManagedSecondaryUser();
        addDisallowRemoveUserRestriction();
        assertFalse(getDevice().removeUser(secondaryUserId));

        clearDisallowRemoveUserRestriction();
        assertTrue(getDevice().removeUser(secondaryUserId));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testCannotAddProfileIfRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotAddProfileIfRestrictionSet() throws Exception {
        // by default, disallow add managed profile users restriction is set.
        assertCannotCreateManagedProfile(mPrimaryUserId);
    }

    private void sendWipeProfileBroadcast(int userId) throws Exception {
        final String cmd = ""am broadcast --receiver-foreground --user "" + userId
                + "" -a com.android.cts.comp.WIPE_DATA""
                + "" com.android.cts.comp/.WipeDataReceiver"";
        getDevice().executeShellCommand(cmd);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testWipeData_secondaryUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeData_secondaryUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        int secondaryUserId = setupManagedSecondaryUser();
        addDisallowRemoveUserRestriction();
        // The PO of the managed user should be allowed to delete it, even though the disallow
        // remove user restriction is set.
        sendWipeProfileBroadcast(secondaryUserId);
        waitUntilUserRemoved(secondaryUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testWipeData_secondaryUserLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWipeData_secondaryUserLogged() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        int secondaryUserId = setupManagedSecondaryUser();
        addDisallowRemoveUserRestriction();
        assertMetricsLogged(getDevice(), () -> {
            sendWipeProfileBroadcast(secondaryUserId);
            waitUntilUserRemoved(secondaryUserId);
        }, WIPE_DATA_WITH_REASON_DEVICE_POLICY_EVENT);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testNetworkAndSecurityLoggingAvailableIfAffiliated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkAndSecurityLoggingAvailableIfAffiliated() throws Exception {
        assumeCanCreateAdditionalUsers(2);

        // If secondary users are allowed, create an affiliated one, to check that this still
        // works if having both an affiliated user and an affiliated managed profile.
        final int secondaryUserId = setupManagedSecondaryUser();

        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testEnablingNetworkAndSecurityLogging"",
                mPrimaryUserId);
        try {
            // No affiliation ids have been set on the profile, the features shouldn't be available.
            runDeviceTestsAsUser(
                    COMP_DPC_PKG,
                    DEVICE_WIDE_LOGGING_TEST,
                    ""testRetrievingLogsThrowsSecurityException"",
                    mPrimaryUserId);

            // Affiliate the DO and the secondary user.
            setSameAffiliationId(secondaryUserId);
            runDeviceTestsAsUser(
                    COMP_DPC_PKG,
                    DEVICE_WIDE_LOGGING_TEST,
                    ""testRetrievingLogsDoesNotThrowException"",
                    mPrimaryUserId);

            setDifferentAffiliationId(secondaryUserId);
            runDeviceTestsAsUser(
                    COMP_DPC_PKG,
                    DEVICE_WIDE_LOGGING_TEST,
                    ""testRetrievingLogsThrowsSecurityException"",
                    mPrimaryUserId);
        } finally {
            runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testDisablingNetworkAndSecurityLogging"",
                mPrimaryUserId);
        }
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest"	"testRequestBugreportAvailableIfAffiliated"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRequestBugreportAvailableIfAffiliated() throws Exception {
        assumeCanCreateAdditionalUsers(2);

        final int secondaryUserId = setupManagedSecondaryUser();

        // No affiliation ids have been set on the secondary user, the feature shouldn't be
        // available.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportThrowsSecurityException"",
                mPrimaryUserId);

        // Affiliate the DO and the secondary user.
        setSameAffiliationId(secondaryUserId);
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportDoesNotThrowException"",
                mPrimaryUserId);

        setDifferentAffiliationId(secondaryUserId, COMP_DPC_PKG);
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                DEVICE_WIDE_LOGGING_TEST,
                ""testRequestBugreportThrowsSecurityException"",
                mPrimaryUserId);
    }

    private void verifyBindDeviceAdminServiceAsUser(int profileOwnerUserId) throws Exception {
        // Installing a non managing app (neither device owner nor profile owner).
        installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);
        installAppAsUser(COMP_DPC_APK2, profileOwnerUserId);

        // Testing device owner -> profile owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,
                mPrimaryUserId);
        // Testing profile owner -> device owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_GOOD_SETUP_TEST,
                profileOwnerUserId);
    }

    private void verifyBindDeviceAdminServiceAsUserFails(int profileOwnerUserId) throws Exception {
        // Installing a non managing app (neither device owner nor profile owner).
        installAppAsUser(COMP_DPC_APK2, mPrimaryUserId);
        installAppAsUser(COMP_DPC_APK2, profileOwnerUserId);

        // Testing device owner -> profile owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_FAILS_TEST,
                mPrimaryUserId);
        // Testing profile owner -> device owner.
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                BIND_DEVICE_ADMIN_SERVICE_FAILS_TEST,
                profileOwnerUserId);
    }

    private void setSameAffiliationId(
            int profileOwnerUserId, String profileOwnerPackage) throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                AFFILIATION_TEST,
                ""testSetAffiliationId1"",
                mPrimaryUserId);
        runDeviceTestsAsUser(
                profileOwnerPackage,
                AFFILIATION_TEST,
                ""testSetAffiliationId1"",
                profileOwnerUserId);
    }

    private void setSameAffiliationId(int profileOwnerUserId) throws Exception {
        setSameAffiliationId(profileOwnerUserId, COMP_DPC_PKG);
    }

    private void setDifferentAffiliationId(
            int profileOwnerUserId, String profileOwnerPackage) throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                AFFILIATION_TEST,
                ""testSetAffiliationId1"",
                mPrimaryUserId);
        runDeviceTestsAsUser(
                profileOwnerPackage,
                AFFILIATION_TEST,
                ""testSetAffiliationId2"",
                profileOwnerUserId);
    }

    private void setDifferentAffiliationId(int profileOwnerUserId) throws Exception {
        setDifferentAffiliationId(profileOwnerUserId, COMP_DPC_PKG);
    }

    private void assertProvisionManagedProfileNotAllowed(String packageName) throws Exception {
        runDeviceTestsAsUser(
                packageName,
                MANAGEMENT_TEST,
                ""testProvisionManagedProfileNotAllowed"",
                mPrimaryUserId);
    }

    /** Returns the user id of the newly created managed profile */
    private int setupManagedProfile(String apkName, String packageName,
            String adminReceiverClassName) throws Exception {
        final int userId = createManagedProfile(mPrimaryUserId);
        installAppAsUser(apkName, userId);
        setProfileOwnerOrFail(adminReceiverClassName, userId);
        startUserAndWait(userId);
        runDeviceTestsAsUser(
                packageName,
                MANAGEMENT_TEST,
                ""testIsManagedProfile"",
                userId);
        return userId;
    }

    /** Returns the user id of the newly created secondary user */
    private int setupManagedSecondaryUser() throws Exception {
        assertTrue(""Cannot create 1 additional user"", canCreateAdditionalUsers(1));

        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                MANAGEMENT_TEST,
                ""testCreateSecondaryUser"",
                mPrimaryUserId);
        List<Integer> newUsers = getUsersCreatedByTests();
        assertEquals(1, newUsers.size());
        int secondaryUserId = newUsers.get(0);
        getDevice().startUser(secondaryUserId, /* waitFlag= */ true);
        return secondaryUserId;
    }

    /** Returns the user id of the newly created secondary user */
    private int provisionCorpOwnedManagedProfile() throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                MANAGED_PROFILE_PROVISIONING_TEST,
                ""testProvisioningCorpOwnedManagedProfile"",
                mPrimaryUserId);
        return getFirstManagedProfileUserId();
    }

    /**
     * Add {@link android.os.UserManager#DISALLOW_REMOVE_USER}.
     */
    private void addDisallowRemoveUserRestriction() throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                USER_RESTRICTION_TEST,
                ""testAddDisallowRemoveUserRestriction"",
                mPrimaryUserId);
    }

    /**
     * Clear {@link android.os.UserManager#DISALLOW_REMOVE_USER}.
     */
    private void clearDisallowRemoveUserRestriction() throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                USER_RESTRICTION_TEST,
                ""testClearDisallowRemoveUserRestriction"",
                mPrimaryUserId);
    }

    private void assertOtherProfilesEqualsBindTargetUsers(int otherProfileUserId) throws Exception {
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                MANAGEMENT_TEST,
                ""testOtherProfilesEqualsBindTargetUsers"",
                mPrimaryUserId);
        runDeviceTestsAsUser(
                COMP_DPC_PKG,
                MANAGEMENT_TEST,
                ""testOtherProfilesEqualsBindTargetUsers"",
                otherProfileUserId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedProfileOwnerTest"	"testSetAutoTimeEnabled"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSetAutoTimeEnabled() {
        // This test should be skipped when profile owner is set on secondary user.
        assumeTrue(""Skipping test: profile owner is not on system user"", mUserId == USER_SYSTEM);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedProfileOwnerTest"	"testPackageInstallUserRestrictions"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPackageInstallUserRestrictions() throws Exception {
        super.testPackageInstallUserRestrictions();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedProfileOwnerTest"	"testSetAutoTimeZoneEnabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetAutoTimeZoneEnabled() {
        // Profile owner cannot set auto time zone unless it is called by the profile
        // owner of an organization-owned managed profile or a profile owner on user 0.
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"isHeadlessSystemUserMode"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static org.junit.Assert.fail;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.IgnoreOnHeadlessSystemUserMode;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.log.LogUtil.CLog;

import com.google.common.collect.ImmutableMap;

import org.junit.Ignore;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Set of tests for device owner use cases that also apply to profile owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.
 */
public final class MixedDeviceOwnerTest extends DeviceAndProfileOwnerTest {

    private static final String DELEGATION_NETWORK_LOGGING = ""delegation-network-logging"";
    private static final String LOG_TAG_DEVICE_OWNER = ""device-owner"";

    private static final String ARG_SECURITY_LOGGING_BATCH_NUMBER = ""batchNumber"";
    private static final int SECURITY_EVENTS_BATCH_SIZE = 100;

    private boolean mDeviceOwnerSet;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mUserId = mPrimaryUserId;

        CLog.i(""%s.setUp(): mUserId=%d, mPrimaryUserId=%d, mInitialUserId=%d, ""
                + ""mDeviceOwnerUserId=%d"", getClass(), mUserId, mPrimaryUserId, mInitialUserId,
                mDeviceOwnerUserId);

        installDeviceOwnerApp(DEVICE_ADMIN_APK);
        mDeviceOwnerSet = setDeviceOwner(DEVICE_ADMIN_COMPONENT_FLATTENED, mDeviceOwnerUserId,
                /*expectFailure= */ false);

        if (!mDeviceOwnerSet) {
            removeDeviceOwnerAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED);
            getDevice().uninstallPackage(DEVICE_ADMIN_PKG);
            fail(""Failed to set device owner on user "" + mDeviceOwnerUserId);
        }
        if (isHeadlessSystemUserMode()) {
            affiliateUsers(DEVICE_ADMIN_PKG, mDeviceOwnerUserId, mPrimaryUserId);
        }
    }

    @Override
    public void tearDown() throws Exception {
        if (mDeviceOwnerSet) {
            removeDeviceOwnerAdmin(DEVICE_ADMIN_COMPONENT_FLATTENED);
        }

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testApplicationRestrictions"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(
            reason = ""Per-user application restriction is not applicable for headless user"")
    public void testApplicationRestrictions() throws Exception {
        super.testApplicationRestrictions();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSystemUpdatePolicy"	"CtsDevicePolicyManagerTestCases"	"1: system"	"@Ignore(""b/145932189"")
    public void testSystemUpdatePolicy() throws Exception {
        executeDeviceTestClass("".systemupdate.SystemUpdatePolicyTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testInstallUpdateLogged"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testInstallUpdateLogged() throws Exception {
        assumeIsDeviceAb();

        pushUpdateFileToDevice(""wrongHash.zip"");
        assertMetricsLogged(getDevice(), () -> {
            executeInstallUpdateTest(""testInstallUpdate_failWrongHash"");
        }, new DevicePolicyEventWrapper.Builder(EventId.INSTALL_SYSTEM_UPDATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(/* isDeviceAb */ true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.INSTALL_SYSTEM_UPDATE_ERROR_VALUE)
                    .setInt(UPDATE_ERROR_UPDATE_FILE_INVALID)
                    .build());
    }

    private void executeInstallUpdateTest(String testName) throws Exception {
        // This test must run on system user as it calls installSystemUpdate(), which takes a
        // Runnable callback (InstallSystemUpdateCallback) and hence it cannot be easily passed
        // around through IPC (on headless system user mode).
        executeDeviceTestMethodOnDeviceOwnerUser("".systemupdate.InstallUpdateTest"", testName);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSecurityLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSecurityLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mDeviceOwnerUserId);
        try {
            // Test that the delegate cannot access the logs already
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".SecurityLoggingDelegateTest"",
                    ""testCannotAccessApis"", mDeviceOwnerUserId);

            // Set security logging delegate
            executeDeviceTestMethodOnDeviceOwnerUser("".SecurityLoggingTest"",
                    ""testSetDelegateScope_delegationSecurityLogging"");

            runSecurityLoggingTests(DELEGATE_APP_PKG, "".SecurityLoggingDelegateTest"");
        } finally {
            // Remove security logging delegate
            executeDeviceTestMethodOnDeviceOwnerUser("".SecurityLoggingTest"",
                    ""testSetDelegateScope_noDelegation"");
        }
    }

    /**
     * Test for {@link DevicePolicyManager.setStorageEncryption} and
     * {@link DevicePolicyManager.getStorageEncryption}.
     *
     * <p>This test needs to run as as the device owner user ID since
     * {@link DevicePolicyManager#setStorageEncryption(ComponentName, boolean)}
     * is only allowed for system user.
     */
    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSetStorageEncryption"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSetStorageEncryption() throws Exception {
        Map<String, String> params =
                ImmutableMap.of(IS_SYSTEM_USER_PARAM, String.valueOf(/* isSystemUser= */ true));
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mDeviceOwnerUserId, params);
    }

    private void runSecurityLoggingTests(String packageName, String testClassName)
            throws Exception {
        int userId = mDeviceOwnerUserId;
        try {
            // Turn logging on.
            runDeviceTestsAsUser(packageName, testClassName, ""testEnablingSecurityLogging"", userId);
            // Reboot to ensure ro.organization_owned is set to true in logd and logging is on.
            rebootAndWaitUntilReady();
            waitForUserUnlock(userId);

            // Generate various types of events on device side and check that they are logged.
            runDeviceTestsAsUser(packageName, testClassName, ""testGenerateLogs"", userId);
            runDeviceTestsAsUser(packageName, testClassName, ""testVerifyGeneratedLogs"", userId);

            // Immediately attempting to fetch events again should fail.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSecurityLoggingRetrievalRateLimited"", userId);
        } finally {
            // Turn logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testDisablingSecurityLogging"", userId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSuspendPackage"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testSuspendPackage() throws Exception {
        super.testSuspendPackage();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSuspendPackageWithPackageManager"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testSuspendPackageWithPackageManager() throws Exception {
        super.testSuspendPackageWithPackageManager();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testGetPasswordExpiration"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't have credentials"")
    public void testGetPasswordExpiration() throws Exception {
        super.testGetPasswordExpiration();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testPasswordExpiration"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't have credentials"")
    public void testPasswordExpiration() throws Exception {
        super.testPasswordExpiration();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testResetPasswordWithToken"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't have credentials"")
    public void testResetPasswordWithToken() throws Exception {
        super.testResetPasswordWithToken();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testResetPasswordDeprecated"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't have credentials"")
    public void testResetPasswordDeprecated() throws Exception {
        super.testResetPasswordDeprecated();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testCreateAdminSupportIntent"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testCreateAdminSupportIntent() throws Exception {
        super.testCreateAdminSupportIntent();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testPersistentIntentResolving"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testPersistentIntentResolving() throws Exception {
        super.testPersistentIntentResolving();
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testDisallowAutofill_allowed"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"@IgnoreOnHeadlessSystemUserMode(reason = ""Headless system user doesn't launch activities"")
    public void testDisallowAutofill_allowed() throws Exception {
        super.testDisallowAutofill_allowed();
    }

    @Override
    public void testApplicationHidden() throws Exception {
        if (isHeadlessSystemUserMode()) {
            // Must run on user 0 because the test has a broadcast receiver that listen to packages
            // added / removed intents
            mUserId = mDeviceOwnerUserId;
            CLog.d(""testApplicationHidden(): setting mUserId as %d before running it"", mUserId);
        }
        super.testApplicationHidden();
    }

    @Override
    protected void installDelegateApp() throws Exception {
        // TODO(b/176993670): must call installDeviceOwnerApp() - even though it's not one - so
        // the permissions required to use DpmWrapper are set on headless system user mode
        installDeviceOwnerApp(DELEGATE_APP_APK);
    }

    @Override
    protected void runDeviceTestsAsUser(String pkgName, String testClassName, String testName,
            int userId, Map<String, String> params) throws DeviceNotAvailableException {
        Map<String, String> newParams = new HashMap(params);
        newParams.putAll(getParamsForDeviceOwnerTest());
        super.runDeviceTestsAsUser(
                pkgName, testClassName, testName, userId, newParams);
    }

    @Override
    protected void executeDeviceTestMethod(String className, String testName,
            Map<String, String> params) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, mUserId, params);
    }

    private void executeDeviceTestMethodOnDeviceOwnerUser(String className, String testName)
            throws Exception {
        executeDeviceTestMethod(className, testName, mDeviceOwnerUserId,
                /* params= */ new HashMap<>());
    }

    private void configureNotificationListener() throws DeviceNotAvailableException {
        getDevice().executeShellCommand(""cmd notification allow_listener ""
                + ""com.android.cts.deviceandprofileowner/.NotificationListener"");
    }

    private void generateTestSecurityLogs() throws Exception {
        // Trigger security events of type TAG_ADB_SHELL_CMD.
        for (int i = 0; i < SECURITY_EVENTS_BATCH_SIZE; i++) {
            getDevice().executeShellCommand(""echo just_testing_"" + i);
        }
    }

    private int createSecondaryUserAsProfileOwner() throws Exception {
        final int userId = createUserAndWaitStart();
        installAppAsUser(INTENT_RECEIVER_APK, userId);
        installAppAsUser(DEVICE_ADMIN_APK, userId);
        // For headless system user mode, PO is set on any secondary user created
        if (!isHeadlessSystemUserMode()) {
            setProfileOwnerOrFail(DEVICE_ADMIN_COMPONENT_FLATTENED, userId);
        }
        return userId;
    }

    private void switchToUser(int userId) throws Exception {
        switchUser(userId);
        waitForBroadcastIdle();
        wakeupAndDismissKeyguard();
    }

    private void setUserAsAffiliatedUserToPrimary(int userId) throws Exception {
        // Setting the same affiliation ids on both users
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", mPrimaryUserId);
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, "".AffiliationTest"", ""testSetAffiliationId1"", userId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLockTask_unaffiliatedUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLockTask_unaffiliatedUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        final int userId = createSecondaryUserAsProfileOwner();
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG,
                "".AffiliationTest"",
                ""testLockTaskMethodsThrowExceptionIfUnaffiliated"",
                userId);

        setUserAsAffiliatedUserToPrimary(userId);
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG,
                "".AffiliationTest"",
                ""testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"",
                userId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testDelegatedCertInstallerDeviceIdAttestation"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDelegatedCertInstallerDeviceIdAttestation() throws Exception {
        setUpDelegatedCertInstallerAndRunTests(() ->
                runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                        "".DelegatedDeviceIdAttestationTest"",
                        ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId));
    }

    @FlakyTest
    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testCannotRemoveUserIfRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotRemoveUserIfRestrictionSet() throws Exception {
        super.testCannotRemoveUserIfRestrictionSet();
    }

    @FlakyTest
    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSecurityLoggingWithSingleUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSecurityLoggingWithSingleUser() throws Exception {
        // Backup stay awake setting because testGenerateLogs() will turn it off.
        final String stayAwake = getDevice().getSetting(""global"", ""stay_on_while_plugged_in"");
        try {
            // Turn logging on.
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testEnablingSecurityLogging"");
            // Reboot to ensure ro.device_owner is set to true in logd and logging is on.
            rebootAndWaitUntilReady();
            waitForUserUnlock(mUserId);

            // Generate various types of events on device side and check that they are logged.
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testGenerateLogs"");
            getDevice().executeShellCommand(""whoami""); // Generate adb command securty event
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testVerifyGeneratedLogs"");

            // Reboot the device, so the security event ids are reset.
            rebootAndWaitUntilReady();

            // Verify event ids are consistent across a consecutive batch.
            for (int batchNumber = 0; batchNumber < 3; batchNumber++) {
                generateTestSecurityLogs();
                executeDeviceTestMethod("".SecurityLoggingTest"", ""testVerifyLogIds"",
                        Collections.singletonMap(ARG_SECURITY_LOGGING_BATCH_NUMBER,
                                Integer.toString(batchNumber)));
            }

            // Immediately attempting to fetch events again should fail.
            executeDeviceTestMethod("".SecurityLoggingTest"",
                    ""testSecurityLoggingRetrievalRateLimited"");
        } finally {
            // Turn logging off.
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testDisablingSecurityLogging"");
            // Restore stay awake setting.
            if (stayAwake != null) {
                getDevice().setSetting(""global"", ""stay_on_while_plugged_in"", stayAwake);
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testSecurityLoggingWithTwoUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSecurityLoggingWithTwoUsers() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        final int userId = createUser();
        try {
            // The feature can be enabled, but in a ""paused"" state. Attempting to retrieve logs
            // should throw security exception.
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testEnablingSecurityLogging"");
            executeDeviceTestMethod("".SecurityLoggingTest"",
                    ""testRetrievingSecurityLogsThrowsSecurityException"");
            executeDeviceTestMethod("".SecurityLoggingTest"",
                    ""testRetrievingPreviousSecurityLogsThrowsSecurityException"");
        } finally {
            removeUser(userId);
            executeDeviceTestMethod("".SecurityLoggingTest"", ""testDisablingSecurityLogging"");
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedDeviceOwnerTest"	"testLocationPermissionGrantNotifies"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLocationPermissionGrantNotifies() throws Exception {
        installAppPermissionAppAsUser();
        configureNotificationListener();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_userNotifiedOfLocationPermission"");
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testOwnerChangedBroadcast"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testOwnerChangedBroadcast() throws Exception {
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            installAppAsUser(INTENT_RECEIVER_APK, mDeviceOwnerUserId);

            String testClass = INTENT_RECEIVER_PKG + "".OwnerChangedBroadcastTest"";

            // Running this test also gets the intent receiver app out of the stopped state, so it
            // can receive broadcast intents.
            runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,
                    ""testOwnerChangedBroadcastNotReceived"", mDeviceOwnerUserId);

            // Setting the device owner should send the owner changed broadcast.
            assertTrue(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ false));

            // Wait broadcast idle to ensure the owner changed broadcast has been sent.
            waitForBroadcastIdle();

            runDeviceTestsAsUser(INTENT_RECEIVER_PKG, testClass,
                    ""testOwnerChangedBroadcastReceived"", mDeviceOwnerUserId);
        } finally {
            getDevice().uninstallPackage(INTENT_RECEIVER_PKG);
            assertTrue(""Failed to remove device owner."",
                    removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId));
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenSecondaryUserPresent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotSetDeviceOwnerWhenSecondaryUserPresent() throws Exception {
        assumeSupportsMultiUser();
        int userId = -1;
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            userId = createUser();
            assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ true));
        } finally {
            removeUser(userId);
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId);
        }
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testCannotSetDeviceOwnerWhenAccountPresent"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotSetDeviceOwnerWhenAccountPresent() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mPrimaryUserId);
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",
                    ""testAddAccountExplicitly"", mPrimaryUserId);
            assertFalse(setDeviceOwner(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId,
                    /*expectFailure*/ true));
        } finally {
            // make sure we clean up in case we succeeded in setting the device owner
            removeAdmin(DEVICE_OWNER_ADMIN_COMPONENT, mDeviceOwnerUserId);
            runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountUtilsTest"",
                    ""testRemoveAccountExplicitly"", mPrimaryUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CustomDeviceOwnerTest"	"testIsProvisioningAllowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsProvisioningAllowed() throws Exception {
        // Must install the apk since the test runs in the DO apk.
        installAppAsUser(DEVICE_OWNER_APK, mDeviceOwnerUserId);
        try {
            // When CTS runs, setupwizard is complete. Expects it has to return false as DO can
            // only be provisioned before setupwizard is completed.

            runDeviceTestsAsUser(DEVICE_OWNER_PKG, "".PreDeviceOwnerTest"",
                    ""testIsProvisioningAllowedFalse"", mDeviceOwnerUserId);
        } finally {
            getDevice().uninstallPackage(DEVICE_OWNER_PKG);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CustomDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"uninstallTestApps"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static org.junit.Assume.assumeTrue;

import android.platform.test.annotations.FlakyTest;

import org.junit.Test;

import java.util.Collections;

/**
 * Set of tests for LauncherApps with managed profiles.
 */
public class LauncherAppsSingleUserTest extends BaseLauncherAppsTest {

    private final static String FEATURE_INCREMENTAL_DELIVERY =
            ""android.software.incremental_delivery"";
    private boolean mHasLauncherApps;
    private String mSerialNumber;
    private int mCurrentUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mHasLauncherApps = getDevice().getApiLevel() >= 21;

        if (mHasLauncherApps) {
            mCurrentUserId = getDevice().getCurrentUser();
            mSerialNumber = Integer.toString(getUserSerialNumber(mCurrentUserId));
            uninstallTestApps();
            installTestApps(mCurrentUserId);
        }
    }

    @Override
    public void tearDown() throws Exception {
        if (mHasLauncherApps) {
            uninstallTestApps();
        }
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testInstallAppMainUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testInstallAppMainUser() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }

    //TODO(b/171574935): make sure to migrate this to the new test infra"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testInstallAppMainUserIncremental"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testInstallAppMainUserIncremental() throws Exception {
        assumeTrue(""true\n"".equals(getDevice().executeShellCommand(
                ""pm has-feature android.software.incremental_delivery"")));
        if (!mHasLauncherApps) {
            return;
        }
        installAppIncremental(SIMPLE_APP_APK);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testSimpleAppInstalledForUser"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLauncherCallbackPackageAddedMainUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLauncherCallbackPackageAddedMainUser() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        startCallbackService(mCurrentUserId);
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);

        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageAddedCallbackForUser"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLauncherCallbackPackageRemovedMainUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLauncherCallbackPackageRemovedMainUser() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        startCallbackService(mCurrentUserId);
        getDevice().uninstallPackage(SIMPLE_APP_PKG);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageRemovedCallbackForUser"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLauncherCallbackPackageChangedMainUser"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLauncherCallbackPackageChangedMainUser() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        startCallbackService(mCurrentUserId);
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS,
                ""testPackageChangedCallbackForUser"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLauncherNonExportedAppFails"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLauncherNonExportedAppFails() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testLaunchNonExportActivityFails"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLaunchNonExportActivityFails"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLaunchNonExportActivityFails() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testLaunchNonExportLauncherFails"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.LauncherAppsSingleUserTest"	"testLaunchMainActivity"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testLaunchMainActivity() throws Exception {
        if (!mHasLauncherApps) {
            return;
        }
        installAppAsUser(SIMPLE_APP_APK, mCurrentUserId);
        runDeviceTestsAsUser(LAUNCHER_TESTS_PKG,
                LAUNCHER_TESTS_CLASS, ""testLaunchMainActivity"",
                mCurrentUserId, Collections.singletonMap(PARAM_TEST_USER, mSerialNumber));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/LauncherAppsSingleUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"isHeadlessSystemUserMode"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"/*
 *.
 */
package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import static org.junit.Assert.assertTrue;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.device.DeviceNotAvailableException;
import com.android.tradefed.log.LogUtil.CLog;

import org.junit.Test;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public class UserRestrictionsTest extends BaseDevicePolicyTest {
    private static final String DEVICE_ADMIN_PKG = ""com.android.cts.deviceandprofileowner"";
    private static final String DEVICE_ADMIN_APK = ""CtsDeviceAndProfileOwnerApp.apk"";
    private static final String ADMIN_RECEIVER_TEST_CLASS
            = "".BaseDeviceAdminTest$BasicAdminReceiver"";

    private static final String GLOBAL_RESTRICTIONS_TEST_CLASS =
            ""userrestrictions.ProfileGlobalRestrictionsTest"";
    private static final String SET_GLOBAL_RESTRICTIONS_TEST =
            ""testSetProfileGlobalRestrictions"";
    private static final String CLEAR_GLOBAL_RESTRICTIONS_TEST =
            ""testClearProfileGlobalRestrictions"";
    private static final String ENSURE_GLOBAL_RESTRICTIONS_TEST =
            ""testProfileGlobalRestrictionsEnforced"";
    private static final String ENSURE_NO_GLOBAL_RESTRICTIONS_TEST =
            ""testProfileGlobalRestrictionsNotEnforced"";

    private boolean mRemoveOwnerInTearDown;
    private int mDeviceOwnerUserId;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mRemoveOwnerInTearDown = false;
    }

    @Override
    public void tearDown() throws Exception {
        if (mRemoveOwnerInTearDown) {
            String componentName = DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS;
            assertTrue(""Failed to clear owner"", removeAdmin(componentName, mDeviceOwnerUserId));
            runTests(""userrestrictions.CheckNoOwnerRestrictionsTest"", mDeviceOwnerUserId);
            if (isHeadlessSystemUserMode()) {
                boolean removed = removeAdmin(componentName, mPrimaryUserId);
                if (!removed) {
                    CLog.e(""Failed to remove %s on user %d"", componentName, mPrimaryUserId);
                }
            }
        }

        // DO/PO might have set DISALLOW_REMOVE_USER, so it needs to be done after removing
        // them.
        removeTestUsers();
        getDevice().uninstallPackage(DEVICE_ADMIN_PKG);

        super.tearDown();
    }

    private void runTests(@Nonnull String className,
            @Nullable String method, int userId) throws DeviceNotAvailableException {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, ""."" + className, method, userId);
    }

    private void runTests(@Nonnull String className, int userId)
            throws DeviceNotAvailableException {
        runTests(className, null, userId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_layering"	"CtsDevicePolicyManagerTestCases"	"3: system user visible"	"public void testUserRestrictions_layering() throws Exception {
        assumeSupportsMultiUser();
        setDo();

        final int secondaryUserId;
        if (!isHeadlessSystemUserMode()) {
            // Create another user and set PO.
            secondaryUserId = createUserAndWaitStart();
            setPoAsUser(secondaryUserId);
        } else {
            // In headless system user mode, PO is set on primary user when DO is set
            secondaryUserId = mPrimaryUserId;
        }

        // Ensure that UserManager differentiates its own restrictions from DO restrictions.
        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testHasBaseUserRestrictions"", mDeviceOwnerUserId);

        // Let DO set all restrictions.
        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", mDeviceOwnerUserId);

        // Make sure the global restrictions are visible to secondary users.
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testHasGlobalRestrictions"", secondaryUserId);

        // Then let PO set all restrictions.
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", secondaryUserId);

        // Make sure both local and global restrictions are visible on secondary users.
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testHasBothGlobalAndLocalRestrictions"", secondaryUserId);

        // Let DO clear all restrictions.
        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testClearAllRestrictions"", mDeviceOwnerUserId);

        // Now only PO restrictions should be set on the secondary user.
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testLocalRestrictionsOnly"", secondaryUserId);
    }

    /**
     * PO on user-0.  It can set DO restrictions too, but they shouldn't leak to other users.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_profileGlobalRestrictionsAsDo"	"CtsDevicePolicyManagerTestCases"	"3: system user apps"	"public void testUserRestrictions_profileGlobalRestrictionsAsDo() throws Exception {
        assumeSupportsMultiUser();
        setDo();
        final int secondaryUserId;
        if (!isHeadlessSystemUserMode()) {
            // Create another user and set PO.
            secondaryUserId = createUserAndWaitStart();
            setPoAsUser(secondaryUserId);
        } else {
            // In headless system user mode, PO is set on primary user when DO is set.
            secondaryUserId = mPrimaryUserId;
        }

        final int[] usersToCheck = {mDeviceOwnerUserId, secondaryUserId};

        // Do sets the restriction.
        setAndCheckProfileGlobalRestriction(mDeviceOwnerUserId, usersToCheck);
    }

    /**
     * Managed profile owner sets profile global restrictions (only ENSURE_VERIFY_APPS), should
     * affect all users.
     */
    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_ProfileGlobalRestrictionsAsPo"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testUserRestrictions_ProfileGlobalRestrictionsAsPo() throws Exception {
        assumeCanCreateOneManagedUser();

        // Set PO on user 0
        setPoAsUser(mDeviceOwnerUserId);

        // Create another user with PO.
        final int secondaryUserId = createManagedProfile(mDeviceOwnerUserId /* parentUserId */);
        setPoAsUser(secondaryUserId);

        final int[] usersToCheck = {mDeviceOwnerUserId, secondaryUserId};

        // Check the case when primary user's PO sets the restriction.
        setAndCheckProfileGlobalRestriction(mDeviceOwnerUserId, usersToCheck);

        // Check the case when managed profile owner sets the restriction.
        setAndCheckProfileGlobalRestriction(secondaryUserId, usersToCheck);
    }

    /** Installs admin package and makes it a profile owner for a given user. */
    private void setPoAsUser(int userId) throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, /* grantPermssions= */true,
                /* dontKillApp= */ true, userId);
        assertTrue(""Failed to set profile owner"",
                setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                        userId, /* expectFailure */ false));
        // If PO is not in primary user, it will be removed with the user.
        if (userId == mDeviceOwnerUserId) {
            mRemoveOwnerInTearDown = true;
        }
    }

    /** Installs admin package and makes it a device owner. */
    private void setDo() throws Exception {
        installDeviceOwnerApp(DEVICE_ADMIN_APK);

        assertTrue(""Failed to set device owner"",
                setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                        mDeviceOwnerUserId, /*expectFailure*/ false));
        mRemoveOwnerInTearDown = true;

        if (isHeadlessSystemUserMode()) {
            affiliateUsers(DEVICE_ADMIN_PKG, mDeviceOwnerUserId, mPrimaryUserId);
        }
    }

    /**
     * Sets user restriction and checks that it applies to all users.
     * @param enforcingUserId user who should set/clear the restriction, should be either
     *        primary or secondary user id and should have device or profile owner active.
     * @param usersToCheck users that should have this restriction enforced.
     */
    private void setAndCheckProfileGlobalRestriction(int enforcingUserId, int usersToCheck[])
            throws Exception {
        // Always try to clear the restriction to avoid undesirable side effects.
        try {
            // Set the restriction.
            runGlobalRestrictionsTest(SET_GLOBAL_RESTRICTIONS_TEST, enforcingUserId);
            // Check that the restriction is in power.
            for (int userId : usersToCheck) {
                runGlobalRestrictionsTest(ENSURE_GLOBAL_RESTRICTIONS_TEST, userId);
            }
        } finally {
            // Clear the restriction.
            runGlobalRestrictionsTest(CLEAR_GLOBAL_RESTRICTIONS_TEST, enforcingUserId);
            // Check that the restriction is not in power anymore.
            for (int userId : usersToCheck) {
                runGlobalRestrictionsTest(ENSURE_NO_GLOBAL_RESTRICTIONS_TEST, userId);
            }
        }
    }

    /** Convenience method to run global user restrictions tests. */
    private void runGlobalRestrictionsTest(String testMethodName, int userId) throws Exception {
        runTests(GLOBAL_RESTRICTIONS_TEST_CLASS, testMethodName, userId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_deviceOwnerOnly"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserRestrictions_deviceOwnerOnly() throws Exception {
        setDo();

        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testDefaultRestrictions"", mDeviceOwnerUserId);
        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", mDeviceOwnerUserId);
        runTests(""userrestrictions.DeviceOwnerUserRestrictionsTest"",
                ""testBroadcast"", mDeviceOwnerUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_primaryProfileOwnerOnly"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserRestrictions_primaryProfileOwnerOnly() throws Exception {
        setPoAsUser(mDeviceOwnerUserId);

        runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",
                ""testDefaultRestrictions"", mDeviceOwnerUserId);
        runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", mDeviceOwnerUserId);
        runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",
                ""testBroadcast"", mDeviceOwnerUserId);
    }

    // Checks restrictions for managed user (NOT managed profile)."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_secondaryProfileOwnerOnly"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUserRestrictions_secondaryProfileOwnerOnly() throws Exception {
        assumeSupportsMultiUser();

        final int secondaryUserId = createUser();
        setPoAsUser(secondaryUserId);

        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testDefaultRestrictions"", secondaryUserId);
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", secondaryUserId);
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testBroadcast"", secondaryUserId);
    }

    // Checks restrictions for managed profile.
    @RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_managedProfileOwnerOnly"	"CtsDevicePolicyManagerTestCases"	"2: user visible"	"public void testUserRestrictions_managedProfileOwnerOnly() throws Exception {
        assumeCanCreateOneManagedUser();

        // Create managed profile.
        final int profileUserId = createManagedProfile(mDeviceOwnerUserId /* parentUserId */);
        // createManagedProfile doesn't start the user automatically.
        startUser(profileUserId);
        setPoAsUser(profileUserId);

        runTests(""userrestrictions.ManagedProfileOwnerUserRestrictionsTest"",
                ""testDefaultRestrictions"", profileUserId);
        runTests(""userrestrictions.ManagedProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", profileUserId);
        runTests(""userrestrictions.ManagedProfileOwnerUserRestrictionsTest"",
                ""testBroadcast"", profileUserId);
    }

    /**
     * DO + PO combination.  Make sure global DO restrictions are visible on secondary users.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.UserRestrictionsTest"	"testUserRestrictions_layering_profileOwnerNoLeaking"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testUserRestrictions_layering_profileOwnerNoLeaking() throws Exception {
        assumeSupportsMultiUser();

        // Set PO on user 0
        setPoAsUser(mDeviceOwnerUserId);

        // Create another user and set PO.
        final int secondaryUserId = createUser();
        setPoAsUser(secondaryUserId);

        // Let user-0 PO sets all restrictions.
        runTests(""userrestrictions.PrimaryProfileOwnerUserRestrictionsTest"",
                ""testSetAllRestrictions"", mDeviceOwnerUserId);

        // Secondary users shouldn't see any of them. Leaky user restrictions are excluded.
        runTests(""userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"",
                ""testDefaultAndLeakyRestrictions"", secondaryUserId);
    }

    /**
     * DO sets profile global restrictions (only ENSURE_VERIFY_APPS), should affect all
     * users (not a particularly special case but to be sure).
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/UserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.BaseDeviceAdminServiceTest"	"testAll"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testAll() throws Throwable {
        // Install
        CLog.i(""Installing apk1 (%s)..."", OWNER_APK_1);
        installOwnerApp(OWNER_APK_1);

        CLog.i(""Making it (%s) a device/profile owner..."", OWNER_COMPONENT);
        setAsOwnerOrFail(OWNER_COMPONENT);

        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        // Remove admin.
        CLog.i(""Removing admin..."");
        removeAdmin(OWNER_COMPONENT);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Overwrite -> update.
        CLog.i(""Re-installing apk1..."");
        installOwnerApp(OWNER_APK_1);

        CLog.i(""Making it a device/profile owner..."");
        setAsOwnerOrFail(OWNER_COMPONENT);
        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        CLog.i(""Installing apk2 (%s)..."", OWNER_APK_2);
        installOwnerApp(OWNER_APK_2);
        withRetry(() -> assertServiceBound(OWNER_SERVICE)); // Should still be bound.

        // Service exported -> not bound.
        CLog.i(""Installing apk3 (%s)..."", OWNER_APK_3);
        installOwnerApp(OWNER_APK_3);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Recover.
        CLog.i(""Installing apk2 again..."");
        installOwnerApp(OWNER_APK_2);
        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        // Multiple service found -> not bound.
        CLog.i(""Installing apk4 (%s)..."", OWNER_APK_4);
        installOwnerApp(OWNER_APK_4);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE2));

        // Disable service1 -> now there's only one service, so should be bound.
        CLog.i(""Running testDisableService1..."");
        executeDeviceTestMethod("".ComponentController"", ""testDisableService1"");
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceBound(OWNER_SERVICE2));

        CLog.i(""Running testDisableService2..."");
        executeDeviceTestMethod("".ComponentController"", ""testDisableService2"");
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE2));

        CLog.i(""Running testEnableService1..."");
        executeDeviceTestMethod("".ComponentController"", ""testEnableService1"");
        withRetry(() -> assertServiceBound(OWNER_SERVICE));
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE2));

        CLog.i(""Running testEnableService2..."");
        executeDeviceTestMethod("".ComponentController"", ""testEnableService2"");
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE2));

        // Remove admin.
        CLog.i(""Removing admin again..."");
        removeAdmin(OWNER_COMPONENT);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Retry with package 1 and remove admin.
        CLog.i(""Installing apk1 again..."");
        installOwnerApp(OWNER_APK_1);

        CLog.i(""Making it a device/profile owner again..."");
        setAsOwnerOrFail(OWNER_COMPONENT);
        withRetry(() -> assertServiceBound(OWNER_SERVICE));

        CLog.i(""Removing admin again..."");
        removeAdmin(OWNER_COMPONENT);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));

        // Now install package B and make it the owner.  OWNER_APK_1 still exists, but it shouldn't
        // interfere.
        CLog.i(""Installing apk B (%s)..."", OWNER_APK_B);
        installOwnerApp(OWNER_APK_B);

        CLog.i(""Making it a device/profile owner..."");
        setAsOwnerOrFail(OWNER_COMPONENT_B);
        withRetry(() -> assertServiceNotBound(OWNER_SERVICE));
        withRetry(() -> assertServiceBound(OWNER_SERVICE_B));
    }

    private String rumpDumpSysService(String component) throws Exception {
        final String command = ""dumpsys activity services "" + component;
        final String commandOutput = getDevice().executeShellCommand(command);
        CLog.d(""Output for command %s: \n%s"", command, commandOutput);
        return commandOutput;
    }

    private void assertServiceBound(String component) throws Exception {
        final String commandOutput = rumpDumpSysService(component);
        for (String line : commandOutput.split(""\r*\n"")) {
            if (line.contains(""ConnectionRecord"") && line.contains(component)) {
                return;
            }
        }
        fail(""Service "" + OWNER_SERVICE + "" not bound.  Output was:\n"" + commandOutput);
    }

    private void assertServiceNotBound(String component) throws Exception {
        final String commandOutput = rumpDumpSysService(component);
        for (String line : commandOutput.split(""\r*\n"")) {
            if (line.contains(""ConnectionRecord"") && line.contains(component)) {
                fail(""Service "" + OWNER_SERVICE + "" is bound.  Output was:\n"" + commandOutput);
            }
        }
    }

/* When the service is bound, ""dumpsys activity services"" shows something like this:
  * ServiceRecord{1525afe u0 com.android.cts.deviceadminservice/.MyService}
    intent={cmp=com.android.cts.deviceadminservice/.MyService}
    packageName=com.android.cts.deviceadminservice
    processName=com.android.cts.deviceadminservice
    baseDir=/data/app/com.android.cts.deviceadminservice-kXKTlCILmDfib2P76FI75A==/base.apk
    dataDir=/data/user/0/com.android.cts.deviceadminservice
    app=ProcessRecord{205d686 22751:com.android.cts.deviceadminservice/u0a143}
    createTime=-3s957ms startingBgTimeout=--
    lastActivity=-3s927ms restartTime=-3s927ms createdFromFg=true
    Bindings:
    * IntentBindRecord{57d5b47 CREATE}:
      intent={cmp=com.android.cts.deviceadminservice/.MyService}
      binder=android.os.BinderProxy@819af74
      requested=true received=true hasBound=true doRebind=false
      * Client AppBindRecord{e1d3c9d ProcessRecord{a8162c0 757:system/1000}}
        Per-process Connections:
          ConnectionRecord{10ab6b9 u0 CR FGS com.android.cts.deviceadminservice/.MyService:@51e9080}
    All Connections:
      ConnectionRecord{10ab6b9 u0 CR FGS com.android.cts.deviceadminservice/.MyService:@51e9080}

  * ConnectionRecord{10ab6b9 u0 CR FGS com.android.cts.deviceadminservice/.MyService:@51e9080}
    binding=AppBindRecord{e1d3c9d com.android.cts.deviceadminservice/.MyService:system}
    conn=android.app.LoadedApk$ServiceDispatcher$InnerConnection@51e9080 flags=0x4000001
 */
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseDeviceAdminServiceTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"wakeupAndDismissKeyguard"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import static com.google.common.truth.Truth.assertThat;

import android.platform.test.annotations.LargeTest;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Test;

import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;

/**
 * CTS to verify toggling quiet mode in work profile by using
 * {@link android.os.UserManager#requestQuietModeEnabled(boolean, android.os.UserHandle)}.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class QuietModeHostsideTest extends BaseDevicePolicyTest {
    private static final String TEST_PACKAGE = ""com.android.cts.launchertests"";
    private static final String TEST_CLASS = "".QuietModeTest"";
    private static final String PARAM_TARGET_USER = ""TARGET_USER"";
    private static final String PARAM_ORIGINAL_DEFAULT_LAUNCHER = ""ORIGINAL_DEFAULT_LAUNCHER"";
    private static final String TEST_APK = ""CtsLauncherAppsTests.apk"";

    private static final String TEST_LAUNCHER_PACKAGE = ""com.android.cts.launchertests.support"";
    private static final String TEST_LAUNCHER_APK = ""CtsLauncherAppsTestsSupport.apk"";
    private static final String ENABLED_TEST_APK = ""CtsCrossProfileEnabledApp.apk"";
    private static final String USER_ENABLED_TEST_APK = ""CtsCrossProfileUserEnabledApp.apk"";
    private static final String ENABLED_NO_PERMS_TEST_APK = ""CtsCrossProfileEnabledNoPermsApp.apk"";
    private static final String QUIET_MODE_ENABLED_TEST_APK = ""CtsModifyQuietModeEnabledApp.apk"";
    private static final String NOT_ENABLED_TEST_APK = ""CtsCrossProfileNotEnabledApp.apk"";
    private static final String ENABLED_TEST_PACKAGE = ""com.android.cts.crossprofileenabledapp"";
    private static final String USER_ENABLED_TEST_PACKAGE =
            ""com.android.cts.crossprofileuserenabledapp"";
    private static final String ENABLED_NO_PERMS_TEST_PACKAGE =
            ""com.android.cts.crossprofileenablednopermsapp"";
    private static final String NOT_ENABLED_TEST_PACKAGE =
            ""com.android.cts.crossprofilenotenabledapp"";
    private static final String QUIET_MODE_ENABLED_TEST_PACKAGE =
            ""com.android.cts.modifyquietmodeenabledapp"";

    private int mProfileId;
    private String mOriginalLauncher;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mOriginalLauncher = getDefaultLauncher();

        installAppAsUser(TEST_APK, mPrimaryUserId);
        installAppAsUser(TEST_LAUNCHER_APK, mPrimaryUserId);

        waitForBroadcastIdle();

        createAndStartManagedProfile();
        installAppAsUser(TEST_APK, mProfileId);

        waitForBroadcastIdle();
        wakeupAndDismissKeyguard();
    }

    @Override
    public void tearDown() throws Exception {
        uninstallRequiredApps();
        getDevice().uninstallPackage(TEST_LAUNCHER_PACKAGE);

        super.tearDown();
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_defaultForegroundLauncher"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testQuietMode_defaultForegroundLauncher() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Add a lockscreen to test the case that profile with unified challenge can still
        // be turned on without asking the user to enter the lockscreen password.
        changeUserCredential(/* newCredential= */ TEST_PASSWORD, /* oldCredential= */ null,
                mPrimaryUserId);
        try {
            runDeviceTestsAsUser(
                    TEST_PACKAGE,
                    TEST_CLASS,
                    ""testTryEnableQuietMode_defaultForegroundLauncher"",
                    mPrimaryUserId,
                    createParams(mProfileId));
        } finally {
            changeUserCredential(/* newCredential= */ null, /* oldCredential= */ TEST_PASSWORD,
                    mPrimaryUserId);
        }
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_notForegroundLauncher"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testQuietMode_notForegroundLauncher() throws Exception {
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                TEST_CLASS,
                ""testTryEnableQuietMode_notForegroundLauncher"",
                mPrimaryUserId,
                createParams(mProfileId));
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_notDefaultLauncher"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testQuietMode_notDefaultLauncher() throws Exception {
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                TEST_CLASS,
                ""testTryEnableQuietMode_notDefaultLauncher"",
                mPrimaryUserId,
                createParams(mProfileId));
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testBroadcastManagedProfileAvailable_withCrossProfileAppsOp"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testBroadcastManagedProfileAvailable_withCrossProfileAppsOp() throws Exception {
        checkBroadcastManagedProfileAvailable(/* withCrossProfileAppOps= */ true);
    }

    private void checkBroadcastManagedProfileAvailable(boolean withCrossProfileAppOps)
            throws Exception {
        installCrossProfileApps();
        if (withCrossProfileAppOps) {
            enableCrossProfileAppsOp();
        }
        clearLogcat();
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                TEST_CLASS,
                ""testTryEnableQuietMode"",
                mPrimaryUserId,
                createParams(mProfileId));
        // In case of a necessary log is not captured
        // cause of too many logs while waiting idle broadcast, capture log previously.
        // This log will be concatenated.
        String log = getDevice().executeAdbCommand(""logcat"", ""-d"");
        waitForBroadcastIdle();
        verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_UNAVAILABLE"",
                /* needPermissions= */ !withCrossProfileAppOps, log);

        clearLogcat();
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                TEST_CLASS,
                ""testTryDisableQuietMode"",
                mPrimaryUserId,
                createParams(mProfileId));
        log = getDevice().executeAdbCommand(""logcat"", ""-d"");
        waitForBroadcastIdle();
        verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_AVAILABLE"",
                /* needPermissions= */ !withCrossProfileAppOps, log);

        clearLogcat();
        removeUser(mProfileId);
        log = getDevice().executeAdbCommand(""logcat"", ""-d"");
        waitForBroadcastIdle();
        verifyBroadcastSent(""android.intent.action.MANAGED_PROFILE_REMOVED"",
                /* needPermissions= */ false, log);
    }

    private void clearLogcat() throws DeviceNotAvailableException {
        getDevice().executeAdbCommand(""logcat"", ""-c"");
        getDevice().executeAdbCommand(""logcat"", ""-G"", ""16M"");
    }

    private void verifyBroadcastSent(String actionName, boolean needPermissions, String prevLog)
            throws DeviceNotAvailableException {
        String result = getDevice().executeAdbCommand(""logcat"", ""-d"");
        result = prevLog + result;
        assertThat(result).contains(
                buildReceivedBroadcastRegex(actionName, ""CrossProfileEnabledAppReceiver""));
        assertThat(result).contains(
                buildReceivedBroadcastRegex(actionName, ""CrossProfileUserEnabledAppReceiver""));
        String noPermsString = buildReceivedBroadcastRegex(actionName,
                ""CrossProfileEnabledNoPermsAppReceiver"");
        if (needPermissions) {
            assertThat(result).doesNotContain(noPermsString);
        } else {
            assertThat(result).contains(noPermsString);
        }
        assertThat(result).doesNotContain(
                buildReceivedBroadcastRegex(actionName,
                        ""CrossProfileNotEnabledAppReceiver""));
        assertThat(result).contains(
                buildReceivedBroadcastRegex(actionName, ""ModifyQuietModeEnabledAppReceiver""));
    }

    private String buildReceivedBroadcastRegex(String actionName, String className) {
        return String.format(""%s: onReceive(%s)"", className, actionName);
    }

    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testQuietMode_noCredentialRequest"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testQuietMode_noCredentialRequest() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Set a separate work challenge so turning on the profile requires entering the
        // separate challenge.
        changeUserCredential(/* newCredential= */ TEST_PASSWORD, /* oldCredential= */ null,
                mProfileId);
        runDeviceTestsAsUser(
                TEST_PACKAGE,
                TEST_CLASS,
                ""testTryEnableQuietMode_noCredentialRequest"",
                mPrimaryUserId,
                createParams(mProfileId));
    }

    private void createAndStartManagedProfile() throws Exception {
        mProfileId = createManagedProfile(mPrimaryUserId);
        switchUser(mPrimaryUserId);
        startUser(mProfileId);
    }

    private void uninstallRequiredApps()
            throws DeviceNotAvailableException {
        getDevice().uninstallPackage(TEST_PACKAGE);
        getDevice().uninstallPackage(ENABLED_TEST_PACKAGE);
        getDevice().uninstallPackage(USER_ENABLED_TEST_PACKAGE);
        getDevice().uninstallPackage(ENABLED_NO_PERMS_TEST_PACKAGE);
        getDevice().uninstallPackage(NOT_ENABLED_TEST_PACKAGE);
        getDevice().uninstallPackage(QUIET_MODE_ENABLED_TEST_PACKAGE);
    }

    private void installCrossProfileApps()
            throws FileNotFoundException, DeviceNotAvailableException {
        installCrossProfileApp(ENABLED_TEST_APK, /* grantPermissions= */ true);
        installCrossProfileApp(USER_ENABLED_TEST_APK, /* grantPermissions= */ true);
        installCrossProfileApp(NOT_ENABLED_TEST_APK, /* grantPermissions= */ true);
        installCrossProfileApp(ENABLED_NO_PERMS_TEST_APK, /* grantPermissions= */  false);
        installCrossProfileApp(QUIET_MODE_ENABLED_TEST_APK, /* grantPermissions= */  true);
    }

    private void enableCrossProfileAppsOp() throws DeviceNotAvailableException {
        enableCrossProfileAppsOp(ENABLED_NO_PERMS_TEST_PACKAGE, mPrimaryUserId);
    }

    private void installCrossProfileApp(String apkName, boolean grantPermissions)
            throws FileNotFoundException, DeviceNotAvailableException {
        installAppAsUser(apkName, grantPermissions, mPrimaryUserId);
        installAppAsUser(apkName, grantPermissions, mProfileId);
    }

    private void enableCrossProfileAppsOp(String packageName, int userId)
            throws DeviceNotAvailableException {
        getDevice().executeShellCommand(
                String.format(""appops set --user %s %s android:interact_across_profiles 0"",
                        userId, packageName));
        assertThat(getDevice().executeShellCommand(
                String.format(""appops get --user %s %s android:interact_across_profiles"",
                        userId, packageName))).contains(""INTERACT_ACROSS_PROFILES: allow"");
    }

    private Map<String, String> createParams(int targetUserId) throws Exception {
        Map<String, String> params = new HashMap<>();
        params.put(PARAM_TARGET_USER, Integer.toString(getUserSerialNumber(targetUserId)));
        params.put(PARAM_ORIGINAL_DEFAULT_LAUNCHER, mOriginalLauncher);
        return params;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.QuietModeHostsideTest"	"testBroadcastManagedProfileAvailable_withoutCrossProfileAppsOp"	"CtsDevicePolicyManagerTestCases"	"1: apps"	"public void testBroadcastManagedProfileAvailable_withoutCrossProfileAppsOp() throws Exception {
        checkBroadcastManagedProfileAvailable(/* withCrossProfileAppOps= */ false);
    }


    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/QuietModeHostsideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Before;
import org.junit.Test;

import java.util.Collections;
import java.util.Map;

/**
 * Tests to verify
 * {@link android.content.pm.crossprofile.CrossProfileApps#canRequestInteractAcrossProfiles()},
 * {@link android.content.pm.crossprofile.CrossProfileApps#canInteractAcrossProfiles()}, and
 * {@link
 * android.content.pm.crossprofile.CrossProfileApps#createRequestInteractAcrossProfilesIntent()}.
 *
 * The rest of the tests for {@link android.content.pm.crossprofile.CrossProfileApps}
 * can be found in {@link CrossProfileAppsHostSideTest}.
 */
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class CrossProfileAppsPermissionHostSideTest extends BaseDevicePolicyTest {
    private static final String TEST_WITH_REQUESTED_PERMISSION_PACKAGE =
            ""com.android.cts.crossprofileappstest"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_CLASS =
            "".CrossProfileAppsPermissionToInteractTest"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_APK = ""CtsCrossProfileAppsTests.apk"";
    private static final String TEST_WITH_REQUESTED_PERMISSION_RECEIVER_TEST_CLASS =
            TEST_WITH_REQUESTED_PERMISSION_PACKAGE + "".AdminReceiver"";

    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE =
            ""com.android.cts.crossprofilenopermissionappstest"";
    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_CLASS =
            "".CrossProfileAppsWithNoPermission"";
    private static final String TEST_WITH_NO_REQUESTED_PERMISSION_APK =
            ""CtsCrossProfileAppsWithNoPermissionTests.apk"";

    private static final String MANAGED_PROFILE_PKG = ""com.android.cts.managedprofile"";
    private static final String MANAGED_PROFILE_APK = ""CtsManagedProfileApp.apk"";
    private static final String ADMIN_RECEIVER_TEST_CLASS =
            MANAGED_PROFILE_PKG + "".BaseManagedProfileTest$BasicAdminReceiver"";
    private static final String PARAM_CROSS_PROFILE_PACKAGE = ""crossProfilePackage"";

    private int mProfileId;

    @Override
    protected void assumeTestEnabled() throws Exception {
        assumeSupportsMultiUser();
    }

    @Before
    @Override
    public void setUp() throws Exception {
        super.setUp();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_fromPersonalProfile_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_fromWorkProfile_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsTrue"",
                mProfileId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_noOtherProfiles_ReturnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_packageNotAllowed_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_packageNotAllowed_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_packageNotInstalled_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        mProfileId = createManagedProfile(mPrimaryUserId);
        getDevice().startUser(mProfileId, /*waitFlag= */true);
        installAppAsUser(MANAGED_PROFILE_APK, mProfileId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileId);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_NO_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_NO_REQUESTED_PERMISSION_APK);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_NO_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_NO_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_permissionNotRequested_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanRequestInteractAcrossProfiles_profileOwner_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        mProfileId = createManagedProfile(mPrimaryUserId);
        getDevice().startUser(mProfileId, /* waitFlag= */ true);
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mProfileId);
        final String receiverComponentName =
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE + ""/""
                        + TEST_WITH_REQUESTED_PERMISSION_RECEIVER_TEST_CLASS;
        setProfileOwnerOrFail(receiverComponentName, mProfileId);
        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testSetCrossProfilePackages_noAsserts"",
                mProfileId,
                createCrossProfilePackageParam(TEST_WITH_REQUESTED_PERMISSION_PACKAGE));

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanRequestInteractAcrossProfiles_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withCrossProfilesPermission_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withCrossUsersPermission_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withCrossUsersFullPermission_returnsTrue"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_fromWorkProfile_returnsTrue()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withAppOpEnabled_returnsTrue"",
                mProfileId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withAppOpDisabled_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withNoOtherProfile_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpDisabledOnCallingProfile_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withAppOpDisabledOnCallingProfile_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withAppOpDisabledOnCallingProfile_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCanInteractAcrossProfiles_withAppOpDisabledOnOtherProfiles_returnsFalse"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCanInteractAcrossProfiles_withAppOpDisabledOnOtherProfiles_returnsFalse()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCanInteractAcrossProfiles_withAppOpDisabledOnOtherProfiles_returnsFalse"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"",
                mPrimaryUserId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testCreateRequestInteractAcrossProfilesIntent_fromWorkProfile_returnsIntent()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);
        addManagedProfileAndInstallRequiredPackages(TEST_WITH_REQUESTED_PERMISSION_APK);
        addDefaultCrossProfilePackage(mProfileId, TEST_WITH_REQUESTED_PERMISSION_PACKAGE);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent"",
                mProfileId,
                Collections.EMPTY_MAP);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.CrossProfileAppsPermissionHostSideTest"	"testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException()
            throws Exception {
        installAppAsUser(TEST_WITH_REQUESTED_PERMISSION_APK, mPrimaryUserId);

        runDeviceTestsAsUser(
                TEST_WITH_REQUESTED_PERMISSION_PACKAGE,
                TEST_WITH_REQUESTED_PERMISSION_CLASS,
                ""testCreateRequestInteractAcrossProfilesIntent_canNotRequestInteraction_throwsSecurityException"",
                mProfileId,
                Collections.EMPTY_MAP);
    }

    private void addManagedProfileAndInstallRequiredPackages(String testPackage) throws Exception {
        mProfileId = createManagedProfile(mPrimaryUserId);
        getDevice().startUser(mProfileId, /*waitFlag= */true);

        installAppAsUser(testPackage, mProfileId);

        installAppAsUser(MANAGED_PROFILE_APK, mProfileId);
        setProfileOwnerOrFail(MANAGED_PROFILE_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS,
                mProfileId);
    }

    private void addDefaultCrossProfilePackage(int userId, String packageName)
            throws Exception {
        runDeviceTestsAsUser(
                MANAGED_PROFILE_PKG,
                "".CrossProfileUtils"",
                ""testSetCrossProfilePackages"",
                userId,
                createCrossProfilePackageParam(packageName));
    }

    private Map<String, String> createCrossProfilePackageParam(String packageName) {
        return Collections.singletonMap(PARAM_CROSS_PROFILE_PACKAGE, packageName);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/CrossProfileAppsPermissionHostSideTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testLockNowWithKeyEviction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testLockNowWithKeyEviction() throws Exception {
        assumeHasFileBasedEncryptionAndSecureLockScreenFeatures();

        changeUserCredential(TEST_PASSWORD, null, mProfileUserId);
        lockProfile();
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testResetPasswordWithTokenBeforeUnlock"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResetPasswordWithTokenBeforeUnlock() throws Exception {
        assumeHasFileBasedEncryptionAndSecureLockScreenFeatures();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                ""testSetupWorkProfile"", mProfileUserId);
        lockProfile();
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                ""testResetPasswordBeforeUnlock"", mProfileUserId);
        // Password needs to be in sync with ResetPasswordWithTokenTest.PASSWORD1
        verifyUserCredential(RESET_PASSWORD_TEST_DEFAULT_PASSWORD, mProfileUserId);
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testClearPasswordWithTokenBeforeUnlock"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testClearPasswordWithTokenBeforeUnlock() throws Exception {
        assumeHasFileBasedEncryptionAndSecureLockScreenFeatures();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                ""testSetupWorkProfile"", mProfileUserId);
        lockProfile();
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                ""testClearPasswordBeforeUnlock"", mProfileUserId);
        // Make sure profile has no password
        verifyUserCredential("""", mProfileUserId);
    }

    /**
     * Test password reset token is still functional after the primary user clears and
     * re-adds back its device lock. This is to detect a regression where the work profile
     * undergoes an untrusted credential reset (causing synthetic password to change, invalidating
     * existing password reset token) if it has unified work challenge and the primary user clears
     * the device lock.
     */
    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testResetPasswordTokenUsableAfterClearingLock"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResetPasswordTokenUsableAfterClearingLock() throws Exception {
        assumeHasFileBasedEncryptionAndSecureLockScreenFeatures();

        final String devicePassword = TEST_PASSWORD;

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                ""testSetResetPasswordToken"", mProfileUserId);
        try {
            changeUserCredential(devicePassword, null, mParentUserId);
            changeUserCredential(null, devicePassword, mParentUserId);
            changeUserCredential(devicePassword, null, mParentUserId);
            lockProfile();
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ResetPasswordWithTokenTest"",
                    ""testResetPasswordBeforeUnlock"", mProfileUserId);
            verifyUserCredential(RESET_PASSWORD_TEST_DEFAULT_PASSWORD, mProfileUserId);
        } finally {
            changeUserCredential(null, devicePassword, mParentUserId);
            // Cycle the device screen to flush stale password information from keyguard,
            // otherwise it will still ask for the non-existent password.
            // return screen to be on for cts test runs
            executeShellCommand(""input keyevent KEYCODE_WAKEUP"");
            executeShellCommand(""input keyevent KEYCODE_SLEEP"");
            executeShellCommand(""input keyevent KEYCODE_WAKEUP"");
        }
    }

    @LockSettingsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testIsUsingUnifiedPassword"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsUsingUnifiedPassword() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Freshly created profile has no separate challenge.
        verifyUnifiedPassword(true);

        // Set separate challenge and verify that the API reports it correctly.
        changeUserCredential(
                TEST_PASSWORD /* newCredential */, null /* oldCredential */, mProfileUserId);
        verifyUnifiedPassword(false);
    }

    @FlakyTest
    @LargeTest
    @LockSettingsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testUnlockWorkProfile_deviceWidePassword"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testUnlockWorkProfile_deviceWidePassword() throws Exception {
        assumeHasSecureLockScreenFeature();

        try {
            // Add a device password after the work profile has been created.
            changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);
            // Lock the profile with key eviction.
            lockProfile();
            // Turn on work profile, by unlocking the profile with the device password.
            verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);

            // Verify profile user is running unlocked by running a basic test on the work profile.
            installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BasicTest"", mProfileUserId);
        } finally {
            // Clean up
            changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);
        }
    }

    @FlakyTest
    @LargeTest
    @LockSettingsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testRebootDevice_unifiedPassword"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRebootDevice_unifiedPassword() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Waiting before rebooting prevents flakiness.
        waitForBroadcastIdle();
        changeUserCredential(TEST_PASSWORD, /* oldCredential= */ null, mPrimaryUserId);
        try {
            rebootAndWaitUntilReady();
            verifyUserCredential(TEST_PASSWORD, mPrimaryUserId);
            waitForUserUnlock(mProfileUserId);
            installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BasicTest"", mProfileUserId);
        } finally {
            changeUserCredential(/* newCredential= */ null, TEST_PASSWORD, mPrimaryUserId);
            // Work-around for http://b/113866275 - password prompt being erroneously shown at the
            // end.
            pressPowerButton();
        }
    }

    @LargeTest
    @LockSettingsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testRebootDevice_separatePasswords"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testRebootDevice_separatePasswords() throws Exception {
        assumeHasSecureLockScreenFeature();

        // Waiting before rebooting prevents flakiness.
        waitForBroadcastIdle();
        final String profilePassword = ""profile"";
        final String primaryPassword = TEST_PASSWORD;
        int managedProfileUserId = getFirstManagedProfileUserId();
        changeUserCredential(
                profilePassword, /* oldCredential= */ null, managedProfileUserId);
        changeUserCredential(primaryPassword, /* oldCredential= */ null, mPrimaryUserId);
        try {
            rebootAndWaitUntilReady();
            verifyUserCredential(profilePassword, managedProfileUserId);
            verifyUserCredential(primaryPassword, mPrimaryUserId);
            installAppAsUser(SIMPLE_APP_APK, mProfileUserId);
            runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".BasicTest"", mProfileUserId);
        } finally {
            changeUserCredential(
                    /* newCredential= */ null, profilePassword, managedProfileUserId);
            changeUserCredential(/* newCredential= */ null, primaryPassword, mPrimaryUserId);
            // Work-around for http://b/113866275 - password prompt being erroneously shown at the
            // end.
            pressPowerButton();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testCreateSeparateChallengeChangedLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCreateSeparateChallengeChangedLogged() throws Exception {
        assumeHasSecureLockScreenFeature();

        assertMetricsLogged(getDevice(), () -> {
            changeUserCredential(
                    TEST_PASSWORD /* newCredential */, null /* oldCredential */, mProfileUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SEPARATE_PROFILE_CHALLENGE_CHANGED_VALUE)
                .setBoolean(true)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ManagedProfilePasswordTest"	"testActivePasswordSufficientForDeviceRequirement"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testActivePasswordSufficientForDeviceRequirement() throws Exception {
        assumeHasSecureLockScreenFeature();

        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".ActivePasswordSufficientForDeviceTest"",
                mProfileUserId);
    }

    private void verifyUnifiedPassword(boolean unified) throws DeviceNotAvailableException {
        final String testMethod =
                unified ? ""testUsingUnifiedPassword"" : ""testNotUsingUnifiedPassword"";
        runDeviceTestsAsUser(MANAGED_PROFILE_PKG, "".IsUsingUnifiedPasswordTest"",
                testMethod, mProfileUserId);
    }

    private void lockProfile() throws Exception {
        final String cmd = ""am broadcast --receiver-foreground --user "" + mProfileUserId
                + "" -a com.android.cts.managedprofile.LOCK_PROFILE""
                + "" com.android.cts.managedprofile/.LockProfileReceiver"";
        getDevice().executeShellCommand(cmd);
        waitUntilProfileLocked();
    }

    private void waitUntilProfileLocked() throws Exception {
        final String cmd = String.format(""am get-started-user-state %d"", mProfileUserId);
        tryWaitForSuccess(
                () -> getDevice().executeShellCommand(cmd).startsWith(USER_STATE_LOCKED),
                ""The managed profile has not been locked after calling ""
                        + ""lockNow(FLAG_SECURE_USER_DATA)"",
                TIMEOUT_USER_LOCKED_MILLIS);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfilePasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.ProfileOwnerTest"	"testDevicePolicySafetyCheckerIntegration_onOperationSafetyStateChanged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDevicePolicySafetyCheckerIntegration_onOperationSafetyStateChanged()
            throws Exception {
        executeDevicePolicySafetyCheckerIntegrationTest(""testOnOperationSafetyStateChanged"");
    }

    @Override
    public void tearDown() throws Exception {
        assertTrue(""Failed to remove profile owner."",
                removeAdmin(PROFILE_OWNER_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId));
        getDevice().uninstallPackage(PROFILE_OWNER_PKG);

        super.tearDown();
    }

    private void executeProfileOwnerTest(String testClassName) throws Exception {
        String testClass = PROFILE_OWNER_PKG + ""."" + testClassName;
        runDeviceTestsAsUser(PROFILE_OWNER_PKG, testClass, mPrimaryUserId);
    }

    protected void executeProfileOwnerTestMethod(String className, String testName)
            throws Exception {
        runDeviceTestsAsUser(PROFILE_OWNER_PKG, className, testName, mUserId);
    }

    private void executeDevicePolicySafetyCheckerIntegrationTest(String testName) throws Exception {
        executeProfileOwnerTestMethod(
                PROFILE_OWNER_PKG + ""."" + ""DevicePolicySafetyCheckerIntegrationTest"", testName);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testSetSystemSetting"	"CtsDevicePolicyManagerTestCases"	"1: system"	"public void testSetSystemSetting() {
        // Managed profile owner cannot set currently allowlisted system settings.
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import android.platform.test.annotations.FlakyTest;
import android.platform.test.annotations.LargeTest;
import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;
import com.android.cts.devicepolicy.annotations.LockSettingsTest;
import com.android.cts.devicepolicy.annotations.PermissionsTest;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier;
import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;
import com.android.tradefed.device.DeviceNotAvailableException;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * Set of tests for managed profile owner use cases that also apply to device owners.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTest.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTest extends DeviceAndProfileOwnerTest {

    private static final String CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS =
            DEVICE_ADMIN_PKG + "".ClearProfileOwnerNegativeTest"";

    private static final String DELEGATION_NETWORK_LOGGING = ""delegation-network-logging"";

    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mUserId);

        super.tearDown();
    }

    // Most tests for this class are defined in DeviceAndProfileOwnerTest

    /**
     * Verify that screenshots are still possible for activities in the primary user when the policy
     * is set on the profile owner.
     */
    @LargeTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_allowedPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testScreenCaptureDisabled_allowedPrimaryUser() throws Exception {
        // disable screen capture in profile
        setScreenCaptureDisabled(mUserId, true);

        // start the ScreenCaptureDisabledActivity in the parent
        installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);
        startSimpleActivityAsUser(mParentUserId);
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testScreenCapturePossible"");
    }

    @FlakyTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testScreenCaptureDisabled_assist_allowedPrimaryUser"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testScreenCaptureDisabled_assist_allowedPrimaryUser() throws Exception {
        // disable screen capture in profile
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", ""testSetScreenCaptureDisabled_true"");
        try {
            // Install and enable assistant in personal side.
            installAppAsUser(ASSIST_APP_APK, mParentUserId);
            waitForBroadcastIdle();
            setVoiceInteractionService(ASSIST_INTERACTION_SERVICE);

            // Start an activity in parent user.
            installAppAsUser(DEVICE_ADMIN_APK, mParentUserId);
            waitForBroadcastIdle();
            startSimpleActivityAsUser(mParentUserId);

            // Verify assistant app can't take a screenshot.
            runDeviceTestsAsUser(
                    DEVICE_ADMIN_PKG,
                    "".AssistScreenCaptureDisabledTest"",
                    ""testScreenCapturePossible_assist"",
                    mPrimaryUserId);
        } finally {
            // enable screen capture in profile
            executeDeviceTestMethod(
                    "".ScreenCaptureDisabledTest"",
                    ""testSetScreenCaptureDisabled_false"");
            clearVoiceInteractionService();
        }
    }

    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testAudioRestriction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAudioRestriction() throws Exception {
        // DISALLOW_UNMUTE_MICROPHONE and DISALLOW_ADJUST_VOLUME can only be set by device owners
        // and profile owners on the primary user.
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testCannotClearProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotClearProfileOwner() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, CLEAR_PROFILE_OWNER_NEGATIVE_TEST_CLASS, mUserId);
    }

    private void markProfileOwnerOnOrganizationOwnedDevice() throws DeviceNotAvailableException {
        getDevice().executeShellCommand(
                String.format(""dpm mark-profile-owner-on-organization-owned-device --user %d '%s'"",
                    mUserId, DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS));

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testDelegatedCertInstallerDeviceIdAttestation"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDelegatedCertInstallerDeviceIdAttestation() throws Exception {
        setUpDelegatedCertInstallerAndRunTests(() -> {
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".DelegatedDeviceIdAttestationTest"",
                    ""testGenerateKeyPairWithDeviceIdAttestationExpectingFailure"", mUserId);
            // Positive test case lives in
            // OrgOwnedProfileOwnerTest#testDelegatedCertInstallerDeviceIdAttestation
        });
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testDeviceIdAttestationForProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDeviceIdAttestationForProfileOwner() throws Exception {
        // Test that Device ID attestation for the profile owner does not work without grant.
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DeviceIdAttestationTest"",
                ""testFailsWithoutProfileOwnerIdsGrant"", mUserId);
        // Positive test case lives in
        // OrgOwnedProfileOwnerTest#testDeviceIdAttestationForProfileOwner
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testSetKeyguardDisabledFeatures"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@Override
    public void testSetKeyguardDisabledFeatures() throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".KeyguardDisabledFeaturesTest"",
                ""testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"",
                mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testPackageInstallUserRestrictions"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPackageInstallUserRestrictions() throws Exception {
        super.testPackageInstallUserRestrictions();
    }

    @Override
    @PermissionsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testWifiMacAddress"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testWifiMacAddress() throws Exception {
        assumeHasWifiFeature();

        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, "".WifiTest"", ""testCannotGetWifiMacAddress"", mUserId);
    }

    @Override
    @LockSettingsTest"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testNetworkLogging"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLogging() throws Exception {
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        testNetworkLoggingOnWorkProfile(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testNetworkLoggingDelegate"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testNetworkLoggingDelegate() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);
        try {
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".WorkProfileNetworkLoggingDelegateTest"",
                    ""testCannotAccessApis"", mUserId);
            // Set network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_delegationNetworkLogging"", mUserId);

            testNetworkLoggingOnWorkProfile(DELEGATE_APP_PKG,
                    "".WorkProfileNetworkLoggingDelegateTest"");
        } finally {
            // Remove network logging delegate
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testSetDelegateScope_noDelegation"", mUserId);
        }
    }

    private void testNetworkLoggingOnWorkProfile(String packageName, String testClassName)
            throws Exception {
        try {
            // Turn network logging on.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_true"", mUserId);

            // Connect to websites from work profile, should be logged.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testConnectToWebsites_shouldBeLogged"", mUserId);
            // Connect to websites from personal profile, should not be logged.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".NetworkLoggingTest"",
                    ""testConnectToWebsites_shouldNotBeLogged"", mPrimaryUserId);

            // Verify all work profile network logs have been received.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testRetrieveNetworkLogs_forceNetworkLogs_receiveNetworkLogs"", mUserId);
        } finally {
            // Turn network logging off.
            runDeviceTestsAsUser(packageName, testClassName,
                    ""testSetNetworkLogsEnabled_false"", mUserId);
        }
    }

    @Override
    List<String> getAdditionalDelegationScopes() {
        final List<String> result = new ArrayList<>();
        result.add(DELEGATION_NETWORK_LOGGING);
        return result;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTest"	"testSetKeyguardDisabledSecureCameraLogged"	"CtsDevicePolicyManagerTestCases"	"1: camera"	"@Override
    public void testSetKeyguardDisabledSecureCameraLogged() {
        // Managed profiles are not allowed to set keyguard disabled secure camera
    }

    @FlakyTest
    @Override"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationRestrictions"	"CtsDevicePolicyManagerTestCases"	"3: system user direct"	"public void testApplicationRestrictions() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, mUserId);

        try {
            // Only the DPC can manage app restrictions by default.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");
            executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");

            // Letting the DELEGATE_APP_PKG manage app restrictions too.
            changeApplicationRestrictionsManagingPackage(DELEGATE_APP_PKG);
            executeAppRestrictionsManagingPackageTest(""testCanAccessApis"");
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".GeneralDelegateTest"",
                    ""testSettingAdminComponentNameThrowsException"", mUserId);

            // The DPC should still be able to manage app restrictions normally.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");

            // The app shouldn't be able to manage app restrictions for other users.
            int parentUserId = getPrimaryUser();
            if (parentUserId != mUserId) {
                installAppAsUser(DELEGATE_APP_APK, parentUserId);
                installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, parentUserId);
                runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsDelegateTest"",
                        ""testCannotAccessApis"", parentUserId);
            }

            // Revoking the permission for DELEGAYE_APP_PKG to manage restrictions.
            changeApplicationRestrictionsManagingPackage(null);
            executeAppRestrictionsManagingPackageTest(""testCannotAccessApis"");

            // The DPC should still be able to manage app restrictions normally.
            executeDeviceTestClass("".ApplicationRestrictionsTest"");

            assertMetricsLogged(getDevice(), () -> {
                executeDeviceTestMethod("".ApplicationRestrictionsTest"",
                        ""testSetApplicationRestrictions"");
            }, new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_RESTRICTIONS_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(APP_RESTRICTIONS_TARGET_APP_PKG)
                    .build());
        } finally {
            changeApplicationRestrictionsManagingPackage(null);
        }
    }

    /**
     * Returns a list of delegation tests that should run. Add delegations tests applicable to both
     * device owner and profile owners to this method directly. DO or PO specific tests should be
     * added to {@link #getAdditionalDelegationTests} in the subclass.
     */
    private Map<String, DevicePolicyEventWrapper[]> getDelegationTests() {
        final Map<String, DevicePolicyEventWrapper[]> result = new HashMap<>();
        result.put("".AppRestrictionsDelegateTest"", null);
        result.put("".CertInstallDelegateTest"", null);
        result.put("".BlockUninstallDelegateTest"", null);
        result.put("".PermissionGrantDelegateTest"", null);
        result.put("".PackageAccessDelegateTest"", null);
        result.put("".EnableSystemAppDelegateTest"", null);
        result.putAll(getAdditionalDelegationTests());
        return result;
    }

    Map<String, DevicePolicyEventWrapper[]> getAdditionalDelegationTests() {
        return Collections.<String, DevicePolicyEventWrapper[]>emptyMap();
    }

    /**
     * Returns a list of delegation scopes that are needed to run delegation tests. Add scopes
     * which are applicable to both device owner and profile owners to this method directly.
     * DO or PO specific scopes should be added to {@link #getAdditionalDelegationScopes}
     * in the subclass.
     */
    private List<String> getDelegationScopes() {
        final List<String> result = new ArrayList<>(Arrays.asList(
                DELEGATION_APP_RESTRICTIONS,
                DELEGATION_CERT_INSTALL,
                DELEGATION_BLOCK_UNINSTALL,
                DELEGATION_PERMISSION_GRANT,
                DELEGATION_PACKAGE_ACCESS,
                DELEGATION_ENABLE_SYSTEM_APP,
                // CERT_SELECTION scope is in the list so it still participates GeneralDelegateTest.
                // But its main functionality test is driven by testDelegationCertSelection() and
                // hence missing from getDelegationTests() on purpose.
                DELEGATION_CERT_SELECTION
                ));
        result.addAll(getAdditionalDelegationScopes());
        return result;
    }

    List<String> getAdditionalDelegationScopes() {
        return Collections.<String>emptyList();
    }

    /**
     * General instructions to add a new delegation test:
     * 1. Test primary delegation functionalitiy
     *    Implement the delegate's positive/negate functionaility tests in a new test class
     *    in CtsDelegateApp.apk. Main entry point are {@code testCanAccessApis} and
     *    {@code testCannotAccessApis}. Once implemented, add the delegation scope and the test
     *    class name to {@link #getDelegationScopes}, {@link #getDelegationTests} to make the test
     *    run on DO/PO/PO on primary user.  If the test should only run on a subset of these
     *    combinations, add them to the subclass's {@link #getAdditionalDelegationScopes} and
     *    {@link #getDelegationScopes} intead.
     *    <p>Alternatively, create a separate hostside method to drive the test, similar to
     *    {@link #testDelegationCertSelection}. This is preferred if the delegated functionalities
     *    already exist in another app.
     * 2. Test access control of DO-only delegation
     *    Add the delegation scope to
     *    {@code DelegationTest#testDeviceOwnerOnlyDelegationsOnlyPossibleToBeSetByDeviceOwner} to
     *    test that only DO can delegate this scope.
     * 3. Test behaviour of exclusive delegation
     *    Add the delegation scope to {@code DelegationTest#testExclusiveDelegations} to test that
     *    the scope can only be delegatd to one app at a time.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegation"	"CtsDevicePolicyManagerTestCases"	"3: system user apps"	"public void testDelegation() throws Exception {
        // Install relevant apps.
        installDelegateApp();
        installAppAsUser(TEST_APP_APK, mUserId);
        installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, mUserId);
        if (isHeadlessSystemUserMode()) {
            installAppAsUser(TEST_APP_APK, mDeviceOwnerUserId);
            installAppAsUser(APP_RESTRICTIONS_TARGET_APP_APK, mDeviceOwnerUserId);
        }

        try {
            final Map<String, DevicePolicyEventWrapper[]> delegationTests = getDelegationTests();
            // APIs are not accessible by default.
            executeDelegationTests(delegationTests, false /* negative result */);

            // Granting the appropriate delegation scopes makes APIs accessible.
            final List<String> scopes = getDelegationScopes();
            setDelegatedScopes(DELEGATE_APP_PKG, scopes);
            runDeviceTestsAsUser(DELEGATE_APP_PKG, "".GeneralDelegateTest"", null, mUserId,
                    ImmutableMap.of(""scopes"", String.join("","", scopes)));
            executeDelegationTests(delegationTests, true /* positive result */);

            // APIs are not accessible after revoking delegations.
            setDelegatedScopes(DELEGATE_APP_PKG, null);
            executeDelegationTests(delegationTests, false /* negative result */);

            // Additional delegation tests.
            executeDeviceTestClass("".DelegationTest"");

        } finally {
            // Remove any remaining delegations.
            setDelegatedScopes(DELEGATE_APP_PKG, null);
        }
    }

    protected void installDelegateApp() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testStateOfSensorsRelatedPermissionsCannotBeRead"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testStateOfSensorsRelatedPermissionsCannotBeRead() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testStateOfSensorsRelatedPermissionsCannotBeRead"");
    }

    /**
     * Require a device for tests that use the network stack. Headless Androids running in
     * data centres might need their network rules un-tampered-with in order to keep the ADB / VNC
     * connection alive.
     *
     * This is only a problem on device owner / profile owner running on USER_SYSTEM, because
     * network rules for this user will affect UID 0.
     */
    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetSystemSetting"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSetSystemSetting() throws Exception {
        executeDeviceTestClass("".SetSystemSettingTest"");
    }

    protected void executeResetPasswordWithTokenTests(boolean allowFailures)
            throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ResetPasswordWithTokenTest"", null, mUserId,
                Collections.singletonMap(ARG_ALLOW_FAILURE, String.valueOf(allowFailures)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetStorageEncryption"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSetStorageEncryption() throws Exception {
        Map<String, String> params =
                ImmutableMap.of(IS_SYSTEM_USER_PARAM, String.valueOf(mUserId == USER_SYSTEM));
        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG, STORAGE_ENCRYPTION_TEST_CLASS, null, mUserId, params);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnableSystemAppLogged"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testEnableSystemAppLogged() throws Exception {
        final List<String> enabledSystemPackageNames = getEnabledSystemPackageNames();
        // We enable an enabled package to not worry about restoring the state.
        final String systemPackageToEnable = enabledSystemPackageNames.get(0);
        final Map<String, String> params =
                ImmutableMap.of(PARAM_APP_TO_ENABLE, systemPackageToEnable);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                    ""testEnableSystemAppLogged"", mUserId, params);
        }, new DevicePolicyEventWrapper.Builder(EventId.ENABLE_SYSTEM_APP_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(systemPackageToEnable)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnableSystemAppWithIntentLogged"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testEnableSystemAppWithIntentLogged() throws Exception {
        final String systemPackageToEnable = getLaunchableSystemPackage();
        if (systemPackageToEnable == null) {
            return;
        }
        final Map<String, String> params =
                ImmutableMap.of(PARAM_APP_TO_ENABLE, systemPackageToEnable);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DevicePolicyLoggingTest"",
                    ""testEnableSystemAppWithIntentLogged"", mUserId, params);
        }, new DevicePolicyEventWrapper.Builder(EventId.ENABLE_SYSTEM_APP_WITH_INTENT_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""android.intent.action.MAIN"")
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSecondaryLockscreen"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testSecondaryLockscreen() throws Exception {
        executeDeviceTestClass("".SecondaryLockscreenTest"");
    }

    private String getLaunchableSystemPackage() throws DeviceNotAvailableException {
        final List<String> enabledSystemPackageNames = getEnabledSystemPackageNames();
        for (String enabledSystemPackage : enabledSystemPackageNames) {
            final String result = getDevice().executeShellCommand(
                    String.format(RESOLVE_ACTIVITY_CMD, mUserId, enabledSystemPackage));
            if (!result.contains(""No activity found"")) {
                return enabledSystemPackage;
            }
        }
        return null;
    }

    private List<String> getEnabledSystemPackageNames() throws DeviceNotAvailableException {
        final String commandResult =
                getDevice().executeShellCommand(""pm list packages -e -s --user "" + mUserId);
        final int prefixLength = ""package:"".length();
        return new ArrayList<>(Arrays.asList(commandResult.split(""\n"")))
                .stream()
                .map(line -> line.substring(prefixLength))
                .collect(Collectors.toList());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationRestrictionIsRestricted"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testApplicationRestrictionIsRestricted() throws Exception {
        installAppAsUser(DELEGATE_APP_APK, mUserId);
        runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsIsCallerDelegateHelper"",
            ""testAssertCallerIsNotApplicationRestrictionsManagingPackage"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".ApplicationRestrictionsIsCallerDelegateHelper"",
            ""testSetApplicationRestrictionsManagingPackageToDelegate"", mUserId);
        runDeviceTestsAsUser(DELEGATE_APP_PKG, "".AppRestrictionsIsCallerDelegateHelper"",
            ""testAssertCallerIsApplicationRestrictionsManagingPackage"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegationCertSelection"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDelegationCertSelection() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);
        setDelegatedScopes(CERT_INSTALLER_PKG, Arrays.asList(
                DELEGATION_CERT_INSTALL, DELEGATION_CERT_SELECTION));

        assertMetricsLogged(getDevice(), () -> {
                runDeviceTestsAsUser(CERT_INSTALLER_PKG, "".CertSelectionDelegateTest"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.CHOOSE_PRIVATE_KEY_ALIAS_VALUE)
                .setAdminPackageName(CERT_INSTALLER_PKG)
                .setBoolean(true)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrant"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionGrant() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_permissionRemainsDenied"");
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_permissionRemainsGranted"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrant_developmentPermission"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionGrant_developmentPermission() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod(
                "".PermissionsTest"", ""testPermissionGrantState_developmentPermission"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGrantOfSensorsRelatedPermissions"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGrantOfSensorsRelatedPermissions() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testSensorsRelatedPermissionsCannotBeGranted"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDenyOfSensorsRelatedPermissions"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDenyOfSensorsRelatedPermissions() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testSensorsRelatedPermissionsCanBeDenied"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSensorsRelatedPermissionsNotGrantedViaPolicy"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSensorsRelatedPermissionsNotGrantedViaPolicy() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testSensorsRelatedPermissionsNotGrantedViaPolicy"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpn"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpn() throws Exception {
        installAppAsUser(VPN_APP_APK, mUserId);
        executeDeviceTestClassNoRestrictBackground("".AlwaysOnVpnTest"");
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnLockDown"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnLockDown() throws Exception {
        installAppAsUser(VPN_APP_APK, mUserId);
        try {
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testAlwaysOnSet"");
            forceStopPackageForUser(VPN_APP_PKG, mUserId);
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testNetworkBlocked"");
        } finally {
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");
        }
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnAcrossReboot"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnAcrossReboot() throws Exception {
        try {
            installAppAsUser(VPN_APP_APK, mUserId);
            waitForBroadcastIdle();
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testAlwaysOnSetWithAllowlist"");
            rebootAndWaitUntilReady();
            // Make sure profile user initialization is complete before proceeding.
            waitForBroadcastIdle();
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testAlwaysOnSetAfterReboot"");
        } finally {
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");
        }
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnPackageUninstalled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnPackageUninstalled() throws Exception {
        installAppAsUser(VPN_APP_APK, mUserId);
        try {
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testAlwaysOnSet"");
            getDevice().uninstallPackage(VPN_APP_PKG);
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testAlwaysOnVpnDisabled"");
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testSetNonExistingPackage"");
        } finally {
            executeDeviceTestMethod("".AlwaysOnVpnMultiStageTest"", ""testCleanup"");
        }
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnUnsupportedPackage"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnUnsupportedPackage() throws Exception {
        try {
            // Target SDK = 23: unsupported
            installAppAsUser(VPN_APP_API23_APK, mUserId);
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetUnsupportedVpnAlwaysOn"");

            // Target SDK = 24: supported
            installAppAsUser(VPN_APP_API24_APK, mUserId);
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetSupportedVpnAlwaysOn"");
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");

            // Explicit opt-out: unsupported
            installAppAsUser(VPN_APP_NOT_ALWAYS_ON_APK, mUserId);
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetUnsupportedVpnAlwaysOn"");
        } finally {
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");
        }
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnUnsupportedPackageReplaced"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnUnsupportedPackageReplaced() throws Exception {
        try {
            // Target SDK = 24: supported
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testAssertNoAlwaysOnVpn"");
            installAppAsUser(VPN_APP_API24_APK, mUserId);
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetSupportedVpnAlwaysOn"");
            // Update the app to target higher API level, but with manifest opt-out
            installAppAsUser(VPN_APP_NOT_ALWAYS_ON_APK, mUserId);
            // wait for the app update install completed, ready to be tested
            waitForBroadcastIdle();
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testAssertNoAlwaysOnVpn"");
        } finally {
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testClearAlwaysOnVpn"");
        }
    }

    @RequiresDevice"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAlwaysOnVpnPackageLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAlwaysOnVpnPackageLogged() throws Exception {
        // Will be uninstalled in tearDown().
        installAppAsUser(VPN_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".AlwaysOnVpnUnsupportedTest"", ""testSetSupportedVpnAlwaysOn"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ALWAYS_ON_VPN_PACKAGE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(VPN_APP_PKG)
                    .setBoolean(true)
                    .setInt(0)
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionPolicy"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionPolicy() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionPolicyAutoDeny_permissionLocked"");
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionPolicyAutoGrant_permissionLocked"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAutoGrantMultiplePermissionsInGroup"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAutoGrantMultiplePermissionsInGroup() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionPolicyAutoGrant_multiplePermissionsInGroup"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionMixedPolicies"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionMixedPolicies() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_mixedPolicies"");
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateGranted_mixedPolicies"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionGrantOfDisallowedPermissionWhileOtherPermIsGranted()
            throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"",
                ""testPermissionGrantStateDenied_otherPermissionIsGranted"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionPrompts"	"CtsDevicePolicyManagerTestCases"	"1: user"	"@FlakyTest(bugId = 187862351)
    public void testPermissionPrompts() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionPrompts"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionAppUpdate"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionAppUpdate() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStateDenied"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCannotRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantStateGranted"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCanRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionPolicyAutoDeny"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCannotRequestPermission"");

        assertNull(getDevice().uninstallPackage(PERMISSIONS_APP_PKG));
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionPolicyAutoGrant"");
        installAppPermissionAppAsUser();
        executeDeviceTestMethod("".PermissionsTest"", ""testCanRequestPermission"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPermissionGrantPreMApp"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPermissionGrantPreMApp() throws Exception {
        installAppAsUser(SIMPLE_PRE_M_APP_APK, mUserId);
        executeDeviceTestMethod("".PermissionsTest"", ""testPermissionGrantState_preMApp"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testScreenCaptureDisabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testScreenCaptureDisabled() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            // We need to ensure that the policy is deactivated for the device owner case, so making
            // sure the second test is run even if the first one fails
            try {
                setScreenCaptureDisabled(mUserId, true);
            } finally {
                setScreenCaptureDisabled(mUserId, false);
            }
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_SCREEN_CAPTURE_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_SCREEN_CAPTURE_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testScreenCaptureDisabled_assist"	"CtsDevicePolicyManagerTestCases"	"2: user interaction"	"public void testScreenCaptureDisabled_assist() throws Exception {
        try {
            // Install and enable assistant, notice that profile can't have assistant.
            installAppAsUser(ASSIST_APP_APK, mPrimaryUserId);
            waitForBroadcastIdle();
            setVoiceInteractionService(ASSIST_INTERACTION_SERVICE);
            setScreenCaptureDisabled_assist(mUserId, true /* disabled */);
        } finally {
            setScreenCaptureDisabled_assist(mUserId, false /* disabled */);
            clearVoiceInteractionService();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationHidden"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testApplicationHidden() throws Exception {
        installAppPermissionAppAsUser();
        executeDeviceTestClass("".ApplicationHiddenTest"");
        installAppAsUser(PERMISSIONS_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".ApplicationHiddenTest"",""testSetApplicationHidden"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_HIDDEN_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG, ""hidden"", NOT_CALLED_FROM_PARENT)
                .build(),
        new DevicePolicyEventWrapper.Builder(EventId.SET_APPLICATION_HIDDEN_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG, ""not_hidden"", NOT_CALLED_FROM_PARENT)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAccountManagement_deviceAndProfileOwnerAlwaysAllowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAccountManagement_deviceAndProfileOwnerAlwaysAllowed() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mUserId);
        executeDeviceTestClass("".AllowedAccountManagementTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAccountManagement_userRestrictionAddAccount"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAccountManagement_userRestrictionAddAccount() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mUserId);
        try {
            changeUserRestrictionOrFail(DISALLOW_MODIFY_ACCOUNTS, true, mUserId);
            executeAccountTest(""testAddAccount_blocked"");
        } finally {
            // Ensure we clear the user restriction
            changeUserRestrictionOrFail(DISALLOW_MODIFY_ACCOUNTS, false, mUserId);
        }
        executeAccountTest(""testAddAccount_allowed"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAccountManagement_userRestrictionRemoveAccount"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAccountManagement_userRestrictionRemoveAccount() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mUserId);
        try {
            changeUserRestrictionOrFail(DISALLOW_MODIFY_ACCOUNTS, true, mUserId);
            executeAccountTest(""testRemoveAccount_blocked"");
        } finally {
            // Ensure we clear the user restriction
            changeUserRestrictionOrFail(DISALLOW_MODIFY_ACCOUNTS, false, mUserId);
        }
        executeAccountTest(""testRemoveAccount_allowed"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAccountManagement_disabledAddAccount"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAccountManagement_disabledAddAccount() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mUserId);
        try {
            changeAccountManagement(COMMAND_BLOCK_ACCOUNT_TYPE, ACCOUNT_TYPE, mUserId);
            executeAccountTest(""testAddAccount_blocked"");
        } finally {
            // Ensure we remove account management policies
            changeAccountManagement(COMMAND_UNBLOCK_ACCOUNT_TYPE, ACCOUNT_TYPE, mUserId);
        }
        executeAccountTest(""testAddAccount_allowed"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAccountManagement_disabledRemoveAccount"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAccountManagement_disabledRemoveAccount() throws Exception {
        installAppAsUser(ACCOUNT_MANAGEMENT_APK, mUserId);
        try {
            changeAccountManagement(COMMAND_BLOCK_ACCOUNT_TYPE, ACCOUNT_TYPE, mUserId);
            executeAccountTest(""testRemoveAccount_blocked"");
        } finally {
            // Ensure we remove account management policies
            changeAccountManagement(COMMAND_UNBLOCK_ACCOUNT_TYPE, ACCOUNT_TYPE, mUserId);
        }
        executeAccountTest(""testRemoveAccount_allowed"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegatedCertInstaller"	"CtsDevicePolicyManagerTestCases"	"2: user direct"	"public void testDelegatedCertInstaller() throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"", mUserId);
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerTest"",
                    ""testInstallKeyPair"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_CERT_INSTALLER_PACKAGE_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setStrings(CERT_INSTALLER_PKG)
                .build());
    }

    public interface DelegatedCertInstallerTestAction {
        void run() throws Exception;
    }

    protected void setUpDelegatedCertInstallerAndRunTests(DelegatedCertInstallerTestAction test)
            throws Exception {
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        try {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualSetCertInstallerDelegate"", mUserId);

            test.run();
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualClearCertInstallerDelegate"", mUserId);
        }
    }

    // This test currently duplicates the testDelegatedCertInstaller, with one difference:
    // The Delegated cert installer app is called directly rather than via intents from
    // the DelegatedCertinstallerTest."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDelegatedCertInstallerDirectly"	"CtsDevicePolicyManagerTestCases"	"2: user direct"	"public void testDelegatedCertInstallerDirectly() throws Exception {
        assumeTrue(mHasAttestation);

        setUpDelegatedCertInstallerAndRunTests(() ->
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".DirectDelegatedCertInstallerTest"", mUserId));
    }

    // This test generates a key pair and validates that an app can be silently granted
    // access to it."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyGrant"	"CtsDevicePolicyManagerTestCases"	"2: user apps"	"public void testSetKeyGrant() throws Exception {
        assumeTrue(mHasAttestation);

        // Install an app
        installAppAsUser(CERT_INSTALLER_APK, mUserId);

        try {
            // First, generate a key and grant the cert installer access to it.
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualGenerateKeyAndGrantAccess"", mUserId);
            // Test the key is usable.
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".PreSelectedKeyAccessTest"", ""testAccessingPreSelectedAliasExpectingSuccess"",
                    mUserId);
            // Remove the grant
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualRemoveKeyGrant"", mUserId);
            // Run another test to make sure the app no longer has access to the key.
            runDeviceTestsAsUser(""com.android.cts.certinstaller"",
                    "".PreSelectedKeyAccessTest"", ""testAccessingPreSelectedAliasWithoutGrant"", mUserId);
        } finally {
            runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".DelegatedCertInstallerHelper"",
                    ""testManualClearGeneratedKey"", mUserId);
        }
    }

    // Sets restrictions and launches non-admin app, that tries to set wallpaper.
    // Non-admin apps must not violate any user restriction."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetWallpaper_disallowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetWallpaper_disallowed() throws Exception {
        // UserManager.DISALLOW_SET_WALLPAPER
        final String DISALLOW_SET_WALLPAPER = ""no_set_wallpaper"";
        if (!hasService(""wallpaper"")) {
            CLog.d(""testSetWallpaper_disallowed(): device does not support wallpapers"");
            return;
        }

        installAppAsUser(CUSTOMIZATION_APP_APK, mUserId);
        try {
            changeUserRestrictionOrFail(DISALLOW_SET_WALLPAPER, true, mUserId);
            runDeviceTestsAsUser(CUSTOMIZATION_APP_PKG, "".CustomizationTest"",
                ""testSetWallpaper_disallowed"", mUserId);
        } finally {
            changeUserRestrictionOrFail(DISALLOW_SET_WALLPAPER, false, mUserId);
        }
    }

    // Runs test with admin privileges. The test methods set all the tested restrictions
    // inside. But these restrictions must have no effect on the device/profile owner behavior."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDisallowAutofill_allowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDisallowAutofill_allowed() throws Exception {
        boolean hasAutofill = hasDeviceFeature(""android.software.autofill"");
        if (!hasAutofill) {
          return;
        }
        installAppAsUser(AUTOFILL_APP_APK, mUserId);

        executeDeviceTestMethod("".AutofillRestrictionsTest"",
                ""testDisallowAutofill_allowed"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDisallowContentCapture_allowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDisallowContentCapture_allowed() throws Exception {
        boolean hasContentCapture = hasService(""content_capture"");
        if (!hasContentCapture) {
            return;
        }
        installAppAsUser(CONTENT_CAPTURE_SERVICE_APK, mUserId);
        installAppAsUser(CONTENT_CAPTURE_APP_APK, mUserId);

        setDefaultContentCaptureServiceEnabled(false);
        try {
            executeDeviceTestMethod("".ContentCaptureRestrictionsTest"",
                    ""testDisallowContentCapture_allowed"");
        } finally {
            setDefaultContentCaptureServiceEnabled(true);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testDisallowContentSuggestions_allowed"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testDisallowContentSuggestions_allowed() throws Exception {
        boolean hasContentSuggestions = hasService(""content_suggestions"");
        if (!hasContentSuggestions) {
            return;
        }
        installAppAsUser(CONTENT_SUGGESTIONS_APP_APK, mUserId);

        setDefaultContentSuggestionsServiceEnabled(false);
        try {
            executeDeviceTestMethod("".ContentSuggestionsRestrictionsTest"",
                    ""testDisallowContentSuggestions_allowed"");
        } finally {
            setDefaultContentSuggestionsServiceEnabled(true);
        }
    }

    private void setDefaultContentSuggestionsServiceEnabled(boolean enabled)
            throws DeviceNotAvailableException {
        CLog.d(""setDefaultContentSuggestionsServiceEnabled("" + mUserId + ""): "" + enabled);
        getDevice().executeShellCommand(
                ""cmd content_suggestions set default-service-enabled "" + mUserId + "" "" + enabled);
    }

    private void setDefaultContentCaptureServiceEnabled(boolean enabled)
            throws Exception {
        CLog.d(""setDefaultServiceEnabled("" + mUserId + ""): "" + enabled);
        getDevice().executeShellCommand(
                ""cmd content_capture set default-service-enabled "" + mUserId + "" "" + enabled);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetMeteredDataDisabledPackages"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetMeteredDataDisabledPackages() throws Exception {
        assumeHasWifiFeature();

        installAppAsUser(METERED_DATA_APP_APK, mUserId);

        try (LocationModeSetter locationModeSetter = new LocationModeSetter(getDevice())) {
            locationModeSetter.setLocationEnabled(true);
            executeDeviceTestClass("".MeteredDataRestrictionTest"");
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPackageInstallUserRestrictions"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPackageInstallUserRestrictions() throws Exception {
        boolean mIsWatch = hasDeviceFeature(""android.hardware.type.watch"");
        if (mIsWatch) {
            return;
        }
        // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES
        final String DISALLOW_INSTALL_UNKNOWN_SOURCES = ""no_install_unknown_sources"";
        // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY
        final String DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY =
                ""no_install_unknown_sources_globally"";
        final String SECURE_SETTING_CATEGORY = ""secure"";
        final String GLOBAL_SETTING_CATEGORY = ""global"";
        final File apk = mBuildHelper.getTestFile(TEST_APP_APK);
        try {
            // Install the test and prepare the test apk.
            installAppAsUser(PACKAGE_INSTALLER_APK, mUserId);
            assertTrue(getDevice().pushFile(apk, TEST_APP_LOCATION + apk.getName()));
            setInstallPackageAppOps(PACKAGE_INSTALLER_PKG, true, mUserId);

            // Add restrictions and test if we can install the apk.
            getDevice().uninstallPackage(TEST_APP_PKG);
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES, true, mUserId);
            runDeviceTestsAsUser(PACKAGE_INSTALLER_PKG, "".ManualPackageInstallTest"",
                    ""testManualInstallBlocked"", mUserId);

            // Clear restrictions and test if we can install the apk.
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES, false, mUserId);

            // Add global restriction and test if we can install the apk.
            getDevice().uninstallPackage(TEST_APP_PKG);
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, true, mUserId);
            runDeviceTestsAsUser(PACKAGE_INSTALLER_PKG, "".ManualPackageInstallTest"",
                    ""testManualInstallBlocked"", mUserId);

            // Clear global restriction and test if we can install the apk.
            changeUserRestrictionOrFail(DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, false, mUserId);
            runDeviceTestsAsUser(PACKAGE_INSTALLER_PKG, "".ManualPackageInstallTest"",
                    ""testManualInstallSucceeded"", mUserId);
        } finally {
            setInstallPackageAppOps(PACKAGE_INSTALLER_PKG, false, mUserId);
            String command = ""rm "" + TEST_APP_LOCATION + apk.getName();
            getDevice().executeShellCommand(command);
            getDevice().uninstallPackage(TEST_APP_PKG);
            getDevice().uninstallPackage(PACKAGE_INSTALLER_PKG);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testAudioRestriction"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAudioRestriction() throws Exception {
        // This package may need to toggle zen mode for this test, so allow it to do so.
        allowNotificationPolicyAccess(DEVICE_ADMIN_PKG, mUserId);
        try {
            executeDeviceTestClass("".AudioRestrictionTest"");
        } finally {
            disallowNotificationPolicyAccess(DEVICE_ADMIN_PKG, mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSuspendPackage"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSuspendPackage() throws Exception {
        CLog.i(""runTestSuspendPackage() on user %d"", mUserId);

        installAppAsUser(INTENT_SENDER_APK, mUserId);
        installAppAsUser(INTENT_RECEIVER_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            // Suspend a testing package.
            executeDeviceTestMethod("".SuspendPackageTest"", ""testSetPackagesSuspended"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PACKAGES_SUSPENDED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(INTENT_RECEIVER_PKG)
                    .setBoolean(false)
                    .build());
        // Verify that the package is suspended from the PREVIOUS test and that the dialog is shown
        executeSuspendPackageTestMethod(""testPackageSuspended"");

        // Undo the suspend.
        executeDeviceTestMethod("".SuspendPackageTest"", ""testSetPackagesNotSuspended"");
        // Verify that the package is not suspended from the PREVIOUS test and that the app launches
        executeSuspendPackageTestMethod(""testPackageNotSuspended"");

        // Verify we cannot suspend not suspendable packages.
        executeDeviceTestMethod("".SuspendPackageTest"", ""testSuspendNotSuspendablePackages"");
    }

    @FlakyTest(bugId = 141314026)"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSuspendPackageWithPackageManager"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSuspendPackageWithPackageManager() throws Exception {
        CLog.i(""runTestSuspendPackageWithPackageManager() on user %d"", mUserId);

        installAppAsUser(INTENT_SENDER_APK, mUserId);
        installAppAsUser(INTENT_RECEIVER_APK, mUserId);
        // Suspend a testing package with the PackageManager
        executeDeviceTestMethod("".SuspendPackageTest"",
                ""testSetPackagesSuspendedWithPackageManager"");
        // Verify that the package is suspended from the PREVIOUS test and that the dialog is shown
        executeSuspendPackageTestMethod(""testPackageSuspendedWithPackageManager"");

        // Undo the suspend.
        executeDeviceTestMethod("".SuspendPackageTest"",
                ""testSetPackagesNotSuspendedWithPackageManager"");
        // Verify that the package is not suspended from the PREVIOUS test and that the app launches
        executeSuspendPackageTestMethod(""testPackageNotSuspended"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testCannotRemoveUserIfRestrictionSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotRemoveUserIfRestrictionSet() throws Exception {
        assumeCanCreateAdditionalUsers(1);
        assumeTrue(""Outside of the primary user, setting DISALLOW_REMOVE_USER would not work"",
                mUserId == getPrimaryUser());

        final int userId = createUser();
        try {
            changeUserRestrictionOrFail(DISALLOW_REMOVE_USER, true, mUserId);
            assertFalse(getDevice().removeUser(userId));
        } finally {
            changeUserRestrictionOrFail(DISALLOW_REMOVE_USER, false, mUserId);
            assertTrue(getDevice().removeUser(userId));
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testCannotEnableOrDisableDeviceOwnerOrProfileOwner"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testCannotEnableOrDisableDeviceOwnerOrProfileOwner() throws Exception {
        // Try to disable a component in device owner/ profile owner.
        String result = disableComponentOrPackage(
                mUserId, DEVICE_ADMIN_PKG + ""/.SetPolicyActivity"");
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to disable the device owner/ profile owner package.
        result = disableComponentOrPackage(mUserId, DEVICE_ADMIN_PKG);
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to enable a component in device owner/ profile owner.
        result = enableComponentOrPackage(
                mUserId, DEVICE_ADMIN_PKG + ""/.SetPolicyActivity"");
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));
        // Try to enable the device owner/ profile owner package.
        result = enableComponentOrPackage(mUserId, DEVICE_ADMIN_PKG);
        assertTrue(""Should throw SecurityException"",
                result.contains(""java.lang.SecurityException""));

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testResetPasswordWithToken"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testResetPasswordWithToken() throws Exception {
        assumeHasSecureLockScreenFeature();

        // If ResetPasswordWithTokenTest for managed profile is executed before device owner and
        // primary user profile owner tests, password reset token would have been disabled for
        // the primary user, so executing ResetPasswordWithTokenTest on user 0 would fail. We allow
        // this and do not fail the test in this case.
        // This is the default test for MixedDeviceOwnerTest and MixedProfileOwnerTest,
        // MixedManagedProfileOwnerTest overrides this method to execute the same test more strictly
        // without allowing failures.
        executeResetPasswordWithTokenTests(/* allowFailures */ true);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGetCurrentFailedPasswordAttempts"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetCurrentFailedPasswordAttempts() throws Exception {
        assumeHasSecureLockScreenFeature();

        final String wrongPassword = TEST_PASSWORD + ""5"";

        changeUserCredential(TEST_PASSWORD, null /*oldCredential*/, mUserId);
        try {
            // Test that before trying an incorrect password there are 0 failed attempts.
            executeDeviceTestMethod("".GetCurrentFailedPasswordAttemptsTest"",
                    ""testNoFailedPasswordAttempts"");
            // Try an incorrect password.
            assertFalse(verifyUserCredentialIsCorrect(wrongPassword, mUserId));
            // Test that now there is one failed attempt.
            executeDeviceTestMethod("".GetCurrentFailedPasswordAttemptsTest"",
                    ""testOneFailedPasswordAttempt"");
            // Try an incorrect password.
            assertFalse(verifyUserCredentialIsCorrect(wrongPassword, mUserId));
            // Test that now there are two failed attempts.
            executeDeviceTestMethod("".GetCurrentFailedPasswordAttemptsTest"",
                    ""testTwoFailedPasswordAttempts"");
            // TODO: re-enable the test below when b/110945754 is fixed.
            // Try the correct password and check the failed attempts number has been reset to 0.
            // assertTrue(verifyUserCredentialIsCorrect(testPassword, mUserId));
            // executeDeviceTestMethod("".GetCurrentFailedPasswordAttemptsTest"",
            //         ""testNoFailedPasswordAttempts"");
        } finally {
            changeUserCredential(null /*newCredential*/, TEST_PASSWORD, mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGetPasswordExpiration"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetPasswordExpiration() throws Exception {
        assumeHasSecureLockScreenFeature();

        executeDeviceTestMethod("".GetPasswordExpirationTest"",
                ""testGetPasswordExpiration"");
        try {
            executeDeviceTestMethod("".GetPasswordExpirationTest"",
                    ""testGetPasswordExpirationUpdatedAfterPasswordReset_beforeReset"");
            // Wait for 20 seconds so we can make sure that the expiration date is refreshed later.
            Thread.sleep(20000);
            changeUserCredential(TEST_PASSWORD, null, mUserId);
            executeDeviceTestMethod("".GetPasswordExpirationTest"",
                    ""testGetPasswordExpirationUpdatedAfterPasswordReset_afterReset"");
        } finally {
            changeUserCredential(null, TEST_PASSWORD, mUserId);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPasswordQualityWithoutSecureLockScreen"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPasswordQualityWithoutSecureLockScreen() throws Exception {
        assumeDoesNotHaveSecureLockScreenFeature();

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".UnavailableSecureLockScreenTest"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testClearApplicationData_testPkg"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testClearApplicationData_testPkg() throws Exception {
        installAppAsUser(INTENT_RECEIVER_APK, mUserId);
        runDeviceTestsAsUser(INTENT_RECEIVER_PKG, INTENT_RECEIVER_PKG + "".ClearApplicationDataTest"",
                ""testWriteToSharedPreference"", mUserId);
        executeDeviceTestMethod("".ClearApplicationDataTest"", ""testClearApplicationData_testPkg"");
        runDeviceTestsAsUser(INTENT_RECEIVER_PKG, INTENT_RECEIVER_PKG + "".ClearApplicationDataTest"",
                ""testSharedPreferenceCleared"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testPrintingPolicy"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testPrintingPolicy() throws Exception {
        assumeHasPrintFeature();

        installAppAsUser(PRINTING_APP_APK, mUserId);
        executeDeviceTestClass("".PrintingPolicyTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testKeyManagement"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testKeyManagement() throws Exception {
        installAppAsUser(SHARED_UID_APP1_APK, mUserId);
        installAppAsUser(SHARED_UID_APP2_APK, mUserId);

        executeDeviceTestClass("".KeyManagementTest"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetUserRestrictionLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUserRestrictionLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetUserRestrictionLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_CONFIG_LOCATION, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_CONFIG_LOCATION, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_ADJUST_VOLUME, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_ADJUST_VOLUME, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.ADD_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.REMOVE_USER_RESTRICTION_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setStrings(DISALLOW_AUTOFILL, NOT_CALLED_FROM_PARENT)
                    .build()
        );
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetPermissionGrantStateLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetPermissionGrantStateLogged() throws Exception {
        installAppPermissionAppAsUser();
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetPermissionGrantStateLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_GRANTED)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_DENIED)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_PERMISSION_GRANT_STATE_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setInt(PERMISSION_GRANT_STATE_DEFAULT)
                    .setBoolean(false)
                    .setStrings(""android.permission.READ_CONTACTS"")
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetUninstallBlockedLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testSetUninstallBlockedLogged() throws Exception {
        installAppAsUser(PERMISSIONS_APP_APK, mUserId);
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".DevicePolicyLoggingTest"",
                    ""testSetUninstallBlockedLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_UNINSTALL_BLOCKED_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(PERMISSIONS_APP_PKG)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdCorrectCalculation"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testEnrollmentSpecificIdCorrectCalculation() throws Exception {

        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testCorrectCalculationOfEsid"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdCorrectCalculationLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testEnrollmentSpecificIdCorrectCalculationLogged() throws Exception {
        boolean isManagedProfile = (mPrimaryUserId != mUserId);

        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".EnrollmentSpecificIdTest"",
                    ""testCorrectCalculationOfEsid"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_ORGANIZATION_ID_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(isManagedProfile)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testEnrollmentSpecificIdEmptyAndMultipleSet"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testEnrollmentSpecificIdEmptyAndMultipleSet() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testThrowsForEmptyOrganizationId"", mUserId);
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, "".EnrollmentSpecificIdTest"",
                ""testThrowsWhenTryingToReSetOrganizationId"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetNearbyAppStreamingPolicy_changesPolicy"	"CtsDevicePolicyManagerTestCases"	"3: user interaction apps"	"public void testSetNearbyAppStreamingPolicy_changesPolicy() throws Exception {
        executeDeviceTestMethod(
                "".NearbyAppStreamingPolicyTest"", ""testSetNearbyAppStreamingPolicy_changesPolicy"");
    }

    /**
     * Executes a test class on device. Prior to running, turn off background data usage
     * restrictions, and restore the original restrictions after the test.
     */
    private void executeDeviceTestClassNoRestrictBackground(String className) throws Exception {
        boolean originalRestriction = ensureRestrictBackgroundPolicyOff();
        try {
            executeDeviceTestClass(className);
        } catch (Exception e) {
            throw e;
        } finally {
            // if the test throws exception, still restore the policy
            restoreRestrictBackgroundPolicyTo(originalRestriction);
        }
    }

    protected void executeDeviceTestClass(String className) throws Exception {
        executeDeviceTestMethod(className, /* testName= */ null);
    }

    protected void executeDeviceTestMethod(String className, String testName) throws Exception {
        executeDeviceTestMethod(className, testName, /* params= */ new HashMap<>());
    }

    protected void executeDeviceTestMethod(String className, String testName,
            Map<String, String> params) throws Exception {
        executeDeviceTestMethod(className, testName, mUserId, params);
    }

    protected void executeDeviceTestMethod(String className, String testName, int userId,
            Map<String, String> params) throws Exception {
        runDeviceTestsAsUser(DEVICE_ADMIN_PKG, className, testName, userId, params);
    }

    protected void installAppPermissionAppAsUser()
            throws FileNotFoundException, DeviceNotAvailableException {
        installAppAsUser(PERMISSIONS_APP_APK, false, mUserId);
    }

    private void executeSuspendPackageTestMethod(String testName) throws Exception {
        runDeviceTestsAsUser(INTENT_SENDER_PKG, "".SuspendPackageTest"", testName, mUserId);
    }

    private void executeAccountTest(String testName) throws DeviceNotAvailableException {
        runDeviceTestsAsUser(ACCOUNT_MANAGEMENT_PKG, "".AccountManagementTest"",
                testName, mUserId);
        // Send a home intent to dismiss an error dialog.
        String command = ""am start -a android.intent.action.MAIN""
                + "" -c android.intent.category.HOME"";
        CLog.i(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));
    }

    private void executeAppRestrictionsManagingPackageTest(String testName) throws Exception {
        runDeviceTestsAsUser(DELEGATE_APP_PKG,
                "".AppRestrictionsDelegateTest"", testName, mUserId);
    }

    private void executeDelegationTests(Map<String, DevicePolicyEventWrapper[]> delegationTests,
            boolean positive)
            throws Exception {
        for (Map.Entry<String, DevicePolicyEventWrapper[]> entry : delegationTests.entrySet()) {
            final String delegationTestClass = entry.getKey();
            final DevicePolicyEventWrapper[] expectedMetrics = entry.getValue();
            final DevicePolicyEventLogVerifier.Action testRun = () -> {
                runDeviceTestsAsUser(DELEGATE_APP_PKG, delegationTestClass,
                        positive ? ""testCanAccessApis"" : ""testCannotAccessApis"", mUserId);
            };
            if (expectedMetrics != null && positive) {
                assertMetricsLogged(getDevice(), testRun, expectedMetrics);
            } else {
                testRun.apply();
            }
        }
    }

    private void changeUserRestrictionOrFail(String key, boolean value, int userId)
            throws DeviceNotAvailableException {
        changeUserRestrictionOrFail(key, value, userId, DEVICE_ADMIN_PKG);
    }

    private void changeAccountManagement(String command, String accountType, int userId)
            throws DeviceNotAvailableException {
        changePolicyOrFail(command, ""--es extra-account-type "" + accountType, userId);
    }

    private void changeApplicationRestrictionsManagingPackage(String packageName)
            throws DeviceNotAvailableException {
        String packageNameExtra = (packageName != null)
                ? ""--es extra-package-name "" + packageName : """";
        changePolicyOrFail(""set-app-restrictions-manager"", packageNameExtra, mUserId);
    }

    protected void setDelegatedScopes(String packageName, List<String> scopes)
            throws DeviceNotAvailableException {
        final String packageNameExtra = ""--es extra-package-name "" + packageName;
        String scopesExtra = """";
        if (scopes != null && scopes.size() > 0) {
            scopesExtra = ""--esa extra-scopes-list "" + scopes.get(0);
            for (int i = 1; i < scopes.size(); ++i) {
                scopesExtra += "","" + scopes.get(i);
            }
        }
        final String extras = packageNameExtra + "" "" + scopesExtra;

        changePolicyOrFail(""set-delegated-scopes"", extras, mUserId);
    }

    private void setInstallPackageAppOps(String packageName, boolean allowed, int userId)
            throws DeviceNotAvailableException {
        String command = ""appops set --user "" + userId + "" "" + packageName + "" "" +
                ""REQUEST_INSTALL_PACKAGES ""
                + (allowed ? ""allow"" : ""default"");
        CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));
    }

    private void changePolicyOrFail(String command, String extras, int userId)
            throws DeviceNotAvailableException {
        changePolicyOrFail(command, extras, userId, DEVICE_ADMIN_PKG);
    }

    /**
     * Start SimpleActivity synchronously in a particular user.
     */
    protected void startSimpleActivityAsUser(int userId) throws Exception {
        installAppAsUser(TEST_APP_APK, /* grantPermissions */ true, /* dontKillApp */ true, userId);
        startActivityAsUser(userId, TEST_APP_PKG, TEST_APP_PKG + "".SimpleActivity"");
    }

    protected void setScreenCaptureDisabled(int userId, boolean disabled) throws Exception {
        String testMethodName = disabled
                ? ""testSetScreenCaptureDisabled_true""
                : ""testSetScreenCaptureDisabled_false"";
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);

        testMethodName = disabled
                ? ""testScreenCaptureImpossible""
                : ""testScreenCapturePossible"";

        startSimpleActivityAsUser(userId);
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);
        forceStopPackageForUser(TEST_APP_PKG, userId);
    }

    protected void setScreenCaptureDisabled_assist(int userId, boolean disabled) throws Exception {
        // Set the policy.
        String testMethodName = disabled
                ? ""testSetScreenCaptureDisabled_true""
                : ""testSetScreenCaptureDisabled_false"";
        executeDeviceTestMethod("".ScreenCaptureDisabledTest"", testMethodName);
        testMethodName = disabled
                ? ""testScreenCaptureImpossible_assist""
                : ""testScreenCapturePossible_assist"";

        // Check whether the VoiceInteractionService can retrieve the screenshot.
        installAppAsUser(DEVICE_ADMIN_APK, mPrimaryUserId);

        if (userId == mPrimaryUserId) {
            // If testing for user-0, also make sure the existing screen can't be captured.
            runDeviceTestsAsUser(
                    DEVICE_ADMIN_PKG,
                    "".AssistScreenCaptureDisabledTest"",
                    testMethodName,
                    mPrimaryUserId);
        }

        // Make sure the foreground activity is from the target user.
        startSimpleActivityAsUser(userId);

        runDeviceTestsAsUser(
                DEVICE_ADMIN_PKG,
                "".AssistScreenCaptureDisabledTest"",
                testMethodName,
                mPrimaryUserId);
    }

    /**
     * Allows packageName to manage notification policy configuration, which
     * includes toggling zen mode.
     */
    private void allowNotificationPolicyAccess(String packageName, int userId)
            throws DeviceNotAvailableException {
        List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);
        if (!enabledPackages.contains(packageName)) {
            enabledPackages.add(packageName);
            setEnabledNotificationPolicyPackages(enabledPackages, userId);
        }
    }

    /**
     * Disallows packageName to manage notification policy configuration, which
     * includes toggling zen mode.
     */
    private void disallowNotificationPolicyAccess(String packageName, int userId)
            throws DeviceNotAvailableException {
        List<String> enabledPackages = getEnabledNotificationPolicyPackages(userId);
        if (enabledPackages.contains(packageName)) {
            enabledPackages.remove(packageName);
            setEnabledNotificationPolicyPackages(enabledPackages, userId);
        }
    }

    private void setEnabledNotificationPolicyPackages(List<String> packages, int userId)
            throws DeviceNotAvailableException {
        getDevice().setSetting(userId, ""secure"", ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES,
                String.join("":"", packages));
    }

    private List<String> getEnabledNotificationPolicyPackages(int userId)
            throws DeviceNotAvailableException {
        String settingValue = getDevice().getSetting(userId, ""secure"",
                ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES);
        if (settingValue == null) {
            return new ArrayList<String>();
        }
        return new ArrayList<String>(Arrays.asList(settingValue.split("":|\n"")));
    }

    protected void setVoiceInteractionService(String componentName)
            throws DeviceNotAvailableException {
        getDevice().setSetting(
                mPrimaryUserId, ""secure"", ""voice_interaction_service"", componentName);
        getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_structure_enabled"", ""1"");
        getDevice().setSetting(mPrimaryUserId, ""secure"", ""assist_screenshot_enabled"", ""1"");
    }

    protected void clearVoiceInteractionService() throws DeviceNotAvailableException {
        getDevice().executeShellCommand(""settings delete secure voice_interaction_service"");
    }

    /**
     * Ensure that restrict background policy is off.
     * Returns the original status of restrict background policy.
     */
    private boolean ensureRestrictBackgroundPolicyOff() throws Exception {
        String restriction = getDevice().executeShellCommand(RESTRICT_BACKGROUND_GET_CMD);
        if (restriction.contains(""enabled"")) {
            getDevice().executeShellCommand(RESTRICT_BACKGROUND_OFF_CMD);
            return true;
        }
        return false;
    }

    private void restoreRestrictBackgroundPolicyTo(boolean restricted) throws Exception {
        getDevice().executeShellCommand(
                restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetCameraDisabledLogged"	"CtsDevicePolicyManagerTestCases"	"1: camera"	"public void testSetCameraDisabledLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod("".PolicyTransparencyTest"", ""testCameraDisabled"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(true)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build(),
            new DevicePolicyEventWrapper.Builder(EventId.SET_CAMERA_DISABLED_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .setStrings(NOT_CALLED_FROM_PARENT)
                    .build());
    }

    /** Test for resetPassword for all devices. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testSetKeyguardDisabledSecureCameraLogged"	"CtsDevicePolicyManagerTestCases"	"1: camera"	"public void testSetKeyguardDisabledSecureCameraLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            executeDeviceTestMethod(
                    "".DevicePolicyLoggingTest"", ""testSetKeyguardDisabledSecureCameraLogged"");
        }, new DevicePolicyEventWrapper.Builder(EventId.SET_KEYGUARD_DISABLED_FEATURES_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setInt(KEYGUARD_DISABLE_SECURE_CAMERA)
                .setStrings(NOT_CALLED_FROM_PARENT)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testApplicationHidden_cannotHidePolicyExemptApps"	"CtsDevicePolicyManagerTestCases"	"2: hide apps"	"public void testApplicationHidden_cannotHidePolicyExemptApps() throws Exception {
        executeDeviceTestMethod("".ApplicationHiddenTest"", ""testCannotHidePolicyExemptApps"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerTest"	"testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault"	"CtsDevicePolicyManagerTestCases"	"1: apps"	"public void testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault()
            throws Exception {
        executeDeviceTestMethod(
                "".NearbyAppStreamingPolicyTest"",
                ""testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault"");
    }

    // TODO(b/184175078): Migrate test to Bedstead when the infra is ready."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnership"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferOwnership() throws Exception {
        final boolean hasManagedProfile = (mUserId != mPrimaryUserId);
        final String expectedManagementType = hasManagedProfile ? ""profile-owner"" : ""device-owner"";
        assertMetricsLogged(getDevice(), () -> {
            runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG, mOutgoingTestClassName,
                    ""testTransferOwnership"", mUserId);
        }, new DevicePolicyEventWrapper.Builder(EventId.TRANSFER_OWNERSHIP_VALUE)
                .setAdminPackageName(TRANSFER_OWNER_OUTGOING_PKG)
                .setStrings(TRANSFER_OWNER_INCOMING_PKG, expectedManagementType)
                .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferSameAdmin"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferSameAdmin() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferSameAdmin"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferInvalidTarget"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferInvalidTarget() throws Exception {
        installAppAsUser(INVALID_TARGET_APK, mUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferInvalidTarget"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferPolicies"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferPolicies() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferWithPoliciesOutgoing"", mUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
                mIncomingTestClassName,
                ""testTransferPoliciesAreRetainedAfterTransfer"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnershipChangedBroadcast"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferOwnershipChangedBroadcast() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferOwnershipChangedBroadcast"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferCompleteCallback"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferCompleteCallback() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferOwnership"", mUserId);

        waitForBroadcastIdle();

        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
                mIncomingTestClassName,
                ""testTransferCompleteCallbackIsCalled"", mUserId);
    }

    protected void setupTestParameters(int userId, String outgoingTestClassName,
            String incomingTestClassName) {
        mUserId = userId;
        mOutgoingTestClassName = outgoingTestClassName;
        mIncomingTestClassName = incomingTestClassName;
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTransferOwnershipNoMetadata"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTransferOwnershipNoMetadata() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferOwnershipNoMetadata"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsTransferBundlePersisted"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsTransferBundlePersisted() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferOwnershipBundleSaved"", mUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
                mIncomingTestClassName,
                ""testTransferOwnershipBundleLoaded"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testGetTransferOwnershipBundleOnlyCalledFromAdmin"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetTransferOwnershipBundleOnlyCalledFromAdmin()
            throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testGetTransferOwnershipBundleOnlyCalledFromAdmin"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testBundleEmptyAfterTransferWithNullBundle"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testBundleEmptyAfterTransferWithNullBundle() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testTransferOwnershipNullBundle"", mUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
                mIncomingTestClassName,
                ""testTransferOwnershipEmptyBundleLoaded"", mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testIsBundleNullNoTransfer"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testIsBundleNullNoTransfer() throws DeviceNotAvailableException {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
                mOutgoingTestClassName,
                ""testIsBundleNullNoTransfer"", mUserId);
    }

    protected int setupManagedProfileOnDeviceOwner(String apkName, String adminReceiverClassName)
            throws Exception {
        return setupManagedProfile(apkName, adminReceiverClassName);
    }

    protected int setupManagedProfile(String apkName, String adminReceiverClassName)
            throws Exception {
        final int userId = createManagedProfile(mPrimaryUserId);
        installAppAsUser(apkName, userId);
        if (!setProfileOwner(adminReceiverClassName, userId, false)) {
            removeAdmin(TRANSFER_OWNER_OUTGOING_TEST_RECEIVER, userId);
            getDevice().uninstallPackage(TRANSFER_OWNER_OUTGOING_PKG);
            fail(""Failed to set device owner"");
            return -1;
        }
        startUserAndWait(userId);
        return userId;
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DeviceAndProfileOwnerHostSideTransferTest"	"testTargetDeviceAdminServiceBound"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testTargetDeviceAdminServiceBound() throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            mOutgoingTestClassName,
            ""testTransferOwnership"", mUserId);
        assertServiceRunning(INCOMING_ADMIN_SERVICE_FULL_NAME);
    }

    private void assertServiceRunning(String serviceName) throws DeviceNotAvailableException {
        final String result = getDevice().executeShellCommand(
                String.format(""dumpsys activity services %s"", serviceName));
        assertThat(result).contains(""app=ProcessRecord"");
    }

    protected void setSameAffiliationId(int profileUserId, String testClassName)
        throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            testClassName,
            ""testSetAffiliationId1"", mPrimaryUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_OUTGOING_PKG,
            testClassName,
            ""testSetAffiliationId1"", profileUserId);
    }

    protected void assertAffiliationIdsAreIntact(int profileUserId,
        String testClassName) throws Exception {
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
            testClassName,
            ""testIsAffiliationId1"", mPrimaryUserId);
        runDeviceTestsAsUser(TRANSFER_OWNER_INCOMING_PKG,
            testClassName,
            ""testIsAffiliationId1"", profileUserId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerHostSideTransferTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.MixedManagedProfileOwnerTestApi30"	"removeTestUsers"	"CtsDevicePolicyManagerTestCases"	"1: user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.FEATURE_MANAGED_USERS;

import com.android.cts.devicepolicy.DeviceAdminFeaturesCheckerRule.RequiresAdditionalFeatures;

import org.junit.Test;

/**
 * Set of tests for managed profile owner use cases that may also apply to device owner.
 * Tests that should be run identically in both cases are added in DeviceAndProfileOwnerTestApi30.
 */
// We need managed users to be supported in order to create a profile of the user owner.
@RequiresAdditionalFeatures({FEATURE_MANAGED_USERS})
public class MixedManagedProfileOwnerTestApi30 extends DeviceAndProfileOwnerTestApi30 {
    private int mParentUserId = -1;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        removeTestUsers();
        mParentUserId = mPrimaryUserId;
        createManagedProfile();
    }

    private void createManagedProfile() throws Exception {
        mUserId = createManagedProfile(mParentUserId);
        switchUser(mParentUserId);
        startUserAndWait(mUserId);

        installAppAsUser(DEVICE_ADMIN_APK, mUserId);
        setProfileOwnerOrFail(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mUserId);
        startUserAndWait(mUserId);
    }

    @Override
    public void tearDown() throws Exception {
        removeUser(mUserId);

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTestApi30.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbDeviceOwnerLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAdbDeviceOwnerLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            setDeviceOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mDeviceOwnerUserId,
                    /* expectFailure */ false);
        }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)
                    .setAdminPackageName(DEVICE_ADMIN_PKG)
                    .setBoolean(false)
                    .setStrings(""device-owner"")
                    .build());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.AdbProvisioningTests"	"testAdbProfileOwnerLogged"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testAdbProfileOwnerLogged() throws Exception {
        assertMetricsLogged(getDevice(), () -> {
            setProfileOwner(DEVICE_ADMIN_PKG + ""/"" + ADMIN_RECEIVER_TEST_CLASS, mPrimaryUserId,
                    /* expectFailure */ false);
        }, new DevicePolicyEventWrapper.Builder(EventId.PROVISIONING_ENTRY_POINT_ADB_VALUE)
                .setAdminPackageName(DEVICE_ADMIN_PKG)
                .setBoolean(false)
                .setStrings(""profile-owner"")
                .build());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/AdbProvisioningTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.HeadlessSystemUserDeviceOwnerTest"	"isHeadlessSystemUserMode"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"/*
 *.
 */

package com.android.cts.devicepolicy;

import static org.junit.Assume.assumeTrue;

import org.junit.Test;

// TODO(b/174859111): move to device-side, automotive specific module
/**
 * Device owner tests specific for devices that use
 * {@link android.os.UserManager#isHeadlessSystemUserMode()}.
 */
public final class HeadlessSystemUserDeviceOwnerTest extends BaseDeviceOwnerTest {

    @Override
    public void setUp() throws Exception {
        assumeTrue(""device is not headless system user mode"", isHeadlessSystemUserMode());

        super.setUp();
    }

    @Override
    public void tearDown() throws Exception {
        if (!isHeadlessSystemUserMode()) return;

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/HeadlessSystemUserDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.HeadlessSystemUserDeviceOwnerTest"	"testProfileOwnerIsSetOnNewUser"	"CtsDevicePolicyManagerTestCases"	"2: system user"	"public void testProfileOwnerIsSetOnNewUser() throws Exception {
        assumeCanCreateAdditionalUsers(1);

        executeDeviceTest(""testProfileOwnerIsSetOnNewUser"");
    }

    private void executeDeviceTest(String testMethod) throws Exception {
        executeDeviceTestMethod("".HeadlessSystemUserTest"", testMethod);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/HeadlessSystemUserDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.HeadlessSystemUserDeviceOwnerTest"	"testProfileOwnerIsSetOnCurrentUser"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testProfileOwnerIsSetOnCurrentUser() throws Exception {
        executeDeviceTest(""testProfileOwnerIsSetOnCurrentUser"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/HeadlessSystemUserDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.PasswordComplexityTest"	"assumeTestEnabled"	"CtsDevicePolicyManagerTestCases"	"1: user"	"package com.android.cts.devicepolicy;

import static com.android.cts.devicepolicy.metrics.DevicePolicyEventLogVerifier.assertMetricsLogged;

import static org.junit.Assert.fail;

import android.stats.devicepolicy.EventId;

import com.android.cts.devicepolicy.metrics.DevicePolicyEventWrapper;

import org.junit.Test;

/** Host-side tests to run the CtsPasswordComplexity device-side tests. */
public class PasswordComplexityTest extends BaseDevicePolicyTest {

    private static final String APP = ""CtsPasswordComplexity.apk"";
    private static final String PKG = ""com.android.cts.passwordcomplexity"";
    private static final String CLS = "".GetPasswordComplexityTest"";

    private int mCurrentUserId;

    @Override
    protected void assumeTestEnabled() throws Exception {
        assumeHasSecureLockScreenFeature();
    }

    @Override
    public void setUp() throws Exception {
        super.setUp();

        if (!getDevice().executeShellCommand(""cmd lock_settings verify"")
                .startsWith(""Lock credential verified successfully"")) {
            fail(""Please remove the device screen lock before running this test"");
        }

        mCurrentUserId = getDevice().getCurrentUser();
        installAppAsUser(APP, mCurrentUserId);
    }

    @Override
    public void tearDown() throws Exception {
        getDevice().uninstallPackage(PKG);

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.PasswordComplexityTest"	"testGetPasswordComplexity"	"CtsDevicePolicyManagerTestCases"	"1: user"	"public void testGetPasswordComplexity() throws Exception {
        assertMetricsLogged(
                getDevice(),
                () -> runDeviceTestsAsUser(PKG, CLS, mCurrentUserId),
                new DevicePolicyEventWrapper
                        .Builder(EventId.GET_USER_PASSWORD_COMPLEXITY_LEVEL_VALUE)
                        .setStrings(""notCalledFromParent"", PKG).build());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.separateprofilechallenge.SeparateProfileChallengePermissionsTest"	"testSeparateProfileChallengePermissions"	""	"2: system user"	"public void testSeparateProfileChallengePermissions() throws Exception {
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        assertNotNull(dpm);
        try {
            dpm.isSeparateProfileChallengeAllowed(0); /* Try to use USER_SYSTEM */
            fail(""The user must be system to call isSeparateProfileChallengeAllowed()."");
        } catch (SecurityException ignore) {
            // That's what we want!
        } catch (NoSuchMethodError err) {
            // API unavailable - pass
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SeparateProfileChallenge/src/com/android/cts/separateprofilechallenge/SeparateProfileChallengePermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceadmin.ClearDeviceAdminWithNoProtectionTest"	"testRemoveActiveAdmin"	""	"1: system"	"public void testRemoveActiveAdmin() throws Exception {

        final ComponentName cn = new ComponentName(getContext(),
                DeviceAdminReceiverWithNoProtection.class);

        final DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);

        if (dpm.isAdminActive(cn)) {
            dpm.removeActiveAdmin(cn);
            for (int i = 0; i < 6000 && dpm.isAdminActive(cn); i++) {
                Thread.sleep(10);
            }
        }
        assertFalse(""Still active admin"", dpm.isAdminActive(cn));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/ClearDeviceAdminWithNoProtectionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceadmin.DeviceAdminWithEnterprisePoliciesBlockedTest"	"testCameraDisabled"	""	"1: camera"	"public void testCameraDisabled() {
        boolean originalValue = dpm.getCameraDisabled(mAdminComponent);
        assertSecurityException(() -> dpm.setCameraDisabled(mAdminComponent, true));
        assertEquals(originalValue, dpm.getCameraDisabled(mAdminComponent));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAdmin/src/com.android.cts.deviceadmin/DeviceAdminWithEnterprisePoliciesBlockedTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferOutgoingTest"	"testIsBundleNullNoTransfer"	""	"2: system user"	"public void testIsBundleNullNoTransfer() throws Throwable {
        assertNull(mDevicePolicyManager.getTransferOwnershipBundle());
    }

    private void setUserRestriction(String restriction, boolean add) {
        DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);
        if (add) {
            dpm.addUserRestriction(mOutgoingComponentName, restriction);
        } else {
            dpm.clearUserRestriction(mOutgoingComponentName, restriction);
        }
    }

    private void setAffiliationId(String id) {
        ComponentName admin = mOutgoingComponentName;
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> ids = Collections.singleton(id);
        dpm.setAffiliationIds(admin, ids);
        assertEquals(ids, dpm.getAffiliationIds(admin));
    }

    private static SharedPreferences getPrefs(Context context) {
        return context.getSharedPreferences(SHARED_PREFERENCE_NAME, Context.MODE_PRIVATE);
    }

    private static void putBooleanPref(Context context, String key, boolean value) {
        getPrefs(context).edit().putBoolean(key, value).apply();
    }

    protected static boolean getBooleanPref(Context context, String key) {
        return getPrefs(context).getBoolean(key, false);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferOutgoingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.TransferProfileOwnerOutgoingTest"	"testTransferWithPoliciesOutgoing"	""	"1: camera"	"public void testTransferWithPoliciesOutgoing() throws Throwable {
        int passwordLength = 123;
        int passwordExpirationTimeout = 456;
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(mOutgoingComponentName);
        mDevicePolicyManager.setCameraDisabled(mOutgoingComponentName, true);
        mDevicePolicyManager.setPasswordQuality(
                mOutgoingComponentName, DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(mOutgoingComponentName, passwordLength);
        mDevicePolicyManager.setCrossProfileCallerIdDisabled(mOutgoingComponentName, true);
        parentDevicePolicyManager.setPasswordExpirationTimeout(
                mOutgoingComponentName, passwordExpirationTimeout);

        PersistableBundle b = new PersistableBundle();
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferProfileOwnerOutgoingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferWithPoliciesOutgoing"	""	"2: system camera"	"public void testTransferWithPoliciesOutgoing() throws Throwable {
        int passwordLength = 123;
        mDevicePolicyManager.setCameraDisabled(mOutgoingComponentName, true);
        mDevicePolicyManager.setPasswordQuality(
                mOutgoingComponentName, DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(mOutgoingComponentName, passwordLength);
        mDevicePolicyManager.setKeepUninstalledPackages(mOutgoingComponentName,
                Collections.singletonList(""test.package""));
        mDevicePolicyManager.setSystemUpdatePolicy(mOutgoingComponentName,
                SystemUpdatePolicy.createPostponeInstallPolicy());
        PersistableBundle b = new PersistableBundle();
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.TransferDeviceOwnerOutgoingTest"	"testTransferOwnership"	""	"1: user"	"public void testTransferOwnership() throws Throwable {
        PersistableBundle b = new PersistableBundle();
        mDevicePolicyManager.transferOwnership(mOutgoingComponentName, INCOMING_COMPONENT_NAME, b);
        assertTrue(mDevicePolicyManager.isAdminActive(INCOMING_COMPONENT_NAME));
        assertTrue(mDevicePolicyManager.isDeviceOwnerApp(INCOMING_COMPONENT_NAME.getPackageName()));
        assertFalse(
                mDevicePolicyManager.isDeviceOwnerApp(mOutgoingComponentName.getPackageName()));
        assertFalse(mDevicePolicyManager.isAdminActive(mOutgoingComponentName));
        assertThrows(SecurityException.class, () -> {
            mDevicePolicyManager.getSecondaryUsers(mOutgoingComponentName);
        });
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerOutgoingApp/src/com/android/cts/transferowner/TransferDeviceOwnerOutgoingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryEnableQuietMode_noCredentialRequest"	""	"2: system user"	"public void testTryEnableQuietMode_noCredentialRequest() throws Exception {
        setTestAppAsDefaultLauncher();
        startLauncherActivityInTestApp();

        Intent intent = trySetQuietModeEnabled(true,
                UserManager.QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED, true);
        assertNotNull(""Failed to receive ACTION_MANAGED_PROFILE_UNAVAILABLE broadcast"", intent);
        assertTrue(mUserManager.isQuietModeEnabled(mTargetUser));

        waitForUserLocked();

        intent = trySetQuietModeEnabled(false,
                UserManager.QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED, false);
        assertNull(""Received ACTION_MANAGED_PROFILE_AVAILABLE broadcast"", intent);
        assertTrue(mUserManager.isQuietModeEnabled(mTargetUser));
    }

    private void waitForUserLocked() throws Exception {
        // Should match a line in ""dumpsys mount"" output like this:
        // Local unlocked users: [0, 10]
        final Pattern p = Pattern.compile(""Local unlocked users: \\[(.*)\\]"");
        final long deadline = System.nanoTime() + TimeUnit.SECONDS.toNanos(60);
        while (System.nanoTime() < deadline) {
            final String output = mUiDevice.executeShellCommand(""dumpsys mount"");
            final Matcher matcher = p.matcher(output);
            assertTrue(""Unexpected dupmsys mount output: "" + output, matcher.find());
            final Set<Integer> unlockedUsers = Arrays.stream(matcher.group(1).split("", ""))
                    .map(Integer::valueOf)
                    .collect(Collectors.toSet());
            if (!unlockedUsers.contains(mTargetUser.getIdentifier())) {
                return;
            }
            Thread.sleep(500);
        }
        fail(""Cannot get the profile locked"");
    }

    private Intent trySetQuietModeEnabled(boolean enabled, int flags,
            boolean expectsCredentialsNotNeeded) throws Exception {
        return trySetQuietModeEnabled(enabled, true, flags, expectsCredentialsNotNeeded);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryEnableQuietMode_defaultForegroundLauncher"	""	"1: user"	"public void testTryEnableQuietMode_defaultForegroundLauncher() throws Exception {
        setTestAppAsDefaultLauncher();
        startLauncherActivityInTestApp();

        Intent intent = trySetQuietModeEnabled(true);
        assertNotNull(""Failed to receive ACTION_MANAGED_PROFILE_UNAVAILABLE broadcast"", intent);
        assertTrue(mUserManager.isQuietModeEnabled(mTargetUser));

        intent = trySetQuietModeEnabled(false);
        assertNotNull(""Failed to receive ACTION_MANAGED_PROFILE_AVAILABLE broadcast"", intent);
        assertFalse(mUserManager.isQuietModeEnabled(mTargetUser));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryEnableQuietMode_notForegroundLauncher"	""	"1: user"	"public void testTryEnableQuietMode_notForegroundLauncher() throws InterruptedException {
        setTestAppAsDefaultLauncher();

        assertThrows(SecurityException.class, () -> trySetQuietModeEnabled(true));
        assertFalse(mUserManager.isQuietModeEnabled(mTargetUser));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryEnableQuietMode_notDefaultLauncher"	""	"1: user"	"public void testTryEnableQuietMode_notDefaultLauncher() throws Exception {
        startLauncherActivityInTestApp();

        assertThrows(SecurityException.class, () -> trySetQuietModeEnabled(true));
        assertFalse(mUserManager.isQuietModeEnabled(mTargetUser));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryEnableQuietMode"	""	"1: user"	"public void testTryEnableQuietMode() throws Exception {
        setTestAppAsDefaultLauncher();
        startLauncherActivityInTestApp();

        Intent intent = trySetQuietModeEnabled(true);
        assertNotNull(""Failed to receive ACTION_MANAGED_PROFILE_UNAVAILABLE broadcast"", intent);
        assertTrue(mUserManager.isQuietModeEnabled(mTargetUser));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.QuietModeTest"	"testTryDisableQuietMode"	""	"1: user"	"public void testTryDisableQuietMode() throws Exception {
        setTestAppAsDefaultLauncher();
        startLauncherActivityInTestApp();

        Intent intent = trySetQuietModeEnabled(false);
        assertNotNull(""Failed to receive ACTION_MANAGED_PROFILE_AVAILABLE broadcast"", intent);
        assertFalse(mUserManager.isQuietModeEnabled(mTargetUser));
    }

    private Intent trySetQuietModeEnabled(boolean enabled) throws Exception {
        return trySetQuietModeEnabled(enabled, false, 0, true);
    }

    private Intent trySetQuietModeEnabled(boolean enabled, boolean hasFlags, int flags,
            boolean expectsCredentialsNotNeeded) throws Exception {
        final String action = enabled
                ? Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE
                : Intent.ACTION_MANAGED_PROFILE_AVAILABLE;

        BlockingBroadcastReceiver receiver =
                new BlockingBroadcastReceiver(mContext, action);
        try {
            receiver.register();

            boolean credentialNotNeeded = askLauncherSupportAppToSetQuietMode(enabled, hasFlags,
                    flags);
            assertEquals(credentialNotNeeded, expectsCredentialsNotNeeded);
            return receiver.awaitForBroadcast();
        } finally {
            receiver.unregisterQuietly();
        }
    }

    /**
     * Ask launcher support test app to set quiet mode by sending broadcast.
     * <p>
     * We cannot simply make this package the launcher and call the API because instrumentation
     * process would always considered to be in the foreground. The trick here is to send
     * broadcast to another test app which is launcher itself and call the API through it.
     * The receiver will then send back the result, and it should be either true, false or
     * security-exception.
     * <p>
     * All the constants defined here should be aligned with
     * com.android.cts.launchertests.support.QuietModeCommandReceiver.
     */
    private boolean askLauncherSupportAppToSetQuietMode(boolean enabled, boolean hasFlags, int flags) throws Exception {
        Intent intent = new Intent(""toggle_quiet_mode"");
        intent.setComponent(COMMAND_RECEIVER);
        intent.putExtra(""quiet_mode"", enabled);
        intent.putExtra(Intent.EXTRA_USER, mTargetUser);
        if (hasFlags) {
            intent.putExtra(EXTRA_FLAGS, flags);
        }

        // Ask launcher support app to set quiet mode by sending broadcast.
        LinkedBlockingQueue<String> blockingQueue = new LinkedBlockingQueue<>();
        mContext.sendOrderedBroadcast(intent, null, new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                blockingQueue.offer(getResultData());
            }
        }, null, 0, """", null);

        // Wait for the result.
        String result = null;
        for (int i = 0; i < 10; i++) {
            // Broadcast won't be delivered when the device is sleeping, so wake up the device
            // in between each attempt.
            wakeupDeviceAndUnlock();
            result = blockingQueue.poll(10, TimeUnit.SECONDS);
            if (!TextUtils.isEmpty(result)) {
                break;
            }
        }

        // Parse the result.
        assertNotNull(result);
        if (""true"".equalsIgnoreCase(result)) {
            return true;
        } else if (""false"".equalsIgnoreCase(result)) {
            return false;
        } else if (""security-exception"".equals(result)) {
            throw new SecurityException();
        }
        throw new IllegalStateException(""Unexpected result : "" + result);
    }

    private void startActivitySync(String activity) throws Exception {
        mUiDevice.executeShellCommand(""am start -W -n "" + activity);
    }

    /**
     * Start the launcher activity in the test app to make it foreground.
     */
    private void startLauncherActivityInTestApp() throws Exception {
        startActivitySync(LAUNCHER_ACTIVITY.flattenToString());
    }

    private void setTestAppAsDefaultLauncher() {
        setDefaultLauncher(InstrumentationRegistry.getInstrumentation(),
                LAUNCHER_ACTIVITY.getPackageName());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/QuietModeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testHasLauncherActivityAppHasAppDetailsActivityInjected"	""	"2: system user"	"public void testHasLauncherActivityAppHasAppDetailsActivityInjected() throws Exception {
        assumeNotHeadlessSystemUserMode();

        // HasLauncherActivityApp is installed for duration of this test - make sure
        // it's present on the activity list, has the synthetic activity generated, and it's
        // enabled and exported
        disableLauncherActivity();
        assertActivityInjected(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testGetSetSyntheticAppDetailsActivityEnabled"	""	"2: system user"	"public void testGetSetSyntheticAppDetailsActivityEnabled() throws Exception {
        assumeNotHeadlessSystemUserMode();

        disableLauncherActivity();
        assertActivityInjected(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE);
        PackageManager pm = mContext.getPackageManager();
        try {
            pm.setSyntheticAppDetailsActivityEnabled(mContext.getPackageName(), false);
            fail(""Should not able to change current app's app details activity state"");
        } catch (SecurityException e) {
            // Expected: No permission
        }
        try {
            pm.setSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE, false);
            fail(""Should not able to change other app's app details activity state"");
        } catch (SecurityException e) {
            // Expected: No permission
        }
        mInstrumentation.getUiAutomation().adoptShellPermissionIdentity();
        try {
            assertThat(pm.getSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE))
                    .isTrue();
            // Disable app details activity and assert if the change is applied
            pm.setSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE, false);
            assertThat(pm.getSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE))
                    .isFalse();
            assertInjectedActivityNotFound(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE);
            // Enable app details activity and assert if the change is applied
            pm.setSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE, true);
            assertThat(pm.getSyntheticAppDetailsActivityEnabled(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE))
                    .isTrue();
            assertActivityInjected(HAS_LAUNCHER_ACTIVITY_APP_PACKAGE);
        } finally {
            mInstrumentation.getUiAutomation().dropShellPermissionIdentity();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testNoSystemAppHasSyntheticAppDetailsActivityInjected"	""	"3: system user apps"	"public void testNoSystemAppHasSyntheticAppDetailsActivityInjected() throws Exception {
        Log.d(TAG, ""testNoSystemAppHasSyntheticAppDetailsActivityInjected() for user "" + mUser);
        List<LauncherActivityInfo> activities = mLauncherApps.getActivityList(null, mUser);
        logActivities(activities);
        for (LauncherActivityInfo activity : activities) {
            if (!activity.getUser().equals(mUser)) {
                continue;
            }
            ApplicationInfo appInfo = activity.getApplicationInfo();
            boolean isSystemApp = ((appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0)
                    || ((appInfo.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0);
            if (isSystemApp) {
                // make sure we haven't generated a synthetic app details activity for it
                assertWithMessage(""Found a system app that had a synthetic activity generated,""
                        + "" package name: %s; activity name: %s"",
                        activity.getComponentName().getPackageName(), activity.getName())
                                .that(activity.getName())
                                .isNotEqualTo(SYNTHETIC_APP_DETAILS_ACTIVITY);
            }
        }
    }

    private void disableLauncherActivity() throws IOException {
        runShellCommand(""pm disable --user %d %s"", mUser.getIdentifier(),
                LAUNCHER_ACTIVITY_COMPONENT);
    }

    private void expectSecurityException(ExceptionRunnable action, String failMessage)
            throws Exception {
        try {
            action.run();
            fail(failMessage);
        } catch (SecurityException e) {
            // expected
        }
    }

    private void expectNameNotFoundException(ExceptionRunnable action, String failMessage)
            throws Exception {
        try {
            action.run();
            fail(failMessage);
        } catch (PackageManager.NameNotFoundException e) {
            // expected
        }
    }

    private void assertActivityInjected(String targetPackage) {
        Log.d(TAG, ""Getting activities for package "" + targetPackage + "" on user "" + mUser);
        List<LauncherActivityInfo> activities = mLauncherApps.getActivityList(null, mUser);
        logActivities(activities);

        boolean noLaunchableActivityAppFound = false;
        for (LauncherActivityInfo activity : activities) {
            UserHandle user = activity.getUser();
            if (!user.equals(mUser)) {
                Log.w(TAG, ""Skipping activity "" + toString(activity) + "" from user "" + user);
                continue;
            }
            ComponentName compName = activity.getComponentName();
            if (compName.getPackageName().equals(targetPackage)) {
                noLaunchableActivityAppFound = true;
                // make sure it points to the synthetic app details activity
                assertWithMessage(""name of synthetic app"").that(activity.getName())
                        .isEqualTo(SYNTHETIC_APP_DETAILS_ACTIVITY);
                // make sure it's both exported and enabled
                try {
                    PackageManager pm = mContext.getPackageManager();
                    ActivityInfo ai = pm.getActivityInfo(compName, /* flags= */ 0);
                    assertWithMessage(""component %s enabled"", compName.flattenToShortString())
                            .that(ai.enabled).isTrue();
                    assertWithMessage(""component %s exported"", compName.flattenToShortString())
                            .that(ai.exported).isTrue();
                } catch (NameNotFoundException e) {
                    fail(""Package "" + compName.getPackageName() + "" not found: "" + e);
                }
            }
        }
        assertWithMessage(""user %s has no launchable activity for app %s"", mUser, targetPackage)
                .that(noLaunchableActivityAppFound).isTrue();
    }

    @FunctionalInterface
    public interface ExceptionRunnable {
        void run() throws Exception;
    }

    private UserHandle getUserHandleArgument(String key, Bundle arguments) throws Exception {
        String serial = arguments.getString(key);
        if (serial == null) {
            return null;
        }
        int serialNo = Integer.parseInt(serial);
        return mUserManager.getUserForSerialNumber(serialNo);
    }

    private final class Connection implements ServiceConnection {
        private final Semaphore mSemaphore = new Semaphore(0);

        @Override
        public void onServiceConnected(ComponentName className, IBinder service) {
            mService = new Messenger(service);
            mSemaphore.release();
        }

        @Override
        public void onServiceDisconnected(ComponentName className) {
            mService = null;
        }

        public void waitForService() {
            try {
                if (mSemaphore.tryAcquire(5, TimeUnit.SECONDS)) {
                    return;
                }
            } catch (InterruptedException e) {
            }
            fail(""failed to connec to service"");
        }
    };

    private static final class Result extends Handler {

        private final Semaphore mSemaphore = new Semaphore(0);
        public int result = 0;

        public Result(Looper looper) {
            super(looper);
        }

        @Override
        public void handleMessage(Message msg) {
            if (msg.what == MSG_RESULT) {
                result = msg.arg1;
                mSemaphore.release();
            } else {
                super.handleMessage(msg);
            }
        }

        public int waitForResult() {
            try {
                if (mSemaphore.tryAcquire(120, TimeUnit.SECONDS)) {
                     return result;
                }
            } catch (InterruptedException e) {
            }
            return RESULT_TIMEOUT;
        }
    }

    public final class ActivityLaunchedReceiver extends BroadcastReceiver {
        public static final String ACTIVITY_LAUNCHED_ACTION =
                ""com.android.cts.launchertests.LauncherAppsTests.LAUNCHED_ACTION"";

        private final Semaphore mSemaphore = new Semaphore(0);

        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals(ACTIVITY_LAUNCHED_ACTION)) {
                mSemaphore.release();
            }
        }

        public int waitForActivity() {
            try {
                if (mSemaphore.tryAcquire(5, TimeUnit.SECONDS)) {
                    return RESULT_PASS;
                }
            } catch (InterruptedException e) {
            }
            return RESULT_TIMEOUT;
        }
    }

    private int sendMessageToCallbacksService(int msg, UserHandle user, String packageName)
            throws Throwable {
        Bundle params = new Bundle();
        params.putParcelable(USER_EXTRA, user);
        params.putString(PACKAGE_EXTRA, packageName);

        Message message = Message.obtain(null, msg, params);
        message.replyTo = mResultMessenger;

        mService.send(message);

        return mResult.waitForResult();
    }

    private void assertInjectedActivityNotFound(String targetPackage) {
        Log.d(TAG, ""Searching for package "" + targetPackage + "" on user "" + mUser);
        List<LauncherActivityInfo> activities = mLauncherApps.getActivityList(null, mUser);
        logActivities(activities);
        for (LauncherActivityInfo activity : activities) {
            if (!activity.getUser().equals(mUser)) {
                continue;
            }
            ComponentName compName = activity.getComponentName();
            if (compName.getPackageName().equals(targetPackage)) {
                fail(""Injected activity found: "" + compName.flattenToString());
            }
        }
    }

    private void logActivities(List<LauncherActivityInfo> activities) {
        Log.d(TAG, ""Got "" + activities.size() + "" activities: "" + activities.stream()
                .map((info) -> toString(info))
                .collect(Collectors.toList()));
    }

    private void runShellCommand(String format, Object...args) throws IOException {
        String command = String.format(format, args);
        Log.i(TAG, ""Running command: "" + command);
        String output = SystemUtil.runShellCommand(mInstrumentation, command);
        Log.d(TAG, ""Output: "" + output);
    }

    private String toString(LauncherActivityInfo info) {
        return info == null ? null : info.getComponentName().flattenToShortString();
    }

    private void assumeNotHeadlessSystemUserMode() {
        // On headless system user mode, the current user is a profile owner, and hence
        // the synthetic activity is not listed by LauncherApps.getActivityList()
        assumeFalse(""test skipped on headless system user mode"",
                UserManager.isHeadlessSystemUserMode());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testGetActivitiesForUserFails"	""	"2: user apps"	"public void testGetActivitiesForUserFails() throws Exception {
        expectSecurityException(() -> mLauncherApps.getActivityList(null, mUser),
                ""getActivities for non-profile user failed to throw exception"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testSimpleAppInstalledForUser"	""	"2: user apps"	"public void testSimpleAppInstalledForUser() throws Exception {
        List<LauncherActivityInfo> activities =
                mLauncherApps.getActivityList(null, mUser);
        // Check simple app is there.
        boolean foundSimpleApp = false;
        for (LauncherActivityInfo activity : activities) {
            if (activity.getComponentName().getPackageName().equals(
                    SIMPLE_APP_PACKAGE)) {
                foundSimpleApp = true;
                assertThat(activity.getLoadingProgress()).isWithin(1.0e-10f).of(1.0f);
            }
            assertThat(activity.getUser()).isEqualTo(mUser);
        }
        assertThat(foundSimpleApp).isTrue();

        // Also make sure getApplicationInfo works too.
        ApplicationInfo ai =
                mLauncherApps.getApplicationInfo(SIMPLE_APP_PACKAGE, /* flags= */ 0, mUser);
        assertThat(ai.packageName).isEqualTo(SIMPLE_APP_PACKAGE);
        assertThat(UserHandle.getUserHandleForUid(ai.uid)).isEqualTo(mUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testAccessPrimaryProfileFromManagedProfile"	""	"2: user apps"	"public void testAccessPrimaryProfileFromManagedProfile() throws Exception {
        assertThat(mLauncherApps.getActivityList(null, mUser)).isEmpty();

        expectNameNotFoundException(
                () -> mLauncherApps.getApplicationInfo(SIMPLE_APP_PACKAGE, /* flags= */ 0, mUser),
                ""get applicationInfo failed to throw name not found exception"");
        assertThat(mLauncherApps.isPackageEnabled(SIMPLE_APP_PACKAGE, mUser)).isFalse();

        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://www.android.com/""));
        assertThat(mLauncherApps.resolveActivity(intent, mUser)).isNull();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testGetProfiles_fromMainProfile"	""	"2: user apps"	"public void testGetProfiles_fromMainProfile() {
        List<UserHandle> profiles = mLauncherApps.getProfiles();
        assertThat(profiles).hasSize(2);
        assertThat(profiles).contains(myUserHandle());
        assertThat(profiles).containsExactlyElementsIn(mUserManager.getUserProfiles());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testGetProfiles_fromManagedProfile"	""	"2: user apps"	"public void testGetProfiles_fromManagedProfile() {
        final List<UserHandle> profiles = mLauncherApps.getProfiles();
        assertThat(profiles).containsExactly(myUserHandle());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testPackageAddedCallbackForUser"	""	"1: user"	"public void testPackageAddedCallbackForUser() throws Throwable {
        int result = sendMessageToCallbacksService(MSG_CHECK_PACKAGE_ADDED,
                mUser, SIMPLE_APP_PACKAGE);
        assertThat(result).isEqualTo(RESULT_PASS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testPackageRemovedCallbackForUser"	""	"1: user"	"public void testPackageRemovedCallbackForUser() throws Throwable {
        int result = sendMessageToCallbacksService(MSG_CHECK_PACKAGE_REMOVED,
                mUser, SIMPLE_APP_PACKAGE);
        assertThat(result).isEqualTo(RESULT_PASS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testPackageChangedCallbackForUser"	""	"1: user"	"public void testPackageChangedCallbackForUser() throws Throwable {
        int result = sendMessageToCallbacksService(MSG_CHECK_PACKAGE_CHANGED,
                mUser, SIMPLE_APP_PACKAGE);
        assertThat(result).isEqualTo(RESULT_PASS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testNoPackageAddedCallbackForUser"	""	"1: user"	"public void testNoPackageAddedCallbackForUser() throws Throwable {
        int result = sendMessageToCallbacksService(MSG_CHECK_NO_PACKAGE_ADDED,
                mUser, SIMPLE_APP_PACKAGE);
        assertThat(result).isEqualTo(RESULT_PASS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testLaunchNonExportActivityFails"	""	"2: user apps"	"public void testLaunchNonExportActivityFails() throws Exception {
        expectSecurityException(() -> mLauncherApps.startMainActivity(new ComponentName(
                SIMPLE_APP_PACKAGE, SIMPLE_APP_PACKAGE + "".NonExportedActivity""),
                mUser, null, null),
                ""starting non-exported activity failed to throw exception"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testLaunchNonExportLauncherFails"	""	"2: user apps"	"public void testLaunchNonExportLauncherFails() throws Exception {
        expectSecurityException(() -> mLauncherApps.startMainActivity(new ComponentName(
                SIMPLE_APP_PACKAGE, SIMPLE_APP_PACKAGE + "".NonLauncherActivity""),
                mUser, null, null),
                ""starting non-launcher activity failed to throw exception"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testLaunchMainActivity"	""	"2: user apps"	"public void testLaunchMainActivity() throws Exception {
        ActivityLaunchedReceiver receiver = new ActivityLaunchedReceiver();
        IntentFilter filter = new IntentFilter();
        filter.addAction(ActivityLaunchedReceiver.ACTIVITY_LAUNCHED_ACTION);
        mContext.registerReceiver(receiver, filter);
        ComponentName compName = new ComponentName(SIMPLE_APP_PACKAGE, SIMPLE_APP_PACKAGE
                + "".SimpleActivity"");
        Log.i(TAG, ""Launching "" + compName.flattenToShortString() + "" on user "" + mUser);
        mLauncherApps.startMainActivity(compName, mUser, null, null);
        assertWithMessage(""Activity %s launched for user %s"", compName.flattenToShortString(),
                mUser).that(receiver.waitForActivity()).isEqualTo(RESULT_PASS);
        mContext.unregisterReceiver(receiver);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.launchertests.LauncherAppsTests"	"testReverseAccessNoThrow"	""	"2: user apps"	"public void testReverseAccessNoThrow() throws Exception {
        // Trying to access the main profile from a managed profile -> shouldn't throw but
        // should just return false.
        assertThat(mLauncherApps.isPackageEnabled(""android"", mUser)).isFalse();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/LauncherTests/src/com/android/cts/launchertests/LauncherAppsTests.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.ContentTest"	"testAppPermissionsDontWorkAcrossProfiles"	""	"1: system"	"public void testAppPermissionsDontWorkAcrossProfiles() throws Exception {
        // The FileProvider does not allow to use app permissions. So we need to use another
        // ContentProvider.
        Uri uriGranted = getBasicContentProviderUri(""uri_granted"");
        Uri uriNotGranted = getBasicContentProviderUri(""uri_not_granted"");

        // Granting uriGranted to the receiver
        // Using a persistable permission so that it is kept even after we restart the receiver
        // activity with another intent.
        grantPersistableReadPermission(uriGranted);

        Intent notGrant = new Intent(ACTION_READ_FROM_URI);
        notGrant.setClipData(ClipData.newRawUri("""", uriNotGranted));

        final Intent result = mActivity.getCrossProfileResult(notGrant);
        assertNotNull(result);
        // The receiver did not have permission to read the uri. So it should have caught a security
        // exception.
        assertTrue(result.getBooleanExtra(""extra_caught_security_exception"", false));
    }

    /**
     * Ensure that sender is only able to send data that it has access to.
     */
    // STOPSHIP: enable once b/115619667 is fixed
    public void _testSecurity() throws Exception {
        // Pick a URI that neither of us have access to; it doens't matter if
        // its missing, since we expect a SE before a FNFE.
        final Uri uri = Uri.parse(""content://media/external/images/media/10240"");
        final Intent intent = new Intent(ACTION_READ_FROM_URI);
        intent.setClipData(ClipData.newRawUri("""", uri));
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

        // We're expecting to run into a security exception
        final Intent result = mActivity.getCrossProfileResult(intent);
        if (result == null) {
            // This is fine; probably of a SecurityException when off in the
            // system somewhere.
        } else {
            // But if we somehow came through, make sure they threw.
            assertTrue(result.getBooleanExtra(""extra_caught_security_exception"", false));
        }
    }

    /**
     * Test that an app can notify a uri change across profiles.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.ContentTest"	"testPersistablePermission"	""	"2: user apps"	"public void testPersistablePermission() throws Exception {
        Uri uri = getUriWithTextInFile(""persistable_test"", MESSAGE);
        grantPersistableReadPermission(uri);

        // Now checking if the receiver can read this uri, without re-granting the read permission.
        Intent intent = new Intent(ACTION_READ_FROM_URI);
        intent.setClipData(ClipData.newRawUri("""", uri));

        final Intent result = mActivity.getCrossProfileResult(intent);
        assertNotNull(result);
        assertEquals(MESSAGE, result.getStringExtra(""extra_response""));
    }

    /**
     * The intent receiver will try to read uriNotGranted.
     * Inside the same user, this uri can be read if the receiver has the
     * com.android.cts.managedprofile.permission.SAMPLE permission. But since we cross
     * user-boundaries, it should not be able to (only uri grants work accross users for apps
     * without special permission).
     * We also grant uriGranted to the receiver (this uri belongs to the same content provider as
     * uriNotGranted), to enforce that even if an app has permission to one uri of a
     * ContentProvider, it still cannot access a uri it does not have access to.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.ContentTest"	"testCanObserveAcrossProfiles"	""	"1: apps"	"public void testCanObserveAcrossProfiles() throws Exception {
        final Uri uri = getUriWithTextInFile(""observing_test"", """");
        assertNotNull(uri);
        Intent intent = new Intent(ACTION_OBSERVE_URI_CHANGE);
        intent.setClipData(ClipData.newRawUri("""", uri));
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                mContext.getContentResolver().notifyChange(uri, null);
            }
        }, 5000 /* 5 seconds */);

        // Check that the app in the other profile could be notified of the change.
        // A non-null result intent indicates success.
        assertNotNull(mActivity.getCrossProfileResult(intent));
    }

    private class UriObserver extends ContentObserver {
        private final SynchronousQueue<Uri> mSynchronousQueue;

        public UriObserver(Handler handler) {
           super(handler);
           mSynchronousQueue = new SynchronousQueue<Uri>();
        }

        @Override
        public void onChange(boolean selfChange, Uri uri) {
            super.onChange(selfChange, uri);
            try {
                if (!mSynchronousQueue.offer(uri, 5, TimeUnit.SECONDS)) {
                    Log.e(TAG, ""Failed to offer uri "" + uri + "" to synchronous queue"");
                }
            } catch (InterruptedException e) {
                Log.e(TAG, ""Interrupted while receiving onChange for "" + uri, e);
            }
        }

        private Uri waitForNotify() throws InterruptedException {
            // The uri notification may not come immediately.
            return mSynchronousQueue.poll(30, TimeUnit.SECONDS);
        }
    }

    private void grantPersistableReadPermission(Uri uri) throws Exception {
        Intent grantPersistable = new Intent(ACTION_TAKE_PERSISTABLE_URI_PERMISSION);
        grantPersistable.setClipData(ClipData.newRawUri("""", uri));
        grantPersistable.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION
                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
        mActivity.getCrossProfileResult(grantPersistable);
    }

    private Uri getBasicContentProviderUri(String path) {
        // The uris created here are not associated with any data. But this does not prevent us from
        // granting these uris to other apps, or these apps from trying to access these uris.
        return new Uri.Builder()
                .scheme(ContentResolver.SCHEME_CONTENT)
                .authority(""com.android.cts.intent.sender.provider"")
                .path(path)
                .build();
    }

    private Uri getUriWithTextInFile(String name, String text) {
        String filename = mContext.getFilesDir() + File.separator + ""texts"" + File.separator
                + name + "".txt"";
        Log.i(TAG, ""Creating file "" + filename + "" with text \"""" + text + ""\"""");
        final File file = new File(filename);
        file.getParentFile().mkdirs(); // If the folder doesn't exists it is created
        try {
            FileWriter writer = new FileWriter(file);
            writer.write(text);
            writer.close();
        } catch(IOException e) {
            Log.e(TAG, ""Could not create file "" + filename + "" with text "" + text);
            return null;
        }
        return FileProvider.getUriForFile(mContext, ""com.android.cts.intent.sender.fileprovider"",
                file);
    }

    /**
     * Returns the first line of the file associated with uri.
     */
    private String getFirstLineFromUri(Uri uri) {
        try {
            InputStream is = mContext.getContentResolver().openInputStream(uri);
            BufferedReader r = new BufferedReader(new InputStreamReader(is));
            return r.readLine();
        } catch (IOException e) {
            Log.e(TAG, ""could not read the uri "" + uri);
            return null;
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/ContentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.CopyPasteTest"	"finish"	""	"1: system"	"public void test/*
 *.
 */

package com.android.cts.intent.sender;

import android.content.ClipboardManager;
import android.content.ClipData;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.test.InstrumentationTestCase;
import android.util.Log;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class CopyPasteTest extends InstrumentationTestCase
        implements ClipboardManager.OnPrimaryClipChangedListener {

    private IntentSenderActivity mActivity;
    private ClipboardManager mClipboard;
    private Semaphore mNotified;

    private static String ACTION_COPY_TO_CLIPBOARD = ""com.android.cts.action.COPY_TO_CLIPBOARD"";

    private static String INITIAL_TEXT = ""initial text"";
    private static String NEW_TEXT = ""sample text"";

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        Context context = getInstrumentation().getTargetContext();
        mActivity = launchActivity(context.getPackageName(), IntentSenderActivity.class, null);
        mClipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);
    }

    @Override
    public void tearDown() throws Exception {
        mActivity.finish();
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/CopyPasteTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.SuspendPackageTest"	"isNotNull"	""	"4: system user direct apps"	"public void testpackage com.android.cts.intent.sender;

import static com.google.common.truth.Truth.assertWithMessage;

import android.app.UiAutomation;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Configuration;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.BySelector;
import android.support.test.uiautomator.Direction;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.UiObject2;
import android.support.test.uiautomator.Until;
import android.test.InstrumentationTestCase;
import android.util.Log;

public class SuspendPackageTest extends InstrumentationTestCase {

    private static final String TAG = ""IntentSender.SuspendPackageTest"";

    private static final int WAIT_DIALOG_TIMEOUT_IN_MS = 5000;
    private static final BySelector POPUP_TITLE_WATCH_SELECTOR = By
            .clazz(android.widget.TextView.class.getName())
            .res(""android:id/alertTitle"")
            .pkg(""com.google.android.apps.wearable.settings"");

    private static final BySelector SUSPEND_BUTTON_SELECTOR = By
            .clazz(android.widget.Button.class.getName())
            .res(""android:id/button1"");

    private IntentSenderActivity mActivity;
    private Context mContext;
    private PackageManager mPackageManager;
    private UiAutomation mUiAutomation;

    private static final String INTENT_RECEIVER_PKG = ""com.android.cts.intent.receiver"";
    private static final String TARGET_ACTIVITY_NAME =
            ""com.android.cts.intent.receiver.SimpleIntentReceiverActivity"";

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getInstrumentation().getTargetContext();
        String packageName = mContext.getPackageName();
        int userId = mContext.getUserId();
        Class<IntentSenderActivity> activityClass = IntentSenderActivity.class;
        if (temporarilySkipActivityLaunch()) {
            Log.w(TAG, ""setup(): not launching "" + activityClass + "" on user "" + userId
                    + "" as launcher on automotive doesn't support suspended apps yet"");
        } else {
            Log.d(TAG, ""setup(): launching "" + activityClass + "" on user "" + userId);
            mActivity = launchActivity(packageName, activityClass, null);
            assertWithMessage(""activity %s launched on package %s on user %s"",
                    activityClass, packageName, userId).that(mActivity).isNotNull();
            Log.d(TAG, ""setup(): launched activity "" + mActivity);
        }
        mPackageManager = mContext.getPackageManager();
        mUiAutomation = getInstrumentation().getUiAutomation();
    }

    @Override
    public void tearDown() throws Exception {
        if (mActivity != null) {
            mActivity.finish();
        }
        super.tearDown();
    }

    // TODO(b/182387060): STOPSHIP temporarily hack until CarLauncher supports it
    private boolean temporarilySkipActivityLaunch() {
        return UserManager.isHeadlessSystemUserMode();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.intent.sender.SuspendPackageTest"	"testPackageSuspendedWithPackageManager"	""	"3: system user direct"	"public void testPackageSuspendedWithPackageManager() throws Exception {
        assertPackageSuspended(/* suspended= */ true, /* customDialog= */ true);
    }

    /**
     * Verify that the package is suspended by trying to start the activity inside it. If the
     * package is not suspended, the target activity will return the result.
     */
    private void assertPackageSuspended(boolean suspended, boolean customDialog) throws Exception {
        Intent intent = new Intent();
        intent.setClassName(INTENT_RECEIVER_PKG, TARGET_ACTIVITY_NAME);
        if (!temporarilySkipActivityLaunch()) {
            Intent result = mActivity.getResult(intent);
            Log.d(TAG, ""assertPackageSuspended(suspended="" + suspended
                    + "", customDialog="" + customDialog + ""): result for activity ""
                    + INTENT_RECEIVER_PKG + ""/"" + TARGET_ACTIVITY_NAME + "" on user ""
                    + mContext.getUserId() + "": "" + result);
            if (suspended) {
                if (customDialog) {
                    dismissCustomDialog();
                } else {
                    dismissPolicyTransparencyDialog();
                }
                assertWithMessage(""result for activitiy %s while suspended"", intent).that(result)
                        .isNull();
            } else {
                assertWithMessage(""result for activitiy %s while NOT suspended"", intent)
                        .that(result).isNotNull();
            }
        }
        // No matter if it is suspended or not, we should be able to resolve the activity.
        ResolveInfo resolveInfo = mPackageManager.resolveActivity(intent, /* flags= */ 0);
        assertWithMessage(""ResolveInfo for activity %s"", intent).that(resolveInfo).isNotNull();
        Log.d(TAG, ""ResolveInfo: "" + resolveInfo);
    }

    /**
     * Wait for the policy transparency dialog and dismiss it.
     */
    private void dismissPolicyTransparencyDialog() {
        final UiDevice device = UiDevice.getInstance(getInstrumentation());
        if (isWatch()) {
            device.wait(Until.hasObject(POPUP_TITLE_WATCH_SELECTOR), WAIT_DIALOG_TIMEOUT_IN_MS);
            final UiObject2 title = device.findObject(POPUP_TITLE_WATCH_SELECTOR);
            assertWithMessage(""Policy transparency dialog title"").that(title).isNotNull();
            title.swipe(Direction.RIGHT, 1.0f);
        } else {
            device.wait(Until.hasObject(getPopUpImageSelector()), WAIT_DIALOG_TIMEOUT_IN_MS);
            final UiObject2 icon = device.findObject(getPopUpImageSelector());
            assertWithMessage(""Policy transparency dialog icon"").that(icon).isNotNull();
            // ""OK"" button only present in the dialog if it is blocked by policy.
            final UiObject2 button = device.findObject(getPopUpButtonSelector());
            assertWithMessage(""OK button"").that(button).isNotNull();
            button.click();
        }
    }

    private void dismissCustomDialog() {
        final UiDevice device = UiDevice.getInstance(getInstrumentation());
        device.wait(Until.hasObject(SUSPEND_BUTTON_SELECTOR), WAIT_DIALOG_TIMEOUT_IN_MS);

        final UiObject2 button = device.findObject(SUSPEND_BUTTON_SELECTOR);
        assertWithMessage(""OK button"").that(button).isNotNull();
    }

    private boolean isWatch() {
        return (getInstrumentation().getContext().getResources().getConfiguration().uiMode
                & Configuration.UI_MODE_TYPE_MASK) == Configuration.UI_MODE_TYPE_WATCH;
    }

    private String getSettingsPackageName() {
        String settingsPackageName = ""com.android.settings"";
        try {
            mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");
            ResolveInfo resolveInfo = mPackageManager.resolveActivityAsUser(
                    new Intent(Settings.ACTION_SETTINGS), PackageManager.MATCH_SYSTEM_ONLY,
                    UserHandle.USER_SYSTEM);
            if (resolveInfo != null && resolveInfo.activityInfo != null) {
                settingsPackageName = resolveInfo.activityInfo.packageName;
            }
        } finally {
            mUiAutomation.dropShellPermissionIdentity();
        }
        return settingsPackageName;
    }

    private BySelector getPopUpButtonSelector() {
        return By.clazz(android.widget.Button.class.getName())
                .res(""android:id/button1"")
                .pkg(getSettingsPackageName());
    }

    private BySelector getPopUpImageSelector() {
        final String settingsPackageName = getSettingsPackageName();
        return By.clazz(android.widget.ImageView.class.getName())
                .res(settingsPackageName + "":id/admin_support_icon"")
                .pkg(settingsPackageName);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/IntentSender/src/com/android/cts/intent/sender/SuspendPackageTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testDisallowPrivateDnsConfigurationRestriction"	""	"1: user"	"public void testDisallowPrivateDnsConfigurationRestriction() {
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, true);
        assertThat(mUserManager.hasUserRestriction(
                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testClearDisallowPrivateDnsConfigurationRestriction"	""	"1: user"	"public void testClearDisallowPrivateDnsConfigurationRestriction() {
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, false);
        assertThat(mUserManager.hasUserRestriction(
                UserManager.DISALLOW_CONFIG_PRIVATE_DNS)).isFalse();
    }

    private void setUserRestriction(String restriction, boolean add) {
        if (add) {
            mDevicePolicyManager.addUserRestriction(getWho(), restriction);
        } else {
            mDevicePolicyManager.clearUserRestriction(getWho(), restriction);
        }
    }

    /**
     * Call DevicePolicyManager.setGlobalPrivateDnsModeOpportunistic, expecting the result code
     * expectedResult.
     */
    private void callSetGlobalPrivateDnsOpportunisticModeExpectingResult(int expectedResult) {
        int resultCode = mDevicePolicyManager.setGlobalPrivateDnsModeOpportunistic(getWho());

        assertEquals(
                String.format(
                        ""Call to setGlobalPrivateDnsModeOpportunistic ""
                                + ""should have produced result %d, but was %d"",
                        expectedResult, resultCode),
                expectedResult, resultCode);
    }

    /**
     * Call DevicePolicyManager.setGlobalPrivateDnsModeSpecifiedHost with the given host, expecting
     * the result code expectedResult.
     */
    private void callSetGlobalPrivateDnsHostModeExpectingResult(String privateDnsHost,
            int expectedResult) {
        int resultCode = mDevicePolicyManager.setGlobalPrivateDnsModeSpecifiedHost(
                getWho(), privateDnsHost);

        assertEquals(
                String.format(
                        ""Call to setGlobalPrivateDnsModeSpecifiedHost with host %s ""
                                + ""should have produced result %d, but was %d"",
                        privateDnsHost, expectedResult, resultCode),
                expectedResult, resultCode);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.PrivateDnsPolicyTest"	"testCanSetModeDespiteUserRestriction"	""	"1: user"	"public void testCanSetModeDespiteUserRestriction() {
        // First set a specific host and assert that applied.
        callSetGlobalPrivateDnsHostModeExpectingResult(
                VALID_PRIVATE_DNS_HOST,
                DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);
        assertThat(
                mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(
                PRIVATE_DNS_MODE_PROVIDER_HOSTNAME);

        // Set a user restriction
        setUserRestriction(UserManager.DISALLOW_CONFIG_PRIVATE_DNS, true);

        // Next, set the mode to automatic and confirm that has applied.
        callSetGlobalPrivateDnsOpportunisticModeExpectingResult(
                DevicePolicyManager.PRIVATE_DNS_SET_NO_ERROR);

        assertThat(
                mDevicePolicyManager.getGlobalPrivateDnsMode(getWho())).isEqualTo(
                PRIVATE_DNS_MODE_OPPORTUNISTIC);
        assertThat(mDevicePolicyManager.getGlobalPrivateDnsHost(getWho())).isNull();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PrivateDnsPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testOppDisabledWhenRestrictionSet"	""	"2: system user"	"public void testOppDisabledWhenRestrictionSet() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // First verify DISALLOW_BLUETOOTH.
        testOppDisabledWhenRestrictionSet(UserManager.DISALLOW_BLUETOOTH);
        // Verify DISALLOW_BLUETOOTH_SHARING which leaves bluetooth workable but the sharing
        // component should be disabled.
        testOppDisabledWhenRestrictionSet(UserManager.DISALLOW_BLUETOOTH_SHARING);
    }

    /** Verifies that a given restriction disables the bluetooth sharing component. */
    private void testOppDisabledWhenRestrictionSet(String restriction) {
        // Add the user restriction.
        mDevicePolicyManager.addUserRestriction(getWho(), restriction);

        // The BluetoothOppLauncherActivity's component should be disabled.
        assertComponentStateAfterTimeout(
                OPP_LAUNCHER_COMPONENT, PackageManager.COMPONENT_ENABLED_STATE_DISABLED);

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(getWho(), restriction);

        // The BluetoothOppLauncherActivity's component should be in the default state.
        assertComponentStateAfterTimeout(
                OPP_LAUNCHER_COMPONENT, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);
    }

    /** Helper to turn BT off.
     * This method will either fail on an assert, or return with BT turned off.
     * Behavior of getState() and isEnabled() are validated along the way.
     */
    private void disable() {
        // Can't disable a bluetooth adapter that does not exist.
        if (mBluetoothAdapter == null)
            return;

        sleep(CHECK_WAIT_TIME_MS);
        if (mBluetoothAdapter.getState() == BluetoothAdapter.STATE_OFF) {
            assertFalse(mBluetoothAdapter.isEnabled());
            return;
        }

        assertEquals(BluetoothAdapter.STATE_ON, mBluetoothAdapter.getState());
        assertTrue(mBluetoothAdapter.isEnabled());
        mBluetoothAdapter.disable();
        assertDisabledAfterTimeout();
    }

    /**
     * Helper method which waits for Bluetooth to be disabled. Fails if it doesn't happen in a
     * given time.
     */
    private void assertDisabledAfterTimeout() {
        boolean turnOff = false;
        final long timeout = SystemClock.elapsedRealtime() + DISABLE_TIMEOUT_MS;
        while (SystemClock.elapsedRealtime() < timeout) {
            int state = mBluetoothAdapter.getState();
            switch (state) {
            case BluetoothAdapter.STATE_OFF:
                assertFalse(mBluetoothAdapter.isEnabled());
                return;
            default:
                if (state != BluetoothAdapter.STATE_ON || turnOff) {
                    assertEquals(BluetoothAdapter.STATE_TURNING_OFF, state);
                    turnOff = true;
                }
                break;
            }
            sleep(POLL_TIME_MS);
        }
        fail(""disable() timeout"");
    }

    private void assertComponentStateAfterTimeout(ComponentName component, int expectedState) {
        final long timeout = SystemClock.elapsedRealtime() + COMPONENT_STATE_TIMEOUT_MS;
        int state = -1;
        while (SystemClock.elapsedRealtime() < timeout) {
            state = mPackageManager.getComponentEnabledSetting(component);
            if (expectedState == state) {
                // Success
                return;
            }
            sleep(POLL_TIME_MS);
        }
        fail(""The state of "" + component + "" should have been "" + expectedState + "", it but was ""
                + state + "" after timeout."");
    }

    /** Helper to turn BT on.
     * This method will either fail on an assert, or return with BT turned on.
     * Behavior of getState() and isEnabled() are validated along the way.
     */
    private void enable() {
        // Can't enable a bluetooth adapter that does not exist.
        if (mBluetoothAdapter == null)
            return;

        sleep(CHECK_WAIT_TIME_MS);
        if (mBluetoothAdapter.getState() == BluetoothAdapter.STATE_ON) {
            assertTrue(mBluetoothAdapter.isEnabled());
            return;
        }

        assertEquals(BluetoothAdapter.STATE_OFF, mBluetoothAdapter.getState());
        assertFalse(mBluetoothAdapter.isEnabled());
        mBluetoothAdapter.enable();
        assertEnabledAfterTimeout();
    }

    /**
     * Helper method which waits for Bluetooth to be enabled. Fails if it doesn't happen in a given
     * time.
     */
    private void assertEnabledAfterTimeout() {
        boolean turnOn = false;
        final long timeout = SystemClock.elapsedRealtime() + ENABLE_TIMEOUT_MS;
        while (SystemClock.elapsedRealtime() < timeout) {
            int state = mBluetoothAdapter.getState();
            switch (state) {
            case BluetoothAdapter.STATE_ON:
                assertTrue(mBluetoothAdapter.isEnabled());
                return;
            default:
                if (state != BluetoothAdapter.STATE_OFF || turnOn) {
                    assertEquals(BluetoothAdapter.STATE_TURNING_ON, state);
                    turnOn = true;
                }
                break;
            }
            sleep(POLL_TIME_MS);
        }
        fail(""enable() timeout"");
    }

    private static void sleep(long t) {
        try {
            Thread.sleep(t);
        } catch (InterruptedException e) {}
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testEnableBluetoothFailsWhenDisallowed"	""	"1: user"	"public void testEnableBluetoothFailsWhenDisallowed() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Make sure Bluetooth is initially disabled.
        disable();

        // Add the user restriction disallowing Bluetooth.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that enabling Bluetooth fails.
        assertFalse(mBluetoothAdapter.enable());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testBluetoothGetsDisabledAfterRestrictionSet"	""	"1: user"	"public void testBluetoothGetsDisabledAfterRestrictionSet() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Make sure Bluetooth is enabled first.
        enable();

        // Add the user restriction to disallow Bluetooth.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that Bluetooth gets disabled as a result.
        assertDisabledAfterTimeout();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.BluetoothRestrictionTest"	"testEnableBluetoothSucceedsAfterRestrictionRemoved"	""	"1: user"	"public void testEnableBluetoothSucceedsAfterRestrictionRemoved() throws Exception {
        if (mBluetoothAdapter == null) {
            return;
        }

        // Add the user restriction.
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Make sure Bluetooth is disabled.
        assertDisabledAfterTimeout();

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(getWho(), UserManager.DISALLOW_BLUETOOTH);

        // Check that it is possible to enable Bluetooth again once the restriction has been
        // removed.
        enable();
    }

    /**
     * Tests that BluetoothOppLauncherActivity gets disabled when Bluetooth itself or Bluetooth
     * sharing is disallowed.
     *
     * <p> It also checks the state of the activity is set back to default if Bluetooth is not
     * disallowed anymore.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/BluetoothRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SetTimeTest"	"currentTimeMillis"	""	"1: system"	"public void test/*
 *.
 */
package com.android.cts.deviceowner;

import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.provider.Settings;

import java.util.Calendar;
import java.util.TimeZone;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Test {@link DevicePolicyManager#setTime} and @link {DevicePolicyManager#setTimeZone}
 */
public class SetTimeTest extends BaseDeviceOwnerTest {

    private static final long TEST_TIME_1 = 10000000;
    private static final long TEST_TIME_2 = 100000000;
    private static final String TEST_TIME_ZONE_1 = ""America/New_York"";
    private static final String TEST_TIME_ZONE_2 = ""America/Los_Angeles"";
    private static final long TIMEOUT_SEC = 60;

    // Real world time to restore after the test.
    private long mStartTimeWallClockMillis;
    // Elapsed time to measure time taken by the test.
    private long mStartTimeElapsedNanos;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        saveTime();
    }

    @Override
    protected void tearDown() throws Exception {
        restoreTime();
        super.tearDown();
    }

    private void testSetTimeWithValue(long testTime) throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_TIME_CHANGED));

        try {
            assertTrue(""failed to set time"", mDevicePolicyManager.setTime(getWho(), testTime));
            assertTrue(""timed out waiting for time change broadcast"",
                latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));
            assertTrue(""time is different from what was set"",
                System.currentTimeMillis() <= testTime + (TIMEOUT_SEC + 1) * 1000);
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SetTimeTest"	"testSetTimeZoneFailWithAutoTimezoneOn"	""	"1: system"	"public void testSetTimeZoneFailWithAutoTimezoneOn() {
        mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""1"");
        assertFalse(mDevicePolicyManager.setTimeZone(getWho(), TEST_TIME_ZONE_1));
    }

    private void saveTime() {
        mStartTimeWallClockMillis = System.currentTimeMillis();
        mStartTimeElapsedNanos = System.nanoTime();
    }

    private void restoreTime() {
        mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""0"");

        final long estimatedNow = mStartTimeWallClockMillis +
                TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);
        mDevicePolicyManager.setTime(getWho(), estimatedNow);

        mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""1"");

    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.WifiConfigLockdownTest"	"testRegularAppCannotRemoveDeviceOwnerConfig"	""	"1: user"	"public void testRegularAppCannotRemoveDeviceOwnerConfig() throws Exception {
        List<WifiConfiguration> configs = mWifiConfigCreator.getConfiguredNetworks();
        logConfigs(""testRegularAppCannotUpdateDeviceOwnerConfig()"", configs);
        int removeCount = 0;
        for (WifiConfiguration config : configs) {
            Log.d(TAG, ""testRegularAppCannotRemoveDeviceOwnerConfig(): testing "" + config.SSID);
            if (areMatchingSsids(ORIGINAL_DEVICE_OWNER_SSID, config.SSID)) {
                startRegularActivity(ACTION_REMOVE_WIFI_CONFIG, config.networkId,
                        null, SECURITY_TYPE_NONE, null);
                ++removeCount;
            }
        }

        // There might be auto-upgrade configs returned.
        assertWithMessage(""number of removed configs (the DO created one)"")
                .that(removeCount).isAtLeast(1);

        // Assert nothing has changed
        configs = mWifiConfigCreator.getConfiguredNetworks();
        int notChangedCount = 0;
        for (WifiConfiguration config : configs) {
            Log.d(TAG, ""testRegularAppCannotRemoveDeviceOwnerConfig(): testing "" + config.SSID);
            if (areMatchingSsids(ORIGINAL_DEVICE_OWNER_SSID, config.SSID)) {
                ++notChangedCount;
            }
        }
        // There might be auto-upgrade configs returned.
        assertWithMessage(""number of unchanged configs"").that(notChangedCount).isAtLeast(1);
    }

    private void startRegularActivity(String action, int netId, String ssid, int securityType,
            String password) throws InterruptedException {
        Intent createRegularConfig = new Intent(action);
        createRegularConfig.putExtra(EXTRA_NETID, netId);
        createRegularConfig.putExtra(EXTRA_SSID, ssid);
        createRegularConfig.putExtra(EXTRA_SECURITY_TYPE, securityType);
        createRegularConfig.putExtra(EXTRA_PASSWORD, password);
        createRegularConfig.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Log.d(TAG, ""Starting "" + action  + "" on user "" + mContext.getUserId());
        mContext.startActivity(createRegularConfig);

        // Give some time for the other app to finish the action
        Log.d(TAG, ""Sleeping 5s"");
        Thread.sleep(5000);
    }

    private boolean areMatchingSsids(String s1, String s2) {
        if (s1 == null || s2 == null) {
            return false;
        }
        return s1.replace(""\"""", """").equals(s2.replace(""\"""", """"));
    }

    private void logConfigs(String prefix, List<WifiConfiguration> configs) {
        if (configs == null) {
            Log.d(TAG, prefix + "": null configs"");
            return;
        }
        Log.d(TAG, prefix + "": "" + configs.size() + "" configs: ""
                + configs.stream().map((c) -> c.SSID).collect(Collectors.toList()));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiConfigLockdownTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AffiliationTest"	"testSetAffiliationId2"	""	"1: user"	"public void testSetAffiliationId2() throws Exception {
        setAffiliationIds(Collections.singleton(""id.number.2""));
    }

    private void setAffiliationIds(Set<String> ids) throws Exception {
        try {
            Log.d(TAG, ""setAffiliationIds("" + ids + "") on user "" + mUserId);
            mDevicePolicyManager.setAffiliationIds(mAdminComponent, ids);
            Set<String> setIds = mDevicePolicyManager.getAffiliationIds(mAdminComponent);
            Log.d(TAG, ""getAffiliationIds(): "" + setIds);
            assertWithMessage(""affiliationIds on user %s"", mUserId).that(setIds)
                    .containsExactlyElementsIn(ids);
        } catch (Exception e) {
            Log.e(TAG, ""Failed to set affiliation ids ("" + ids + "")"", e);
            throw e;
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AffiliationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.HardwarePropertiesManagerTest"	"testHardwarePropertiesManager"	""	"2: system apps"	"public void testHardwarePropertiesManager() throws InterruptedException,
            SecurityException {
        HardwarePropertiesManager hm = TestAppSystemServiceFactory
                .getHardwarePropertiesManager(getContext(), BasicAdminReceiver.class);

        float[] oldFanSpeeds = hm.getFanSpeeds();

        float[] cpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] cpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] cpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] gpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] gpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] gpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] batteryTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] batteryThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] batteryShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] skinTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] skinThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] skinShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        CpuUsageInfo[] oldCpuUsages = hm.getCpuUsages();

        checkFanSpeeds(oldFanSpeeds);
        checkTemps(cpuTemps, cpuThrottlingThresholds, cpuShutdownThresholds);
        checkTemps(gpuTemps, gpuThrottlingThresholds, gpuShutdownThresholds);
        checkTemps(batteryTemps, batteryThrottlingThresholds, batteryShutdownThresholds);
        checkTemps(skinTemps, skinThrottlingThresholds, skinShutdownThresholds);
        checkCpuUsages(oldCpuUsages);

        for (int i = 0; i < MONITORING_ITERATION_NUMBER; i++) {
            Thread.sleep(SLEEP_TIME);

            float[] fanSpeeds = hm.getFanSpeeds();
            cpuTemps = hm.getDeviceTemperatures(
                    HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                    HardwarePropertiesManager.TEMPERATURE_CURRENT);
            gpuTemps = hm.getDeviceTemperatures(
                    HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                    HardwarePropertiesManager.TEMPERATURE_CURRENT);
            batteryTemps = hm.getDeviceTemperatures(
                    HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                    HardwarePropertiesManager.TEMPERATURE_CURRENT);
            skinTemps = hm.getDeviceTemperatures(
                    HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                    HardwarePropertiesManager.TEMPERATURE_CURRENT);
            CpuUsageInfo[] cpuUsages = hm.getCpuUsages();

            checkFanSpeeds(fanSpeeds);
            checkTemps(cpuTemps, cpuThrottlingThresholds, cpuShutdownThresholds);
            checkTemps(gpuTemps, gpuThrottlingThresholds, gpuShutdownThresholds);
            checkTemps(batteryTemps, batteryThrottlingThresholds, batteryShutdownThresholds);
            checkTemps(skinTemps, skinThrottlingThresholds, skinShutdownThresholds);
            checkCpuUsages(cpuUsages);

            // No need to compare length of old and new temperature arrays:
            // they are compared through throttling and shutdown threshold arrays lengths.
            checkFanSpeeds(fanSpeeds, oldFanSpeeds);
            checkCpuUsages(cpuUsages, oldCpuUsages);

            oldFanSpeeds = fanSpeeds;
            oldCpuUsages = cpuUsages;
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HardwarePropertiesManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeTurnedOffWhenRestrictionSet"	""	"1: user"	"public void testAirplaneModeTurnedOffWhenRestrictionSet() throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        // Using array so that it can be modified in broadcast receiver.
        boolean value[] = new boolean[1];
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                value[0] = intent.getBooleanExtra(""state"", true);
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));

        try {
            Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);
            mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);
            assertTrue(latch.await(TIMEOUT_SEC, TimeUnit.SECONDS));
            assertFalse(value[0]);
            assertEquals(0, Settings.Global.getInt(
                    mContext.getContentResolver(), Settings.Global.AIRPLANE_MODE_ON));
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AirplaneModeRestrictionTest"	"testAirplaneModeCannotBeTurnedOnWithRestrictionOn"	""	"1: user"	"public void testAirplaneModeCannotBeTurnedOnWithRestrictionOn()
            throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_AIRPLANE_MODE);
        Thread.sleep(SLEEP_MS);
        Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, 1);
        assertEquals(0, Settings.Global.getInt(
                mContext.getContentResolver(), AIRPLANE_MODE_ON));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AirplaneModeRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_GetSecondaryUsers"	""	"2: system user"	"public void testCreateAndManageUser_GetSecondaryUsers() throws Exception {
        UserHandle newUserHandle = createAndManageUser();

        List<UserHandle> secondaryUsers = mDevicePolicyManager.getSecondaryUsers(getWho());
        if (isHeadlessSystemUserMode()) {
            assertWithMessage(""secondary users"").that(secondaryUsers)
                .containsExactly(getCurrentUser(), newUserHandle);
        } else {
            assertWithMessage(""secondary users"").that(secondaryUsers)
                    .containsExactly(newUserHandle);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_Ephemeral"	""	"3: system user apps"	"public void testCreateAndManageUser_Ephemeral() throws Exception {
        runCrossUserVerification(DevicePolicyManager.MAKE_USER_EPHEMERAL, ""assertEphemeralUser"");
        PrimaryUserService.assertCrossUserCallArrived();
    }

    @SuppressWarnings(""unused"")
    private static void assertAllSystemAppsInstalled(Context context,
            DevicePolicyManager devicePolicyManager, ComponentName componentName,
            Set<String> preInstalledSystemPackages) {
        Log.d(TAG, ""assertAllSystemAppsInstalled(): checking apps for user "" + context.getUserId());

        PackageManager packageManager = context.getPackageManager();
        // First get a set of installed package names
        Set<String> installedPackageNames = packageManager
                .getInstalledApplications(/* flags= */ 0)
                .stream()
                .map(applicationInfo -> applicationInfo.packageName)
                .collect(Collectors.toSet());
        // Then filter all package names by those that are not installed
        Set<String> uninstalledPackageNames = packageManager
                .getInstalledApplications(PackageManager.MATCH_UNINSTALLED_PACKAGES)
                .stream()
                .map(applicationInfo -> applicationInfo.packageName)
                .filter(((Predicate<String>) installedPackageNames::contains).negate())
                .collect(Collectors.toSet());

        // Finally, filter out packages that are not pre-installed for the user
        Iterator<String> iterator = uninstalledPackageNames.iterator();
        while (iterator.hasNext()) {
            String pkg = iterator.next();
            if (!preInstalledSystemPackages.contains(pkg)) {
                Log.i(TAG, ""assertAllSystemAppsInstalled(): ignoring package "" + pkg
                        + "" as it's not pre-installed on current user"");
                iterator.remove();
            }
        }

        // Assert that all expected apps are installed
        assertWithMessage(""uninstalled system apps"").that(uninstalledPackageNames).isEmpty();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LeaveAllSystemApps"	""	"3: system user apps"	"public void testCreateAndManageUser_LeaveAllSystemApps() throws Exception {
        int currentUserId = ActivityManager.getCurrentUser();
        // TODO: instead of hard-coding the user type, calling getPreInstallableSystemPackages(),
        // and passing the packages to runCrossUserVerification() / assertAllSystemAppsInstalled(),
        // ideally the later should call um.getPreInstallableSystemPackages(um.getUsertype())
        // (where um is the UserManager with the context of the newly created user),
        // but currently the list of pre-installed apps is passed to the new user in the bundle.
        // Given that these tests will be refactored anyways, it's not worth to try to change it.
        String newUserType = UserManager.USER_TYPE_FULL_SECONDARY;
        Set<String> preInstalledSystemPackages = SystemUtil.callWithShellPermissionIdentity(
                () -> UserManager.get(mContext).getPreInstallableSystemPackages(newUserType));
        if (preInstalledSystemPackages != null) {
            Log.d(TAG, preInstalledSystemPackages.size() + "" pre-installed system apps for ""
                    + ""new user of type "" + newUserType + "": "" + preInstalledSystemPackages);
        } else {
            Log.d(TAG, ""no pre-installed system apps allowlist for new user of type"" + newUserType);
        }

        runCrossUserVerification(/* callback= */ null,
                DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED, ""assertAllSystemAppsInstalled"",
                preInstalledSystemPackages);
        PrimaryUserService.assertCrossUserCallArrived();
    }

    private UserHandle runCrossUserVerification(int createAndManageUserFlags, String methodName)
            throws Exception {
        return runCrossUserVerification(/* callback= */ null, createAndManageUserFlags, methodName,
                /* currentUserPackages= */ null);
    }

    private UserHandle runCrossUserVerification(UserActionCallback callback,
            int createAndManageUserFlags, String methodName,
            Set<String> currentUserPackages) throws Exception {
        Log.d(TAG, ""runCrossUserVerification(): flags="" + createAndManageUserFlags
                + "", method="" + methodName);
        String testUserName = ""TestUser_"" + System.currentTimeMillis();

        // Set affiliation id to allow communication.
        mDevicePolicyManager.setAffiliationIds(getWho(), Collections.singleton(AFFILIATION_ID));

        ComponentName profileOwner = SecondaryUserAdminReceiver.getComponentName(getContext());

        // Pack the affiliation id in a bundle so the secondary user can get it.
        PersistableBundle bundle = new PersistableBundle();
        bundle.putString(EXTRA_AFFILIATION_ID, AFFILIATION_ID);
        bundle.putString(EXTRA_METHOD_NAME, methodName);
        if (currentUserPackages != null) {
            String[] array = new String[currentUserPackages.size()];
            currentUserPackages.toArray(array);
            bundle.putStringArray(EXTRA_CURRENT_USER_PACKAGES, array);
        }

        Log.d(TAG, ""creating user with PO "" + profileOwner);

        UserHandle userHandle = createAndManageUser(profileOwner, bundle, createAndManageUserFlags);
        if (callback != null) {
            startUserInBackgroundAndWaitForBroadcasts(callback, userHandle);
        } else {
            startUserInBackgroundAndWaitForBroadcasts(userHandle);
        }
        return userHandle;
    }

    // createAndManageUser should circumvent the DISALLOW_ADD_USER restriction"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testUserAddedOrRemovedBroadcasts"	""	"2: system user"	"public void testUserAddedOrRemovedBroadcasts() throws Exception {
        UserHandle userHandle = createAndManageUser();

        List<UserHandle> userHandles = removeUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(userHandles).containsExactly(userHandle);
    }

    private UserHandle createAndManageUser() throws Exception {
        return createAndManageUser(/* flags= */ 0);
    }

    private UserHandle createAndManageUser(int flags) throws Exception {
        return createAndManageUser(/* profileOwner= */ getWho(), /* adminExtras= */ null, flags);
    }

    private UserHandle createAndManageUser(ComponentName profileOwner,
            PersistableBundle adminExtras, int flags) throws Exception {
        String testUserName = ""TestUser_"" + System.currentTimeMillis();

        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(), BasicAdminReceiver.ACTION_USER_ADDED);

        UserHandle userHandle = callback.callAndUnregisterSelf(() ->
                mDevicePolicyManager.createAndManageUser(
                        /* admin= */ getWho(),
                        testUserName,
                        profileOwner,
                        adminExtras,
                        flags));
        Log.d(TAG, ""User '"" + testUserName + ""' created: "" + userHandle);
        return userHandle;
    }

    /**
     * Switches to the given user, or fails if the user could not be switched or if the expected
     * broadcasts were not received in time.
     *
     * @return users received in the broadcasts
     */
    private List<UserHandle> switchUserAndWaitForBroadcasts(UserHandle userHandle)
            throws Exception {
        Log.d(TAG, ""Switching to user "" + userHandle);

        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STARTED, BasicAdminReceiver.ACTION_USER_SWITCHED);

        callback.runAndUnregisterSelf(() -> {
            boolean switched = mDevicePolicyManager.switchUser(getWho(), userHandle);
            assertWithMessage(""switched to user %s"", userHandle).that(switched).isTrue();
        });
        return callback.getUsersOnReceivedBroadcasts();
    }

    /**
     * Removes the given user, or fails if the user could not be removed or if the expected
     * broadcasts were not received in time.
     *
     * @return users received in the broadcasts
     */
    private List<UserHandle> removeUserAndWaitForBroadcasts(UserHandle userHandle)
            throws Exception {
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(), BasicAdminReceiver.ACTION_USER_REMOVED);

        callback.runAndUnregisterSelf(() -> {
            boolean removed = mDevicePolicyManager.removeUser(getWho(), userHandle);
            assertWithMessage(""removed user %s"", userHandle).that(removed).isTrue();
        });

        return callback.getUsersOnReceivedBroadcasts();
    }

    private static String userOperationResultToString(int result) {
        return DebugUtils.constantToString(UserManager.class, ""USER_OPERATION_"", result);
    }

    private static void assertUserOperationResult(int actualResult, int expectedResult,
            String operationFormat, Object... operationArgs) {
        String operation = String.format(operationFormat, operationArgs);
        assertWithMessage(""result for %s (%s instead of %s)"", operation,
                userOperationResultToString(actualResult),
                userOperationResultToString(expectedResult))
                        .that(actualResult).isEqualTo(expectedResult);
    }

    private void startUserInBackgroundAndCheckResult(UserHandle userHandle, int expectedResult) {
        int actualResult = mDevicePolicyManager.startUserInBackground(getWho(), userHandle);
        assertUserOperationResult(actualResult, expectedResult, ""starting user %s in background"",
                userHandle);
    }

    /**
     * Starts the given user in background, or fails if the user could not be started or if the
     * expected broadcasts were not received in time.
     *
     * @return users received in the broadcasts
     */
    private List<UserHandle> startUserInBackgroundAndWaitForBroadcasts(UserHandle userHandle)
            throws Exception {
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(), BasicAdminReceiver.ACTION_USER_STARTED);
        return startUserInBackgroundAndWaitForBroadcasts(callback, userHandle);
    }

    private List<UserHandle> startUserInBackgroundAndWaitForBroadcasts(UserActionCallback callback,
            UserHandle userHandle) throws Exception {
        callback.runAndUnregisterSelf(() -> startUserInBackgroundAndCheckResult(userHandle,
                UserManager.USER_OPERATION_SUCCESS));
        return callback.getUsersOnReceivedBroadcasts();
    }

    private void stopUserAndCheckResult(UserHandle userHandle, int expectedResult) {
        int actualResult = mDevicePolicyManager.stopUser(getWho(), userHandle);
        assertUserOperationResult(actualResult, expectedResult, ""stopping user %s"", userHandle);
    }

    /**
     * Stops the given user, or fails if the user could not be stop or if the expected broadcasts
     * were not received in time.
     *
     * @return users received in the broadcasts
     */
    private List<UserHandle> stopUserAndWaitForBroadcasts(UserHandle userHandle) throws Exception {
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(), BasicAdminReceiver.ACTION_USER_STOPPED);
        callback.runAndUnregisterSelf(
                () -> stopUserAndCheckResult(userHandle, UserManager.USER_OPERATION_SUCCESS));
        return callback.getUsersOnReceivedBroadcasts();
    }

    public static final class PrimaryUserService extends Service {
        private static final Semaphore sSemaphore = new Semaphore(0);
        private static String sError = null;

        private final ICrossUserService.Stub mBinder = new ICrossUserService.Stub() {
            public void onEnabledCalled(String error) {
                Log.d(TAG, ""PrimaryUserService.onEnabledCalled() on user ""
                        + getApplicationContext().getUserId() + "" with error "" + error);
                sError = error;
                sSemaphore.release();
            }
        };

        @Override
        public IBinder onBind(Intent intent) {
            Log.d(TAG, ""PrimaryUserService.onBind() on user ""
                    + getApplicationContext().getUserId() + "": "" + intent);
            return mBinder;
        }

        static void assertCrossUserCallArrived() throws Exception {
            assertWithMessage(""cross-user call arrived in %ss"", ON_ENABLED_TIMEOUT_SECONDS)
                    .that(sSemaphore.tryAcquire(ON_ENABLED_TIMEOUT_SECONDS, TimeUnit.SECONDS))
                    .isTrue();
            if (sError != null) {
                Log.e(TAG, ""assertCrossUserCallArrived() had error: "" + sError);
                throw new Exception(sError);
            }
        }
    }

    public static final class SecondaryUserAdminReceiver extends DeviceAdminReceiver {

        @Override
        public void onEnabled(Context context, Intent intent) {
            Log.d(TAG, ""SecondaryUserAdminReceiver.onEnabled() called on user ""
                    + context.getUserId());

            DevicePolicyManager dpm = context.getSystemService(DevicePolicyManager.class);
            ComponentName who = getComponentName(context);

            // Set affiliation ids
            Set<String> ids = Collections.singleton(intent.getStringExtra(EXTRA_AFFILIATION_ID));
            Log.d(TAG, ""setting affiliation ids as "" + ids);
            dpm.setAffiliationIds(who, ids);

            String error = null;
            try {
                Method method;
                if (intent.hasExtra(EXTRA_CURRENT_USER_PACKAGES)) {
                    method = CreateAndManageUserTest.class.getDeclaredMethod(
                            intent.getStringExtra(EXTRA_METHOD_NAME), Context.class,
                            DevicePolicyManager.class, ComponentName.class, Set.class);
                } else {
                    method = CreateAndManageUserTest.class.getDeclaredMethod(
                            intent.getStringExtra(EXTRA_METHOD_NAME), Context.class,
                            DevicePolicyManager.class, ComponentName.class);
                }
                method.setAccessible(true);
                Log.d(TAG, ""Calling method "" + method);
                if (intent.hasExtra(EXTRA_CURRENT_USER_PACKAGES)) {
                    String[] pkgsArray = intent.getStringArrayExtra(EXTRA_CURRENT_USER_PACKAGES);
                    Set<String> pkgs = new HashSet<>(pkgsArray.length);
                    for (String pkg : pkgsArray) {
                        pkgs.add(pkg);
                    }
                    method.invoke(null, context, dpm, who, pkgs);
                } else {
                    method.invoke(null, context, dpm, who);
                }
            } catch (NoSuchMethodException | IllegalAccessException e) {
                error = e.toString();
            } catch (InvocationTargetException e) {
                error = e.getCause().toString();
            }

            // Call all affiliated users
            final List<UserHandle> targetUsers = dpm.getBindDeviceAdminTargetUsers(who);
            assertWithMessage(""target users"").that(targetUsers).hasSize(1);

            pingTargetUser(context, dpm, targetUsers.get(0), error);
        }

        private void pingTargetUser(Context context, DevicePolicyManager dpm,
                UserHandle target, String error) {
            Log.d(TAG, ""Pinging target "" + target + "" with error "" + error);
            final ServiceConnection serviceConnection = new ServiceConnection() {
                @Override
                public void onServiceConnected(ComponentName name, IBinder service) {
                    Log.d(TAG, ""onServiceConnected() is called in "" + Thread.currentThread());
                    ICrossUserService crossUserService = ICrossUserService
                            .Stub.asInterface(service);
                    try {
                        crossUserService.onEnabledCalled(error);
                    } catch (RemoteException re) {
                        Log.e(TAG, ""Error when calling primary user"", re);
                        // Do nothing, primary user will time out
                    }
                }

                @Override
                public void onServiceDisconnected(ComponentName name) {
                    Log.d(TAG, ""onServiceDisconnected() is called"");
                }
            };
            Intent serviceIntent = new Intent(context, PrimaryUserService.class);
            boolean bound = dpm.bindDeviceAdminServiceAsUser(
                    getComponentName(context),
                    serviceIntent,
                    serviceConnection,
                    Context.BIND_AUTO_CREATE,
                    target);
            assertWithMessage(""bound to user %s using intent %s"", target, serviceIntent).that(bound)
                    .isTrue();
        }

        public static ComponentName getComponentName(Context context) {
            return new ComponentName(context, SecondaryUserAdminReceiver.class);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser"	""	"1: user"	"public void testCreateAndManageUser() throws Exception {
        UserHandle userHandle = createAndManageUser();

        assertWithMessage(""New user"").that(userHandle).isNotNull();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LowStorage"	""	"1: user"	"public void testCreateAndManageUser_LowStorage() throws Exception {
        UserManager.UserOperationException e = expectThrows(
                UserManager.UserOperationException.class, () -> createAndManageUser());

        assertUserOperationResult(e.getUserOperationResult(),
                UserManager.USER_OPERATION_ERROR_LOW_STORAGE,
                ""user creation on low storage"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_MaxUsers"	""	"1: user"	"public void testCreateAndManageUser_MaxUsers() throws Exception {
        UserManager.UserOperationException e = expectThrows(
                UserManager.UserOperationException.class, () -> createAndManageUser());

        assertUserOperationResult(e.getUserOperationResult(),
                UserManager.USER_OPERATION_ERROR_MAX_USERS,
                ""user creation when max users is reached"");
    }

    @SuppressWarnings(""unused"")
    private static void assertSkipSetupWizard(Context context,
            DevicePolicyManager devicePolicyManager, ComponentName componentName) throws Exception {
        assertWithMessage(""user setup settings (%s)"", Settings.Secure.USER_SETUP_COMPLETE)
                .that(Settings.Secure.getInt(context.getContentResolver(),
                        Settings.Secure.USER_SETUP_COMPLETE))
                .isEqualTo(1);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_SkipSetupWizard"	""	"1: user"	"public void testCreateAndManageUser_SkipSetupWizard() throws Exception {
        runCrossUserVerification(DevicePolicyManager.SKIP_SETUP_WIZARD, ""assertSkipSetupWizard"");

        PrimaryUserService.assertCrossUserCallArrived();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_SwitchUser"	""	"1: user"	"public void testCreateAndManageUser_SwitchUser() throws Exception {
        UserHandle userHandle = createAndManageUser();

        List<UserHandle> usersOnBroadcasts = switchUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle,
                userHandle);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_CannotStopCurrentUser"	""	"1: user"	"public void testCreateAndManageUser_CannotStopCurrentUser() throws Exception {
        UserHandle userHandle = createAndManageUser();

        switchUserAndWaitForBroadcasts(userHandle);

        stopUserAndCheckResult(userHandle, UserManager.USER_OPERATION_ERROR_CURRENT_USER);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_StartInBackground"	""	"1: user"	"public void testCreateAndManageUser_StartInBackground() throws Exception {
        UserHandle userHandle = createAndManageUser();

        List<UserHandle> usersOnBroadcasts = startUserInBackgroundAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_StartInBackground_MaxRunningUsers"	""	"1: user"	"public void testCreateAndManageUser_StartInBackground_MaxRunningUsers() throws Exception {
        UserHandle userHandle = createAndManageUser();

        // Start user in background and should receive max running users error
        startUserInBackgroundAndCheckResult(userHandle,
                UserManager.USER_OPERATION_ERROR_MAX_RUNNING_USERS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_StopUser"	""	"1: user"	"public void testCreateAndManageUser_StopUser() throws Exception {
        UserHandle userHandle = createAndManageUser();
        startUserInBackgroundAndWaitForBroadcasts(userHandle);

        List<UserHandle> usersOnBroadcasts = stopUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser"	""	"1: user"	"public void testCreateAndManageUser_StopEphemeralUser_DisallowRemoveUser() throws Exception {
        // Set DISALLOW_REMOVE_USER restriction
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);

        UserHandle userHandle = createAndManageUser(DevicePolicyManager.MAKE_USER_EPHEMERAL);
        startUserInBackgroundAndWaitForBroadcasts(userHandle);
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STOPPED, BasicAdminReceiver.ACTION_USER_REMOVED);

        callback.runAndUnregisterSelf(
                () -> stopUserAndCheckResult(userHandle, UserManager.USER_OPERATION_SUCCESS));

        // It's running just one operation (which issues a ACTION_USER_STOPPED), but as the
        // user is ephemeral, it will be automatically removed (which issues a
        // ACTION_USER_REMOVED).
        assertWithMessage(""user on broadcasts"").that(callback.getUsersOnReceivedBroadcasts())
                .containsExactly(userHandle, userHandle);
    }

    @SuppressWarnings(""unused"")
    private static void logoutUser(Context context, DevicePolicyManager devicePolicyManager,
            ComponentName componentName) {
        assertUserOperationResult(devicePolicyManager.logoutUser(componentName),
                UserManager.USER_OPERATION_SUCCESS, ""cannot logout user"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_LogoutUser"	""	"1: user"	"public void testCreateAndManageUser_LogoutUser() throws Exception {
        UserActionCallback callback = UserActionCallback.getCallbackForBroadcastActions(
                getContext(),
                BasicAdminReceiver.ACTION_USER_STARTED, BasicAdminReceiver.ACTION_USER_STOPPED);

        UserHandle userHandle = runCrossUserVerification(callback,
                /* createAndManageUserFlags= */ 0, ""logoutUser"", /* currentUserPackages= */ null);

        assertWithMessage(""user on broadcasts"").that(callback.getUsersOnReceivedBroadcasts())
                .containsExactly(userHandle, userHandle);
    }

    @SuppressWarnings(""unused"")
    private static void assertAffiliatedUser(Context context,
            DevicePolicyManager devicePolicyManager, ComponentName componentName) {
        assertWithMessage(""affiliated user"").that(devicePolicyManager.isAffiliatedUser()).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_Affiliated"	""	"1: user"	"public void testCreateAndManageUser_Affiliated() throws Exception {
        runCrossUserVerification(/* createAndManageUserFlags= */ 0, ""assertAffiliatedUser"");
        PrimaryUserService.assertCrossUserCallArrived();
    }

    @SuppressWarnings(""unused"")
    private static void assertEphemeralUser(Context context,
            DevicePolicyManager devicePolicyManager, ComponentName componentName) {
        assertWithMessage(""ephemeral user"").that(devicePolicyManager.isEphemeralUser(componentName))
                .isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_AddRestrictionSet"	""	"1: user"	"public void testCreateAndManageUser_AddRestrictionSet() throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_ADD_USER);

        createAndManageUser();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.CreateAndManageUserTest"	"testCreateAndManageUser_RemoveRestrictionSet"	""	"1: user"	"public void testCreateAndManageUser_RemoveRestrictionSet() throws Exception {
        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);

        UserHandle userHandle = createAndManageUser();

        // When the device owner itself has set the user restriction, it should still be allowed
        // to remove a user.
        List<UserHandle> usersOnBroadcasts = removeUserAndWaitForBroadcasts(userHandle);

        assertWithMessage(""user on broadcasts"").that(usersOnBroadcasts).containsExactly(userHandle);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.VrTemperatureTest"	"testVrTemperatures"	""	"1: system"	"public void testVrTemperatures() throws InterruptedException, SecurityException {
        if (!supportsVrHighPerformance())
            return;

        HardwarePropertiesManager hm = (HardwarePropertiesManager) getContext().getSystemService(
                Context.HARDWARE_PROPERTIES_SERVICE);

        float[] cpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] cpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] cpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_CPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] gpuTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] gpuThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] gpuShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_GPU,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] batteryTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] batteryThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] batteryShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_BATTERY,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);

        float[] skinTemps = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_CURRENT);
        float[] skinThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING);
        float[] skinShutdownThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_SHUTDOWN);
        float[] skinVrThrottlingThresholds = hm.getDeviceTemperatures(
                HardwarePropertiesManager.DEVICE_TEMPERATURE_SKIN,
                HardwarePropertiesManager.TEMPERATURE_THROTTLING_BELOW_VR_MIN);

        checkTemps(cpuTemps, cpuThrottlingThresholds, cpuShutdownThresholds, null);
        checkTemps(gpuTemps, gpuThrottlingThresholds, gpuShutdownThresholds, null);
        checkTemps(batteryTemps, batteryThrottlingThresholds, batteryShutdownThresholds, null);
        checkTemps(skinTemps, skinThrottlingThresholds, skinShutdownThresholds,
                skinVrThrottlingThresholds);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/VrTemperatureTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"isHeadlessSystemUserMode"	""	"2: system user"	"public void test/*
 *.
 */
package com.android.cts.deviceowner;

import static com.android.compatibility.common.util.SystemUtil.callWithShellPermissionIdentity;
import static com.android.compatibility.common.util.SystemUtil.eventually;

import static com.google.common.truth.Truth.assertWithMessage;

import android.annotation.UserIdInt;
import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.UserInfo;
import android.os.UserHandle;
import android.os.UserManager;
import android.util.Log;

//TODO(b/174859111): move to automotive specific module
/**
 * Device owner tests specific for devices that use
 * {@link android.os.UserManager#isHeadlessSystemUserMode()}.
 */
public final class HeadlessSystemUserTest extends BaseDeviceOwnerTest {

    private static final String TAG = HeadlessSystemUserTest.class.getSimpleName();

    // To be used in cases where it needs to test the DPM of the current user (as
    // mDevicePolicyManager wraps calls to user 0's DeviceOwner DPM);
    private DevicePolicyManager mCurrentUserDpm;

    private UserManager mUserManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mCurrentUserDpm = mContext.getSystemService(DevicePolicyManager.class);
        mUserManager = mContext.getSystemService(UserManager.class);

        Log.d(TAG, ""setUp(): userId="" + mUserId);

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"testProfileOwnerIsSetOnNewUser"	""	"2: system user"	"public void testProfileOwnerIsSetOnNewUser() throws Exception {
        UserInfo user = null;
        try {
            user = callWithShellPermissionIdentity(() -> mUserManager
                    .createUser(""testProfileOwnerIsSetOnNewUser"", /* flags= */ 0));
            assertWithMessage(""new user"").that(user).isNotNull();
            Log.d(TAG, ""Created user "" + user.toFullString());
            final int userId = user.id;

            // Must try a couple times as PO is asynchronously set after user is created.
            // TODO(b/178102911): use a callback instead
            Context newUserContext = mContext.createContextAsUser(UserHandle.of(userId),
                    /* flags=*/ 0);
            DevicePolicyManager newUserDpm = newUserContext
                    .getSystemService(DevicePolicyManager.class);
            eventually(() -> assertProfileOwner(newUserDpm.getProfileOwner(), userId));

        } finally {
            if (user != null) {
                final int userId = user.id;
                Log.d(TAG, ""Removing user "" + userId);
                boolean removed = callWithShellPermissionIdentity(
                        () -> mUserManager.removeUser(userId));
                assertWithMessage(""user %s removed"", userId).that(removed).isTrue();
            }
        }
    }

    private void assertProfileOwner(ComponentName admin, @UserIdInt int userId) {
        assertWithMessage(""Component %s is profile owner for user %s"", admin, userId)
                .that(admin).isEqualTo(getWho());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.HeadlessSystemUserTest"	"testProfileOwnerIsSetOnCurrentUser"	""	"1: user"	"public void testProfileOwnerIsSetOnCurrentUser() {
        ComponentName admin = mCurrentUserDpm.getProfileOwner();

        assertProfileOwner(admin, mUserId);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/HeadlessSystemUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.ListForegroundAffiliatedUsersTest"	"testListForegroundAffiliatedUsers_onlyForegroundUser"	""	"1: user"	"public void testListForegroundAffiliatedUsers_onlyForegroundUser() throws Exception {
        List<UserHandle> users = mDevicePolicyManager.listForegroundAffiliatedUsers();

        UserHandle currentUser = invokeStaticMethodWithShellPermissions(() -> getCurrentUser());
        Log.d(TAG, ""currentUser: "" + currentUser + "" users: ""  + users);

        assertWithMessage(""foreground users"").that(users).containsExactly(currentUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/ListForegroundAffiliatedUsersTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.ListForegroundAffiliatedUsersTest"	"testListForegroundAffiliatedUsers_empty"	""	"1: user"	"public void testListForegroundAffiliatedUsers_empty() throws Exception {
        List<UserHandle> users = mDevicePolicyManager.listForegroundAffiliatedUsers();
        Log.d(TAG, ""users: ""  + users);

        assertWithMessage(""foreground users"").that(users).isEmpty();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/ListForegroundAffiliatedUsersTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.NetworkLoggingTest"	"testNetworkLoggingAndRetrieval"	""	"1: system"	"public void testNetworkLoggingAndRetrieval() throws Exception {
        mBatchesRequested =
                Integer.parseInt(
                        InstrumentationRegistry.getArguments().getString(ARG_BATCH_COUNT, ""1""));
        Log.d(TAG, ""batches requested:"" + mBatchesRequested);
        mBatchCountDown = new CountDownLatch(mBatchesRequested);
        // register a receiver that listens for DeviceAdminReceiver#onNetworkLogsAvailable()
        final IntentFilter filterNetworkLogsAvailable = new IntentFilter(
                BasicAdminReceiver.ACTION_NETWORK_LOGS_AVAILABLE);

        registerTestCaseReceiver(mContext, mNetworkLogsReceiver, filterNetworkLogsAvailable);

        // visit websites that shouldn't be logged as network logging isn't enabled yet
        for (int i = 0; i < NOT_LOGGED_URLS_LIST.length; i++) {
            connectToWebsite(NOT_LOGGED_URLS_LIST[i], shouldLog(i));
        }

        // enable network logging and start the logging scenario
        setNetworkLoggingEnabled(true);

        // TODO: here test that facts about logging are shown in the UI

        // Fetch and verify the batches of events.
        generateBatches();
    }

    private boolean shouldLog(int sample) {
        return sample % LOGGING_FREQUENCY == 0;
    }

    private void generateBatches() throws Exception {
        // visit websites to verify their dns lookups are logged
        for (int i = 0; i < LOGGED_URLS_LIST.length; i++) {
            connectToWebsite(LOGGED_URLS_LIST[i], shouldLog(i));
        }

        // generate enough traffic to fill the batches.
        int fakeReqNo = 0;
        for (int i = 0; i < mBatchesRequested; i++) {
            fakeReqNo += generateFakeTraffic();
        }

        // if DeviceAdminReceiver#onNetworkLogsAvailable() hasn't been triggered yet, wait for up to
        // 3 minutes per batch just in case
        final int timeoutMs = TIMEOUT_PER_BATCH_MS * mBatchesRequested;
        Log.d(TAG, ""Waiting up to "" + timeoutMs + ""ms for "" + mBatchesRequested + "" batches"");
        if (!mBatchCountDown.await(timeoutMs, TimeUnit.MILLISECONDS)) {
            Log.e(TAG, ""Timed out!"");
        }

        unregisterTestCaseReceiver(mContext, mNetworkLogsReceiver);

        if (mBatchCountDown.getCount() > 0) {
            fail(""Generated events for "" + mBatchesRequested + "" batches and waited for ""
                    + timeoutMs + "" ms, but still didn't get""
                    + "" DeviceAdminReceiver#onNetworkLogsAvailable() callback"");
        }

        // Verify network logs.
        assertWithMessage(""network events"").that(mNetworkEvents).isNotEmpty();
        assertWithMessage(""first event id"").that(mNetworkEvents.get(0).getId()).isEqualTo(0L);
        // For each of the real URLs we have two events: one DNS and one connect. Fake requests
        // don't require DNS queries.
        final int eventsExpected =
                Math.min(FULL_LOG_BATCH_SIZE * mBatchesRequested,
                        2 * LOGGED_URLS_LIST.length + fakeReqNo);
        verifyNetworkLogs(mNetworkEvents, eventsExpected);
    }

    private void verifyDnsEvent(DnsEvent dnsEvent) {
        // Verify that we didn't log a hostname lookup when network logging was disabled.
        if (dnsEvent.getHostname().contains(NOT_LOGGED_URLS_LIST[0])
                || dnsEvent.getHostname().contains(NOT_LOGGED_URLS_LIST[1])) {
            fail(""A hostname that was looked-up when network logging was disabled""
                    + "" was logged."");
        }

        // Verify that as many IP addresses were logged as were reported (max 10).
        final List<InetAddress> ips = dnsEvent.getInetAddresses();
        assertThat(ips.size()).isAtMost(MAX_IP_ADDRESSES_LOGGED);
        final int expectedAddressCount = Math.min(MAX_IP_ADDRESSES_LOGGED,
                dnsEvent.getTotalResolvedAddressCount());
        assertThat(expectedAddressCount).isEqualTo(ips.size());

        // Verify the IP addresses are valid IPv4 or IPv6 addresses.
        for (final InetAddress ipAddress : ips) {
            assertTrue(isIpv4OrIpv6Address(ipAddress));
        }

        //Verify writeToParcel.
        Parcel parcel = Parcel.obtain();
        try {
            dnsEvent.writeToParcel(parcel, 0);
            parcel.setDataPosition(0);
            final DnsEvent dnsEventOut = DnsEvent.CREATOR.createFromParcel(parcel);
            assertThat(dnsEventOut).isNotNull();
            verifyDnsEventsEqual(dnsEvent, dnsEventOut);
        } finally {
            parcel.recycle();
        }
    }

    private void verifyDnsEventsEqual(DnsEvent event1, DnsEvent event2) {
        assertThat(event1.getHostname()).isEqualTo(event2.getHostname());
        assertThat(new HashSet<InetAddress>(event1.getInetAddresses())).isEqualTo(
                        new HashSet<InetAddress>(event2.getInetAddresses()));
        assertThat(event1.getTotalResolvedAddressCount()).isEqualTo(
                event2.getTotalResolvedAddressCount());
        assertThat(event1.getPackageName()).isEqualTo(event2.getPackageName());
        assertThat(event1.getTimestamp()).isEqualTo(event2.getTimestamp());
        assertThat(event1.getId()).isEqualTo(event2.getId());
    }

    private void verifyConnectEvent(ConnectEvent connectEvent) {
        // Verify the IP address is a valid IPv4 or IPv6 address.
        final InetAddress ip = connectEvent.getInetAddress();
        assertThat(isIpv4OrIpv6Address(ip)).isTrue();

        // Verify that the port is a valid port.
        assertThat(connectEvent.getPort()).isAtLeast(0);
        assertThat(connectEvent.getPort()).isAtMost(65535);

        // Verify writeToParcel.
        Parcel parcel = Parcel.obtain();
        try {
            connectEvent.writeToParcel(parcel, 0);
            parcel.setDataPosition(0);
            final ConnectEvent connectEventOut = ConnectEvent.CREATOR.createFromParcel(parcel);
            assertThat(connectEventOut).isNotNull();
            verifyConnectEventsEqual(connectEvent, connectEventOut);
        } finally {
             parcel.recycle();
        }
    }

    private void verifyConnectEventsEqual(ConnectEvent event1, ConnectEvent event2) {
        assertThat(event1.getInetAddress()).isEqualTo(event2.getInetAddress());
        assertThat(event1.getPort()).isEqualTo(event2.getPort());
        assertThat(event1.getPackageName()).isEqualTo(event2.getPackageName());
        assertThat(event1.getTimestamp()).isEqualTo(event2.getTimestamp());
        assertThat(event1.getId()).isEqualTo(event2.getId());
    }

    private void verifyNetworkLogs(List<NetworkEvent> networkEvents, int eventsExpected) {
        Log.d(TAG, ""verifyNetworkLogs(): expected "" + eventsExpected + "", got ""
                + ((networkEvents == null) ? ""null"" : String.valueOf(networkEvents.size())));
        // allow a batch to be slightly smaller or larger.
        assertTrue(Math.abs(eventsExpected - networkEvents.size()) <= 150);
        int ctsPackageNameCounter = 0;
        // allow a small down margin for verification, to avoid flakiness
        final int eventsExpectedWithMargin = eventsExpected - 50;
        final boolean[] visited = new boolean[LOGGED_URLS_LIST.length];

        for (int i = 0; i < networkEvents.size(); i++) {
            final NetworkEvent currentEvent = networkEvents.get(i);
            // verify that the events are in chronological order
            if (i > 0) {
                assertTrue(currentEvent.getTimestamp() >= networkEvents.get(i - 1).getTimestamp());
            }
            // verify that the event IDs are monotonically increasing
            if (i > 0) {
                assertTrue(currentEvent.getId() == (networkEvents.get(i - 1).getId() + 1));
            }
            // count how many events come from the CTS app
            if (CTS_APP_PACKAGE_NAME.equals(currentEvent.getPackageName())) {
                ctsPackageNameCounter++;
                if (currentEvent instanceof DnsEvent) {
                    final DnsEvent dnsEvent = (DnsEvent) currentEvent;
                    // Mark which addresses from LOGGED_URLS_LIST were visited.
                    for (int j = 0; j < LOGGED_URLS_LIST.length; j++) {
                        if (dnsEvent.getHostname().contains(LOGGED_URLS_LIST[j])) {
                            visited[j] = true;
                            break;
                        }
                    }

                    verifyDnsEvent(dnsEvent);
                } else if (currentEvent instanceof ConnectEvent) {
                    final ConnectEvent connectEvent = (ConnectEvent) currentEvent;
                    verifyConnectEvent(connectEvent);
                } else {
                    fail(""An unknown NetworkEvent type logged: ""
                            + currentEvent.getClass().getName());
                }
            }
        }

        // verify that each hostname from LOGGED_URLS_LIST was looked-up
        for (int i = 0; i < 10; i++) {
            assertTrue(LOGGED_URLS_LIST[i] + "" wasn't visited"", visited[i]);
        }
        // verify that sufficient iterations done by the CTS app were logged
        assertTrue(ctsPackageNameCounter >= eventsExpectedWithMargin);
    }

    private void connectToWebsite(String server, boolean shouldLog) {
        HttpURLConnection urlConnection = null;
        try {
            final URL url = new URL(""http://"" + server);
            if (shouldLog || VERBOSE) {
                Log.d(TAG, ""Connecting to "" + server + "" with "" + CONNECTION_TIMEOUT_MS
                        + ""ms timeout"");
            }
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(CONNECTION_TIMEOUT_MS);
            urlConnection.setReadTimeout(CONNECTION_TIMEOUT_MS);
            final int responseCode = urlConnection.getResponseCode();
            if (shouldLog || VERBOSE) {
                Log.d(TAG, ""Got response code: "" + responseCode);
            }
        } catch (IOException e) {
            Log.w(TAG, ""Failed to connect to "" + server, e);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
    }

    /** Quickly generate loads of events by repeatedly connecting to a local server. */
    private int generateFakeTraffic() throws IOException, InterruptedException {
        final ServerSocket serverSocket = new ServerSocket(0);
        final Thread serverThread = startFakeServer(serverSocket);

        final int reqNo = makeFakeRequests(serverSocket.getLocalPort());

        serverSocket.close();
        serverThread.join();

        return reqNo;
    }

    private int makeFakeRequests(int port) {
        int reqNo;
        final String FAKE_SERVER = ""127.0.0.1:"" + port;
        Log.d(TAG, ""Making a fake request to "" + FAKE_SERVER);
        for (reqNo = 0; reqNo < FULL_LOG_BATCH_SIZE && mBatchCountDown.getCount() > 0; reqNo++) {
            connectToWebsite(FAKE_SERVER, shouldLog(reqNo));
            // Just to prevent choking the server.
            sleep(10);
        }
        Log.d(TAG, ""Returning reqNo="" + reqNo);
        return reqNo;
    }

    private Thread startFakeServer(ServerSocket serverSocket) throws InterruptedException {
        final Thread serverThread = new Thread(() -> {
            while (!serverSocket.isClosed()) {
                try {
                    final Socket socket = serverSocket.accept();
                    // Consume input.
                    final BufferedReader input =
                            new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String line;
                    do {
                        line = input.readLine();
                    } while (line != null && !line.equals(""""));
                    // Return minimum valid response.
                    final PrintStream output = new PrintStream(socket.getOutputStream());
                    output.println(""HTTP/1.0 200 OK"");
                    output.println(""Content-Length: 0"");
                    output.println();
                    output.flush();
                    output.close();
                } catch (IOException e) {
                    if (!serverSocket.isClosed()) {
                        Log.w(TAG, ""Failed to serve connection"", e);
                    }
                }
            }
            Log.i(TAG, ""Fake server closed"");
        }, ""FakeServerThread"");
        Log.i(TAG, ""starting a fake server ("" + serverSocket + "") on thread "" + serverThread);
        serverThread.start();

        // Allow the server to start accepting.
        sleep(1_000);

        return serverThread;
    }

    private boolean isIpv4OrIpv6Address(InetAddress addr) {
        return ((addr instanceof Inet4Address) || (addr instanceof Inet6Address));
    }

    private void sleep(int timeMs) {
        if (VERBOSE) Log.v(TAG, ""Sleeping for "" + timeMs + ""ms"");
        SystemClock.sleep(timeMs);
        if (VERBOSE) Log.v(TAG, ""Woke up"");
    }

    private void setNetworkLoggingEnabled(boolean enabled) {
        ComponentName admin = getWho();
        Log.d(TAG, ""Calling setNetworkLoggingEnabled("" + enabled + "") for "" + admin);
        mDevicePolicyManager.setNetworkLoggingEnabled(admin, enabled);
        boolean reallyEnabled = mDevicePolicyManager.isNetworkLoggingEnabled(admin);
        Log.d(TAG, ""getNetworkLoggingEnabled() result:"" + reallyEnabled);
        assertWithMessage(""network logging enabled for %s"", admin).that(reallyEnabled)
                .isEqualTo(enabled);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/NetworkLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.WifiNetworkConfigurationWithoutFineLocationPermissionTest"	"isWifiEnabled"	""	"1: system"	"public void test/*
 *.
 */

package com.android.cts.deviceowner;

import static com.android.compatibility.common.util.WifiConfigCreator.SECURITY_TYPE_NONE;

import static com.google.common.truth.Truth.assertWithMessage;

import android.Manifest;
import android.content.pm.PackageManager;
import android.net.wifi.WifiConfiguration;
import android.os.SystemClock;
import android.util.Log;

import com.android.compatibility.common.util.SystemUtil;

import java.util.List;
import java.util.concurrent.TimeUnit;

public class WifiNetworkConfigurationWithoutFineLocationPermissionTest extends BaseDeviceOwnerTest {
    private static final String TAG = ""WifiNetworkConfigurationWithoutFineLocationPermissionTest"";

    // Unique SSID to use for this test (max SSID length is 32)
    private static final String NETWORK_SSID = ""com.android.cts.abcdefghijklmnop"";
    private static final int INVALID_NETWORK_ID = -1;

    // Time duration to allow before assuming that a WiFi operation failed and ceasing to wait.
    private static final long UPDATE_TIMEOUT_MS = TimeUnit.MINUTES.toMillis(5);
    private static final long UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(1);

    @Override
    public void setUp() throws Exception {
        super.setUp();

        // WiFi is supposed to be a prerequisite of CTS but sometimes it's not enabled
        // for some unknown reason. Check it here just in case.
        if (!mWifiManager.isWifiEnabled()) {
            Log.d(TAG, ""Enabling wifi using shell"");
            SystemUtil.runShellCommand(""svc wifi enable"");
            awaitWifiEnabled();
            Log.d(TAG, ""Done: "" + mWifiManager.isWifiEnabled());
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiNetworkConfigurationWithoutFineLocationPermissionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.WifiNetworkConfigurationWithoutFineLocationPermissionTest"	"testAddAndRetrieveCallerConfiguredNetworks"	""	"2: system user"	"public void testAddAndRetrieveCallerConfiguredNetworks() throws Exception {
        assertWithMessage(""wifi is enabled"").that(mWifiManager.isWifiEnabled()).isTrue();
        assertWithMessage(""permission status (denied=%s) for %s on user %s"",
                PackageManager.PERMISSION_DENIED, Manifest.permission.ACCESS_FINE_LOCATION, mUserId)
                        .that(mContext.checkSelfPermission(
                                        Manifest.permission.ACCESS_FINE_LOCATION))
                        .isEqualTo(PackageManager.PERMISSION_DENIED);

        int netId = mWifiConfigCreator.addNetwork(NETWORK_SSID, /* hidden */ false,
                SECURITY_TYPE_NONE, /* password */ null);
        assertWithMessage(""id of added network"").that(netId).isNotEqualTo(INVALID_NETWORK_ID);

        try {
            List<WifiConfiguration> configs = mWifiManager.getCallerConfiguredNetworks();
            assertWithMessage(""configured networks"").that(configs).isNotEmpty();
            assertWithMessage(""SSID of configured networks"").that(configs.get(0).SSID)
                    .isEqualTo('""' + NETWORK_SSID + '""');
        } finally {
            Log.d(TAG, ""Removing network "" + netId);
            mWifiManager.removeNetwork(netId);
        }
    }

    private void awaitWifiEnabled()  {
        for (int probes = 0; probes * UPDATE_INTERVAL_MS <= UPDATE_TIMEOUT_MS; probes++) {
            if (probes != 0) {
                SystemClock.sleep(UPDATE_INTERVAL_MS);
            }
            if (mWifiManager.isWifiEnabled()) {
                return;
            }
        }
        fail(""Waited too long for wifi enabled"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiNetworkConfigurationWithoutFineLocationPermissionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.DeviceIdentifiersTest"	"testDeviceOwnerCanGetDeviceIdentifiersWithPermission"	""	"1: system"	"public void testDeviceOwnerCanGetDeviceIdentifiersWithPermission() {
        // The device owner with the READ_PHONE_STATE permission should have access to all device
        // identifiers. However since the TelephonyManager methods can return null this method
        // verifies that the device owner with the READ_PHONE_STATE permission receives the same
        // value that the shell identity receives with the READ_PRIVILEGED_PHONE_STATE permission.
        TelephonyManager telephonyManager = (TelephonyManager) mContext.getSystemService(
                Context.TELEPHONY_SERVICE);
        try {
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getDeviceId""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getDeviceId), telephonyManager.getDeviceId());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getImei""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getImei), telephonyManager.getImei());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getMeid""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getMeid), telephonyManager.getMeid());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getSubscriberId""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getSubscriberId), telephonyManager.getSubscriberId());
            assertEquals(
                    String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getSimSerialNumber""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getSimSerialNumber),
                    telephonyManager.getSimSerialNumber());
            assertEquals(
                    String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getNai""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getNai), telephonyManager.getNai());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""Build#getSerial""),
                    ShellIdentityUtils.invokeStaticMethodWithShellPermissions(Build::getSerial),
                    Build.getSerial());
            SubscriptionManager subscriptionManager =
                    (SubscriptionManager) mContext.getSystemService(
                            Context.TELEPHONY_SUBSCRIPTION_SERVICE);
            int subId = subscriptionManager.getDefaultSubscriptionId();
            if (subId != SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
                SubscriptionInfo expectedSubInfo =
                        ShellIdentityUtils.invokeMethodWithShellPermissions(subscriptionManager,
                                (sm) -> sm.getActiveSubscriptionInfo(subId));
                SubscriptionInfo actualSubInfo = subscriptionManager.getActiveSubscriptionInfo(
                        subId);
                assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getIccId""),
                        expectedSubInfo.getIccId(), actualSubInfo.getIccId());
            }
        } catch (SecurityException e) {
            fail(""The device owner with the READ_PHONE_STATE permission must be able to access ""
                    + ""the device IDs: "" + e);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DeviceIdentifiersTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.OverrideApnTest"	"testAddGetRemoveOverrideApn"	""	"1: user"	"public void testAddGetRemoveOverrideApn() throws Exception {
        int insertedId = mDevicePolicyManager.addOverrideApn(getWho(), testApnFull);
        assertTrue(insertedId != 0);
        List <ApnSetting> apnList = mDevicePolicyManager.getOverrideApns(getWho());

        assertEquals(1, apnList.size());
        assertEquals(TEST_OPERATOR_NUMERIC, apnList.get(0).getOperatorNumeric());
        assertEquals(TEST_ENTRY_NAME, apnList.get(0).getEntryName());
        assertEquals(TEST_APN_NAME, apnList.get(0).getApnName());
        assertEquals(getProxyInetAddress(TEST_PROXY_ADDRESS), apnList.get(0).getProxyAddress());
        assertEquals(TEST_PROXY_ADDRESS, apnList.get(0).getProxyAddressAsString());
        assertEquals(TEST_PROXY_PORT, apnList.get(0).getProxyPort());
        assertEquals(TEST_MMSC, apnList.get(0).getMmsc());
        assertEquals(getProxyInetAddress(TEST_PROXY_ADDRESS), apnList.get(0).getMmsProxyAddress());
        assertEquals(TEST_PROXY_ADDRESS, apnList.get(0).getMmsProxyAddressAsString());
        assertEquals(TEST_PROXY_PORT, apnList.get(0).getMmsProxyPort());
        assertEquals(TEST_USER_NAME, apnList.get(0).getUser());
        assertEquals(TEST_PASSWORD, apnList.get(0).getPassword());
        assertEquals(TEST_AUTH_TYPE, apnList.get(0).getAuthType());
        assertEquals(TEST_APN_TYPE_BITMASK, apnList.get(0).getApnTypeBitmask());
        assertEquals(TEST_PROTOCOL, apnList.get(0).getProtocol());
        assertEquals(TEST_PROTOCOL, apnList.get(0).getRoamingProtocol());
        assertEquals(TEST_ENABLED, apnList.get(0).isEnabled());
        assertEquals(TEST_MVNO_TYPE, apnList.get(0).getMvnoType());
        assertEquals(TEST_NETWORK_TYPE_BITMASK, apnList.get(0).getNetworkTypeBitmask());
        assertEquals(TEST_CARRIER_ID, apnList.get(0).getCarrierId());

        assertTrue(mDevicePolicyManager.removeOverrideApn(getWho(), insertedId));
        apnList = mDevicePolicyManager.getOverrideApns(getWho());
        assertEquals(0, apnList.size());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/OverrideApnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.OverrideApnTest"	"testUpdateOverrideApn"	""	"1: user"	"public void testUpdateOverrideApn() throws Exception {
        int insertedId = mDevicePolicyManager.addOverrideApn(getWho(), testApnFull);
        assertNotSame(-1, insertedId);

        final ApnSetting updateApn = new ApnSetting.Builder()
            .setApnName(UPDATE_APN_NAME)
            .setEntryName(UPDATE_ETNRY_NAME)
            .setOperatorNumeric(TEST_OPERATOR_NUMERIC)
            .setProxyAddress(TEST_PROXY_ADDRESS)
            .setProxyPort(TEST_PROXY_PORT)
            .setMmsc(TEST_MMSC)
            .setMmsProxyAddress(TEST_PROXY_ADDRESS)
            .setMmsProxyPort(TEST_PROXY_PORT)
            .setUser(TEST_USER_NAME)
            .setPassword(TEST_PASSWORD)
            .setAuthType(TEST_AUTH_TYPE)
            .setApnTypeBitmask(TEST_APN_TYPE_BITMASK)
            .setProtocol(TEST_PROTOCOL)
            .setRoamingProtocol(TEST_PROTOCOL)
            .setNetworkTypeBitmask(TEST_NETWORK_TYPE_BITMASK)
            .setMvnoType(TEST_MVNO_TYPE)
            .setCarrierEnabled(TEST_ENABLED)
            .setCarrierId(UPDATE_CARRIER_ID)
            .build();
        assertTrue(mDevicePolicyManager.updateOverrideApn(getWho(), insertedId, updateApn));

        List <ApnSetting> apnList = mDevicePolicyManager.getOverrideApns(getWho());

        assertEquals(1, apnList.size());
        assertEquals(TEST_OPERATOR_NUMERIC, apnList.get(0).getOperatorNumeric());
        assertEquals(UPDATE_ETNRY_NAME, apnList.get(0).getEntryName());
        assertEquals(UPDATE_APN_NAME, apnList.get(0).getApnName());
        assertEquals(getProxyInetAddress(TEST_PROXY_ADDRESS), apnList.get(0).getProxyAddress());
        assertEquals(TEST_PROXY_ADDRESS, apnList.get(0).getProxyAddressAsString());
        assertEquals(TEST_PROXY_PORT, apnList.get(0).getProxyPort());
        assertEquals(TEST_MMSC, apnList.get(0).getMmsc());
        assertEquals(getProxyInetAddress(TEST_PROXY_ADDRESS), apnList.get(0).getMmsProxyAddress());
        assertEquals(TEST_PROXY_ADDRESS, apnList.get(0).getMmsProxyAddressAsString());
        assertEquals(TEST_PROXY_PORT, apnList.get(0).getMmsProxyPort());
        assertEquals(TEST_USER_NAME, apnList.get(0).getUser());
        assertEquals(TEST_PASSWORD, apnList.get(0).getPassword());
        assertEquals(TEST_AUTH_TYPE, apnList.get(0).getAuthType());
        assertEquals(TEST_APN_TYPE_BITMASK, apnList.get(0).getApnTypeBitmask());
        assertEquals(TEST_PROTOCOL, apnList.get(0).getProtocol());
        assertEquals(TEST_PROTOCOL, apnList.get(0).getRoamingProtocol());
        assertEquals(TEST_ENABLED, apnList.get(0).isEnabled());
        assertEquals(TEST_MVNO_TYPE, apnList.get(0).getMvnoType());
        assertEquals(UPDATE_CARRIER_ID, apnList.get(0).getCarrierId());

        assertTrue(mDevicePolicyManager.removeOverrideApn(getWho(), insertedId));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/OverrideApnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.OverrideApnTest"	"testOverrideApnDefaultValues"	""	"1: user"	"public void testOverrideApnDefaultValues() {
        final ApnSetting emptyApn = new ApnSetting.Builder()
            .setApnName(TEST_APN_NAME)
            .setEntryName(TEST_ENTRY_NAME)
            .setApnTypeBitmask(TEST_APN_TYPE_BITMASK)
            .build();

        int insertedId = mDevicePolicyManager.addOverrideApn(getWho(), emptyApn);
        assertNotSame(-1, insertedId);

        List <ApnSetting> apnList = mDevicePolicyManager.getOverrideApns(getWho());
        assertEquals(1, apnList.size());
        assertEquals("""", apnList.get(0).getOperatorNumeric());
        assertEquals(TEST_ENTRY_NAME, apnList.get(0).getEntryName());
        assertEquals(TEST_APN_NAME, apnList.get(0).getApnName());
        assertEquals(null, apnList.get(0).getProxyAddress());
        assertEquals("""", apnList.get(0).getProxyAddressAsString());
        assertEquals(-1, apnList.get(0).getProxyPort());
        assertEquals(null, apnList.get(0).getMmsc());
        assertEquals(null, apnList.get(0).getMmsProxyAddress());
        assertEquals("""", apnList.get(0).getMmsProxyAddressAsString());
        assertEquals(-1, apnList.get(0).getMmsProxyPort());
        assertEquals("""", apnList.get(0).getUser());
        assertEquals("""", apnList.get(0).getPassword());
        assertEquals(0, apnList.get(0).getAuthType());
        assertEquals(TEST_APN_TYPE_BITMASK, apnList.get(0).getApnTypeBitmask());
        assertEquals(-1, apnList.get(0).getProtocol());
        assertEquals(-1, apnList.get(0).getRoamingProtocol());
        assertEquals(false, apnList.get(0).isEnabled());
        assertEquals(-1, apnList.get(0).getMvnoType());
        assertEquals(-1, apnList.get(0).getCarrierId());

        assertTrue(mDevicePolicyManager.removeOverrideApn(getWho(), insertedId));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/OverrideApnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.DevicePolicySafetyCheckerIntegrationTest"	"DevicePolicySafetyCheckerIntegrationTester"	""	"3: system user camera"	"public void test/*
 *.
 */
package com.android.cts.deviceowner;

import static android.app.admin.DevicePolicyManager.OPERATION_CREATE_AND_MANAGE_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REBOOT;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REQUEST_BUGREPORT;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_APPLICATION_HIDDEN;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_APPLICATION_RESTRICTIONS;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_CAMERA_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_FACTORY_RESET_PROTECTION_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_GLOBAL_PRIVATE_DNS;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_KEEP_UNINSTALLED_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_KEYGUARD_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOCK_TASK_FEATURES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOCK_TASK_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_LOGOUT_ENABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_OVERRIDE_APNS_ENABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PACKAGES_SUSPENDED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_STATUS_BAR_DISABLED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_SYSTEM_SETTING;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_SYSTEM_UPDATE_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_TRUST_AGENT_CONFIGURATION;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_USER_CONTROL_DISABLED_PACKAGES;
import static android.app.admin.DevicePolicyManager.OPERATION_START_USER_IN_BACKGROUND;
import static android.app.admin.DevicePolicyManager.OPERATION_STOP_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_SWITCH_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_UNINSTALL_CA_CERT;
import static android.app.admin.DevicePolicyManager.OPERATION_WIPE_DATA;

import android.app.admin.DevicePolicyManager;
import android.app.admin.FactoryResetProtectionPolicy;
import android.content.ComponentName;
import android.os.Bundle;
import android.os.UserHandle;

import com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester;
import com.android.internal.util.ArrayUtils;

import java.util.Arrays;
import java.util.List;

// TODO(b/174859111): move to automotive-only section
/**
 * Tests that DPM calls fail when determined by the
 * {@link android.app.admin.DevicePolicySafetyChecker}.
 */
public final class DevicePolicySafetyCheckerIntegrationTest extends BaseDeviceOwnerTest {
    private static final int NO_FLAGS = 0;
    private static final UserHandle USER_HANDLE = UserHandle.of(42);
    public static final String TEST_PACKAGE = BasicAdminReceiver.class.getPackage().getName();
    public static final ComponentName TEST_COMPONENT = new ComponentName(
            TEST_PACKAGE, BasicAdminReceiver.class.getName());
    public static final List<String> TEST_ACCOUNTS = Arrays.asList(""Account 1"");
    public static final List<String> TEST_PACKAGES = Arrays.asList(TEST_PACKAGE);
    private static final String TEST_CA =
            ""-----BEGIN CERTIFICATE-----\n""
            + ""MIICVzCCAgGgAwIBAgIJAMvnLHnnfO/IMA0GCSqGSIb3DQEBBQUAMIGGMQswCQYD\n""
            + ""VQQGEwJJTjELMAkGA1UECAwCQVAxDDAKBgNVBAcMA0hZRDEVMBMGA1UECgwMSU1G\n""
            + ""TCBQVlQgTFREMRAwDgYDVQQLDAdJTUZMIE9VMRIwEAYDVQQDDAlJTUZMLklORk8x\n""
            + ""HzAdBgkqhkiG9w0BCQEWEHJhbWVzaEBpbWZsLmluZm8wHhcNMTMwODI4MDk0NDA5\n""
            + ""WhcNMjMwODI2MDk0NDA5WjCBhjELMAkGA1UEBhMCSU4xCzAJBgNVBAgMAkFQMQww\n""
            + ""CgYDVQQHDANIWUQxFTATBgNVBAoMDElNRkwgUFZUIExURDEQMA4GA1UECwwHSU1G\n""
            + ""TCBPVTESMBAGA1UEAwwJSU1GTC5JTkZPMR8wHQYJKoZIhvcNAQkBFhByYW1lc2hA\n""
            + ""aW1mbC5pbmZvMFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAJ738cbTQlNIO7O6nV/f\n""
            + ""DJTMvWbPkyHYX8CQ7yXiAzEiZ5bzKJjDJmpRAkUrVinljKns2l6C4++l/5A7pFOO\n""
            + ""33kCAwEAAaNQME4wHQYDVR0OBBYEFOdbZP7LaMbgeZYPuds2CeSonmYxMB8GA1Ud\n""
            + ""IwQYMBaAFOdbZP7LaMbgeZYPuds2CeSonmYxMAwGA1UdEwQFMAMBAf8wDQYJKoZI\n""
            + ""hvcNAQEFBQADQQBdrk6J9koyylMtl/zRfiMAc2zgeC825fgP6421NTxs1rjLs1HG\n""
            + ""VcUyQ1/e7WQgOaBHi9TefUJi+4PSVSluOXon\n""
            + ""-----END CERTIFICATE-----"";
    private final DevicePolicySafetyCheckerIntegrationTester mTester =
            new DevicePolicySafetyCheckerIntegrationTester() {

        @Override
        protected int[] getSafetyAwareOperations() {
            int[] operations = new int [] {
                    OPERATION_CREATE_AND_MANAGE_USER,
                    // TODO(b/175245108) Add test for this operation; testing
                    // dpm.installSystemUpdate will require upload a test system update file.
                    // OPERATION_INSTALL_SYSTEM_UPDATE,
                    OPERATION_REBOOT,
                    OPERATION_REMOVE_USER,
                    OPERATION_REQUEST_BUGREPORT,
                    OPERATION_SET_APPLICATION_HIDDEN,
                    OPERATION_SET_APPLICATION_RESTRICTIONS,
                    OPERATION_SET_CAMERA_DISABLED,
                    OPERATION_SET_FACTORY_RESET_PROTECTION_POLICY,
                    OPERATION_SET_GLOBAL_PRIVATE_DNS,
                    OPERATION_SET_KEEP_UNINSTALLED_PACKAGES,
                    OPERATION_SET_KEYGUARD_DISABLED,
                    OPERATION_SET_LOCK_TASK_FEATURES,
                    OPERATION_SET_LOCK_TASK_PACKAGES,
                    OPERATION_SET_LOGOUT_ENABLED,
                    OPERATION_SET_PACKAGES_SUSPENDED,
                    OPERATION_SET_STATUS_BAR_DISABLED,
                    OPERATION_SET_SYSTEM_SETTING,
                    OPERATION_SET_SYSTEM_UPDATE_POLICY,
                    OPERATION_SET_USER_CONTROL_DISABLED_PACKAGES,
                    OPERATION_START_USER_IN_BACKGROUND,
                    OPERATION_STOP_USER,
                    OPERATION_SWITCH_USER,
                    OPERATION_UNINSTALL_CA_CERT,
                    OPERATION_WIPE_DATA
            };

            if (mHasTelephonyFeature) {
                operations = ArrayUtils.appendInt(operations, OPERATION_SET_OVERRIDE_APNS_ENABLED);
            }
            if (mHasSecureLockScreen) {
                operations = ArrayUtils.appendInt(operations,
                        OPERATION_SET_TRUST_AGENT_CONFIGURATION);
            }

            return operations;
        }

        @Override
        protected int[] getOverloadedSafetyAwareOperations() {
            return new int [] {
                OPERATION_WIPE_DATA
            };
        }

        @Override
        protected void runOperation(DevicePolicyManager dpm, ComponentName admin, int operation,
                boolean overloaded) {
            switch (operation) {
                case OPERATION_CREATE_AND_MANAGE_USER:
                    dpm.createAndManageUser(admin, /* name= */ null, admin, /* adminExtras= */ null,
                            NO_FLAGS);
                    break;
                case OPERATION_REBOOT:
                    dpm.reboot(admin);
                    break;
                case OPERATION_REMOVE_USER:
                    dpm.removeUser(admin, USER_HANDLE);
                    break;
                case OPERATION_REQUEST_BUGREPORT:
                    dpm.requestBugreport(admin);
                    break;
                case OPERATION_SET_APPLICATION_HIDDEN:
                    dpm.setApplicationHidden(admin, TEST_PACKAGE, /* hidden= */true);
                    break;
                case OPERATION_SET_APPLICATION_RESTRICTIONS:
                    dpm.setApplicationRestrictions(admin, TEST_PACKAGE, new Bundle());
                    break;
                case OPERATION_SET_CAMERA_DISABLED:
                    dpm.setCameraDisabled(admin, /* disabled= */ true);
                    break;
                case OPERATION_SET_FACTORY_RESET_PROTECTION_POLICY:
                    dpm.setFactoryResetProtectionPolicy(admin,
                            new FactoryResetProtectionPolicy.Builder()
                                    .setFactoryResetProtectionAccounts(TEST_ACCOUNTS)
                                    .setFactoryResetProtectionEnabled(false)
                                    .build());
                    break;
                case OPERATION_SET_GLOBAL_PRIVATE_DNS:
                    dpm.setGlobalPrivateDnsModeOpportunistic(admin);
                    break;
                case OPERATION_SET_KEEP_UNINSTALLED_PACKAGES:
                    dpm.setKeepUninstalledPackages(admin, TEST_PACKAGES);
                    break;
                case OPERATION_SET_KEYGUARD_DISABLED:
                    dpm.setKeyguardDisabled(admin, true);
                    break;
                case OPERATION_SET_LOCK_TASK_FEATURES:
                    dpm.setLockTaskFeatures(admin, NO_FLAGS);
                    break;
                case OPERATION_SET_LOCK_TASK_PACKAGES:
                    dpm.setLockTaskPackages(admin, new String[] { TEST_PACKAGE });
                    break;
                case OPERATION_SET_LOGOUT_ENABLED:
                    dpm.setLogoutEnabled(admin, /* enabled */ true);
                    break;
                case OPERATION_SET_OVERRIDE_APNS_ENABLED:
                    dpm.setOverrideApnsEnabled(admin, /* enabled */ true);
                    break;
                case OPERATION_SET_PACKAGES_SUSPENDED:
                    dpm.setPackagesSuspended(admin,  new String[] { TEST_PACKAGE },
                            /* suspend= */ true);
                    break;
                case OPERATION_SET_STATUS_BAR_DISABLED:
                    dpm.setStatusBarDisabled(admin, true);
                    break;
                case OPERATION_SET_SYSTEM_SETTING:
                    dpm.setSystemSetting(admin, ""TestSetting"", ""0"");
                    break;
                case OPERATION_SET_SYSTEM_UPDATE_POLICY:
                    dpm.setSystemUpdatePolicy(admin, null);
                    break;
                case OPERATION_SET_TRUST_AGENT_CONFIGURATION:
                    dpm.setTrustAgentConfiguration(admin, TEST_COMPONENT,
                            /* configuration= */ null);
                    break;
                case OPERATION_SET_USER_CONTROL_DISABLED_PACKAGES:
                    dpm.setUserControlDisabledPackages(admin, TEST_PACKAGES);
                    break;
                case OPERATION_START_USER_IN_BACKGROUND:
                    dpm.startUserInBackground(admin, USER_HANDLE);
                    break;
                case OPERATION_STOP_USER:
                    dpm.stopUser(admin, USER_HANDLE);
                    break;
                case OPERATION_SWITCH_USER:
                    dpm.switchUser(admin, USER_HANDLE);
                    break;
                case OPERATION_UNINSTALL_CA_CERT:
                    dpm.uninstallCaCert(admin, TEST_CA.getBytes());
                    break;
                case OPERATION_WIPE_DATA:
                    if (overloaded) {
                        dpm.wipeData(NO_FLAGS,
                                /* reason= */ ""DevicePolicySafetyCheckerIntegrationTest"");
                    } else {
                        dpm.wipeData(NO_FLAGS);
                    }
                    break;
                default:
                    throwUnsupportedOperationException(operation, overloaded);
            }
        }
    };

    /**
     * Tests that all safety-aware operations are properly implemented.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DevicePolicySafetyCheckerIntegrationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testCameraToggle_RestrictionSet_ResetSensorPrivacy"	""	"3: system user camera"	"public void testCameraToggle_RestrictionSet_ResetSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.CAMERA)) {
            return;
        }
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.CAMERA, true));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_CAMERA_TOGGLE);

        long deadline = System.nanoTime() + RESTRICTION_WAITING_TIMEOUT_NANO;
        while (System.nanoTime() < deadline) {
            if (!ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA))) {
                return;
            }
        }
        fail(""Camera sensor privacy did not get reset in time"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testMicrophoneToggle_RestrictionSet_ResetSensorPrivacy"	""	"2: system user"	"public void testMicrophoneToggle_RestrictionSet_ResetSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.MICROPHONE)) {
            return;
        }
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.MICROPHONE, true));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_MICROPHONE_TOGGLE);

        long deadline = System.nanoTime() + RESTRICTION_WAITING_TIMEOUT_NANO;
        while (System.nanoTime() < deadline) {
            if (!ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                    m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE))) {
                return;
            }
        }
        fail(""Microphone sensor privacy did not get reset in time"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testCameraToggle_RestrictionSet_CannotChangeSensorPrivacy"	""	"2: user camera"	"public void testCameraToggle_RestrictionSet_CannotChangeSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.CAMERA)) {
            return;
        }
        assertFalse(""Camera sensor privacy should be off by default"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_CAMERA_TOGGLE);
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.CAMERA, true));

        assertFalse(""Camera sensor privacy should not be enabled given admin restriction"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.CAMERA)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SensorToggleRestrictionTest"	"testMicrophoneToggle_RestrictionSet_CannotChangeSensorPrivacy"	""	"1: user"	"public void testMicrophoneToggle_RestrictionSet_CannotChangeSensorPrivacy() {
        if (!mSensorPrivacyManager.supportsSensorToggle(SensorPrivacyManager.Sensors.MICROPHONE)) {
            return;
        }
        assertFalse(""Microphone sensor privacy should be off by default"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));

        mDevicePolicyManager.addUserRestriction(getWho(), UserManager.DISALLOW_MICROPHONE_TOGGLE);
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mSensorPrivacyManager,
                m -> m.setSensorPrivacy(OTHER, SensorPrivacyManager.Sensors.MICROPHONE, true));

        assertFalse(""Microphone sensor privacy should not be enabled given admin restriction"",
                ShellIdentityUtils.invokeMethodWithShellPermissions(mSensorPrivacyManager,
                        m -> m.isSensorPrivacyEnabled(SensorPrivacyManager.Sensors.MICROPHONE)));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SensorToggleRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.PreDeviceOwnerTest"	"testListForegroundAffiliatedUsers_notDeviceOwner"	""	"1: user"	"public void testListForegroundAffiliatedUsers_notDeviceOwner() throws Exception {
        assertThrows(SecurityException.class,
                () -> mDevicePolicyManager.listForegroundAffiliatedUsers());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.DefaultSmsApplicationTest"	"testSetDefaultSmsApplication"	""	"2: system user"	"public void testSetDefaultSmsApplication() {
        // Must use a DPM associated with the current user because the Telephony.Sms methods will
        // return the app for the calling user, and on headless system user, mDevicePolicyManager
        // wraps the calls to the DeviceOwner user (which fails the test because the value didn't
        // change as expected).
        DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);

        String previousSmsAppName = Telephony.Sms.getDefaultSmsPackage(mContext);
        String newSmsAppName = ""android.telephony.cts.sms.simplesmsapp"";
        Log.v(TAG, ""testSetDefaultSmsApplication(): previous="" + previousSmsAppName
                + "", new="" + newSmsAppName + "", user="" + mContext.getUserId()
                + "", isAffiliated="" + dpm.isAffiliatedUser());

        dpm.setDefaultSmsApplication(getWho(), newSmsAppName);
        String defaultSmsApp = Telephony.Sms.getDefaultSmsPackage(mContext);
        assertWithMessage(""default app returned by Telephony.Sms after set by DPM"")
                .that(defaultSmsApp).isNotNull();
        assertWithMessage(""default app returned by Telephony.Sms after set by DPM"")
                .that(defaultSmsApp).isEqualTo(newSmsAppName);

        // Restore previous default sms application
        dpm.setDefaultSmsApplication(getWho(), previousSmsAppName);
        defaultSmsApp = Telephony.Sms.getDefaultSmsPackage(mContext);
        assertWithMessage(""default app returned by Telephony.Sms after restored by DPM"")
                .that(defaultSmsApp).isNotNull();
        assertWithMessage(""default app returned by Telephony.Sms after restored by DPM"")
                .that(defaultSmsApp).isEqualTo(previousSmsAppName);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DefaultSmsApplicationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserControlDisabledPackagesTest"	"testSetUserControlDisabledPackages"	""	"1: user"	"public void testSetUserControlDisabledPackages() throws Exception {
        ArrayList<String> protectedPackages = new ArrayList<>();
        protectedPackages.add(SIMPLE_APP_PKG);
        mDevicePolicyManager.setUserControlDisabledPackages(getWho(), protectedPackages);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserControlDisabledPackagesTest"	"testLaunchActivity"	""	"1: user"	"public void testLaunchActivity() throws Exception {
        // Launch an activity so that the app exits stopped state.
        Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.setClassName(SIMPLE_APP_PKG, SIMPLE_APP_ACTIVITY);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Log.d(TAG, ""Starting "" + intent + "" on user "" + getCurrentUser().getIdentifier());
        mContext.startActivityAsUser(intent, getCurrentUser());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserControlDisabledPackagesTest"	"testForceStopWithUserControlDisabled"	""	"1: user"	"public void testForceStopWithUserControlDisabled() throws Exception {
        final ArrayList<String> pkgs = new ArrayList<>();
        pkgs.add(SIMPLE_APP_PKG);
        // Check if package is part of UserControlDisabledPackages before checking if
        // package is stopped since it is a necessary condition to prevent stopping of
        // package

        assertThat(mDevicePolicyManager.getUserControlDisabledPackages(getWho()))
                .containsExactly(SIMPLE_APP_PKG);
        assertPackageStopped(/* stopped= */ false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserControlDisabledPackagesTest"	"testClearSetUserControlDisabledPackages"	""	"1: user"	"public void testClearSetUserControlDisabledPackages() throws Exception {
        final ArrayList<String> pkgs = new ArrayList<>();
        mDevicePolicyManager.setUserControlDisabledPackages(getWho(), pkgs);
        assertThat(mDevicePolicyManager.getUserControlDisabledPackages(getWho())).isEmpty();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserControlDisabledPackagesTest"	"testForceStopWithUserControlEnabled"	""	"1: user"	"public void testForceStopWithUserControlEnabled() throws Exception {
        assertPackageStopped(/* stopped= */ true);
        assertThat(mDevicePolicyManager.getUserControlDisabledPackages(getWho())).isEmpty();
    }

    private boolean isPackageStopped(String packageName) throws Exception {
        PackageInfo packageInfo = mContext.getPackageManager()
                .getPackageInfoAsUser(packageName, PackageManager.GET_META_DATA,
                        getCurrentUser().getIdentifier());
        boolean stopped = (packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_STOPPED)
                == ApplicationInfo.FLAG_STOPPED;
        Log.d(TAG, ""Application flags for "" + packageName + "" on user ""
                + getCurrentUser().getIdentifier() + "" = ""
                + Integer.toHexString(packageInfo.applicationInfo.flags) + "". Stopped: "" + stopped);
        return stopped;
    }

    private void assertPackageStopped(boolean stopped) throws Exception {
        assertWithMessage(""Package %s stopped for user %s"", SIMPLE_APP_PKG,
                getCurrentUser().getIdentifier())
                .that(isPackageStopped(SIMPLE_APP_PKG)).isEqualTo(stopped);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserControlDisabledPackagesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.WifiSetHttpProxyTest"	"testSetHttpProxy"	""	"1: system"	"public void testSetHttpProxy() {
        PackageManager packageManager = mContext.getPackageManager();
        if (!packageManager.hasSystemFeature(PackageManager.FEATURE_WIFI)) {
            // skip the test if WiFi is not supported
            return;
        }
        String retrievedPacProxyUrl = mWifiConfigCreator.addHttpProxyNetworkVerifyAndRemove(
                TEST_SSID, TEST_PAC_URL);
        assertWithMessage(""pacProxyUrl for SSID %s"", TEST_SSID).that(retrievedPacProxyUrl)
                .isEqualTo(TEST_PAC_URL);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiSetHttpProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserSessionTest"	"testSetStartUserSessionMessage"	""	"1: user"	"public void testSetStartUserSessionMessage() {
        mDevicePolicyManager.setStartUserSessionMessage(getWho(), START_SESSION_MESSAGE);
        assertEquals(START_SESSION_MESSAGE,
                mDevicePolicyManager.getStartUserSessionMessage(getWho()));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserSessionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserSessionTest"	"testSetEndUserSessionMessage"	""	"1: user"	"public void testSetEndUserSessionMessage() {
        mDevicePolicyManager.setEndUserSessionMessage(getWho(), END_SESSION_MESSAGE);
        assertEquals(END_SESSION_MESSAGE, mDevicePolicyManager.getEndUserSessionMessage(getWho()));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserSessionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserSessionTest"	"testClearStartUserSessionMessage"	""	"1: user"	"public void testClearStartUserSessionMessage() {
        mDevicePolicyManager.setStartUserSessionMessage(getWho(), START_SESSION_MESSAGE);
        mDevicePolicyManager.setStartUserSessionMessage(getWho(), null);
        assertNull(mDevicePolicyManager.getStartUserSessionMessage(getWho()));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserSessionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.UserSessionTest"	"testClearEndUserSessionMessage"	""	"1: user"	"public void testClearEndUserSessionMessage() {
        mDevicePolicyManager.setEndUserSessionMessage(getWho(), END_SESSION_MESSAGE);
        mDevicePolicyManager.setEndUserSessionMessage(getWho(), null);
        assertNull(mDevicePolicyManager.getEndUserSessionMessage(getWho()));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/UserSessionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testRetrieveSecurityLogs"	""	"1: system"	"public void testRetrieveSecurityLogs() throws Exception {
        Log.i(TAG, ""testRetrieveSecurityLogs()"");

        sleep(1);
        final long previousTimestamp = mDevicePolicyManager.getLastSecurityLogRetrievalTime();

        mDevicePolicyManager.setSecurityLoggingEnabled(getWho(), true);

        long timeBefore = System.currentTimeMillis();
        mDevicePolicyManager.retrieveSecurityLogs(getWho());
        long timeAfter = System.currentTimeMillis();

        final long firstTimestamp = mDevicePolicyManager.getLastSecurityLogRetrievalTime();

        assertTimeStamps(timeBefore, previousTimestamp, firstTimestamp, timeAfter);

        sleep(2);
        timeBefore = System.currentTimeMillis();
        final boolean preBootSecurityLogsRetrieved =
                mDevicePolicyManager.retrievePreRebootSecurityLogs(getWho()) != null;
        timeAfter = System.currentTimeMillis();

        final long secondTimestamp = mDevicePolicyManager.getLastSecurityLogRetrievalTime();
        if (preBootSecurityLogsRetrieved) {
            // If the device supports pre-boot security logs, verify that retrieving them updates
            // the timestamp.
            assertTimeStamps(timeBefore, firstTimestamp, secondTimestamp, timeAfter);
        } else {
            // If the device does not support pre-boot security logs, verify that the attempt to
            // retrieve them does not update the timestamp.
            assertWithMessage(""timestamp when device does not support pre-boot security logs"")
                    .that(firstTimestamp).isEqualTo(secondTimestamp);
        }
    }

    /**
     * Test: Requesting a bug report should update the corresponding timestamp.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testRequestBugreport"	""	"1: system"	"public void testRequestBugreport() throws Exception {
        Log.i(TAG, ""testRequestBugreport()"");

        // This test leaves a notification which will block future tests that request bug reports
        // to fix this - we dismiss the bug report before returning
        CountDownLatch notificationDismissedLatch = initTestRequestBugreport();

        sleep(1);
        final long previousTimestamp = mDevicePolicyManager.getLastBugReportRequestTime();

        final long timeBefore = System.currentTimeMillis();
        mDevicePolicyManager.requestBugreport(getWho());
        final long timeAfter = System.currentTimeMillis();

        final long newTimestamp = mDevicePolicyManager.getLastBugReportRequestTime();
        assertTimeStamps(timeBefore, previousTimestamp, newTimestamp, timeAfter);

        cleanupTestRequestBugreport(notificationDismissedLatch);
    }

    private CountDownLatch initTestRequestBugreport() {
        CountDownLatch notificationDismissedLatch = new CountDownLatch(1);
        NotificationListener.getInstance().addListener((sbt) -> {
            Log.i(TAG, ""Received notification: "" + sbt);
            // The notification we are looking for is the one which confirms the bug report is
            // ready and asks for consent to send it
            if (sbt.getPackageName().equals(""android"") &&
                    sbt.getTag().equals(""DevicePolicyManager"") &&
                    sbt.getNotification().actions != null) {
                try {
                    // The first action is to decline
                    sbt.getNotification().actions[0].actionIntent.send();
                    notificationDismissedLatch.countDown();
                } catch (PendingIntent.CanceledException e) {
                    String msg = ""Could not dismiss bug report notification"";
                    Log.e(TAG, msg, e);
                    fail(msg);
                }
            }
        });
        return notificationDismissedLatch;
    }

    private void cleanupTestRequestBugreport(CountDownLatch notificationDismissedLatch)
            throws Exception {
        Log.d(TAG, ""Waiting "" + NOTIFICATION_TIMEOUT_MS + ""ms for bugreport notification"");
        if (!notificationDismissedLatch.await(NOTIFICATION_TIMEOUT_MS, TimeUnit.MILLISECONDS)) {
            String msg = ""Didn't receive bugreport notification in "" + NOTIFICATION_TIMEOUT_MS
                    + "" ms"";
            Log.e(TAG, msg);
            fail(msg);
        }
        NotificationListener.getInstance().clearListeners();
    }

    /**
     * Test: Retrieving network logs should update the corresponding timestamp.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testGetLastNetworkLogRetrievalTime"	""	"1: system"	"public void testGetLastNetworkLogRetrievalTime() throws Exception {
        Log.i(TAG, ""testGetLastNetworkLogRetrievalTime()"");

        sleep(1);
        final long previousTimestamp = mDevicePolicyManager.getLastSecurityLogRetrievalTime();

        mDevicePolicyManager.setNetworkLoggingEnabled(getWho(), true);

        long timeBefore = System.currentTimeMillis();
        mDevicePolicyManager.retrieveNetworkLogs(getWho(), 0 /* batchToken */);
        long timeAfter = System.currentTimeMillis();

        final long newTimestamp = mDevicePolicyManager.getLastNetworkLogRetrievalTime();
        assertTimeStamps(timeBefore, previousTimestamp, newTimestamp, timeAfter);
    }

    /**
     * Test: The Device Owner should be able to set and retrieve the name of the organization
     * managing the device.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testIsDeviceManaged"	""	"1: user"	"public void testIsDeviceManaged() throws Exception {
        Log.i(TAG, ""testIsDeviceManaged()"");

        assertWithMessage(""dpm.isDeviceManaged()"").that(mDevicePolicyManager.isDeviceManaged())
                .isTrue();
    }

    /**
     * Test: It should be recored whether the Device Owner or the user set the current IME.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testIsDefaultInputMethodSet"	""	"1: user"	"public void testIsDefaultInputMethodSet() throws Exception {
        Log.i(TAG, ""testIsDefaultInputMethodSet()"");

        final String setting = Settings.Secure.DEFAULT_INPUT_METHOD;
        final String ime = getSecureSettings(setting);

        setSecureSettings(setting, ""com.test.1"");
        sleep(500);
        assertWithMessage(""dpm.isCurrentInputMethodSetByOwner()"")
                .that(mDevicePolicyManager.isCurrentInputMethodSetByOwner()).isFalse();

        mDevicePolicyManager.setSecureSetting(getWho(), setting, ""com.test.2"");
        sleep(500);
        assertWithMessage(""%s.isCurrentInputMethodSetByOwner()"", mDevicePolicyManager)
                .that(mDevicePolicyManager.isCurrentInputMethodSetByOwner()).isTrue();

        setSecureSettings(setting, ime);
        sleep(500);
        assertWithMessage(""%s.isCurrentInputMethodSetByOwner()"", mDevicePolicyManager)
                .that(mDevicePolicyManager.isCurrentInputMethodSetByOwner()).isFalse();
    }

    /**
     * Test: It should be recored whether the Device Owner or the user installed a CA cert.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.AdminActionBookkeepingTest"	"testGetPolicyInstalledCaCerts"	""	"1: user"	"public void testGetPolicyInstalledCaCerts() throws Exception {
        Log.i(TAG, ""testGetPolicyInstalledCaCerts()"");

        final byte[] rawCert = TestCertificates.TEST_CA.getBytes();
        final Certificate cert = CertificateFactory.getInstance(""X.509"")
                .generateCertificate(new ByteArrayInputStream(rawCert));

        // Install a CA cert.
        KeyStore keyStore = KeyStore.getInstance(""AndroidCAStore"");
        keyStore.load(null, null);
        assertWithMessage(""keystore.getCertificateAlias()"").that(keyStore.getCertificateAlias(cert))
                .isNull();
        assertWithMessage(""dpm.installCaCert()"")
                .that(mDevicePolicyManager.installCaCert(getWho(), rawCert)).isTrue();
        final String alias = keyStore.getCertificateAlias(cert);
        assertWithMessage(""keystore.getCertificateAlias()"").that(alias).isNotNull();

        // Verify that the CA cert was marked as installed by the Device Owner.
        verifyOwnerInstalledStatus(alias, true);

        // Uninstall the CA cert.
        mDevicePolicyManager.uninstallCaCert(getWho(), rawCert);

        // Verify that the CA cert is no longer marked as installed by the Device Owner.
        verifyOwnerInstalledStatus(alias, false);
    }

    private void verifyOwnerInstalledStatus(String alias, boolean expectOwnerInstalled) {
        final UserHandle user = Process.myUserHandle();
        final List<String> ownerInstalledCerts =
                mDevicePolicyManager.getOwnerInstalledCaCerts(user);
        assertWithMessage(""dpm.getOwnerInstalledCaCerts(%s)"", user).that(ownerInstalledCerts)
                .isNotNull();
        if (expectOwnerInstalled) {
            assertWithMessage(""dpm.getOwnerInstalledCaCerts(%s)"", user).that(ownerInstalledCerts)
                    .contains(alias);
        } else {
            assertWithMessage(""dpm.getOwnerInstalledCaCerts(%s)"", user).that(ownerInstalledCerts)
                    .doesNotContain(alias);
        }
    }

    private void sleep(int durationMs) throws InterruptedException {
        Log.v(TAG, ""Sleeping for "" + durationMs + "" ms on thread "" + Thread.currentThread());
        Thread.sleep(durationMs);
        Log.v(TAG, ""Woke up"");
    }

    private void assertTimeStamps(long before, long timeStamp1, long timeStamp2, long after) {
        assertWithMessage(""first and second timestamp order"").that(timeStamp2)
                .isGreaterThan(timeStamp1);
        assertWithMessage(""second timestamp range"").that(timeStamp2)
                .isIn(Range.closed(before, after));
    }

    private void setSecureSettings(String name, String value) {
        final ContentResolver resolver = getContext().getContentResolver();
        Log.d(TAG, ""Setting '"" + name + ""'='"" + value + ""' on user "" + getContext().getUserId());
        Settings.Secure.putString(resolver, name , value);
        Log.v(TAG, ""Set"");
    }

    private String getSecureSettings(String name) {
        final ContentResolver resolver = getContext().getContentResolver();
        String value = Settings.Secure.getString(resolver, name);
        Log.d(TAG, ""Got '"" + name + ""' for user "" + getContext().getUserId() + "": "" + value);
        return value;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.SetLocationEnabledTest"	"testSetLocationEnabled"	""	"1: user"	"public void testSetLocationEnabled() throws Exception {
        boolean enabled = mLocationManager.isLocationEnabled();
        if (enabled) {
            Log.d(TAG, ""location is initially enabled for user "" + mUserId);
            runDisableLocationFirst();
        } else {
            Log.d(TAG, ""location is initially disabled for user "" + mUserId);
            runEnableLocationFirst();
        }
    }

    private void runDisableLocationFirst() throws Exception {
        Log.v(TAG, ""runDisableLocationFirst()"");

        setLocationEnabledAndWaitIfNecessary(DISABLED, /* wait= */ !mIsAutomotive);
        assertWithMessage(""isLocationEnabled()"").that(mLocationManager.isLocationEnabled())
                .isEqualTo(mIsAutomotive ? ENABLED : DISABLED);

        setLocationEnabledAndWaitIfNecessary(ENABLED, /* wait= */ !mIsAutomotive);
        assertWithMessage(""isLocationEnabled()"").that(mLocationManager.isLocationEnabled())
                .isTrue();
    }

    private void runEnableLocationFirst() throws Exception {
        Log.v(TAG, ""runEnableLocationFirst()"");

        setLocationEnabledAndWaitIfNecessary(ENABLED, /* wait= */ true);
        assertWithMessage(""isLocationEnabled()"").that(mLocationManager.isLocationEnabled())
                .isTrue();

        setLocationEnabledAndWaitIfNecessary(DISABLED, /* wait= */ !mIsAutomotive);
        assertWithMessage(""isLocationEnabled()"").that(mLocationManager.isLocationEnabled())
                .isEqualTo(mIsAutomotive ? ENABLED : DISABLED);
    }

    private void setLocationEnabledAndWaitIfNecessary(boolean enabled, boolean wait)
            throws Exception {
        if (!wait) {
            Log.d(TAG, ""setting location to "" + enabled);
            mDevicePolicyManager.setLocationEnabled(getWho(), enabled);
            Log.d(TAG, ""not waiting for "" + LocationManager.MODE_CHANGED_ACTION + "" intent"");
            return;
        }

        CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                boolean actualEnabled = intent
                        .getBooleanExtra(LocationManager.EXTRA_LOCATION_ENABLED, enabled);
                Log.d(TAG, ""received intent "" + intent.getAction() + "": enabled="" + actualEnabled);
                if (actualEnabled != enabled) {
                    Log.e(TAG, ""Invalid value on extra "" + LocationManager.EXTRA_LOCATION_ENABLED
                            + "": "" + actualEnabled);
                    return;
                }
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(LocationManager.MODE_CHANGED_ACTION));
        try {
            Log.d(TAG, ""setting location to "" + enabled);
            mDevicePolicyManager.setLocationEnabled(getWho(), enabled);
            Log.d(TAG, ""Waiting for "" + LocationManager.MODE_CHANGED_ACTION + "" intent"");
            assertWithMessage(""%s intent reveiced in %sms"", LocationManager.MODE_CHANGED_ACTION,
                    TIMEOUT_MS).that(latch.await(TIMEOUT_MS, TimeUnit.MILLISECONDS)).isTrue();
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetLocationEnabledTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.StaticProxyTest"	"testClearProxySelector"	""	"2: system direct"	"public void testClearProxySelector() throws URISyntaxException {
    URI uri = new URI(""http://somedomain.com/test/my/url"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Direct must be returned"", newArrayList(Proxy.NO_PROXY), list);
  }

  /**
   * Verify that the java system properties are all full of the
   * correct proxy information.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/StaticProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.StaticProxyTest"	"testProxyJavaProperties"	""	"1: system"	"public void testProxyJavaProperties() throws Exception {
    testBroadcast();

    waitForSetProxySysProp();
    assertEquals(System.getProperty(""http.proxyHost""), mProxyHost);
    assertEquals(System.getProperty(""https.proxyHost""), mProxyHost);
    assertEquals(System.getProperty(""http.proxyPort""), PROXY_PORT + """");
    assertEquals(System.getProperty(""https.proxyPort""), PROXY_PORT + """");
    assertEquals(System.getProperty(""http.nonProxyHosts""), EXCL_LIST);
    assertEquals(System.getProperty(""https.nonProxyHosts""), EXCL_LIST);
  }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/StaticProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.StaticProxyTest"	"testBroadcast"	""	"1: direct"	"public void testBroadcast() throws Exception {
    ProxyInfo proxy = ProxyInfo.buildDirectProxy(mProxyHost, PROXY_PORT, mExclList);
    assertTrue(""No broadcast after setting proxy"", setProxyAndWaitForBroadcast(proxy));

    assertTrue(isProxyStatic());
    assertNotNull(""Broadcast must contain proxy"", mProxy);
    assertEquals(ProxyInfo.buildDirectProxy(mProxyHost, PROXY_PORT, mExclList), mProxy);
  }

  /**
   * Verify that we get a clear broadcast after we clear the global
   * proxy.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/StaticProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.StaticProxyTest"	"testProxySelector"	""	"1: direct"	"public void testProxySelector() throws Exception {
    testBroadcast();

    waitForSetProxySysProp();
    URI uri = new URI(""http://somedomain.com/test/my/url"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Proxy must be returned"", newArrayList(
        new Proxy(Type.HTTP,
            InetSocketAddress.createUnresolved(mProxyHost, PROXY_PORT))),
        list);
  }

  /**
   * Verify that the excluded host gets a direct result from
   * the proxy selector.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/StaticProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.StaticProxyTest"	"testProxySelectorExclude"	""	"1: direct"	"public void testProxySelectorExclude() throws Exception {
    testBroadcast();

    waitForSetProxySysProp();
    URI uri = new URI(""http://example.com/test/my/url"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Direct must be returned"", newArrayList(Proxy.NO_PROXY), list);
  }

  /**
   * Verify that without a proxy the proxy selector is returning
   * a direct result.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/StaticProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testFileLoaded"	""	"1: direct"	"public void testFileLoaded() throws Exception {
    mPacServer.setPacFile(DIRECT_PAC);
    setPacURLAndWaitForDownload();
  }

  /**
   * Make sure when we set the PAC file URL we get a broadcast
   * containing the proxy info.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testBroadcast"	""	"1: direct"	"public void testBroadcast() throws Exception {
    mPacServer.setPacFile(DIRECT_PAC);
    setPacURLAndWaitForDownload();

    assertNotNull(""Broadcast must contain proxy"", mProxy);
    assertEquals(""Proxy must contain PAC URL"", mPacServer.getPacURL(),
        mProxy.getPacFileUrl().toString());
  }

  /**
   * Make sure that we also get a broadcast after we clear the
   * PAC proxy settings.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testProxyPassthrough"	""	"1: direct"	"public void testProxyPassthrough() throws Exception {
    mPacServer.setPacFile(DIRECT_PAC);
    setPacURLAndWaitForDownload();

    waitForSetProxySysProp();

    PassthroughTestHelper ptt = new PassthroughTestHelper(mProxy);
    ptt.runTest();
  }

  /**
   * Verify that for a simple PAC that returns direct the
   * result is direct.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testDirect"	""	"1: direct"	"public void testDirect() throws Exception {
    testBroadcast();

    waitForSetProxySysProp();
    URI uri = new URI(""http://localhost/test/my/url"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Proxy must be direct"", newArrayList(Proxy.NO_PROXY), list);
  }

  /**
   * Test a PAC file that returns a list of proxies, including one direct.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testLocalPlusDirect"	""	"1: direct"	"public void testLocalPlusDirect() throws Exception {
    mPacServer.setPacFile(LOCAL_PLUS_DIRECT_PAC);
    setPacURLAndWaitForDownload();

    waitForSetProxySysProp();

    URI uri = new URI(""http://localhost/test/my/url"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Must return multiple proxies"", newArrayList(
        new Proxy(Type.HTTP, InetSocketAddress.createUnresolved(""localhost"", 8080)),
        new Proxy(Type.HTTP, InetSocketAddress.createUnresolved(""localhost"", 8081)),
        Proxy.NO_PROXY), list);
  }

  /**
   * Tests a PAC file that returns different proxies depending on
   * the host that is being accessed.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testUrlPassthrough"	""	"1: direct"	"public void testUrlPassthrough() throws Exception {
    mPacServer.setPacFile(URL_PAC);
    setPacURLAndWaitForDownload();

    waitForSetProxySysProp();

    URI uri = new URI(""http://localhost/my/url/"");

    ProxySelector selector = ProxySelector.getDefault();
    List<Proxy> list = selector.select(uri);
    assertEquals(""Correct URL returns proxy"", newArrayList(
        new Proxy(Type.HTTP, InetSocketAddress.createUnresolved(""localhost"", 8080))),
        list);

    uri = new URI(""http://localhost/not/my/url/"");
    list = selector.select(uri);
    assertEquals(""Incorrect URL should return DIRECT"",
        newArrayList(Proxy.NO_PROXY), list);
  }

  /**
   * Test a PAC file with toUpperCase/toLowerCase manipulations.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceowner.proxy.PacProxyTest"	"testClearBroadcast"	""	"1: apps"	"public void testClearBroadcast() throws Exception {
    testBroadcast();
    assertTrue(""No broadcast after clearing proxy."", clearProxyAndWaitForBroadcast());
    assertTrue(isProxyEmpty());
  }

  /**
   * Verify that the locally-hosted android backup proxy is up and
   * running.
   * Android hosts a proxy server that provides legacy support for apps that
   * don't use the apache HTTP stack, but still read the static proxy
   * settings.  The static settings point to a server that will handle
   * the PAC parsing for them.
   */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/proxy/PacProxyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.packageinstaller.ManualPackageInstallTest"	"testManualInstallBlocked"	""	"2: system user"	"public void testManualInstallBlocked() throws Exception {
        synchronized (mPackageInstallerTimeoutLock) {
            mCallbackReceived = false;
            mCallbackStatus = PACKAGE_INSTALLER_STATUS_UNDEFINED;
        }
        // Calls the original installPackage which does not click through the install button.
        Log.d(TAG, ""Installing "" + TEST_APP_LOCATION);
        super.installPackage(TEST_APP_LOCATION);
        synchronized (mPackageInstallerTimeoutLock) {
            try {
                mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                Log.e(TAG, ""Interrupted"", e);
            }
            assertTrue(mCallbackReceived);
            assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);
        }

        mCallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Log.d(TAG, ""Starting "" + mCallbackIntent + "" on user "" + UserHandle.myUserId());
        mContext.startActivity(mCallbackIntent);

        automateDismissInstallBlockedDialog();

        // Assuming installation is not synchronous, we should wait a while before checking.
        Thread.sleep(INSTALL_WAIT_TIME);
        assertFalse(isPackageInstalled(TEST_APP_PKG));
    }

    @Override
    protected void installPackage(String packageLocation) throws Exception {
        super.installPackage(packageLocation);

        synchronized (mPackageInstallerTimeoutLock) {
            try {
                mPackageInstallerTimeoutLock.wait(PACKAGE_INSTALLER_TIMEOUT_MS);
            } catch (InterruptedException e) {
            }
            assertTrue(mCallbackReceived);
            assertEquals(PackageInstaller.STATUS_PENDING_USER_ACTION, mCallbackStatus);
        }

        // Use a receiver to listen for package install.
        synchronized (mPackageInstallerTimeoutLock) {
            mCallbackReceived = false;
            mCallbackStatus = PACKAGE_INSTALLER_STATUS_UNDEFINED;
        }

        mCallbackIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(mCallbackIntent);

        automateInstallClick();
    }

    private void automateInstallClick() {
        mDevice.wait(Until.hasObject(INSTALL_BUTTON_SELECTOR), AUTOMATOR_WAIT_TIMEOUT);
        UiObject2 button = mDevice.findObject(INSTALL_BUTTON_SELECTOR);
        assertNotNull(""Install button not found"", button);
        button.click();
    }

    private void automateDismissInstallBlockedDialog() {
        BySelector selector = getPopUpImageSelector();
        mDevice.wait(Until.hasObject(selector), AUTOMATOR_WAIT_TIMEOUT);
        UiObject2 icon = mDevice.findObject(selector);
        assertNotNull(""Policy transparency dialog icon not found: "" + selector, icon);
        // ""OK"" button only present in the dialog if it is blocked by policy.
        UiObject2 button = mDevice.findObject(getPopUpButtonSelector());
        assertNotNull(""OK button not found"", button);
        button.click();
    }

    private String getSettingsPackageName() {
        String settingsPackageName = mIsAutomotive
                ? ""com.android.car.settings""
                : ""com.android.settings"";
        mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");
        try {
            ResolveInfo resolveInfo = mPackageManager.resolveActivityAsUser(
                    new Intent(Settings.ACTION_SETTINGS), PackageManager.MATCH_SYSTEM_ONLY,
                    UserHandle.USER_SYSTEM);
            if (resolveInfo != null && resolveInfo.activityInfo != null) {
                settingsPackageName = resolveInfo.activityInfo.packageName;
            }
        } finally {
            mUiAutomation.dropShellPermissionIdentity();
        }
        Log.d(TAG, ""getSettingsPackageName(): returning "" + settingsPackageName);
        return settingsPackageName;
    }

    private BySelector getPopUpButtonSelector() {
        return By.clazz(android.widget.Button.class.getName())
                .res(""android:id/button1"")
                .pkg(getSettingsPackageName());
    }

    private BySelector getPopUpImageSelector() {
        final String settingsPackageName = getSettingsPackageName();
        final String resId = mIsAutomotive ? ""car_ui_alert_icon"" : ""admin_support_icon"";
        return By.clazz(android.widget.ImageView.class.getName())
                .res(settingsPackageName + "":id/"" + resId)
                .pkg(settingsPackageName);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.TransferDeviceOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	"2: system camera"	"public void testTransferPoliciesAreRetainedAfterTransfer() {
        assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.isDeviceOwnerApp(mIncomingComponentName.getPackageName()));
        assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));
        assertEquals(Collections.singletonList(""test.package""),
                mDevicePolicyManager.getKeepUninstalledPackages(mIncomingComponentName));
        assertEquals(
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,
                mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));
        assertEquals(123, mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));
        assertSystemPoliciesEqual(SystemUpdatePolicy.createPostponeInstallPolicy(),
                mDevicePolicyManager.getSystemUpdatePolicy());
        assertThrows(SecurityException.class, () -> {
            mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);
        });
    }

    private void assertSystemPoliciesEqual(SystemUpdatePolicy policy1, SystemUpdatePolicy policy2) {
        assertTrue(policy1.getPolicyType() == policy2.getPolicyType()
                && policy1.getInstallWindowStart() == policy2.getInstallWindowStart()
                && policy1.getInstallWindowEnd() == policy2.getInstallWindowEnd());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferDeviceOwnerIncomingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.TransferProfileOwnerIncomingTest"	"testTransferPoliciesAreRetainedAfterTransfer"	""	"1: camera"	"public void testTransferPoliciesAreRetainedAfterTransfer() {
        int passwordLength = 123;
        int passwordExpirationTimeout = 456;
        assertTrue(mDevicePolicyManager.isAdminActive(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.isProfileOwnerApp(mIncomingComponentName.getPackageName()));
        assertTrue(mDevicePolicyManager.getCameraDisabled(mIncomingComponentName));
        assertTrue(mDevicePolicyManager.getCrossProfileCallerIdDisabled(mIncomingComponentName));
        assertEquals(
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC,
                mDevicePolicyManager.getPasswordQuality(mIncomingComponentName));
        assertEquals(
                passwordLength,
                mDevicePolicyManager.getPasswordMinimumLength(mIncomingComponentName));


        DevicePolicyManager targetParentProfileInstance =
                mDevicePolicyManager.getParentProfileInstance(mIncomingComponentName);
        if (mHasSecureLockScreen) {
            assertEquals(
                    passwordExpirationTimeout,
                    targetParentProfileInstance.getPasswordExpirationTimeout(mIncomingComponentName));
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/TransferProfileOwnerIncomingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.transferowner.DeviceAndProfileOwnerTransferIncomingTest"	"testIsAffiliationId1"	""	"1: system"	"public void testIsAffiliationId1() {
        assertEquals(""id.number.1"", getAffiliationId());
    }

    private String getAffiliationId() {
        ComponentName admin = mIncomingComponentName;
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> affiliationIds = dpm.getAffiliationIds(admin);
        assertNotNull(affiliationIds);
        assertEquals(1, affiliationIds.size());
        return affiliationIds.iterator().next();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/TransferOwnerIncomingApp/src/com/android/cts/transferowner/DeviceAndProfileOwnerTransferIncomingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testSetNonVpnAlwaysOn"	""	"1: system"	"public void testSetNonVpnAlwaysOn() throws Exception {
        // Treat this CTS DPC as an non-vpn app, since it doesn't register
        // android.net.VpnService intent filter in AndroidManifest.xml.
        try {
            mDevicePolicyManager.setAlwaysOnVpnPackage(
                    ADMIN_RECEIVER_COMPONENT, mPackageName, true);
            fail(""setAlwaysOnVpnPackage should not accept non-vpn package"");
        } catch (UnsupportedOperationException e) {
            // success
        }
        assertNull(mDevicePolicyManager.getAlwaysOnVpnPackage(ADMIN_RECEIVER_COMPONENT));
    }

    private void waitForConnectivity(String message) throws InterruptedException {
        long deadline = System.nanoTime() + CONNECTIVITY_WAIT_TIME_NS;
        while (System.nanoTime() < deadline) {
            try {
                new Socket(CONNECTIVITY_CHECK_HOST, 80);
                // Domain resolved, we have connectivity.
                return;
            } catch (IOException e) {
                // Log.e(String, String, Throwable) will swallow UnknownHostException,
                // so manually print it out here.
                Log.e(TAG, ""No connectivity yet: "" + e.toString());
                Thread.sleep(2000);
            }
        }
        fail(""Connectivity isn't available: "" + message);
    }

    private void waitForNoConnectivity(String message) throws Exception {
        long deadline = System.nanoTime() + CONNECTIVITY_WAIT_TIME_NS;
        while (System.nanoTime() < deadline) {
            try {
                new Socket(CONNECTIVITY_CHECK_HOST, 80);
                // Domain resolved, we have connectivity.
            } catch (IOException e) {
                // No connectivity
                return;
            }
            Thread.sleep(2000);
        }
        fail(""Connectivity still available after deadline: "" + message);
    }

    private void assertConnectivity(boolean shouldHaveConnectivity, String message) {
        try {
            new Socket(CONNECTIVITY_CHECK_HOST, 80);
            if (!shouldHaveConnectivity) {
                fail(""Connectivity available while not expected: "" + message);
            }
        } catch (IOException e) {
            if (shouldHaveConnectivity) {
                Log.e(TAG, ""Connectivity check failed"", e);
                fail(""Connectivity isn't available while expected: "" + message);
            }
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testDisallowConfigVpn"	""	"1: user"	"public void testDisallowConfigVpn() throws Exception {
        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_CONFIG_VPN);
        try {
            testAlwaysOnVpn();
        } finally {
            // clear the user restriction
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_CONFIG_VPN);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testAllowedApps"	""	"1: apps"	"public void testAllowedApps() throws Exception {
        final Bundle restrictions = new Bundle();
        restrictions.putStringArray(RESTRICTION_ALLOWED, new String[] {mPackageName});
        mDevicePolicyManager.setApplicationRestrictions(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE,
                restrictions);
        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ true,  /* lockdown */ true, /* allowlist */ false);
        assertTrue(VpnTestHelper.isNetworkVpn(mContext));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AlwaysOnVpnTest"	"testDisallowedApps"	""	"1: apps"	"public void testDisallowedApps() throws Exception {
        final Bundle restrictions = new Bundle();
        restrictions.putStringArray(RESTRICTION_DISALLOWED, new String[] {mPackageName});
        mDevicePolicyManager.setApplicationRestrictions(ADMIN_RECEIVER_COMPONENT, VPN_PACKAGE,
                restrictions);
        VpnTestHelper.waitForVpn(mContext, VPN_PACKAGE,
                /* usable */ false,  /* lockdown */ true, /* allowlist */ false);
        assertFalse(VpnTestHelper.isNetworkVpn(mContext));
    }

    // Tests that changes to lockdown allowlist are applied correctly."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AlwaysOnVpnTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testSetNotExistCertInstallerPackage"	""	"1: user"	"public void testSetNotExistCertInstallerPackage() throws Exception {
        boolean shouldThrowException = getTargetApiLevel() >= Build.VERSION_CODES.N;
        try {
            mDpm.setCertInstallerPackage(
                    ADMIN_RECEIVER_COMPONENT, NOT_EXIST_CERT_INSTALLER_PACKAGE);
            if (shouldThrowException) {
                fail(""Did not throw IllegalArgumentException"");
            }
        } catch (IllegalArgumentException ex) {
            if (!shouldThrowException) {
                fail(""Should not throw exception"");
            }
            MoreAsserts.assertContainsRegex(""is not installed on the current user"",
                        ex.getMessage());
        }
        if (!shouldThrowException) {
            assertTrue(""Cert install delegate was not set on uninstalled package"",
                    NOT_EXIST_CERT_INSTALLER_PACKAGE.equals(
                            mDpm.getCertInstallerPackage(ADMIN_RECEIVER_COMPONENT)));
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest"	"testCanReadEnrollmentSpecificId"	""	"1: user"	"public void testCanReadEnrollmentSpecificId() throws InterruptedException {
        // Set the organization ID only if not already set, to avoid potential conflict
        // with other tests.
        if (mDpm.getEnrollmentSpecificId().isEmpty()) {
            mDpm.setOrganizationId(""SOME_ID"");
        }
        mDpm.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, CERT_INSTALLER_PACKAGE,
                CERT_INSTALL_SCOPES);

        readEnrollmentId();
        assertResult(""testCanReadEnrollmentSpecificId"", true);
    }

    private void installCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_INSTALL_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void removeCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_REMOVE_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void verifyCaCert(byte[] cert) {
        Intent intent = new Intent();
        intent.setAction(ACTION_VERIFY_CERT);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void verifyOwnerInstalledStatus(String alias, boolean expectOwnerInstalled) {
        final List<String> ownerInstalledCerts =
                mDpm.getOwnerInstalledCaCerts(Process.myUserHandle());
        assertNotNull(ownerInstalledCerts);
        assertEquals(expectOwnerInstalled, ownerInstalledCerts.contains(alias));
    }

    private void assertResult(String testName, Boolean expectSuccess) throws InterruptedException {
        assertTrue(""Cert installer did not respond in time."",
                mAvailableResultSemaphore.tryAcquire(180, TimeUnit.SECONDS));
        synchronized (this) {
            if (expectSuccess) {
                assertTrue(testName + "" failed unexpectedly."", mReceivedResult);
                assertNull(testName + "" raised exception"", mReceivedException);
            } else {
                assertFalse(testName + "" succeeded unexpectedly."", mReceivedResult);
                assertTrue(testName + "" did not raise SecurityException"",
                        mReceivedException != null &&
                        mReceivedException instanceof SecurityException);
            }
        }
    }

    private void installKeyPair(String key, String cert, String alias) {
        Intent intent = new Intent();
        intent.setAction(ACTION_INSTALL_KEYPAIR);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.putExtra(EXTRA_CERT_DATA, cert);
        intent.putExtra(EXTRA_KEY_DATA, key);
        intent.putExtra(EXTRA_KEY_ALIAS, alias);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }

    private void readEnrollmentId() {
        Intent intent = new Intent();
        intent.setAction(ACTION_READ_ENROLLMENT_SPECIFIC_ID);
        intent.setComponent(CERT_INSTALLER_COMPONENT);
        intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        mContext.sendBroadcast(intent);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AssistScreenCaptureDisabledTest"	"testScreenCapturePossible_assist"	""	"1: interaction"	"public void testScreenCapturePossible_assist() throws Exception {
        assertScreenCapturePossible(true);
    }

    private void assertScreenCapturePossible(boolean possible) throws InterruptedException {
        // Wait until voice interaction service is ready by sending broadcast to ask for status.
        Intent checkIsReadyIntent = new Intent(ACTION_CHECK_IS_READY);
        checkIsReadyIntent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND);
        checkIsReadyIntent.setPackage(ASSIST_PACKAGE);
        boolean isAssistReady = false;
        for (int i = 0; i < MAX_ATTEMPTS_COUNT && !isAssistReady; i++) {
            Log.d(TAG, ""assertScreenCapturePossible: wait for assist service ready, attempt "" + i);
            final LinkedBlockingQueue<Boolean> q = new LinkedBlockingQueue<>();
            mContext.sendOrderedBroadcast(checkIsReadyIntent, null, new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    q.offer(getResultCode() == Activity.RESULT_OK);
                }
            }, null, Activity.RESULT_CANCELED, null, null);
            Boolean result = q.poll(WAIT_IN_SECOND, TimeUnit.SECONDS);
            isAssistReady = result != null && result;
        }
        Assert.assertTrue(isAssistReady);

        // Send broadcast to voice interaction service and ask for screnshot.
        BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(
                mContext, ACTION_HANDLE_SCREENSHOT);
        try {
            receiver.register();
            Intent showSessionIntent = new Intent(ACTION_SHOW_SESSION);
            showSessionIntent.setPackage(ASSIST_PACKAGE);
            mContext.sendBroadcast(showSessionIntent);
            Intent screenShotIntent = null;
            for (int i = 0; i < MAX_ATTEMPTS_COUNT && (screenShotIntent == null); ++ i) {
                Log.d(TAG, ""has not received intent yet: wait for intent, attempt "" + i);
                screenShotIntent = receiver.awaitForBroadcast();
            }
            Assert.assertNotNull(screenShotIntent);
            Assert.assertTrue(screenShotIntent.hasExtra(KEY_HAS_SCREENSHOT));
            assertEquals(possible, screenShotIntent.getBooleanExtra(KEY_HAS_SCREENSHOT, false));
        } finally {
            receiver.unregisterQuietly();
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AssistScreenCaptureDisabledTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"isNotNull"	""	"2: system hide"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static com.google.common.truth.Truth.assertThat;

import static org.testng.Assert.assertThrows;

import android.app.admin.DevicePolicyManager;
import android.content.pm.PackageManager;

public class ApplicationHiddenParentTest extends BaseDeviceAdminTest {

    private DevicePolicyManager mParentDevicePolicyManager;
    private PackageManager mPackageManager;

    private static final String SYSTEM_PACKAGE_TO_HIDE = ""com.android.keychain"";
    private static final String NON_SYSTEM_NON_INSTALLED_PACKAGE = ""com.android.cts.permissionapp"";
    private static final String NON_SYSTEM_INSTALLED_PACKAGE =
            ""com.android.cts.deviceandprofileowner"";

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mParentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        mPackageManager = mContext.getPackageManager();
        assertThat(mParentDevicePolicyManager).isNotNull();

        assertThat(mDevicePolicyManager.isProfileOwnerApp(ADMIN_RECEIVER_COMPONENT.getPackageName())).isTrue();
        assertThat(mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()).isTrue();
    }

    @Override
    protected void tearDown() throws Exception {
        mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, false);
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_systemPackage"	""	"2: system hide"	"public void testSetApplicationHidden_systemPackage()
            throws PackageManager.NameNotFoundException {
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE, 0)).isNotNull();

        assertThat(mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, true)).isTrue();
        assertThat(mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE)).isTrue();
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE,
                PackageManager.MATCH_UNINSTALLED_PACKAGES)).isNotNull();

        assertThat(mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE, false)).isTrue();
        assertThat(mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                SYSTEM_PACKAGE_TO_HIDE)).isFalse();
        assertThat(mPackageManager.getPackageInfo(SYSTEM_PACKAGE_TO_HIDE, 0)).isNotNull();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_nonSystemPackage"	""	"1: system"	"public void testSetApplicationHidden_nonSystemPackage() {
        assertThrows(IllegalArgumentException.class, () -> {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, true);
            mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE);
        });
        assertThrows(IllegalArgumentException.class, () -> {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, false);
            mParentDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE);
        });
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenParentTest"	"testSetApplicationHidden_nonSystemPackageStackTrace"	""	"1: system"	"public void testSetApplicationHidden_nonSystemPackageStackTrace() {
        StackTraceElement[] stackTrace1 = new StackTraceElement[0];
        StackTraceElement[] stackTrace2 = new StackTraceElement[0];
        String message1 = """";
        String message2 = """";

        // Scenario 1: Non-system non-installed package
        try {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_NON_INSTALLED_PACKAGE, true);
        } catch (IllegalArgumentException e) {
            stackTrace1 = e.getStackTrace();
            message1 = e.getMessage();
        }

        // Scenario 2: Non-system installed package
        try {
            mParentDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                    NON_SYSTEM_INSTALLED_PACKAGE, true);
        } catch (IllegalArgumentException e) {
            stackTrace2 = e.getStackTrace();
            message2 = e.getMessage();
        }

        // Ensure the messages and stack traces of both scenarios are equal
        assertThat(message1).isEqualTo(message2);
        assertThat(stackTrace1.length).isEqualTo(stackTrace2.length);
        for (int i = 0; i < stackTrace1.length; i++) {
            if (stackTrace1[i].getClassName().equals(this.getClass().getName())) {
                continue;
            }
            assertThat(stackTrace1[i].toString()).isEqualTo(stackTrace2[i].toString());
        }
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingParentTest"	"testUserRestrictionLogged"	""	"1: user"	"public void testUserRestrictionLogged() {
        mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
        mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingParentTest"	"testCameraDisabledLogged"	""	"1: camera"	"public void testCameraDisabledLogged() {
        mParentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);
        mParentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.WifiTest"	"emptyList"	""	"2: system user"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static com.android.cts.devicepolicy.TestCertificates.getCaCert;
import static com.android.cts.devicepolicy.TestCertificates.getTestKey;
import static com.android.cts.devicepolicy.TestCertificates.getUserCert;

import static org.junit.Assert.assertNotEquals;

import android.content.ComponentName;
import android.content.pm.PackageManager;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiEnterpriseConfig;
import android.net.wifi.WifiManager;
import android.net.wifi.WifiNetworkSuggestion;
import android.text.TextUtils;

import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.util.Collections;

/**
 * Tests that require the WiFi feature.
 */
public class WifiTest extends BaseDeviceAdminTest {
    /** Mac address returned when the caller doesn't have access. */
    private static final String DEFAULT_MAC_ADDRESS = ""02:00:00:00:00:00"";

    public static final ComponentName ADMIN = new ComponentName(
            BasicAdminReceiver.class.getPackage().getName(),
            BasicAdminReceiver.class.getName());

    private static final String TEST_ALIAS = ""test_alias"";
    private static final String TEST_SSID = ""\""SomeNet\"""";

    private WifiManager mWm;
    private int mNetId = -1;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mWm = mContext.getSystemService(WifiManager.class);
    }

    @Override
    protected void tearDown() throws Exception {
        if (mNetId != -1) {
            mWm.removeNetwork(mNetId);
        }
        // Remove all suggestions if any were added.
        mWm.removeNetworkSuggestions(Collections.emptyList());
        mDevicePolicyManager.removeKeyPair(ADMIN, TEST_ALIAS);

        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testGetWifiMacAddress"	""	"1: system"	"public void testGetWifiMacAddress() {
        if (!mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI)) {
            // wifi not supported.
            return;
        }
        final String macAddress = mDevicePolicyManager.getWifiMacAddress(ADMIN);

        assertFalse(""Device owner should be able to get the real MAC address"",
                DEFAULT_MAC_ADDRESS.equals(macAddress));
        assertFalse(""getWifiMacAddress() returned an empty string.  WiFi not enabled?"",
                TextUtils.isEmpty(macAddress));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.WifiTest"	"testAddNetworkSuggestionWithKeychainKey_notGranted"	""	"1: user"	"public void testAddNetworkSuggestionWithKeychainKey_notGranted() throws Exception {
        prepareTestKeyPair(/* allowForWifi= */ false);
        final WifiNetworkSuggestion suggestion = makeWifiNetworkSuggestion();

        assertEquals(WifiManager.STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID,
                mWm.addNetworkSuggestions(Collections.singletonList(suggestion)));
    }

    private WifiEnterpriseConfig makeWifiEnterpriseConfig() throws Exception {
        WifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();
        enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.TLS);
        enterpriseConfig.setDomainSuffixMatch(""some-domain.com"");
        enterpriseConfig.setIdentity(""user"");
        enterpriseConfig.setCaCertificate((X509Certificate) getCaCert());
        enterpriseConfig.setClientKeyPairAlias(TEST_ALIAS);
        return enterpriseConfig;
    }

    private WifiNetworkSuggestion makeWifiNetworkSuggestion() throws Exception {
        return new WifiNetworkSuggestion.Builder()
                .setSsid(TEST_SSID)
                .setWpa2EnterpriseConfig(makeWifiEnterpriseConfig())
                .build();
    }

    private void prepareTestKeyPair(boolean allowForWifi) throws Exception {
        assertTrue(mDevicePolicyManager.installKeyPair(ADMIN, getTestKey(),
                new Certificate[]{getUserCert()}, TEST_ALIAS,
                /* requestAccess= */ false));
        if (allowForWifi) {
            assertTrue(mDevicePolicyManager.grantKeyPairToWifiAuth(TEST_ALIAS));
        }
    }

    private WifiConfiguration makeTestWifiConfig() throws Exception {
        WifiConfiguration config = new WifiConfiguration();
        config.SSID = TEST_SSID;
        config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
        config.enterpriseConfig = makeWifiEnterpriseConfig();
        return config;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/WifiTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testClearPasswordWithToken"	""	"1: system"	"public void testClearPasswordWithToken() {
        if (!mShouldRun) {
            return;
        }
        KeyguardManager km = mContext.getSystemService(KeyguardManager.class);
        // First set a password
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN0, 0));
        assertTrue(km.isDeviceSecure());

        // clear password with token
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                TOKEN0, 0));
        assertFalse(km.isDeviceSecure());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ResetPasswordWithTokenTest"	"testResetPasswordWithTokenLogging"	""	"1: user"	"public void testResetPasswordWithTokenLogging() {
        if (!mShouldRun) {
            return;
        }

        try (EnterpriseMetricsRecorder metrics = EnterpriseMetricsRecorder.create()) {
            mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                    SHORT_PASSWORD, TOKEN0, 0);

            assertNotNull(metrics.query()
                    .whereType().isEqualTo(EventId.RESET_PASSWORD_WITH_TOKEN_VALUE)
                    .whereAdminPackageName().isEqualTo(PACKAGE_NAME)
                    .poll());
        }
    }

    private boolean setUpResetPasswordToken(boolean acceptFailure) {
        // set up a token
        assertFalse(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));

        try {
            // On devices with password token disabled, calling this method will throw
            // a security exception. If that's anticipated, then return early without failing.
            assertTrue(mDevicePolicyManager.setResetPasswordToken(ADMIN_RECEIVER_COMPONENT,
                    TOKEN0));
        } catch (SecurityException e) {
            if (acceptFailure &&
                    e.getMessage().equals(""Escrow token is disabled on the current user"")) {
                return false;
            } else {
                throw e;
            }
        }
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        return true;
    }

    private void cleanUpResetPasswordToken() {
        // First remove device lock
        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED);
        mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                TOKEN0, 0));

        // Then remove token and check it succeeds
        assertTrue(mDevicePolicyManager.clearResetPasswordToken(ADMIN_RECEIVER_COMPONENT));
        assertFalse(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        assertFalse(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT,
                SHORT_PASSWORD, TOKEN0, 0));
    }

    private void assertPasswordFails(String password, String restriction) {
        try {
            boolean passwordResetResult = mDevicePolicyManager.resetPasswordWithToken(
                    ADMIN_RECEIVER_COMPONENT, password, TOKEN0, /* flags= */0);
            assertFalse(""Password '"" + password + ""' should have failed on "" + restriction,
                    passwordResetResult);
        } catch (IllegalArgumentException e) {
            // yesss, we have failed!
        }
    }

    private void assertPasswordSucceeds(String password, String restriction) {
        boolean passwordResetResult = mDevicePolicyManager.resetPasswordWithToken(
                ADMIN_RECEIVER_COMPONENT, password, TOKEN0, /* flags= */0);
        assertTrue(""Password '"" + password + ""' failed on "" + restriction, passwordResetResult);
        assertPasswordSufficiency(true);
    }

    private void resetComplexPasswordRestrictions() {
        final int quality = mDevicePolicyManager.getPasswordQuality(ADMIN_RECEIVER_COMPONENT);
        if (quality < PASSWORD_QUALITY_NUMERIC) {
            return;
        }
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 0);
        if (quality < PASSWORD_QUALITY_COMPLEX) {
            return;
        }
        mDevicePolicyManager.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, 0);
        mDevicePolicyManager.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, 0);
        mDevicePolicyManager.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, 0);
        mDevicePolicyManager.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, 0);
        mDevicePolicyManager.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, 0);
        mDevicePolicyManager.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, 0);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordWithTokenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTime"	""	"1: system"	"public void testSetTime() {
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, false);

        final long estimatedNow = mStartTimeWallClockMillis +
                TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);
        assertThat(mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT,
                estimatedNow - TimeUnit.HOURS.toMillis(1))).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.TimeManagementTest"	"testSetTimeZone_failIfAutoTimeZoneEnabled"	""	"1: system"	"public void testSetTimeZone_failIfAutoTimeZoneEnabled() {
        mDevicePolicyManager.setAutoTimeZoneEnabled(ADMIN_RECEIVER_COMPONENT, true);

        assertThat(
                mDevicePolicyManager.setTimeZone(ADMIN_RECEIVER_COMPONENT, ""Singapore"")).isFalse();
    }

    private void saveTime() {
        mStartTimeWallClockMillis = System.currentTimeMillis();
        mStartTimeElapsedNanos = System.nanoTime();
    }

    private void restoreTime() {
        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, false);

        final long estimatedNow = mStartTimeWallClockMillis +
                TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - mStartTimeElapsedNanos);
        mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, estimatedNow);

        mDevicePolicyManager.setAutoTimeEnabled(ADMIN_RECEIVER_COMPONENT, true);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/TimeManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.CustomizationRestrictionsTest"	"testDisallowSetWallpaper_allowed"	""	"1: user"	"public void testDisallowSetWallpaper_allowed() throws Exception {
        final WallpaperManager wallpaperManager = WallpaperManager.getInstance(mContext);
        final Bitmap originalWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        final Bitmap originalWallpaperCopy =
                originalWallpaper.copy(originalWallpaper.getConfig(), false);

        try (
                // Set restriction and subscribe for the broadcast.
                final RestrictionApplicator restr =
                        new RestrictionApplicator(UserManager.DISALLOW_SET_WALLPAPER);
                final BroadcastReceiverRegistrator bcast =
                        new BroadcastReceiverRegistrator(Intent.ACTION_WALLPAPER_CHANGED);
        ) {
            assertTrue(mUserManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));

            // Checking setBitmap() method.
            Bitmap oldWallpaper = originalWallpaperCopy;
            wallpaperManager.setBitmap(BitmapUtils.generateRandomBitmap(97, 73));
            bcast.waitForBroadcast();
            Bitmap newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallpaper));

            // Checking setStream() method.
            oldWallpaper = newWallpaper;
            final Bitmap wallpaperForStream = BitmapUtils.generateRandomBitmap(83, 69);
            wallpaperManager.setStream(BitmapUtils.bitmapToInputStream(wallpaperForStream));
            bcast.waitForBroadcast();
            newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallpaper));

            // Checking setResource() method.
            oldWallpaper = newWallpaper;
            wallpaperManager.setResource(R.raw.wallpaper);
            bcast.waitForBroadcast();
            newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
            assertFalse(BitmapUtils.compareBitmaps(newWallpaper, oldWallpaper));
        } finally {
            wallpaperManager.setBitmap(originalWallpaperCopy);
        }
        assertFalse(mUserManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CustomizationRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.EnrollmentSpecificIdTest"	"testCorrectCalculationOfEsid"	""	"1: system"	"public void testCorrectCalculationOfEsid() {
        mUiAutomation.adoptShellPermissionIdentity(PERMISSIONS_TO_ADOPT);
        mDevicePolicyManager.setOrganizationId(ORGANIZATION_ID);
        final String esidFromDpm = mDevicePolicyManager.getEnrollmentSpecificId();
        final String calculatedEsid = calculateEsid(ADMIN_RECEIVER_COMPONENT.getPackageName(),
                ORGANIZATION_ID);
        assertThat(esidFromDpm).isEqualTo(calculatedEsid);
    }

    private String calculateEsid(String profileOwnerPackage, String enterpriseIdString) {
        TelephonyManager telephonyService = mContext.getSystemService(TelephonyManager.class);
        assertThat(telephonyService).isNotNull();

        WifiManager wifiManager = mContext.getSystemService(WifiManager.class);
        assertThat(wifiManager).isNotNull();

        final byte[] serialNumber = getPaddedHardwareIdentifier(Build.getSerial()).getBytes();
        final byte[] imei = getPaddedHardwareIdentifier(telephonyService.getImei(0)).getBytes();
        final byte[] meid = getPaddedHardwareIdentifier(telephonyService.getMeid(0)).getBytes();

        final byte[] macAddress;
        final String[] macAddresses = wifiManager.getFactoryMacAddresses();
        if (macAddresses == null || macAddresses.length == 0) {
            macAddress = """".getBytes();
        } else {
            macAddress = macAddresses[0].getBytes();
        }

        final int totalIdentifiersLength = serialNumber.length + imei.length + meid.length
                + macAddress.length;
        final ByteBuffer fixedIdentifiers = ByteBuffer.allocate(totalIdentifiersLength);
        fixedIdentifiers.put(serialNumber);
        fixedIdentifiers.put(imei);
        fixedIdentifiers.put(meid);
        fixedIdentifiers.put(macAddress);

        final byte[] dpcPackage = getPaddedProfileOwnerName(profileOwnerPackage).getBytes();
        final byte[] enterpriseId = getPaddedEnterpriseId(enterpriseIdString).getBytes();
        final ByteBuffer info = ByteBuffer.allocate(dpcPackage.length + enterpriseId.length);
        info.put(dpcPackage);
        info.put(enterpriseId);
        final byte[] esidBytes = computeHkdf(""HMACSHA256"", fixedIdentifiers.array(), null,
                info.array(), 16);
        ByteBuffer esidByteBuffer = ByteBuffer.wrap(esidBytes);

        return encodeBase32(esidByteBuffer.getLong()) + encodeBase32(esidByteBuffer.getLong());
    }

    private static String getPaddedHardwareIdentifier(String hardwareIdentifier) {
        if (hardwareIdentifier == null) {
            hardwareIdentifier = """";
        }
        return String.format(""%16s"", hardwareIdentifier);
    }

    private static String getPaddedProfileOwnerName(String profileOwnerPackage) {
        return String.format(""%64s"", profileOwnerPackage);
    }

    private static String getPaddedEnterpriseId(String enterpriseId) {
        return String.format(""%64s"", enterpriseId);
    }

    // Copied from android.security.identity.Util, here to make sure Enterprise-Specific ID is
    // calculated according to spec.
    @NonNull
    private static byte[] computeHkdf(
            @NonNull String macAlgorithm, @NonNull final byte[] ikm, @NonNull final byte[] salt,
            @NonNull final byte[] info, int size) {
        Mac mac = null;
        try {
            mac = Mac.getInstance(macAlgorithm);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""No such algorithm: "" + macAlgorithm, e);
        }
        if (size > 255 * mac.getMacLength()) {
            throw new RuntimeException(""size too large"");
        }
        try {
            if (salt == null || salt.length == 0) {
                // According to RFC 5869, Section 2.2 the salt is optional. If no salt is provided
                // then HKDF uses a salt that is an array of zeros of the same length as the hash
                // digest.
                mac.init(new SecretKeySpec(new byte[mac.getMacLength()], macAlgorithm));
            } else {
                mac.init(new SecretKeySpec(salt, macAlgorithm));
            }
            byte[] prk = mac.doFinal(ikm);
            byte[] result = new byte[size];
            int ctr = 1;
            int pos = 0;
            mac.init(new SecretKeySpec(prk, macAlgorithm));
            byte[] digest = new byte[0];
            while (true) {
                mac.update(digest);
                mac.update(info);
                mac.update((byte) ctr);
                digest = mac.doFinal();
                if (pos + digest.length < size) {
                    System.arraycopy(digest, 0, result, pos, digest.length);
                    pos += digest.length;
                    ctr++;
                } else {
                    System.arraycopy(digest, 0, result, pos, size - pos);
                    break;
                }
            }
            return result;
        } catch (InvalidKeyException e) {
            throw new RuntimeException(""Error MACing"", e);
        }
    }

    private static final char[] ENCODE = {
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
            'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
            'Y', 'Z', '2', '3', '4', '5', '6', '7',
    };

    private static final char SEPARATOR = '-';
    private static final int LONG_SIZE = 13;
    private static final int GROUP_SIZE = 4;

    private static String encodeBase32(long input) {
        final char[] alphabet = ENCODE;

        /*
         * Make a character array with room for the separators between each
         * group.
         */
        final char[] encoded = new char[LONG_SIZE + (LONG_SIZE / GROUP_SIZE)];

        int index = encoded.length;
        for (int i = 0; i < LONG_SIZE; i++) {
            /*
             * Make sure we don't put a separator at the beginning. Since we're
             * building from the rear of the array, we use (LONG_SIZE %
             * GROUP_SIZE) to make the odd-size group appear at the end instead
             * of the beginning.
             */
            if (i > 0 && (i % GROUP_SIZE) == (LONG_SIZE % GROUP_SIZE)) {
                encoded[--index] = SEPARATOR;
            }

            /*
             * Extract 5 bits of data, then shift it out.
             */
            final int group = (int) (input & 0x1F);
            input >>>= 5;

            encoded[--index] = alphabet[group];
        }

        return String.valueOf(encoded);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/EnrollmentSpecificIdTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.NearbyAppStreamingPolicyTest"	"testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault"	""	"1: apps"	"public void testGetNearbyAppStreamingPolicy_getsNearbyStreamingDisabledAsDefault() {
        assertThat(mDevicePolicyManager.getNearbyAppStreamingPolicy())
                .isEqualTo(DevicePolicyManager.NEARBY_STREAMING_DISABLED);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NearbyAppStreamingPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.NearbyAppStreamingPolicyTest"	"testSetNearbyAppStreamingPolicy_changesPolicy"	""	"1: apps"	"public void testSetNearbyAppStreamingPolicy_changesPolicy() {
        mDevicePolicyManager.setNearbyAppStreamingPolicy(
                DevicePolicyManager.NEARBY_STREAMING_ENABLED);

        assertThat(mDevicePolicyManager.getNearbyAppStreamingPolicy())
                .isEqualTo(DevicePolicyManager.NEARBY_STREAMING_ENABLED);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/NearbyAppStreamingPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures"	""	"1: camera"	"public void testSetKeyguardDisabledFeatures() {
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        // Check if the admin has disabled the camera specifically for the keyguard
        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        removeKeyguardDisableFeatures(mDevicePolicyManager);
        mDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);

        // Check if the admin has disabled notifications specifically for the keyguard
        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);
        removeKeyguardDisableFeatures(mDevicePolicyManager);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO"	""	"1: camera"	"public void testSetKeyguardDisabledFeatures_onParentSilentIgnoreWhenCallerIsNotOrgOwnedPO() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        assertThat(mDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(0);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyguardDisabledFeaturesTest"	"testSetKeyguardDisabledFeatures_onParent"	""	"1: camera"	"public void testSetKeyguardDisabledFeatures_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        // Check if the admin has disabled the camera specifically for the keyguard
        assertThat(parentDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_CAMERA);

        removeKeyguardDisableFeatures(parentDevicePolicyManager);
        parentDevicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);

        // Check if the admin has disabled notifications specifically for the keyguard
        assertThat(parentDevicePolicyManager.getKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT)).isEqualTo(
                DevicePolicyManager.KEYGUARD_DISABLE_SECURE_NOTIFICATIONS);
        removeKeyguardDisableFeatures(parentDevicePolicyManager);
    }

    private void removeKeyguardDisableFeatures(DevicePolicyManager devicePolicyManager) {
        devicePolicyManager.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.KEYGUARD_DISABLE_FEATURES_NONE);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyguardDisabledFeaturesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PrintingPolicyTest"	"testPrintingPolicy"	""	"1: user"	"public void testPrintingPolicy() throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_PRINTING);
        final PrintActivity activity = launchActivity(""com.android.cts.deviceandprofileowner"",
                PrintActivity.class, null);
        final String errorMessage = activity.getErrorMessage();
        assertNull(errorMessage);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PrintingPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"clearAllAccountManagementDisabled"	""	"2: system user"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.accounts.AuthenticatorException;
import android.accounts.OperationCanceledException;
import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.os.Bundle;
import android.os.UserManager;

import java.io.IOException;

/**
 * These tests verify that the device / profile owner can use account management APIs to add
 * accounts even when policies are set. The policies tested are
 * {@link DevicePolicyManager#setAccountManagementDisabled} and
 * {@link UserManager#DISALLOW_MODIFY_ACCOUNTS}.
 *
 * This test depends on {@link com.android.cts.devicepolicy.accountmanagement.MockAccountService},
 * which provides authenticator for a mock account type.
 */
public class AllowedAccountManagementTest extends BaseDeviceAdminTest {

    // Account type for MockAccountAuthenticator
    private final static String ACCOUNT_TYPE_1 =
            ""com.android.cts.devicepolicy.accountmanagement.account.type"";
    private final static String ACCOUNT_TYPE_2 = ""com.placeholder.account"";
    private final static Account ACCOUNT = new Account(""user0"", ACCOUNT_TYPE_1);

    private AccountManager mAccountManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mAccountManager = (AccountManager) mContext.getSystemService(Context.ACCOUNT_SERVICE);
        clearAllAccountManagementDisabled();
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);
    }

    @Override
    protected void tearDown() throws Exception {
        clearAllAccountManagementDisabled();
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount"	""	"1: user"	"public void testUserRestriction_profileAndDeviceOwnerCanAddAndRemoveAccount()
            throws AuthenticatorException, IOException, OperationCanceledException {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_MODIFY_ACCOUNTS);

        assertEquals(0, mAccountManager.getAccountsByType(ACCOUNT_TYPE_1).length);
        // Management is disabled, but the device / profile owner is still allowed to use the APIs
        Bundle result = mAccountManager.addAccount(ACCOUNT_TYPE_1,
                null, null, null, null, null, null).getResult();

        // Normally the expected result of addAccount() is AccountManager returning
        // an intent to start the authenticator activity for adding new accounts.
        // But MockAccountAuthenticator returns a new account straightway.
        assertEquals(ACCOUNT_TYPE_1, result.getString(AccountManager.KEY_ACCOUNT_TYPE));

        result = mAccountManager.removeAccount(ACCOUNT, null, null, null).getResult();
        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AllowedAccountManagementTest"	"testRemoveAccount_noUserRestriction"	""	"1: user"	"public void testRemoveAccount_noUserRestriction()
            throws AuthenticatorException, IOException, OperationCanceledException {
        // We only want to verify removeAccount can through to AccountManagerService without
        // throwing an Exception, so it's not necessary to add the account before removal.
        Bundle result = mAccountManager.removeAccount(ACCOUNT, null, null, null).getResult();
        assertTrue(result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT));
    }

    private void clearAllAccountManagementDisabled() {
        for (String accountType : mDevicePolicyManager.getAccountTypesWithManagementDisabled()) {
            mDevicePolicyManager.setAccountManagementDisabled(ADMIN_RECEIVER_COMPONENT, accountType,
                    false);
        }
        assertEquals(0, mDevicePolicyManager.getAccountTypesWithManagementDisabled().length);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AllowedAccountManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest"	"disableService"	""	"1: user"	"API to get max duration constant from ContentCaptureManager
    private static final int MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET= 120000;

    private static final int SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS = 100;

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.contentcaptureservice/.SimpleContentCaptureService"";

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    DISALLOW_CONTENT_CAPTURE);
        }
        super.tearDown();
    }

    public void testDisallowContentCapture_allowed() throws Exception {
        enableService();

        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(CONTENT_CAPTURE_PACKAGE_NAME, CONTENT_CAPTURE_ACTIVITY_NAME);
        final ContentCaptureActivity activity = launchActivity(
                ""com.android.cts.deviceandprofileowner"", ContentCaptureActivity.class, null);

        activity.waitContentCaptureEnabled(true);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_CONTENT_CAPTURE);

        activity.waitContentCaptureEnabled(false);
    }

    private void enableService() throws Exception {
        runShellCommand(""settings put secure --user %d %s %d default"",
                mUserId, USER_SETUP_COMPLETE, 1);

        runShellCommand(""cmd content_capture set temporary-service %d %s %d"", mUserId,
                SERVICE_NAME, MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET);
        // TODO: ideally it should wait until the service's onConnected() is called, but that
        // would be too complicated
        Thread.sleep(SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS);
    }

    private void disableService() {
        runShellCommand(""cmd content_capture set temporary-service %d"", mUserId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AffiliationTest"	"testLockTaskMethodsThrowExceptionIfUnaffiliated"	""	"1: user"	"public void testLockTaskMethodsThrowExceptionIfUnaffiliated() {
        checkLockTaskMethodsThrow();
    }

    /** Assumes that the calling user is already affiliated before calling this method */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AffiliationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AffiliationTest"	"testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated"	""	"1: user"	"public void testSetLockTaskPackagesClearedIfUserBecomesUnaffiliated() {
        final String[] packages = {""package1"", ""package2""};
        mDevicePolicyManager.setLockTaskPackages(ADMIN_RECEIVER_COMPONENT, packages);
        assertArrayEquals(packages,
                mDevicePolicyManager.getLockTaskPackages(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.isLockTaskPermitted(""package1""));
        assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package3""));

        final Set<String> previousAffiliationIds =
                mDevicePolicyManager.getAffiliationIds(ADMIN_RECEIVER_COMPONENT);
        try {
            // Clearing affiliation ids for this user. Lock task methods unavailable.
            setAffiliationIds(Collections.emptySet());
            checkLockTaskMethodsThrow();
            assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package1""));

            // Affiliating the user again. Previously set packages have been cleared.
            setAffiliationIds(previousAffiliationIds);
            assertEquals(0,
                    mDevicePolicyManager.getLockTaskPackages(ADMIN_RECEIVER_COMPONENT).length);
            assertFalse(mDevicePolicyManager.isLockTaskPermitted(""package1""));
        } finally {
            mDevicePolicyManager.setAffiliationIds(ADMIN_RECEIVER_COMPONENT,
                    previousAffiliationIds);
        }
    }

    private void setAffiliationIds(Set<String> ids) {
        mDevicePolicyManager.setAffiliationIds(ADMIN_RECEIVER_COMPONENT, ids);
        assertEquals(ids, mDevicePolicyManager.getAffiliationIds(ADMIN_RECEIVER_COMPONENT));
    }

    private void checkLockTaskMethodsThrow() {
        try {
            mDevicePolicyManager.setLockTaskPackages(ADMIN_RECEIVER_COMPONENT, new String[0]);
            fail(""setLockTaskPackages did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
        try {
            mDevicePolicyManager.getLockTaskPackages(ADMIN_RECEIVER_COMPONENT);
            fail(""getLockTaskPackages did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AffiliationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecondaryLockscreenTest"	"testSetSecondaryLockscreen_ineligibleAdmin_throwsSecurityException"	""	"1: system"	"(expected = SecurityException.class)
    public void testSetSecondaryLockscreen_ineligibleAdmin_throwsSecurityException() {
        final ComponentName badAdmin = new ComponentName(""com.foo.bar"", "".NonProfileOwnerReceiver"");
        mDevicePolicyManager.setSecondaryLockscreenEnabled(badAdmin, true);
    }

    private void enterKeyguardPin() throws Exception {
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_SLEEP"");
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_WAKEUP"");
        assertTrue(""Keyguard unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(
                        By.res(""com.android.systemui"", ""keyguard_status_view"")),
                                UI_AUTOMATOR_WAIT_TIME_MILLIS));
        mUiDevice.executeShellCommand(""wm dismiss-keyguard"");
        assertTrue(""Keyguard pin entry unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(By.res(""com.android.systemui"", ""pinEntry"")),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
        mUiDevice.executeShellCommand(""input text 1234"");
        mUiDevice.executeShellCommand(""input keyevent KEYCODE_ENTER"");
    }

    private void verifyHomeLauncherIsShown() {
        String launcherPackageName = getLauncherPackageName();
        assertTrue(""Lockscreen title is unexpectedly shown"",
                mUiDevice.wait(Until.gone(By.text(SimpleKeyguardService.TITLE_LABEL)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
        assertTrue(String.format(""Launcher (%s) is not shown"", launcherPackageName),
                mUiDevice.wait(Until.hasObject(By.pkg(launcherPackageName)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
    }

    private void verifySecondaryLockscreenIsShown() {
        String launcherPackageName = getLauncherPackageName();
        assertTrue(""Lockscreen title is unexpectedly not shown"",
                mUiDevice.wait(Until.hasObject(By.text(SimpleKeyguardService.TITLE_LABEL)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
        assertTrue(String.format(""Launcher (%s) is unexpectedly shown"", launcherPackageName),
                mUiDevice.wait(Until.gone(By.pkg(launcherPackageName)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));
    }

    private String getLauncherPackageName() {
        Intent homeIntent = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME);
        List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentActivities(
                homeIntent, 0);
        StringBuilder sb = new StringBuilder();
        for (ResolveInfo resolveInfo : resolveInfos) {
            sb.append(resolveInfo.activityInfo.packageName).append(""/"").append(
                    resolveInfo.activityInfo.name).append("", "");
        }
        return resolveInfos.isEmpty() ? null : resolveInfos.get(0).activityInfo.packageName;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecondaryLockscreenTest"	"testSetSecondaryLockscreenEnabled"	""	"1: user"	"@Ignore(""b/184280023"")
    public void testSetSecondaryLockscreenEnabled() throws Exception {
        enterKeyguardPin();
        assertTrue(""Lockscreen title not shown"",
                mUiDevice.wait(Until.hasObject(By.text(SimpleKeyguardService.TITLE_LABEL)),
                        UI_AUTOMATOR_WAIT_TIME_MILLIS));

        mDevicePolicyManager.setSecondaryLockscreenEnabled(ADMIN_RECEIVER_COMPONENT, false);

        // Verify that the lockscreen is dismissed after disabling the feature
        assertFalse(mDevicePolicyManager.isSecondaryLockscreenEnabled(Process.myUserHandle()));
        verifyHomeLauncherIsShown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethods"	""	"1: system"	"public void testPermittedInputMethods() {
        // All input methods are allowed.
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT)).isNull();

        // Only system input methods are allowed.
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, new ArrayList<>());
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT)).isEmpty();

        // Some random methods.
        final List<String> packages = Arrays.asList(""com.google.pkg.one"", ""com.google.pkg.two"");
        mDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, packages);
        assertThat(
                mDevicePolicyManager.getPermittedInputMethods(ADMIN_RECEIVER_COMPONENT))
                .containsExactlyElementsIn(packages);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.InputMethodsTest"	"testPermittedInputMethodsOnParent"	""	"1: system"	"public void testPermittedInputMethodsOnParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        // All input methods are allowed.
        parentDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(parentDevicePolicyManager.getPermittedInputMethods(
                ADMIN_RECEIVER_COMPONENT)).isNull();

        // Only system input methods are allowed.
        parentDevicePolicyManager.setPermittedInputMethods(ADMIN_RECEIVER_COMPONENT,
                new ArrayList<>());
        assertThat(parentDevicePolicyManager.getPermittedInputMethods(
                ADMIN_RECEIVER_COMPONENT)).isEmpty();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/InputMethodsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AccessibilityServicesTest"	"testPermittedAccessibilityServices"	""	"1: system"	"public void testPermittedAccessibilityServices() {
        // All accessibility services are allowed.
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT, null);
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .isNull();

        // Only system accessibility services are allowed.
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT,
                new ArrayList<>());
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .isEmpty();

        // Some random services.
        final List<String> packages = Arrays.asList(""com.google.pkg.one"", ""com.google.pkg.two"");
        mDevicePolicyManager.setPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT, packages);
        assertThat(mDevicePolicyManager.
                getPermittedAccessibilityServices(ADMIN_RECEIVER_COMPONENT))
                .containsExactlyElementsIn(packages);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AccessibilityServicesTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testEnableSystemAppLogged"	""	"1: system"	"public void testEnableSystemAppLogged() {
        final String systemPackageToEnable =
                InstrumentationRegistry.getArguments().getString(PARAM_APP_TO_ENABLE);
        mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, systemPackageToEnable);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testEnableSystemAppWithIntentLogged"	""	"1: system"	"public void testEnableSystemAppWithIntentLogged() {
        final String systemPackageToEnable =
                InstrumentationRegistry.getArguments().getString(PARAM_APP_TO_ENABLE);
        final Intent intent =
                mContext.getPackageManager().getLaunchIntentForPackage(systemPackageToEnable);
        mDevicePolicyManager.enableSystemApp(ADMIN_RECEIVER_COMPONENT, intent);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetUserRestrictionLogged"	""	"1: user"	"public void testSetUserRestrictionLogged() {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_LOCATION);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADJUST_VOLUME);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADJUST_VOLUME);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_AUTOFILL);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_AUTOFILL);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_CAPTURE);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_CAPTURE);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_SUGGESTIONS);
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONTENT_SUGGESTIONS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetKeyguardDisabledSecureCameraLogged"	""	"1: camera"	"public void testSetKeyguardDisabledSecureCameraLogged() {
        mDevicePolicyManager.setKeyguardDisabledFeatures(
                ADMIN_RECEIVER_COMPONENT, KEYGUARD_DISABLE_SECURE_CAMERA);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest"	"testSetPersonalAppsSuspendedLogged"	""	"1: apps"	"public void testSetPersonalAppsSuspendedLogged() {
        mDevicePolicyManager.setPersonalAppsSuspended(ADMIN_RECEIVER_COMPONENT, true);
        mDevicePolicyManager.setPersonalAppsSuspended(ADMIN_RECEIVER_COMPONENT, false);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"PermissionBroadcastReceiver"	""	"3: user camera apps"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static android.Manifest.permission.READ_CONTACTS;
import static android.Manifest.permission.WRITE_CONTACTS;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DEFAULT;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_DENIED;
import static android.app.admin.DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_AUTO_DENY;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_AUTO_GRANT;
import static android.app.admin.DevicePolicyManager.PERMISSION_POLICY_PROMPT;
import static android.content.pm.PackageManager.PERMISSION_DENIED;
import static android.content.pm.PackageManager.PERMISSION_GRANTED;

import android.Manifest.permission;
import android.app.UiAutomation;
import android.app.admin.DevicePolicyManager;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.support.test.uiautomator.By;
import android.support.test.uiautomator.BySelector;
import android.support.test.uiautomator.UiDevice;
import android.support.test.uiautomator.UiObject2;
import android.util.Log;

import com.android.cts.devicepolicy.PermissionBroadcastReceiver;
import com.android.cts.devicepolicy.PermissionUtils;

import com.google.android.collect.Sets;

import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Test Runtime Permissions APIs in DevicePolicyManager.
 */
public class PermissionsTest extends BaseDeviceAdminTest {

    private static final String TAG = ""PermissionsTest"";

    private static final String PERMISSION_APP_PACKAGE_NAME = ""com.android.cts.permissionapp"";
    private static final String PRE_M_APP_PACKAGE_NAME
            = ""com.android.cts.launcherapps.simplepremapp"";
    private static final String PERMISSIONS_ACTIVITY_NAME
            = PERMISSION_APP_PACKAGE_NAME + "".PermissionActivity"";
    private static final String CUSTOM_PERM_A_NAME = ""com.android.cts.permissionapp.permA"";
    private static final String CUSTOM_PERM_B_NAME = ""com.android.cts.permissionapp.permB"";
    private static final String DEVELOPMENT_PERMISSION = ""android.permission.INTERACT_ACROSS_USERS"";

    private static final String ACTION_PERMISSION_RESULT
            = ""com.android.cts.permission.action.PERMISSION_RESULT"";

    private static final BySelector CRASH_POPUP_BUTTON_SELECTOR = By
            .clazz(android.widget.Button.class.getName())
            .text(""OK"")
            .pkg(""android"");
    private static final BySelector CRASH_POPUP_TEXT_SELECTOR = By
            .clazz(android.widget.TextView.class.getName())
            .pkg(""android"");
    private static final String CRASH_WATCHER_ID = ""CRASH"";
    private static final String AUTO_GRANTED_PERMISSIONS_CHANNEL_ID =
            ""alerting auto granted permissions"";

    private static final Set<String> LOCATION_PERMISSIONS = Sets.newHashSet(
            permission.ACCESS_FINE_LOCATION,
            permission.ACCESS_BACKGROUND_LOCATION,
            permission.ACCESS_COARSE_LOCATION);

    private static final Set<String> SENSORS_PERMISSIONS = Sets.newHashSet(
            permission.ACCESS_FINE_LOCATION,
            permission.ACCESS_COARSE_LOCATION,
            permission.CAMERA,
            permission.ACTIVITY_RECOGNITION,
            permission.BODY_SENSORS);


    private PermissionBroadcastReceiver mReceiver;
    private UiDevice mDevice;
    private UiAutomation mUiAutomation;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mReceiver = new PermissionBroadcastReceiver();
        mContext.registerReceiver(mReceiver, new IntentFilter(ACTION_PERMISSION_RESULT));
        mDevice = UiDevice.getInstance(getInstrumentation());
        mUiAutomation = getInstrumentation().getUiAutomation();
    }

    @Override
    protected void tearDown() throws Exception {
        mContext.unregisterReceiver(mReceiver);
        mDevice.removeWatcher(CRASH_WATCHER_ID);
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantStateGranted_userNotifiedOfLocationPermission"	""	"1: user"	"public void testPermissionGrantStateGranted_userNotifiedOfLocationPermission()
            throws Exception {
        for (String locationPermission : LOCATION_PERMISSIONS) {
            // TODO(b/161359841): move NotificationListener to app/common
            CountDownLatch notificationLatch = initPermissionNotificationLatch();

            setPermissionGrantState(locationPermission, PERMISSION_GRANT_STATE_GRANTED);

            assertPermissionGrantState(locationPermission, PERMISSION_GRANT_STATE_GRANTED);
            assertTrue(String.format(""Did not receive notification for permission %s"",
                    locationPermission), notificationLatch.await(60, TimeUnit.SECONDS));
            NotificationListener.getInstance().clearListeners();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testSensorsRelatedPermissionsCannotBeGranted"	""	"1: user"	"public void testSensorsRelatedPermissionsCannotBeGranted() throws Exception {
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The permission cannot be granted.
                assertFailedToSetPermissionGrantState(
                        sensorPermission, DevicePolicyManager.PERMISSION_GRANT_STATE_GRANTED);

                // But the user can grant it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission, PERMISSION_GRANTED, PERMISSION_APP_PACKAGE_NAME,
                        PERMISSIONS_ACTIVITY_NAME);

                // And the package manager should show it as granted.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_GRANTED,
                        PERMISSION_APP_PACKAGE_NAME);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testSensorsRelatedPermissionsNotGrantedViaPolicy"	""	"1: user"	"public void testSensorsRelatedPermissionsNotGrantedViaPolicy() throws Exception {
        setPermissionPolicy(PERMISSION_POLICY_AUTO_GRANT);
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The permission is not granted by default.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_DENIED,
                        PERMISSION_APP_PACKAGE_NAME);
                // But the user can grant it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission,
                        PERMISSION_GRANTED, PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);

                // And the package manager should show it as granted.
                PermissionUtils.checkPermission(sensorPermission, PERMISSION_GRANTED,
                        PERMISSION_APP_PACKAGE_NAME);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testStateOfSensorsRelatedPermissionsCannotBeRead"	""	"1: user"	"public void testStateOfSensorsRelatedPermissionsCannotBeRead() throws Exception {
        for (String sensorPermission : SENSORS_PERMISSIONS) {
            try {
                // The admin tries to grant the permission.
                setPermissionGrantState(sensorPermission, PERMISSION_GRANT_STATE_GRANTED);

                // But the user denies it.
                PermissionUtils.launchActivityAndRequestPermission(mReceiver, mDevice,
                        sensorPermission, PERMISSION_DENIED, PERMISSION_APP_PACKAGE_NAME,
                        PERMISSIONS_ACTIVITY_NAME);

                // And the admin cannot learn of it.
                assertPermissionGrantState(sensorPermission, PERMISSION_GRANT_STATE_DEFAULT);
            } finally {
                revokePermission(sensorPermission);
            }
        }
    }

    private void revokePermission(String sensorPermission) {
        if (LOCATION_PERMISSIONS.contains(sensorPermission)) {
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME,
                    permission.ACCESS_FINE_LOCATION);
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME,
                    permission.ACCESS_COARSE_LOCATION);
        } else {
            mUiAutomation.revokeRuntimePermission(PERMISSION_APP_PACKAGE_NAME, sensorPermission);
        }
    }

    private void assertFailedToSetPermissionGrantState(String permission, int value) {
        assertTrue(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission),
                DevicePolicyManager.PERMISSION_GRANT_STATE_DEFAULT);
        assertEquals(mContext.getPackageManager().checkPermission(permission,
                PERMISSION_APP_PACKAGE_NAME),
                PackageManager.PERMISSION_DENIED);
    }

    private CountDownLatch initPermissionNotificationLatch() {
        CountDownLatch notificationCounterLatch = new CountDownLatch(1);
        NotificationListener.getInstance().addListener((notification) -> {
            if (notification.getPackageName().equals(
                    mContext.getPackageManager().getPermissionControllerPackageName()) &&
                    notification.getNotification().getChannelId().equals(
                            AUTO_GRANTED_PERMISSIONS_CHANNEL_ID)) {
                notificationCounterLatch.countDown();
            }
        });
        return notificationCounterLatch;
    }

    private void setPermissionPolicy(int permissionPolicy) {
        mDevicePolicyManager.setPermissionPolicy(ADMIN_RECEIVER_COMPONENT, permissionPolicy);
    }

    private boolean setPermissionGrantState(String permission, int grantState) {
        return mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission, grantState);
    }

    private void unableToSetPermissionGrantState(String permission, int grantState) {
        assertFalse(setPermissionGrantState(permission, grantState));
    }

    private void assertPermissionGrantState(String permission, int grantState) {
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PERMISSION_APP_PACKAGE_NAME, permission), grantState);
    }

    private void assertPermissionPolicy(int permissionPolicy) {
        assertEquals(mDevicePolicyManager.getPermissionPolicy(ADMIN_RECEIVER_COMPONENT),
                permissionPolicy);
    }

    private void assertCanRequestPermissionFromActivity(String permission) throws Exception {
        PermissionUtils.launchActivityAndRequestPermission(
                mReceiver, permission, PERMISSION_GRANTED,
                PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
    }

    private void assertCannotRequestPermissionFromActivity(String permission) throws Exception {
        PermissionUtils.launchActivityAndRequestPermission(
                mReceiver, permission, PERMISSION_DENIED,
                PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
    }

    private void assertHasPermissionFromActivity(String permission) throws Exception {
        PermissionUtils.launchActivityAndCheckPermission(
                mReceiver, permission, PERMISSION_GRANTED,
                PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
    }

    private void assertNoPermissionFromActivity(String permission) throws Exception {
        PermissionUtils.launchActivityAndCheckPermission(
                mReceiver, permission, PERMISSION_DENIED,
                PERMISSION_APP_PACKAGE_NAME, PERMISSIONS_ACTIVITY_NAME);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantState_preMApp_preQDeviceAdmin"	""	"1: apps"	"public void testPermissionGrantState_preMApp_preQDeviceAdmin() throws Exception {
        // These tests are to make sure that pre-M apps are not granted/denied runtime permissions
        // by a profile owner that targets pre-Q
        assertCannotSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
        assertCannotSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
    }

    private void assertCannotSetPermissionGrantStatePreMApp(String permission, int value)
            throws Exception {
        assertFalse(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission), PERMISSION_GRANT_STATE_DEFAULT);

        // Install runtime permissions should always be granted
        PermissionUtils.checkPermission(permission, PERMISSION_GRANTED, PRE_M_APP_PACKAGE_NAME);
        PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_GRANTED,
                PRE_M_APP_PACKAGE_NAME);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PermissionsTest"	"testPermissionGrantState_preMApp"	""	"1: apps"	"public void testPermissionGrantState_preMApp() throws Exception {
        // These tests are to make sure that pre-M apps can be granted/denied runtime permissions
        // by a profile owner targets Q or later
        assertCanSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_DENIED);
        assertCanSetPermissionGrantStatePreMApp(READ_CONTACTS, PERMISSION_GRANT_STATE_GRANTED);
    }

    private void assertCanSetPermissionGrantStatePreMApp(String permission, int value)
            throws Exception {
        assertTrue(mDevicePolicyManager.setPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission, value));
        assertEquals(mDevicePolicyManager.getPermissionGrantState(ADMIN_RECEIVER_COMPONENT,
                PRE_M_APP_PACKAGE_NAME, permission), value);

        // Install time permissions should always be granted
        PermissionUtils.checkPermission(permission, PERMISSION_GRANTED, PRE_M_APP_PACKAGE_NAME);

        // For pre-M apps the access to the data might be prevented via app-ops. Hence check that
        // they are correctly set
        switch (value) {
            case PERMISSION_GRANT_STATE_GRANTED:
                PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_GRANTED,
                        PRE_M_APP_PACKAGE_NAME);
                break;
            case PERMISSION_GRANT_STATE_DENIED:
                PermissionUtils.checkPermissionAndAppOps(permission, PERMISSION_DENIED,
                        PRE_M_APP_PACKAGE_NAME);
                break;
            default:
                fail(""unsupported policy value"");
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PermissionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testDisableQuietMode"	""	"1: user"	"public void testDisableQuietMode() {
        requestQuietModeEnabledForProfile(false);
    }

    private void requestQuietModeEnabledForProfile(boolean enabled) {
        final UserManager userManager = UserManager.get(mContext);
        final List<UserHandle> users = userManager.getUserProfiles();

        // Should get primary user itself and its profile.
        assertThat(users.size()).isEqualTo(2);
        final UserHandle profileHandle =
                users.get(0).equals(Process.myUserHandle()) ? users.get(1) : users.get(0);

        userManager.requestQuietModeEnabled(enabled, profileHandle);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testSuspendPersonalApps"	""	"1: apps"	"public void testSuspendPersonalApps() {
        mDpm.setPersonalAppsSuspended(ADMIN, true);
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_EXPLICITLY);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testUnsuspendPersonalApps"	""	"1: apps"	"public void testUnsuspendPersonalApps() {
        mDpm.setPersonalAppsSuspended(ADMIN, false);
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_NOT_SUSPENDED);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersonalAppsSuspensionTest"	"testPersonalAppsSuspendedByTimeout"	""	"1: apps"	"public void testPersonalAppsSuspendedByTimeout() {
        assertThat(mDpm.getPersonalAppsSuspendedReasons(ADMIN))
                .isEqualTo(DevicePolicyManager.PERSONAL_APPS_SUSPENDED_PROFILE_TIMEOUT);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersonalAppsSuspensionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ClearApplicationDataTest"	"testClearApplicationData_activeAdmin"	""	"1: user"	"public void testClearApplicationData_activeAdmin() throws Exception {
        clearApplicationDataTest(DEVICE_ADMIN_PKG, /* shouldSucceed */ false);
    }

    private void clearApplicationDataTest(String packageName, boolean shouldSucceed)
            throws Exception {
        mDevicePolicyManager.clearApplicationUserData(ADMIN_RECEIVER_COMPONENT,
                packageName, AsyncTask.THREAD_POOL_EXECUTOR,
                (String pkg, boolean succeeded) -> {
                    assertEquals(packageName, pkg);
                    assertEquals(shouldSucceed, succeeded);
                    mSemaphore.release();
                });
        assertTrue(""Clearing application data took too long"",
                mSemaphore.tryAcquire(CLEAR_APPLICATION_DATA_TIMEOUT_S, TimeUnit.SECONDS));
    }

    private String getDeviceProvisioningPackageName() {
        final int provisioning_app_id = mContext.getResources().getIdentifier(
                ""config_deviceProvisioningPackage"", ""string"", ""android"");
        if (provisioning_app_id > 0) {
            return mContext.getResources().getString(provisioning_app_id);
        } else {
            return null;
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ClearApplicationDataTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.CaCertManagementTest"	"testCanUninstallAllUserCaCerts"	""	"3: system user apps"	"public void testCanUninstallAllUserCaCerts() throws GeneralSecurityException {
        assertTrue(installCaCert(FAKE_RSA_1.caCertificate));
        assertTrue(installCaCert(FAKE_DSA_1.caCertificate));

        uninstallAllUserCaCerts();
        assertUninstalled(FAKE_RSA_1.caCertificate);
        assertUninstalled(FAKE_DSA_1.caCertificate);
    }

    private void assertInstalled(byte[] caBytes) throws GeneralSecurityException {
        assertTrue(isCaCertInstalledAndTrusted(caBytes));
    }

    private void assertUninstalled(byte[] caBytes) throws GeneralSecurityException {
        assertFalse(isCaCertInstalledAndTrusted(caBytes));
    }

    private static X509TrustManager getFirstX509TrustManager(TrustManagerFactory tmf) {
        for (TrustManager trustManager : tmf.getTrustManagers()) {
             if (trustManager instanceof X509TrustManager) {
                 return (X509TrustManager) trustManager;
             }
        }
        throw new RuntimeException(""Unable to find X509TrustManager"");
    }

    /**
     * Whether a given cert, or one a lot like it, has been installed system-wide and is available
     * to all apps.
     *
     * <p>A CA certificate is ""installed"" if it matches all of the following conditions:
     * <ul>
     *   <li>{@link DevicePolicyManager#hasCaCertInstalled} returns {@code true}.</li>
     *   <li>{@link DevicePolicyManager#getInstalledCaCerts} lists a matching certificate (not
     *       necessarily exactly the same) in its response.</li>
     *   <li>Any new instances of {@link TrustManager} should report the certificate among their
     *       accepted issuer list -- older instances may keep the set of issuers they were created
     *       with until explicitly refreshed.</li>
     *
     * @return {@code true} if installed by all metrics, {@code false} if not installed by any
     *         metric. In any other case an {@link AssertionError} will be thrown.
     */
    private boolean isCaCertInstalledAndTrusted(byte[] caBytes) throws GeneralSecurityException {
        Certificate caCert = readCertificate(caBytes);
        boolean installed = mDevicePolicyManager.hasCaCertInstalled(mAdmin, caCert.getEncoded());

        boolean listed = false;
        for (byte[] certBuffer : mDevicePolicyManager.getInstalledCaCerts(mAdmin)) {
            if (caCert.equals(readCertificate(certBuffer))) {
                listed = true;
            }
        }

        // Verify that the user added CA is reflected in the default X509TrustManager.
        final TrustManagerFactory tmf =
                TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        // Use platform provided CA store.
        tmf.init((KeyStore) null);
        X509TrustManager tm = getFirstX509TrustManager(tmf);
        boolean trusted = Arrays.asList(tm.getAcceptedIssuers()).contains(caCert);

        // Maximal time to wait until the certificate is found to be in the accepted
        // issuers list before declaring test failure.
        final int maxWaitForCertificateTrustedSec = 15;

        // All three responses should match - if an installed certificate isn't trusted or (worse)
        // a trusted certificate isn't even installed we should fail now, loudly.
        assertEquals(installed, listed);
        int numTries = 0;
        while (numTries < (maxWaitForCertificateTrustedSec * 20) && (installed != trusted)) {
            try {
                Thread.sleep(100);
                trusted = Arrays.asList(tm.getAcceptedIssuers()).contains(caCert);
                numTries++;
            } catch (InterruptedException e) {
                break;
            }
        }
        assertEquals(installed, trusted);

        X509TrustManagerExtensions xtm = new X509TrustManagerExtensions(tm);
        boolean userAddedCertificate = xtm.isUserAddedCertificate((X509Certificate) caCert);
        assertEquals(installed, userAddedCertificate);
        return installed;
    }

    /**
     * Convert an encoded certificate back into a {@link Certificate}.
     *
     * Instantiates a fresh CertificateFactory every time for repeatability.
     */
    private static Certificate readCertificate(byte[] certBuffer) throws CertificateException {
        final CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        return certFactory.generateCertificate(new ByteArrayInputStream(certBuffer));
    }

    private boolean installCaCert(byte[] caCertificate) {
        return mDevicePolicyManager.installCaCert(mAdmin, caCertificate);
    }

    private void uninstallCaCert(byte[] caCertificate) {
        mDevicePolicyManager.uninstallCaCert(mAdmin, caCertificate);
    }

    private void uninstallAllUserCaCerts() {
        mDevicePolicyManager.uninstallAllUserCaCerts(mAdmin);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CaCertManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.CaCertManagementTest"	"testCanRetrieveListOfInstalledCaCerts"	""	"1: user"	"public void testCanRetrieveListOfInstalledCaCerts() {
        List<byte[]> caCerts = mDevicePolicyManager.getInstalledCaCerts(mAdmin);
        assertNotNull(caCerts);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        uninstallAllUserCaCerts();
    }

    @Override
    protected void tearDown() throws Exception {
        uninstallAllUserCaCerts();
        super.tearDown();
    }

    /**
     * Test: a valid cert should be installable and also removable.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CaCertManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.CaCertManagementTest"	"testUninstallationIsSelective"	""	"1: user"	"public void testUninstallationIsSelective() throws GeneralSecurityException {
        assertTrue(installCaCert(FAKE_RSA_1.caCertificate));
        assertTrue(installCaCert(FAKE_DSA_1.caCertificate));

        uninstallCaCert(FAKE_DSA_1.caCertificate);
        assertInstalled(FAKE_RSA_1.caCertificate);
        assertUninstalled(FAKE_DSA_1.caCertificate);

        uninstallCaCert(FAKE_RSA_1.caCertificate);
    }

    /**
     * Test: uninstallAllUserCaCerts should be equivalent to calling uninstallCaCert on every
     * supplementary installed certificate.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/CaCertManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetBrightness"	""	"1: system"	"public void testSetBrightness() {
    final int mode = Settings.System.getInt(mContext.getContentResolver(),
        Settings.System.SCREEN_BRIGHTNESS_MODE, SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
    if(mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC) {

        mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
          Settings.System.SCREEN_BRIGHTNESS_MODE, ""0"");

        testSetBrightnessWithValue(TEST_BRIGHTNESS_1);
        testSetBrightnessWithValue(TEST_BRIGHTNESS_2);
        mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
            Settings.System.SCREEN_BRIGHTNESS_MODE,
              mode == SCREEN_BRIGHTNESS_MODE_AUTOMATIC? ""1"" : ""0"");
    }
    else {
       testSetBrightnessWithValue(TEST_BRIGHTNESS_1);
       testSetBrightnessWithValue(TEST_BRIGHTNESS_2);
    }
  }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SetSystemSettingTest"	"testSetSystemSettingsFailsForNotAllowedSettings"	""	"1: system"	"public void testSetSystemSettingsFailsForNotAllowedSettings() throws Exception {
    try {
      mDevicePolicyManager.setSystemSetting(ADMIN_RECEIVER_COMPONENT,
          Settings.System.TEXT_AUTO_REPLACE, ""0"");
      fail(""Didn't throw security exception."");
    } catch (SecurityException e) {
      // Should throw SecurityException.
    }
  }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SetSystemSettingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DeviceIdentifiersTest"	"testProfileOwnerCanGetDeviceIdentifiersWithPermission"	""	"1: system"	"public void testProfileOwnerCanGetDeviceIdentifiersWithPermission() throws Exception {
        // The profile owner with the READ_PHONE_STATE permission should have access to all device
        // identifiers. However since the TelephonyManager methods can return null this method
        // verifies that the profile owner with the READ_PHONE_STATE permission receives the same
        // value that the shell identity receives with the READ_PRIVILEGED_PHONE_STATE permission.
        TelephonyManager telephonyManager = (TelephonyManager) mContext.getSystemService(
                Context.TELEPHONY_SERVICE);
        try {
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getDeviceId""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getDeviceId), telephonyManager.getDeviceId());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getImei""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getImei), telephonyManager.getImei());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getMeid""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getMeid), telephonyManager.getMeid());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getSubscriberId""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getSubscriberId), telephonyManager.getSubscriberId());
            assertEquals(
                    String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getSimSerialNumber""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getSimSerialNumber),
                    telephonyManager.getSimSerialNumber());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getNai""),
                    ShellIdentityUtils.invokeMethodWithShellPermissions(telephonyManager,
                            TelephonyManager::getNai), telephonyManager.getNai());
            assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""Build#getSerial""),
                    ShellIdentityUtils.invokeStaticMethodWithShellPermissions(Build::getSerial),
                    Build.getSerial());
            SubscriptionManager subscriptionManager =
                    (SubscriptionManager) mContext.getSystemService(
                            Context.TELEPHONY_SUBSCRIPTION_SERVICE);
            int subId = subscriptionManager.getDefaultSubscriptionId();
            if (subId != SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
                SubscriptionInfo expectedSubInfo =
                        ShellIdentityUtils.invokeMethodWithShellPermissions(subscriptionManager,
                                (sm) -> sm.getActiveSubscriptionInfo(subId));
                SubscriptionInfo actualSubInfo = subscriptionManager.getActiveSubscriptionInfo(
                        subId);
                assertEquals(String.format(DEVICE_ID_WITH_PERMISSION_ERROR_MESSAGE, ""getIccId""),
                        expectedSubInfo.getIccId(), actualSubInfo.getIccId());
            }
        } catch (SecurityException e) {
            fail(""The profile owner with the READ_PHONE_STATE permission must be able to access ""
                    + ""the device IDs: "" + e);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdentifiersTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testCanRetrieveOwnRestrictionsViaUserManager"	""	"1: user"	"public void testCanRetrieveOwnRestrictionsViaUserManager() {
        final String packageName = mContext.getPackageName();

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName, BUNDLE_0);
        assertBundle0(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName));

        // Check that we got the restrictions changed callback.
        assertBundle0(waitForRestrictionsChangedBroadcast());

        mDevicePolicyManager.setApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName, BUNDLE_1);
        assertBundle1(mDevicePolicyManager.getApplicationRestrictions(
                ADMIN_RECEIVER_COMPONENT, packageName));
        assertBundle1(waitForRestrictionsChangedBroadcast());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testCannotRetrieveOtherPackageRestrictionsViaUserManager"	""	"1: user"	"public void testCannotRetrieveOtherPackageRestrictionsViaUserManager() {
        try {
            mUserManager.getApplicationRestrictions(OTHER_PACKAGE);
            fail(""Expected SecurityException not thrown"");
        } catch (SecurityException expected) {
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationRestrictionsTest"	"testSetApplicationRestrictionsManagingPackageForNotInstalledPackage"	""	"2: user apps"	"public void testSetApplicationRestrictionsManagingPackageForNotInstalledPackage()
            throws NameNotFoundException {
        try {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(ADMIN_RECEIVER_COMPONENT,
                    OTHER_PACKAGE);
            fail(""Not throwing exception for not installed package name"");
        } catch (NameNotFoundException expected) {
            MoreAsserts.assertContainsRegex(OTHER_PACKAGE, expected.getMessage());
        } finally {
            mDevicePolicyManager.setApplicationRestrictionsManagingPackage(ADMIN_RECEIVER_COMPONENT,
                    null);
            assertNull(mDevicePolicyManager.getApplicationRestrictionsManagingPackage(
                    ADMIN_RECEIVER_COMPONENT));
        }
    }

    // Should be consistent with assertBundle0
    private static Bundle createBundle0() {
        Bundle result = new Bundle();
        // Tests for 6 allowed types: Integer, Boolean, String, String[], Bundle and Parcelable[]
        // Also test for string escaping handling
        result.putBoolean(""boolean_0"", false);
        result.putBoolean(""boolean_1"", true);
        result.putInt(""integer"", 0x7fffffff);
        // If a null is stored, """" will be read back
        result.putString(""empty"", """");
        result.putString(""string"", ""text"");
        result.putStringArray(""string[]"", TEST_STRINGS);

        // Adding a bundle, which contain 2 nested restrictions - bundle_string and bundle_int
        Bundle bundle = new Bundle();
        bundle.putString(""bundle_string"", ""bundle_string"");
        bundle.putInt(""bundle_int"", 1);
        result.putBundle(""bundle"", bundle);

        // Adding an array of 2 bundles
        Bundle[] bundleArray = new Bundle[2];
        bundleArray[0] = new Bundle();
        bundleArray[0].putString(""bundle_array_string"", ""bundle_array_string"");
        // Put bundle inside bundle
        bundleArray[0].putBundle(""bundle_array_bundle"", bundle);
        bundleArray[1] = new Bundle();
        bundleArray[1].putString(""bundle_array_string2"", ""bundle_array_string2"");
        result.putParcelableArray(""bundle_array"", bundleArray);
        return result;
    }

    // Should be consistent with createBundle0
    private void assertBundle0(Bundle bundle) {
        assertEquals(8, bundle.size());
        assertEquals(false, bundle.getBoolean(""boolean_0""));
        assertEquals(true, bundle.getBoolean(""boolean_1""));
        assertEquals(0x7fffffff, bundle.getInt(""integer""));
        assertEquals("""", bundle.getString(""empty""));
        assertEquals(""text"", bundle.getString(""string""));

        String[] strings = bundle.getStringArray(""string[]"");
        assertTrue(strings != null && strings.length == TEST_STRINGS.length);
        for (int i = 0; i < strings.length; i++) {
            assertEquals(strings[i], TEST_STRINGS[i]);
        }

        Bundle childBundle = bundle.getBundle(""bundle"");
        assertEquals(""bundle_string"", childBundle.getString(""bundle_string""));
        assertEquals(1, childBundle.getInt(""bundle_int""));

        Parcelable[] bundleArray = bundle.getParcelableArray(""bundle_array"");
        assertEquals(2, bundleArray.length);
        // Verifying bundle_array[0]
        Bundle bundle1 = (Bundle) bundleArray[0];
        assertEquals(""bundle_array_string"", bundle1.getString(""bundle_array_string""));
        Bundle bundle1ChildBundle = bundle1.getBundle(""bundle_array_bundle"");
        assertNotNull(bundle1ChildBundle);
        assertEquals(""bundle_string"", bundle1ChildBundle.getString(""bundle_string""));
        assertEquals(1, bundle1ChildBundle.getInt(""bundle_int""));
        // Verifying bundle_array[1]
        Bundle bundle2 = (Bundle) bundleArray[1];
        assertEquals(""bundle_array_string2"", bundle2.getString(""bundle_array_string2""));
    }

    // Should be consistent with assertBundle1
    private static Bundle createBundle1() {
        Bundle result = new Bundle();
        result.putInt(""placeholder"", 1);
        return result;
    }

    // Should be consistent with createBundle1
    private void assertBundle1(Bundle bundle) {
        assertEquals(1, bundle.size());
        assertEquals(1, bundle.getInt(""placeholder""));
    }

    private void startTestActivity() {
        mContext.startActivity(new Intent()
                .setComponent(new ComponentName(
                        APP_RESTRICTIONS_TARGET_PKG, APP_RESTRICTIONS_ACTIVITY_NAME))
                .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
    }

    private Bundle waitForRestrictionsValueFromTestActivity() {
        startTestActivity();

        try {
            assertTrue(mOnRestrictionsReceivedFromAppSemaphore.tryAcquire(
                    RESTRICTIONS_TIMEOUT_SECONDS, TimeUnit.SECONDS));
        } catch (InterruptedException e) {
            fail(""waitForRestrictionsValueFromTestActivity() interrupted"");
        }

        return mReceivedRestrictions;
    }

    private Bundle waitForRestrictionsChangedBroadcast() {
        try {
            assertTrue(mOnAppRestrictionsChangedSemahore.tryAcquire(
                    RESTRICTIONS_TIMEOUT_SECONDS, TimeUnit.SECONDS));
        } catch (InterruptedException e) {
            fail(""waitForRestrictionsChangedBroadcast() interrupted"");
        }

        return mUserManager.getApplicationRestrictions(mContext.getPackageName());
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHidePolicyExemptApps"	""	"3: user hide apps"	"public void testCannotHidePolicyExemptApps() throws Exception {
        Set<String> policyExemptApps = mDevicePolicyManager.getPolicyExemptApps();
        Log.v(mTag, ""policyExemptApps: "" + policyExemptApps);
        if (policyExemptApps.isEmpty()) return;

        policyExemptApps.forEach((app) -> {
            try {
                boolean hidden = mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                        app, true);

                assertWithMessage(""setApplicationHidden(%s, true)"", app).that(hidden).isFalse();
            } finally {
                maybeUnhideApp(app);
            }
        });
    }

    private void maybeUnhideApp(String app) {
        if (mDevicePolicyManager.isApplicationHidden(ADMIN_RECEIVER_COMPONENT, app)) {
            mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT, app, false);
        }
    }

    private final class ApplicationHiddenReceiver extends BroadcastReceiver {
        private static final int TIMEOUT_SECONDS = 60;
        private final Semaphore mAddedSemaphore = new Semaphore(0);
        private final Semaphore mRemovedSemaphore = new Semaphore(0);

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.v(mTag, ""Received intent on user "" + context.getUserId() + "": ""
                    + Utils.toString(intent));
            Uri uri = intent.getData();
            if (uri == null) {
                return;
            }
            String pkgName = uri.getSchemeSpecificPart();
            if (!PACKAGE_TO_HIDE.equals(pkgName)) {
                return;
            }
            String action = intent.getAction();
            switch(action) {
                case Intent.ACTION_PACKAGE_ADDED:
                    Log.d(mTag, ""Received PACKAGE_ADDED broadcast"");
                    mAddedSemaphore.release();
                    break;
                case Intent.ACTION_PACKAGE_REMOVED:
                    Log.d(mTag, ""Received ACTION_PACKAGE_REMOVED broadcast"");
                    mRemovedSemaphore.release();
                    break;
                default:
                    Log.w(mTag, ""received invalid intent: "" + action);
            }
        }

        public void waitForAddedBroadcast() throws Exception {
            if (!mAddedSemaphore.tryAcquire(TIMEOUT_SECONDS, TimeUnit.SECONDS)) {
                failBroadcastNotReceived(Intent.ACTION_PACKAGE_ADDED);
            }
        }

        public void waitForRemovedBroadcast() throws Exception {
            if (!mRemovedSemaphore.tryAcquire(TIMEOUT_SECONDS, TimeUnit.SECONDS)) {
                failBroadcastNotReceived(Intent.ACTION_PACKAGE_REMOVED);
            }
        }

        private void failBroadcastNotReceived(String broadcast) {
            fail(""Did not receive "" + broadcast + "" broadcast on user "" + mContext.getUserId()
                    + "" in "" + TIMEOUT_SECONDS + ""s."");
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testSetApplicationHidden"	""	"1: hide"	"public void testSetApplicationHidden() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_TO_HIDE)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_TO_HIDE, true))
                        .isTrue();
        assertWithMessage(""isApplicationHidden(%s, %s)"", ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE)
                .that(mDevicePolicyManager
                        .isApplicationHidden(ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE))
                .isTrue();
        mReceiver.waitForRemovedBroadcast();
        assertWithMessage(""setApplicationHidden(%s, %s, false)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_TO_HIDE)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_TO_HIDE, false))
                        .isTrue();
        assertWithMessage(""isApplicationHidden(%s, %s)"", ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE)
                .that(mDevicePolicyManager
                        .isApplicationHidden(ADMIN_RECEIVER_COMPONENT, PACKAGE_TO_HIDE))
                .isFalse();
        mReceiver.waitForAddedBroadcast();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHideActiveAdmin"	""	"1: hide"	"public void testCannotHideActiveAdmin() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                PACKAGE_NAME)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                PACKAGE_NAME, true))
                        .isFalse();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ApplicationHiddenTest"	"testCannotHideNonExistingPackage"	""	"1: hide"	"public void testCannotHideNonExistingPackage() throws Exception {
        assertWithMessage(""setApplicationHidden(%s, %s, true)"", ADMIN_RECEIVER_COMPONENT,
                NONEXISTING_PACKAGE_NAME)
                        .that(mDevicePolicyManager.setApplicationHidden(ADMIN_RECEIVER_COMPONENT,
                                NONEXISTING_PACKAGE_NAME, true))
                        .isFalse();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ApplicationHiddenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.GetPasswordExpirationTest"	"testGetPasswordExpirationUpdatedAfterPasswordReset_afterReset"	""	"1: system"	"public void testGetPasswordExpirationUpdatedAfterPasswordReset_afterReset() throws Exception {
        checkPasswordExpiration(""Password expiration time not refreshed correctly""
                + "" after reseting password"", TIMEOUT_RESET_TEST, 10000);
    }

    private void checkPasswordExpiration(String error, long timeout, long tolerance) {
        assertTrue(error, abs(System.currentTimeMillis() + timeout
                - mDevicePolicyManager.getPasswordExpiration(
                ADMIN_RECEIVER_COMPONENT)) <= tolerance);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/GetPasswordExpirationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.MeteredDataRestrictionTest"	"testSetMeteredDataDisabledPackages"	""	"2: system user"	"public void testSetMeteredDataDisabledPackages() {
        final List<String> restrictedPkgs = new ArrayList<>();
        restrictedPkgs.add(METERED_DATA_APP_PKG);
        final List<String> excludedPkgs = mDevicePolicyManager.setMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT, restrictedPkgs);
        assertTrue(""Packages not restricted: "" + excludedPkgs, excludedPkgs.isEmpty());

        List<String> actualRestrictedPkgs = mDevicePolicyManager.getMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertEquals(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                1, actualRestrictedPkgs.size());
        assertTrue(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                actualRestrictedPkgs.contains(METERED_DATA_APP_PKG));
        verifyAppNetworkState(true);

        restrictedPkgs.clear();
        mDevicePolicyManager.setMeteredDataDisabledPackages(ADMIN_RECEIVER_COMPONENT,
                restrictedPkgs);
        actualRestrictedPkgs = mDevicePolicyManager.getMeteredDataDisabledPackages(
                ADMIN_RECEIVER_COMPONENT);
        assertTrue(""Actual restricted pkgs: "" + actualRestrictedPkgs,
                actualRestrictedPkgs.isEmpty());
        verifyAppNetworkState(false);
    }

    private void verifyAppNetworkState(boolean blocked) {
        final Bundle extras = new Bundle();
        extras.putBinder(EXTRA_MESSENGER, mCallbackMessenger.getBinder());
        mNetworkInfos.clear();
        final Intent launchIntent = new Intent()
                .setClassName(METERED_DATA_APP_PKG, METERED_DATA_APP_MAIN_ACTIVITY)
                .putExtras(extras)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(launchIntent);

        try {
            final NetworkInfo networkInfo = mNetworkInfos.poll(WAIT_FOR_NETWORK_INFO_TIMEOUT_SEC,
                    TimeUnit.SECONDS);
            if (networkInfo == null) {
                fail(""Timed out waiting for the network info"");
            }

            final String expectedState = (blocked ? State.DISCONNECTED : State.CONNECTED).name();
            final String expectedDetailedState = (blocked ? DetailedState.BLOCKED
                    : DetailedState.CONNECTED).name();
            assertEquals(""Wrong state: "" + networkInfo,
                    expectedState, networkInfo.getState().name());
            assertEquals(""Wrong detailed state: "" + networkInfo,
                    expectedDetailedState, networkInfo.getDetailedState().name());
        } catch (InterruptedException e) {
            fail(""Waiting for networkinfo got interrupted: "" + e);
        }
    }

    private class CallbackHandler extends Handler {
        public CallbackHandler() {
            super(Looper.getMainLooper());
        }

        @Override
        public void handleMessage(Message msg) {
            if (msg.what == MSG_NOTIFY_NETWORK_STATE) {
                final NetworkInfo networkInfo = (NetworkInfo) msg.obj;
                if (!mNetworkInfos.offer(networkInfo)) {
                    Log.e(TAG, ""Error while adding networkinfo"");
                }
            } else {
                Log.e(TAG, ""Unknown msg type: "" + msg.what);
            }
        }
    }

    private void setMeteredNetwork() throws Exception {
        final int oldNetId = getActiveNetworkNetId();
        final boolean oldMeteredState = mCm.isActiveNetworkMetered();
        final NetworkInfo networkInfo = mCm.getActiveNetworkInfo();
        Log.d(TAG, ""setMeteredNetwork(): oldNetId="" + oldNetId
                + "", oldMeteredState="" + oldMeteredState + "", activeNetworkInfo="" + networkInfo);
        if (networkInfo == null) {
            fail(""Active network is not available"");
        } else if (networkInfo.getType() != ConnectivityManager.TYPE_WIFI) {
            fail(""Active network doesn't support setting metered status: "" + networkInfo);
        }
        final String ssid = setWifiMeteredStatus(true);

        // Set flag so status is reverted on resetMeteredNetwork();
        mMeteredWifi = ssid;

        // When transitioning from unmetered to metered, the network stack will discconect
        // the current WiFi connection and reconnect it. In this case we need to wait for
        // the new network to come up.
        if (!oldMeteredState) {
            waitForReconnection(oldNetId);
        }
        assertWifiMeteredStatus(ssid, true);
        assertActiveNetworkMetered(true);
    }

    private void resetMeteredNetwork() throws Exception {
        if (mMeteredWifi != null) {
            Log.i(TAG, ""Resetting metered status for netId="" + mMeteredWifi);
            setWifiMeteredStatus(mMeteredWifi, /* metered= */ null);
            assertWifiMeteredStatus(mMeteredWifi, /* metered= */ null);
            assertActiveNetworkMetered(false);
        }
    }

    private String setWifiMeteredStatus(Boolean metered) throws Exception {
        // Must use Shell permissions to get the connection info because on headless system user
        // mode the method would be called by the device owner on system user, which have location
        // disabled (and hence the returned connectionInfo would have the SSID redacted).
        WifiInfo connectionInfo = invokeStaticMethodWithShellPermissions(
                () -> mWm.getConnectionInfo());

        String ssid = connectionInfo.getSSID();
        assertNotNull(""null SSID"", ssid);
        assertNotEquals(""unknown SSID"", WifiManager.UNKNOWN_SSID, ssid);

        final String netId = ssid.trim().replaceAll(""\"""", """"); // remove quotes, if any.
        assertFalse(""empty SSID"", ssid.isEmpty());

        Log.d(TAG, ""setWifiMeteredStatus("" + metered + ""): setting "" + connectionInfo);
        setWifiMeteredStatus(netId, metered);
        return netId;
    }

    private void setWifiMeteredStatus(String ssid, Boolean metered) throws Exception {
        Log.i(TAG, ""Setting wi-fi network "" + ssid + "" metered status to "" + metered);
        executeCmd(""cmd netpolicy set metered-network "" + ssid + "" "" +
                (metered != null ? metered.toString() : ""undefined""));
    }

    private void assertWifiMeteredStatus(String ssid, Boolean metered) throws Exception {
        final String cmd = ""cmd netpolicy list wifi-networks"";
        final String expectedResult = ssid + "";"" + (metered != null ? metered.toString() : ""none"");
        String cmdResult = null;
        for (int i = 0; i < NUM_TRIES_METERED_STATUS_CHECK; ++i) {
            cmdResult = executeCmd(cmd);
            if (cmdResult.contains(expectedResult)) {
                return;
            }
            SystemClock.sleep(INTERVAL_METERED_STATUS_CHECK_MS);
        }
        fail(""Timed out waiting for wifi metered status to change. expected="" + expectedResult
                + "", actual status="" + cmdResult);
    }

    private void assertActiveNetworkMetered(boolean metered) {
        boolean actualMeteredStatus = !metered;
        for (int i = 0; i < NUM_TRIES_METERED_STATUS_CHECK; ++i) {
            actualMeteredStatus = mCm.isActiveNetworkMetered();
            if (actualMeteredStatus == metered) {
                return;
            }
            SystemClock.sleep(INTERVAL_METERED_STATUS_CHECK_MS);
        }
        fail(""Timed out waiting for active network metered status to change. expected=""
                + metered + ""; actual="" + actualMeteredStatus
                + ""; networkInfo="" + mCm.getActiveNetwork());
    }

    private String executeCmd(String cmd) throws Exception {
        final String result = SystemUtil.runShellCommand(getInstrumentation(), cmd);
        Log.i(TAG, ""Cmd '"" + cmd + ""' result: "" + result);
        return result;
    }

    private int getActiveNetworkNetId() {
        Network network = mCm.getActiveNetwork();
        if (network == null) {
            return 0;
        }
        return network.getNetId();
    }

    private void waitForReconnection(int oldNetId) throws InterruptedException {
        long pollingDeadline = System.currentTimeMillis()
                + WAIT_FOR_NETWORK_RECONNECTION_TIMEOUT_SEC * 1000;
        int latestNetId;
        do {
            Thread.sleep(1000);
            if (System.currentTimeMillis() >= pollingDeadline) {
                fail(""Timeout waiting for network reconnection"");
            }
            latestNetId = getActiveNetworkNetId();
            // NetId will be 0 while old network is disconnected but new network
            // has not come up yet.
        } while (latestNetId == 0 || latestNetId == oldNetId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/MeteredDataRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testSetDelegateScope_noDelegation"	""	"3: system user camera"	"public void testSetDelegateScope_noDelegation() {
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG,
                Arrays.asList());

        assertThat(mDevicePolicyManager.getDelegatedScopes(
                ADMIN_RECEIVER_COMPONENT, DELEGATE_APP_PKG))
                .doesNotContain(DELEGATION_SECURITY_LOGGING);
    }

    private void generateKey(String keyAlias) throws Exception {
        final KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
        generator.initialize(
                new KeyGenParameterSpec.Builder(keyAlias, KeyProperties.PURPOSE_SIGN).build());
        final KeyPair keyPair = generator.generateKeyPair();
        assertNotNull(keyPair);
    }

    private void verifyKeyGeneratedEventPresent(List<SecurityEvent> events, String alias) {
        findEvent(""key generated"", events,
                e -> e.getTag() == TAG_KEY_GENERATED
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, ALIAS_INDEX).contains(alias)
                        && getInt(e, UID_INDEX) == Process.myUid());
    }

    private void importKey(String alias) throws Exception{
        final KeyStore ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        ks.setEntry(alias, new KeyStore.SecretKeyEntry(new SecretKeySpec(new byte[32], ""AES"")),
                new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT).build());
    }

    private void verifyKeyImportedEventPresent(List<SecurityEvent> events, String alias) {
        findEvent(""key imported"", events,
                e -> e.getTag() == TAG_KEY_IMPORT
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, ALIAS_INDEX).contains(alias)
                        && getInt(e, UID_INDEX) == Process.myUid());
    }

    private void deleteKey(String keyAlias) throws Exception {
        final KeyStore ks = KeyStore.getInstance(""AndroidKeyStore"");
        ks.load(null);
        ks.deleteEntry(keyAlias);
    }

    private void verifyKeyDeletedEventPresent(List<SecurityEvent> events, String alias) {
        findEvent(""key deleted"", events,
                e -> e.getTag() == TAG_KEY_DESTRUCTION
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, ALIAS_INDEX).contains(alias)
                        && getInt(e, UID_INDEX) == Process.myUid());
    }

    private void installCaCert() {
        assertTrue(
                mDevicePolicyManager.installCaCert(ADMIN_RECEIVER_COMPONENT, TEST_CA.getBytes()));
    }

    private void verifyCertInstalledEventPresent(List<SecurityEvent> events) {
        findEvent(""cert authority installed"", events,
                e -> e.getTag() == TAG_CERT_AUTHORITY_INSTALLED
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, SUBJECT_INDEX).equals(TEST_CA_SUBJECT));
    }

    private void uninstallCaCert() {
        mDevicePolicyManager.uninstallCaCert(ADMIN_RECEIVER_COMPONENT, TEST_CA.getBytes());
    }

    private void verifyCertUninstalledEventPresent(List<SecurityEvent> events) {
        findEvent(""cert authority removed"", events,
                e -> e.getTag() == TAG_CERT_AUTHORITY_REMOVED
                        && getInt(e, SUCCESS_INDEX) == SUCCESS_VALUE
                        && getString(e, SUBJECT_INDEX).equals(TEST_CA_SUBJECT));
    }

    private void generatePasswordComplexityEvents() {
        DevicePolicyManager dpm = getDpmToGenerateEvents();

        dpm.setPasswordQuality(ADMIN_RECEIVER_COMPONENT, PASSWORD_QUALITY_COMPLEX);
        dpm.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, TEST_PWD_LENGTH);
        dpm.setPasswordMinimumLetters(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
        dpm.setPasswordMinimumNonLetter(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
        dpm.setPasswordMinimumUpperCase(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
        dpm.setPasswordMinimumLowerCase(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
        dpm.setPasswordMinimumNumeric(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
        dpm.setPasswordMinimumSymbols(ADMIN_RECEIVER_COMPONENT, TEST_PWD_CHARS);
    }

    private void generateNewStylePasswordComplexityEvents() {
        DevicePolicyManager dpm = getDpmToGenerateEvents();

        dpm.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_HIGH);
    }

    private void verifyPasswordComplexityEventsPresent(List<SecurityEvent> events) {
        final int userId = Process.myUserHandle().getIdentifier();
        // This reflects default values for password complexity event payload fields.
        final Object[] expectedPayload = new Object[] {
                ADMIN_RECEIVER_COMPONENT.getPackageName(), // admin package
                userId,                    // admin user
                userId,                    // target user
                0,                         // default password length
                0,                         // default password quality
                1,                         // default min letters
                0,                         // default min non-letters
                1,                         // default min numeric
                0,                         // default min uppercase
                0,                         // default min lowercase
                1,                         // default min symbols
        };

        // The order should be consistent with the order in generatePasswordComplexityEvents(), so
        // that the expected values change in the same sequence as when setting password policies.
        expectedPayload[PWD_QUALITY_INDEX] = PASSWORD_QUALITY_COMPLEX;
        findPasswordComplexityEvent(""set pwd quality"", events, expectedPayload);
        expectedPayload[PWD_LEN_INDEX] = TEST_PWD_LENGTH;
        findPasswordComplexityEvent(""set pwd length"", events, expectedPayload);
        expectedPayload[LETTERS_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min letters"", events, expectedPayload);
        expectedPayload[NON_LETTERS_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min non-letters"", events, expectedPayload);
        expectedPayload[UPPERCASE_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min uppercase"", events, expectedPayload);
        expectedPayload[LOWERCASE_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min lowercase"", events, expectedPayload);
        expectedPayload[NUMERIC_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min numeric"", events, expectedPayload);
        expectedPayload[SYMBOLS_INDEX] = TEST_PWD_CHARS;
        findPasswordComplexityEvent(""set pwd min symbols"", events, expectedPayload);
    }

    private void verifyNewStylePasswordComplexityEventPresent(List<SecurityEvent> events) {
        final int userId = Process.myUserHandle().getIdentifier();
        // This reflects default values for password complexity event payload fields.
        final Object[] expectedPayload = new Object[] {
                ADMIN_RECEIVER_COMPONENT.getPackageName(), // admin package
                userId,                    // admin user
                userId,                    // target user
                PASSWORD_COMPLEXITY_HIGH   // password complexity
        };

        findNewStylePasswordComplexityEvent(""require password complexity"", events, expectedPayload);
    }

    private void generateLockingPolicyEvents() {
        DevicePolicyManager dpm = mContext.getSystemService(DevicePolicyManager.class);

        if (mHasSecureLockScreen) {
            dpm.setPasswordExpirationTimeout(ADMIN_RECEIVER_COMPONENT, TEST_PWD_EXPIRATION_TIMEOUT);
            dpm.setPasswordHistoryLength(ADMIN_RECEIVER_COMPONENT, TEST_PWD_HISTORY_LENGTH);
            dpm.setMaximumFailedPasswordsForWipe(ADMIN_RECEIVER_COMPONENT, TEST_PWD_MAX_ATTEMPTS);
        }
        dpm.setKeyguardDisabledFeatures(ADMIN_RECEIVER_COMPONENT,
                KEYGUARD_DISABLE_FINGERPRINT);
        dpm.setMaximumTimeToLock(ADMIN_RECEIVER_COMPONENT, TEST_MAX_TIME_TO_LOCK);
        dpm.lockNow();
    }

    private void verifyLockingPolicyEventsPresent(List<SecurityEvent> events) {
        final int userId = Process.myUserHandle().getIdentifier();
        final String packageName = ADMIN_RECEIVER_COMPONENT.getPackageName();
        if (mHasSecureLockScreen) {
            findEvent(""set password expiration"", events,
                    e -> e.getTag() == TAG_PASSWORD_EXPIRATION_SET &&
                            getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                            getInt(e, ADMIN_USER_INDEX) == userId &&
                            getInt(e, TARGET_USER_INDEX) == userId &&
                            getLong(e, PWD_EXPIRATION_INDEX) == TEST_PWD_EXPIRATION_TIMEOUT);

            findEvent(""set password history length"", events,
                    e -> e.getTag() == TAG_PASSWORD_HISTORY_LENGTH_SET &&
                            getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                            getInt(e, ADMIN_USER_INDEX) == userId &&
                            getInt(e, TARGET_USER_INDEX) == userId &&
                            getInt(e, PWD_HIST_LEN_INDEX) == TEST_PWD_HISTORY_LENGTH);

            findEvent(""set password attempts"", events,
                    e -> e.getTag() == TAG_MAX_PASSWORD_ATTEMPTS_SET &&
                            getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                            getInt(e, ADMIN_USER_INDEX) == userId &&
                            getInt(e, TARGET_USER_INDEX) == userId &&
                            getInt(e, MAX_PWD_ATTEMPTS_INDEX) == TEST_PWD_MAX_ATTEMPTS);
        }

        findEvent(""set keyguard disabled features"", events,
                e -> e.getTag() == TAG_KEYGUARD_DISABLED_FEATURES_SET &&
                        getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                        getInt(e, ADMIN_USER_INDEX) == userId &&
                        getInt(e, TARGET_USER_INDEX) == userId &&
                        getInt(e, KEYGUARD_FEATURES_INDEX) == KEYGUARD_DISABLE_FINGERPRINT);

        findEvent(""set screen lock timeout"", events,
                e -> e.getTag() == TAG_MAX_SCREEN_LOCK_TIMEOUT_SET &&
                        getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                        getInt(e, ADMIN_USER_INDEX) == userId &&
                        getInt(e, TARGET_USER_INDEX) == userId &&
                        getLong(e, MAX_SCREEN_TIMEOUT_INDEX) == TEST_MAX_TIME_TO_LOCK);

        findEvent(""set screen lock timeout"", events,
                e -> e.getTag() == TAG_REMOTE_LOCK &&
                        getString(e, ADMIN_PKG_INDEX).equals(packageName) &&
                        getInt(e, ADMIN_USER_INDEX) == userId);
    }

    private void findPasswordComplexityEvent(
            String description, List<SecurityEvent> events, Object[] expectedPayload) {
        findEvent(description, events,
                byTagAndPayload(TAG_PASSWORD_COMPLEXITY_SET, expectedPayload));
    }

    private void findNewStylePasswordComplexityEvent(
            String description, List<SecurityEvent> events, Object[] expectedPayload) {
        findEvent(description, events,
                byTagAndPayload(TAG_PASSWORD_COMPLEXITY_REQUIRED, expectedPayload));
    }

    private Predicate<SecurityEvent> byTagAndPayload(int expectedTag, Object[] expectedPayload) {
        return (event) -> {
            boolean tagMatch = event.getTag() == expectedTag;
            if (!tagMatch) return false;

            Object[] payload = (Object[]) event.getData();
            boolean payloadMatch = Arrays.equals(payload, expectedPayload);

            if (!payloadMatch) {
                Log.w(TAG, ""Found event (id="" + event.getId() + "") with tag ""
                        + eventLogtoString(event.getTag()) + "", but invalid payload: ""
                        + ""expected="" + Arrays.toString(expectedPayload)
                        + "", actual="" + Arrays.toString(payload));
            } else if (VERBOSE) {
                Log.v(TAG, ""Found event (id="" + event.getId() + "") with tag ""
                        + eventLogtoString(event.getTag()) + "", and expected payload (""
                        + Arrays.toString(payload) + "")"");
            }
            return payloadMatch;
        };
    }

    private void generateUserRestrictionEvents() {
        DevicePolicyManager dpm = getDpmToGenerateEvents();

        dpm.addUserRestriction(ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_PRINTING);
        dpm.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_PRINTING);
    }

    private void verifyUserRestrictionEventsPresent(List<SecurityEvent> events) {
        findUserRestrictionEvent(""set user restriction"", events, TAG_USER_RESTRICTION_ADDED);
        findUserRestrictionEvent(""clear user restriction"", events, TAG_USER_RESTRICTION_REMOVED);
    }

    private void findUserRestrictionEvent(String description, List<SecurityEvent> events, int tag) {
        final int userId = Process.myUserHandle().getIdentifier();
        findEvent(description, events,
                e -> e.getTag() == tag &&
                        getString(e, ADMIN_PKG_INDEX).equals(
                                ADMIN_RECEIVER_COMPONENT.getPackageName()) &&
                        getInt(e, ADMIN_USER_INDEX) == userId &&
                        UserManager.DISALLOW_PRINTING.equals(getString(e, USER_RESTRICTION_INDEX)));
    }

    private void generateCameraPolicyEvents() {
        DevicePolicyManager dpm = getDpmToGenerateEvents();

        dpm.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);
        dpm.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
    }

    private void verifyCameraPolicyEvents(List<SecurityEvent> events) {
        final int userId = Process.myUserHandle().getIdentifier();

        findEvent(""set camera disabled"", events,
                e -> e.getTag() == TAG_CAMERA_POLICY_SET &&
                        getString(e, ADMIN_PKG_INDEX).equals(
                                ADMIN_RECEIVER_COMPONENT.getPackageName()) &&
                        getInt(e, ADMIN_USER_INDEX) == userId &&
                        getInt(e, TARGET_USER_INDEX) == userId &&
                        getInt(e, CAMERA_DISABLED_INDEX) == 1);

        findEvent(""set camera enabled"", events,
                e -> e.getTag() == TAG_CAMERA_POLICY_SET &&
                        getString(e, ADMIN_PKG_INDEX).equals(
                                ADMIN_RECEIVER_COMPONENT.getPackageName()) &&
                        getInt(e, ADMIN_USER_INDEX) == userId &&
                        getInt(e, TARGET_USER_INDEX) == userId &&
                        getInt(e, CAMERA_DISABLED_INDEX) == 0);
    }

    private DevicePolicyManager getDpmToGenerateEvents() {
        // It must use the dpm for the current user, as mDevicePolicyManager tunnels the calls to
        // the device owner user on headless system user, which would cause a mismatch in the events
        return mContext.getSystemService(DevicePolicyManager.class);
    }

    private static String eventLogtoString(int log) {
        return DebugUtils.constantToString(SecurityLog.class, ""TAG_"", log);
    }

    private static String toString(SecurityEvent event) {
        return ""Event[id="" + event.getId() + "",tag="" + eventLogtoString(event.getTag()) + ""]"";
    }

    private void dumpSecurityLogs(List<SecurityEvent> events) {
        Log.d(TAG, ""Security events dump ("" + events.size() + "" events):"");
        events.forEach((event) -> Log.d(TAG, toString(event)));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testRetrievingSecurityLogsThrowsSecurityException"	""	"1: user"	"public void testRetrievingSecurityLogsThrowsSecurityException() {
        try {
            mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT);
            fail(""did not throw expected SecurityException"");
        } catch (SecurityException expected) {
        }
    }

    /**
     * Test: retrieving previous security logs can only be done if there's one user on the device or
     * all secondary users / profiles are affiliated.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testVerifyGeneratedLogs"	""	"2: user camera"	"public void testVerifyGeneratedLogs() throws Exception {
        forceSecurityLogs();

        final List<SecurityEvent> events = getEvents();

        verifyAutomaticEventsPresent(events);
        verifyKeystoreEventsPresent(events);
        verifyKeyChainEventsPresent(events);
        verifyAdminEventsPresent(events);
        verifyAdbShellCommand(events); // Event generated from host side logic
        if (mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()) {
            verifyEventsRedacted(events);
        }
    }

    private void forceSecurityLogs() throws Exception {
        UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())
                .executeShellCommand(""dpm force-security-logs"");
    }

    private void verifyAutomaticEventsPresent(List<SecurityEvent> events) {
        verifyOsStartupEventPresent(events);
        verifyLoggingStartedEventPresent(events);
        verifyCryptoSelfTestEventPresent(events);
    }

    private void verifyKeyChainEventsPresent(List<SecurityEvent> events) {
        verifyCertInstalledEventPresent(events);
        verifyCertUninstalledEventPresent(events);
    }

    private void verifyKeystoreEventsPresent(List<SecurityEvent> events) {
        verifyKeyGeneratedEventPresent(events, GENERATED_KEY_ALIAS);
        verifyKeyDeletedEventPresent(events, GENERATED_KEY_ALIAS);
        verifyKeyImportedEventPresent(events, IMPORTED_KEY_ALIAS);
        verifyKeyDeletedEventPresent(events, IMPORTED_KEY_ALIAS);
    }

    private void verifyAdminEventsPresent(List<SecurityEvent> events) {
        if (mHasSecureLockScreen) {
            verifyPasswordComplexityEventsPresent(events);
            verifyNewStylePasswordComplexityEventPresent(events);
        }
        verifyLockingPolicyEventsPresent(events);
        verifyUserRestrictionEventsPresent(events);
        verifyCameraPolicyEvents(events);
    }
    private void verifyAdbShellCommand(List<SecurityEvent> events) {
        // Won't be able to locate the command on org-owned devices, as it will be redacted.
        if (!mDevicePolicyManager.isOrganizationOwnedDeviceWithManagedProfile()) {
            findEvent(""adb command"", events,
                    e -> e.getTag() == TAG_ADB_SHELL_CMD &&
                            e.getData().equals(""whoami""));

        }
    }

    private void verifyEventsRedacted(List<SecurityEvent> events) {
        final int userId = Process.myUserHandle().getIdentifier();
        for (SecurityEvent event : events) {
            switch (event.getTag()) {
                case TAG_ADB_SHELL_CMD:
                    assertTrue(TextUtils.isEmpty((String) event.getData()));
                    break;
                case TAG_APP_PROCESS_START:
                case TAG_KEY_GENERATED:
                case TAG_KEY_IMPORT:
                case TAG_KEY_DESTRUCTION:
                    assertEquals(userId, UserHandle.getUserId(getInt(event, UID_INDEX)));
                    break;
                case TAG_CERT_AUTHORITY_INSTALLED:
                case TAG_CERT_AUTHORITY_REMOVED:
                    assertEquals(userId, getInt(event, USERID_INDEX));
                    break;
                case TAG_KEY_INTEGRITY_VIOLATION:
                    assertEquals(userId, UserHandle.getUserId(getInt(event, 1)));
                    break;
            }
        }
    }

    /**
     * Generates events for positive test cases.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SecurityLoggingTest"	"testGenerateLogs"	""	"2: user camera"	"public void testGenerateLogs() throws Exception {
        generateKeystoreEvents();
        generateKeyChainEvents();
        generateAdminEvents();
    }

    private void generateKeyChainEvents() {
        installCaCert();
        uninstallCaCert();
    }

    private void generateKeystoreEvents() throws Exception {
        generateKey(GENERATED_KEY_ALIAS);
        deleteKey(GENERATED_KEY_ALIAS);
        importKey(IMPORTED_KEY_ALIAS);
        deleteKey(IMPORTED_KEY_ALIAS);
    }

    private void generateAdminEvents() {
        if (mHasSecureLockScreen) {
            generatePasswordComplexityEvents();
            generateNewStylePasswordComplexityEvents();
        }
        generateLockingPolicyEvents();
        generateUserRestrictionEvents();
        generateCameraPolicyEvents();
    }

    /**
     * Fetches and checks the events.
     */
    private List<SecurityEvent> getEvents() throws Exception {
        List<SecurityEvent> events = null;
        // Retry once after seeping for 1 second, in case ""dpm force-security-logs"" hasn't taken
        // effect just yet.
        for (int i = 0; i < 2 && events == null; i++) {
            events = mDevicePolicyManager.retrieveSecurityLogs(ADMIN_RECEIVER_COMPONENT);
            Log.v(TAG, ""getEvents(), batch #"" + i + "": ""  + (events == null ? -1 : events.size())
                    + "" events"");
            if (events == null) sleep(1000);
        }

        Log.d(TAG, ""getEvents(): received "" + events.size() + "" events"");
        if (VERBOSE) dumpSecurityLogs(events);

        try {
            verifySecurityLogs(events);
        } catch (AssertionFailedError e) {
            dumpSecurityLogs(events);
            throw e;
        }

        return events;
    }

    /**
     * Test: check that there are no gaps between ids in two consecutive batches. Shared preference
     * is used to store these numbers between test invocations.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PolicyTransparencyTest"	"testUserRestrictions"	""	"1: user"	"public void testUserRestrictions() throws Exception {
        // Test with a few random user restrictions:
        runTestForRestriction(UserManager.DISALLOW_ADJUST_VOLUME);
        runTestForRestriction(UserManager.DISALLOW_CONFIG_WIFI);
        runTestForRestriction(UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }

    private void runTestForRestriction(String restriction) throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        Intent intent = mDevicePolicyManager.createAdminSupportIntent(restriction);
        assertNotNull(intent);
        assertEquals(ADMIN_RECEIVER_COMPONENT,
                (ComponentName) intent.getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN));
        assertEquals(restriction, intent.getStringExtra(DevicePolicyManager.EXTRA_RESTRICTION));

        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
        intent = mDevicePolicyManager.createAdminSupportIntent(restriction);
        assertNull(intent);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PolicyTransparencyTest"	"testCameraDisabled"	""	"1: camera"	"public void testCameraDisabled() throws Exception {
        mDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);

        Intent intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_CAMERA);
        assertNotNull(intent);
        assertEquals(ADMIN_RECEIVER_COMPONENT,
                (ComponentName) intent.getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN));
        assertEquals(DevicePolicyManager.POLICY_DISABLE_CAMERA,
                intent.getStringExtra(DevicePolicyManager.EXTRA_RESTRICTION));

        mDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
        intent = mDevicePolicyManager.createAdminSupportIntent(
                DevicePolicyManager.POLICY_DISABLE_CAMERA);
        assertNull(intent);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"disableService"	""	"1: user"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static android.os.UserManager.DISALLOW_AUTOFILL;
import static android.provider.Settings.Secure.AUTOFILL_SERVICE;
import static android.provider.Settings.Secure.USER_SETUP_COMPLETE;

import android.content.Intent;

public class AutofillRestrictionsTest extends BaseDeviceAdminTest {

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.autofillapp/.SimpleAutofillService"";
    private static final String AUTOFILL_PACKAGE_NAME = ""com.android.cts.devicepolicy.autofillapp"";
    private static final String AUTOFILL_ACTIVITY_NAME = AUTOFILL_PACKAGE_NAME + "".SimpleActivity"";

    // Before, autofill_service was a cloned service, so it was only set in the default user,
    // and we were using a guard to decide how to set it.
    // Autofill_service has been changed now to be a per-user service so we are currently
    // setting this to false.
    private final boolean USES_CLONED_SETTINGS = false;

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);
        }
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AutofillRestrictionsTest"	"testDisallowAutofill_allowed"	""	"1: user"	"public void testDisallowAutofill_allowed() throws Exception {
        enableService();

        final boolean enabledBefore = launchActivityAndGetEnabled();
        assertTrue(enabledBefore);

        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);

        // Must try a couple times because it will be disabled asynchronously.
        for (int i = 1; i <= 15; i++) {
            final boolean disabledAfter = !launchActivityAndGetEnabled();
            if (disabledAfter) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""Not disabled after a period of time"");
    }

    private boolean launchActivityAndGetEnabled() throws Exception {
        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(AUTOFILL_PACKAGE_NAME, AUTOFILL_ACTIVITY_NAME);
        final AutofillActivity activity = launchActivity(""com.android.cts.deviceandprofileowner"",
                AutofillActivity.class, null);
        return activity.isAutofillEnabled();
    }

    private void enableService() throws Exception {
        runShellCommand(""settings put secure --user %d %s %d default"",
                mUserId, USER_SETUP_COMPLETE, 1);

        if (USES_CLONED_SETTINGS) {
            runShellCommand(""settings put secure %s %s default"", AUTOFILL_SERVICE, SERVICE_NAME);
        } else {
            runShellCommand(""settings put --user %d secure %s %s default"",
                    mUserId, AUTOFILL_SERVICE, SERVICE_NAME);
        }
        waitForServiceSettingSaved(SERVICE_NAME);
    }

    private void disableService() {
        if (USES_CLONED_SETTINGS) {
            runShellCommand(""settings delete secure %s"", AUTOFILL_SERVICE);
        } else {
            runShellCommand(""settings delete --user %d secure %s"", mUserId, AUTOFILL_SERVICE);
        }
    }

    private void waitForServiceSettingSaved(String expected) throws Exception {
        String actual = null;
        // Wait up to 0.5 seconds until setting is saved.
        for (int i = 0; i < 5; i++) {
            if (USES_CLONED_SETTINGS) {
                actual = runShellCommand(""settings get secure %s"", AUTOFILL_SERVICE);
            } else {
                actual = runShellCommand(""settings get --user %d secure %s"", mUserId,
                        AUTOFILL_SERVICE);
            }
            if (expected.equals(actual)) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""Expected service status for user "" + mUserId + "": "" + expected
                + ""; actual: "" + actual + "" after 0.5 seconds"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testAddGetAndClearUserRestriction_onParent"	""	"2: system user"	"public void testAddGetAndClearUserRestriction_onParent() {
        int locationMode = 1;
        try {
            locationMode = runWithShellPermissionIdentity(
                    () -> Settings.Secure.getIntForUser(mContentResolver,
                            Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM));

            for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS) {
                testAddGetAndClearUserRestriction_onParent(restriction);
            }
            for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {
                testAddGetAndClearUserRestriction_onParent(restriction);
            }
        } finally {
            // Restore the location mode setting after adding and removing the
            // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user
            // restriction causes the location mode setting to be turned off.
            final int finalLocationMode = locationMode;
            runWithShellPermissionIdentity(() -> Settings.Secure.putIntForUser(mContentResolver,
                    Settings.Secure.LOCATION_MODE, finalLocationMode, UserHandle.USER_SYSTEM));
        }
    }

    private void testAddGetAndClearUserRestriction_onParent(String restriction) {
        mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        Bundle restrictions = mParentDevicePolicyManager.getUserRestrictions(
                ADMIN_RECEIVER_COMPONENT);
        assertThat(restrictions.get(restriction)).isNotNull();

        mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        restrictions = mParentDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT);
        assertThat(restrictions.get(restriction)).isNull();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest"	"testUnableToAddAndClearBaseUserRestrictions_onParent"	""	"1: user"	"public void testUnableToAddAndClearBaseUserRestrictions_onParent() {
        testUnableToAddBaseUserRestriction(UserManager.DISALLOW_REMOVE_MANAGED_PROFILE);
        testUnableToClearBaseUserRestriction(UserManager.DISALLOW_REMOVE_MANAGED_PROFILE);
        testUnableToAddBaseUserRestriction(UserManager.DISALLOW_ADD_USER);
        testUnableToClearBaseUserRestriction(UserManager.DISALLOW_ADD_USER);
    }

    private void testUnableToAddBaseUserRestriction(String restriction) {
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction));
    }

    private void testUnableToClearBaseUserRestriction(String restriction) {
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ResetPasswordTest"	"testResetPasswordDeprecated"	""	"1: user"	"public void testResetPasswordDeprecated() {
        waitUntilUserUnlocked();

        if (getTargetSdkLevel() >= Build.VERSION_CODES.O) {
            try {
                mDevicePolicyManager.resetPassword(""1234"", 0);
                fail(""resetPassword() should throw SecurityException"");
            } catch (SecurityException e) { }

        } else {
            assertFalse(mDevicePolicyManager.resetPassword(""1234"", 0));
        }
    }

    private int getTargetSdkLevel() {
        return mContext.getApplicationContext().getApplicationInfo().targetSdkVersion;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ResetPasswordTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanGenerateKeyPairWithKeyAttestationUsingStrongBox"	""	"1: system"	"public void testCanGenerateKeyPairWithKeyAttestationUsingStrongBox() throws Exception {
        try {
            for (SupportedKeyAlgorithm supportedKey : SUPPORTED_KEY_ALGORITHMS) {
                assertThat(
                        generateKeyAndCheckAttestation(
                                supportedKey.keyAlgorithm,
                                supportedKey.signatureAlgorithm,
                                supportedKey.signaturePaddingSchemes,
                                true /* useStrongBox */,
                                0))
                        .isNotNull();
            }
        } catch (StrongBoxUnavailableException expected) {
            assertThat(hasStrongBox()).isFalse();
        }
    }

    public void assertAllVariantsOfDeviceIdAttestation(boolean useStrongBox) throws Exception {
        List<Integer> modesToTest = new ArrayList<Integer>();
        String imei = null;
        String meid = null;
        // All devices must support at least basic device information attestation as well as serial
        // number attestation. Although attestation of unique device ids are only callable by device
        // owner.
        modesToTest.add(ID_TYPE_BASE_INFO);
        if (isDeviceOwner()) {
            modesToTest.add(ID_TYPE_SERIAL);
            // Get IMEI and MEID of the device.
            TelephonyManager telephonyService =
                    (TelephonyManager) mActivity.getSystemService(Context.TELEPHONY_SERVICE);
            assertWithMessage(""Need to be able to read device identifiers"")
                    .that(telephonyService)
                    .isNotNull();
            imei = telephonyService.getImei(0);
            meid = telephonyService.getMeid(0);
            // If the device has a valid IMEI it must support attestation for it.
            if (imei != null) {
                modesToTest.add(ID_TYPE_IMEI);
            }
            // Same for MEID
            if (meid != null) {
                modesToTest.add(ID_TYPE_MEID);
            }
        }
        int numCombinations = 1 << modesToTest.size();
        for (int i = 1; i < numCombinations; i++) {
            // Set the bits in devIdOpt to be passed into generateKeyPair according to the
            // current modes tested.
            int devIdOpt = 0;
            for (int j = 0; j < modesToTest.size(); j++) {
                if ((i & (1 << j)) != 0) {
                    devIdOpt = devIdOpt | modesToTest.get(j);
                }
            }
            try {
                // Now run the test with all supported key algorithms
                for (SupportedKeyAlgorithm supportedKey: SUPPORTED_KEY_ALGORITHMS) {
                    Certificate attestation = generateKeyAndCheckAttestation(
                            supportedKey.keyAlgorithm, supportedKey.signatureAlgorithm,
                            supportedKey.signaturePaddingSchemes, useStrongBox, devIdOpt);
                    // generateKeyAndCheckAttestation should return null if device ID attestation
                    // is not supported. Simply continue to test the next combination.
                    if (attestation == null && !isDeviceIdAttestationSupported()) {
                        continue;
                    }
                    assertWithMessage(
                            String.format(
                                    ""Attestation should be valid for key %s with attestation modes %s"",
                                    supportedKey.keyAlgorithm, devIdOpt))
                            .that(attestation)
                            .isNotNull();
                    // Set the expected values for serial, IMEI and MEID depending on whether
                    // attestation for them was requested.
                    String expectedSerial = null;
                    if ((devIdOpt & ID_TYPE_SERIAL) != 0) {
                        expectedSerial = Build.getSerial();
                    }
                    String expectedImei = null;
                    if ((devIdOpt & ID_TYPE_IMEI) != 0) {
                        expectedImei = imei;
                    }
                    String expectedMeid = null;
                    if ((devIdOpt & ID_TYPE_MEID) != 0) {
                        expectedMeid = meid;
                    }
                    validateDeviceIdAttestationData(attestation, expectedSerial, expectedImei,
                            expectedMeid);
                }
            } catch (UnsupportedOperationException expected) {
                // Make sure the test only fails if the device is not meant to support Device
                // ID attestation.
                assertThat(isDeviceIdAttestationSupported()).isFalse();
            } catch (StrongBoxUnavailableException expected) {
                // This exception must only be thrown if StrongBox attestation was requested.
                assertThat(useStrongBox && !hasStrongBox()).isTrue();
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testRevokeKeyPairFromApp_keyNotUsable"	""	"1: system"	"public void testRevokeKeyPairFromApp_keyNotUsable() throws Exception {
        mDevicePolicyManager.installKeyPair(getWho(), mFakePrivKey, new Certificate[] {mFakeCert},
                TEST_ALIAS, /* requestAccess=*/ true);
        // Key is requested from KeyChain prior to revoking the grant.
        final PrivateKey key = KeyChain.getPrivateKey(mContext, TEST_ALIAS);
        // Ensure the key is usable prior to being revoked.
        signDataWithKey(""SHA256withRSA"", key);
        mDevicePolicyManager.revokeKeyPairFromApp(getWho(), TEST_ALIAS, getWho().getPackageName());

        // Key shouldn't be valid after the grant is revoked.
        assertThrows(InvalidKeyException.class, () -> signDataWithKey(""SHA256withRSA"", key));
    }

    private void assertGranted(String alias, boolean expected)
            throws InterruptedException, KeyChainException {
        boolean granted = (KeyChain.getPrivateKey(mActivity, alias) != null);
        assertWithMessage(""Grant for alias: \"""" + alias + ""\"""").that(granted).isEqualTo(expected);
    }

    private static PrivateKey getPrivateKey(final byte[] key, String type)
            throws NoSuchAlgorithmException, InvalidKeySpecException {
        return KeyFactory.getInstance(type).generatePrivate(
                new PKCS8EncodedKeySpec(key));
    }

    private static Certificate getCertificate(byte[] cert) throws CertificateException {
        return CertificateFactory.getInstance(""X.509"").generateCertificate(
                new ByteArrayInputStream(cert));
    }

    private Collection<Certificate> loadCertificatesFromAsset(String assetName) {
        try {
            final CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
            AssetManager am = mActivity.getAssets();
            InputStream is = am.open(assetName);
            return (Collection<Certificate>) certFactory.generateCertificates(is);
        } catch (IOException | CertificateException e) {
            e.printStackTrace();
        }
        return null;
    }

    private PrivateKey loadPrivateKeyFromAsset(String assetName) {
        try {
            AssetManager am = mActivity.getAssets();
            InputStream is = am.open(assetName);
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            int length;
            byte[] buffer = new byte[4096];
            while ((length = is.read(buffer, 0, buffer.length)) != -1) {
              output.write(buffer, 0, length);
            }
            return getPrivateKey(output.toByteArray(), ""RSA"");
        } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
        return null;
    }

    private class KeyChainAliasFuture implements KeyChainAliasCallback {
        private final CountDownLatch mLatch = new CountDownLatch(1);
        private String mChosenAlias = null;

        @Override
        public void alias(final String chosenAlias) {
            mChosenAlias = chosenAlias;
            mLatch.countDown();
        }

        public KeyChainAliasFuture(String alias)
                throws UnsupportedEncodingException {
            /* Pass the alias as a GET to an imaginary server instead of explicitly asking for it,
             * to make sure the DPC actually has to do some work to grant the cert.
             */
            final Uri uri =
                    Uri.parse(""https://example.org/?alias="" + URLEncoder.encode(alias, ""UTF-8""));
            KeyChain.choosePrivateKeyAlias(mActivity, this,
                    null /* keyTypes */, null /* issuers */, uri, null /* alias */);
        }

        public String get() throws InterruptedException {
            assertWithMessage(""Chooser timeout"")
                    .that(mLatch.await(KEYCHAIN_TIMEOUT_MINS, TimeUnit.MINUTES))
                    .isTrue();
            return mChosenAlias;
        }
    }

    private ComponentName getWho() {
        return ADMIN_RECEIVER_COMPONENT;
    }

    boolean hasStrongBox() {
        return mActivity.getPackageManager()
            .hasSystemFeature(PackageManager.FEATURE_STRONGBOX_KEYSTORE);
    }

    boolean isUniqueDeviceAttestationSupported() {
        return mDevicePolicyManager.isUniqueDeviceAttestationSupported();
    }

    private boolean isAttestationSupported() {
        return Build.VERSION.DEVICE_INITIAL_SDK_INT >= Build.VERSION_CODES.O;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanInstallCertChain"	""	"1: user"	"public void testCanInstallCertChain() throws Exception {
        // Use assets/generate-client-cert-chain.sh to regenerate the client cert chain.
        final PrivateKey privKey = loadPrivateKeyFromAsset(""user-cert-chain.key"");
        final Certificate[] certChain = loadCertificateChain(""user-cert-chain.crt"")
                .toArray(new Certificate[0]);
        final String alias = ""com.android.test.clientkeychain"";

        // Install keypairs.
        assertThat(mDevicePolicyManager.installKeyPair(getWho(), privKey, certChain, alias, true))
                .isTrue();
        try {
            // Verify only the requested key was actually granted.
            assertGranted(alias, true);

            // Verify the granted key is actually obtainable in PrivateKey form.
            assertThat(KeyChain.getPrivateKey(mActivity, alias).getAlgorithm()).isEqualTo(""RSA"");

            // Verify the certificate chain is correct
            assertThat(KeyChain.getCertificateChain(mActivity, alias)).isEqualTo(certChain);
        } finally {
            // Delete both keypairs.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
        // Verify they're actually gone.
        assertGranted(alias, false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testNotUserSelectableAliasCanBeChosenViaPolicy"	""	"1: user"	"public void testNotUserSelectableAliasCanBeChosenViaPolicy() throws Exception {
        final String alias = ""com.android.test.not-selectable-key-1"";

        // Install keypair.
        assertThat(
                mDevicePolicyManager.installKeyPair(
                        getWho(), mFakePrivKey, new Certificate[] {mFakeCert}, alias, 0))
                .isTrue();
        try {
            // Request and retrieve using the alias.
            assertGranted(alias, false);
            assertThat(new KeyChainAliasFuture(alias).get()).isEqualTo(alias);
            assertGranted(alias, true);
        } finally {
            // Delete regardless of whether the test succeeded.
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
    }

    byte[] signDataWithKey(String algoIdentifier, PrivateKey privateKey) throws Exception {
        byte[] data = new String(""hello"").getBytes();
        Signature sign = Signature.getInstance(algoIdentifier);
        sign.initSign(privateKey);
        sign.update(data);
        return sign.sign();
    }

    void verifySignature(String algoIdentifier, PublicKey publicKey, byte[] signature)
            throws Exception {
        byte[] data = new String(""hello"").getBytes();
        Signature verify = Signature.getInstance(algoIdentifier);
        verify.initVerify(publicKey);
        verify.update(data);
        assertThat(verify.verify(signature)).isTrue();
    }

    void verifySignatureOverData(String algoIdentifier, KeyPair keyPair) throws Exception {
        verifySignature(algoIdentifier, keyPair.getPublic(),
                signDataWithKey(algoIdentifier, keyPair.getPrivate()));
    }

    private KeyGenParameterSpec buildRsaKeySpec(String alias, boolean useStrongBox) {
        return new KeyGenParameterSpec.Builder(
                alias,
                KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
            .setKeySize(2048)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PSS,
                    KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)
            .setIsStrongBoxBacked(useStrongBox)
            .build();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"testCanSetKeyPairCertChain"	""	"1: user"	"public void testCanSetKeyPairCertChain() throws Exception {
        final String alias = ""com.android.test.set-ec-2"";
        try {
            KeyGenParameterSpec spec = new KeyGenParameterSpec.Builder(
                    alias,
                    KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                    .setDigests(KeyProperties.DIGEST_SHA256)
                    .build();

            AttestedKeyPair generated =
                    mDevicePolicyManager.generateKeyPair(getWho(), ""EC"", spec, 0);
            assertThat(generated).isNotNull();
            List<Certificate> chain = loadCertificateChain(""user-cert-chain.crt"");
            mDevicePolicyManager.setKeyPairCertificate(getWho(), alias, chain, true);
            // Make sure that the alias can now be obtained.
            assertThat(new KeyChainAliasFuture(alias).get()).isEqualTo(alias);
            // And can be retrieved from KeyChain
            X509Certificate[] fetchedCerts = KeyChain.getCertificateChain(mActivity, alias);
            assertThat(fetchedCerts.length).isEqualTo(chain.size());
            for (int i = 0; i < chain.size(); i++) {
                assertThat(fetchedCerts[i].getEncoded()).isEqualTo(chain.get(i).getEncoded());
            }
        } finally {
            assertThat(mDevicePolicyManager.removeKeyPair(getWho(), alias)).isTrue();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.KeyManagementTest"	"finish"	""	"1: apps"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner;

import static android.app.admin.DevicePolicyManager.ID_TYPE_BASE_INFO;
import static android.app.admin.DevicePolicyManager.ID_TYPE_IMEI;
import static android.app.admin.DevicePolicyManager.ID_TYPE_INDIVIDUAL_ATTESTATION;
import static android.app.admin.DevicePolicyManager.ID_TYPE_MEID;
import static android.app.admin.DevicePolicyManager.ID_TYPE_SERIAL;
import static android.keystore.cts.CertificateUtils.createCertificate;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.testng.Assert.assertThrows;

import static java.util.Collections.singleton;

import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.keystore.cts.Attestation;
import android.keystore.cts.AuthorizationList;
import android.net.Uri;
import android.os.Build;
import android.os.Process;
import android.security.AttestedKeyPair;
import android.security.KeyChain;
import android.security.KeyChainAliasCallback;
import android.security.KeyChainException;
import android.security.keystore.KeyGenParameterSpec;
import android.security.keystore.KeyProperties;
import android.security.keystore.StrongBoxUnavailableException;
import android.support.test.uiautomator.UiDevice;
import android.telephony.TelephonyManager;

import com.android.compatibility.common.util.FakeKeys.FAKE_RSA_1;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.CertificateParsingException;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import javax.security.auth.x500.X500Principal;

public class KeyManagementTest extends BaseDeviceAdminTest {
    private static final long KEYCHAIN_TIMEOUT_MINS = 6;

    private static final String TEST_ALIAS = ""KeyManagementTest-keypair"";
    private static final String NON_EXISTENT_ALIAS = ""KeyManagementTest-nonexistent"";

    private static final String SHARED_UID_APP1_PKG = ""com.android.cts.testapps.shareduidapp1"";
    private static final String SHARED_UID_APP2_PKG = ""com.android.cts.testapps.shareduidapp2"";

    private PrivateKey mFakePrivKey;
    private Certificate mFakeCert;

    private static class SupportedKeyAlgorithm {
        public final String keyAlgorithm;
        public final String signatureAlgorithm;
        public final String[] signaturePaddingSchemes;

        public SupportedKeyAlgorithm(
                String keyAlgorithm, String signatureAlgorithm,
                String[] signaturePaddingSchemes) {
            this.keyAlgorithm = keyAlgorithm;
            this.signatureAlgorithm = signatureAlgorithm;
            this.signaturePaddingSchemes = signaturePaddingSchemes;
        }
    }

    private final SupportedKeyAlgorithm[] SUPPORTED_KEY_ALGORITHMS = new SupportedKeyAlgorithm[] {
        new SupportedKeyAlgorithm(KeyProperties.KEY_ALGORITHM_RSA, ""SHA256withRSA"",
                new String[] {KeyProperties.SIGNATURE_PADDING_RSA_PSS,
                    KeyProperties.SIGNATURE_PADDING_RSA_PKCS1}),
        new SupportedKeyAlgorithm(KeyProperties.KEY_ALGORITHM_EC, ""SHA256withECDSA"", null)
    };

    private KeyManagementActivity mActivity;

    @Override
    public void setUp() throws Exception {
        super.setUp();

        mFakePrivKey = getPrivateKey(FAKE_RSA_1.privateKey, ""RSA"");
        mFakeCert = getCertificate(FAKE_RSA_1.caCertificate);

        final UiDevice device = UiDevice.getInstance(getInstrumentation());
        mActivity = launchActivity(getInstrumentation().getTargetContext().getPackageName(),
                KeyManagementActivity.class, null);
        device.waitForIdle();
    }

    @Override
    public void tearDown() throws Exception {
        mActivity.finish();
        mDevicePolicyManager.removeKeyPair(getWho(), TEST_ALIAS);
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/KeyManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"dropShellPermissionIdentity"	""	"3: system user camera"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static com.android.cts.deviceandprofileowner.BaseDeviceAdminTest.ADMIN_RECEIVER_COMPONENT;

import static com.google.common.truth.Truth.assertThat;

import android.app.UiAutomation;
import android.app.admin.DevicePolicyManager;
import android.content.ContentResolver;
import android.content.Context;
import android.hardware.camera2.CameraManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.Settings;
import android.test.InstrumentationTestCase;
import android.util.Log;

import com.android.cts.devicepolicy.CameraUtils;

import com.google.common.collect.ImmutableSet;

import java.util.Set;
import java.util.concurrent.TimeUnit;

public class UserRestrictionsParentTest extends InstrumentationTestCase {

    private static final String TAG = ""UserRestrictionsParentTest"";

    protected Context mContext;
    private ContentResolver mContentResolver;
    private UiAutomation mUiAutomation;
    private DevicePolicyManager mDevicePolicyManager;
    private UserManager mUserManager;

    private CameraManager mCameraManager;

    private HandlerThread mBackgroundThread;
    private static final long GET_UIAUTOMATION_TIMEOUT_NS = TimeUnit.SECONDS.toNanos(60);

    /**
     * A {@link Handler} for running tasks in the background.
     */
    private Handler mBackgroundHandler;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mContext = getInstrumentation().getContext();
        mContentResolver = mContext.getContentResolver();
        mUiAutomation = getUiAutomation();

        mDevicePolicyManager = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        assertNotNull(mDevicePolicyManager);

        mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
        assertNotNull(mCameraManager);

        mUserManager = mContext.getSystemService(UserManager.class);
        assertNotNull(mUserManager);

        startBackgroundThread();
    }

    @Override
    protected void tearDown() throws Exception {
        mUiAutomation.dropShellPermissionIdentity();
        stopBackgroundThread();
        super.tearDown();
    }

    private UiAutomation getUiAutomation() throws InterruptedException {
        final long deadline = System.nanoTime() + GET_UIAUTOMATION_TIMEOUT_NS;
        while (System.nanoTime() < deadline) {
            UiAutomation ui = getInstrumentation().getUiAutomation();
            if (ui != null) {
                 return ui;
            }
            Thread.sleep(1000);
        }
        throw new AssertionError(""Failed to get UiAutomation"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testUserRestrictionDisallowConfigDateTimeIsNotPersisted"	""	"2: system user"	"public void testUserRestrictionDisallowConfigDateTimeIsNotPersisted() throws Exception {
        final long deadline = System.nanoTime() + TimeUnit.SECONDS.toNanos(30);
        while (System.nanoTime() <= deadline) {
            if (!mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_DATE_TIME)) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""The restriction didn't go away."");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testPerProfileUserRestriction_onParent"	""	"2: system user"	"public void testPerProfileUserRestriction_onParent() throws Settings.SettingNotFoundException {
        mUiAutomation.adoptShellPermissionIdentity(
                ""android.permission.INTERACT_ACROSS_USERS_FULL"",
                ""android.permission.CREATE_USERS"");

        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        int locationMode = Settings.Secure.getIntForUser(mContentResolver,
                Settings.Secure.LOCATION_MODE, UserHandle.USER_SYSTEM);

        for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS) {
            try {
                boolean hasRestrictionOnManagedProfile = mUserManager.hasUserRestriction(
                        restriction);

                parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
                // Assert user restriction on personal profile has been added
                assertThat(hasUserRestriction(restriction)).isTrue();
                // Assert user restriction on managed profile has not changed
                assertThat(mUserManager.hasUserRestriction(restriction)).isEqualTo(
                        hasRestrictionOnManagedProfile);
            } finally {
                parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction);
                assertThat(hasUserRestriction(restriction)).isFalse();
            }
        }

        // Restore the location mode setting after adding and removing the
        // DISALLOW_SHARE_LOCATION user restriction. This is because, modifying this user
        // restriction causes the location mode setting to be turned off.
        Settings.Secure.putIntForUser(mContentResolver, Settings.Secure.LOCATION_MODE, locationMode,
                UserHandle.USER_SYSTEM);
    }

    private static final Set<String> PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS =
            ImmutableSet.of(
                    UserManager.DISALLOW_CONFIG_PRIVATE_DNS,
                    UserManager.DISALLOW_CONFIG_DATE_TIME,
                    UserManager.DISALLOW_AIRPLANE_MODE
            );"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionDisallowConfigDateTime_onParent"	""	"1: user"	"public void testAddUserRestrictionDisallowConfigDateTime_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CONFIG_DATE_TIME);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testHasUserRestrictionDisallowConfigDateTime"	""	"1: user"	"public void testHasUserRestrictionDisallowConfigDateTime() {
        assertThat(mUserManager.
                hasUserRestriction(UserManager.DISALLOW_CONFIG_DATE_TIME)).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionDisallowAddUser_onParent"	""	"1: user"	"public void testAddUserRestrictionDisallowAddUser_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADD_USER);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testHasUserRestrictionDisallowAddUser"	""	"1: user"	"public void testHasUserRestrictionDisallowAddUser() {
        assertThat(hasUserRestriction(UserManager.DISALLOW_ADD_USER)).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testClearUserRestrictionDisallowAddUser"	""	"1: user"	"public void testClearUserRestrictionDisallowAddUser() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);

        parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_ADD_USER);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testAddUserRestrictionCameraDisabled_onParent"	""	"2: user camera"	"public void testAddUserRestrictionCameraDisabled_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, true);
        boolean actualDisabled =
                parentDevicePolicyManager.getCameraDisabled(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualDisabled).isTrue();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testRemoveUserRestrictionCameraEnabled_onParent"	""	"2: user camera"	"public void testRemoveUserRestrictionCameraEnabled_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        parentDevicePolicyManager.setCameraDisabled(ADMIN_RECEIVER_COMPONENT, false);
        boolean actualDisabled =
                parentDevicePolicyManager.getCameraDisabled(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualDisabled).isFalse();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testCanOpenCamera"	""	"2: user camera"	"public void testCanOpenCamera() throws Exception {
        checkCanOpenCamera(true);
    }

    private void checkCanOpenCamera(boolean canOpen) throws Exception {
        // If the device does not support a camera it will return an empty camera ID list.
        if (mCameraManager.getCameraIdList() == null
                || mCameraManager.getCameraIdList().length == 0) {
            return;
        }
        int retries = 10;
        boolean successToOpen = !canOpen;
        while (successToOpen != canOpen && retries > 0) {
            retries--;
            Thread.sleep(500);
            successToOpen = CameraUtils.blockUntilOpenCamera(mCameraManager, mBackgroundHandler);
        }
        assertEquals(String.format(""Timed out waiting the value to change to %b (actual=%b)"",
                canOpen, successToOpen), canOpen, successToOpen);
    }

    private static final Set<String> PROFILE_OWNER_ORGANIZATION_OWNED_LOCAL_RESTRICTIONS =
            ImmutableSet.of(
                    UserManager.DISALLOW_BLUETOOTH,
                    UserManager.DISALLOW_BLUETOOTH_SHARING,
                    UserManager.DISALLOW_CONFIG_BLUETOOTH,
                    UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
                    UserManager.DISALLOW_CONFIG_LOCATION,
                    UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
                    UserManager.DISALLOW_CONFIG_TETHERING,
                    UserManager.DISALLOW_CONFIG_WIFI,
                    UserManager.DISALLOW_CONTENT_CAPTURE,
                    UserManager.DISALLOW_CONTENT_SUGGESTIONS,
                    UserManager.DISALLOW_DATA_ROAMING,
                    UserManager.DISALLOW_SAFE_BOOT,
                    UserManager.DISALLOW_SHARE_LOCATION,
                    UserManager.DISALLOW_SMS,
                    UserManager.DISALLOW_USB_FILE_TRANSFER,
                    UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
                    UserManager.DISALLOW_OUTGOING_CALLS,
                    UserManager.DISALLOW_UNMUTE_MICROPHONE
                    // This restriction disables ADB, so is not used in test.
                    // UserManager.DISALLOW_DEBUGGING_FEATURES
            );"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testPerDeviceUserRestriction_onParent"	""	"2: user camera"	"public void testPerDeviceUserRestriction_onParent() {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        assertNotNull(parentDevicePolicyManager);

        for (String restriction : PROFILE_OWNER_ORGANIZATION_OWNED_GLOBAL_RESTRICTIONS) {
            try {
                parentDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
                // Assert user restriction on personal profile has been added
                assertThat(hasUserRestriction(restriction)).isTrue();
                // Assert user restriction on managed profile has been added
                assertThat(mUserManager.hasUserRestriction(restriction)).isTrue();
            } finally {
                parentDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        restriction);
                assertThat(hasUserRestriction(restriction)).isFalse();
                assertThat(mUserManager.hasUserRestriction(restriction)).isFalse();
            }
        }
    }

    private boolean hasUserRestriction(String key) {
        DevicePolicyManager parentDevicePolicyManager =
                mDevicePolicyManager.getParentProfileInstance(ADMIN_RECEIVER_COMPONENT);
        Bundle userRestrictions =
                parentDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT);
        return userRestrictions.getBoolean(key);
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread(""CameraBackground"");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            Log.e(TAG, ""Interrupted exception thrown while stopping background thread."");
        }
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.UserRestrictionsParentTest"	"testCannotOpenCamera"	""	"1: camera"	"public void testCannotOpenCamera() throws Exception {
        checkCanOpenCamera(false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testNoPersistentPreferredActivityYieldsResolverActivity"	""	"1: system"	"public void testNoPersistentPreferredActivityYieldsResolverActivity() {
        sendExampleIntent();
        SystemClock.sleep(5000);

        // Default behavior: intent results in resolver activity, since there are two potential
        // receivers. No intent is received.
        synchronized(this) {
            assertFalse(mReceivedConfirmationFrom1);
            assertFalse(mReceivedConfirmationFrom2);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testAddPersistentPreferredActivityYieldsReceptionAtTarget"	""	"1: system"	"public void testAddPersistentPreferredActivityYieldsReceptionAtTarget() {
        addPersistentPreferredActivity();
        sendExampleIntent();
        SystemClock.sleep(5000);

        // Persistent preferred activity present: intent should be received by activity 2.
        synchronized(this) {
            assertFalse(mReceivedConfirmationFrom1);
            assertTrue(mReceivedConfirmationFrom2);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.PersistentIntentResolvingTest"	"testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity"	""	"1: system"	"public void testAddAndClearPersistentPreferredActivitiesYieldsResolverActivity() {
        addPersistentPreferredActivity();
        mDevicePolicyManager.clearPackagePersistentPreferredActivities(ADMIN_RECEIVER_COMPONENT,
                PACKAGE_NAME);

        sendExampleIntent();
        SystemClock.sleep(5000);

        // Default behavior: intent results in resolver activity, since there are two potential
        // receivers. No intent is received.
        synchronized(this) {
            assertFalse(mReceivedConfirmationFrom1);
            assertFalse(mReceivedConfirmationFrom2);
        }
    }

    public class ConfirmReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals(ExampleIntentReceivingActivity1.CONFIRM_ACTION)) {
                synchronized (PersistentIntentResolvingTest.this) {
                    mReceivedConfirmationFrom1 = true;
                }
            } else if (intent.getAction().equals(ExampleIntentReceivingActivity2
                            .CONFIRM_ACTION)) {
                synchronized (PersistentIntentResolvingTest.this) {
                    mReceivedConfirmationFrom2 = true;
                }
            }
        }
    }

    private void sendExampleIntent() {
        Intent exampleIntent = new Intent(EXAMPLE_ACTION);
        exampleIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(exampleIntent);
    }

    private void addPersistentPreferredActivity() {
        IntentFilter filter = new IntentFilter();
        filter.addAction(EXAMPLE_ACTION);
        filter.addCategory(Intent.CATEGORY_DEFAULT);
        ComponentName targetComponent = new ComponentName(PACKAGE_NAME,
                ExampleIntentReceivingActivity2.class.getName());
        mDevicePolicyManager.addPersistentPreferredActivity(ADMIN_RECEIVER_COMPONENT, filter,
                targetComponent);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PersistentIntentResolvingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"isFullVolumeDevice"	""	"2: system user"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.provider.Settings;
import android.os.SystemClock;
import android.os.UserManager;
import android.util.Log;

import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.regex.Pattern;

public class AudioRestrictionTest extends BaseDeviceAdminTest {
    private static final String TAG = AudioRestrictionTest.class.getSimpleName();
    private AudioManager mAudioManager;
    private PackageManager mPackageManager;
    private boolean mUseFixedVolume;
    private boolean mUseFullVolume;
    private final Callable<Boolean> mCheckIfMasterVolumeMuted = new Callable<Boolean>() {
        @Override
        public Boolean call() throws Exception {
            return mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);
        }
    };

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        mPackageManager = mContext.getPackageManager();
        mUseFixedVolume = mContext.getResources().getBoolean(
                Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android""));
        mUseFullVolume = isFullVolumeDevice();
    }

    // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowAdjustVolume_muted"	""	"2: system user"	"public void testDisallowAdjustVolume_muted() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)) {
            return;
        }

        // If we check that some value did not change, we must wait until the action is applied.
        // Method waitUntil() may check old value before changes took place.
        final int WAIT_TIME_MS = 1000;
        final boolean initVolumeMuted =
                mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT);
        try {
            // Unmute volume, if necessary.
            if (initVolumeMuted) {
                mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, false);
                waitUntil(false, mCheckIfMasterVolumeMuted);
            }

            // DISALLOW_ADJUST_VOLUME must mute volume.
            mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(true, mCheckIfMasterVolumeMuted);

            // Unmute should not have effect because the restriction does not allow this.
            mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, false);
            Thread.sleep(WAIT_TIME_MS);
            assertTrue(mDevicePolicyManager.isMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT));
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            mDevicePolicyManager.setMasterVolumeMuted(ADMIN_RECEIVER_COMPONENT, initVolumeMuted);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowAdjustVolume"	""	"2: system user"	"public void testDisallowAdjustVolume() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_AUDIO_OUTPUT)
                || mUseFixedVolume || mUseFullVolume) {
            return;
        }

        Uri uri = Uri.parse(""android.resource://"" + mContext.getPackageName() + ""/"" + R.raw.ringer);
        MediaPlayer mediaPlayer = new MediaPlayer();
        mediaPlayer.setDataSource(mContext, uri);
        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
        mediaPlayer.prepare();
        mediaPlayer.setLooping(true);
        mediaPlayer.start();

        try {
            // Set volume of music to be 1.
            mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, /* flag= */ 0);

            // Disallow adjusting volume.
            mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(true, mCheckIfMasterVolumeMuted);

            // Verify that volume can't be changed.
            mAudioManager.adjustVolume(AudioManager.ADJUST_RAISE, /* flag= */ 0);
            assertEquals(1, mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC));

            // Allowing adjusting volume.
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(false, mCheckIfMasterVolumeMuted);

            // Verify the volume can be changed now.
            mAudioManager.adjustVolume(AudioManager.ADJUST_RAISE,  /* flag= */ 0);
            waitUntil(2, new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    return mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
                }
            });
        } finally {
            // Clear the restriction.
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    UserManager.DISALLOW_ADJUST_VOLUME);
            waitUntil(false, mCheckIfMasterVolumeMuted);
        }

        mediaPlayer.stop();
        mediaPlayer.release();
        mediaPlayer = null;
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.AudioRestrictionTest"	"testDisallowUnmuteMicrophone"	""	"2: system user"	"public void testDisallowUnmuteMicrophone() throws Exception {
        if (!mPackageManager.hasSystemFeature(PackageManager.FEATURE_MICROPHONE)) {
            return;
        }

        try {
            mAudioManager.setMicrophoneMute(false);
            if (mAudioManager.isMicrophoneMute()) {
                Log.w(TAG, ""Mic seems muted by hardware! Please unmute and rerrun the test."");
                return;
            }

            // Disallow the microphone to be unmuted.
            mDevicePolicyManager.addUserRestriction(
                    ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_UNMUTE_MICROPHONE);
            waitUntil(true, new Callable<Boolean>() {
                @Override
                public Boolean call() throws Exception {
                    return mAudioManager.isMicrophoneMute();
                }
            });
            // Verify that we can't unmute the microphone.
            mAudioManager.setMicrophoneMute(false);
            assertTrue(mAudioManager.isMicrophoneMute());
        } finally {
            // Clear the restriction
            mDevicePolicyManager.clearUserRestriction(
                    ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_UNMUTE_MICROPHONE);
            waitUntil(false, new Callable<Boolean>() {
                @Override
                public Boolean call() throws Exception {
                    return mAudioManager.isMicrophoneMute();
                }
            });
        }
    }

    private <T> void waitUntil(T expected, Callable<T> c) throws Exception {
        final long start = SystemClock.elapsedRealtime();
        final int TIMEOUT_MS = 5 * 1000;

        T actual;
        while (!Objects.equals(expected, actual = c.call())) {
            if ((SystemClock.elapsedRealtime() - start) >= TIMEOUT_MS) {
                fail(String.format(""Timed out waiting the value to change to %s (actual=%s)"",
                        expected, actual));
            }
            Thread.sleep(200);
        }
    }

    private boolean isFullVolumeDevice() {
        String commandOutput = runShellCommand(""dumpsys audio"");

        for (String line : commandOutput.split(""\\r?\\n"")) {
            if (Pattern.matches(""\\s*mHdmiCecSink=true"", line)
                    || (Pattern.matches(""\\s*mHdmiPlayBackClient="", line)
                    && !Pattern.matches(""=null$"", line))) {
                return true;
            }
        }
        return false;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.SuspendPackageTest"	"testSuspendNotSuspendablePackages"	""	"1: apps"	"public void testSuspendNotSuspendablePackages() throws Exception {
        String launcherPackage = getDefaultLauncher(getInstrumentation());
        String dpcPackage = ADMIN_RECEIVER_COMPONENT.getPackageName();
        String[] notHandledPackages = setSuspendedPackages(/* suspend= */ true,
                launcherPackage, dpcPackage);
        // no package should be handled.
        assertWithMessage(""not handled packages"").that(notHandledPackages).asList()
                .containsExactly(launcherPackage, dpcPackage);

        Set<String> exemptApps = mDevicePolicyManager.getPolicyExemptApps();
        if (exemptApps.isEmpty()) {
            Log.v(TAG, ""testSuspendNotSuspendablePackages(): no exempt apps"");
            return;
        }

        Log.v(TAG, ""testSuspendNotSuspendablePackages(): testing exempt apps: "" + exemptApps);
        notHandledPackages = setSuspendedPackages(/* suspend= */ true, exemptApps);
        assertWithMessage(""exempt apps not suspended"").that(notHandledPackages).asList()
            .containsExactlyElementsIn(exemptApps);
    }

    private String[] setSuspendedPackages(boolean suspend, Collection<String> pkgs) {
        String[] pkgsArray = new String[pkgs.size()];
        pkgs.toArray(pkgsArray);
        return setSuspendedPackages(suspend, pkgsArray);
    }

    private String[] setSuspendedPackages(boolean suspend, String... pkgs) {
        Log.d(TAG, ""Calling setPackagesSuspended("" + suspend + "", "" + Arrays.toString(pkgs));
        String[] notHandled =
                mDevicePolicyManager.setPackagesSuspended(ADMIN_RECEIVER_COMPONENT, pkgs, suspend);
        Log.d(TAG, ""Returning "" + Arrays.toString(notHandled));
        return notHandled;
    }

    private void assertPackageSuspended(String pkg) throws Exception {
        assertPackageSuspension(pkg, /* expected= */ true);
    }

    private void assertPackageNotSuspended(String pkg) throws Exception {
        assertPackageSuspension(pkg, /* expected= */ false);
    }

    private void assertPackageSuspension(String pkg, boolean expected) throws Exception {
        boolean actual =
                mDevicePolicyManager.isPackageSuspended(ADMIN_RECEIVER_COMPONENT, pkg);
        Log.d(TAG, ""isPackageSuspended("" + pkg + ""): "" + actual);
        assertWithMessage(""package %s suspension"", pkg).that(actual).isEqualTo(expected);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SuspendPackageTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest"	"disableService"	""	"1: user"	"public void test/*
 *
 */

package com.android.cts.deviceandprofileowner;

import static android.os.UserManager.DISALLOW_CONTENT_SUGGESTIONS;

import static com.android.cts.deviceandprofileowner.ContentSuggestionsActivity.CONTENT_SUGGESTIONS_ACTIVITY_NAME;
import static com.android.cts.deviceandprofileowner.ContentSuggestionsActivity.CONTENT_SUGGESTIONS_PACKAGE_NAME;

import android.content.Intent;

public class ContentSuggestionsRestrictionsTest extends BaseDeviceAdminTest {

    private static final int MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET= 12000;

    private static final int SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS = 100;

    private static final String SERVICE_NAME =
            ""com.android.cts.devicepolicy.contentsuggestions/.SimpleContentSuggestionsService"";

    int mUserId;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mUserId = getInstrumentation().getContext().getUserId();
    }

    @Override
    protected void tearDown() throws Exception {
        try {
            disableService();
        } finally {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                    DISALLOW_CONTENT_SUGGESTIONS);
        }
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.ContentSuggestionsRestrictionsTest"	"testDisallowContentSuggestions_allowed"	""	"1: user"	"public void testDisallowContentSuggestions_allowed() throws Exception {
        enableService();

        final boolean enabledBefore = launchActivityAndGetEnabled();
        assertTrue(enabledBefore);

        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, DISALLOW_CONTENT_SUGGESTIONS);

        // Must try a couple times because it will be disabled asynchronously.
        for (int i = 1; i <= 5; i++) {
            final boolean disabledAfter = !launchActivityAndGetEnabled();
            if (disabledAfter) {
                return;
            }
            Thread.sleep(100);
        }
        fail(""Not disabled after 2.5s"");
    }

    private boolean launchActivityAndGetEnabled() throws Exception {
        final Intent launchIntent = new Intent();
        launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        launchIntent.setClassName(
                CONTENT_SUGGESTIONS_PACKAGE_NAME, CONTENT_SUGGESTIONS_ACTIVITY_NAME);
        final ContentSuggestionsActivity activity = launchActivity(
                ""com.android.cts.deviceandprofileowner"", ContentSuggestionsActivity.class, null);
        return activity.isContentSuggestionsEnabled();
    }

    private void enableService() throws Exception {
        runShellCommand(""cmd content_suggestions set temporary-service %d %s %d"", mUserId,
                SERVICE_NAME, MAX_TIME_TEMPORARY_SERVICE_CAN_BE_SET);
        // TODO: ideally it should wait until the service's onConnected() is called, but that
        // would be too complicated
        Thread.sleep(SLEEP_TIME_WAITING_FOR_SERVICE_CONNECTION_MS);
    }

    private void disableService() {
        runShellCommand(""cmd content_suggestions set temporary-service %d"", mUserId);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentSuggestionsRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"emptyList"	""	"2: system user"	"public void test/*
 *.
 */

package com.android.cts.deviceandprofileowner;

import static android.app.admin.DevicePolicyManager.DELEGATION_APP_RESTRICTIONS;
import static android.app.admin.DevicePolicyManager.DELEGATION_BLOCK_UNINSTALL;
import static android.app.admin.DevicePolicyManager.DELEGATION_CERT_INSTALL;
import static android.app.admin.DevicePolicyManager.DELEGATION_CERT_SELECTION;
import static android.app.admin.DevicePolicyManager.DELEGATION_ENABLE_SYSTEM_APP;
import static android.app.admin.DevicePolicyManager.DELEGATION_NETWORK_LOGGING;
import static android.app.admin.DevicePolicyManager.DELEGATION_SECURITY_LOGGING;
import static android.app.admin.DevicePolicyManager.EXTRA_DELEGATION_SCOPES;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertThrows;

import android.app.admin.DevicePolicyManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Process;
import android.os.UserManager;
import android.test.MoreAsserts;
import android.util.Log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;


/**
 * Test that an app granted delegation scopes via {@link DevicePolicyManager#setDelegatedScopes} is
 * notified of its new scopes by a broadcast.
 */
public class DelegationTest extends BaseDeviceAdminTest {
    private static final String TAG = ""DelegationTest"";

    private static final String DELEGATE_PKG = ""com.android.cts.delegate"";
    private static final String DELEGATE_ACTIVITY_NAME =
            DELEGATE_PKG + "".DelegatedScopesReceiverActivity"";
    private static final String DELEGATE_SERVICE_NAME =
            DELEGATE_PKG + "".DelegatedScopesReceiverService"";
    private static final String TEST_PKG = ""com.android.cts.apprestrictions.targetapp"";

    // Broadcasts received from the delegate app.
    private static final String ACTION_REPORT_SCOPES = ""com.android.cts.delegate.report_scopes"";
    private static final String ACTION_RUNNING = ""com.android.cts.delegate.running"";

    // Semaphores to synchronize communication with delegate app.
    private volatile String[] mReceivedScopes;
    private Semaphore mReceivedScopeReportSemaphore;
    private Semaphore mReceivedRunningSemaphore;

    // Receiver for incoming broadcasts from the delegate app.
    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Log.v(TAG, ""onReceive(): "" + intent.getAction() + "" on user "" + Process.myUserHandle());
            if (ACTION_REPORT_SCOPES.equals(intent.getAction())) {
                synchronized (DelegationTest.this) {
                    mReceivedScopes = intent.getStringArrayExtra(EXTRA_DELEGATION_SCOPES);
                    mReceivedScopeReportSemaphore.release();
                }
            } else if (ACTION_RUNNING.equals(intent.getAction())) {
                synchronized (DelegationTest.this) {
                    mReceivedRunningSemaphore.release();
                }
            }
        }
    };

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mReceivedScopeReportSemaphore = new Semaphore(0);
        mReceivedRunningSemaphore = new Semaphore(0);
        mReceivedScopes = null;
        IntentFilter filter = new IntentFilter();
        filter.addAction(ACTION_REPORT_SCOPES);
        filter.addAction(ACTION_RUNNING);
        mContext.registerReceiver(mReceiver, filter);
    }

    @Override
    public void tearDown() throws Exception {
        mContext.unregisterReceiver(mReceiver);
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                TEST_PKG, Collections.emptyList());
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                DELEGATE_PKG, Collections.emptyList());
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testDelegateReceivesScopeChangedBroadcast"	""	"2: system user"	"public void testDelegateReceivesScopeChangedBroadcast() throws InterruptedException {
        if (UserManager.isHeadlessSystemUserMode()) {
            // TODO(b/190627898): this test launched an activity to receive the broadcast from DPM,
            // but headless system user cannot launch activity. To make things worse, the intent
            // is only sent to registered receivers, so we cannot use the existing receivers from
            // DpmWrapper, we would need to start a service on user 0 to receive the broadcast,
            // which would require a lot of changes:
            // - calling APIs / Shell commands to allow an app in the bg to start a service
            // - add a ""launchIntent()"" method on DpmWrapper so the intent is launched by user 0
            //
            // It might not be worth to make these changes, but rather wait for the test refactoring
            Log.i(TAG, ""Skipping testDelegateReceivesScopeChangedBroadcast() on headless system ""
                    + ""user mode"");
            return;
        }

        // Prepare the scopes to be delegated.
        final List<String> scopes = Arrays.asList(
                DELEGATION_CERT_INSTALL,
                DELEGATION_APP_RESTRICTIONS,
                DELEGATION_BLOCK_UNINSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);

        // Start delegate so it can receive the scopes changed broadcast from DevicePolicyManager.
        startAndWaitDelegateActivity();

        // Set the delegated scopes.
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG, scopes);

        // Wait until the delegate reports its new scopes.
        String reportedScopes[] = waitReportedScopes();

        // Check that the reported scopes correspond to scopes we delegated.
        assertNotNull(""Received null scopes from delegate"", reportedScopes);
        MoreAsserts.assertContentsInAnyOrder(""Delegated scopes do not match broadcasted scopes"",
                scopes, reportedScopes);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testCantDelegateToUninstalledPackage"	""	"1: system"	"public void testCantDelegateToUninstalledPackage() {
        // Prepare the package name and scopes to be delegated.
        final String NON_EXISTENT_PKG = ""com.android.nonexistent.delegate"";
        final List<String> scopes = Arrays.asList(
                DELEGATION_CERT_INSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);
        try {
            // Trying to delegate to non existent package should throw.
            mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                    NON_EXISTENT_PKG, scopes);
            fail(""Should throw when delegating to non existent package"");
        } catch(IllegalArgumentException expected) {
        }
        // Assert no scopes were delegated.
        assertTrue(""Delegation scopes granted to non existent package"", mDevicePolicyManager
                .getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, NON_EXISTENT_PKG).isEmpty());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testCanRetrieveDelegates"	""	"1: system"	"public void testCanRetrieveDelegates() {
        final List<String> someScopes = Arrays.asList(
                DELEGATION_APP_RESTRICTIONS,
                DELEGATION_ENABLE_SYSTEM_APP);
        final List<String> otherScopes = Arrays.asList(
                DELEGATION_BLOCK_UNINSTALL,
                DELEGATION_ENABLE_SYSTEM_APP);

        // In the beginning there are no delegates.
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .isEmpty());
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .isEmpty());
        assertTrue(""No delegates should be found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .isEmpty());

        // After delegating scopes to two packages.
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                DELEGATE_PKG, someScopes);
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                TEST_PKG, otherScopes);

        // The expected delegates are returned.
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .contains(DELEGATE_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .contains(TEST_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .contains(DELEGATE_PKG));
        assertTrue(""Expected delegate not found"", getDelegatePackages(DELEGATION_ENABLE_SYSTEM_APP)
                .contains(TEST_PKG));

        // Packages are only returned in their recpective scopes.
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_APP_RESTRICTIONS)
                .contains(TEST_PKG));
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_BLOCK_UNINSTALL)
                .contains(DELEGATE_PKG));
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_CERT_INSTALL)
                .contains(DELEGATE_PKG));
        assertFalse(""Unexpected delegate package"", getDelegatePackages(DELEGATION_CERT_INSTALL)
                .contains(TEST_PKG));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.DelegationTest"	"testExclusiveDelegations"	""	"1: user"	"public void testExclusiveDelegations() throws Exception {
        final List<String> exclusiveDelegations = new ArrayList<>(Arrays.asList(
                DELEGATION_CERT_SELECTION));
        if (mDevicePolicyManager.isDeviceOwnerApp(mContext.getPackageName())) {
            exclusiveDelegations.add(DELEGATION_NETWORK_LOGGING);
            exclusiveDelegations.add(DELEGATION_SECURITY_LOGGING);
        }
        for (String scope : exclusiveDelegations) {
            testExclusiveDelegation(scope);
        }
    }

    private void testExclusiveDelegation(String scope) throws Exception {

        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                DELEGATE_PKG, Collections.singletonList(scope));
        // Set exclusive scope on TEST_PKG should lead to the scope being removed from the
        // previous delegate DELEGATE_PKG
        mDevicePolicyManager.setDelegatedScopes(ADMIN_RECEIVER_COMPONENT,
                TEST_PKG, Collections.singletonList(scope));


        assertThat(mDevicePolicyManager.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, TEST_PKG))
                .containsExactly(scope);
        assertThat(mDevicePolicyManager.getDelegatedScopes(ADMIN_RECEIVER_COMPONENT, DELEGATE_PKG))
                .isEmpty();
    }

    private List<String> getDelegatePackages(String scope) {
        List<String> packages = mDevicePolicyManager.getDelegatePackages(ADMIN_RECEIVER_COMPONENT,
                scope);
        Log.d(TAG, ""getDelegatePackages("" + scope + ""): "" + packages);
        return packages;
    }

    private void startAndWaitDelegateActivity() throws InterruptedException {
        ComponentName componentName = new ComponentName(DELEGATE_PKG, DELEGATE_ACTIVITY_NAME);
        Log.d(TAG, ""Starting "" + componentName + "" on user "" + Process.myUserHandle());
        mContext.startActivity(new Intent()
                .setComponent(componentName)
                .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
        assertTrue(""DelegateApp did not start in time."",
                mReceivedRunningSemaphore.tryAcquire(10, TimeUnit.SECONDS));
    }

    private String[] waitReportedScopes() throws InterruptedException {
        assertTrue(""DelegateApp did not report scope in time."",
                mReceivedScopeReportSemaphore.tryAcquire(10, TimeUnit.SECONDS));
        return mReceivedScopes;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_enabled"	""	"2: system user"	"public void testSetStorageEncryption_enabled() {
        if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {
            return;
        }
        assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, true))
                .isEqualTo(mIsSystemUser ? ENCRYPTION_STATUS_ACTIVE
                        : ENCRYPTION_STATUS_UNSUPPORTED);
        assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(mIsSystemUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.StorageEncryptionTest"	"testSetStorageEncryption_disabled"	""	"2: system user"	"public void testSetStorageEncryption_disabled() {
        if (mDevicePolicyManager.getStorageEncryptionStatus() == ENCRYPTION_STATUS_UNSUPPORTED) {
            return;
        }
        assertThat(mDevicePolicyManager.setStorageEncryption(ADMIN_RECEIVER_COMPONENT, false))
                .isEqualTo(mIsSystemUser ? ENCRYPTION_STATUS_INACTIVE
                        : ENCRYPTION_STATUS_UNSUPPORTED);
        assertThat(mDevicePolicyManager.getStorageEncryption(ADMIN_RECEIVER_COMPONENT)).isFalse();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/StorageEncryptionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testSetAutomaticInstallPolicy"	""	"1: system"	"public void testSetAutomaticInstallPolicy() {
        testPolicy(SystemUpdatePolicy.createAutomaticInstallPolicy());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testSetWindowedInstallPolicy"	""	"1: system"	"public void testSetWindowedInstallPolicy() {
        testPolicy(SystemUpdatePolicy.createWindowedInstallPolicy(0, 720));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testSetPostponeInstallPolicy"	""	"1: system"	"public void testSetPostponeInstallPolicy() {
        testPolicy(SystemUpdatePolicy.createPostponeInstallPolicy());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testShouldFailInvalidWindowPolicy"	""	"1: system"	"public void testShouldFailInvalidWindowPolicy() throws Exception {
        try {
            SystemUpdatePolicy.createWindowedInstallPolicy(24 * 60 + 1, 720);
            fail(""Invalid window start should not be accepted."");
        } catch (IllegalArgumentException expected) { }
        try {
            SystemUpdatePolicy.createWindowedInstallPolicy(-1, 720);
            fail(""Invalid window start should not be accepted."");
        } catch (IllegalArgumentException expected) { }
        try {
            SystemUpdatePolicy.createWindowedInstallPolicy(0, 24 * 60 + 1);
            fail(""Invalid window end should not be accepted."");
        } catch (IllegalArgumentException expected) { }
        try {
            SystemUpdatePolicy.createWindowedInstallPolicy(0, -1);
            fail(""Invalid window end should not be accepted."");
        } catch (IllegalArgumentException expected) { }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testFreezePeriodCannotSetIfTooCloseToPrevious"	""	"1: system"	"public void testFreezePeriodCannotSetIfTooCloseToPrevious() throws Exception {
        setSystemDate(LocalDate.of(2018, 2, 28));
        setPolicyWithFreezePeriod(""01-01"", ""03-01"", ""06-01"", ""06-30"");
        // Clear policy
        mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, null);
        // Set to a conflict period (too close with previous period [2-28, 2-28]) should fail,
        // despite the previous policy was cleared from the system just now.
        try {
            setPolicyWithFreezePeriod(""04-29"", ""04-30"");
            fail(""Did no flag invalid period"");
        } catch (ValidationFailedException e) {
            assertEquals(e.getMessage(),
                    ValidationFailedException.ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE,
                    e.getErrorCode());
        }
        // This should succeed as the new freeze period is exactly 60 days away.
        setPolicyWithFreezePeriod(""04-30"", ""04-30"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testFreezePeriodCannotSetIfTooLongWhenCombinedWithPrevious"	""	"1: system"	"public void testFreezePeriodCannotSetIfTooLongWhenCombinedWithPrevious() throws Exception {
        setSystemDate(LocalDate.of(2012, 4, 1));
        setPolicyWithFreezePeriod(""03-01"", ""05-01"");
        setSystemDate(LocalDate.of(2012, 4, 30));
        // Despite the wait for broadcast in setSystemDate(), TIME_CHANGED broadcast is asynchronous
        // so give DevicePolicyManagerService more time to receive TIME_CHANGED and to update the
        // freeze period record.
        Thread.sleep(5000);
        // Set to a conflict period (too long when combined with previous period [04-01, 04-30])
        // should fail
        try {
            setPolicyWithFreezePeriod(""04-30"", ""06-30"");
            fail(""Did no flag invalid period"");
        } catch (SystemUpdatePolicy.ValidationFailedException e) {
            assertEquals(e.getMessage(),
                    ValidationFailedException.ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG,
                    e.getErrorCode());
        }
        // This should succeed as the combined length (59 days) is just below threshold (90 days).
        setPolicyWithFreezePeriod(""05-01"", ""06-29"");
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testFreezePeriodForOneYear"	""	"1: system"	"public void testFreezePeriodForOneYear() throws Exception {
        // Set a normal period every day for 365 days
        for (int i = 1; i <= 365; i++) {
            // Add two days so the test date range wraps around year-end
            setSystemDate(LocalDate.ofYearDay(2019, i).plusDays(2));
            testFreezePeriodCanBeSetAndChanged();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testWriteSystemUpdatePolicyToParcel"	""	"1: system"	"public void testWriteSystemUpdatePolicyToParcel() {
        final Parcel parcel1 = Parcel.obtain();
        try {
            final SystemUpdatePolicy policy1 = SystemUpdatePolicy.createAutomaticInstallPolicy();
            policy1.writeToParcel(parcel1, 0);
            parcel1.setDataPosition(0);
            final SystemUpdatePolicy copy1 = SystemUpdatePolicy.CREATOR.createFromParcel(parcel1);
            assertThat(copy1).isNotNull();
            assertSystemUpdatePoliciesEqual(policy1, copy1);
        } finally {
            parcel1.recycle();
        }

        final Parcel parcel2 = Parcel.obtain();
        try {
            final SystemUpdatePolicy policy2 = SystemUpdatePolicy
                .createWindowedInstallPolicy(0, 720);
            policy2.writeToParcel(parcel2, 0);
            parcel2.setDataPosition(0);
            final SystemUpdatePolicy copy2 = SystemUpdatePolicy.CREATOR.createFromParcel(parcel2);
            assertThat(copy2).isNotNull();
            assertSystemUpdatePoliciesEqual(policy2, copy2);
        } finally {
            parcel2.recycle();
        }

        final Parcel parcel3 = Parcel.obtain();
        try {
            final SystemUpdatePolicy policy3 = SystemUpdatePolicy.createPostponeInstallPolicy();
            policy3.writeToParcel(parcel3, 0);
            parcel3.setDataPosition(0);
            final SystemUpdatePolicy copy3 = SystemUpdatePolicy.CREATOR.createFromParcel(parcel3);
            assertThat(copy3).isNotNull();
            assertSystemUpdatePoliciesEqual(policy3, copy3);
        } finally {
            parcel3.recycle();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.SystemUpdatePolicyTest"	"testWriteValidationFailedExceptionToParcel"	""	"2: system user"	"public void testWriteValidationFailedExceptionToParcel() {
        final List<FreezePeriod> freezePeriods =
            ImmutableList.of(new FreezePeriod(MonthDay.of(1, 10), MonthDay.of(1, 9)));
        try {
            SystemUpdatePolicy.createAutomaticInstallPolicy().setFreezePeriods(freezePeriods);
            fail(""ValidationFailedException not thrown for invalid freeze period."");
        } catch (ValidationFailedException e) {
            final Parcel parcel = Parcel.obtain();
            e.writeToParcel(parcel, 0);
            parcel.setDataPosition(0);

            final ValidationFailedException copy =
                ValidationFailedException.CREATOR.createFromParcel(parcel);

            assertThat(copy).isNotNull();
            assertThat(e.getErrorCode()).isEqualTo(copy.getErrorCode());
            assertThat(e.getMessage()).isEqualTo(copy.getMessage());
        }
    }

    private void assertSystemUpdatePoliciesEqual(SystemUpdatePolicy policy,
            SystemUpdatePolicy copy) {
        assertThat(policy.getInstallWindowStart()).isEqualTo(copy.getInstallWindowStart());
        assertThat(policy.getInstallWindowEnd()).isEqualTo(copy.getInstallWindowEnd());
        assertFreezePeriodListsEqual(policy.getFreezePeriods(), copy.getFreezePeriods());
        assertThat(policy.getPolicyType()).isEqualTo(copy.getPolicyType());
    }

    private void assertFreezePeriodListsEqual(List<FreezePeriod> original,
            List<FreezePeriod> copy) {
        assertThat(original).isNotNull();
        assertThat(copy).isNotNull();
        assertThat(original.size()).isEqualTo(copy.size());
        for (FreezePeriod period1 : original) {
            assertThat(period1).isNotNull();
            assertFreezePeriodListContains(copy, period1);
        }
        for (FreezePeriod period1 : copy) {
            assertThat(period1).isNotNull();
            assertFreezePeriodListContains(original, period1);
        }
    }

    private void assertFreezePeriodListContains(List<FreezePeriod> list, FreezePeriod period) {
        for (FreezePeriod other : list) {
            assertThat(other).isNotNull();
            if (areFreezePeriodsEqual(period, other)) {
                return;
            }
        }
        final List<String> printablePeriods = new ArrayList<>();
        for (FreezePeriod printablePeriod : list) {
            printablePeriods.add(printablePeriod.toString());
        }
        fail(String.format(""FreezePeriod list [%s] does not contain the specified period %s."",
            String.join("", "", printablePeriods), period));
    }

    private boolean areFreezePeriodsEqual(FreezePeriod period1, FreezePeriod period2) {
        return period1 != null && period2 != null
            && Objects.equals(period1.getStart(), period2.getStart())
            && Objects.equals(period1.getEnd(), period2.getEnd());
    }

    private void testPolicy(SystemUpdatePolicy policy) {
        mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, policy);
        waitForPolicyChangedBroadcast();
        SystemUpdatePolicy newPolicy = mDevicePolicyManager.getSystemUpdatePolicy();
        if (policy == null) {
            assertNull(newPolicy);
        } else {
            assertNotNull(newPolicy);
            assertEquals(policy.toString(), newPolicy.toString());
            assertEquals(policy.getPolicyType(), newPolicy.getPolicyType());
            if (policy.getPolicyType() == SystemUpdatePolicy.TYPE_INSTALL_WINDOWED) {
                assertEquals(policy.getInstallWindowStart(), newPolicy.getInstallWindowStart());
                assertEquals(policy.getInstallWindowEnd(), newPolicy.getInstallWindowEnd());
            }
        }
    }

    private void setPolicyWithFreezePeriod(String...dates) {
        SystemUpdatePolicy policy = SystemUpdatePolicy.createPostponeInstallPolicy();
        setFreezePeriods(policy, dates);
        mDevicePolicyManager.setSystemUpdatePolicy(ADMIN_RECEIVER_COMPONENT, policy);

        List<FreezePeriod> loadedFreezePeriods = mDevicePolicyManager
                .getSystemUpdatePolicy().getFreezePeriods();
        assertEquals(dates.length / 2, loadedFreezePeriods.size());
        for (int i = 0; i < dates.length; i += 2) {
            assertEquals(parseMonthDay(dates[i]), loadedFreezePeriods.get(i / 2).getStart());
            assertEquals(parseMonthDay(dates[i + 1]), loadedFreezePeriods.get(i / 2).getEnd());
        }
    }

    private void validateFreezePeriodsSucceeds(String...dates)  {
        SystemUpdatePolicy p = SystemUpdatePolicy.createPostponeInstallPolicy();
        setFreezePeriods(p, dates);
    }

    private void validateFreezePeriodsFails(int errorCode, String... dates)  {
        SystemUpdatePolicy p = SystemUpdatePolicy.createPostponeInstallPolicy();
        try {
            setFreezePeriods(p, dates);
            fail(""Exception not thrown for dates: "" + String.join("" "", dates));
        } catch (SystemUpdatePolicy.ValidationFailedException e) {
            assertEquals(""Exception not expected: "" + e.getMessage(),
                    errorCode,e.getErrorCode());
        }
    }

    private void validateFreezePeriodsFailsOverlap(String... dates)  {
        validateFreezePeriodsFails(ValidationFailedException.ERROR_DUPLICATE_OR_OVERLAP, dates);
    }

    private void validateFreezePeriodsFailsTooLong(String... dates)  {
        validateFreezePeriodsFails(ValidationFailedException.ERROR_NEW_FREEZE_PERIOD_TOO_LONG,
                dates);
    }

    private void validateFreezePeriodsFailsTooClose(String... dates)  {
        validateFreezePeriodsFails(ValidationFailedException.ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE,
                dates);
    }

    //dates are in MM-DD format
    private void setFreezePeriods(SystemUpdatePolicy policy, String... dates) {
        List<FreezePeriod> periods = new ArrayList<>();
        for (int i = 0; i < dates.length; i+= 2) {
            periods.add(new FreezePeriod(parseMonthDay(dates[i]), parseMonthDay(dates[i + 1])));
        }
        policy.setFreezePeriods(periods);
    }

    private MonthDay parseMonthDay(String date) {
        return MonthDay.of(Integer.parseInt(date.substring(0, 2)),
                Integer.parseInt(date.substring(3, 5)));
    }

    private void clearFreezeRecord() throws Exception {
        runShellCommand(""dpm"", ""clear-freeze-period-record"");
    }

    private void setSystemDate(LocalDate date) throws Exception {
        mRestoreDate = true;
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, date.getYear());
        c.set(Calendar.MONTH, date.getMonthValue() - 1);
        c.set(Calendar.DAY_OF_MONTH, date.getDayOfMonth());
        mDevicePolicyManager.setTime(ADMIN_RECEIVER_COMPONENT, c.getTimeInMillis());
        waitForTimeChangedBroadcast();
    }

    private void waitForPolicyChangedBroadcast() {
        if (!isDeviceOwner()) {
            // ACTION_SYSTEM_UPDATE_POLICY_CHANGED is always sent to system user, skip
            // waiting for it if we are inside a managed profile.
            return;
        }
        try {
            assertTrue(""Timeout while waiting for broadcast."",
                    mPolicyChangedSemaphore.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));
        } catch (InterruptedException e) {
            fail(""Interrupted while waiting for broadcast."");
        }
    }

    private void waitForTimeChangedBroadcast() {
        try {
            assertTrue(""Timeout while waiting for broadcast."",
                    mTimeChangedSemaphore.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS));
        } catch (InterruptedException e) {
            fail(""Interrupted while waiting for broadcast."");
        }
    }

    private int getAirplaneMode() {
        int airplaneMode;
        try {
            airplaneMode = Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.AIRPLANE_MODE_ON);
        } catch (Settings.SettingNotFoundException e) {
            airplaneMode = 0xFF;
            // if the mode is not supported, return a non zero value.
            Log.i(TAG, ""Airplane mode is not found in Settings. Skipping AirplaneMode update"");
        }
        return airplaneMode;
    }

    private boolean setAirplaneModeAndWaitBroadcast (int state) throws Exception {
        Log.i(TAG, ""setAirplaneModeAndWaitBroadcast setting state(0=disable, 1=enable): "" + state);

        final CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                Log.i(TAG, ""Received broadcast for AirplaneModeUpdate"");
                latch.countDown();
            }
        };
        mContext.registerReceiver(receiver, new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED));
        try {
            Settings.Global.putInt(mContext.getContentResolver(), AIRPLANE_MODE_ON, state);
            if (!latch.await(TIMEOUT_SEC, TimeUnit.SECONDS)) {
                Log.d(TAG, ""Failed to receive broadcast in "" + TIMEOUT_SEC + ""sec"");
                return false;
            }
        } finally {
            mContext.unregisterReceiver(receiver);
        }
        return true;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/SystemUpdatePolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_failFileNotFound"	""	"1: system"	"public void testInstallUpdate_failFileNotFound() throws InterruptedException {
        assertUpdateError(
                ""random"",
                InstallSystemUpdateCallback.UPDATE_ERROR_FILE_NOT_FOUND);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_notCharging_belowThreshold_failsBatteryCheck"	""	"1: system"	"public void testInstallUpdate_notCharging_belowThreshold_failsBatteryCheck() throws Exception {
        try {
            setNonChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);
            setNonChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD - 1);
            assertUpdateError(""wrongSize.zip"",
                    InstallSystemUpdateCallback.UPDATE_ERROR_BATTERY_LOW);
        } finally {
            resetBatteryState();
            resetDevicePolicyConstants();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_charging_belowThreshold_failsBatteryCheck"	""	"1: system"	"public void testInstallUpdate_charging_belowThreshold_failsBatteryCheck() throws Exception {
        try {
            setChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);
            setChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD - 1);
            assertUpdateError(""wrongSize.zip"",
                    InstallSystemUpdateCallback.UPDATE_ERROR_BATTERY_LOW);
        } finally {
            resetBatteryState();
            resetDevicePolicyConstants();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest"	"testInstallUpdate_charging_aboveThreshold_passesBatteryCheck"	""	"2: system user"	"public void testInstallUpdate_charging_aboveThreshold_passesBatteryCheck() throws Exception {
        if (!isDeviceAB()) {
            return;
        }
        try {
            setChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);
            setChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD);
            // Positive CTS tests aren't possible, so we verify that we get the file-related error
            // rather than the battery one.
            assertUpdateError(""wrongSize.zip"", UPDATE_ERROR_UPDATE_FILE_INVALID);
        } finally {
            resetBatteryState();
            resetDevicePolicyConstants();
        }
    }

    private void assertUpdateError(String fileName, int expectedErrorCode) {
        Log.v(TAG, ""assertUpdateError("" + fileName + "", "" + expectedErrorCode + "")"");
        AtomicInteger errorCode = new AtomicInteger();
        // Poll until the error code matches our expectation to deal with delays in propagation
        PollingCheck.waitFor(() -> {
            try {
                errorCode.set(getUpdateError(fileName));
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
            return errorCode.get() == expectedErrorCode; });
        assertWithMessage(""error code when updating %s"", fileName).that(errorCode.get())
                .isEqualTo(expectedErrorCode);
    }

    private int getUpdateError(String fileName) throws InterruptedException {
        CountDownLatch latch = new CountDownLatch(1);
        Uri uri = Uri.fromFile(new File(TEST_SYSTEM_UPDATES_DIR, fileName));
        Log.d(TAG, ""Calling installSystemUpdate() on "" + Process.myUserHandle() + "" using "" + uri);
        mDevicePolicyManager.installSystemUpdate(ADMIN_RECEIVER_COMPONENT, uri,
                Runnable::run, new InstallSystemUpdateCallback() {
                    @Override
                    public void onInstallUpdateError(int errorCode, String errorMessage) {
                        Log.d(TAG, ""onInstallUpdateError(): errorCode="" + errorCode
                                    + "", errorMessage="" + errorMessage);
                        callbackErrorCode = errorCode;
                        latch.countDown();
                    }
                });
        Log.d(TAG, ""Waiting "" + TIMEOUT + "" minutes for callback"");
        assertWithMessage(""onInstallUpdateError() not called in %s minutes"", TIMEOUT)
                .that(latch.await(TIMEOUT, TimeUnit.MINUTES)).isTrue();
        return callbackErrorCode;
    }

    private void setNonChargingBatteryThreshold(int threshold) {
        runShellCommand(
                ""settings put global device_policy_constants battery_threshold_not_charging=""
                        + threshold);
    }

    private void setNonChargingBatteryLevelAndWait(int level) throws Exception {
        setBatteryStateAndWait(/* plugged= */ false, level);
    }

    private void setChargingBatteryThreshold(int threshold) {
        runShellCommand(
                ""settings put global device_policy_constants battery_threshold_charging=""
                        + threshold);
    }

    private void setChargingBatteryLevelAndWait(int level) throws Exception {
        setBatteryStateAndWait(/* plugged= */ true, level);
    }

    /** Should be paired with {@link #resetBatteryState()} in a {@code finally} block. */
    private void setBatteryStateAndWait(boolean plugged, int level) throws Exception {
        runShellCommand(plugged ? ""cmd battery set ac 1"" : ""cmd battery unplug"");
        runShellCommand(""cmd battery set -f level "" + level);
        long startTime = SystemClock.elapsedRealtime();
        while (!isBatteryState(plugged, level)
                && SystemClock.elapsedRealtime() <= startTime + BATTERY_STATE_CHANGE_TIMEOUT_MS) {
            Thread.sleep(BATTERY_STATE_CHANGE_SLEEP_PER_CHECK_MS);
        }
        assertWithMessage(""battery state (plugged=%s, level=%s) after %sms"", plugged, level,
                BATTERY_STATE_CHANGE_SLEEP_PER_CHECK_MS)
                        .that(isBatteryState(plugged, level)).isTrue();
    }

    private boolean isBatteryState(boolean plugged, int level) {
        final Intent batteryStatus =
                mContext.registerReceiver(/* receiver= */ null, BATTERY_CHANGED_FILTER);
        return isPluggedIn(batteryStatus) == plugged
                && calculateBatteryPercentage(batteryStatus) == level;
    }

    private boolean isPluggedIn(Intent batteryStatus) {
        return batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, /* defaultValue= */ -1) > 0;
    }

    private float calculateBatteryPercentage(Intent batteryStatus) {
        int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, /* defaultValue= */ -1);
        int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, /* defaultValue= */ -1);
        return 100 * level / (float) scale;
    }

    private void resetBatteryState() {
        runShellCommand(""dumpsys battery reset"");
    }

    private void resetDevicePolicyConstants() {
        runShellCommand(""settings delete global device_policy_constants"");
    }

    private boolean isDeviceAB() {
        return ""true"".equalsIgnoreCase(SystemProperties.get(AB_DEVICE_KEY, """"));
    }

    private boolean deviceHasBattery() {
        final Intent batteryInfo = mContext.registerReceiver(null,
                new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
        return batteryInfo != null
               && batteryInfo.getBooleanExtra(BatteryManager.EXTRA_PRESENT, true);
    }

    /**
     * This is just for batteryless device，as we know from above that remaining capacity
     * is 0 on Android 9 and higher. We need set battery status to meet the test conditions
     * of InstallUpdateTest for batteryless device.
     * For device has a battery, the test conditions follow the real status of the battery.
     */
    private void setupBatteryState() throws Exception {
        if (!deviceHasBattery()) {
            setChargingBatteryThreshold(TEST_BATTERY_THRESHOLD);
            setChargingBatteryLevelAndWait(TEST_BATTERY_THRESHOLD);
        }
    }

    private void teardownBatteryState() {
        if (!deviceHasBattery()) {
            resetBatteryState();
            resetDevicePolicyConstants();
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	"4: system user apps visible"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.os.UserManager;

import java.util.Arrays;
import java.util.HashSet;

public class SecondaryProfileOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {
    public static final String[] ALLOWED = new String[] {
            // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY, // Same as above.
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS
            UserManager.DISALLOW_CONFIG_VPN,
            // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_OUTGOING_CALLS,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,
            UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,
            UserManager.DISALLOW_OUTGOING_BEAM,
            UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,
            UserManager.DISALLOW_SET_USER_ICON,
            UserManager.DISALLOW_AUTOFILL,
            UserManager.DISALLOW_CONTENT_CAPTURE,
            UserManager.DISALLOW_CONTENT_SUGGESTIONS,
            UserManager.DISALLOW_UNIFIED_PASSWORD,
    };

    public static final String[] DISALLOWED = new String[] {
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_SMS,
            UserManager.DISALLOW_FUN,
            UserManager.DISALLOW_SAFE_BOOT,
            UserManager.DISALLOW_CREATE_WINDOWS,
            UserManager.DISALLOW_DATA_ROAMING,
            UserManager.DISALLOW_BLUETOOTH
    };

    public static final String[] ALLOWED_BUT_LEAKY = new String[] {
        UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
    };

    @Override
    protected String[] getAllowedRestrictions() {
        return ALLOWED;
    }

    @Override
    protected String[] getDisallowedRestrictions() {
        return DISALLOWED;
    }

    @Override
    protected String[] getDefaultEnabledRestrictions() { return new String[0]; }

    /**
     * This is called after DO setting all DO restrictions. Global restrictions should be
     * visible on other users.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.SecondaryProfileOwnerUserRestrictionsTest"	"testHasGlobalRestrictions"	""	"1: visible"	"public void testHasGlobalRestrictions() {
        assertRestrictions(new HashSet<>(Arrays.asList(DO_GLOBAL_RESTRICTIONS)));
    }

    /**
     * This is called after DO setting all DO restrictions, and PO setting all PO restrictions.
     * All global + local restrictions should be visible.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/SecondaryProfileOwnerUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testSetProfileGlobalRestrictions"	""	"2: user apps"	"public void testSetProfileGlobalRestrictions() throws Exception {
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testClearProfileGlobalRestrictions"	""	"2: user apps"	"public void testClearProfileGlobalRestrictions() throws Exception  {
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, ENSURE_VERIFY_APPS);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testProfileGlobalRestrictionsEnforced"	""	"1: apps"	"public void testProfileGlobalRestrictionsEnforced() {
        assertRestriction(ENSURE_VERIFY_APPS, true);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.ProfileGlobalRestrictionsTest"	"testProfileGlobalRestrictionsNotEnforced"	""	"1: apps"	"public void testProfileGlobalRestrictionsNotEnforced() {
        assertRestriction(ENSURE_VERIFY_APPS, false);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/ProfileGlobalRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.CheckNoOwnerRestrictionsTest"	"testNoOwnerRestrictions"	""	"2: system user"	"public void testNoOwnerRestrictions() {
        assertFalse(""DISALLOW_UNMUTE_MICROPHONE is still set"",
                mContext.getSystemService(UserManager.class).hasUserRestriction(
                UserManager.DISALLOW_UNMUTE_MICROPHONE));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/CheckNoOwnerRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest"	"getDisallowedRestrictions"	""	"4: system user camera apps"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.os.Process;
import android.os.UserHandle;
import android.os.UserManager;

public class DeviceOwnerUserRestrictionsTest extends BaseUserRestrictionsTest {
    public static final String[] ALLOWED = new String[] {
            // UserManager.DISALLOW_CONFIG_WIFI, // Has unrecoverable side effects.
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            // UserManager.DISALLOW_SHARE_LOCATION, // Has unrecoverable side effects.
            // UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES, // Has unrecoverable side effects.
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            // UserManager.DISALLOW_DEBUGGING_FEATURES, // Need for CTS
            UserManager.DISALLOW_CONFIG_VPN,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            // UserManager.ENSURE_VERIFY_APPS, // Has unrecoverable side effects.
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_OUTGOING_CALLS,
            UserManager.DISALLOW_SMS,
            UserManager.DISALLOW_FUN,
            UserManager.DISALLOW_CREATE_WINDOWS,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,
            UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,
            UserManager.DISALLOW_OUTGOING_BEAM,
            UserManager.DISALLOW_SAFE_BOOT,
            UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,
            // UserManager.DISALLOW_DATA_ROAMING, // Has unrecoverable side effects.
            UserManager.DISALLOW_SET_USER_ICON,
            UserManager.DISALLOW_BLUETOOTH,
            UserManager.DISALLOW_AUTOFILL,
            UserManager.DISALLOW_CONTENT_CAPTURE,
            UserManager.DISALLOW_CONTENT_SUGGESTIONS,
            UserManager.DISALLOW_UNIFIED_PASSWORD,
            UserManager.DISALLOW_CAMERA_TOGGLE,
            UserManager.DISALLOW_MICROPHONE_TOGGLE,
    };

    public static final String[] DISALLOWED = new String[] {
            // DO can set all public restrictions.
    };

    public static final String[] DEFAULT_ENABLED = new String[] {
            // No restrictions set for DO by default.
    };

    @Override
    protected String[] getAllowedRestrictions() {
        return ALLOWED;
    }

    @Override
    protected String[] getDisallowedRestrictions() {
        return DISALLOWED;
    }

    @Override
    protected String[] getDefaultEnabledRestrictions() { return DEFAULT_ENABLED; }

    /**
     * Picks a restriction that isn't applied by {@link UserManager} itself, applies it, and makes
     * sure that {@link UserManager} understands that it is applied but not as a base restriction.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.DeviceOwnerUserRestrictionsTest"	"testHasBaseUserRestrictions"	""	"1: user"	"public void testHasBaseUserRestrictions() {
        final UserHandle userHandle = Process.myUserHandle();
        for (String r : ALL_USER_RESTRICTIONS) {
            if(!hasBaseUserRestriction(r, userHandle)) {
                mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, r);
                assertTrue(""Restriction "" + r + "" expected"",
                        mUserManager.hasUserRestriction(r, userHandle));
                assertFalse(""Restriction "" + r + "" not expected as a baseRestriction"",
                        hasBaseUserRestriction(r, userHandle));

                mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, r);
                assertFalse(""Restriction "" + r + "" not expected"",
                        mUserManager.hasUserRestriction(r, userHandle));
                assertFalse(""Restriction "" + r + "" not expected as a baseRestriction"",
                        hasBaseUserRestriction(r, userHandle));
                return;
            }
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/DeviceOwnerUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"assertClearDefaultRestrictions"	""	"4: system user camera apps"	"public void test/*
 *.
 */
package com.android.cts.deviceandprofileowner.userrestrictions;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Process;
import android.os.UserHandle;
import android.os.UserManager;

import com.android.compatibility.common.util.ShellIdentityUtils;
import com.android.cts.deviceandprofileowner.BaseDeviceAdminTest;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public abstract class BaseUserRestrictionsTest extends BaseDeviceAdminTest {
    protected static final String[] ALL_USER_RESTRICTIONS = new String[]{
            UserManager.DISALLOW_CONFIG_WIFI,
            UserManager.DISALLOW_MODIFY_ACCOUNTS,
            UserManager.DISALLOW_INSTALL_APPS,
            UserManager.DISALLOW_UNINSTALL_APPS,
            UserManager.DISALLOW_SHARE_LOCATION,
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES,
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
            UserManager.DISALLOW_CONFIG_BLUETOOTH,
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_CREDENTIALS,
            UserManager.DISALLOW_REMOVE_USER,
            UserManager.DISALLOW_DEBUGGING_FEATURES,
            UserManager.DISALLOW_CONFIG_VPN,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            UserManager.ENSURE_VERIFY_APPS,
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_APPS_CONTROL,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_OUTGOING_CALLS,
            UserManager.DISALLOW_SMS,
            UserManager.DISALLOW_FUN,
            UserManager.DISALLOW_CREATE_WINDOWS,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS,
            UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE,
            UserManager.DISALLOW_OUTGOING_BEAM,
            UserManager.DISALLOW_SAFE_BOOT,
            UserManager.ALLOW_PARENT_PROFILE_APP_LINKING,
            UserManager.DISALLOW_DATA_ROAMING,
            UserManager.DISALLOW_SET_USER_ICON,
            UserManager.DISALLOW_BLUETOOTH,
            UserManager.DISALLOW_BLUETOOTH_SHARING,
            UserManager.DISALLOW_CAMERA_TOGGLE,
            UserManager.DISALLOW_MICROPHONE_TOGGLE,
    };

    /**
     * Restrictions that affect all users when DO sets.
     */
    protected static final String[] DO_GLOBAL_RESTRICTIONS = new String[] {
            UserManager.DISALLOW_USB_FILE_TRANSFER,
            UserManager.DISALLOW_CONFIG_TETHERING,
            UserManager.DISALLOW_NETWORK_RESET,
            UserManager.DISALLOW_FACTORY_RESET,
            UserManager.DISALLOW_ADD_USER,
            UserManager.DISALLOW_CONFIG_CELL_BROADCASTS,
            UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS,
            UserManager.DISALLOW_MOUNT_PHYSICAL_MEDIA,
            UserManager.DISALLOW_SMS,
            UserManager.DISALLOW_FUN,
            UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY,
            UserManager.DISALLOW_SAFE_BOOT,
            UserManager.DISALLOW_CREATE_WINDOWS,
            UserManager.DISALLOW_BLUETOOTH,
            // UserManager.DISALLOW_DATA_ROAMING, // Not set during CTS
            UserManager.DISALLOW_CAMERA_TOGGLE,
            UserManager.DISALLOW_MICROPHONE_TOGGLE,

            // PO can set them too, but when DO sets them, they're global.
            UserManager.DISALLOW_ADJUST_VOLUME,
            UserManager.DISALLOW_UNMUTE_MICROPHONE,
            UserManager.DISALLOW_SYSTEM_ERROR_DIALOGS
    };

    public static final String[] HIDDEN_AND_PROHIBITED = new String[] {
            ""no_record_audio"",
            ""no_wallpaper"",
            ""no_oem_unlock""
    };

    protected void assertLayeredRestriction(String restriction, boolean expected) {
        assertEquals(""Restriction "" + restriction + "": expected="" + expected,
                expected, mUserManager.hasUserRestriction(restriction));
    }

    protected void assertOwnerRestriction(String restriction, boolean expected) {
        assertEquals(""Restriction "" + restriction + "": expected="" + expected,
                expected, mDevicePolicyManager.getUserRestrictions(ADMIN_RECEIVER_COMPONENT)
                        .getBoolean(restriction));
    }

    /** Returns whether {@link UserManager} itself has applied the given restriction to the user. */
    protected boolean hasBaseUserRestriction(String restriction, UserHandle userHandle) {
        return ShellIdentityUtils.invokeMethodWithShellPermissions(mUserManager,
                (um) -> um.hasBaseUserRestriction(restriction, userHandle));
    }

    /**
     * Check that {@link UserManager#hasUserRestriction} gives the expected results for each
     * restriction.
     * @param expected the list of user restrictions that are expected to have been applied due
     *                 to DO/PO
     */
    protected void assertRestrictions(Set<String> expected) {
        final UserHandle userHandle = Process.myUserHandle();
        for (String r : ALL_USER_RESTRICTIONS) {
            assertLayeredRestriction(r,
                    expected.contains(r) || hasBaseUserRestriction(r, userHandle));
        }
    }

    /**
     * Test that the given restriction can be set and cleared, then leave it set again.
     */
    protected void assertSetClearUserRestriction(String restriction) {
        final boolean hadRestriction = mUserManager.hasUserRestriction(restriction);

        assertOwnerRestriction(restriction, false);

        // Set.  Shouldn't throw.
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        assertOwnerRestriction(restriction, true);
        assertLayeredRestriction(restriction, true);

        // Then clear.
        assertClearUserRestriction(restriction);

        assertLayeredRestriction(restriction, hadRestriction);

        // Then set again.
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
    }

    /**
     * Test that the given restriction can be cleared.  (and leave it cleared.)
     */
    protected void assertClearUserRestriction(String restriction) {
        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        assertOwnerRestriction(restriction, false);
    }

    protected void assertClearDefaultRestrictions() {
        for (String restriction : getDefaultEnabledRestrictions()) {
            assertClearUserRestriction(restriction);
        }
    }

    /**
     * Test that the given restriction *cannot* be set (or clear).
     */
    protected void assertCannotSetUserRestriction(String restriction) {
        final boolean hadRestriction = mUserManager.hasUserRestriction(restriction);

        assertOwnerRestriction(restriction, false);

        // Set should fail.
        try {
            mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
            fail(""Restriction="" + restriction);
        } catch (SecurityException e) {
            assertTrue(""Restriction="" + restriction + "" Message was: "" + e.getMessage(),
                    e.getMessage().contains(""cannot set user restriction""));
        }

        // Shouldn't have changed.
        assertOwnerRestriction(restriction, false);
        assertLayeredRestriction(restriction, hadRestriction);

        // Clear should fail too.
        try {
            mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
            fail(""Restriction="" + restriction);
        } catch (SecurityException e) {
            assertTrue(""Restriction="" + restriction + "" Message was: "" + e.getMessage(),
                    e.getMessage().contains(""cannot set user restriction""));
        }

        // Shouldn't have changed.
        assertOwnerRestriction(restriction, false);
        assertLayeredRestriction(restriction, hadRestriction);
    }

    /** For {@link #testSetAllRestrictions} */
    protected abstract String[] getAllowedRestrictions();

    /** For {@link #testSetAllRestrictions} */
    protected abstract String[] getDisallowedRestrictions();

    /** For {@link #testDefaultRestrictions()} */
    protected abstract String[] getDefaultEnabledRestrictions();

    /**
     * Test restrictions that should be enabled by default
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testDefaultRestrictions"	""	"1: user"	"public void testDefaultRestrictions() {
        for (String restriction : getDefaultEnabledRestrictions()) {
            assertOwnerRestriction(restriction, true);
        }

        Set<String> offByDefaultRestrictions = new HashSet<>(Arrays.asList(ALL_USER_RESTRICTIONS));
        offByDefaultRestrictions.removeAll(
                new HashSet<>(Arrays.asList(getDefaultEnabledRestrictions())));
        for (String restriction : offByDefaultRestrictions) {
            assertOwnerRestriction(restriction, false);
        }
    }

    /**
     * Set only one restriction, and make sure only that's set, and then clear it.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testSetAllRestrictionsIndividually"	""	"1: user"	"public void testSetAllRestrictionsIndividually() {
        assertClearDefaultRestrictions();
        for (String r : getAllowedRestrictions()) {
            // Set it.
            assertSetClearUserRestriction(r);

            assertRestrictions(new HashSet<>(Arrays.asList(new String[]{r})));

            // Then clear it.
            assertClearUserRestriction(r);
        }
    }

    /**
     * Make sure all allowed restrictions can be set, and the others can't.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testSetAllRestrictions"	""	"1: user"	"public void testSetAllRestrictions() {
        assertClearDefaultRestrictions();
        for (String r : getAllowedRestrictions()) {
            assertSetClearUserRestriction(r);
        }
        for (String r : getDisallowedRestrictions()) {
            assertCannotSetUserRestriction(r);
        }
        for (String r : HIDDEN_AND_PROHIBITED) {
            assertCannotSetUserRestriction(r);
        }
    }

    /**
     * Clear all allowed restrictions.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testClearAllRestrictions"	""	"1: user"	"public void testClearAllRestrictions() {
        for (String r : getAllowedRestrictions()) {
            assertClearUserRestriction(r);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.deviceandprofileowner.userrestrictions.BaseUserRestrictionsTest"	"testBroadcast"	""	"1: user"	"public void testBroadcast() throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        final IntentFilter filter = new IntentFilter(UserManager.ACTION_USER_RESTRICTIONS_CHANGED);
        mContext.registerReceiver(new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        }, filter);

        final String restriction = UserManager.DISALLOW_CONFIG_WIFI;
        mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);

        assertTrue(""Didn't receive broadcast"", latch.await(120, TimeUnit.SECONDS));

        mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT, restriction);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/userrestrictions/BaseUserRestrictionsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.certinstaller.CertSelectionDelegateTest"	"finish"	""	"1: system"	"public void test/*
 *.
 */
package com.android.cts.certinstaller;

import static com.google.common.truth.Truth.assertThat;
import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.assertNull;

import android.app.Activity;
import android.app.admin.DelegatedAdminReceiver;
import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Process;
import android.security.KeyChain;
import android.security.KeyChainAliasCallback;
import android.support.test.uiautomator.UiDevice;
import android.test.InstrumentationTestCase;

import com.android.compatibility.common.util.FakeKeys.FAKE_RSA_1;

import java.io.ByteArrayInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

/**
 * Tests a delegate app with DELEGATION_CERT_SELECTION receives the
 * {@link android.app.admin.DelegatedAdminReceiver#onChoosePrivateKeyAlias} callback when a
 * requesting app (in this case, ourselves) invokes {@link KeyChain#choosePrivateKeyAlias},
 * and is able to force a designated cert to be returned.
 *
 * This test is driven by hostside {@code DeviceAndProfileOwnerTest#testDelegationCertSelection},
 * which grants this app DELEGATION_CERT_SELECTION permission and executes tests in this class.
 */
public class CertSelectionDelegateTest extends InstrumentationTestCase {

    private static final long KEYCHAIN_TIMEOUT_MINS = 1;

    private Context mContext;
    private DevicePolicyManager mDpm;
    private Activity mActivity;

    public static class CertSelectionReceiver extends DelegatedAdminReceiver {

        @Override
        public String onChoosePrivateKeyAlias(Context context, Intent intent, int uid, Uri uri,
                String alias) {
            if (uid != Process.myUid() || uri == null) {
                return null;
            }
            return uri.getQueryParameter(""delegate-alias"");
        }
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        mContext = getInstrumentation().getContext();
        mDpm = mContext.getSystemService(DevicePolicyManager.class);

        final UiDevice device = UiDevice.getInstance(getInstrumentation());
        mActivity = launchActivity(getInstrumentation().getTargetContext().getPackageName(),
                Activity.class, null);
        device.waitForIdle();
    }

    @Override
    protected void tearDown() throws Exception {
        mActivity.finish();
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/CertSelectionDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testOnlyDeviceOwnerCanHaveMoreThanOneTargetUser"	""	"1: user"	"public void testOnlyDeviceOwnerCanHaveMoreThanOneTargetUser() {
        if (!mDpm.isDeviceOwnerApp(AdminReceiver.getComponentName(mContext).getPackageName())) {
            assertEquals(1, mTargetUsers.size());
        }
    }

    /**
     * If the intent is implicit, expected to throw {@link IllegalArgumentException}.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCannotBind_implicitIntent"	""	"1: user"	"public void testCannotBind_implicitIntent() throws Exception {
        final Intent implicitIntent = new Intent(Intent.ACTION_VIEW);
        for (UserHandle targetUser : mTargetUsers) {
            try {
                bind(implicitIntent, EMPTY_SERVICE_CONNECTION, targetUser);
                fail(""IllegalArgumentException should be thrown for target user "" + targetUser);
            } catch (IllegalArgumentException ex) {
                MoreAsserts.assertContainsRegex(""Service intent must be explicit"", ex.getMessage());
            }
        }
    }

    /**
     * If the intent is not resolvable, it should return {@code null}.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCannotBind_notResolvableIntent"	""	"1: user"	"public void testCannotBind_notResolvableIntent() throws Exception {
        final Intent notResolvableIntent = new Intent();
        notResolvableIntent.setClassName(mContext, ""NotExistService"");
        for (UserHandle targetUser : mTargetUsers) {
            assertFalse(""Should not be allowed to bind to target user "" + targetUser,
                    bind(notResolvableIntent, EMPTY_SERVICE_CONNECTION, targetUser));
        }
    }

    /**
     * Make sure we cannot bind unprotected service.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCannotBind_unprotectedCrossUserService"	""	"1: user"	"public void testCannotBind_unprotectedCrossUserService() throws Exception {
        final Intent serviceIntent = new Intent(mContext, UnprotectedCrossUserService.class);
        for (UserHandle targetUser : mTargetUsers) {
            try {
                bind(serviceIntent, EMPTY_SERVICE_CONNECTION, targetUser);
                fail(""SecurityException should be thrown for target user "" + targetUser);
            } catch (SecurityException ex) {
                MoreAsserts.assertContainsRegex(
                        ""must be protected by BIND_DEVICE_ADMIN"", ex.getMessage());
            }
        }
    }

    /**
     * Talk to a DPC package that is neither device owner nor profile owner.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCheckCannotBind_nonManagingPackage"	""	"1: user"	"public void testCheckCannotBind_nonManagingPackage() throws Exception {
        final Intent serviceIntent = new Intent();
        serviceIntent.setClassName(NON_MANAGING_PACKAGE, ProtectedCrossUserService.class.getName());
        for (UserHandle targetUser : mTargetUsers) {
            try {
                bind(serviceIntent, EMPTY_SERVICE_CONNECTION, targetUser);
                fail(""SecurityException should be thrown for target user "" + targetUser);
            } catch (SecurityException ex) {
                MoreAsserts.assertContainsRegex(""Only allow to bind service"", ex.getMessage());
            }
        }
    }

    /**
     * Talk to the same DPC in same user, that is talking to itself.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCannotBind_sameUser"	""	"1: user"	"public void testCannotBind_sameUser() throws Exception {
        try {
            final Intent serviceIntent = new Intent(mContext, ProtectedCrossUserService.class);
            bind(serviceIntent, EMPTY_SERVICE_CONNECTION, Process.myUserHandle());
            fail(""IllegalArgumentException should be thrown"");
        } catch (IllegalArgumentException ex) {
            MoreAsserts.assertContainsRegex(""target user id must be different"", ex.getMessage());
        }
    }

    /**
     * Send a String to other side and expect the exact same string is echoed back.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCrossProfileCall_echo"	""	"1: user"	"public void testCrossProfileCall_echo() throws Exception {
        final String ANSWER = ""42"";
        for (UserHandle targetUser : mTargetUsers) {
            assertCrossProfileCall(ANSWER, service -> service.echo(ANSWER), targetUser);
        }
    }

    /**
     * Make sure we are talking to the target user.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceGoodSetupTest"	"testCrossProfileCall_getUserHandle"	""	"1: user"	"public void testCrossProfileCall_getUserHandle() throws Exception {
        for (UserHandle targetUser : mTargetUsers) {
            assertCrossProfileCall(targetUser, service -> service.getUserHandle(), targetUser);
        }
    }

    /**
     * Convenient method for you to execute a cross user call and assert the return value of it.
     * @param expected The expected result of the cross user call.
     * @param callable It is called when the service is bound, use this to make the service call.
     * @param targetUserHandle Which user are we talking to.
     * @param <T> The return type of the service call.
     */
    private <T> void assertCrossProfileCall(
            T expected, CrossUserCallable<T> callable, UserHandle targetUserHandle)
            throws Exception {
        final LinkedBlockingQueue<IInterface> queue = new LinkedBlockingQueue<>();
        final ServiceConnection serviceConnection = new ServiceConnection() {
            @Override
            public void onServiceConnected(ComponentName name, IBinder service) {
                Log.d(TAG, ""onServiceConnected is called in "" + Thread.currentThread().getName());
                // Ensure onServiceConnected is running in main thread.
                if (Looper.myLooper() != Looper.getMainLooper()) {
                    // Not running in main thread, failed the test.
                    Log.e(TAG, ""onServiceConnected is not running in main thread!"");
                    queue.add(NOT_IN_MAIN_THREAD_POISON_PILL);
                    return;
                }
                queue.add(ICrossUserService.Stub.asInterface(service));
            }

            @Override
            public void onServiceDisconnected(ComponentName name) {
                Log.d(TAG, ""onServiceDisconnected is called"");
            }
        };
        final Intent serviceIntent = new Intent(mContext, ProtectedCrossUserService.class);
        assertTrue(bind(serviceIntent, serviceConnection, targetUserHandle));
        IInterface service = queue.poll(5, TimeUnit.SECONDS);
        assertNotNull(""binding to the target service timed out"", service);
        try {
            if (NOT_IN_MAIN_THREAD_POISON_PILL.equals(service)) {
                fail(""onServiceConnected should be called in main thread"");
            }
            ICrossUserService crossUserService = (ICrossUserService) service;
            assertEquals(expected, callable.call(crossUserService));
        } finally {
            mContext.unbindService(serviceConnection);
        }
    }

    private boolean bind(Intent serviceIntent, ServiceConnection serviceConnection,
            UserHandle userHandle) {
        return mDpm.bindDeviceAdminServiceAsUser(AdminReceiver.getComponentName(mContext),
                serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE, userHandle);
    }

    interface CrossUserCallable<T> {
        T call(ICrossUserService service) throws RemoteException;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceGoodSetupTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceFailsTest"	"testNoBindDeviceAdminTargetUsers"	""	"1: user"	"public void testNoBindDeviceAdminTargetUsers() {
        List<UserHandle> allowedTargetUsers = mDpm.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext));
        assertEquals(0, allowedTargetUsers.size());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.BindDeviceAdminServiceFailsTest"	"testCannotBind"	""	"1: user"	"public void testCannotBind() throws Exception {
        UserHandle otherProfile = Utils.getOtherProfile(mContext);
        if (otherProfile != null) {
            checkCannotBind(AdminReceiver.COMP_DPC_PACKAGE_NAME, otherProfile);
            checkCannotBind(AdminReceiver.COMP_DPC_2_PACKAGE_NAME, otherProfile);
        }
    }

    private void checkCannotBind(String targetPackageName, UserHandle otherProfile) {
        try {
            final Intent serviceIntent = new Intent();
            serviceIntent.setClassName(targetPackageName, ProtectedCrossUserService.class.getName());
            bind(serviceIntent, EMPTY_SERVICE_CONNECTION, otherProfile);
            fail(""SecurityException should be thrown"");
        } catch (SecurityException ex) {
            MoreAsserts.assertContainsRegex(
                    ""Not allowed to bind to target user id"", ex.getMessage());
        }
    }

    private boolean bind(Intent serviceIntent, ServiceConnection serviceConnection,
            UserHandle userHandle) {
        return mDpm.bindDeviceAdminServiceAsUser(AdminReceiver.getComponentName(mContext),
                serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE, userHandle);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/BindDeviceAdminServiceFailsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.ManagementTest"	"testOtherProfilesEqualsBindTargetUsers"	""	"1: user"	"public void testOtherProfilesEqualsBindTargetUsers() {
        UserHandle otherProfile = Utils.getOtherProfile(mContext);
        assertNotNull(otherProfile);

        List<UserHandle> allowedTargetUsers = mDevicePolicyManager.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext));
        assertEquals(1, allowedTargetUsers.size());
        assertEquals(otherProfile, allowedTargetUsers.get(0));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.ManagementTest"	"testCreateSecondaryUser"	""	"1: user"	"public void testCreateSecondaryUser() throws Exception {
        ComponentName admin = AdminReceiver.getComponentName(mContext);
        assertNotNull(mDevicePolicyManager.createAndManageUser(admin, ""secondary-user"",
                admin, null, DevicePolicyManager.SKIP_SETUP_WIZARD));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.ManagementTest"	"testNoBindDeviceAdminTargetUsers"	""	"1: user"	"public void testNoBindDeviceAdminTargetUsers() {
        MoreAsserts.assertEmpty(mDevicePolicyManager.getBindDeviceAdminTargetUsers(
                AdminReceiver.getComponentName(mContext)));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.provisioning.ManagedProfileProvisioningTest"	"testProvisioningCorpOwnedManagedProfile"	""	"1: user"	"public void testProvisioningCorpOwnedManagedProfile() throws Exception {
        Intent intent = new Intent(ACTION_PROVISION_MANAGED_PROFILE)
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME,
                    AdminReceiver.getComponentName(getContext()))
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_SKIP_ENCRYPTION, true)
            // this flag for Corp owned only
            .putExtra(DevicePolicyManager.EXTRA_PROVISIONING_SKIP_USER_CONSENT, true);

        SilentProvisioningTestManager provisioningManager =
                new SilentProvisioningTestManager(getContext());
        assertFalse(provisioningManager.startProvisioningAndWait(intent));
        assertFalse(isExtraUserPresent(provisioningManager.getReceviedProfileProvisionedIntent()));
    }

    private boolean isExtraUserPresent(Intent intent) {
        return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.provisioning.AffiliationTest"	"testSetAffiliationId2"	""	"1: system"	"public void testSetAffiliationId2() {
        setAffiliationId(""id.number.2"");
    }

    private void setAffiliationId(String id) {
        ComponentName admin = AdminReceiver.getComponentName(getContext());
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        Set<String> ids = Collections.singleton(id);
        dpm.setAffiliationIds(admin, ids);
        assertEquals(ids, dpm.getAffiliationIds(admin));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/AffiliationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.provisioning.UserRestrictionTest"	"testClearDisallowRemoveUserRestriction"	""	"2: system user"	"public void testClearDisallowRemoveUserRestriction() {
        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, false);
    }

    private void setUserRestriction(String restriction, boolean add) {
        DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);
        ComponentName admin = AdminReceiver.getComponentName(getContext());
        if (add) {
            dpm.addUserRestriction(admin, restriction);
        } else {
            dpm.clearUserRestriction(admin, restriction);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/UserRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.comp.provisioning.UserRestrictionTest"	"testAddDisallowRemoveUserRestriction"	""	"1: user"	"public void testAddDisallowRemoveUserRestriction() {
        setUserRestriction(UserManager.DISALLOW_REMOVE_USER, true);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/UserRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"CrossProfileIntentFilterTest"	""	"2: system user"	"public void test/*
 *.
 */
package com.android.cts.managedprofile;

import static com.android.cts.managedprofile.BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT;
import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.test.ActivityInstrumentationTestCase2;

import androidx.test.InstrumentationRegistry;

import java.util.List;

/**
 * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API.
 *
 * <p>Note that it expects that there is an activity responding to {@code PrimaryUserActivity
 * .ACTION} in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary
 * profile, and one to {@code AllUsersActivity.ACTION} in both profiles.
 */
public class CrossProfileIntentFilterTest extends ActivityInstrumentationTestCase2<TestActivity> {

    private PackageManager mPackageManager;
    private DevicePolicyManager mDevicePolicyManager;

    public CrossProfileIntentFilterTest() {
        super(TestActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        // As the way to access Instrumentation is changed in the new runner, we need to inject it
        // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will
        // be marked as deprecated and replaced with ActivityTestRule.
        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
        mPackageManager = getActivity().getPackageManager();
        mDevicePolicyManager = (DevicePolicyManager)
                getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
    }

    @Override
    protected void tearDown() throws Exception {
        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testClearCrossProfileIntentFilters"	""	"1: user"	"public void testClearCrossProfileIntentFilters() {
        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(PrimaryUserActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(1);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();

        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);

        assertTrue(mPackageManager.queryIntentActivities(
                new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).isEmpty());
        getActivity().startActivity(ManagedProfileActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_primary"	""	"1: user"	"public void testAddCrossProfileIntentFilter_primary() {
        assertEquals(0, mPackageManager.queryIntentActivities(
                new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).size());

        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(PrimaryUserActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);

        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(1);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();
        getActivity().startActivity(PrimaryUserActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileIntentFilterTest"	"testAddCrossProfileIntentFilter_all"	""	"1: user"	"public void testAddCrossProfileIntentFilter_all() {
        assertEquals(1, mPackageManager.queryIntentActivities(
                new Intent(AllUsersActivity.ACTION), /* flags = */ 0).size());

        IntentFilter testIntentFilter = new IntentFilter();
        testIntentFilter.addAction(AllUsersActivity.ACTION);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                testIntentFilter, DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);

        final List<ResolveInfo> activities =
                mPackageManager.queryIntentActivities(
                        new Intent(AllUsersActivity.ACTION), /* flags = */ 0);
        assertThat(activities).hasSize(2);
        assertThat(activitiesIncludeCrossProfileIntentForwarderActivity(activities)).isTrue();
        // If we used startActivity(), the user would have a disambiguation dialog presented which
        // requires human intervention, so we won't be testing like that
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileIntentFilterTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"testSetUp"	""	"2: system camera"	"public void testSetUp() throws Exception {
        // toggle the restriction to reset system's built-in cross profile intent filters,
        // simulating the default state of a work profile created by ManagedProvisioning
        testDisableSharingIntoProfile();
        testEnableSharingIntoProfile();

        PackageManager pm = mContext.getPackageManager();
        if (pm.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
            sharingIntentsToPersonal.addAll(sharingIntentsToPersonalIfCameraExists);
        }

        mDevicePolicyManager.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
        // Set up cross profile intent filters so we can resolve these to find out framework's
        // intent forwarder activity as ground truth
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                new IntentFilter(KNOWN_ACTION_TO_PERSONAL),
                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
        mDevicePolicyManager.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT,
                new IntentFilter(KNOWN_ACTION_TO_PROFILE),
                DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT);
    }

    /**
     * Test sharing initiated from the personal side are mainly driven from the host side, see
     * ManagedProfileTest.testDisallowSharingIntoProfileFromPersonal() See javadoc of
     * {@link #DisallowSharingIntoProfileTest} class for the mechanism behind this test.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"testSharingFromPersonalSucceeds"	""	"1: user"	"public void testSharingFromPersonalSucceeds() {
        ResolveInfo toProfileForwarderInfo = getIntentForwarder(
                new Intent(KNOWN_ACTION_TO_PROFILE));
        assertCrossProfileIntentsResolvability(sharingIntentsToProfile, toProfileForwarderInfo,
                /* expectForwardable */ true);
    }

    /**
     * Test sharing initiated from the profile side i.e. user tries to pick up personal data within
     * a work app. See javadoc of {@link #DisallowSharingIntoProfileTest} class for the mechanism
     * behind this test.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.DisallowSharingIntoProfileTest"	"testDisableSharingIntoProfile"	""	"1: user"	"public void testDisableSharingIntoProfile() throws Exception {
        setSharingEnabled(false);
    }

    private void setSharingEnabled(boolean enabled) throws InterruptedException {
        final CountDownLatch latch = new CountDownLatch(1);
        BroadcastReceiver receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                latch.countDown();
            }
        };
        IntentFilter filter = new IntentFilter();
        filter.addAction(DevicePolicyManager.ACTION_DATA_SHARING_RESTRICTION_APPLIED);
        mContext.registerReceiver(receiver, filter);
        try {
            if (enabled) {
                mDevicePolicyManager.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE);
            } else {
                mDevicePolicyManager.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                        UserManager.DISALLOW_SHARE_INTO_MANAGED_PROFILE);
            }
            // Wait for the restriction to apply
            assertTrue(""Restriction not applied after 60 seconds"", latch.await(60, SECONDS));
        } finally {
            mContext.unregisterReceiver(receiver);
        }
    }

    private void assertCrossProfileIntentsResolvability(List<Intent> intents,
            ResolveInfo expectedForwarder, boolean expectForwardable) {
        for (Intent intent : intents) {
            List<ResolveInfo> resolveInfoList = mContext.getPackageManager().queryIntentActivities(
                    intent,
                    PackageManager.MATCH_DEFAULT_ONLY);
            if (expectForwardable) {
                assertTrue(""Expect "" + intent + "" to be forwardable, but resolve list""
                        + "" does not contain expected intent forwarder "" + expectedForwarder,
                        containsResolveInfo(resolveInfoList, expectedForwarder));
            } else {
                assertFalse(""Expect "" + intent + "" not to be forwardable, but resolve list ""
                        + ""contains intent forwarder "" + expectedForwarder,
                        containsResolveInfo(resolveInfoList, expectedForwarder));
            }
        }
    }

    private ResolveInfo getIntentForwarder(Intent intent) {
        List<ResolveInfo> result = mContext.getPackageManager().queryIntentActivities(intent,
                PackageManager.MATCH_DEFAULT_ONLY);
        assertEquals(""Expect only one resolve result for "" + intent, 1, result.size());
        return result.get(0);
    }

    private boolean containsResolveInfo(List<ResolveInfo> list, ResolveInfo info) {
        for (ResolveInfo entry : list) {
            if (entry.activityInfo.packageName.equals(info.activityInfo.packageName)
                    && entry.activityInfo.name.equals(info.activityInfo.name)) {
                return true;
            }
        }
        return false;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.WifiTest"	"isWifiEnabled"	""	"2: system user"	"public void test/*
 *.
 */

package com.android.cts.managedprofile;

import static com.android.compatibility.common.util.WifiConfigCreator.SECURITY_TYPE_NONE;

import android.app.admin.DevicePolicyManager;
import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.SystemClock;
import android.test.AndroidTestCase;

import com.android.compatibility.common.util.SystemUtil;
import com.android.compatibility.common.util.WifiConfigCreator;

import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Driven by the host-side test: com.android.cts.devicepolicy.ManagedProfileTest
 *
 * Each of these tests can run independently but have side-effects. The side-effects are used as
 * building blocks to test various cleanup routines, for example that networks belonging to one
 * user are deleted
 */
public class WifiTest extends AndroidTestCase {
    private static final String TAG = WifiTest.class.getSimpleName();

    // Unique SSID to use for this test (max SSID length is 32)
    private static final String NETWORK_SSID = ""com.android.cts.xwde7ktvh8rmjuhr"";

    // Time duration to allow before assuming that a WiFi operation failed and ceasing to wait.
    private static final long UPDATE_TIMEOUT_MS = TimeUnit.MINUTES.toMillis(5);
    private static final long UPDATE_INTERVAL_MS = TimeUnit.SECONDS.toMillis(1);

    private WifiConfigCreator mWifiConfigCreator;

    // Shared WifiManager instance.
    private WifiManager mWifiManager;

    @Override
    public void setUp() throws Exception {
        super.setUp();
        mWifiConfigCreator = new WifiConfigCreator(getContext());
        mWifiManager = (WifiManager) getContext().getSystemService(Context.WIFI_SERVICE);
        if (!mWifiManager.isWifiEnabled()) {
            SystemUtil.runShellCommand(""svc wifi enable"");
            awaitWifiEnabledState(true);
        }
    }

    /**
     * Add a network through the WifiManager API. Verifies that the network was actually added.
     *
     * <p>Side effects:
     * <ul>
     *   <li>Network with SSID {@link WifiTest#NETWORK_SSID} is created.</li>
     * </ul>
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WifiTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.WifiTest"	"testCannotGetWifiMacAddress"	""	"1: system"	"public void testCannotGetWifiMacAddress() {
        DevicePolicyManager dpm = getContext().getSystemService(DevicePolicyManager.class);
        try {
            dpm.getWifiMacAddress(BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT);
            fail(""Managed Profile owner shouldn't be able to get the MAC address"");
        } catch (SecurityException expected) {

        }
    }

    /**
     * Block until a network configuration with a certain SSID either exists or ceases to.
     * Wait for up to {@link WifiTest#UPDATE_TIMEOUT_MS} milliseconds, in increments of
     * {@link WifiTest#UPDATE_INTERVAL_MS}.
     */
    private boolean awaitNetworkState(String ssid, boolean exists) {
        for (int probes = 0; probes * UPDATE_INTERVAL_MS <= UPDATE_TIMEOUT_MS; probes++) {
            if (probes != 0) {
                SystemClock.sleep(UPDATE_INTERVAL_MS);
            }
            if ((getNetworkForSsid(ssid) != null) == exists) {
                return true;
            }
        }
        return false;
    }

    /**
     * Block until {@link WifiManager#isWifiEnabled()} returns {@param enabled}. Wait for up to
     * {@link WifiTest#UPDATE_TIMEOUT_MS} milliseconds, in increments of
     * {@link WifiTest#UPDATE_INTERVAL_MS}.
     */
    private void awaitWifiEnabledState(boolean enabled) throws RuntimeException {
        for (int probes = 0; probes * UPDATE_INTERVAL_MS <= UPDATE_TIMEOUT_MS; probes++) {
            if (probes != 0) {
                SystemClock.sleep(UPDATE_INTERVAL_MS);
            }
            if (mWifiManager.isWifiEnabled() == enabled) {
                return;
            }
        }
        throw new RuntimeException(""Waited too long for wifi enabled state = "" + enabled);
    }

    /**
     * Internal method to find an existing {@link WifiConfiguration} with the given SSID.
     *
     * @return A {@link WifiConfiguration} matching the specification, or {@code null} if no such
     *         configuration exists.
     */
    private WifiConfiguration getNetworkForSsid(String ssid) {
        if (!ssid.startsWith(""\"""")) {
            ssid = '""' + ssid + '""';
        }
        final List<WifiConfiguration> configs = mWifiManager.getConfiguredNetworks();
        if (configs != null) {
            for (WifiConfiguration config : configs) {
                if (ssid.equals(config.SSID)) {
                    return config;
                }
            }
        }
        return null;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WifiTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testResetPasswordBeforeUnlock"	""	"2: system user"	"public void testResetPasswordBeforeUnlock() {
        UserManager um = mContext.getSystemService(UserManager.class);
        assertFalse(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, PASSWORD1,
                token, 0));

        mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                DevicePolicyManager.PASSWORD_QUALITY_NUMERIC);
        mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 6);
        try {
            mDevicePolicyManager.isActivePasswordSufficient();
            fail(""Did not throw expected exception."");
        } catch (IllegalStateException expected) {}
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ResetPasswordWithTokenTest"	"testClearPasswordBeforeUnlock"	""	"2: system user"	"public void testClearPasswordBeforeUnlock() {
        UserManager um = mContext.getSystemService(UserManager.class);
        assertFalse(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isResetPasswordTokenActive(ADMIN_RECEIVER_COMPONENT));
        assertTrue(mDevicePolicyManager.resetPasswordWithToken(ADMIN_RECEIVER_COMPONENT, null,
                token, 0));

        // When password is cleared, the system should automatically unlock the user.
        final BlockingBroadcastReceiver receiver = new BlockingBroadcastReceiver(mContext,
                Intent.ACTION_USER_UNLOCKED);
        receiver.register();
        try {
            // Give the broadcast long enough time, as unlocking user could be slow.
            assertNotNull(receiver.awaitForBroadcast(90_000));
        } finally {
            receiver.unregisterQuietly();
        }
        assertTrue(um.isUserUnlocked());
        assertTrue(mDevicePolicyManager.isActivePasswordSufficient());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ResetPasswordWithTokenTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ActivePasswordSufficientForDeviceTest"	"testActivePsswordSufficientForDevice_UnifiedPassword_BothPolicies"	""	"2: system user"	"public void testActivePsswordSufficientForDevice_UnifiedPassword_BothPolicies() {
        changeUserCredential(""1234"", null, USER_SYSTEM);
        try {
            mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                    PASSWORD_QUALITY_ALPHANUMERIC);
            mDevicePolicyManager.setPasswordMinimumLength(ADMIN_RECEIVER_COMPONENT, 4);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_LOW);

            assertFalse(mDevicePolicyManager.isActivePasswordSufficient());
            assertTrue(mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());
        } finally {
            mDevicePolicyManager.setPasswordQuality(ADMIN_RECEIVER_COMPONENT,
                    PASSWORD_QUALITY_UNSPECIFIED);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
            changeUserCredential(null, ""1234"", USER_SYSTEM);
        }
    }

    //TODO: reinstate test once LockSettingsShellCommand allows setting password for profiles
    // that have unified challenge b/176230819
    private void toTestActivePsswordSufficientForDevice_SeparatePassword_BothPolicies() {
        final int myUserId = UserHandle.getUserId(Process.myUid());
        changeUserCredential(""1234"", null, USER_SYSTEM);
        changeUserCredential(""asdf12"", ""1234"", myUserId); // This currently fails
        try {
            mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_LOW);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_HIGH);

            assertTrue(mDevicePolicyManager.isActivePasswordSufficient());
            assertFalse(
                    mParentDevicePolicyManager.isActivePasswordSufficientForDeviceRequirement());
        } finally {
            mDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
            mParentDevicePolicyManager.setRequiredPasswordComplexity(PASSWORD_COMPLEXITY_NONE);
            changeUserCredential(null, ""1234"", USER_SYSTEM);
        }
    }

    private void changeUserCredential(String newCredential, String oldCredential, int userId) {
        final String oldCredentialArgument = (oldCredential == null || oldCredential.isEmpty()) ? """"
                : (""--old "" + oldCredential);
        if (newCredential != null && !newCredential.isEmpty()) {
            String commandOutput = SystemUtil.runShellCommand(String.format(
                    ""cmd lock_settings set-password --user %d %s %s"", userId, oldCredentialArgument,
                    newCredential));
            if (!commandOutput.startsWith(""Password set to"")) {
                fail(""Failed to set user credential: "" + commandOutput);
            }
        } else {
            String commandOutput = SystemUtil.runShellCommand(String.format(
                    ""cmd lock_settings clear --user %d %s"", userId, oldCredentialArgument));
            if (!commandOutput.startsWith(""Lock credential cleared"")) {
                fail(""Failed to clear user credential: "" + commandOutput);
            }
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ActivePasswordSufficientForDeviceTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.PrimaryUserTest"	"PrimaryUserTest"	""	"1: user"	"public void test/*
 *.
 */

package com.android.cts.managedprofile;

import android.app.admin.DevicePolicyManager;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.test.ActivityInstrumentationTestCase2;

import androidx.test.InstrumentationRegistry;

/**
 * Test for {@link DevicePolicyManager#addCrossProfileIntentFilter} API, for
 * {@code DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT}.
 *
 * Note that it expects that there is an activity responding to {@code PrimaryUserActivity.ACTION}
 * in the primary profile, one to {@code ManagedProfileActivity.ACTION} in the secondary profile,
 * and one to {@code AllUsersActivity.ACTION} in both profiles.
 *
 * Note that the {code DevicePolicyManager#clearCrossProfileIntentFilters} as well as more complex
 * test scenarios can be found in {@link ManagedProfileTest}.
 */
public class PrimaryUserTest extends ActivityInstrumentationTestCase2<TestActivity> {

    private PackageManager mPackageManager;

    public PrimaryUserTest() {
        super(TestActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        // As the way to access Instrumentation is changed in the new runner, we need to inject it
        // manually into ActivityInstrumentationTestCase2. ActivityInstrumentationTestCase2 will
        // be marked as deprecated and replaced with ActivityTestRule.
        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
        mPackageManager = getActivity().getPackageManager();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.PrimaryUserTest"	"testAddCrossProfileIntentFilter_primary"	""	"1: user"	"public void testAddCrossProfileIntentFilter_primary() {
        assertEquals(1, mPackageManager.queryIntentActivities(
                new Intent(PrimaryUserActivity.ACTION), /* flags = */ 0).size());
        getActivity().startActivity(PrimaryUserActivity.ACTION);
        assertTrue(getActivity().checkActivityStarted());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.PrimaryUserTest"	"testAddCrossProfileIntentFilter_all"	""	"1: user"	"public void testAddCrossProfileIntentFilter_all() {
        assertEquals(2, mPackageManager.queryIntentActivities(
                new Intent(AllUsersActivity.ACTION), /* flags = */ 0).size());

        // If we used startActivity(), the user would have a disambiguation dialog presented which
        // requires human intervention, so we won't be testing like that
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.WipeDataNotificationTest"	"testWipeDataWithoutReasonVerification"	""	"2: system user"	"public void testWipeDataWithoutReasonVerification() throws Exception {
        int profileId = getProfileId();
        assertTrue(""Invalid profileId"", profileId > 0);

        CountDownLatch notificationLatch = initWipeNotificationLatch("""", """");
        sendWipeProfileBroadcast(WipeDataReceiver.ACTION_WIPE_DATA_WITHOUT_REASON, profileId);

        assertFalse(""Wipe notification found"",
                notificationLatch.await(NOTIF_TIMEOUT_SECONDS, TimeUnit.SECONDS));
        NotificationListener.getInstance().clearListeners();
    }

    private int getProfileId() {
        int profileId = -1;
        final Bundle testArguments = InstrumentationRegistry.getArguments();
        if (testArguments.containsKey(""profileId"")) {
            profileId = Integer.parseInt(testArguments.getString(""profileId""));
        }
        return profileId;
    }

    private CountDownLatch initWipeNotificationLatch(@NonNull String notificationTitle,
            @NonNull String notificationText) {
        CountDownLatch notificationCounterLatch = new CountDownLatch(1);
        NotificationListener.getInstance().addListener((notification) -> {
            if (notification.getNotification().getChannelId().equals(
                    SystemNotificationChannels.DEVICE_ADMIN)) {
                assertEquals(""Wipe notification title not found"", notificationTitle,
                        notification.getNotification().extras.getString(Notification.EXTRA_TITLE));
                // do not check reason text if param is empty == ignore notif. text
                if (!TextUtils.isEmpty(notificationText)) {
                    assertEquals(""Wipe notification content not found"", notificationText,
                            notification.getNotification().extras.getString(
                                    Notification.EXTRA_TEXT));
                }
                notificationCounterLatch.countDown();
            }
        });
        return notificationCounterLatch;
    }

    private void sendWipeProfileBroadcast(String action, int profileId) throws Exception {
        final String cmd = ""am broadcast --receiver-foreground --user "" + profileId
                + "" -a "" + action
                + "" com.android.cts.managedprofile/.WipeDataReceiver"";
        SystemUtil.runShellCommand(cmd);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/WipeDataNotificationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.PrimaryUserAdminHelper"	"testClearDeviceAdmin"	""	"1: user"	"public void testClearDeviceAdmin() throws Exception {
        ComponentName cn = PrimaryUserDeviceAdmin.ADMIN_RECEIVER_COMPONENT;
        if (mDpm.isAdminActive(cn)) {
            mDpm.removeActiveAdmin(cn);
            // Wait until device admin is not active (with 2 minutes timeout).
            for (int i = 0; i < 2 * 60 && mDpm.isAdminActive(cn); i++) {
                Thread.sleep(1000);  // 1 second.
            }
        }
        assertFalse(""Clear device admin failed"", mDpm.isAdminActive(cn));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PrimaryUserAdminHelper.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testNfc"	""	"1: system"	"public void testNfc() {
        if (mPackageManager.hasSystemFeature(PackageManager.FEATURE_NFC)) {
            assertNotNull(mPackageManager.resolveActivity(
                    new Intent(Settings.ACTION_NFC_SETTINGS), 0 /* flags */));
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"SettingsIntentsTest"	""	"1: apps"	"public void test/*
 *.
 */
package com.android.cts.managedprofile;

import android.content.Intent;
import android.content.pm.PackageManager;
import android.test.ActivityInstrumentationTestCase2;
import android.provider.Settings;


/**
 * Tests that make sure that some core application intents as described in Compatibility Definition
 * Document are handled within a managed profile.
 * Note that OEMs can replace the Settings apps, so we we can at most check if the intent resolves.
 */
public class SettingsIntentsTest extends ActivityInstrumentationTestCase2<TestActivity> {

    private PackageManager mPackageManager;

    public SettingsIntentsTest() {
        super(TestActivity.class);
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mPackageManager = getActivity().getPackageManager();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.SettingsIntentsTest"	"testApps"	""	"1: apps"	"public void testApps() {
        assertNotNull(mPackageManager.resolveActivity(
                new Intent(Settings.ACTION_APPLICATION_SETTINGS), 0 /* flags */));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/SettingsIntentsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.NotificationListenerTest"	"testSetAndGetPermittedCrossProfileNotificationListeners"	""	"1: user"	"public void testSetAndGetPermittedCrossProfileNotificationListeners() {
        List<String> packageList = ImmutableList.of(""package1"", ""package2"");

        mDpm.setPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT, packageList);
        List<String> actualPackageList = mDpm.getPermittedCrossProfileNotificationListeners(
                BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPackageList).isEqualTo(packageList);
    }

    private void cancelProfileNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start --user "" + mProfileUserId + "" -a CANCEL_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void cancelPersonalNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start -a CANCEL_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void sendProfileNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start --user "" + mProfileUserId + "" -a POST_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void sendPersonalNotification() throws IOException {
        mDevice.executeShellCommand(
                ""am start -a POST_NOTIFICATION -n ""
                + SENDER_COMPONENT);
    }

    private void toggleNotificationListener(boolean enable) throws Exception {
        String testListener = new ComponentName(
                mContext, CrossProfileNotificationListenerService.class).flattenToString();
        mDevice.executeShellCommand(""cmd notification ""
                + (enable ?  ""allow_listener "" : ""disallow_listener "")
                + testListener);
        Log.i(TAG, ""Toggled notification listener state"" + testListener + "" to state "" + enable);
        if (enable) {
            assertThat(mReceiver.waitForListenerConnected()).isTrue();
        }
    }

    private int getParam(Bundle arguments, String key) throws Exception {
        String serial = arguments.getString(key);
        if (serial == null) {
            throw new IllegalArgumentException(""Missing argument "" + key);
        }
        return Integer.parseInt(serial);
    }

    static class LocalBroadcastReceiver extends BroadcastReceiver {

        private static final int TIMEOUT_SECONDS = 10;

        private CountDownLatch mNotificationPostedLatch = new CountDownLatch(1);
        private CountDownLatch mNotificationRemovedLatch = new CountDownLatch(1);
        private CountDownLatch mListenerConnectedLatch = new CountDownLatch(1);

        public void reset() {
            mNotificationPostedLatch = new CountDownLatch(1);
            mNotificationRemovedLatch = new CountDownLatch(1);
            mListenerConnectedLatch = new CountDownLatch(1);
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            Log.i(TAG, ""onReceive("" + intent + "")"");
            if (ACTION_NOTIFICATION_POSTED.equals(intent.getAction())) {
                mNotificationPostedLatch.countDown();
            } else if (ACTION_NOTIFICATION_REMOVED.equals(intent.getAction())) {
                mNotificationRemovedLatch.countDown();
            } else if (ACTION_LISTENER_CONNECTED.equals(intent.getAction())) {
                mListenerConnectedLatch.countDown();
            } else {
                Log.e(TAG, ""Received broadcast for unknown action: "" + intent.getAction());
            }
        }

        public boolean waitForNotificationPostedReceived() throws InterruptedException {
            return mNotificationPostedLatch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        }

        public boolean waitForNotificationRemovedReceived() throws InterruptedException {
            return mNotificationRemovedLatch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        }

        public boolean waitForListenerConnected() throws InterruptedException {
            return mListenerConnectedLatch.await(TIMEOUT_SECONDS, TimeUnit.SECONDS);
        }
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/NotificationListenerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CameraPolicyTest"	"testEnableCameraInManagedProfile"	""	"3: system user camera"	"public void testEnableCameraInManagedProfile() throws Exception {
        mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false);
        assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent));
        assertFalse(mDevicePolicyManager.getCameraDisabled(null));
        checkCanOpenCamera(true);
    }


    /**
     * Beginning with Android 7.0, the camera restriction policy isn't kept in the
     * system property(""sys.secpolicy.camera.off_<userId>"") anymore, CameraService
     * now checks if camera is disabled via AppOpsService.
     *
     * The propagation of camera retriction policy from DevicePolicyManagerService
     * to UserManagerService and then finally to AppOpsService is NOT synchronous,
     * so here #blockUntilOpenCamera is called many times until policy is enforced
     * or timed out.
     *
     * @see android.app.AppOpsManager#checkOp(String, int, String)
     * @see android.app.AppOpsManager.OnOpChangedListener
     */
    private void checkCanOpenCamera(boolean canOpen) throws Exception {
        int retries = 10;
        boolean successToOpen = !canOpen;
        while (successToOpen != canOpen && retries > 0) {
            retries--;
            Thread.sleep(500);
            successToOpen = CameraUtils
                    .blockUntilOpenCamera(mCameraManager, mBackgroundHandler);
        }
        assertEquals(String.format(""Timed out waiting the value to change to %b (actual=%b)"",
                    canOpen, successToOpen), canOpen, successToOpen);
    }

    /**
     * Starts a background thread and its {@link Handler}.
     */
    private void startBackgroundThread() {
        mBackgroundThread = new HandlerThread(""CameraBackground"");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    /**
     * Stops the background thread and its {@link Handler}.
     */
    private void stopBackgroundThread() {
        mBackgroundThread.quitSafely();
        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CameraPolicyTest"	"testDisableCameraInManagedProfile"	""	"1: camera"	"public void testDisableCameraInManagedProfile() throws Exception {
        mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, true);
        assertTrue(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent));
        assertTrue(mDevicePolicyManager.getCameraDisabled(null));
        checkCanOpenCamera(false);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CameraPolicyTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"assertNoPhotoUri"	""	"2: system direct"	"public void test/*
 *.
 */

package com.android.cts.managedprofile;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.TargetApi;
import android.app.admin.DevicePolicyManager;
import android.content.ContentProviderOperation;
import android.content.ContentResolver;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.os.RemoteException;
import android.provider.ContactsContract;
import android.provider.ContactsContract.CommonDataKinds.Callable;
import android.provider.ContactsContract.CommonDataKinds.Email;
import android.provider.ContactsContract.CommonDataKinds.Phone;
import android.provider.ContactsContract.CommonDataKinds.Photo;
import android.provider.ContactsContract.Contacts;
import android.provider.ContactsContract.Directory;
import android.provider.ContactsContract.PhoneLookup;
import android.provider.ContactsContract.RawContacts;
import android.test.AndroidTestCase;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;

public class ContactsTest extends AndroidTestCase {

    private static final String TAG = ""ContactsTest"";

    private static final String TEST_ACCOUNT_NAME = AccountAuthenticator.ACCOUNT_NAME;
    private static final String TEST_ACCOUNT_TYPE = AccountAuthenticator.ACCOUNT_TYPE;
    // details of a sample primary contact
    private static final String PRIMARY_CONTACT_DISPLAY_NAME = ""Primary"";
    private static final String PRIMARY_CONTACT_PHONE = ""00000001"";
    private static final String PRIMARY_CONTACT_EMAIL = ""one@primary.com"";
    private static final String PRIMARY_CONTACT_SIP = ""foo@sip"";

    // details of a sample managed contact
    private static final String MANAGED_CONTACT_DISPLAY_NAME = ""Managed"";
    private static final String MANAGED_CONTACT_PHONE = ""6891999"";
    private static final String MANAGED_CONTACT_EMAIL = ""one@managed.com"";
    private static final String MANAGED_CONTACT_SIP = ""bar@sip"";

    // details of a sample primary and a sample managed contact, with the same phone & email
    private static final String PRIMARY_CONTACT_DISPLAY_NAME_2 = ""PrimaryShared"";
    private static final String MANAGED_CONTACT_DISPLAY_NAME_2 = ""ManagedShared"";
    private static final String SHARED_CONTACT_PHONE = ""00000002"";
    private static final String SHARED_CONTACT_EMAIL = ""shared@shared.com"";
    private static final String SHARED_CONTACT_SIP = ""baz@sip"";

    // Directory display name
    private static final String PRIMARY_DIRECTORY_NAME = ""PrimaryDirectory"";
    private static final String MANAGED_DIRECTORY_NAME = ""ManagedDirectory"";
    private static final String PRIMARY_DIRECTORY_CONTACT_NAME = ""PrimaryDirectoryContact"";
    private static final String MANAGED_DIRECTORY_CONTACT_NAME = ""ManagedDirectoryContact"";

    // Directory Authority
    private static final String DIRECTORY_PROVIDER_AUTHORITY = ""com.android.cts.contact.directory.provider"";


    // Retry directory query so we can make sure directory info in cp2 is updated
    private static final int MAX_RETRY_DIRECTORY_QUERY = 10;
    private static final int RETRY_DIRECTORY_QUERY_INTERVAL = 1000; // 1s

    private DevicePolicyManager mDevicePolicyManager;
    private ContentResolver mResolver;

    private class ContactInfo { // Not static to access outer world.

        String contactId;
        String displayName;
        String photoUri;
        String photoThumbnailUri;
        String photoId;

        public ContactInfo(String contactId, String displayName, String photoUri,
                String photoThumbnailUri, String photoId) {
            this.contactId = contactId;
            this.displayName = displayName;
            this.photoUri = photoUri;
            this.photoThumbnailUri = photoThumbnailUri;
            this.photoId = photoId;
        }

        private void assertNoPhotoUri() {
            assertNull(photoUri);
            assertNull(photoThumbnailUri);
        }

        private void assertPhotoUrisReadable() {
            assertPhotoUriReadable(photoUri);
            assertPhotoUriReadable(photoThumbnailUri);
        }

        private void assertThumbnailUri(int resId) {
            Resources resources = mContext.getResources();
            assertNotNull(this.photoThumbnailUri);
            byte[] actualPhotoThumbnail = getByteFromStreamForTest(
                    getInputStreamFromUriForTest(this.photoThumbnailUri));
            byte[] expectedPhotoThumbnail = getByteFromStreamForTest(
                    resources.openRawResource(resId));
            assertTrue(Arrays.equals(expectedPhotoThumbnail, actualPhotoThumbnail));
        }

        private void assertPhotoUri(int resId) {
            Resources resources = mContext.getResources();
            assertNotNull(this.photoUri);
            byte[] actualPhoto = getByteFromStreamForTest(
                    getInputStreamFromUriForTest(this.photoUri));
            byte[] expectedPhoto = getByteFromStreamForTest(
                    resources.openRawResource(resId));
            assertTrue(Arrays.equals(expectedPhoto, actualPhoto));
        }

        private boolean hasPhotoId() {
            return photoId != null && Long.parseLong(photoId) > 0;
        }
    }

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mResolver = getContext().getContentResolver();
        mDevicePolicyManager = (DevicePolicyManager) mContext
                .getSystemService(Context.DEVICE_POLICY_SERVICE);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneLookup_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo =
                getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,
                        Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId != 0) { // if directoryId == 0, it means it can't access managed directory
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,
                            directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailLookup_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo =
                getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,
                        Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId != 0) { // if directoryId == 0, it means it can't access managed directory
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,
                            directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testGetDirectoryListInPrimaryProfile"	""	"2: direct visible"	"public void testGetDirectoryListInPrimaryProfile() {
        assertFalse(isManagedProfile());
        // As directory content in CP2 may not be updated, we will try 10 times to see if it's
        // updated
        for (int i = 0; i < MAX_RETRY_DIRECTORY_QUERY; i++) {
            final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,
                    new String[]{
                            Directory._ID,
                            Directory.DISPLAY_NAME
                    }, null, null, null);

            boolean hasPrimaryDefault = false;
            boolean hasPrimaryInvisible = false;
            boolean hasManagedDefault = false;
            boolean hasManagedInvisible = false;
            boolean hasPrimaryDirectory = false;
            boolean hasManagedDirectory = false;

            try {
                while(cursor.moveToNext()) {
                    final long directoryId = cursor.getLong(0);
                    if (directoryId == Directory.DEFAULT) {
                        hasPrimaryDefault = true;
                    } else if (directoryId == Directory.LOCAL_INVISIBLE) {
                        hasPrimaryInvisible = true;
                    } else if (directoryId == Directory.ENTERPRISE_DEFAULT) {
                        hasManagedDefault = true;
                    } else if (directoryId == Directory.ENTERPRISE_LOCAL_INVISIBLE) {
                        hasManagedInvisible = true;
                    } else {
                        final String displayName = cursor.getString(1);
                        if (Directory.isEnterpriseDirectoryId(directoryId)
                                && displayName.equals(MANAGED_DIRECTORY_NAME)) {
                            hasManagedDirectory = true;
                        }
                        if (!Directory.isEnterpriseDirectoryId(directoryId)
                                && displayName.equals(PRIMARY_DIRECTORY_NAME)) {
                            hasPrimaryDirectory = true;
                        }
                    }
                }
                if (i + 1 == MAX_RETRY_DIRECTORY_QUERY) {
                    DatabaseUtils.dumpCursor(cursor);
                    assertTrue(hasPrimaryDefault);
                    assertTrue(hasPrimaryInvisible);
                    assertTrue(hasManagedDefault);
                    assertTrue(hasManagedInvisible);
                    assertTrue(hasPrimaryDirectory);
                    assertTrue(hasManagedDirectory);
                }
            } finally {
                cursor.close();
            }
            if (hasPrimaryDefault && hasPrimaryInvisible && hasManagedDefault
                    && hasManagedInvisible && hasPrimaryDirectory && hasManagedDirectory) {
                // Success
                return;
            } else {
                // Failed, sleep and retry
                try {
                    Log.i(TAG, ""Failed "" + (i+1) + "" times, retry"");
                    Thread.sleep(RETRY_DIRECTORY_QUERY_INTERVAL);
                } catch (InterruptedException e) {}
            }
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseEmailLookupUriInDirectory(PRIMARY_CONTACT_EMAIL,
                Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getPrimaryRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailLookupUriInDirectory(PRIMARY_CONTACT_EMAIL,
                directoryId);
        assertPrimaryDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailLookup_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,
                Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailLookupUriInDirectory(MANAGED_CONTACT_EMAIL,
                directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneLookupUriInDirectory(PRIMARY_CONTACT_PHONE,
                Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getPrimaryRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterprisePhoneLookupUriInDirectory(PRIMARY_CONTACT_PHONE,
                directoryId);
        assertPrimaryDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneLookup_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,
                Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterprisePhoneLookupUriInDirectory(MANAGED_CONTACT_PHONE,
                directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseCallableFilter_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        PRIMARY_CONTACT_PHONE, Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        PRIMARY_CONTACT_PHONE, getPrimaryRemoteDirectoryId());
        assertPrimaryDirectoryContact(directoryContactInfo);

    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEnterpriseCallableFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testManagedProfileEnterpriseCallableFilter_canAccessManagedDirectories() {
        assertTrue(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, Directory.DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, getEnterpriseRemoteDirectoryIdInManagedProfile());
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseCallableFilter_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseCallableFilter_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseCallableFilterUriInDirectory(
                MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId == 0L) {
            // if no enterprise directory id is found, the test succeeds.
            return;
        } else {
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterpriseCallableFilterUriInDirectory(MANAGED_CONTACT_PHONE,
                            directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailFilter_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                        PRIMARY_CONTACT_EMAIL, Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                        PRIMARY_CONTACT_EMAIL, getPrimaryRemoteDirectoryId());
        assertPrimaryDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testEnterpriseProfileEnterpriseEmailFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testEnterpriseProfileEnterpriseEmailFilter_canAccessManagedDirectories() {
        assertTrue(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                        MANAGED_CONTACT_EMAIL, Directory.DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                        MANAGED_CONTACT_EMAIL, getEnterpriseRemoteDirectoryIdInManagedProfile());
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailFilter_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                MANAGED_CONTACT_EMAIL, Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                MANAGED_CONTACT_EMAIL, directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseEmailFilter_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo =
                getContactInfoFromEnterpriseEmailFilterUriInDirectory(MANAGED_CONTACT_EMAIL,
                        Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId == 0L) {
            // if no enterprise directory id is found, the test succeeds.
            return;
        } else {
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterpriseEmailFilterUriInDirectory(MANAGED_CONTACT_EMAIL,
                            directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseContactFilter_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        PRIMARY_CONTACT_DISPLAY_NAME, Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        PRIMARY_DIRECTORY_CONTACT_NAME, getPrimaryRemoteDirectoryId());
        assertPrimaryDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEnterpriseContactFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testManagedProfileEnterpriseContactFilter_canAccessManagedDirectories() {
        assertTrue(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        MANAGED_CONTACT_DISPLAY_NAME, Directory.DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        MANAGED_DIRECTORY_CONTACT_NAME, getEnterpriseRemoteDirectoryIdInManagedProfile());
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseContactFilter_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        MANAGED_CONTACT_DISPLAY_NAME, Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                        MANAGED_CONTACT_DISPLAY_NAME, directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseContactFilter_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterpriseContactFilterUriInDirectory(
                        MANAGED_CONTACT_DISPLAY_NAME, Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId == 0L) {
            // if no enterprise directory id is found, the test succeeds.
            return;
        } else {
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterpriseEmailFilterUriInDirectory(
                            MANAGED_CONTACT_DISPLAY_NAME, directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneFilter_canAccessPrimaryDirectories() {
        assertFalse(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                        PRIMARY_CONTACT_PHONE, Directory.DEFAULT);
        assertPrimaryLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                        PRIMARY_CONTACT_PHONE, getPrimaryRemoteDirectoryId());
        assertPrimaryDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testManagedProfileEnterprisePhoneFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testManagedProfileEnterprisePhoneFilter_canAccessManagedDirectories() {
        assertTrue(isManagedProfile());
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, Directory.DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                        MANAGED_CONTACT_PHONE, getEnterpriseRemoteDirectoryIdInManagedProfile());
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneFilter_canAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);
        assertManagedLocalContact(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryId();
        final ContactInfo directoryContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                MANAGED_CONTACT_PHONE, directoryId);
        assertManagedDirectoryContact(directoryContactInfo);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterprisePhoneFilter_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        // local directory
        final ContactInfo defaultContactInfo
                = getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                MANAGED_CONTACT_PHONE, Directory.ENTERPRISE_DEFAULT);
        assertNull(defaultContactInfo);

        // remote directory
        final long directoryId = getEnterpriseRemoteDirectoryIdSliently();
        if (directoryId == 0L) {
            // if no enterprise directory id is found, the test succeeds.
            return;
        } else {
            final ContactInfo directoryContactInfo =
                    getContactInfoFromEnterprisePhoneFilterUriInDirectory(
                            MANAGED_CONTACT_PHONE, directoryId);
            assertNull(directoryContactInfo);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories"	""	"1: direct"	"public void testPrimaryProfileEnterpriseDirectories_canNotAccessManagedDirectories() {
        assertFalse(isManagedProfile());

        final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,
                new String[]{Directory._ID}, null, null, null);
        try {
            while (cursor.moveToNext()) {
                final long directoryId = cursor.getLong(0);
                if (Directory.isEnterpriseDirectoryId(directoryId)) {
                    fail(""found enterprise directories"");
                }
            }
        } finally {
            cursor.close();
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testFilterUriWhenDirectoryParamMissing"	""	"1: direct"	"public void testFilterUriWhenDirectoryParamMissing() {
        assertFailWhenDirectoryParamMissing(Phone.ENTERPRISE_CONTENT_FILTER_URI);
        assertFailWhenDirectoryParamMissing(Email.ENTERPRISE_CONTENT_FILTER_URI);
        assertFailWhenDirectoryParamMissing(Contacts.ENTERPRISE_CONTENT_FILTER_URI);
        assertFailWhenDirectoryParamMissing(Callable.ENTERPRISE_CONTENT_FILTER_URI);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ContactsTest"	"testQuickContact"	""	"1: direct"	"public void testQuickContact() throws Exception {
        showQuickContactInternal(null);
        showQuickContactInternal(Directory.ENTERPRISE_DEFAULT);
        showQuickContactInternal(getEnterpriseRemoteDirectoryId());
    }

    private void showQuickContactInternal(Long directoryId) throws Exception {
        final Uri phoneLookupUri =
                Uri.withAppendedPath(
                        PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI, MANAGED_CONTACT_PHONE);
        if (directoryId != null) {
            phoneLookupUri.buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                    String.valueOf(directoryId)).build();
        }
        final Cursor cursor =
                getContext().getContentResolver().query(phoneLookupUri, null, null, null, null);
        try {
            assertTrue(cursor.moveToFirst());
            final long contactId =
                    cursor.getLong(cursor.getColumnIndex(ContactsContract.PhoneLookup._ID));
            final String lookupKey =
                    cursor.getString(
                            cursor.getColumnIndex(ContactsContract.PhoneLookup.LOOKUP_KEY));
            final Uri lookupUri = Contacts.getLookupUri(contactId, lookupKey);
            // TODO: It is better to verify the uri received by quick contacts, but it is difficult
            // to verify it as the quick contacts in managed profile is started. We now just make
            // sure no exception is thrown due to invalid uri (eg: directory id is missing).
            // Also, consider using UiAutomator to verify the activtiy is started.
            ContactsContract.QuickContact.showQuickContact(getContext(), (Rect) null, lookupUri,
                    ContactsContract.QuickContact.MODE_LARGE, null);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    private long getPrimaryRemoteDirectoryId() {
        assertFalse(isManagedProfile());
        return getRemoteDirectoryIdInternal();
    }

    private long getEnterpriseRemoteDirectoryIdInManagedProfile() {
        assertTrue(isManagedProfile());
        return getRemoteDirectoryIdInternal();
    }

    private long getRemoteDirectoryIdInternal() {
        final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,
                new String[]{
                        Directory._ID, Directory.DIRECTORY_AUTHORITY
                }, null, null, null);
        try {
            while (cursor.moveToNext()) {
                final long directoryId = cursor.getLong(0);
                final String directoryAuthority = cursor.getString(1);
                if (!Directory.isEnterpriseDirectoryId(directoryId)
                        && Directory.isRemoteDirectoryId(directoryId)
                        && DIRECTORY_PROVIDER_AUTHORITY.equals(directoryAuthority)) {
                    return directoryId;
                }
            }
        } finally {
            cursor.close();
        }
        fail(""Cannot find primary directory id"");
        return 0;
    }

    private long getEnterpriseRemoteDirectoryId() {
        final long enterpriseDirectoryId = getEnterpriseRemoteDirectoryIdSliently();
        assertNotSame(""Cannot find enterprise directory id"", 0L, enterpriseDirectoryId);
        return enterpriseDirectoryId;
    }

    private long getEnterpriseRemoteDirectoryIdSliently() {
        assertFalse(isManagedProfile());
        final Cursor cursor = mResolver.query(Directory.ENTERPRISE_CONTENT_URI,
                new String[] {
                    Directory._ID, Directory.DIRECTORY_AUTHORITY
                }, null, null, null);
        try {
            while (cursor.moveToNext()) {
                final long directoryId = cursor.getLong(0);
                final String directoryAuthority = cursor.getString(1);
                if (Directory.isEnterpriseDirectoryId(directoryId)
                        && Directory.isRemoteDirectoryId(directoryId)
                        && DIRECTORY_PROVIDER_AUTHORITY.equals(directoryAuthority)) {
                    return directoryId;
                }
            }
        } finally {
            cursor.close();
        }
        return 0;
    }

    private boolean isManagedProfile() {
        String adminPackage = BaseManagedProfileTest.ADMIN_RECEIVER_COMPONENT.getPackageName();
        return mDevicePolicyManager.isProfileOwnerApp(adminPackage);
    }

    private void insertContact(String displayName, String phoneNumber, String email,
            String sipAddress, int photoResId)
            throws RemoteException, OperationApplicationException, NotFoundException, IOException {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
        ops.add(ContentProviderOperation
                .newInsert(ContactsContract.RawContacts.CONTENT_URI)
                .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, TEST_ACCOUNT_TYPE)
                .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, TEST_ACCOUNT_NAME)
                .build());
        ops.add(ContentProviderOperation
                .newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(
                        ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                .withValue(
                        ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
                        displayName)
                .build());
        ops.add(ContentProviderOperation
                .newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(
                        ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER,
                        phoneNumber)
                .withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
                        Phone.TYPE_MOBILE)
                .build());
        ops.add(ContentProviderOperation
                .newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(
                        ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS,
                        email)
                .withValue(ContactsContract.CommonDataKinds.Email.TYPE,
                        Email.TYPE_WORK)
                .build());
        ops.add(ContentProviderOperation
                .newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(
                        ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.SipAddress.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.SipAddress.SIP_ADDRESS,
                        sipAddress)
                .withValue(ContactsContract.CommonDataKinds.SipAddress.TYPE,
                        ContactsContract.CommonDataKinds.SipAddress.TYPE_WORK)
                .build());

        if (photoResId != 0) {
            InputStream phoneInputStream = mContext.getResources().openRawResource(photoResId);
            try {
                byte[] rawPhoto = getByteFromStream(phoneInputStream);
                ops.add(ContentProviderOperation
                        .newInsert(ContactsContract.Data.CONTENT_URI)
                        .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                        .withValue(
                                ContactsContract.Data.MIMETYPE,
                                ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                        .withValue(Photo.PHOTO, rawPhoto)
                        .build());
            } finally {
                phoneInputStream.close();
            }
        }

        mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
    }

    private void assertPrimaryLocalContact(ContactInfo contactInfo) {
        assertNotNull(contactInfo);
        assertEquals(PRIMARY_CONTACT_DISPLAY_NAME, contactInfo.displayName);
        contactInfo.assertNoPhotoUri();
        assertFalse(contactInfo.hasPhotoId());
    }

    private void assertManagedLocalContact(ContactInfo contactInfo) {
        assertNotNull(contactInfo);
        assertEquals(MANAGED_CONTACT_DISPLAY_NAME, contactInfo.displayName);
        contactInfo.assertPhotoUrisReadable();
    }

    private void assertPrimaryDirectoryContact(ContactInfo contactInfo) {
        assertNotNull(contactInfo);
        assertEquals(PRIMARY_DIRECTORY_CONTACT_NAME, contactInfo.displayName);
        contactInfo.assertThumbnailUri(R.raw.primary_thumbnail);
        contactInfo.assertPhotoUri(R.raw.primary_photo);
    }

    private void assertManagedDirectoryContact(ContactInfo contactInfo) {
        assertNotNull(contactInfo);
        assertEquals(MANAGED_DIRECTORY_CONTACT_NAME, contactInfo.displayName);
        contactInfo.assertThumbnailUri(R.raw.managed_thumbnail);
        contactInfo.assertPhotoUri(R.raw.managed_photo);
    }

    private void assertContactInfoEquals(ContactInfo lhs, ContactInfo rhs) {
        if (lhs == null) {
            assertNull(rhs);
        } else {
            assertNotNull(rhs);
            assertEquals(lhs.contactId, rhs.contactId);
            assertEquals(lhs.displayName, rhs.displayName);
            assertEquals(lhs.photoId, rhs.photoId);
            assertEquals(lhs.photoThumbnailUri, rhs.photoThumbnailUri);
            assertEquals(lhs.photoUri, rhs.photoUri);
        }
    }

    private ContactInfo getContactInfoFromPhoneLookupUri(boolean isEnterprise, String phoneNumber) {
        Uri baseUri = (isEnterprise) ? PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI
                : PhoneLookup.CONTENT_FILTER_URI;
        Uri uri = baseUri.buildUpon().appendPath(phoneNumber).build();
        ContactInfo contactInfo = getContactInfoFromUri(uri, PhoneLookup._ID,
                PhoneLookup.DISPLAY_NAME,
                PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);

        ContactInfo contactInfo2 = getContactInfoFromUri(uri, PhoneLookup.CONTACT_ID,
                PhoneLookup.DISPLAY_NAME,
                PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);
        assertContactInfoEquals(contactInfo, contactInfo2);
        return contactInfo;
    }

    private ContactInfo getContactInfoFromEnterprisePhoneLookupUriWithSipAddress(
            boolean isEnterprise, String sipAddress) {
        Uri baseUri = (isEnterprise) ? PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI
                : PhoneLookup.CONTENT_FILTER_URI;
        Uri uri = baseUri.buildUpon().appendPath(sipAddress)
                .appendQueryParameter(PhoneLookup.QUERY_PARAMETER_SIP_ADDRESS, ""1"").build();
        return getContactInfoFromUri(uri, PhoneLookup.CONTACT_ID, PhoneLookup.DISPLAY_NAME,
                PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterprisePhoneLookupUriInDirectory(String phoneNumber,
            long directoryId) {
        Uri uri = PhoneLookup.ENTERPRISE_CONTENT_FILTER_URI.buildUpon().appendPath(phoneNumber)
                .appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, PhoneLookup._ID, PhoneLookup.DISPLAY_NAME,
                PhoneLookup.PHOTO_URI, PhoneLookup.PHOTO_THUMBNAIL_URI, PhoneLookup.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEmailLookupUri(boolean isEnterprise, String email) {
        Uri baseUri = (isEnterprise) ? Email.ENTERPRISE_CONTENT_LOOKUP_URI
                : Email.CONTENT_LOOKUP_URI;
        Uri uri = Uri.withAppendedPath(baseUri, email);
        return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,
                Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterpriseEmailLookupUriInDirectory(String email,
            long directoryId) {
        Uri uri = Email.ENTERPRISE_CONTENT_LOOKUP_URI.buildUpon().appendPath(email)
                .appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,
                Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterpriseCallableFilterUriInDirectory(String filter,
            long directoryId) {
        final Uri uri = Uri.withAppendedPath(Callable.ENTERPRISE_CONTENT_FILTER_URI, filter)
                .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, Callable.CONTACT_ID, Callable.DISPLAY_NAME_PRIMARY,
                Callable.PHOTO_URI, Callable.PHOTO_THUMBNAIL_URI, Callable.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterpriseEmailFilterUriInDirectory(String filter,
            long directoryId) {
        final Uri uri = Uri.withAppendedPath(Email.ENTERPRISE_CONTENT_FILTER_URI, filter)
                .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, Email.CONTACT_ID, Email.DISPLAY_NAME_PRIMARY,
                Email.PHOTO_URI, Email.PHOTO_THUMBNAIL_URI, Email.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterpriseContactFilterUriInDirectory(String filter,
            long directoryId) {
        final Uri uri = Uri.withAppendedPath(Contacts.ENTERPRISE_CONTENT_FILTER_URI, filter)
                .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, Contacts._ID, Contacts.DISPLAY_NAME_PRIMARY,
                Contacts.PHOTO_URI, Contacts.PHOTO_THUMBNAIL_URI, Contacts.PHOTO_ID);
    }

    private ContactInfo getContactInfoFromEnterprisePhoneFilterUriInDirectory(String filter,
            long directoryId) {
        final Uri uri = Uri.withAppendedPath(Phone.ENTERPRISE_CONTENT_FILTER_URI, filter)
                .buildUpon().appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                        String.valueOf(directoryId)).build();
        return getContactInfoFromUri(uri, Phone.CONTACT_ID, Phone.DISPLAY_NAME_PRIMARY,
                Phone.PHOTO_URI, Phone.PHOTO_THUMBNAIL_URI, Phone.PHOTO_ID);
    }


    private ContactInfo getContactInfoFromUri(Uri uri, String idColumn,
            String displayNameColumn, String photoUriColumn, String photoThumbnailColumn,
            String photoIdColumn) {
        Cursor cursor = mResolver.query(uri,
                new String[] {
                        idColumn,
                        displayNameColumn,
                        photoUriColumn,
                        photoIdColumn,
                        photoThumbnailColumn,
                }, null, null, null);
        if (cursor == null) {
            return null;
        }
        try {
            if (cursor.moveToFirst()) {
                return new ContactInfo(
                        cursor.getString(cursor.getColumnIndexOrThrow(idColumn)),
                        cursor.getString(cursor.getColumnIndexOrThrow(displayNameColumn)),
                        cursor.getString(cursor.getColumnIndexOrThrow(photoUriColumn)),
                        cursor.getString(cursor.getColumnIndexOrThrow(photoThumbnailColumn)),
                        cursor.getString(cursor.getColumnIndexOrThrow(photoIdColumn)));
            }
        } finally {
            cursor.close();
        }
        return null;
    }

    private void removeAllTestContactsInProfile() {
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
        ops.add(ContentProviderOperation.newDelete(RawContacts.CONTENT_URI)
                .withSelection(RawContacts.ACCOUNT_TYPE + ""=?"", new String[] {TEST_ACCOUNT_TYPE})
                .build());
        try {
            mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
        } catch (Exception e) {
            // Catch all exceptions to let tearDown() run smoothly
            e.printStackTrace();
        }

        Account account = new Account(TEST_ACCOUNT_NAME, TEST_ACCOUNT_TYPE);
        AccountManager.get(getContext()).removeAccountExplicitly(account);
    }

    private InputStream getInputStreamFromUriForTest(String uriString) {
        try {
            return mResolver.openInputStream(Uri.parse(uriString));
        } catch (FileNotFoundException e) {
            fail(e.getMessage());
            throw new RuntimeException(e);
        }
    }

    private static byte[] getByteFromStreamForTest(InputStream is) {
        assertNotNull(is);
        try (InputStream in = is) {
            return getByteFromStream(in);
        } catch (IOException e) {
            fail(e.getMessage());
            throw new RuntimeException(e);
        }
    }

    private static byte[] getByteFromStream(InputStream is) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        byte[] buf = new byte[1024 * 10];
        int i = 0;
        while ((i = is.read(buf, 0, buf.length)) > 0) {
            outputStream.write(buf, 0, i);
        }
        return outputStream.toByteArray();
    }

    private boolean isEnterpriseContactId(String contactId) {
        return ContactsContract.Contacts.isEnterpriseContactId(Long.valueOf(contactId));
    }

    private void assertPhotoUriReadable(String uri) {
        assertNotNull(uri);
        try (InputStream is = mResolver.openInputStream(Uri.parse(uri))) {
            // Make sure it's readabe.  Don't have to read all content.
            is.read();
        } catch (IOException e) {
            fail(e.getMessage());
            throw new RuntimeException(e);
        }
    }

    private void assertFailWhenDirectoryParamMissing(Uri uri) {
        try {
            mResolver.query(uri, null, null, null, null);
            fail(""IllegalArgumentException is not thrown"");
        } catch (IllegalArgumentException ex) {
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ContactsTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.BluetoothSharingRestrictionTest"	"testOppDisabledWhenRestrictionSet"	""	"2: system user"	"public void testOppDisabledWhenRestrictionSet() throws Exception {
        if (BluetoothAdapter.getDefaultAdapter() == null) {
            // No Bluetooth - nothing to test.
            return;
        }

        // The restriction is active by default for managed profiles.
        assertBluetoothSharingAvailable(mContext, false);

        // Remove the user restriction.
        mDevicePolicyManager.clearUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_BLUETOOTH_SHARING);
        // Bluetooth sharing should become available.
        assertBluetoothSharingAvailable(mContext, true);

        // Add the user restriction back (which is the default state).
        mDevicePolicyManager.addUserRestriction(
                ADMIN_RECEIVER_COMPONENT, UserManager.DISALLOW_BLUETOOTH_SHARING);
        // Bluetooth sharing should be disabled once again.
        assertBluetoothSharingAvailable(mContext, false);
    }

    /** Verifies restriction enforcement. */
    private static void assertRestrictionEnforced(Context context, boolean enforced) {
        final UserManager um = (UserManager) context.getSystemService(Context.USER_SERVICE);
        assertEquals(""Invalid restriction enforcement status"", enforced,
                um.getUserRestrictions().getBoolean(UserManager.DISALLOW_BLUETOOTH_SHARING, false));
    }

    /**
     * Builds an intent to share an image file. If Bluetooth sharing is allowed, it should be
     * handled by {@link #OPP_LAUNCHER_COMPONENT}.
     */
    private static Intent fileSharingIntent() {
        final Intent result = new Intent(Intent.ACTION_SEND);
        final Uri uri = Uri.parse(""content://foo/bar"");
        result.setDataAndType(uri, ""image/*"");
        return result;
    }

    /**
     * Verifies bluetooth sharing availability.
     */
    static void assertBluetoothSharingAvailable(Context context, boolean available)
            throws Exception {
        // Check restriction.
        assertRestrictionEnforced(context, !available);
        // Check component status.
        final int componentEnabledState = available
                ? PackageManager.COMPONENT_ENABLED_STATE_DEFAULT
                : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;
        assertComponentStateAfterTimeout(context, OPP_LAUNCHER_COMPONENT, componentEnabledState);
        // Check whether sharing activity is offered.
        assertHandlerAvailable(context, fileSharingIntent(), OPP_LAUNCHER_COMPONENT, available);
    }

    /** Waits for package state to change to a desired one or fails. */
    private static void assertComponentStateAfterTimeout(Context context, ComponentName component,
            int expectedState)
            throws Exception {
        final long timeout = SystemClock.elapsedRealtime() + COMPONENT_STATE_TIMEOUT_MS;
        int state = -1;
        while (SystemClock.elapsedRealtime() < timeout) {
            state = context.getPackageManager().getComponentEnabledSetting(component);
            if (expectedState == state) {
                // Success
                return;
            }
            Thread.sleep(POLL_TIME_MS);
        }
        TestCase.fail(""The state of "" + component + "" should have been "" + expectedState
                + "", it but was "" + state + "" after timeout."");
    }

    /** Verifies that {@code component} is offered when handling {@code intent}. */
    private static void assertHandlerAvailable(Context context, Intent intent,
            ComponentName component,
            boolean shouldResolve) {
        final List<ResolveInfo> infos =
                context.getPackageManager().queryIntentActivities(intent, 0);
        for (final ResolveInfo info : infos) {
            final ComponentInfo componentInfo =
                    info.activityInfo != null ? info.activityInfo :
                            info.serviceInfo != null ? info.serviceInfo :
                                    info.providerInfo;
            final ComponentName resolvedComponent =
                    new ComponentName(componentInfo.packageName, componentInfo.name);

            if (resolvedComponent.equals(component)) {
                if (shouldResolve) {
                    // Found it, assertion passed.
                    return;
                } else {
                    TestCase.fail(component + "" is available as a handler for "" + intent);
                }
            }
        }
        // If we get to this point, there was no match.
        if (shouldResolve) {
            TestCase.fail(component + "" isn't available as a handler for "" + intent);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/BluetoothSharingRestrictionTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.DevicePolicyManagerParentSupportTest"	"testGetPasswordExpiration_onParent"	""	"1: system"	"public void testGetPasswordExpiration_onParent() {
        if (!mHasSecureLockScreen) {
            return;
        }
        final long passwordExpirationTimeout = 432000000;
        final long currentTime = System.currentTimeMillis();

        mParentDevicePolicyManager.setPasswordExpirationTimeout(
                ADMIN_RECEIVER_COMPONENT, passwordExpirationTimeout);
        final long actualPasswordExpiration =
                mParentDevicePolicyManager.getPasswordExpiration(ADMIN_RECEIVER_COMPONENT);

        assertThat(actualPasswordExpiration).isAtLeast(passwordExpirationTimeout + currentTime);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DevicePolicyManagerParentSupportTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CurrentApiHelperTest"	"testGetPublicApisIncludeMethods"	""	"1: system"	"public void testGetPublicApisIncludeMethods() throws Exception {
        Method publicMethod = mClazz.getMethod(""lockNow"");
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""isProfileOwnerApp"", String.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""resetPassword"", String.class, int.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""hasGrantedPolicy"", ComponentName.class, int.class);
        assertTrue(mPublicApis.contains(publicMethod));
        publicMethod = mClazz.getMethod(""installCaCert"", ComponentName.class, Class.forName(""[B""));
        assertTrue(mPublicApis.contains(publicMethod));
    }

    /**
     * Test: {@link CurrentApiHelper#getPublicApis} excludes private, hidden or {@code @SystemApi}
     * methods.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CurrentApiHelperTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CurrentApiHelperTest"	"testGetPublicApisExcludeMethods"	""	"2: system user"	"public void testGetPublicApisExcludeMethods() throws Exception {
        Method privateMethod = mClazz.getDeclaredMethod(""throwIfParentInstance"", String.class);
        assertFalse(mPublicApis.contains(privateMethod));
        Method hiddenMethod = mClazz.getMethod(""isDeviceProvisioned"");
        assertFalse(mPublicApis.contains(hiddenMethod));
        Method systemMethod = mClazz.getMethod(""getProfileOwnerNameAsUser"", int.class);
        assertFalse(mPublicApis.contains(systemMethod));
    }

    /** Test for {@link CurrentApiHelper#instantiate}. */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CurrentApiHelperTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"dropShellPermissionIdentity"	""	"2: system user"	"public void test/*
 *.
 */

package com.android.cts.managedprofile;

import static com.google.common.truth.Truth.assertThat;

import android.app.UiAutomation;
import android.os.Process;
import android.os.UserHandle;
import android.os.UserManager;
import android.test.AndroidTestCase;

import androidx.test.platform.app.InstrumentationRegistry;

import java.util.HashSet;
import java.util.List;

public class UserManagerTest extends AndroidTestCase {

    private UserManager mUserManager;
    private UiAutomation mUiAutomation;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mUserManager = mContext.getSystemService(UserManager.class);
        mUiAutomation = InstrumentationRegistry.getInstrumentation().getUiAutomation();
    }

    @Override
    protected void tearDown() throws Exception {
        mUiAutomation.dropShellPermissionIdentity();
        super.tearDown();
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testIsManagedProfileReturnsTrue"	""	"1: user"	"public void testIsManagedProfileReturnsTrue() {
        assertTrue(mUserManager.isManagedProfile());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testIsManagedProfileReturnsFalse"	""	"1: user"	"public void testIsManagedProfileReturnsFalse() {
        assertFalse(mUserManager.isManagedProfile());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testGetAllProfiles"	""	"1: user"	"public void testGetAllProfiles() {
        List<UserHandle> profiles = mUserManager.getAllProfiles();
        assertThat(profiles).hasSize(2);
        assertThat(profiles).contains(Process.myUserHandle());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testCreateProfile_managedProfile"	""	"1: user"	"public void testCreateProfile_managedProfile() {
        mUiAutomation.adoptShellPermissionIdentity(""android.permission.CREATE_USERS"");

        UserHandle newProfile = mUserManager.createProfile(""testProfile1"",
                UserManager.USER_TYPE_PROFILE_MANAGED, new HashSet<String>());
        assertThat(newProfile).isNotNull();

        List<UserHandle> profiles = mUserManager.getAllProfiles();
        assertThat(profiles).contains(newProfile);
    }

    /** This test should be run as the managed profile
     *  by com.android.cts.devicepolicy.ManagedProfileTest
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testIsProfileReturnsTrue_runAsProfile"	""	"1: user"	"public void testIsProfileReturnsTrue_runAsProfile() {
        mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");
        assertThat(mUserManager.isProfile()).isTrue();
    }

    /** This test should be run as the parent profile
     *  by com.android.cts.devicepolicy.ManagedProfileTest
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.UserManagerTest"	"testIsProfileReturnsFalse_runAsPrimary"	""	"1: user"	"public void testIsProfileReturnsFalse_runAsPrimary() {
        mUiAutomation.adoptShellPermissionIdentity(""android.permission.INTERACT_ACROSS_USERS"");
        assertThat(mUserManager.isProfile()).isFalse();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/UserManagerTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.DeviceIdentifiersTest"	"testProfileOwnerOnPersonalDeviceCannotGetDeviceIdentifiers"	""	"1: system"	"public void testProfileOwnerOnPersonalDeviceCannotGetDeviceIdentifiers() {
        // The profile owner with the READ_PHONE_STATE permission should still receive a
        // SecurityException when querying for device identifiers if it's not on an
        // organization-owned device.
        TelephonyManager telephonyManager = (TelephonyManager) mContext.getSystemService(
                Context.TELEPHONY_SERVICE);
        // Allow the APIs to also return null if the telephony feature is not supported.
        boolean hasTelephonyFeature =
                mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY);

        boolean mayReturnNull = !hasTelephonyFeature;

        assertAccessDenied(telephonyManager::getDeviceId, mayReturnNull);
        assertAccessDenied(telephonyManager::getImei, mayReturnNull);
        assertAccessDenied(telephonyManager::getMeid, mayReturnNull);
        assertAccessDenied(telephonyManager::getSubscriberId, mayReturnNull);
        assertAccessDenied(telephonyManager::getSimSerialNumber, mayReturnNull);
        assertAccessDenied(telephonyManager::getNai, mayReturnNull);
        assertAccessDenied(Build::getSerial, mayReturnNull);
    }

    private static <T> void assertAccessDenied(ThrowingProvider<T> provider,
            boolean mayReturnNull) {
        try {
            T object = provider.get();
            if (mayReturnNull) {
                assertNull(object);
            } else {
                fail(""Expected SecurityException, received "" + object);
            }
        } catch (SecurityException ignored) {
            // assertion succeeded
        } catch (Throwable th) {
            fail(""Expected SecurityException but was: "" + th);
        }
    }

    private interface ThrowingProvider<T> {
        T get() throws Throwable;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DeviceIdentifiersTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.PhoneAccountTest"	"testPhoneAccountNotRegistered"	""	"2: system user"	"public void testPhoneAccountNotRegistered() {
        assertNull(mTelecomManager.getPhoneAccount(PHONE_ACCOUNT_HANDLE));
    }

    private void assertCalllogInserted(int type, String phoneNumber) {
        Cursor cursor = null;
        try {
            final String connectionServiceComponentName = new ComponentName(mContext,
                TestConnectionService.class).flattenToString();
            cursor = mContext.getContentResolver()
                .query(Calls.CONTENT_URI, null,
                    QUERY_CALL_THROUGH_OUR_CONNECTION_SERVICE + "" AND "" +
                        Calls.TYPE + "" = ?"",
                    new String[]{
                        phoneNumber,
                        connectionServiceComponentName,
                        String.valueOf(type)
                    },
                    null);
            assertEquals(1, cursor.getCount());
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    private void cleanupCall(String phoneNumber, boolean verifyDeletion) {
        final String connectionServiceComponentName = new ComponentName(mContext,
                TestConnectionService.class).flattenToString();
        int numRowDeleted = mContext.getContentResolver()
                .delete(Calls.CONTENT_URI, QUERY_CALL_THROUGH_OUR_CONNECTION_SERVICE,
                        new String[]{phoneNumber, connectionServiceComponentName});
        if (verifyDeletion) {
            assertEquals(1, numRowDeleted);
        }
    }

    private PhoneAccount registerPhoneAccount() throws Exception {
        final PhoneAccount phoneAccount = PhoneAccount.builder(
                PHONE_ACCOUNT_HANDLE,
                ""TelecomTestApp Call Provider"")
                .setAddress(Uri.parse(""tel:555-TEST""))
                .setCapabilities(PhoneAccount.CAPABILITY_CALL_PROVIDER)
                .setShortDescription(""a short description for the call provider"")
                .setSupportedUriSchemes(Arrays.asList(PhoneAccount.SCHEME_TEL))
                .build();
        mTelecomManager.registerPhoneAccount(phoneAccount);
        enablePhoneAccount(PHONE_ACCOUNT_HANDLE);
        // make sure the registration is successful.
        assertNotNull(mTelecomManager.getPhoneAccount(PHONE_ACCOUNT_HANDLE));
        return phoneAccount;
    }

    private void unregisterPhoneAccount() {
        mTelecomManager.unregisterPhoneAccount(PHONE_ACCOUNT_HANDLE);
        assertNull(mTelecomManager.getPhoneAccount(PHONE_ACCOUNT_HANDLE));
    }

    /**
     * Running adb command to enable phone account.
     */
    private void enablePhoneAccount(PhoneAccountHandle handle) throws Exception {
        final ComponentName component = handle.getComponentName();
        final UserManager userManager = (UserManager) mContext.getSystemService(
                Context.USER_SERVICE);
        executeShellCommand(COMMAND_ENABLE + "" ""
                + component.getPackageName() + ""/"" + component.getClassName() + "" ""
                + handle.getId() + "" "" + userManager
                .getSerialNumberForUser(Process.myUserHandle()));
    }

    private String executeShellCommand(String command) throws Exception {
        final ParcelFileDescriptor pfd =
                mInstrumentation.getUiAutomation().executeShellCommand(command);
        BufferedReader br = null;
        try (InputStream in = new FileInputStream(pfd.getFileDescriptor())) {
            br = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
            String str;
            StringBuilder out = new StringBuilder();
            while ((str = br.readLine()) != null) {
                out.append(str);
            }
            return out.toString();
        } finally {
            if (br != null) {
                br.close();
            }
            pfd.close();
        }
    }

    /**
     * Observe the change of calllog provider.
     */
    private class CalllogContentObserver extends ContentObserver {

        private final CountDownLatch mCountDownLatch;

        public CalllogContentObserver(Handler handler, final CountDownLatch countDownLatch) {
            super(handler);
            mCountDownLatch = countDownLatch;
        }

        @Override
        public void onChange(boolean selfChange, Uri uri) {
            super.onChange(selfChange, uri);
            mCountDownLatch.countDown();
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PhoneAccountTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.ParentProfileTest"	"testCannotCallSetDefaultSmsApplicationOnParentProfile"	""	"1: apps"	"public void testCannotCallSetDefaultSmsApplicationOnParentProfile() {
        String messagesPackageName = ""com.google.android.apps.messaging"";
        assertThrows(SecurityException.class,
                () -> mParentDevicePolicyManager.setDefaultSmsApplication(ADMIN_RECEIVER_COMPONENT,
                        messagesPackageName));
    }

}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ParentProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_resetsAppOpOfUnsetPackagesOnOtherProfile"	""	"2: user apps"	"public void testSetCrossProfilePackages_resetsAppOpOfUnsetPackagesOnOtherProfile()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);

        assertThatPackagesHaveAppOpMode(
                DIFF_CROSS_PROFILE_PACKAGES, MODE_DEFAULT, UserHandle.of(0));
    }

    /**
     * Sets each of the packages in {@link #ALL_CROSS_PROFILE_PACKAGES} as cross-profile, then sets
     * them again to {@link #ALL_BUT_ONE_CROSS_PROFILE_PACKAGES}, with all app-ops explicitly set as
     * allowed before-hand. This should result in resetting package {@code
     * com.android.cts.testapps.testapp4}. This can then be used for writing host-side tests.
     * TODO (b/175017211): switch back to {@link #SUBLIST_CROSS_PROFILE_PACKAGES} once the metric
     * assertion logic in hostside can handle unordered metric entries.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps_noAsserts"	""	"1: user"	"public void testSetCrossProfilePackages_sendsBroadcastWhenResettingAppOps_noAsserts()
            throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, ALL_CROSS_PROFILE_PACKAGES);
        explicitlySetInteractAcrossProfilesAppOps(MODE_ALLOWED);

        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, SUBLIST_CROSS_PROFILE_PACKAGES);
    }

    private void explicitlySetInteractAcrossProfilesAppOps(int mode) throws Exception {
        for (String packageName : ALL_CROSS_PROFILE_PACKAGES) {
            explicitlySetInteractAcrossProfilesAppOp(packageName, mode);
        }
    }

    private void explicitlySetInteractAcrossProfilesAppOp(String packageName, int mode)
            throws Exception {
        for (UserHandle profile : mUserManager.getUserProfiles()) {
            if (isPackageInstalledForUser(packageName, profile)) {
                explicitlySetInteractAcrossProfilesAppOp(packageName, mode, profile);
            }
        }
    }

    private boolean isPackageInstalledForUser(String packageName, UserHandle user) {
        try {
            sUiAutomation.adoptShellPermissionIdentity(INTERACT_ACROSS_USERS_PERMISSION);
            mContext.createContextAsUser(user, /* flags= */ 0).getPackageManager()
                    .getPackageInfo(packageName, /* flags= */ 0);
            return true;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        } finally {
            sUiAutomation.dropShellPermissionIdentity();
        }
    }

    private void explicitlySetInteractAcrossProfilesAppOp(
            String packageName, int mode, UserHandle userHandle) throws Exception {
        sUiAutomation.adoptShellPermissionIdentity(
                MANAGE_APP_OPS_MODES_PERMISSION,
                UPDATE_APP_OPS_STATS_PERMISSION,
                INTERACT_ACROSS_USERS_PERMISSION);
        mAppOpsManager.setUidMode(
                AppOpsManager.permissionToOp(Manifest.permission.INTERACT_ACROSS_PROFILES),
                getUidForPackageName(packageName, userHandle),
                mode);
        sUiAutomation.dropShellPermissionIdentity();
    }

    private int getUidForPackageName(String packageName, UserHandle userHandle) throws Exception {
        return mContext.createContextAsUser(userHandle, /* flags= */ 0)
                .getPackageManager()
                .getPackageUid(packageName, /* flags= */ 0);
    }

    private void assertThatPackagesHaveAppOpMode(
            Set<String> packageNames, int mode, UserHandle userHandle)
            throws Exception {
        for (String unsetCrossProfilePackage : packageNames) {
            assertThat(getCrossProfileAppOp(unsetCrossProfilePackage, userHandle)).isEqualTo(mode);
        }
    }

    private void assertThatPackagesHaveAppOpMode(Set<String> packageNames, int mode)
            throws Exception {
        assertThatPackagesHaveAppOpMode(packageNames, mode, Process.myUserHandle());
    }

    private int getCrossProfileAppOp(String packageName, UserHandle userHandle) throws Exception {
        sUiAutomation.adoptShellPermissionIdentity(
                MANAGE_APP_OPS_MODES_PERMISSION,
                UPDATE_APP_OPS_STATS_PERMISSION,
                INTERACT_ACROSS_USERS_PERMISSION);
        final int result = mAppOpsManager.unsafeCheckOpNoThrow(
                AppOpsManager.permissionToOp(Manifest.permission.INTERACT_ACROSS_PROFILES),
                getUidForPackageName(packageName, userHandle),
                packageName);
        sUiAutomation.dropShellPermissionIdentity();
        return result;
    }

    private void explicitlyResetInteractAcrossProfilesAppOps() throws Exception {
        explicitlySetInteractAcrossProfilesAppOps(AppOpsManager.MODE_DEFAULT);
    }

    private void resetCrossProfilePackages() {
        mDevicePolicyManager.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, new HashSet<>());
    }

    private static class NonAdminReceiver extends DeviceAdminReceiver {}
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileTest"	"testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated"	""	"1: apps"	"public void testGetCrossProfilePackages_whenSetTwice_returnsLatestNotConcatenated() {
        final Set<String> packages1 = Collections.singleton(""test.package.name.1"");
        final Set<String> packages2 = Collections.singleton(""test.package.name.2"");

        mDevicePolicyManager.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages1);
        mDevicePolicyManager.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages2);

        assertThat(mDevicePolicyManager.getCrossProfilePackages(ADMIN_RECEIVER_COMPONENT))
                .isEqualTo(packages2);
    }

    /**
     * Sets {@code com.android.cts.testapps.testapp1} as cross-profile. This can
     * then be used for writing host-side tests. Note that the state is cleared after running any
     * test in this class, so this method should not be used to attempt to perform a sequence of
     * device-side calls.
     * TODO (b/175017211): switch back to setting all packages in
     * {@link #ALL_CROSS_PROFILE_PACKAGES} once the metric assertion logic in hostside can handle
     * unordered metric entries.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileTest"	"testSetCrossProfilePackages_noAsserts"	""	"1: apps"	"public void testSetCrossProfilePackages_noAsserts() throws Exception {
        mDevicePolicyManager.setCrossProfilePackages(
                ADMIN_RECEIVER_COMPONENT, Sets.newHashSet(""com.android.cts.testapps.testapp1""));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.RingtoneSyncTest"	"testRingtoneSync"	""	"2: system user"	"public void testRingtoneSync() throws Exception {
        String defaultRingtone = Settings.System.getString(mContentResolver,
                Settings.System.RINGTONE);
        String defaultNotification = Settings.System.getString(mContentResolver,
                Settings.System.NOTIFICATION_SOUND);
        String defaultAlarm = Settings.System.getString(mContentResolver,
                Settings.System.ALARM_ALERT);

        // RingtoneManager API should retrieve the same ringtones
        validateRingtoneManagerGetRingtone(defaultRingtone, RingtoneManager.TYPE_RINGTONE);
        validateRingtoneManagerGetRingtone(defaultNotification, RingtoneManager.TYPE_NOTIFICATION);
        validateRingtoneManagerGetRingtone(defaultAlarm, RingtoneManager.TYPE_ALARM);
    }

    private void validateRingtoneManagerGetRingtone(String expected, int type) {
        Uri expectedUri = (expected == null ? null : Utils.getUriWithoutUserId(
                Uri.parse(expected)));
        Uri actualRingtoneUri = Utils.getUriWithoutUserId(
                RingtoneManager.getActualDefaultRingtoneUri(mContext, type));
        assertEquals(expectedUri, actualRingtoneUri);
    }

    /*
     * Tests that setting a work ringtone disables Settings.Secure.SYNC_PARENT_SOUNDS.
     */
    private void testSoundDisableSync(int ringtoneType) throws Exception {
        Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);

        Uri originalUri = RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType);

        // Make sure we have the rights we need to set a new ringtone.
        assertTrue(Settings.System.canWrite(mContext));

        // Explicitly set a work sound, to stop syncing ringtones between profiles.
        assertEquals(1, Settings.Secure.getInt(mContentResolver, SYNC_PARENT_SOUNDS));
        try {
            RingtoneManager.setActualDefaultRingtoneUri(mContext, ringtoneType, null);
            assertEquals(0, Settings.Secure.getInt(mContentResolver, SYNC_PARENT_SOUNDS));
            validateRingtoneManagerGetRingtone(null, ringtoneType);
        } finally {
            // Reset the setting we just changed.
            Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);
        }

        // After re-unifying, the uri should be the same as the parent's uri.
        Uri postSyncUri = RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType);
        assertEquals(originalUri, postSyncUri);

        // Manually disabling sync again, without changing settings, should put the ringtone uri
        // back to its earlier value of null.
        try {
            Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 0);
            assertNull(RingtoneManager.getActualDefaultRingtoneUri(mContext, ringtoneType));
        } finally {
            Settings.Secure.putInt(mContentResolver, SYNC_PARENT_SOUNDS, 1);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/RingtoneSyncTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAddParentCanAccessManagedFilters"	""	"1: system"	"public void testAddParentCanAccessManagedFilters() {
        testRemoveAllFilters();

        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT, getIntentFilter(),
                DevicePolicyManager.FLAG_PARENT_CAN_ACCESS_MANAGED);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAddManagedCanAccessParentFilters"	""	"1: system"	"public void testAddManagedCanAccessParentFilters() {
        testRemoveAllFilters();

        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.addCrossProfileIntentFilter(ADMIN_RECEIVER_COMPONENT, getIntentFilter(),
                DevicePolicyManager.FLAG_MANAGED_CAN_ACCESS_PARENT);
    }

    public IntentFilter getIntentFilter() {
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_READ_FROM_URI);
        intentFilter.addAction(ACTION_WRITE_TO_URI);
        intentFilter.addAction(ACTION_TAKE_PERSISTABLE_URI_PERMISSION);
        intentFilter.addAction(ACTION_COPY_TO_CLIPBOARD);
        intentFilter.addAction(ACTION_NOTIFY_URI_CHANGE);
        intentFilter.addAction(ACTION_OBSERVE_URI_CHANGE);
        return intentFilter;
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testRemoveAllFilters"	""	"1: system"	"public void testRemoveAllFilters() {
        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        dpm.clearCrossProfileIntentFilters(ADMIN_RECEIVER_COMPONENT);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testDisallowCrossProfileCopyPaste"	""	"2: system user"	"public void testDisallowCrossProfileCopyPaste() {
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        dpm.addUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testAllowCrossProfileCopyPaste"	""	"2: system user"	"public void testAllowCrossProfileCopyPaste() {
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        dpm.clearUserRestriction(ADMIN_RECEIVER_COMPONENT,
                UserManager.DISALLOW_CROSS_PROFILE_COPY_PASTE);
    }

    // Disables all browsers in current user"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testDisableAllBrowsers"	""	"1: system"	"public void testDisableAllBrowsers() {
        PackageManager pm = (PackageManager) getContext().getPackageManager();
        DevicePolicyManager dpm = (DevicePolicyManager)
               getContext().getSystemService(Context.DEVICE_POLICY_SERVICE);
        Intent webIntent = new Intent(Intent.ACTION_VIEW);
        webIntent.setData(Uri.parse(""http://com.android.cts.intent.receiver""));
        List<ResolveInfo> ris = pm.queryIntentActivities(webIntent, PackageManager.MATCH_ALL /* all browser*/);
        for (ResolveInfo ri : ris) {
            Log.d(TAG, ""Hiding "" + ri.activityInfo.packageName);
            dpm.setApplicationHidden(ADMIN_RECEIVER_COMPONENT, ri.activityInfo.packageName, true);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.managedprofile.CrossProfileUtils"	"testSetCrossProfilePackages"	""	"1: system"	"public void testSetCrossProfilePackages(){
        final DevicePolicyManager dpm = (DevicePolicyManager) getContext().getSystemService(
                Context.DEVICE_POLICY_SERVICE);
        final Set<String> packages = Collections.singleton(getCrossProfilePackage());
        dpm.setCrossProfilePackages(ADMIN_RECEIVER_COMPONENT, packages);

    }

    private String getCrossProfilePackage() {
        final Bundle testArguments = InstrumentationRegistry.getArguments();
        if (testArguments.containsKey(PARAM_CROSS_PROFILE_PACKAGE)) {
            try {
                return testArguments.getString(PARAM_CROSS_PROFILE_PACKAGE);
            } catch (NumberFormatException ignore) {
            }
        }
        fail(""cross profile package param not found."");
        return null;
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/CrossProfileUtils.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.suspensionchecker.ActivityLaunchTest"	"testWaitForActivityNotLaunchable"	""	"1: system"	"public void testWaitForActivityNotLaunchable() throws Exception {
        // Wait up to 1 minute checking if the app is not launchable anymore.
        final long deadline = System.nanoTime() + TimeUnit.MINUTES.toNanos(1);
        while (System.nanoTime() < deadline) {
            if (!LaunchCheckingActivity.checkLaunch(InstrumentationRegistry.getContext())) {
                return;
            }
            Thread.sleep(1000);
        }
        fail(""Activity is still launchable"");
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/SuspensionChecker/src/com/android/cts/suspensionchecker/ActivityLaunchTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.accountcheck.AccountCheckTest"	"testCleanUpNonTestOwner"	""	"1: system"	"public void testCleanUpNonTestOwner() throws Exception {
        final ComponentName admin = new ComponentName(
                ""com.android.cts.devicepolicy.accountcheck.nontestonly"",
                ""com.android.cts.devicepolicy.accountcheck.owner.AdminReceiver"");

        if (mDevicePolicyManager.isDeviceOwnerApp(admin.getPackageName())) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as DO"");
            mDevicePolicyManager.clearDeviceOwnerApp(admin.getPackageName());
        }

        if (mDevicePolicyManager.isProfileOwnerApp(admin.getPackageName())) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as PO"");
            mDevicePolicyManager.clearProfileOwner(admin);
        }

        if (mDevicePolicyManager.isAdminActive(admin)) {
            Log.i(TAG, ""testCleanUpNonTestOwner: Removing as DA"");
            mDevicePolicyManager.removeActiveAdmin(admin);

            final long timeout = SystemClock.elapsedRealtime() + 60 * 1000;
            while (SystemClock.elapsedRealtime() < timeout
                    && mDevicePolicyManager.isAdminActive(admin)) {
                Thread.sleep(100);
            }
        }
        // Give the system a breath.
        Thread.sleep(5000);
    }

    /**
     * Test there are no preconfigured accounts that don't accept DO/PO.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/AccountCheck/Auth/src/com/android/cts/devicepolicy/accountcheck/AccountCheckTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.AppRestrictionsIsCallerDelegateHelper"	"isCallerApplicationRestrictionsManagingPackage"	""	"1: system"	"public void test/*
 *.
 */

package com.android.cts.delegate;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.test.InstrumentationTestCase;

/**
 *  A helper for testing the {@link
 *  DevicePolicyManager#isCallerApplicationRestrictionsManagingPackage()} method.
 *  <p>The method names start with ""test"" to be recognized by {@link InstrumentationTestCase}.
 */
public class AppRestrictionsIsCallerDelegateHelper extends InstrumentationTestCase {

    private DevicePolicyManager mDevicePolicyManager;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        mDevicePolicyManager =
            getInstrumentation().getContext().getSystemService(DevicePolicyManager.class);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/AppRestrictionsIsCallerDelegateHelper.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.GeneralDelegateTest"	"testDifferentPackageNameThrowsException"	""	"1: apps"	"public void testDifferentPackageNameThrowsException() {
        final String otherPackage = ""com.android.cts.launcherapps.simpleapp"";
        try {
            List<String> delegatedScopes = mDpm.getDelegatedScopes(null, otherPackage);
            fail(""Expected SecurityException not thrown"");
        } catch (SecurityException expected) {
            MoreAsserts.assertContainsRegex(""Caller with uid \\d+ is not "" + otherPackage,
                    expected.getMessage());
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/GeneralDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.EnableSystemAppDelegateTest"	"testCannotAccessApis"	""	"1: system"	"public void testCannotAccessApis() {
        assertFalse(""DelegateApp should not be an enable system app delegate"",
            amIEnableSystemAppDelegate());

        // Exercise enableSystemApp(String).
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.enableSystemApp(null, TEST_APP_PKG);
                });

        // Exercise enableSystemApp(Intent).
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.enableSystemApp(null, new Intent().setPackage(TEST_APP_PKG));
                });
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.EnableSystemAppDelegateTest"	"testCanAccessApis"	""	"2: system apps"	"public void testCanAccessApis() {
        assertTrue(""DelegateApp is not an enable system app delegate"",
            amIEnableSystemAppDelegate());

        // Exercise enableSystemApp(String).
        assertExpectException(IllegalArgumentException.class,
                ""Only system apps can be enabled this way"", () -> {
                    mDpm.enableSystemApp(null, TEST_APP_PKG);
                });

        // Exercise enableSystemApp(Intent).
        mDpm.enableSystemApp(null, new Intent());
    }

    private boolean amIEnableSystemAppDelegate() {
        final String packageName = getInstrumentation().getContext().getPackageName();
        final List<String> scopes = mDpm.getDelegatedScopes(null, packageName);
        return scopes.contains(DELEGATION_ENABLE_SYSTEM_APP);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/EnableSystemAppDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.NetworkLoggingDelegateTest"	"isHeadlessSystemUserMode"	""	"2: system user"	"public void test/*
 *.
 */
package com.android.cts.delegate;

import static android.app.admin.DeviceAdminReceiver.ACTION_NETWORK_LOGS_AVAILABLE;

import static com.android.cts.delegate.DelegateTestUtils.assertExpectException;

import static com.google.common.truth.Truth.assertThat;

import android.app.admin.DevicePolicyManager;
import android.content.IntentFilter;
import android.os.UserManager;
import android.util.Log;

import com.android.bedstead.dpmwrapper.TestAppHelper;
import com.android.cts.delegate.DelegateTestUtils.DelegatedLogsReceiver;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.CountDownLatch;

/**
 * Tests that a delegate app with DELEGATION_NETWORK_LOGGING is able to control and access
 * network logging.
 */
public final class NetworkLoggingDelegateTest extends BaseJUnit3TestCase {

    private static final String TAG = ""NetworkLoggingDelegateTest"";

    private static final String[] URL_LIST = {
            ""example.edu"",
            ""ipv6.google.com"",
            ""google.co.jp"",
            ""google.fr"",
            ""google.com.br"",
            ""google.com.tr"",
            ""google.co.uk"",
            ""google.de""
    };

    // TODO(b/176993670): receiver needed to forward intents from device owner user to current user
    // on headless system user mode. Might be removed once tests are refactor to use proper IPC.
    private DelegatedLogsReceiver mReceiver;

    @Override
    protected void setUp() throws Exception {
        super.setUp();

        if (UserManager.isHeadlessSystemUserMode()) {
            mReceiver = new DelegatedLogsReceiver();
            TestAppHelper.registerTestCaseReceiver(mContext, mReceiver,
                    new IntentFilter(ACTION_NETWORK_LOGS_AVAILABLE));
        }

        DelegatedLogsReceiver.sBatchCountDown = new CountDownLatch(1);
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();

        if (mReceiver != null) {
            TestAppHelper.unregisterTestCaseReceiver(mContext, mReceiver);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/NetworkLoggingDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.AppRestrictionsDelegateTest"	"testCanAccessApis"	""	"1: user"	"public void testCanAccessApis() throws InterruptedException {
        assertTrue(""DelegateApp is not an app restrictions delegate"", amIAppRestrictionsDelegate());
        try {
            mDpm.setApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG, BUNDLE_0);
            assertBundle0(mDpm.getApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG));

            // Check that the target app can retrieve the same restrictions.
            assertBundle0(waitForChangedRestriction());

            // Test overwriting
            mDpm.setApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG, BUNDLE_1);
            assertBundle1(mDpm.getApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG));
            assertBundle1(waitForChangedRestriction());
        } finally {
            mDpm.setApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG, new Bundle());
            assertTrue(
                mDpm.getApplicationRestrictions(null, APP_RESTRICTIONS_TARGET_PKG).isEmpty());
        }
    }

    // Should be consistent with assertBundle0
    private static Bundle createBundle0() {
        Bundle result = new Bundle();
        result.putString(""placeholderString"", ""value"");
        return result;
    }

    // Should be consistent with createBundle0
    private void assertBundle0(Bundle bundle) {
        assertEquals(1, bundle.size());
        assertEquals(""value"", bundle.getString(""placeholderString""));
    }

    // Should be consistent with assertBundle1
    private static Bundle createBundle1() {
        Bundle result = new Bundle();
        result.putInt(""placeholderInt"", 1);
        return result;
    }

    // Should be consistent with createBundle1
    private void assertBundle1(Bundle bundle) {
        assertEquals(1, bundle.size());
        assertEquals(1, bundle.getInt(""placeholderInt""));
    }

    private void startTestActivity() {
        ComponentName component = new ComponentName(
                APP_RESTRICTIONS_TARGET_PKG, APP_RESTRICTIONS_ACTIVITY_NAME);
        Log.d(TAG, ""Starting activity "" + component.flattenToShortString() + "" on user ""
                + Process.myUserHandle());
        mContext.startActivity(new Intent()
                .setComponent(component)
                .addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NEW_TASK));
    }

    private Bundle waitForChangedRestriction() throws InterruptedException {
        startTestActivity();
        assertTrue(""App restrictions target app did not respond in time"",
                mOnRestrictionsSemaphore.tryAcquire(TIMEOUT_SECONDS, TimeUnit.SECONDS));
        return mReceivedRestrictions;
    }

    private boolean amIAppRestrictionsDelegate() {
        final List<String> scopes = mDpm.getDelegatedScopes(null, mContext.getPackageName());
        return scopes.contains(DELEGATION_APP_RESTRICTIONS);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/AppRestrictionsDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.PackageAccessDelegateTest"	"testCannotAccessApis"	""	"1: hide"	"public void testCannotAccessApis() throws NameNotFoundException {
        assertFalse(""DelegateApp should not be a package access delegate"",
            amIPackageAccessDelegate());

        // Exercise isApplicationHidden.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.isApplicationHidden(null, TEST_APP_PKG);
                });

        // Exercise setApplicationHidden.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.setApplicationHidden(null, TEST_APP_PKG, true /* hide */);
                });

        // Exercise isPackageSuspended.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.isPackageSuspended(null, TEST_APP_PKG);
                });

        // Exercise setPackagesSuspended.
        assertExpectException(SecurityException.class,
                ""Calling identity is not authorized"", () -> {
                    mDpm.setPackagesSuspended(null, new String[] {TEST_APP_PKG}, true /* suspend */);
                });
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PackageAccessDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.delegate.PackageAccessDelegateTest"	"testCanAccessApis"	""	"1: hide"	"public void testCanAccessApis() throws NameNotFoundException {
        assertTrue(""DelegateApp is not a package access delegate"", amIPackageAccessDelegate());

        // Exercise isApplicationHidden.
        assertFalse(""Package should not be hidden"", mDpm.isApplicationHidden(null, TEST_APP_PKG));

        // Exercise setApplicationHidden.
        assertTrue(""Package not hidden successfully"",
                mDpm.setApplicationHidden(null, TEST_APP_PKG, true /* hide */));
        assertTrue(""Package should be hidden"", mDpm.isApplicationHidden(null, TEST_APP_PKG));

        // Exercise isPackageSuspended.
        assertFalse(""Package should not be suspended"", mDpm.isPackageSuspended(null, TEST_APP_PKG));

        // Exercise setPackagesSuspended.
        String[] suspended = mDpm.setPackagesSuspended(null, new String[] {TEST_APP_PKG},
                true /* suspend */);
        assertTrue(""Package not suspended successfully"", suspended.length == 0);
        assertTrue(""Package should be suspended"", mDpm.isPackageSuspended(null, TEST_APP_PKG));
    }

    private boolean amIPackageAccessDelegate() {
        final String packageName = getInstrumentation().getContext().getPackageName();
        final List<String> scopes = mDpm.getDelegatedScopes(null, packageName);
        return scopes.contains(DELEGATION_PACKAGE_ACCESS);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/PackageAccessDelegateTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester"	"isEmpty"	""	"1: user"	"public void test/*
 *.
 */
package com.android.cts.devicepolicy;

import static android.app.admin.DevicePolicyManager.OPERATION_LOCK_NOW;
import static android.app.admin.DevicePolicyManager.OPERATION_LOGOUT_USER;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_ACTIVE_ADMIN;
import static android.app.admin.DevicePolicyManager.OPERATION_REMOVE_KEY_PAIR;
import static android.app.admin.DevicePolicyManager.OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_ALWAYS_ON_VPN_PACKAGE;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_MASTER_VOLUME_MUTED;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PERMISSION_GRANT_STATE;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_PERMISSION_POLICY;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_RESTRICTIONS_PROVIDER;
import static android.app.admin.DevicePolicyManager.OPERATION_SET_USER_RESTRICTION;
import static android.app.admin.DevicePolicyManager.operationSafetyReasonToString;
import static android.app.admin.DevicePolicyManager.operationToString;

import static com.google.common.truth.Truth.assertWithMessage;

import static org.junit.Assert.fail;
import static org.testng.Assert.assertThrows;
import static org.testng.Assert.expectThrows;

import android.app.admin.DevicePolicyManager;
import android.app.admin.UnsafeStateException;
import android.content.ComponentName;
import android.content.Context;
import android.os.UserManager;
import android.util.Log;

import com.android.compatibility.common.util.ShellIdentityUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Set;

/**
 * Helper class to test that DPM calls fail when determined by the
 * {@link android.app.admin.DevicePolicySafetyChecker}; it provides the base infra, so it can be
 * used by both device and profile owner tests.
 */
public class DevicePolicySafetyCheckerIntegrationTester {

    public static final String TAG = DevicePolicySafetyCheckerIntegrationTester.class
            .getSimpleName();

    private static final int[] OPERATIONS = new int[] {
            OPERATION_LOCK_NOW,
            OPERATION_LOGOUT_USER,
            OPERATION_REMOVE_ACTIVE_ADMIN,
            OPERATION_REMOVE_KEY_PAIR,
            OPERATION_SET_MASTER_VOLUME_MUTED,
            OPERATION_SET_USER_RESTRICTION,
            OPERATION_SET_PERMISSION_GRANT_STATE,
            OPERATION_SET_PERMISSION_POLICY,
            OPERATION_SET_RESTRICTIONS_PROVIDER
    };

    private static final int[] OVERLOADED_OPERATIONS = new int[] {
            OPERATION_LOCK_NOW,
            OPERATION_SET_ALWAYS_ON_VPN_PACKAGE
    };

    /**
     * Tests that all safety-aware operations are properly implemented.
     */
    public final void testAllOperations(DevicePolicyManager dpm, ComponentName admin) {
        Log.d(TAG, ""testAllOperations: dpm="" + dpm + "", admin="" + admin);
        Objects.requireNonNull(dpm);

        List<String> failures = new ArrayList<>();
        for (int operation : OPERATIONS) {
            safeOperationTest(dpm, admin, failures, operation, /* overloaded= */ false);
        }

        for (int operation : OVERLOADED_OPERATIONS) {
            safeOperationTest(dpm, admin, failures, operation, /* overloaded= */ true);
        }

        for (int operation : getSafetyAwareOperations()) {
            safeOperationTest(dpm, admin, failures, operation, /* overloaded= */ false);
        }

        for (int operation : getOverloadedSafetyAwareOperations()) {
            safeOperationTest(dpm, admin, failures, operation, /* overloaded= */ true);
        }

        if (!failures.isEmpty()) {
            fail(failures.size() + "" operations failed: "" + failures);
        }
    }

    /**
     * Tests {@link DevicePolicyManager#isSafeOperation(int)}.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.devicepolicy.DevicePolicySafetyCheckerIntegrationTester"	"testOnOperationSafetyStateChanged"	""	"1: user"	"public void testOnOperationSafetyStateChanged(Context context, DevicePolicyManager dpm) {
        // Currently there's just one reason...
        int reason = OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;
        // Operation doesn't really matter
        int operation = OPERATION_LOCK_NOW;
        Log.d(TAG, ""testOnOperationSafetyStateChanged(): dpm="" + dpm
                + "", reason="" + operationSafetyReasonToString(reason)
                + "", operation="" + operationToString(operation));
        OperationSafetyChangedCallback receiver = OperationSafetyChangedCallback.register(context);
        try {
            setOperationUnsafe(dpm, operation, reason);
            // Must force OneTimeSafetyChecker to generate the event by calling the unsafe operation
            assertThrows(UnsafeStateException.class, () -> dpm.lockNow());

            Log.d(TAG, ""Waiting isSafe=false event"");
            assertNextEvent(receiver, reason, /* isSafe= */ false);

            // OneTimeSafetyChecker automatically disables itself after one operation, which in turn
            // triggers another event
            Log.d(TAG, ""Waiting isSafe=true event"");
            assertNextEvent(receiver, reason, /* isSafe= */ true);
        } finally {
            receiver.unregister(context);
        }
    }

    private void assertNextEvent(OperationSafetyChangedCallback receiver,
            int reason, boolean isSafe) {
        OperationSafetyChangedEvent event = receiver.getNextEvent();
        Log.v(TAG, ""Received event: "" + event);
        assertWithMessage(""event (%s) reason"", event).that(event.reason).isEqualTo(reason);
        assertWithMessage(""event (%s) safety state"", event).that(event.isSafe).isEqualTo(isSafe);
    }

    /**
     * Gets the device / profile owner-specific operations.
     *
     * <p>By default it returns an empty array, but sub-classes can override to add its supported
     * operations.
     */
    protected int[] getSafetyAwareOperations() {
        return new int[] {};
    }

    /**
     * Gets the device / profile owner-specific operations that are overloaded.
     *
     * <p>For example, {@code OPERATION_WIPE_DATA} is used for both {@code wipeData(flags)} and
     * {@code wipeData(flags, reason)}, so it should be returned both here and on
     * {@link #getSafetyAwareOperations()}, then
     * {@link #runOperation(DevicePolicyManager, int, boolean)} will handle which method to call for
     * each case.
     *
     * <p>By default it returns an empty array, but sub-classes can override to add its supported
     * operations.
     */
    protected int[] getOverloadedSafetyAwareOperations() {
        return new int[] {};
    }

    /**
     * Runs the device / profile owner-specific operation.
     *
     * <p>MUST be overridden if {@link #getSafetyAwareOperations()} is overridden as well.
     */
    protected void runOperation(DevicePolicyManager dpm, ComponentName admin, int operation,
            boolean overloaded) {
        throwUnsupportedOperationException(operation, overloaded);
    }

    /**
     * Throws a {@link UnsupportedOperationException} then the given {@code operation} is not
     * supported.
     */
    protected final void throwUnsupportedOperationException(int operation, boolean overloaded) {
        throw new UnsupportedOperationException(
                ""Unsupported operation "" + getOperationName(operation, overloaded));
    }

    private void safeOperationTest(DevicePolicyManager dpm, ComponentName admin,
            List<String> failures, int operation, boolean overloaded) {
        String name = getOperationName(operation, overloaded);
        // Currently there's just one reason...
        int reason = OPERATION_SAFETY_REASON_DRIVING_DISTRACTION;

        try {
            setOperationUnsafe(dpm, operation, reason);
            runCommonOrSpecificOperation(dpm, admin, operation, overloaded);
            Log.e(TAG, name + "" didn't throw an UnsafeStateException"");
            failures.add(name);
        } catch (UnsafeStateException e) {
            Log.d(TAG, name + "" failed as expected: "" + e);
        } catch (Exception e) {
            Log.e(TAG, name + "" threw unexpected exception"", e);
            failures.add(name + ""("" + e + "")"");
        }
    }

    private String getOperationName(int operation, boolean overloaded) {
        String name = operationToString(operation);
        return overloaded ? name + ""(OVERLOADED)"" : name;
    }

    private void runCommonOrSpecificOperation(DevicePolicyManager dpm, ComponentName admin,
            int operation, boolean overloaded) throws Exception {
        String name = getOperationName(operation, overloaded);
        Log.v(TAG, ""runOperation(): "" + name);
        switch (operation) {
            case OPERATION_LOCK_NOW:
                if (overloaded) {
                    dpm.lockNow(/* flags= */ 0);
                } else {
                    dpm.lockNow();
                }
                break;
            case OPERATION_LOGOUT_USER:
                dpm.logoutUser(admin);
                break;
            case OPERATION_SET_ALWAYS_ON_VPN_PACKAGE:
                if (overloaded) {
                    dpm.setAlwaysOnVpnPackage(admin, ""vpnPackage"", /* lockdownEnabled= */ true);
                } else {
                    dpm.setAlwaysOnVpnPackage(admin, ""vpnPackage"", /* lockdownEnabled= */ true,
                            /* lockdownAllowlist= */ Set.of(""vpnPackage""));
                }
                break;
            case OPERATION_SET_MASTER_VOLUME_MUTED:
                dpm.setMasterVolumeMuted(admin, /* on= */ true);
                break;
            case OPERATION_SET_PERMISSION_GRANT_STATE:
                dpm.setPermissionGrantState(admin, ""package"", ""permission"", /* grantState= */ 0);
                break;
            case OPERATION_SET_PERMISSION_POLICY:
                dpm.setPermissionPolicy(admin, /* policy= */ 0);
                break;
            case OPERATION_SET_RESTRICTIONS_PROVIDER:
                dpm.setRestrictionsProvider(admin,
                        /* provider= */ new ComponentName(""package"", ""component""));
                break;
            case OPERATION_SET_USER_RESTRICTION:
                dpm.addUserRestriction(admin, UserManager.DISALLOW_REMOVE_USER);
                break;
            case OPERATION_REMOVE_ACTIVE_ADMIN:
                dpm.removeActiveAdmin(admin);
                break;
            case OPERATION_REMOVE_KEY_PAIR:
                dpm.removeKeyPair(admin, ""keyAlias"");
                break;
            default:
                runOperation(dpm, admin, operation, overloaded);
        }
    }

    private void setOperationUnsafe(DevicePolicyManager dpm, int operation, int reason) {
        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(dpm,
                (obj) -> obj.setNextOperationSafety(operation, reason));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/common/src/com/android/cts/devicepolicy/DevicePolicySafetyCheckerIntegrationTester.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.AppUsageObserverTest"	"testAppUsageObserver_MinTimeLimit"	""	"1: system"	"public void testAppUsageObserver_MinTimeLimit() throws Exception {
        final String[] packages = {""not.real.package.name""};
        final int obsId = 0;
        UsageStatsManager usm = mContext.getSystemService(UsageStatsManager.class);

        Intent intent = new Intent(Intent.ACTION_MAIN);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                InstrumentationRegistry.getContext(),
                1, intent, PendingIntent.FLAG_MUTABLE_UNAUDITED);

        usm.registerAppUsageObserver(obsId, packages, 60, TimeUnit.SECONDS, pendingIntent);
        usm.unregisterAppUsageObserver(obsId);
        try {
            usm.registerAppUsageObserver(obsId, packages, 59, TimeUnit.SECONDS, pendingIntent);
            fail(""Should have thrown an IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
            // Do nothing. Exception is expected.
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AppUsageObserverTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.AppUsageObserverTest"	"testUsageSessionObserver_MinTimeLimit"	""	"1: system"	"public void testUsageSessionObserver_MinTimeLimit() throws Exception {
        final String[] packages = {""not.real.package.name""};
        final int obsId = 0;
        UsageStatsManager usm = mContext.getSystemService(UsageStatsManager.class);

        Intent intent = new Intent(Intent.ACTION_MAIN);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                InstrumentationRegistry.getContext(),
                1, intent, PendingIntent.FLAG_MUTABLE_UNAUDITED);

        usm.registerUsageSessionObserver(obsId, packages, Duration.ofSeconds(60),
                Duration.ofSeconds(10), pendingIntent, null);
        usm.unregisterUsageSessionObserver(obsId);
        try {
            usm.registerUsageSessionObserver(obsId, packages, Duration.ofSeconds(59),
                    Duration.ofSeconds(10), pendingIntent, null);
            fail(""Should have thrown an IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
            // Do nothing. Exception is expected.
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AppUsageObserverTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.AppUsageObserverTest"	"testObserverLimit"	""	"1: system"	"public void testObserverLimit() throws Exception {
        final String[] packages = {""not.real.package.name""};
        UsageStatsManager usm = mContext.getSystemService(UsageStatsManager.class);

        Intent intent = new Intent(Intent.ACTION_MAIN);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                InstrumentationRegistry.getContext(),
                1, intent, PendingIntent.FLAG_MUTABLE_UNAUDITED);

        // Register too many AppUsageObservers
        for (int obsId = 0; obsId < OBSERVER_LIMIT; obsId++) {
            usm.registerAppUsageObserver(obsId, packages, 60, TimeUnit.MINUTES, pendingIntent);
        }
        try {
            usm.registerAppUsageObserver(OBSERVER_LIMIT, packages, 60, TimeUnit.MINUTES,
                    pendingIntent);
            fail(""Should have thrown an IllegalStateException"");
        } catch (IllegalStateException expected) {
            // Do nothing. Exception is expected.
        }

        // Register too many UsageSessionObservers.
        for (int obsId = 0; obsId < OBSERVER_LIMIT; obsId++) {
            usm.registerUsageSessionObserver(obsId, packages, Duration.ofSeconds(60),
                    Duration.ofSeconds(10), pendingIntent, null);
        }
        try {
            usm.registerUsageSessionObserver(OBSERVER_LIMIT, packages, Duration.ofSeconds(60),
                    Duration.ofSeconds(10), pendingIntent, null);
            fail(""Should have thrown an IllegalStateException"");
        } catch (IllegalStateException expected) {
            // Do nothing. Exception is expected.
        }

        for (int obsId = 0; obsId < OBSERVER_LIMIT; obsId++) {
            usm.unregisterAppUsageObserver(obsId);
        }

        for (int obsId = 0; obsId < OBSERVER_LIMIT; obsId++) {
            usm.unregisterUsageSessionObserver(obsId);
        }
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AppUsageObserverTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.ManagementTest"	"testProvisionManagedProfileNotAllowed"	""	"1: system"	"public void testProvisionManagedProfileNotAllowed() {
        DevicePolicyManager dpm = (DevicePolicyManager)
                mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);
        assertFalse(dpm.isProvisioningAllowed(
                DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.AdminActionBookkeepingTest"	"testIsDefaultInputMethodSet"	""	"1: user"	"public void testIsDefaultInputMethodSet() throws Exception {
        final String setting = Settings.Secure.DEFAULT_INPUT_METHOD;
        final ContentResolver resolver = getContext().getContentResolver();
        final String ime = Settings.Secure.getString(resolver, setting);

        Settings.Secure.putString(resolver, setting, ""com.test.1"");
        Thread.sleep(500);
        assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());

        mDevicePolicyManager.setSecureSetting(getWho(), setting, ""com.test.2"");
        Thread.sleep(500);
        assertTrue(mDevicePolicyManager.isCurrentInputMethodSetByOwner());

        Settings.Secure.putString(resolver, setting, ime);
        Thread.sleep(500);
        assertFalse(mDevicePolicyManager.isCurrentInputMethodSetByOwner());
    }

    /**
     * Test: It should be recored whether the Profile Owner or the user installed a CA cert.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.profileowner.AdminActionBookkeepingTest"	"testGetPolicyInstalledCaCerts"	""	"1: user"	"public void testGetPolicyInstalledCaCerts() throws Exception {
        final byte[] rawCert = TestCertificates.TEST_CA.getBytes();
        final Certificate cert = CertificateFactory.getInstance(""X.509"")
                .generateCertificate(new ByteArrayInputStream(rawCert));

        // Install a CA cert.
        KeyStore keyStore = KeyStore.getInstance(""AndroidCAStore"");
        keyStore.load(null, null);
        assertNull(keyStore.getCertificateAlias(cert));
        assertTrue(mDevicePolicyManager.installCaCert(getWho(), rawCert));
        final String alias = keyStore.getCertificateAlias(cert);
        assertNotNull(alias);

        // Verify that the CA cert was marked as installed by the Profile Owner.
        verifyOwnerInstalledStatus(alias, true);

        // Uninstall the CA cert.
        mDevicePolicyManager.uninstallCaCert(getWho(), rawCert);

        // Verify that the CA cert is no longer marked as installed by the Profile Owner.
        verifyOwnerInstalledStatus(alias, false);
    }

    private void verifyOwnerInstalledStatus(String alias, boolean expectOwnerInstalled) {
        final List<String> ownerInstalledCerts =
                mDevicePolicyManager.getOwnerInstalledCaCerts(Process.myUserHandle());
        assertNotNull(ownerInstalledCerts);
        assertEquals(expectOwnerInstalled, ownerInstalledCerts.contains(alias));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.customizationapp.CustomizationTest"	"testSetWallpaper_disallowed"	""	"2: system user"	"public void testSetWallpaper_disallowed() throws Exception {
        final WallpaperManager wallpaperManager = WallpaperManager.getInstance(mContext);
        final Bitmap originalWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        final Bitmap referenceWallpaper = BitmapUtils.generateRandomBitmap(97, 73);
        final UserManager userManager =
                (UserManager) mContext.getSystemService(Context.USER_SERVICE);
        assertTrue(userManager.hasUserRestriction(UserManager.DISALLOW_SET_WALLPAPER));

        // Checking setBitmap() method.
        wallpaperManager.setBitmap(referenceWallpaper);
        Thread.sleep(WAITING_TIME_MS);
        Bitmap newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));

        // Checking setStream() method.
        wallpaperManager.setStream(BitmapUtils.bitmapToInputStream(referenceWallpaper));
        Thread.sleep(WAITING_TIME_MS);
        newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));

        // Checking setResource() method.
        wallpaperManager.setResource(R.raw.wallpaper);
        Thread.sleep(WAITING_TIME_MS);
        newWallpaper = BitmapUtils.getWallpaperBitmap(mContext);
        assertTrue(BitmapUtils.compareBitmaps(newWallpaper, originalWallpaper));
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CustomizationApp/src/com/android/cts/customizationapp/CustomizationTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsNonTargetUserTest"	"testTargetUserIsNotInGetTargetProfiles"	""	"2: user apps"	"public void testTargetUserIsNotInGetTargetProfiles() {
        List<UserHandle> targetProfiles = mCrossProfileApps.getTargetUserProfiles();
        assertThat(targetProfiles).doesNotContain(mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsNonTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsNonTargetUserTest"	"testCannotStartActivity"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartActivity() {
        mCrossProfileApps.startMainActivity(
                MainActivity.getComponentName(mContext), mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsNonTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsNonTargetUserTest"	"testCannotGetProfileSwitchingLabel"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotGetProfileSwitchingLabel() throws Exception {
        mCrossProfileApps.getProfileSwitchingLabel(mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsNonTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsNonTargetUserTest"	"testCannotGetProfileSwitchingIconDrawable"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotGetProfileSwitchingIconDrawable() throws Exception {
        mCrossProfileApps.getProfileSwitchingIconDrawable(mTargetUser);
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsNonTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCannotStartActivityByIntentWithNoPermissions"	""	"2: user apps"	"(expected=SecurityException.class)
    public void testCannotStartActivityByIntentWithNoPermissions() {
        Intent intent = new Intent();
        intent.setComponent(MainActivity.getComponentName(mContext));
        ShellIdentityUtils.dropShellPermissionIdentity();

        mCrossProfileApps.startActivity(intent, mTargetUser, /* callingActivity= */ null);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartActivityByIntentWithInteractAcrossProfilesPermission"	""	"2: user apps"	"public void testCanStartActivityByIntentWithInteractAcrossProfilesPermission() {
        Intent intent = new Intent();
        intent.setComponent(MainActivity.getComponentName(mContext));
        ShellIdentityUtils.dropShellPermissionIdentity();

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> crossProfileApps.startActivity(
                        intent, mTargetUser, /* callingActivity= */ null),
                INTERACT_ACROSS_PROFILES);

        // Look for the text view to verify that MainActivity is started.
        UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                TIMEOUT_WAIT_UI);
        assertNotNull(""Failed to start main activity in target user"", textView);
        assertEquals(""Main Activity is started in wrong user"",
                String.valueOf(mUserSerialNumber), textView.getText());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartActivityByIntentWithInteractAcrossUsersPermission"	""	"2: user apps"	"public void testCanStartActivityByIntentWithInteractAcrossUsersPermission() {
        Intent intent = new Intent();
        intent.setComponent(MainActivity.getComponentName(mContext));
        ShellIdentityUtils.dropShellPermissionIdentity();

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> crossProfileApps.startActivity(
                        intent, mTargetUser, /* callingActivity= */ null),
                INTERACT_ACROSS_USERS);

        // Look for the text view to verify that MainActivity is started.
        UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                TIMEOUT_WAIT_UI);
        assertNotNull(""Failed to start main activity in target user"", textView);
        assertEquals(""Main Activity is started in wrong user"",
                String.valueOf(mUserSerialNumber), textView.getText());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartActivityByIntentWithInteractAcrossUsersFullPermission"	""	"2: user apps"	"public void testCanStartActivityByIntentWithInteractAcrossUsersFullPermission() {
        Intent intent = new Intent();
        intent.setComponent(MainActivity.getComponentName(mContext));
        ShellIdentityUtils.dropShellPermissionIdentity();

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> crossProfileApps.startActivity(
                        intent, mTargetUser, /* callingActivity= */ null),
                INTERACT_ACROSS_USERS_FULL);

        // Look for the text view to verify that MainActivity is started.
        UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                TIMEOUT_WAIT_UI);
        assertNotNull(""Failed to start main activity in target user"", textView);
        assertEquals(""Main Activity is started in wrong user"",
                String.valueOf(mUserSerialNumber), textView.getText());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCannotStartActivityWithImplicitIntent"	""	"2: user apps"	"(expected = NullPointerException.class)
    public void testCannotStartActivityWithImplicitIntent() {
        Intent nonMainActivityImplicitIntent = new Intent();
        nonMainActivityImplicitIntent.setAction(Intent.ACTION_VIEW);

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> crossProfileApps.startActivity(
                        nonMainActivityImplicitIntent, mTargetUser, /* callingActivity= */ null));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartMainActivityByIntent"	""	"2: user apps"	"public void testCanStartMainActivityByIntent() {
        Intent mainActivityIntent = new Intent();
        mainActivityIntent.setComponent(MainActivity.getComponentName(mContext));

        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                    mCrossProfileApps,
                    crossProfileApps -> mCrossProfileApps.startActivity(
                            mainActivityIntent, mTargetUser, /* callingActivity= */ null));

            // Look for the text view to verify that MainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start main activity in target user"", textView);
            assertEquals(""Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start main activity via CrossProfileApps#startActivity: "" + e);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartMainActivityByIntent_withOptionsBundle"	""	"2: user apps"	"public void testCanStartMainActivityByIntent_withOptionsBundle() throws Exception {
        Intent mainActivityIntent = new Intent();
        mainActivityIntent.setComponent(MainActivity.getComponentName(mContext));

        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                    mCrossProfileApps,
                    crossProfileApps ->
                            mCrossProfileApps.startActivity(
                                    mainActivityIntent,
                                    mTargetUser,
                                    /* callingActivity= */ null,
                                    ActivityOptions.makeBasic().toBundle()));

            // Look for the text view to verify that MainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start main activity in target user"", textView);
            assertEquals(""Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start main activity via CrossProfileApps#startActivity: "" + e);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartNonMainActivityByIntent"	""	"2: user apps"	"public void testCanStartNonMainActivityByIntent() {
        Intent nonMainActivityIntent = new Intent();
        nonMainActivityIntent.setComponent(NonMainActivity.getComponentName(mContext));

        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                    mCrossProfileApps,
                    crossProfileApps -> mCrossProfileApps.startActivity(
                            nonMainActivityIntent, mTargetUser, /* callingActivity= */ null));

            // Look for the text view to verify that NonMainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW_NONMAIN)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start non-main activity in target user"", textView);
            assertEquals(""Non-Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start non-main activity via CrossProfileApps#startActivity: "" + e);
        }
    }

    /**
     * Starts an activity in the same task in the target user. Asserts that the activity is
     * correctly started in the correct user, but the host-side test should verify that the tasks
     * are the same using the log messages printed by each activity.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testStartActivityIntent_sameTaskByDefault"	""	"1: user"	"public void testStartActivityIntent_sameTaskByDefault() throws Exception {
        try {
            final Intent crossProfileSameTaskCheckerIntent = new Intent();
            crossProfileSameTaskCheckerIntent.setComponent(
                    CrossProfileSameTaskLauncherActivity.getComponentName(mContext));
            crossProfileSameTaskCheckerIntent.putExtra(
                    CrossProfileSameTaskLauncherActivity.TARGET_USER_EXTRA, mTargetUser);
            mContext.startActivity(crossProfileSameTaskCheckerIntent);

            // Look for the text view to verify that NonMainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW_NONMAIN)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start non-main activity in target user"", textView);
            assertEquals(""Non-Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start cross-profile activity in the same task: "" + e);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testStartActivityIntent_crossProfile_returnsResult"	""	"2: user apps"	"public void testStartActivityIntent_crossProfile_returnsResult() throws Exception {
        try {
            mContext.startActivity(new Intent()
                    .setComponent(CrossProfileResultCheckerActivity.buildComponentName(mContext))
                    .putExtra(CrossProfileResultCheckerActivity.TARGET_USER_EXTRA, mTargetUser));

            final UiObject2 textView = mDevice.wait(
                    Until.findObject(
                            By.text(CrossProfileResultCheckerActivity.SUCCESS_MESSAGE)),
                    TIMEOUT_WAIT_UI);
            assertThat(textView).isNotNull();
        } catch (Exception e) {
            fail(""unable to start cross-profile activity to obtain a returned result: "" + e);
        }
    }

    /**
     * Calls {@link CrossProfileApps#startActivity(Intent, UserHandle, Activity)}. This can then be
     * used by host-side tests.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testStartActivityByIntent_noAsserts"	""	"2: user apps"	"public void testStartActivityByIntent_noAsserts() throws Exception {
        Intent nonMainActivityIntent = new Intent();
        nonMainActivityIntent.setComponent(NonMainActivity.getComponentName(mContext));

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> mCrossProfileApps.startActivity(
                        nonMainActivityIntent, mTargetUser, /* callingActivity= */ null));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartMainActivityByComponent"	""	"2: user apps"	"public void testCanStartMainActivityByComponent() {
        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mCrossProfileApps,
                    crossProfileApps -> mCrossProfileApps.startActivity(
                            MainActivity.getComponentName(mContext), mTargetUser));

            // Look for the text view to verify that MainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start main activity in target user"", textView);
            assertEquals(""Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start main activity via CrossProfileApps#startActivity: "" + e);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartNonMainActivityByComponent"	""	"2: user apps"	"public void testCanStartNonMainActivityByComponent() {
        try {
            ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(mCrossProfileApps,
                    crossProfileApps -> mCrossProfileApps.startActivity(
                            NonMainActivity.getComponentName(mContext), mTargetUser));

            // Look for the text view to verify that NonMainActivity is started.
            UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW_NONMAIN)),
                    TIMEOUT_WAIT_UI);
            assertNotNull(""Failed to start non-main activity in target user"", textView);
            assertEquals(""Non-Main Activity is started in wrong user"",
                    String.valueOf(mUserSerialNumber), textView.getText());
        } catch (Exception e) {
            fail(""unable to start non-main activity via CrossProfileApps#startActivity: "" + e);
        }
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCanStartNotExportedActivityByIntent"	""	"2: user apps"	"public void testCanStartNotExportedActivityByIntent() throws Exception {
        Intent nonExportedActivityIntent = new Intent();
        nonExportedActivityIntent.setComponent(NonExportedActivity.getComponentName(mContext));

        ShellIdentityUtils.invokeMethodWithShellPermissionsNoReturn(
                mCrossProfileApps,
                crossProfileApps -> mCrossProfileApps.startActivity(
                        nonExportedActivityIntent, mTargetUser, /* callingActivity= */ null));

        // Look for the text view to verify that NonExportedActivity is started.
        UiObject2 textView = mDevice.wait(Until.findObject(By.res(ID_USER_TEXTVIEW_NONMAIN)),
                TIMEOUT_WAIT_UI);
        assertNotNull(""Failed to start not exported activity in target user"", textView);
        assertEquals(""Not exported Activity is started in wrong user"",
                String.valueOf(mUserSerialNumber), textView.getText());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCannotStartNotExportedActivityByComponent"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartNotExportedActivityByComponent() throws Exception {
        mCrossProfileApps.startActivity(
                NonExportedActivity.getComponentName(mContext), mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCannotStartActivityInOtherPackageByIntent"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartActivityInOtherPackageByIntent() throws Exception {
        Intent otherPackageIntent = new Intent();
        otherPackageIntent.setComponent(new ComponentName(
                ""com.android.cts.launcherapps.simpleapp"",
                ""com.android.cts.launcherapps.simpleapp.SimpleActivity""));
        mCrossProfileApps.startActivity(
                otherPackageIntent, mTargetUser, /* callingActivity= */ null);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsStartActivityTest"	"testCannotStartActivityInOtherPackageByComponent"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartActivityInOtherPackageByComponent() throws Exception {
        mCrossProfileApps.startMainActivity(new ComponentName(
                ""com.android.cts.launcherapps.simpleapp"",
                ""com.android.cts.launcherapps.simpleapp.SimpleActivity""),
                mTargetUser
        );
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsStartActivityTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testTargetUserIsIngetTargetUserProfiles"	""	"2: user apps"	"public void testTargetUserIsIngetTargetUserProfiles() {
        List<UserHandle> targetProfiles = mCrossProfileApps.getTargetUserProfiles();
        assertThat(targetProfiles).contains(mTargetUser);
    }

    /**
     * Verify we succeed to start the activity in another profile by checking UI element.
     */"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testCanStartMainActivity"	""	"2: user apps"	"public void testCanStartMainActivity() throws Exception {
        mCrossProfileApps.startMainActivity(
                MainActivity.getComponentName(mContext), mTargetUser);

        // Look for the text view to verify that MainActivity is started.
        UiObject2 textView = mDevice.wait(
                Until.findObject(By.res(ID_USER_TEXTVIEW)),
                TIMEOUT_WAIT_UI);
        assertNotNull(""Failed to start activity in target user"", textView);
        // Look for the text in textview, it should be the serial number of target user.
        assertEquals(""Activity is started in wrong user"",
                String.valueOf(mUserSerialNumber),
                textView.getText());
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testCannotStartNotExportedActivity"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartNotExportedActivity() throws Exception {
        mCrossProfileApps.startMainActivity(
                NonExportedActivity.getComponentName(mContext), mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testCannotStartNonMainActivity"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartNonMainActivity() throws Exception {
        mCrossProfileApps.startMainActivity(
                NonMainActivity.getComponentName(mContext), mTargetUser);
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testCannotStartActivityInOtherPackage"	""	"2: user apps"	"(expected = SecurityException.class)
    public void testCannotStartActivityInOtherPackage() throws Exception {
        mCrossProfileApps.startMainActivity(new ComponentName(
                ""com.android.cts.launcherapps.simpleapp"",
                ""com.android.cts.launcherapps.simpleapp.SimpleActivity""),
                mTargetUser
        );
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testGetProfileSwitchingLabel"	""	"2: user apps"	"public void testGetProfileSwitchingLabel() throws Exception {
        assertNotNull(mCrossProfileApps.getProfileSwitchingLabel(mTargetUser));
    }"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testGetProfileSwitchingIconDrawable"	""	"2: user apps"	"public void testGetProfileSwitchingIconDrawable() throws Exception {
        assertNotNull(mCrossProfileApps.getProfileSwitchingIconDrawable(mTargetUser));
    }

    // Designed to be called by host-side tests; not a real test."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testStartMainActivity_noAsserts"	""	"2: user apps"	"public void testStartMainActivity_noAsserts() {
        mCrossProfileApps.startMainActivity(
                MainActivity.getComponentName(mContext), mTargetUser);
    }

    // Designed to be called by host-side tests; not a real test."	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
"2.2.5  . Security Model"	"9.8.2"	"H-5-3"	"9.8.2/H-5-3"	""	"""[9.8.2/H-5-3] MUST not hide the camera indicator for system apps that have visible user interfaces or direct user interaction. <h4 id=""226_developer_tools_and_options_compatibility"" """	""	"com.android.cts.crossprofileappstest.CrossProfileAppsTargetUserTest"	"testGetTargetUserProfiles_noAsserts"	""	"2: user apps apps"	"public void testGetTargetUserProfiles_noAsserts() {
        mCrossProfileApps.getTargetUserProfiles();
    }
}"	"/home/gpoor/cts-12-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsTargetUserTest.java"	""	""	""
