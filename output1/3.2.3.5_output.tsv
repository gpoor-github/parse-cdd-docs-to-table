Section	section_id	req_id	Test Availability	class_def	method	module	method_text	full_key	requirement	key_as_number	search_terms	manual_search_terms	not_search_terms	not_files	matched_terms	search_roots	qualified_method	max_matches	file_name	matched_files	methods_string	urls	protected	Area	Shortened	Test Level
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-6-1						3.2.3.5/C-6-1	"""C-6-1] MUST implement an activity that would respond to the intent ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS; which for implementations with UI_MODE_TYPE_NORMAL it MUST be an activity where the user can grant or deny the app access to DND policy configurations. If device implementations allow users to use third-party input methods on the device; they: """	03020305.670601	MODE_TYPE_NORMAL 3.2.3.5/C-6-1 C-6-1 DND ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS 3.2.3.5	*	*	*		*							*			
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-5-2		[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('android.ndef.cts.NdefTest', 1), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1)]	[('setUp', 13), ('tearDown', 11), ('getInstrumentation', 11), ('of', 8), ('getPackageName', 7), ('getId', 7), ('getContext', 6), ('build', 6), ('toString', 5), ('getActiveNotifications', 5), ('getBytes', 4), ('getContentResolver', 4), ('getMessage', 4), ('getWho', 4), ('getResources', 2), ('getSystem', 2), ('getPackageManager', 2), ('getRingerMode', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1), ('getUserId', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1)]	[('CtsAndroidAppTestCases', 12), ('CtsMediaTestCases', 9), ('CtsLegacyNotification27TestCases', 6), ('CtsTelecomTestCases', 1), ('CtsCameraTestCases', 1), ('CtsLegacyNotification20TestCases', 1), ('CtsNdefTestCases', 1), ('CtsAccessibilityServiceTestCases', 1), ('CtsLegacyNotification29TestCases', 1), ('CtsWindowManagerDeviceTestCases', 1)]		3.2.3.5/C-5-2	"""C-5-2] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_DISCOVERABLE’ intent and show a system activity that requests discoverable mode. If device implementations support the DND feature; they: """	03020305.670502	android.bluetooth.adapter.action.REQUEST C-5-2 REQUEST_DISCOVERABLE 3.2.3.5/C-5-2 DND 3.2.3.5				[('DND', 42), ('3.2.3.5', 1)]		[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases] [android.media.cts.AudioManagerTest testMuteDndAffectedStreams CtsMediaTestCases] [android.media.cts.AudioManagerTest testMuteDndUnaffectedStreams CtsMediaTestCases] [android.media.cts.AudioManagerTest testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases] [android.media.cts.AudioManagerTest testAdjustVolumeInPriorityOnly CtsMediaTestCases] [android.media.cts.AudioManagerTest testPriorityOnlyMuteAll CtsMediaTestCases] [android.media.cts.AudioManagerTest testPriorityOnlyMediaAllowed CtsMediaTestCases] [android.media.cts.AudioManagerTest testPriorityOnlyAlarmsAllowed CtsMediaTestCases] [android.media.cts.AudioManagerTest testPriorityOnlyChannelsCanBypassDnd CtsMediaTestCases] [android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicy CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicyMultiRules CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testCreateChannel CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testTotalSilenceOnlyMuteStreams CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testAlarmsOnlyMuteStreams CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_turnOff CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_deletedRule CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_multipleRules CtsAndroidAppTestCases] [android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases] [android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases] [android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases] [android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases] [android.app.notification.legacy.cts.ConditionProviderServiceTest testMethodsExistAndDoNotThrow CtsLegacyNotification27TestCases] [com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None] [com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStreamDndOn None] [com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStream None] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.hardware.camera2.cts.CameraManagerTest testCameraManagerWithDnD CtsCameraTestCases] [android.app.notification.legacy.cts.LegacyNotificationManagerTest testSetNotificationPolicy_preP_setOldNewFields CtsLegacyNotification27TestCases] [android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications CtsLegacyNotification20TestCases] [android.app.cts.NotificationChannelTest testConstructor CtsAndroidAppTestCases] [android.app.cts.NotificationChannelTest testWriteToParcel CtsAndroidAppTestCases] [android.ndef.cts.NdefTest testInvalidParsing CtsNdefTestCases] [android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent CtsAccessibilityServiceTestCases] [android.app.notification.legacy29.cts.NotificationManager29Test isNotificationPolicyAccessGranted CtsLegacyNotification29TestCases] [android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]		[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 5), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 1)]	[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2)]	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 3), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 2), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {         mDpm.uninstallCaCert(null, TEST_CA.getBytes());         super.tearDown();     }     ])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);             testStreamMuting(stream);         }     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                     mAudioManager.isStreamMute(stream));         }     }     ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);         assertFalse(createdChannel.canBypassDnd());     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);          assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);         assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");         } catch (Exception e) {             // pass         }     }     ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {             Log.d(TAG, service.getName() + "" has a correct bind state"");         }     } }])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());         tests.add(new TestSetRingerModePolicyAccess());         // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);         super.tearDown();     }     ])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);         }     }  }])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {       return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WATCH);     } }])', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                 // pass             }         }         return n;     } }])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);         assertEquals(channel, channel1);     }     ])', 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));             } catch (FormatException e) { }         }     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                 mContext, 0, new Intent(mContext, this.getClass()), 0);     }      ])', 1), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**      * Test: Retrieving security logs should update the corresponding timestamp.      */    ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                     results.get(resultKey));         }     }     ])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([1:/com/android/cts/profileowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.      */    ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-2-6						3.2.3.5/C-2-6	"""C-2-6] MUST honor the android.intent.action.SENDTO and android.intent.action.VIEW intents and provide an activity to send/display SMS messages. """	03020305.670206	C-2-6 3.2.3.5/C-2-6 SMS SENDTO android.intent.action.VIEW VIEW android.intent.action.SENDTO 3.2.3.5	*	*	*		*							*			
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-14-1						3.2.3.5/C-14-1	"""C-14-1] MUST fully implement the AutofillService and AutofillManager APIs and honor the android.settings.REQUEST_SET_AUTOFILL_SERVICE intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user. If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics; they: """	03020305.671401	C-14-1 REQUEST_SET_AUTOFILL_SERVICE android.settings.REQUEST 3.2.3.5/C-14-1 3.2.3.5	*	*	*		*							*			
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-11-1		[('android.webkit.cts.WebSettingsTest', 52), ('android.view.inputmethod.cts.FocusHandlingTest', 11), ('android.app.usage.cts.UsageStatsTest', 8), ('android.media.cts.AudioManagerTest', 7), ('com.android.server.cts.device.statsd.AtomTests', 6), ('android.graphics.fonts.FontTest', 6), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 6), ('android.bluetooth.cts.AdvertiseSettingsTest', 5), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTest', 5), ('com.android.cts.deviceowner.SetTimeTest', 5), ('android.bluetooth.cts.BluetoothLeScanTest', 5), ('android.view.accessibility.cts.AccessibilityManagerTest', 5), ('android.widget.cts.TextViewTest', 4), ('android.cts.backup.OtherSoundsSettingsHostSideTest', 4), ('com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity', 3), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 3), ('android.keystore.cts.KeyGeneratorTest', 3), ('android.tv.settings.cts.SettingsLeanbackTest', 3), ('android.text.style.cts.CharacterStyleTest', 3), ('android.voicesettings.cts.BatterySaverModeTest', 3), ('android.text.cts.StaticLayoutLineBreakingTest', 3), ('android.os.cts.batterysaving.BatterySaverLocationTest', 3), ('android.app.cts.NotificationManagerTest', 3), ('android.media.cts.AsyncPlayerTest', 3), ('com.android.server.cts.PowerIncidentTest', 2), ('com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest', 2), ('com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest', 2), ('android.view.inputmethod.cts.OnScreenPositionTest', 2), ('android.app.cts.TileServiceTest', 2), ('android.media.tv.cts.TvInputServiceTest', 2), ('android.text.style.cts.MetricAffectingSpanTest', 2), ('android.alarmmanager.cts.AppStandbyTests', 2), ('android.os.cts.batterysaving.BatterySaverTest', 2), ('android.provider.cts.settings.Settings_NameValueTableTest', 2), ('com.android.cts.externalstorageapp.ReadDefaultUris', 2), ('android.media.cts.RingtoneTest', 2), ('com.android.cts.deviceowner.CreateAndManageUserTest', 2), ('android.hardware.cts.SensorIntegrationTests', 2), ('android.app.usage.cts.AppIdleHostTest', 2), ('android.carrierapi.cts.NetworkScanApiTest', 2), ('android.server.wm.WindowInsetsAnimationTests', 2), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('android.hardware.camera2.cts.CaptureResultTest', 1), ('android.view.accessibility.cts.CaptioningManagerTest', 1), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 1), ('android.net.wifi.cts.ConcurrencyTest', 1), ('android.adbmanager.cts.AdbManagerHostDeviceTest', 1), ('android.hardware.cts.CameraTest', 1), ('android.hardware.camera2.cts.SurfaceViewPreviewTest', 1), ('android.provider.cts.contacts.VoicemailContractTest', 1), ('android.appsecurity.cts.PackageVisibilityTest', 1), ('android.media.cts.EnvReverbTest', 1), ('android.graphics.drawable.cts.VectorDrawableTest', 1), ('android.media.cts.EqualizerTest', 1), ('android.alarmmanager.cts.BackgroundRestrictedAlarmsTest', 1), ('android.net.cts.IpConfigurationTest', 1), ('android.nfc.cts.NfcPreferredPaymentTest', 1), ('android.autofillservice.cts.UserDataTest', 1), ('android.settings.cts.WifiSliceTest', 1), ('android.text.cts.StaticLayoutTest', 1), ('android.webkit.cts.WebViewRenderProcessClientTest', 1), ('android.webkit.cts.PostMessageTest', 1), ('android.view.accessibility.cts.AccessibilityServiceInfoTest', 1), ('android.hardware.camera2.cts.HeifWriterTest', 1), ('android.keystore.cts.SignatureTest', 1), ('com.android.cts.deviceandprofileowner.PolicyTransparencyTest', 1), ('com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest', 1), ('android.server.wm.MultiDisplayPolicyTests', 1), ('com.android.cts.deviceowner.WifiConfigLockdownTest', 1), ('android.appsecurity.cts.ApplicationVisibilityTest', 1), ('android.telecom.cts.RttOperationsTest', 1), ('android.media.cts.MediaControllerTest', 1), ('android.server.wm.VrDisplayTests', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.app.cts.ActivityManagerApi29Test', 1)]	[('getDevice', 37), ('setUp', 32), ('getInstrumentation', 26), ('tearDown', 18), ('getContext', 15), ('getPackageName', 14), ('getContentResolver', 8), ('getPackageManager', 8), ('build', 8), ('toString', 8), ('getId', 7), ('getActiveNotifications', 5), ('getWho', 5), ('notify', 4), ('getRingerMode', 4), ('size', 4), ('getTargetContext', 4), ('length', 4), ('getLineCount', 4), ('getMessage', 4), ('getUiAutomation', 4), ('BroadcastReceiver', 3), ('getResources', 3), ('getSimpleName', 3), ('updateTitle', 3), ('UnlockScreenRule', 2), ('trim', 2), ('getSystem', 2), ('resetCounts', 2), ('setUpPackage', 2), ('setup', 2), ('supportsHardware', 2), ('customSetup', 2), ('StringBuilder', 2), ('getMetricAffectingSpan', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('enableAppOps', 2), ('Object', 2), ('notifyAll', 2), ('hasWindowFocus', 2), ('BitSet', 1), ('WifiP2pGroup', 1), ('MySync', 1), ('MyResponse', 1), ('getAction', 1), ('getStdout', 1), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('StubCallback', 1), ('StubTimeShiftPositionCallback', 1), ('StubRecordingCallback', 1), ('resetPassedValues', 1), ('AccessibilityDumpOnFailureRule', 1), ('flattenToString', 1), ('getMinValueLength', 1), ('getMaxValueLength', 1), ('setFixtures', 1), ('elapsedRealtime', 1), ('TextPaint', 1), ('getAssets', 1), ('MetricAffectingSpan', 1), ('getLocationManager', 1), ('areOnlyIgnoreSettingsRequestsSentToProvider', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('saveTime', 1), ('restoreTime', 1), ('countDown', 1), ('getStreamType', 1), ('getConfiguredNetworks', 1), ('getAppIdleSettings', 1), ('start', 1), ('quit', 1), ('waitUntilReady', 1), ('waitUntilDone', 1), ('onLooperPrepared', 1), ('getLooper', 1), ('requestFocus', 1), ('get', 1), ('getViewTreeObserver', 1), ('getAdapter', 1), ('getWindow', 1), ('getDecorView', 1), ('systemBars', 1), ('getNetworkImageHtml', 1), ('supportsVrMode', 1), ('Intent', 1)]	[('CtsWebkitTestCases', 54), ('CtsMediaTestCases', 15), ('CtsInputMethodTestCases', 14), ('CtsBluetoothTestCases', 10), ('CtsTextTestCases', 9), ('CtsUsageStatsTestCases', 8), ('CtsAccessibilityTestCases', 7), ('CtsGraphicsTestCases', 7), ('CtsAndroidAppTestCases', 6), ('CtsTvTestCases', 5), ('CtsBatterySavingTestCases', 5), ('CtsWidgetTestCases', 4), ('CtsCameraTestCases', 4), ('CtsKeystoreTestCases', 4), ('CtsWindowManagerDeviceTestCases', 4), ('CtsWifiTestCases', 3), ('CtsProviderTestCases', 3), ('CtsAccessibilityServiceTestCases', 3), ('CtsAlarmManagerTestCases', 3), ('CtsVoiceSettingsTestCases', 3), ('CtsSensorTestCases', 2), ('CtsCarrierApiTestCases', 2), ('CtsNfcTestCases', 1), ('CtsAutoFillServiceTestCases', 1), ('CtsSettingsTestCases', 1), ('CtsTelecomTestCases', 1)]		3.2.3.5/C-11-1	"""C-11-1] MUST have an activity that handles the Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS intent but MAY implement it as a no-op. If device implementations declare the support for camera via android.hardware.camera.any they: """	03020305.671101	TINGS 3.2.3.5/C-11-1 Settings.ACTION android.hardware.camera.any C-11-1 ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET 3.2.3.5				[('TINGS', 223), ('Settings.ACTION', 4), ('android.hardware.camera.any', 1)]		[android.widget.cts.TextViewTest testGetFontFeatureSettings_returnsValueThatWasSet CtsWidgetTestCases] [android.widget.cts.TextViewTest testSetGetFontVariationSettings CtsWidgetTestCases] [android.widget.cts.TextViewTest testXmlTextAppearance CtsWidgetTestCases] [android.widget.cts.TextViewTest testFontFeatureSettings CtsWidgetTestCases] [android.hardware.camera2.cts.CaptureResultTest testResultTimestamps CtsCameraTestCases] [com.android.server.cts.PowerIncidentTest testPowerServiceDump None] [com.android.cts.deviceandprofileowner.OrgOwnedProfileOwnerParentTest testAddGetAndClearUserRestriction_onParent None] [android.view.accessibility.cts.CaptioningManagerTest testUserStyle CtsAccessibilityTestCases] [android.app.usage.cts.UsageStatsTest isAppStandbyEnabled CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testNoAccessSilentlyFails CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testUserForceIntoRestricted CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testUserForceIntoRestricted_BucketDisabled CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testUserLaunchRemovesFromRestricted CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testDefaultEnableRestrictedBucketOff CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testObserveUsagePermissionForRegisterObserver CtsUsageStatsTestCases] [android.app.usage.cts.UsageStatsTest testNoAccessSilentlyFails CtsUsageStatsTestCases] [com.android.cts.deviceandprofileowner.DevicePolicyLoggingTest testSetSecureSettingLogged None] [android.view.inputmethod.cts.OnScreenPositionTest launchTestActivity CtsInputMethodTestCases] [android.view.inputmethod.cts.OnScreenPositionTest testImeIsNotBehindNavBar CtsInputMethodTestCases] [com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testDelegatedCertInstallerDeviceIdAttestation None] [android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases] [android.hardware.cts.CameraTest testSceneMode CtsCameraTestCases] [android.hardware.camera2.cts.SurfaceViewPreviewTest testDeferredSurfaces CtsCameraTestCases] [android.app.cts.TileServiceTest testListening_stopped CtsAndroidAppTestCases] [android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases] [android.media.cts.AudioManagerTest testMicrophoneMute CtsMediaTestCases] [android.media.cts.AudioManagerTest testMicrophoneMuteIntent CtsMediaTestCases] [android.media.cts.AudioManagerTest testSoundEffects CtsMediaTestCases] [android.media.cts.AudioManagerTest testCheckingZenModeBlockDoesNotRequireNotificationPolicyAccess CtsMediaTestCases] [android.media.cts.AudioManagerTest testMusicActive CtsMediaTestCases] [android.media.cts.AudioManagerTest testAccessMode CtsMediaTestCases] [com.android.server.cts.device.statsd.AtomTests testBleScanOpportunistic None] [com.android.server.cts.device.statsd.AtomTests testBleScanUnoptimized None] [com.android.server.cts.device.statsd.AtomTests testBleScanResult None] [com.android.server.cts.device.statsd.AtomTests testBleScanInterrupted None] [com.android.server.cts.device.statsd.AtomTests testBlobStore None] [android.media.tv.cts.TvInputServiceTest TvInputServiceTest CtsTvTestCases] [android.media.tv.cts.TvInputServiceTest testTvInputServiceRecordingSession CtsTvTestCases] [android.provider.cts.contacts.VoicemailContractTest testStatusTable CtsProviderTestCases] [com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity testStarted None] [com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None] [com.android.cts.verifier.net.MultiNetworkConnectivityTestActivity startTest None] [android.media.cts.EnvReverbTest test1_5Properties CtsMediaTestCases] [android.media.cts.EqualizerTest test1_3Properties CtsMediaTestCases] [android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases] [android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases] [android.alarmmanager.cts.BackgroundRestrictedAlarmsTest testAlarmClockNotBlocked CtsAlarmManagerTestCases] [android.keystore.cts.KeyGeneratorTest testAesKeySupportedSizes CtsKeystoreTestCases] [android.keystore.cts.KeyGeneratorTest testDESKeySupportedSizes CtsKeystoreTestCases] [android.keystore.cts.KeyGeneratorTest testHmacKeySupportedSizes CtsKeystoreTestCases] [android.tv.settings.cts.SettingsLeanbackTest SettingsLeanbackTest CtsTvTestCases] [android.tv.settings.cts.SettingsLeanbackTest testLeanbackLauncherIntentCategory CtsTvTestCases] [android.tv.settings.cts.SettingsLeanbackTest testLeanbackSettingsIntentCategory CtsTvTestCases] [android.net.cts.IpConfigurationTest testConstructor None] [android.graphics.fonts.FontTest testBuilder_buffer_vf CtsGraphicsTestCases] [android.graphics.fonts.FontTest testBuilder_file_vf CtsGraphicsTestCases] [android.graphics.fonts.FontTest testBuilder_fd_vf CtsGraphicsTestCases] [android.graphics.fonts.FontTest testBuilder_fd_subdata_vf CtsGraphicsTestCases] [android.graphics.fonts.FontTest testBuilder_asset_vf CtsGraphicsTestCases] [android.graphics.fonts.FontTest testBuilder_resource_vf CtsGraphicsTestCases] [android.text.style.cts.CharacterStyleTest testWrap CtsTextTestCases] [android.text.style.cts.CharacterStyleTest testGetUnderlying CtsTextTestCases] [android.voicesettings.cts.BatterySaverModeTest testAll CtsVoiceSettingsTestCases] [android.text.style.cts.MetricAffectingSpanTest testGetUnderlying CtsTextTestCases] [android.settings.cts.WifiSliceTest isCar CtsSettingsTestCases] [android.alarmmanager.cts.AppStandbyTests setUpTests CtsAlarmManagerTestCases] [android.alarmmanager.cts.AppStandbyTests testPowerWhitelistedAlarmNotBlocked CtsAlarmManagerTestCases] [android.text.cts.StaticLayoutTest testIndent CtsTextTestCases] [android.os.cts.batterysaving.BatterySaverTest testCarModeExceptions CtsBatterySavingTestCases] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSetKeyGrant None] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testResetPasswordDeprecated None] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testIsDeviceOrganizationOwnedWithManagedProfile None] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testSecondaryLockscreen None] [android.webkit.cts.WebViewRenderProcessClientTest WebViewRenderProcessClientTest CtsWebkitTestCases] [android.provider.cts.settings.Settings_NameValueTableTest AdoptShellPermissionsRule CtsProviderTestCases] [android.provider.cts.settings.Settings_NameValueTableTest testPutString CtsProviderTestCases] [android.webkit.cts.PostMessageTest PostMessageTest CtsWebkitTestCases] [android.bluetooth.cts.AdvertiseSettingsTest testDefaultSettings CtsBluetoothTestCases] [android.bluetooth.cts.AdvertiseSettingsTest testDescribeContents CtsBluetoothTestCases] [android.bluetooth.cts.AdvertiseSettingsTest testReadWriteParcel CtsBluetoothTestCases] [android.bluetooth.cts.AdvertiseSettingsTest testIllegalTimeout CtsBluetoothTestCases] [android.view.accessibility.cts.AccessibilityServiceInfoTest testAccessibilityServiceInfoForEnabledService CtsAccessibilityTestCases] [android.text.cts.StaticLayoutLineBreakingTest testWithOneSpan CtsTextTestCases] [android.text.cts.StaticLayoutLineBreakingTest testWithTwoSpans CtsTextTestCases] [android.os.cts.batterysaving.BatterySaverLocationTest isLocationSettingsIgnored CtsBatterySavingTestCases] [android.os.cts.batterysaving.BatterySaverLocationTest testLocationAllDisabled CtsBatterySavingTestCases] [android.os.cts.batterysaving.BatterySaverLocationTest testLocationRequestThrottling CtsBatterySavingTestCases] [android.hardware.camera2.cts.HeifWriterTest testHeif CtsCameraTestCases] [android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testCanBubble_ranking CtsAndroidAppTestCases] [android.app.cts.NotificationManagerTest testShowBadging_ranking CtsAndroidAppTestCases] [com.android.cts.devicepolicy.MixedManagedProfileOwnerTest removeTestUsers None] [com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None] [com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetSystemSetting None] [com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None] [com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testProfileOwnerCanGetDeviceIdentifiers None] [android.keystore.cts.SignatureTest testEntropyConsumption CtsKeystoreTestCases] [com.android.cts.externalstorageapp.ReadDefaultUris testPlayDefaultUris None] [com.android.cts.deviceowner.SetTimeTest currentTimeMillis None] [com.android.cts.deviceowner.SetTimeTest testSetTime None] [com.android.cts.deviceowner.SetTimeTest testSetTimeFailWithAutoTimeOn None] [com.android.cts.deviceowner.SetTimeTest testSetTimeZone None] [com.android.cts.deviceowner.SetTimeTest testSetTimeZoneFailWithAutoTimezoneOn None] [com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest testInstallUpdate_charging_aboveThreshold_passesBatteryCheck None] [android.media.cts.RingtoneTest isPlaying CtsMediaTestCases] [android.media.cts.RingtoneTest testRingtone CtsMediaTestCases] [android.server.wm.MultiDisplayPolicyTests testRotationNotAffectingSecondaryScreen CtsWindowManagerDeviceTestCases] [com.android.cts.deviceowner.CreateAndManageUserTest testCreateAndManageUser_MaxUsers None] [android.hardware.cts.SensorIntegrationTests testSensorsWithSeveralClients CtsSensorTestCases] [android.app.usage.cts.AppIdleHostTest startAndStopTestApp None] [android.app.usage.cts.AppIdleHostTest testAppIsNotIdleAfterBeingLaunched None] [android.carrierapi.cts.NetworkScanApiTest adoptShellPermissionIdentity CtsCarrierApiTestCases] [android.carrierapi.cts.NetworkScanApiTest testNetworkScanPermission CtsCarrierApiTestCases] [android.view.inputmethod.cts.FocusHandlingTest getTestMarker CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testOnStartInputCalledOnceIme CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleWithoutFocusedEditorView CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testEditorStartsInput CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testSoftInputStateAlwaysVisibleFocusedEditorView CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testFocusableWindowDoesNotInvalidateExistingInputConnection CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testNonFocusablePopupWindowDoesNotAffectImeVisibility CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testRestartInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testSetShowInputOnFocus CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testMultiWindowFocusHandleOnDifferentUiThread CtsInputMethodTestCases] [android.view.inputmethod.cts.FocusHandlingTest testKeyboardStateAfterImeFocusableFlagChanged CtsInputMethodTestCases] [android.bluetooth.cts.BluetoothLeScanTest isEnabled CtsBluetoothTestCases] [android.bluetooth.cts.BluetoothLeScanTest testScanFilter CtsBluetoothTestCases] [android.bluetooth.cts.BluetoothLeScanTest testOpportunisticScan CtsBluetoothTestCases] [android.bluetooth.cts.BluetoothLeScanTest testBatchScan CtsBluetoothTestCases] [android.bluetooth.cts.BluetoothLeScanTest testStartScanPendingIntent CtsBluetoothTestCases] [android.server.wm.WindowInsetsAnimationTests testAnimationCallbacks_overlapping CtsWindowManagerDeviceTestCases] [android.webkit.cts.WebSettingsTest WebSettingsTest CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testUserAgentString_default CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessUserAgentString CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessAllowFileAccess CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessCacheMode_defaultValue CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessCacheMode_cacheElseNetwork CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessCacheMode_noCache CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessCacheMode_cacheOnly CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessCursiveFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessFantasyFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessFixedFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessSansSerifFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessSerifFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessStandardFontFamily CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessDefaultFontSize CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessDefaultFixedFontSize CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessDefaultTextEncodingName CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessJavaScriptCanOpenWindowsAutomatically CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessJavaScriptEnabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessLayoutAlgorithm CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessMinimumFontSize CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessMinimumLogicalFontSize CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessPluginsEnabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testOffscreenPreRaster CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessPluginsPath CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessTextSize CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessUseDoubleTree CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessUseWideViewPort CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testSetNeedInitialFocus CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testSetRenderPriority CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessSupportMultipleWindows CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessSupportZoom CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAccessBuiltInZoomControls CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAppCacheDisabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAppCacheEnabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testDatabaseDisabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testDisabledActionModeMenuItems CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_default CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_httpImagesLoaded CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_dataUriImagesLoaded CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_blockLoadingImages CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLoadsImagesAutomatically_loadImagesWithoutReload CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testBlockNetworkImage CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testBlockNetworkLoads CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testLocalImageLoads CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testIframesWhenAccessFromFileURLsEnabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testIframesWhenAccessFromFileURLsDisabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testXHRWhenAccessFromFileURLsDisabled CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testAllowMixedMode CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testEnableSafeBrowsing CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testForceDark_default CtsWebkitTestCases] [android.webkit.cts.WebSettingsTest testForceDark_rendersDark CtsWebkitTestCases] [android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases] [android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases] [android.view.accessibility.cts.AccessibilityManagerTest testGetInstalledAccessibilityServicesList CtsAccessibilityTestCases] [android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceList CtsAccessibilityTestCases] [android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceListForTypes CtsAccessibilityTestCases] [android.view.accessibility.cts.AccessibilityManagerTest testGetAccessibilityServiceList CtsAccessibilityTestCases] [android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases] [android.cts.backup.OtherSoundsSettingsHostSideTest testOtherSoundsSettings_dialPadTones None] [android.cts.backup.OtherSoundsSettingsHostSideTest testOtherSoundsSettings_touchSounds None] [android.cts.backup.OtherSoundsSettingsHostSideTest testOtherSoundsSettings_touchVibration None] [android.telecom.cts.RttOperationsTest testRemoteRttTermination CtsTelecomTestCases] [android.media.cts.MediaControllerTest testTransportControlsAndMediaSessionCallback CtsMediaTestCases] [android.server.wm.VrDisplayTests isUiModeLockedToVrHeadset CtsWindowManagerDeviceTestCases] [android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases] [android.media.cts.AsyncPlayerTest testAsyncPlayer CtsMediaTestCases] [android.media.cts.AsyncPlayerTest testAsyncPlayerAudioAttributes CtsMediaTestCases] [android.app.cts.ActivityManagerApi29Test clearHistory CtsAndroidAppTestCases]		[('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebSettingsTest.java', 52), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/FocusHandlingTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/app.usage/src/android/app/usage/cts/UsageStatsTest.java', 8), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 7), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/apps/statsdapp/src/com/android/server/cts/device/statsd/AtomTests.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/fonts/FontTest.java', 6), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseSettingsTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/SetTimeTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/BluetoothLeScanTest.java', 5), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/TextViewTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/backup/src/android/cts/backup/OtherSoundsSettingsHostSideTest.java', 4), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGeneratorTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/tv/settings/cts/SettingsLeanbackTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/CharacterStyleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/BatterySaverModeTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutLineBreakingTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/batterysaving/src/android/os/cts/batterysaving/BatterySaverLocationTest.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AsyncPlayerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/PowerIncidentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java', 2), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/OnScreenPositionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/TileServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/TvInputServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/style/cts/MetricAffectingSpanTest.java', 2), ('/home/gpoor/cts-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/AppStandbyTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/batterysaving/src/android/os/cts/batterysaving/BatterySaverTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_NameValueTableTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/ExternalStorageApp/src/com/android/cts/externalstorageapp/ReadDefaultUris.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/RingtoneTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/CreateAndManageUserTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/usage/src/android/app/usage/cts/AppIdleHostTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureResultTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/CaptioningManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/adbmanager/src/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/cts/CameraTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/contacts/VoicemailContractTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PackageVisibilityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EnvReverbTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/VectorDrawableTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EqualizerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/AlarmManager/src/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nfc/src/android/nfc/cts/NfcPreferredPaymentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/UserDataTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/settings/src/android/settings/cts/WifiSliceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewRenderProcessClientTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/PostMessageTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityServiceInfoTest.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/HeifWriterTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/SignatureTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/MultiDisplayPolicyTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/WifiConfigLockdownTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/ApplicationVisibilityTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/RttOperationsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaControllerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/VrDisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/ActivityManagerApi29Test.java', 1)]	[('/android/webkit/cts/WebSettingsTest.java', 53), ('/android/view/inputmethod/cts/FocusHandlingTest.java', 12), ('/android/app/usage/cts/UsageStatsTest.java', 10), ('/android/media/cts/AudioManagerTest.java', 8), ('/com/android/server/cts/device/statsd/AtomTests.java', 7), ('/android/graphics/fonts/FontTest.java', 7), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 7), ('/android/bluetooth/cts/AdvertiseSettingsTest.java', 6), ('/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 6), ('/com/android/cts/deviceowner/SetTimeTest.java', 6), ('/android/bluetooth/cts/BluetoothLeScanTest.java', 6), ('/android/view/accessibility/cts/AccessibilityManagerTest.java', 6), ('/android/widget/cts/TextViewTest.java', 5), ('/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java', 5), ('/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 5), ('/android/voicesettings/cts/BatterySaverModeTest.java', 5), ('/android/cts/backup/OtherSoundsSettingsHostSideTest.java', 5), ('/android/keystore/cts/KeyGeneratorTest.java', 4), ('/android/tv/settings/cts/SettingsLeanbackTest.java', 4), ('/android/text/style/cts/CharacterStyleTest.java', 4), ('/android/text/cts/StaticLayoutLineBreakingTest.java', 4), ('/android/os/cts/batterysaving/BatterySaverLocationTest.java', 4), ('/android/app/cts/NotificationManagerTest.java', 4), ('/android/media/cts/AsyncPlayerTest.java', 4), ('/com/android/server/cts/PowerIncidentTest.java', 3), ('/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java', 3), ('/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java', 3), ('/android/view/inputmethod/cts/OnScreenPositionTest.java', 3), ('/android/app/cts/TileServiceTest.java', 3), ('/android/media/tv/cts/TvInputServiceTest.java', 3), ('/android/text/style/cts/MetricAffectingSpanTest.java', 3), ('/android/alarmmanager/cts/AppStandbyTests.java', 3), ('/android/os/cts/batterysaving/BatterySaverTest.java', 3), ('/android/provider/cts/settings/Settings_NameValueTableTest.java', 3), ('/com/android/cts/externalstorageapp/ReadDefaultUris.java', 3), ('/android/media/cts/RingtoneTest.java', 3), ('/com/android/cts/deviceowner/CreateAndManageUserTest.java', 3), ('/android/hardware/cts/SensorIntegrationTests.java', 3), ('/android/app/usage/cts/AppIdleHostTest.java', 3), ('/android/carrierapi/cts/NetworkScanApiTest.java', 3), ('/android/server/wm/WindowInsetsAnimationTests.java', 3), ('/android/net/wifi/cts/WifiBackupRestoreTest.java', 3), ('/android/hardware/camera2/cts/CaptureResultTest.java', 2), ('/android/view/accessibility/cts/CaptioningManagerTest.java', 2), ('/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 2), ('/android/net/wifi/cts/ConcurrencyTest.java', 2), ('/android/adbmanager/cts/AdbManagerHostDeviceTest.java', 2), ('/android/hardware/cts/CameraTest.java', 2), ('/android/hardware/camera2/cts/SurfaceViewPreviewTest.java', 2), ('/android/provider/cts/contacts/VoicemailContractTest.java', 2), ('/android/appsecurity/cts/PackageVisibilityTest.java', 2), ('/android/media/cts/EnvReverbTest.java', 2), ('/android/graphics/drawable/cts/VectorDrawableTest.java', 2), ('/android/media/cts/EqualizerTest.java', 2), ('/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java', 2), ('/android/net/cts/IpConfigurationTest.java', 2), ('/android/nfc/cts/NfcPreferredPaymentTest.java', 2), ('/android/autofillservice/cts/UserDataTest.java', 2), ('/android/settings/cts/WifiSliceTest.java', 2), ('/android/text/cts/StaticLayoutTest.java', 2), ('/android/webkit/cts/WebViewRenderProcessClientTest.java', 2), ('/android/webkit/cts/PostMessageTest.java', 2), ('/android/view/accessibility/cts/AccessibilityServiceInfoTest.java', 2), ('/android/hardware/camera2/cts/HeifWriterTest.java', 2), ('/android/keystore/cts/SignatureTest.java', 2), ('/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java', 2), ('/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java', 2), ('/android/server/wm/MultiDisplayPolicyTests.java', 2), ('/com/android/cts/deviceowner/WifiConfigLockdownTest.java', 2), ('/android/appsecurity/cts/ApplicationVisibilityTest.java', 2), ('/android/telecom/cts/RttOperationsTest.java', 2), ('/android/media/cts/MediaControllerTest.java', 2), ('/android/server/wm/VrDisplayTests.java', 2), ('/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 2), ('/android/app/cts/ActivityManagerApi29Test.java', 2)]	"[('([1:/android/app/usage/cts/UsageStatsTest.java]:[TINGS]:[1]:method_text:[t apps     @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")    ])', 3), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 3), ('([3:/android/graphics/fonts/FontTest.java]:[TINGS]:[3]:method_text:[       assertNotNull(font.getBuffer());             assertNull(font.getFile());         }     }     ])', 2), ('([3:/android/graphics/fonts/FontTest.java]:[TINGS]:[3]:method_text:[         }             } finally {                 file.delete();             }         }     }     ])', 2), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[that javascript cross-domain request permissions matches file domain settings     // for iframes    ])', 2), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[     assertTrue(""The vibrating service should be installed."", vibratingServiceInstalled);     }     ])', 2), ('([4:/android/widget/cts/TextViewTest.java]:[TINGS]:[4]:method_text:[t"",                 ""\\""smcp\\"" on"", mTextView.getFontFeatureSettings());     }      @UiThreadTest    ])', 1), ('([31:/android/widget/cts/TextViewTest.java]:[TINGS]:[31]:method_text:[w.setFontVariationSettings("""");         assertNull(mTextView.getFontVariationSettings());     }     ])', 1), (""([1:/android/widget/cts/TextViewTest.java]:[TINGS]:[1]:method_text:[t colors can't be tested due to the default style overriding         // values b/63923542     }     ])"", 1), ('([6:/android/widget/cts/TextViewTest.java]:[TINGS]:[6]:method_text:[ation.waitForIdleSync();         assertEquals(""frac"", textView.getFontFeatureSettings());     }     ])', 1), ('([2:/android/hardware/camera2/cts/CaptureResultTest.java]:[TINGS]:[2]:method_text:[* End generated code      *~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~@~O@*/ }])', 1), ('([1:/com/android/server/cts/PowerIncidentTest.java]:[TINGS]:[1]:method_text:[s PowerIncidentTest extends ProtoDumpTestCase {     private static final int SYSTEM_UID = 1000;     ])', 1), ('([12:/com/android/server/cts/PowerIncidentTest.java]:[TINGS]:[12]:method_text:[           assertTrue(0 <= wl.getUid());             assertTrue(0 <= wl.getPid());         }     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[TINGS]:[1]:method_text:[not used in test.                     // UserManager.DISALLOW_DEBUGGING_FEATURES             );     ])', 1), ('([4:/com/android/cts/deviceandprofileowner/OrgOwnedProfileOwnerParentTest.java]:[TINGS]:[4]:method_text:[ns(ADMIN_RECEIVER_COMPONENT);         assertThat(restrictions.get(restriction)).isNull();     }     ])', 1), ('([2:/android/view/accessibility/cts/CaptioningManagerTest.java]:[TINGS]:[2]:method_text:[IOException e) {             throw new RuntimeException(""Failed to exec: "" + cmd);         }     } }])', 1), ('([9:/android/app/usage/cts/UsageStatsTest.java]:[TINGS]:[9]:method_text:[ity(clazz);         }     }      @AppModeFull(reason = ""No usage events access in instant apps"")    ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[TINGS]:[2]:method_text:[   Thread.sleep(500);     }      @AppModeFull(reason = ""No usage events access in instant apps"")    ])', 1), ('([2:/android/app/usage/cts/UsageStatsTest.java]:[TINGS]:[2]:method_text:[t apps     @AppModeFull(reason = ""Test APK Activity not found when installed as an instant app"")    ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[TINGS]:[1]:method_text:[n."");         } catch (SecurityException e) {             // Exception expected         }     }     ])', 1), ('([1:/android/app/usage/cts/UsageStatsTest.java]:[Settings.ACTION]:[1]:method_text:[   Thread.sleep(500);     }      @AppModeFull(reason = ""No usage events access in instant apps"")    ])', 1), ('([3:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[TINGS]:[3]:method_text:[droid.cts.permissionapp"";     public static final String PARAM_APP_TO_ENABLE = ""app_to_enable"";     ])', 1), ('([2:/com/android/cts/deviceandprofileowner/DevicePolicyLoggingTest.java]:[TINGS]:[2]:method_text:[MIN_RECEIVER_COMPONENT,                 DEFAULT_INPUT_METHOD, defaultInputMethodInitial);     }     ])', 1), ('([1:/android/view/inputmethod/cts/OnScreenPositionTest.java]:[TINGS]:[1]:method_text:[al int EXPECTED_KEYBOARD_HEIGHT = 100;      /**      * Regression test for Bug 33308065.      */    ])', 1), ('([1:/android/view/inputmethod/cts/OnScreenPositionTest.java]:[TINGS]:[1]:method_text:[ARD_HEIGHT,                     lastLayout.getInputViewBoundsInScreen().height());         }     } }])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[,                 ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);     }     ])', 1), ('([5:/android/net/wifi/cts/ConcurrencyTest.java]:[TINGS]:[5]:method_text:[to EnabledState         assertNotNull(mMySync.expectedNetworkInfo);          return true;     }     ])', 1), ('([1:/android/adbmanager/cts/AdbManagerHostDeviceTest.java]:[android.hardware.camera.any]:[1]:method_text:[has-feature "" + feature);         return Boolean.parseBoolean(result.getStdout().trim());     }     ])', 1), ('([30:/android/hardware/cts/CameraTest.java]:[TINGS]:[30]:method_text:[            }             }         }         terminateMessageLooper();     }      @UiThreadTest    ])', 1), ('([2:/android/hardware/camera2/cts/SurfaceViewPreviewTest.java]:[TINGS]:[2]:method_text:[     isA(CaptureRequest.class),                                 isA(CaptureFailure.class));     }  }])', 1), ('([2:/android/app/cts/TileServiceTest.java]:[TINGS]:[2]:method_text:[viceTest extends BaseTileServiceTest {     private final static String TAG = ""TileServiceTest"";     ])', 1), ('([1:/android/app/cts/TileServiceTest.java]:[TINGS]:[1]:method_text:[   initializeAndListen();         expandSettings(false);         waitForListening(false);     }     ])', 1), ('([5:/android/media/cts/AudioManagerTest.java]:[TINGS]:[5]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[);         mAudioManager.playSoundEffect(AudioManager.FX_FOCUS_NAVIGATION_RIGHT, volume);     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[TINGS]:[1]:method_text:[)     @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([3:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[3]:method_text:[NSTALLER, 98);         APP_OPS_ENUM_MAP.put(AppOpsManager.OPSTR_NO_ISOLATED_STORAGE, 99);     }     ])', 1), ('([5:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[5]:method_text:[tings.SCAN_MODE_OPPORTUNISTIC).build();         performBleScan(scanSettings, null,false);     }     ])', 1), ('([5:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[5]:method_text:[ttings.SCAN_MODE_LOW_LATENCY).build();         performBleScan(scanSettings, null, false);     }     ])', 1), ('([5:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[5]:method_text:[Builder();         performBleScan(scanSettings, Arrays.asList(scanFilter.build()), true);     }     ])', 1), ('([14:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[14]:method_text:[   sleep(2_000);             }             bleScanner.stopScan(scanCallback);         });     }     ])', 1), ('([1:/com/android/server/cts/device/statsd/AtomTests.java]:[TINGS]:[1]:method_text:[   callback.get(BLOB_COMMIT_CALLBACK_TIMEOUT_SEC, TimeUnit.SECONDS)).isEqualTo(0);         }     } }])', 1), ('([1:/android/media/tv/cts/TvInputServiceTest.java]:[TINGS]:[1]:method_text:[gTvInputService.sSession = null;         CountingTvInputService.sTvInputSessionId = null;     }     ])', 1), ('([32:/android/media/tv/cts/TvInputServiceTest.java]:[TINGS]:[32]:method_text:[nnelUri = null;             mRecordedProgramUri = null;             mError = null;         }     } }])', 1), ('([14:/android/provider/cts/contacts/VoicemailContractTest.java]:[TINGS]:[14]:method_text:[d, null, null, null);         assertEquals(0, cursor.getCount());         cursor.close();     }     ])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[TINGS]:[1]:method_text:[stCallback =             new MultinetworkTestCallback() {                  @Override                ])', 1), ('([2:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[TINGS]:[2]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1), ('([1:/com/android/cts/verifier/net/MultiNetworkConnectivityTestActivity.java]:[Settings.ACTION]:[1]:method_text:[}     }      private interface SetWifiCallback {         void onComplete(boolean isSuccess);     } }])', 1), ('([3:/android/appsecurity/cts/PackageVisibilityTest.java]:[TINGS]:[3]:method_text:[mand(""settings put global package_verifier_enable ""                 + mOldVerifierValue);     }     ])', 1), ('([11:/android/media/cts/EnvReverbTest.java]:[TINGS]:[11]:method_text:[------------------------      //Test case 2.0: test setEnabled() and getEnabled() in valid state    ])', 1), ('([2:/android/graphics/drawable/cts/VectorDrawableTest.java]:[TINGS]:[2]:method_text:[InstrumentationRegistry.getTargetContext();         mResources = mContext.getResources();     }     ])', 1), ('([13:/android/media/cts/EqualizerTest.java]:[TINGS]:[13]:method_text:[izer();         }     }      //Test case 1.4: test setBandLevel() throws exception after release    ])', 1), ('([3:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[TINGS]:[3]:method_text:[ailureRule =             new AccessibilityDumpOnFailureRule();      @MediumTest     @AppModeFull    ])', 1), ('([7:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[TINGS]:[7]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";         assertTrue(message, !resolvedActivities.isEmpty());     } } ])', 1), ('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[Settings.ACTION]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";         assertTrue(message, !resolvedActivities.isEmpty());     } } ])', 1), ('([2:/android/alarmmanager/cts/BackgroundRestrictedAlarmsTest.java]:[TINGS]:[2]:method_text:[arms && SystemClock.uptimeMillis() < deadLine);         return alarmCount >= expectedAlarms;     } }])', 1), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[TINGS]:[2]:method_text:[;             }         }     }      // TODO: This test will fail until b/117509689 is resolved.    ])', 1), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[TINGS]:[2]:method_text:[test will continue to fail until b/117509689 is resolved***"", e);             }         }     }     ])', 1), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[TINGS]:[2]:method_text:[      + "". Use Strongbox: "" + useStrongbox, e);                 }             }         }     }     ])', 1), ('([8:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[8]:method_text:[hat can handle LEANBACK_LAUNCHER      * category intent.      *      * @throws Exception      */    ])', 1), ('([1:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[1]:method_text:[hat can handle LEANBACK_SETTINGS      * category intent.      *      * @throws Exception      */    ])', 1), ('([2:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[2]:method_text:[one or more activity can handle this intent.         assertTrue(resolveInfoList.size() > 0);     } }])', 1), ('([16:/android/net/cts/IpConfigurationTest.java]:[TINGS]:[16]:method_text:[      assertEquals(source.getStaticIpConfiguration(), target.getStaticIpConfiguration());     }     ])', 1), ('([3:/android/graphics/fonts/FontTest.java]:[TINGS]:[3]:method_text:[etFile());             } finally {                 file.delete();             }         }     }     ])', 1), ('([3:/android/graphics/fonts/FontTest.java]:[TINGS]:[3]:method_text:[+ font.getBuffer());             assertNull(""ResId=#"" + resId, font.getFile());         }     }     ])', 1), ('([3:/android/nfc/cts/NfcPreferredPaymentTest.java]:[TINGS]:[3]:method_text:[void tearDown() throws Exception {     }      /** Tests getAidsForPreferredPaymentService API */    ])', 1), ('([16:/android/autofillservice/cts/UserDataTest.java]:[TINGS]:[16]:method_text:[c void setFixtures() {         mBuilder = new UserData.Builder(mId, mValue, mCategoryId);     }     ])', 1), ('([1:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[1]:method_text:[unit.runner.RunWith;  @SmallTest @RunWith(AndroidJUnit4.class) public class CharacterStyleTest {    ])', 1), ('([8:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[8]:method_text:[ll);         assertNotNull(result);         assertTrue(result instanceof CharacterStyle);     }     ])', 1), ('([5:/android/text/style/cts/CharacterStyleTest.java]:[TINGS]:[5]:method_text:[acterStyle {         @Override         public void updateDrawState(TextPaint tp) {         }     } }])', 1), ('([5:/android/voicesettings/cts/BatterySaverModeTest.java]:[TINGS]:[5]:method_text:[  mHasFeature = mContext.getPackageManager().hasSystemFeature(FEATURE_VOICE_RECOGNIZERS);     }     ])', 1), ('([1:/android/voicesettings/cts/BatterySaverModeTest.java]:[TINGS]:[1]:method_text:[text.getSystemService(Context.POWER_SERVICE);         return powerManager.isPowerSaveMode();     } }])', 1), ('([1:/android/voicesettings/cts/BatterySaverModeTest.java]:[Settings.ACTION]:[1]:method_text:[  mHasFeature = mContext.getPackageManager().hasSystemFeature(FEATURE_VOICE_RECOGNIZERS);     }     ])', 1), ('([2:/android/text/style/cts/MetricAffectingSpanTest.java]:[TINGS]:[2]:method_text:[runner.RunWith;  @SmallTest @RunWith(AndroidJUnit4.class) public class MetricAffectingSpanTest {    ])', 1), ('([11:/android/text/style/cts/MetricAffectingSpanTest.java]:[TINGS]:[11]:method_text:[{         }          @Override         public void updateDrawState(TextPaint tp) {         }     } }])', 1), ('([6:/android/settings/cts/WifiSliceTest.java]:[TINGS]:[6]:method_text:[stant)) {       Secure.putString(mContext.getContentResolver(), ASSISTANT, mAssistant);     }   }   ])', 1), ('([15:/android/alarmmanager/cts/AppStandbyTests.java]:[TINGS]:[15]:method_text:[  assertTrue(""Alarm exceeding quota not delivered after expected delay"", waitForAlarm());     }     ])', 1), ('([3:/android/alarmmanager/cts/AppStandbyTests.java]:[TINGS]:[3]:method_text:[        }     }      @FunctionalInterface     interface Condition {         boolean isMet();     } }])', 1), ('([4:/android/text/cts/StaticLayoutTest.java]:[TINGS]:[4]:method_text:[MP = drawToBitmap(resultLayout);          assertTrue(msg, resultBMP.sameAs(expectedBMP));     }     ])', 1), ('([1:/android/os/cts/batterysaving/BatterySaverTest.java]:[TINGS]:[1]:method_text:[attery saver and make sure the relevant components get notifed.      * @throws Exception      */    ])', 1), ('([4:/android/os/cts/batterysaving/BatterySaverTest.java]:[TINGS]:[4]:method_text:[  SettingsUtils.delete(SettingsUtils.NAMESPACE_GLOBAL, ""battery_saver_constants"");         }     } }])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ getDevice().executeShellCommand(""input keyevent 3"");         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[n app, that tries to set wallpaper.     // Non-admin apps must not violate any user restriction.    ])', 1), ('([4:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[4]:method_text:[teDeviceTestMethod("".LockTaskHostDrivenTest"", ""testCleanupLockTask_noAsserts"");         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[iceTestMethod("".ResetPasswordTest"", ""testResetPasswordDeprecated"");     }      @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ ""testCallingIsOrganizationOwnedWithManagedProfileExpectingFalse"");     }      @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[TINGS]:[1]:method_text:[and(                 restricted ? RESTRICT_BACKGROUND_ON_CMD : RESTRICT_BACKGROUND_OFF_CMD);     } }])', 1), ('([1:/android/webkit/cts/WebViewRenderProcessClientTest.java]:[TINGS]:[1]:method_text:[       blockRenderProcess(blocker);         WebkitUtils.waitForFuture(rendererUnblocked);     }     ])', 1), ('([4:/android/provider/cts/settings/Settings_NameValueTableTest.java]:[TINGS]:[4]:method_text:[    @Rule     public AdoptShellPermissionsRule shellPermRule = new AdoptShellPermissionsRule();     ])', 1), ('([2:/android/provider/cts/settings/Settings_NameValueTableTest.java]:[TINGS]:[2]:method_text:[inally {             // TODO should clean up more better             c.close();         }     }     ])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[TINGS]:[1]:method_text:[ng-webview-cts.      */     // Post a string message to main frame and make sure it is received.    ])', 1), ('([3:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[TINGS]:[3]:method_text:[rtiseSettings}.  */ public class AdvertiseSettingsTest extends AndroidTestCase {      @SmallTest    ])', 1), ('([10:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[TINGS]:[10]:method_text:[s(0, settings.getTimeout());         assertTrue(settings.isConnectable());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[TINGS]:[4]:method_text:[s.Builder().build();         assertEquals(0, settings.describeContents());     }      @SmallTest    ])', 1), ('([15:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[TINGS]:[15]:method_text:[gsFromParcel.getTimeout());         assertFalse(settings.isConnectable());     }      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseSettingsTest.java]:[TINGS]:[2]:method_text:[s"");         } catch (IllegalArgumentException e) {             // nothing to do.         }      } }])', 1), ('([1:/android/view/accessibility/cts/AccessibilityServiceInfoTest.java]:[TINGS]:[1]:method_text:[s(/* expected= */ 1000,                 speakingService.getNonInteractiveUiTimeoutMillis());     } }])', 1), ('([6:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[6]:method_text:[,                     Spanned.SPAN_INCLUSIVE_INCLUSIVE);         }         return result;     }     ])', 1), ('([4:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[4]:method_text:[SIVE);                     layout(ssb, breaks);                 }             }         }     }     ])', 1), ('([8:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[8]:method_text:[char c, char r) {         return string.replaceAll(String.valueOf(c), String.valueOf(r));     }     ])', 1), ('([16:/android/os/cts/batterysaving/BatterySaverLocationTest.java]:[TINGS]:[16]:method_text:[    * Test for the {@link PowerManager#LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF} mode.      */    ])', 1), ('([4:/android/os/cts/batterysaving/BatterySaverLocationTest.java]:[TINGS]:[4]:method_text:[ Test for the {@link PowerManager#LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF} mode.      */    ])', 1), ('([11:/android/os/cts/batterysaving/BatterySaverLocationTest.java]:[TINGS]:[11]:method_text:[           mLocationManager.getTestProviderCurrentRequests(TEST_PROVIDER_NAME).size() >= 2);     } }])', 1), ('([1:/android/hardware/camera2/cts/HeifWriterTest.java]:[TINGS]:[1]:method_text:[           }             // TODO: add more key validations.         }         return result;     } }])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[6]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([2:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[2]:method_text:[ertFalse(outRanking.canBubble());             }         }          mListener.resetData();     }     ])', 1), ('([10:/android/app/cts/NotificationManagerTest.java]:[TINGS]:[10]:method_text:[                       Settings.Secure.NOTIFICATION_BADGING, originalBadging));         }     }     ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[s in the primary user when the policy      * is set on the profile owner.      */     @LargeTest    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[   super.testAlwaysOnVpnUnsupportedPackageReplaced();     }      @Override     @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ // Managed profile owner cannot set currently whitelisted system settings.     }      @Override    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ngSettings() {         // Managed profiles are not allowed to use lock task     }      @Override    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[wnerCanGetDeviceIdentifiersWithPermission"", mUserId);     }      @Override     @LockSettingsTest    ])', 1), ('([2:/android/keystore/cts/SignatureTest.java]:[TINGS]:[2]:method_text:[gAlgorithm + "" with key "" + key.getAlias(), e);                 }             }         }     }     ])', 1), ('([1:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[TINGS]:[1]:method_text:[         mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);     }     ])', 1), ('([3:/com/android/cts/externalstorageapp/ReadDefaultUris.java]:[TINGS]:[3]:method_text:[(timeToPlayMs);         mp.stop();         mp.release();         Thread.sleep(timeToPlayMs);     } }])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:[* 1000);         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:["");         testSetTimeWithValue(TEST_TIME_1);         testSetTimeWithValue(TEST_TIME_2);     }     ])', 1), ('([1:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[1]:method_text:[       }         } finally {             mContext.unregisterReceiver(receiver);         }     }     ])', 1), ('([2:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[2]:method_text:[ePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME_ZONE, ""1"");         }     }     ])', 1), ('([3:/com/android/cts/deviceowner/SetTimeTest.java]:[TINGS]:[3]:method_text:[;          mDevicePolicyManager.setGlobalSetting(getWho(), Settings.Global.AUTO_TIME, ""1"");      } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java]:[TINGS]:[1]:method_text:[ extends BaseDeviceAdminTest {      private static final String TAG = ""PolicyTransparencyTest"";     ])', 1), ('([3:/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java]:[TINGS]:[3]:method_text:[eviceAB() {         return ""true"".equalsIgnoreCase(SystemProperties.get(AB_DEVICE_KEY, """"));     } }])', 1), ('([5:/android/media/cts/RingtoneTest.java]:[TINGS]:[5]:method_text:[PackageManager()                 .hasSystemFeature(PackageManager.FEATURE_LEANBACK_ONLY);     }     ])', 1), ('([2:/android/media/cts/RingtoneTest.java]:[TINGS]:[2]:method_text:[gtone.isPlaying());         mRingtone.stop();         assertFalse(mRingtone.isPlaying());     }     ])', 1), ('([1:/android/server/wm/MultiDisplayPolicyTests.java]:[TINGS]:[1]:method_text:[isplay off does not affect the activity running      * on an external secondary display.      */    ])', 1), ('([3:/com/android/cts/deviceowner/WifiConfigLockdownTest.java]:[TINGS]:[3]:method_text:[anager.removeNetwork(config.networkId);             }         }         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[TINGS]:[1]:method_text:[earUserRestriction(getWho(), UserManager.DISALLOW_REMOVE_USER);         super.tearDown();     }     ])', 1), ('([2:/com/android/cts/deviceowner/CreateAndManageUserTest.java]:[TINGS]:[2]:method_text:[text.getContentResolver(),                         Settings.Secure.USER_SETUP_COMPLETE));     }     ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[TINGS]:[1]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1), ('([2:/android/hardware/cts/SensorIntegrationTests.java]:[TINGS]:[2]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1), ('([13:/android/app/usage/cts/AppIdleHostTest.java]:[TINGS]:[13]:method_text:[HOME"");     }      /**      * Tests that the app is not idle right after it is launched.      */    ])', 1), ('([3:/android/app/usage/cts/AppIdleHostTest.java]:[TINGS]:[3]:method_text:[tring.trim());         } catch (NumberFormatException nfe) {         }         return -1;     }     ])', 1), ('([1:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[1]:method_text:[Specifier;     }      /**      * Tests that the device properly requests a network scan.      */    ])', 1), ('([14:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[14]:method_text:[20"");         return mccMncs;     }      /**      * To test its constructor and getters.      */    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[KER_PREFIX + ""/""  + SystemClock.elapsedRealtimeNanos();     }      @FlakyTest(bugId = 149246840)    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[gFalse(""onStartInput"", marker),                            NOT_EXPECT_TIMEOUT);         }     }     ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[ event -> ""showSoftInput"".equals(event.getEventName()), TIMEOUT);             }         }     }     ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[           expectEvent(stream, editorMatcher(""onStartInput"", marker), TIMEOUT);         }     }     ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[}.</p>      *      * @see android.view.WindowManager.LayoutParams#mayUseInputMethod(int)      */    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[ with      * {@link PopupWindow#INPUT_METHOD_NEEDED} does not affect IME visibility.</p>      */    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[hould continue to work after      * the IME target application gains window focus again.      */    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[         }     }      /**      * Test {@link EditText#setShowSoftInputOnFocus(boolean)}.      */    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[ }      @AppModeFull(reason = ""Instant apps cannot hold android.permission.SYSTEM_ALERT_WINDOW"")    ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[           () -> TextUtils.equals(editText.getText(), ""test commit""), TIMEOUT);         }     }     ])', 1), ('([1:/android/view/inputmethod/cts/FocusHandlingTest.java]:[TINGS]:[1]:method_text:[ll AutoCloseable autoCloseable) {             return new CloseOnce(autoCloseable);         }     } }])', 1), ('([3:/android/appsecurity/cts/ApplicationVisibilityTest.java]:[TINGS]:[3]:method_text:[mand(""settings put global package_verifier_enable ""                 + mOldVerifierValue);     }     ])', 1), ('([1:/android/bluetooth/cts/BluetoothLeScanTest.java]:[TINGS]:[1]:method_text:[t case for BLE scans. Checks BLE scan timestamp is within correct range.      */     @MediumTest    ])', 1), ('([5:/android/bluetooth/cts/BluetoothLeScanTest.java]:[TINGS]:[5]:method_text:[ore explicit scan. //     * TODO(b/70865144): re-enable this test. //     */ //    @MediumTest //   ])', 1), ('([10:/android/bluetooth/cts/BluetoothLeScanTest.java]:[TINGS]:[10]:method_text:[ults().isEmpty()); //    }      /**      * Test case for BLE Batch scan.      */     @MediumTest    ])', 1), ('([5:/android/bluetooth/cts/BluetoothLeScanTest.java]:[TINGS]:[5]:method_text:[   }      /**      * Test case for starting a scan with a PendingIntent.      */     @MediumTest    ])', 1), ('([6:/android/bluetooth/cts/BluetoothLeScanTest.java]:[TINGS]:[6]:method_text:[BatchScanSupported() {         return mBluetoothAdapter.isOffloadedScanBatchingSupported();     }  }])', 1), ('([1:/android/server/wm/WindowInsetsAnimationTests.java]:[TINGS]:[1]:method_text:[getWindow().getDecorView();         assumeTrue(hasWindowInsets(mRootView, systemBars()));     }     ])', 1), ('([1:/android/server/wm/WindowInsetsAnimationTests.java]:[TINGS]:[1]:method_text:[ack.statusAnimSteps.size() - 1).insets                         .getInsets(statusBars()));     }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[>.<minor>      * Chrome/<major>.<minor>.<branch>.<build>[ Mobile] Safari/<major>.<minor>      */    ])', 1), (""([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[erifies that the useragent testing regex is actually correct, because it's very complex.      */    ])"", 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[AndWaitForCompletion(url);         assertEquals(customUserAgent, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[with file access disabled"",                 dataDirTitle.equals(mOnUiThread.getTitle()));     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[Sync();         Thread.sleep(100); // Wait for open to be received on the icon db thread.     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[hing resource"",                 requestCountAfterSecondLoad, requestCountAfterFirstLoad);     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d of caching"",                 requestCountAfterSecondLoad > requestCountAfterFirstLoad);     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[ of fetching resource"",                 requestCountAfterFirstLoad, initialRequestCount);     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewCusiveFamily);         assertEquals(newCusiveFamily, mSettings.getCursiveFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[FantasyFamily);         assertEquals(newFantasyFamily, mSettings.getFantasyFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newFixedFamily);         assertEquals(newFixedFamily, mSettings.getFixedFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ewFixedFamily);         assertEquals(newFixedFamily, mSettings.getSansSerifFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ly(newSerifFamily);         assertEquals(newSerifFamily, mSettings.getSerifFontFamily());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ndardFamily);         assertEquals(newStandardFamily, mSettings.getStandardFontFamily());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setDefaultFontSize(10);         assertEquals(10, mSettings.getDefaultFontSize());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[tDefaultFixedFontSize(10);         assertEquals(10, mSettings.getDefaultFixedFontSize());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[dingName);         assertEquals(newEncodingName, mSettings.getDefaultTextEncodingName());     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[Url(TestHtmlConstants.POPUP_URL));         WebkitUtils.waitForFuture(createWindowFuture);     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[  return ""javascript off"".equals(mOnUiThread.getTitle());             }         }.run();      }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ assertEquals(WebSettings.LayoutAlgorithm.SINGLE_COLUMN, mSettings.getLayoutAlgorithm());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[ettings.setMinimumFontSize(10);         assertEquals(10, mSettings.getMinimumFontSize());     }     ])', 1), ('([7:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[7]:method_text:[imumLogicalFontSize(10);         assertEquals(10, mSettings.getMinimumLogicalFontSize());     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[tings.setOffscreenPreRaster(true);         assertTrue(mSettings.getOffscreenPreRaster());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[nPath);         assertEquals(""Plugin path always empty"", """", mSettings.getPluginsPath());     }     ])', 1), ('([10:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[10]:method_text:[ize(TextSize.SMALLEST);         assertEquals(TextSize.SMALLEST, mSettings.getTextSize());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[         assertFalse(""setUseDoubleTree should be a no-op"", mSettings.getUseDoubleTree());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[  mSettings.setUseWideViewPort(true);         assertTrue(mSettings.getUseWideViewPort());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[      mSettings.setNeedInitialFocus(false);          mSettings.setNeedInitialFocus(true);     }     ])', 1), ('([6:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[6]:method_text:[erPriority.LOW);          mSettings.setRenderPriority(WebSettings.RenderPriority.NORMAL);     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[.setSupportMultipleWindows(true);         assertTrue(mSettings.supportMultipleWindows());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[;          mSettings.setSupportZoom(false);         assertFalse(mSettings.supportZoom());     }     ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[ngs.setBuiltInZoomControls(true);         assertTrue(mSettings.getBuiltInZoomControls());     }     ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[ccur.         Thread.sleep(1000);         assertEquals(""Loaded"", mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[res creating a     // webChromeClient and listening to Quota callbacks, which is not documented.    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([9:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[9]:method_text:[ms(i);             assertEquals(i, mSettings.getDisabledActionModeMenuItems());         }     }     ])', 1), ('([1:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[1]:method_text:[           return;         }         assertTrue(mSettings.getLoadsImagesAutomatically());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[, ""text/html"", null);         assertEquals(NETWORK_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ ""text/html"", null);         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[ML, ""text/html"", null);         assertEquals(EMPTY_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[tForNonEmptyImage();         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ ""text/html"", null);         assertEquals(DATA_URL_IMAGE_HEIGHT, mOnUiThread.getTitle());     }     ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[d.getTitle());     }      // Verify that an image in local file system can be loaded by an asset    ])', 1), ('([3:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[3]:method_text:[     // Verify that enabling file access from file URLs enable XmlHttpRequest (XHR) across files    ])', 1), ('([4:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[4]:method_text:[ename, Context.MODE_PRIVATE);         fos.write(content.getBytes());         fos.close();     }     ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([5:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[5]:method_text:[ram.put(pixel, histogram.getOrDefault(pixel, 0) + 1);         }         return histogram;     }     ])', 1), ('([2:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[2]:method_text:[          params.width = width;             webView.setLayoutParams(params);         });      }     ])', 1), ('([8:/android/webkit/cts/WebSettingsTest.java]:[TINGS]:[8]:method_text:[e assertions.             WebkitUtils.waitForNextQueueElement(mReceivedIconQueue);         }     } }])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[TINGS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.      */    ])"", 1), ('([6:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[TINGS]:[6]:method_text:[ is deserialized correctly from AOSP      * legacy supplicant/ipconf backup data format.      */    ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[         assertTrue(""The vibrating service should be enabled."", vibratingServiceEnabled);     }     ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[               multipleFeedbackTypesServiceEnabled);     }      @SuppressWarnings(""deprecation"")    ])', 1), ('([8:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[8]:method_text:[;         } catch (IOException e) {             fail(""Fail to run shell command"");         }     } }])', 1), ('([9:/android/cts/backup/OtherSoundsSettingsHostSideTest.java]:[TINGS]:[9]:method_text:[llPackage(APP_PACKAGE));     }      /**      * Test backup and restore of Dial pad tones      */    ])', 1), ('([2:/android/cts/backup/OtherSoundsSettingsHostSideTest.java]:[TINGS]:[2]:method_text:[dsSettings_dialPadTones"");     }      /**      * Test backup and restore of Touch sounds      */    ])', 1), ('([2:/android/cts/backup/OtherSoundsSettingsHostSideTest.java]:[TINGS]:[2]:method_text:[Settings_touchSounds"");     }      /**      * Test backup and restore of Touch vibration      */    ])', 1), ('([2:/android/cts/backup/OtherSoundsSettingsHostSideTest.java]:[TINGS]:[2]:method_text:[ DeviceNotAvailableException {         checkDeviceTest(APP_PACKAGE, TEST_CLASS, methodName);     } }])', 1), (""([2:/android/telecom/cts/RttOperationsTest.java]:[TINGS]:[2]:method_text:[  // If the setting hasn't been set yet, assume it's off             return false;         }     } }])"", 1), ('([2:/android/media/cts/MediaControllerTest.java]:[TINGS]:[2]:method_text:[                 mSpeed = speed;                 mWaitLock.notify();             }         }     } }])', 1), ('([9:/android/server/wm/VrDisplayTests.java]:[TINGS]:[9]:method_text:[ }     }      /**      * Tests that any new activity launch in Vr mode is in Vr display.      */    ])', 1), ('([2:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[TINGS]:[2]:method_text:[ /**      * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.      */    ])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[.AndroidTestCase;  @NonMediaMainlineTest public class AsyncPlayerTest extends AndroidTestCase {     ])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[ final int PLAY_TIME = 3000;         Thread.sleep(PLAY_TIME);         asyncPlayer.stop();     }     ])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[    final int PLAY_TIME = 3000;         Thread.sleep(PLAY_TIME);         asyncPlayer.stop();     } }])', 1), ('([11:/android/app/cts/ActivityManagerApi29Test.java]:[TINGS]:[11]:method_text:[ * , even its capability is zero, it still has location access.      * @throws Exception      */    ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-7-1		[('android.systemintents.cts.TestSystemIntents', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1)]	[('create', 1), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('getPackageManager', 1)]	[('CtsSystemIntentTestCases', 1), ('CtsTelecomTestCases', 1)]		3.2.3.5/C-7-1	"""C-7-1] MUST provide a user-accessible mechanism to add and configure third-party input methods in response to the android.settings.INPUT_METHOD_SETTINGS intent. If device implementations support third-party accessibility services; they: """	03020305.670701	3.2.3.5/C-7-1 C-7-1 android.settings.INPUT INPUT_METHOD_SETTINGS 3.2.3.5				[('INPUT_METHOD_SETTINGS', 1), ('3.2.3.5', 1)]		[android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases]		[('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1)]	[('/android/systemintents/cts/TestSystemIntents.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('([1:/android/systemintents/cts/TestSystemIntents.java]:[INPUT_METHOD_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-13-2		[('com.android.cts.managedprofile.ProvisioningTest', 4), ('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 2), ('com.android.cts.deviceowner.DeviceOwnerProvisioningTest', 2), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 2), ('com.android.cts.managedprofile.PreManagedProfileTest', 2), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 2), ('com.android.cts.profileowner.ManagementTest', 1), ('com.android.cts.comp.ManagementTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1), ('com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1)]	[('setUp', 5), ('getName', 2), ('getSimpleName', 2), ('getContext', 2), ('getPackage', 1), ('getTargetContext', 1), ('getPackageManager', 1)]	[('CtsTelecomTestCases', 1)]		3.2.3.5/C-13-2	"""C-13-2] MUST honor the intents android.app.action.ADMIN_POLICY_COMPLIANCE; android.app.action.GET_PROVISIONING_MODE; android.app.action.PROVISIONING_SUCCESSFUL; android.app.action.PROVISION_MANAGED_DEVICE; android.app.action.PROVISION_MANAGED_PROFILE; android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD; android.app.action.SET_NEW_PASSWORD & android.app.action.START_ENCRYPTION and have an activity to provide fulfillment for these intents as described in SDK here. If device implementations declare the android.software.autofill feature flag; they: """	03020305.671302	android.app.action.ADMIN PROVISIONING_SUCCESSFUL android.app.action.PROVISIONING SET_NEW_PARENT_PROFILE_PASSWORD START_ENCRYPTION C-13-2 android.app.action.SET android.software.autofill android.app.action.PROVISION 3.2.3.5/C-13-2 3.2.3.5 SET_NEW_PASSWORD GET_PROVISIONING_MODE ADMIN_POLICY_COMPLIANCE PROVISION_MANAGED_PROFILE android.app.action.START PROVISION_MANAGED_DEVICE android.app.action.GET				[('PROVISION_MANAGED_PROFILE', 13), ('PROVISION_MANAGED_DEVICE', 3), ('PROVISIONING_SUCCESSFUL', 2), ('android.software.autofill', 1), ('3.2.3.5', 1)]		[com.android.cts.profileowner.ManagementTest testProvisionManagedProfileNotAllowed None] [com.android.cts.comp.ManagementTest testProvisionManagedProfileNotAllowed None] [com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None] [com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest removeTestUsers None] [com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest testManagedProfileProvisioning None] [com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testCannotAddManagedProfileViaManagedProvisioning None] [com.android.cts.managedprofile.ProvisioningTest PersistableBundle None] [com.android.cts.managedprofile.ProvisioningTest testVerifySuccessfulIntentWasReceived None] [com.android.cts.managedprofile.ProvisioningTest PersistableBundle None] [com.android.cts.managedprofile.ProvisioningTest testAccountNotExist None] [com.android.cts.deviceowner.DeviceOwnerProvisioningTest getSystemPackageNameList None] [com.android.cts.deviceowner.DeviceOwnerProvisioningTest testProvisionDeviceOwner_withAllSystemAppsEnabled None] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [com.android.cts.comp.provisioning.ManagedProfileProvisioningTest testProvisioningCorpOwnedManagedProfile None] [com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedTrue None] [com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedFalse None] [com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None] [com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningAllowedFalse None]		[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1)]	[('/com/android/cts/managedprofile/ProvisioningTest.java', 6), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 4), ('/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 3), ('/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 3), ('/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 3), ('/com/android/cts/managedprofile/PreManagedProfileTest.java', 3), ('/com/android/cts/profileowner/ManagementTest.java', 2), ('/com/android/cts/comp/ManagementTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	"[('([1:/com/android/cts/profileowner/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     } }])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                 ""testDisallowAutofill_allowed"");     }     ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[().uninstallPackage(SINGLE_ADMIN_PKG);         }         super.tearDown();     }      @FlakyTest    ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);         assertTrue(provisioningMgr.startProvisioningAndWait(intent));     } }])', 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with      * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.      */    ])"", 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[ences(mContext).getBoolean(KEY_PROVISIONING_SUCCESSFUL_RECEIVED,                 false));     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ext context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[d tearDown() throws Exception {         enableUninstalledApp();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[pInfo) -> appInfo.packageName)                 .sorted()                 .collect(toList());     } }])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {     private static final String TAG = ""ManagedProfileProvisioningTest"";     ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {         return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);     } }])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[olicyManager.isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));     }     ])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-12-1		[('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.content.cts.AvailableIntentsTest', 1), ('android.telecom.cts.CallRedirectionServiceTest', 1)]	[('setUp', 4), ('getInstrumentation', 2), ('getContext', 2)]	[('CtsContentTestCases', 1), ('CtsTelecomTestCases', 1)]		3.2.3.5/C-12-1	"""C-12-1] MUST honor the android.media.action.STILL_IMAGE_CAMERA and android.media.action.STILL_IMAGE_CAMERA_SECURE intent and launch the camera in still image mode as described in the SDK. """	03020305.671201	android.media.action.STILL STILL_IMAGE_CAMERA_SECURE STILL_IMAGE_CAMERA 3.2.3.5 C-12-1 3.2.3.5/C-12-1				[('STILL_IMAGE_CAMERA', 2), ('3.2.3.5', 1), ('STILL_IMAGE_CAMERA_SECURE', 1)]		[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases]		[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1)]	[('/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 2), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('([1:/android/content/cts/AvailableIntentsTest.java]:[STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we      * fix targets that are out of compliance.      */    ])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1), ('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-15-1		[('android.content.cts.AvailableIntentsTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1), ('android.cts.statsd.atom.AtomTestCase', 1)]	[('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('setUp', 2), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1), ('hashCode', 1)]	[('CtsContentTestCases', 2), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-15-1	"""C-15-1] MUST still have an activity that handles the android.settings.ACTION_USAGE_ACCESS_SETTINGS intent pattern but MUST implement it as a no-op; that is to have an equivalent behavior as when the user is declined for access. If device implementations report the feature android.hardware.audio.output; they: """	03020305.671501	android.hardware.audio.output 3.2.3.5/C-15-1 ACTION_USAGE_ACCESS_SETTINGS android.settings.ACTION C-15-1 3.2.3.5				[('ACTION_USAGE_ACCESS_SETTINGS', 2), ('3.2.3.5', 2), ('android.settings.ACTION', 1), ('android.hardware.audio.output', 1)]		[android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None] [android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases] [android.cts.statsd.atom.AtomTestCase getReportList None]		[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/AtomTestCase.java', 1)]	[('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2), ('/android/cts/statsd/atom/AtomTestCase.java', 2)]	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_USAGE_ACCESS_SETTINGS]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));         }     }     ])', 2), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACTION]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/android/cts/statsd/atom/AtomTestCase.java]:[android.hardware.audio.output]:[1]:method_text:[estamp is not truncated"")                 .that(timestampNs % fiveMinutesInNs).isEqualTo(0);     } }])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-3-2		[('android.content.cts.AvailableIntentsTest', 4), ('android.telecom.cts.CallRedirectionServiceTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1), ('com.android.cts.devicepolicy.BaseManagedProfileTest', 1)]	[('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('setUp', 2), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]	[('CtsContentTestCases', 4), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-3-2	"""C-3-2] MUST honor android.nfc.cardemulation.action.ACTION_CHANGE_DEFAULT intent to show an activity which opens a dialog to ask the user to change the default card emulation service for a certain category as described in the SDK. If device implementations report android.hardware.nfc; they: """	03020305.670302	C-3-2 ACTION_CHANGE_DEFAULT android.hardware.nfc android.nfc.cardemulation.action.ACTION 3.2.3.5 3.2.3.5/C-3-2				[('ACTION_CHANGE_DEFAULT', 5), ('3.2.3.5', 2), ('android.hardware.nfc', 1)]		[android.content.cts.AvailableIntentsTest testChangeDefaultSmsApplication CtsContentTestCases] [android.content.cts.AvailableIntentsTest testChangeDefaultDialer CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None] [android.content.cts.AvailableIntentsTest testChangeDefaultSmsApplication CtsContentTestCases] [android.content.cts.AvailableIntentsTest testChangeDefaultDialer CtsContentTestCases] [com.android.cts.devicepolicy.BaseManagedProfileTest removeTestUsers None]		[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/BaseManagedProfileTest.java', 1)]	[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2), ('/com/android/cts/devicepolicy/BaseManagedProfileTest.java', 2)]	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT));         }     }     ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[   assertCanBeHandled(new Intent(TelecomManager.ACTION_CHANGE_DEFAULT_DIALER));         }     }     ])', 2), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACTION_CHANGE_DEFAULT]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/com/android/cts/devicepolicy/BaseManagedProfileTest.java]:[android.hardware.nfc]:[1]:method_text:[ for command "" + command + "": ""                 + getDevice().executeShellCommand(command));     } }])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-5-1		[('android.opengl.cts.OpenGlEsVersionTest', 2), ('android.content.cts.AvailableIntentsTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 2)]		[('CtsOpenGLTestCases', 2), ('CtsContentTestCases', 2), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-5-1	"""C-5-1] MUST honor the ‘android.bluetooth.adapter.action.REQUEST_ENABLE’ intent and show a system activity to allow the user to turn on Bluetooth. """	03020305.670501	android.bluetooth.adapter.action.REQUEST C-5-1 REQUEST_ENABLE 3.2.3.5/C-5-1 3.2.3.5				[('C-5-1', 2), ('REQUEST_ENABLE', 2), ('3.2.3.5', 2)]		[android.opengl.cts.OpenGlEsVersionTest testRequiredExtensions CtsOpenGLTestCases] [android.content.cts.AvailableIntentsTest testRequestEnableContentCaptureIntent CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.opengl.cts.OpenGlEsVersionTest testRequiredExtensions CtsOpenGLTestCases] [android.content.cts.AvailableIntentsTest testRequestEnableContentCaptureIntent CtsContentTestCases]		[('/home/gpoor/cts-source/cts/tests/tests/opengl/src/android/opengl/cts/OpenGlEsVersionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('/android/opengl/cts/OpenGlEsVersionTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4)]	"[('([1:/android/opengl/cts/OpenGlEsVersionTest.java]:[C-5-1]:[1]:method_text:[s, es31RequiredList[i]));         }     }      @CddTest(requirement=""7.1.4.1/C-2-1,C-5-1,C-4-1"")    ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_ENABLE]:[1]:method_text:[tent(Settings.ACTION_REQUEST_ENABLE_CONTENT_CAPTURE);         assertCanBeHandled(intent);     }     ])', 2), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 2)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-8-1		[('android.content.cts.AvailableIntentsTest', 4), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 2), ('com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity', 1)]	[('addIntentsThatDependOnDeviceConfigs', 4), ('addIntentsThatDependOnDeviceFeatures', 4), ('getPackageManager', 4), ('checkIntentForwardingFromPrimary', 4), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 4), ('supportsMultipleUsers', 2), ('getExternalStorageState', 2), ('checkIntentForwardingFromManaged', 2)]	[('CtsContentTestCases', 4), ('CtsAccessibilityServiceTestCases', 2), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-8-1	"""C-8-1] MUST honor the android.settings.ACCESSIBILITY_SETTINGS intent to provide a user-accessible mechanism to enable and disable the third-party accessibility services alongside the preloaded accessibility services. If device implementations include support for Wi-Fi Easy Connect and expose the functionality to third-party apps; they: """	03020305.670801	3.2.3.5/C-8-1 C-8-1 ACCESSIBILITY_SETTINGS android.settings.ACCESSIBILITY 3.2.3.5				[('ACCESSIBILITY_SETTINGS', 8), ('3.2.3.5', 2), ('android.settings.ACCESSIBILITY', 1)]		[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases] [android.content.cts.AvailableIntentsTest testChangePhoneAccounts CtsContentTestCases] [android.content.cts.AvailableIntentsTest testShowCallAccessibilitySettings CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity setPassFailButtonClickListeners None] [android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases] [com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None] [com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None] [android.content.cts.AvailableIntentsTest testChangePhoneAccounts CtsContentTestCases] [android.content.cts.AvailableIntentsTest testShowCallAccessibilitySettings CtsContentTestCases]		[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 1)]	[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 4), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 4), ('/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 2)]	"[('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESSIBILITY_SETTINGS]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";         assertTrue(message, !resolvedActivities.isEmpty());     } } ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ON_SHOW_CALL_ACCESSIBILITY_SETTINGS, it will display the call accessibility preferences.      */    ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ }      /**      * Test ACTION_SHOW_CALL_SETTINGS, it will display the call preferences.      */    ])', 2), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[tExtra(PolicyTransparencyTestListActivity.EXTRA_MODE, mMode);         startActivity(intent);     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACCESSIBILITY]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1)]"					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-13-1		[('android.admin.cts.DeviceAdminActivationTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 1)]	[('getSimpleName', 1)]	[('CtsAdminTestCases', 2), ('CtsTelecomTestCases', 1)]		3.2.3.5/C-13-1	"""C-13-1] MUST honor the intent android.app.action.ADD_DEVICE_ADMIN to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it). """	03020305.671301	C-13-1 ADD_DEVICE_ADMIN 3.2.3.5/C-13-1 android.app.action.ADD 3.2.3.5				[('ADD_DEVICE_ADMIN', 2), ('3.2.3.5', 1)]		[android.admin.cts.DeviceAdminActivationTest DeviceAdminActivationTest CtsAdminTestCases] [android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails CtsAdminTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases]		[('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 1)]	[('/android/admin/cts/DeviceAdminActivationTest.java', 3), ('/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();         } finally {             super.tearDown();         }     }     ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));     } }])', 1), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 1)]					
52:260955) 3.2.3.5  . Conditional Application Intents	3.2.3.5	C-9-1		[('android.content.cts.AvailableIntentsTest', 2), ('android.telecom.cts.CallRedirectionServiceTest', 2)]		[('CtsContentTestCases', 2), ('CtsTelecomTestCases', 2)]		3.2.3.5/C-9-1	"""C-9-1] MUST implement the Settings#ACTION_PROCESS_WIFI_EASY_CONNECT_URI Intent APIs as described in the SDK documentation. If device implementations provide the data saver mode; they: *"""	03020305.670901	3.2.3.5/C-9-1 C-9-1 ACTION_PROCESS_WIFI_EASY_CONNECT_URI 3.2.3.5				[('ACTION_PROCESS_WIFI_EASY_CONNECT_URI', 2), ('3.2.3.5', 2)]		[android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.telecom.cts.CallRedirectionServiceTest testPlaceCallUnmodified CtsTelecomTestCases] [android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases]		[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CallRedirectionServiceTest.java', 2)]	[('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/telecom/cts/CallRedirectionServiceTest.java', 4)]	[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_PROCESS_WIFI_EASY_CONNECT_URI]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));             assertCanBeHandled(intent);         }     }     ])', 2), ('([2:/android/telecom/cts/CallRedirectionServiceTest.java]:[3.2.3.5]:[2]:method_text:[olean result = queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);         assertTrue(result);     } }])', 2)]					
