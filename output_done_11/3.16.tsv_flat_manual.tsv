"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-1"	""	"android.controls.cts.CtsControlTemplateTest"	"testThermostatParams_wrongFlags_currentMode"	"CtsControlsDeviceTestCases"	""	"3.8.16/H-1-1"	""">3.8.16/H-1-1] MUST declare the feature flag android.software.controls and set it to true. [<a href=""#3_8_user_interface_compatibility"""""	""	"flag user_interface_compatibility feature android.software.controls"	""	""	""	"flag"	""	""	""	"/home/gpoor/cts-source/cts/tests/controls/src/android/controls/cts/CtsControlTemplateTest.java"	""	"(expected = IllegalArgumentException.class)     public void testThermostatParams_wrongFlags_currentMode() {         new TemperatureControlTemplate(                 TEST_ID,                 ControlTemplate.getNoTemplateObject(),                 TemperatureControlTemplate.MODE_HEAT,                 TemperatureControlTemplate.MODE_OFF,                 TemperatureControlTemplate.FLAG_MODE_OFF);     }"	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-2"	""	"android.controls.cts.CtsControlsServiceTest"	"testRequestAddControl"	"CtsControlsDeviceTestCases"	""	"3.8.16/H-1-2"	""">3.8.16/H-1-2] MUST provide a user affordance with the ability to add, edit, select, and operate the userâ€™s favorite device controls from the controls registered by the third-party applications through the ControlsProviderService and the Control APIs. [<a href=""#3_8_user_interface_compatibility"""""	""	"launcher ControlsProviderService"	""	""	""	"ControlsProviderService"	""	""	""	"/home/gpoor/cts-source/cts/tests/controls/src/android/controls/cts/CtsControlsServiceTest.java"	""	"public void testRequestAddControl() {         Resources res = mock(Resources.class);         when(res.getString(anyInt())).thenReturn("""");          final ComponentName testComponent = new ComponentName(""TestPkg"", ""TestClass"");         final Control control = new Control.StatelessBuilder(mControlsService.buildMower(false))                 .build();          Context context = new MockContext() {             public Resources getResources() {                 return res;             }              public void sendBroadcast(Intent intent, String receiverPermission) {                 assertEquals(intent.getAction(), ACTION_ADD_CONTROL);                 assertEquals((ComponentName) intent.getParcelableExtra(Intent.EXTRA_COMPONENT_NAME),                         testComponent);                 assertEquals((Control) intent.getParcelableExtra(EXTRA_CONTROL), control);                 assertEquals(receiverPermission, ""android.permission.BIND_CONTROLS"");             }         };          ControlsProviderService.requestAddControl(context, testComponent, control);     }      private Consumer<Integer> assertConsumer(int expectedStatus) {         return (status) -> {             ControlAction.isValidResponse(status);             assertEquals((int) status, expectedStatus);         };     }      private void subscribe(Publisher<Control> publisher, final int request,             final List<Control> addToList) {         publisher.subscribe(new Subscriber<Control>() {                 public void onSubscribe(Subscription s) {                     s.request(request);                 }                  public void onNext(Control c) {                     addToList.add(c);                 }                  public void onError(Throwable t) {                     throw new IllegalStateException(""onError should not be called here"");                 }                  public void onComplete() {                  }             });     }      private void assertControlsList(List<Control> actualControls, List<Control> expectedControls) {         assertEquals(actualControls.size(), expectedControls.size());          for (int i = 0; i < actualControls.size(); i++) {             assertControlEquals(actualControls.get(i), expectedControls.get(i));         }     }      private void assertControlEquals(Control c1, Control c2) {         assertEquals(c1.getTitle(), c2.getTitle());         assertEquals(c1.getSubtitle(), c2.getSubtitle());         assertEquals(c1.getStructure(), c2.getStructure());         assertEquals(c1.getZone(), c2.getZone());         assertEquals(c1.getDeviceType(), c2.getDeviceType());         assertEquals(c1.getStatus(), c2.getStatus());         assertEquals(c1.getControlId(), c2.getControlId());         assertEquals(c1.getCustomIcon(), c2.getCustomIcon());         assertEquals(c1.getCustomColor(), c2.getCustomColor());          assertTemplateEquals(c1.getControlTemplate(), c2.getControlTemplate());     }      private void assertTemplateEquals(ControlTemplate ct1, ControlTemplate ct2) {         if (ct1 == null) {             assertNull(ct2);             return;         } else {             assertNotNull(ct2);         }          assertNotEquals(ct1, ControlTemplate.getErrorTemplate());         assertNotEquals(ct2, ControlTemplate.getErrorTemplate());         assertEquals(ct1.getTemplateType(), ct2.getTemplateType());         assertEquals(ct1.getTemplateId(), ct2.getTemplateId());          switch (ct1.getTemplateType()) {             case ControlTemplate.TYPE_TOGGLE:                 assertToggleTemplate((ToggleTemplate) ct1, (ToggleTemplate) ct2);                 break;             case ControlTemplate.TYPE_RANGE:                 assertRangeTemplate((RangeTemplate) ct1, (RangeTemplate) ct2);                 break;             case ControlTemplate.TYPE_TEMPERATURE:                 assertTemperatureControlTemplate((TemperatureControlTemplate) ct1,                         (TemperatureControlTemplate) ct2);                 break;             case ControlTemplate.TYPE_TOGGLE_RANGE:                 assertToggleRangeTemplate((ToggleRangeTemplate) ct1, (ToggleRangeTemplate) ct2);                 break;         }     }      private void assertToggleTemplate(ToggleTemplate t1, ToggleTemplate t2) {         assertEquals(t1.isChecked(), t2.isChecked());         assertEquals(t1.getContentDescription(), t2.getContentDescription());     }      private void assertRangeTemplate(RangeTemplate t1, RangeTemplate t2) {         assertEquals(t1.getMinValue(), t2.getMinValue(), 0.0f);         assertEquals(t1.getMaxValue(), t2.getMaxValue(), 0.0f);         assertEquals(t1.getCurrentValue(), t2.getCurrentValue(), 0.0f);         assertEquals(t1.getStepValue(), t2.getStepValue(), 0.0f);         assertEquals(t1.getFormatString(), t2.getFormatString());     }      private void assertTemperatureControlTemplate(TemperatureControlTemplate t1,             TemperatureControlTemplate t2) {         assertEquals(t1.getCurrentMode(), t2.getCurrentMode());         assertEquals(t1.getCurrentActiveMode(), t2.getCurrentActiveMode());         assertEquals(t1.getModes(), t2.getModes());         assertTemplateEquals(t1.getTemplate(), t2.getTemplate());     }      private void assertToggleRangeTemplate(ToggleRangeTemplate t1, ToggleRangeTemplate t2) {         assertEquals(t1.isChecked(), t2.isChecked());         assertEquals(t1.getActionDescription(), t2.getActionDescription());         assertRangeTemplate(t1.getRange(), t2.getRange());     } }"	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-3"	""	"android.controls.cts.CtsControlsService"	"createPublisherForAllAvailable"	"CtsControlsDeviceTestCases"	""	"3.8.16/H-1-3"	""">3.8.16/H-1-3] MUST provide access to this user affordance within three interactions from a default Launcher. [<a href=""#3_8_user_interface_compatibility"""""	""	"access default user Launcher affordance three interface compatibility"	""	""	""	"default"	""	""	""	"/home/gpoor/cts-source/cts/tests/controls/src/android/controls/cts/CtsControlsService.java"	""	"public void test/*  *.  */ package android.controls.cts;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotEquals;  import android.app.PendingIntent; import android.content.Context; import android.content.Intent; import android.content.res.ColorStateList; import android.graphics.drawable.Icon; import android.service.controls.Control; import android.service.controls.ControlsProviderService; import android.service.controls.DeviceTypes; import android.service.controls.actions.BooleanAction; import android.service.controls.actions.CommandAction; import android.service.controls.actions.ControlAction; import android.service.controls.actions.FloatAction; import android.service.controls.actions.ModeAction; import android.service.controls.templates.ControlButton; import android.service.controls.templates.ControlTemplate; import android.service.controls.templates.RangeTemplate; import android.service.controls.templates.StatelessTemplate; import android.service.controls.templates.TemperatureControlTemplate; import android.service.controls.templates.ToggleRangeTemplate; import android.service.controls.templates.ToggleTemplate;  import androidx.test.InstrumentationRegistry;  import java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.concurrent.Flow.Publisher; import java.util.function.Consumer; import java.util.stream.Collectors;  /**   * CTS Controls Service to send known controls for testing.   */ public class CtsControlsService extends ControlsProviderService {      private CtsControlsPublisher mUpdatePublisher;     private final List<Control> mAllControls = new ArrayList<>();     private final Map<String, Control> mControlsById = new HashMap<>();     private final Context mContext;     private final PendingIntent mPendingIntent;     private ColorStateList mColorStateList;     private Icon mIcon;      public CtsControlsService() {         mContext = InstrumentationRegistry.getInstrumentation().getTargetContext();         mPendingIntent = PendingIntent.getActivity(mContext, 1, new Intent(),             PendingIntent.FLAG_UPDATE_CURRENT);         mIcon = Icon.createWithResource(mContext, R.drawable.ic_device_unknown);         mColorStateList = mContext.getResources().getColorStateList(R.color.custom_mower, null);          mAllControls.add(buildLight(false /* isOn */, 0.0f /* intensity */));         mAllControls.add(buildLock(false /* isLocked */));         mAllControls.add(buildRoutine());         mAllControls.add(buildThermostat(TemperatureControlTemplate.MODE_OFF));         mAllControls.add(buildMower(false /* isStarted */));         mAllControls.add(buildSwitch(false /* isOn */));         mAllControls.add(buildGate(false /* isLocked */));          for (Control c : mAllControls) {             mControlsById.put(c.getControlId(), c);         }     }      public Control buildLight(boolean isOn, float intensity) {         RangeTemplate rt = new RangeTemplate(""range"", 0.0f, 100.0f, intensity, 1.0f, null);         ControlTemplate template =                 new ToggleRangeTemplate(""toggleRange"", isOn, isOn ? ""On"" : ""Off"", rt);         return new Control.StatefulBuilder(""light"", mPendingIntent)             .setTitle(""Light Title"")             .setSubtitle(""Light Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(isOn ? ""On"" : ""Off"")             .setDeviceType(DeviceTypes.TYPE_LIGHT)             .setStructure(""Home"")             .setControlTemplate(template)             .build();     }      public Control buildSwitch(boolean isOn) {         ControlButton button = new ControlButton(isOn, isOn ? ""On"" : ""Off"");         ControlTemplate template = new ToggleTemplate(""toggle"", button);         return new Control.StatefulBuilder(""switch"", mPendingIntent)             .setTitle(""Switch Title"")             .setSubtitle(""Switch Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(isOn ? ""On"" : ""Off"")             .setDeviceType(DeviceTypes.TYPE_SWITCH)             .setStructure(""Home"")             .setControlTemplate(template)             .build();     }       public Control buildMower(boolean isStarted) {         String desc = isStarted ? ""Started"" : ""Stopped"";         ControlButton button = new ControlButton(isStarted, desc);         ControlTemplate template = new ToggleTemplate(""toggle"", button);         return new Control.StatefulBuilder(""mower"", mPendingIntent)             .setTitle(""Mower Title"")             .setSubtitle(""Mower Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(desc)             .setDeviceType(DeviceTypes.TYPE_MOWER)             .setStructure(""Vacation"")             .setZone(""Outside"")             .setControlTemplate(template)             .setCustomIcon(mIcon)             .setCustomColor(mColorStateList)             .build();     }      public Control buildLock(boolean isLocked) {         String desc = isLocked ? ""Locked"" : ""Unlocked"";         ControlButton button = new ControlButton(isLocked, desc);         ControlTemplate template = new ToggleTemplate(""toggle"", button);         return new Control.StatefulBuilder(""lock"", mPendingIntent)             .setTitle(""Lock Title"")             .setSubtitle(""Lock Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(desc)             .setDeviceType(DeviceTypes.TYPE_LOCK)             .setControlTemplate(template)             .build();     }      public Control buildGate(boolean isLocked) {         String desc = isLocked ? ""Locked"" : ""Unlocked"";         ControlButton button = new ControlButton(isLocked, desc);         ControlTemplate template = new ToggleTemplate(""toggle"", button);         return new Control.StatefulBuilder(""gate"", mPendingIntent)             .setTitle(""Gate Title"")             .setSubtitle(""Gate Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(desc)             .setDeviceType(DeviceTypes.TYPE_GATE)             .setControlTemplate(template)             .setStructure(""Other home"")             .build();     }      public Control buildThermostat(int mode) {         ControlTemplate template = new TemperatureControlTemplate(""temperature"",                     ControlTemplate.getNoTemplateObject(),                     mode,                     TemperatureControlTemplate.MODE_OFF,                     TemperatureControlTemplate.FLAG_MODE_HEAT                     | TemperatureControlTemplate.FLAG_MODE_COOL                     | TemperatureControlTemplate.FLAG_MODE_OFF                     | TemperatureControlTemplate.FLAG_MODE_ECO);          return new Control.StatefulBuilder(""thermostat"", mPendingIntent)             .setTitle(""Thermostat Title"")             .setSubtitle(""Thermostat Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(""Off"")             .setDeviceType(DeviceTypes.TYPE_THERMOSTAT)             .setControlTemplate(template)             .build();     }      public Control buildRoutine() {         ControlTemplate template = new StatelessTemplate(""stateless"");         return new Control.StatefulBuilder(""routine"", mPendingIntent)             .setTitle(""Routine Title"")             .setSubtitle(""Routine Subtitle"")             .setStatus(Control.STATUS_OK)             .setStatusText(""Good Morning"")             .setDeviceType(DeviceTypes.TYPE_ROUTINE)             .setControlTemplate(template)             .build();     }      @Override     public Publisher<Control> createPublisherForAllAvailable() {         return new CtsControlsPublisher(mAllControls.stream()             .map(c -> new Control.StatelessBuilder(c).build())             .collect(Collectors.toList()));     }      @Override     public Publisher<Control> createPublisherForSuggested() {         return new CtsControlsPublisher(mAllControls.stream()             .map(c -> new Control.StatelessBuilder(c).build())             .collect(Collectors.toList()));     }      @Override     public Publisher<Control> createPublisherFor(List<String> controlIds) {         mUpdatePublisher = new CtsControlsPublisher(null);          for (String id : controlIds) {             Control control = mControlsById.get(id);             if (control == null) continue;              mUpdatePublisher.onNext(control);         }          return mUpdatePublisher;     }      @Override     public void performControlAction(String controlId, ControlAction action,             Consumer<Integer> consumer) {         Control c = mControlsById.get(controlId);         if (c == null) return;          // all values are hardcoded for this test         assertEquals(action.getTemplateId(), ""action"");         assertNotEquals(action, ControlAction.getErrorAction());          Control.StatefulBuilder builder = controlToBuilder(c);          // Modify the builder in order to update the Control to have predefined, verifiable behavior         if (action instanceof BooleanAction) {             BooleanAction b = (BooleanAction) action;              if (c.getDeviceType() == DeviceTypes.TYPE_LIGHT) {                 RangeTemplate rt = new RangeTemplate(""range"",                         0.0f /* minValue */,                         100.0f /* maxValue */,                         50.0f /* currentValue */,                         1.0f /* step */, null);                 String desc = b.getNewState() ? ""On"" : ""Off"";                  builder.setStatusText(desc);                 builder.setControlTemplate(new ToggleRangeTemplate(""toggleRange"", b.getNewState(),                         desc, rt));             } else if (c.getDeviceType() == DeviceTypes.TYPE_ROUTINE) {                 builder.setStatusText(""Running"");                 builder.setControlTemplate(new StatelessTemplate(""stateless""));             } else if (c.getDeviceType() == DeviceTypes.TYPE_SWITCH) {                 String desc = b.getNewState() ? ""On"" : ""Off"";                 builder.setStatusText(desc);                 ControlButton button = new ControlButton(b.getNewState(), desc);                 builder.setControlTemplate(new ToggleTemplate(""toggle"", button));             } else if (c.getDeviceType() == DeviceTypes.TYPE_LOCK) {                 String value = action.getChallengeValue();                 if (value != null && value.equals(""1234"")) {                     String desc = b.getNewState() ? ""Locked"" : ""Unlocked"";                     ControlButton button = new ControlButton(b.getNewState(), desc);                     builder.setStatusText(desc);                     builder.setControlTemplate(new ToggleTemplate(""toggle"", button));                 } else {                     consumer.accept(ControlAction.RESPONSE_CHALLENGE_PIN);                     return;                 }             } else if (c.getDeviceType() == DeviceTypes.TYPE_GATE) {                 String value = action.getChallengeValue();                 if (value != null && value.equals(""abc123"")) {                     String desc = b.getNewState() ? ""Locked"" : ""Unlocked"";                     ControlButton button = new ControlButton(b.getNewState(), desc);                     builder.setStatusText(desc);                     builder.setControlTemplate(new ToggleTemplate(""toggle"", button));                 } else {                     consumer.accept(ControlAction.RESPONSE_CHALLENGE_PASSPHRASE);                     return;                 }             } else if (c.getDeviceType() == DeviceTypes.TYPE_MOWER) {                 String value = action.getChallengeValue();                 if (value != null && value.equals(""true"")) {                     String desc = b.getNewState() ? ""Started"" : ""Stopped"";                     ControlButton button = new ControlButton(b.getNewState(), desc);                     builder.setStatusText(desc);                     builder.setControlTemplate(new ToggleTemplate(""toggle"", button));                 } else {                     consumer.accept(ControlAction.RESPONSE_CHALLENGE_ACK);                     return;                 }             }         } else if (action instanceof FloatAction) {             FloatAction f = (FloatAction) action;             if (c.getDeviceType() == DeviceTypes.TYPE_LIGHT) {                 RangeTemplate rt = new RangeTemplate(""range"", 0.0f, 100.0f, f.getNewValue(), 1.0f,                         null);                  ToggleRangeTemplate trt = (ToggleRangeTemplate) c.getControlTemplate();                 String desc = trt.getActionDescription().toString();                 boolean state = trt.isChecked();                  builder.setStatusText(desc);                 builder.setControlTemplate(new ToggleRangeTemplate(""toggleRange"", state, desc, rt));             }         } else if (action instanceof ModeAction) {             ModeAction m = (ModeAction) action;             if (c.getDeviceType() == DeviceTypes.TYPE_THERMOSTAT) {                 ControlTemplate template = new TemperatureControlTemplate(""temperature"",                         ControlTemplate.getNoTemplateObject(),                         m.getNewMode(),                         TemperatureControlTemplate.MODE_OFF,                         TemperatureControlTemplate.FLAG_MODE_HEAT                         | TemperatureControlTemplate.FLAG_MODE_COOL                         | TemperatureControlTemplate.FLAG_MODE_OFF                         | TemperatureControlTemplate.FLAG_MODE_ECO);                  builder.setControlTemplate(template);             }         } else if (action instanceof CommandAction) {             builder.setControlTemplate(new StatelessTemplate(""stateless""));         }          // Finally build and send the default OK status         Control updatedControl = builder.build();         mControlsById.put(controlId, updatedControl);         mUpdatePublisher.onNext(updatedControl);         consumer.accept(ControlAction.RESPONSE_OK);     }      private Control.StatefulBuilder controlToBuilder(Control c) {         return new Control.StatefulBuilder(c.getControlId(), c.getAppIntent())             .setTitle(c.getTitle())             .setSubtitle(c.getSubtitle())             .setStructure(c.getStructure())             .setDeviceType(c.getDeviceType())             .setZone(c.getZone())             .setCustomIcon(c.getCustomIcon())             .setCustomColor(c.getCustomColor())             .setStatus(c.getStatus())             .setStatusText(c.getStatusText());     } }"	""	""	""	""	""
"83:338286) 3.8.16  . Device Controls"	"3.8.16"	"H-1-4"	""	"android.controls.cts.CtsControlBuilderTest"	"testStatelessBuilder"	"CtsControlsDeviceTestCases"	""	"3.8.16/H-1-4"	""">3.8.16/H-1-4] MUST accurately render in this user affordance the name and icon of each third-party app that provides controls via the ControlsProviderService API as well as any specified fields provided by the Control APIs. Conversely, If Handheld device implementations do not implement such controls, they: [<a href=""#3_8_user_interface_compatibility"""""	""	"render icon ControlsProviderService"	""	""	""	"icon"	""	""	""	"/home/gpoor/cts-source/cts/tests/controls/src/android/controls/cts/CtsControlBuilderTest.java"	""	"public void testStatelessBuilder() {         Control control = new Control.StatelessBuilder(CONTROL_ID, mPendingIntent)                 .setTitle(TITLE)                 .setControlId(CONTROL_ID2)                 .setAppIntent(mPendingIntent2)                 .setSubtitle(SUBTITLE)                 .setStructure(STRUCTURE)                 .setDeviceType(DEVICE_TYPE)                 .setZone(ZONE)                 .setCustomIcon(mIcon)                 .setCustomColor(mColorStateList)                 .build();          assertControl(control, true);     }"	""	""	""	""	""
