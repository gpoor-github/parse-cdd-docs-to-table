"Section"	"section_id"	"req_id"	"full_key"	"key_as_number"	"requirement"	"Test Availability"	"search_roots"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"max_matches"	"class_defs"	"methods"	"modules"	"protected"	"class_def"	"method"	"module"	"file_name"	"matched_files"	"methods_string"	"urls"	"method_text"	"matched_terms"	"qualified_method"	"Annotation?"	"New Req for S?"	"New CTS for S?"	"Comment(internal) e.g. why a test is not possible"	"CTS Bug Id"	"CDD Bug Id"	"Area"	"Shortened"	"Test Level"
"9.9.3  . Encryption Methods"	"9.9.3"	"C-1-11"	"9.9.3/C-1-11"	"09090300.670111"	"""C-1-11] MUST use the mandatorily supported ciphers, key lengths and modes."""	""	"key"	"supported ciphers mandatorily mandatory C-1-11 lengths modes length 9.9.3 key"	"length mandatory 9.9.3"	""	""	""	"[('android.keystore.cts.AndroidKeyStoreTest', 91), ('android.keystore.cts.KeyPairGeneratorTest', 56), ('android.keystore.cts.CipherTest', 56), ('android.keystore.cts.KeyStoreTest', 51), ('android.keystore.cts.BlockCipherTestBase', 42), ('android.keystore.cts.KeyAttestationTest', 35), ('android.mediadrm.cts.MediaDrmClearkeyTest', 35), ('android.keystore.cts.KeyGeneratorTest', 32), ('android.keystore.cts.SignatureTest', 31), ('android.keystore.cts.performance.RsaSignaturePerformanceTest', 26), ('android.keystore.cts.KeyFactoryTest', 24), ('android.keystore.cts.MacTest', 18), ('android.keystore.cts.KeyGenParameterSpecTest', 16), ('android.mediadrm.cts.NativeMediaDrmClearkeyTest', 16), ('android.keystore.cts.AESCipherNistCavpKatTest', 15), ('android.keystore.cts.performance.AesCipherPerformanceTest', 15), ('android.keystore.cts.RSACipherTest', 14), ('android.keystore.cts.KeyProtectionTest', 13), ('android.keystore.cts.performance.HmacMacPerformanceTest', 12), ('android.keystore.cts.SecretKeyFactoryTest', 11), ('android.keystore.cts.performance.RsaCipherPerformanceTest', 11), ('android.keystore.cts.performance.DesCipherPerformanceTest', 11), ('android.keystore.cts.KeyAgreementTest', 10), ('android.keystore.cts.ImportWrappedKeyTest', 9), ('android.keystore.cts.KeyPairGeneratorSpecTest', 9), ('android.keystore.cts.KeyChainTest', 8), ('android.keystore.cts.AESGCMCipherTestBase', 7), ('android.keystore.cts.performance.RsaKeyGenPerformanceTest', 7), ('android.keystore.cts.performance.AttestationPerformanceTest', 7), ('android.keystore.cts.AttestKeyTest', 6), ('android.keystore.cts.DESedeCipherTestBase', 6), ('com.android.cts.monkey.PackageTest', 5), ('android.keystore.cts.KeyInfoTest', 5), ('android.keystore.cts.ECDSASignatureTest', 5), ('android.keystore.cts.RSASignatureTest', 5), ('com.android.cts.authboundkey.AuthBoundKeyAppTest', 4), ('com.android.cts.monkey.CategoryTest', 4), ('android.keystore.cts.performance.HmacKeyGenPerformanceTest', 4), ('android.keystore.cts.performance.DesKeyGenPerformanceTest', 4), ('android.keystore.cts.performance.EcdsaSignaturePerformanceTest', 4), ('android.keystore.cts.performance.AesKeyGenPerformanceTest', 4), ('android.keystore.cts.performance.EcKeyGenPerformanceTest', 4), ('com.android.cts.monkey.MonkeyTest', 3), ('com.android.cts.monkey.SeedTest', 3), ('com.android.cts.monkey.VerbosityTest', 3), ('android.keystore.cts.AESECBCipherTestBase', 3), ('com.android.cts.keysets.KeySetPermissionsTest', 2), ('android.keystore.cts.NoAttestKeyTest', 2), ('android.keystore.cts.PutOverflowTest', 2), ('android.keystore.cts.BackendBusyExceptionTest', 1)]"	"[('getType', 52), ('getPrivateKey', 46), ('getContext', 14), ('getSecretKey', 14), ('getCertificateChain', 14), ('getCertificate', 14), ('getInstrumentation', 13), ('getTargetContext', 13), ('getProvider', 12), ('getSimpleName', 10), ('getName', 10), ('toLowerCase', 8), ('setUp', 7), ('toCharArray', 6), ('getPrivateKey2', 6), ('generateSecretKey', 6), ('getClass', 6), ('tearDown', 6), ('supports3DES', 4), ('clone', 4), ('getSecretKey2', 4), ('getEncoded', 4), ('getBytes', 4), ('printStackTrace', 4), ('SecureRandom', 3), ('Monitor', 3), ('Object', 3), ('equals', 2), ('getKatAad', 2), ('getKatCiphertextWhenKatAadPresent', 2), ('getBlockSize', 2), ('getKatKey', 2), ('getKatPlaintext', 2), ('getKatAuthenticationTagLengthBytes', 2), ('Builder', 2), ('build', 2), ('getClientCertificate', 2), ('generateKey', 2), ('keyStores', 2), ('getProviders', 2), ('getServices', 2), ('getAlgorithm', 2), ('toString', 2), ('aliases', 2), ('hasMoreElements', 2), ('nextElement', 2), ('getTrustedCertificate', 2), ('deviceHasMediaDrm', 2), ('watchHasNoClearkeySupport', 2), ('DeviceLockSession', 1), ('LockScreenSession', 1), ('setLockCredential', 1), ('performDeviceLock', 1), ('sleepDevice', 1), ('size', 1)]"	"[('CtsKeystoreTestCases', 692), ('CtsMediaDrmTestCases', 51), ('CtsMonkeyTestCases', 18)]"	""	"android.mediadrm.cts.MediaDrmClearkeyTest"	"Object"	"CtsMediaDrmTestCases"	"[('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AndroidKeyStoreTest.java', 91), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorTest.java', 56), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/CipherTest.java', 56), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyStoreTest.java', 51), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/BlockCipherTestBase.java', 42), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAttestationTest.java', 35), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/MediaDrmClearkeyTest.java', 35), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGeneratorTest.java', 32), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/SignatureTest.java', 31), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/RsaSignaturePerformanceTest.java', 26), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyFactoryTest.java', 24), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/MacTest.java', 18), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyGenParameterSpecTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/mediadrm/src/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java', 16), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AESCipherNistCavpKatTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/AesCipherPerformanceTest.java', 15), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/RSACipherTest.java', 14), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyProtectionTest.java', 13), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/HmacMacPerformanceTest.java', 12), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/SecretKeyFactoryTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/RsaCipherPerformanceTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/DesCipherPerformanceTest.java', 11), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyAgreementTest.java', 10), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/ImportWrappedKeyTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyPairGeneratorSpecTest.java', 9), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyChainTest.java', 8), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AESGCMCipherTestBase.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/AttestationPerformanceTest.java', 7), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AttestKeyTest.java', 6), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/DESedeCipherTestBase.java', 6), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/PackageTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/KeyInfoTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/ECDSASignatureTest.java', 5), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/RSASignatureTest.java', 5), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/AuthBoundKeyApp/src/com/android/cts/authboundkey/AuthBoundKeyAppTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/CategoryTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/DesKeyGenPerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/AesKeyGenPerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/performance/EcKeyGenPerformanceTest.java', 4), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/MonkeyTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/SeedTest.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/monkey/src/com/android/cts/monkey/VerbosityTest.java', 3), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/AESECBCipherTestBase.java', 3), ('/home/gpoor/cts-12-source/cts/hostsidetests/appsecurity/test-apps/keysets/testApp/src/com/android/cts/keysets/KeySetPermissionsTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/NoAttestKeyTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/PutOverflowTest.java', 2), ('/home/gpoor/cts-12-source/cts/tests/tests/keystore/src/android/keystore/cts/BackendBusyExceptionTest.java', 1)]"	"[('(14,key,/com/android/cts/keysets/KeySetPermissionsTest.java)', 1), ('(1,modes,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(81,key,/com/android/cts/authboundkey/AuthBoundKeyAppTest.java)', 1), ('(3,length,/com/android/cts/monkey/PackageTest.java)', 1), ('(15,key,/com/android/cts/monkey/PackageTest.java)', 1), ('(20,key,/com/android/cts/monkey/MonkeyTest.java)', 1), ('(4,key,/com/android/cts/monkey/SeedTest.java)', 1), ('(20,key,/com/android/cts/monkey/CategoryTest.java)', 1), ('(4,length,/com/android/cts/monkey/VerbosityTest.java)', 1), ('(5,key,/com/android/cts/monkey/VerbosityTest.java)', 1), ('(9,supported,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(31,modes,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(33,length,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(480,key,/android/keystore/cts/KeyAttestationTest.java)', 1), ('(50,supported,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(19,ciphers,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(21,modes,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(3,length,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(1118,key,/android/keystore/cts/KeyPairGeneratorTest.java)', 1), ('(2,supported,/android/keystore/cts/MacTest.java)', 1), ('(12,length,/android/keystore/cts/MacTest.java)', 1), ('(177,key,/android/keystore/cts/MacTest.java)', 1), ('(20,supported,/android/keystore/cts/KeyGeneratorTest.java)', 1), ('(7,modes,/android/keystore/cts/KeyGeneratorTest.java)', 1), ('(280,key,/android/keystore/cts/KeyGeneratorTest.java)', 1), ('(1,mandatory,/android/keystore/cts/KeyProtectionTest.java)', 1), ('(19,modes,/android/keystore/cts/KeyProtectionTest.java)', 1), ('(141,key,/android/keystore/cts/KeyProtectionTest.java)', 1), ('(1,mandatory,/android/keystore/cts/KeyGenParameterSpecTest.java)', 1), ('(19,modes,/android/keystore/cts/KeyGenParameterSpecTest.java)', 1), ('(163,key,/android/keystore/cts/KeyGenParameterSpecTest.java)', 1), ('(22,supported,/android/keystore/cts/CipherTest.java)', 1), ('(2,ciphers,/android/keystore/cts/CipherTest.java)', 1), ('(6,modes,/android/keystore/cts/CipherTest.java)', 1), ('(43,length,/android/keystore/cts/CipherTest.java)', 1), ('(592,key,/android/keystore/cts/CipherTest.java)', 1), ('(8,length,/android/keystore/cts/RSACipherTest.java)', 1), ('(129,key,/android/keystore/cts/RSACipherTest.java)', 1), ('(22,supported,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(3,modes,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(8,length,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(1382,key,/android/keystore/cts/AndroidKeyStoreTest.java)', 1), ('(19,supported,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(9,ciphers,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(1,lengths,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(2,modes,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(108,length,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(166,key,/android/keystore/cts/BlockCipherTestBase.java)', 1), ('(63,key,/android/keystore/cts/NoAttestKeyTest.java)', 1), ('(2,key,/android/keystore/cts/BackendBusyExceptionTest.java)', 1), ('(9,length,/android/keystore/cts/AESGCMCipherTestBase.java)', 1), ('(12,key,/android/keystore/cts/AESGCMCipherTestBase.java)', 1), ('(7,key,/android/keystore/cts/PutOverflowTest.java)', 1), ('(2,length,/android/keystore/cts/AttestKeyTest.java)', 1), ('(124,key,/android/keystore/cts/AttestKeyTest.java)', 1), ('(1,modes,/android/keystore/cts/AESCipherNistCavpKatTest.java)', 1), ('(4,length,/android/keystore/cts/AESCipherNistCavpKatTest.java)', 1), ('(61,key,/android/keystore/cts/AESCipherNistCavpKatTest.java)', 1), ('(2,supported,/android/keystore/cts/DESedeCipherTestBase.java)', 1), ('(1,modes,/android/keystore/cts/DESedeCipherTestBase.java)', 1), ('(1,length,/android/keystore/cts/DESedeCipherTestBase.java)', 1), ('(6,key,/android/keystore/cts/DESedeCipherTestBase.java)', 1), ('(6,modes,/android/keystore/cts/SecretKeyFactoryTest.java)', 1), ('(160,key,/android/keystore/cts/SecretKeyFactoryTest.java)', 1), ('(7,modes,/android/keystore/cts/KeyInfoTest.java)', 1), ('(119,key,/android/keystore/cts/KeyInfoTest.java)', 1), ('(5,supported,/android/keystore/cts/SignatureTest.java)', 1), ('(32,length,/android/keystore/cts/SignatureTest.java)', 1), ('(443,key,/android/keystore/cts/SignatureTest.java)', 1), ('(5,length,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(62,key,/android/keystore/cts/ECDSASignatureTest.java)', 1), ('(7,modes,/android/keystore/cts/ImportWrappedKeyTest.java)', 1), ('(6,length,/android/keystore/cts/ImportWrappedKeyTest.java)', 1), ('(255,key,/android/keystore/cts/ImportWrappedKeyTest.java)', 1), ('(6,supported,/android/keystore/cts/KeyFactoryTest.java)', 1), ('(5,modes,/android/keystore/cts/KeyFactoryTest.java)', 1), ('(372,key,/android/keystore/cts/KeyFactoryTest.java)', 1), ('(6,length,/android/keystore/cts/RSASignatureTest.java)', 1), ('(83,key,/android/keystore/cts/RSASignatureTest.java)', 1), ('(1,supported,/android/keystore/cts/KeyAgreementTest.java)', 1), ('(154,key,/android/keystore/cts/KeyAgreementTest.java)', 1), ('(9,supported,/android/keystore/cts/KeyChainTest.java)', 1), ('(44,key,/android/keystore/cts/KeyChainTest.java)', 1), ('(13,key,/android/keystore/cts/KeyPairGeneratorSpecTest.java)', 1), ('(1,supported,/android/keystore/cts/AESECBCipherTestBase.java)', 1), ('(1,length,/android/keystore/cts/AESECBCipherTestBase.java)', 1), ('(1,key,/android/keystore/cts/AESECBCipherTestBase.java)', 1), ('(69,supported,/android/keystore/cts/KeyStoreTest.java)', 1), ('(2103,key,/android/keystore/cts/KeyStoreTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java)', 1), ('(33,key,/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java)', 1), ('(7,supported,/android/keystore/cts/performance/AesCipherPerformanceTest.java)', 1), ('(1,modes,/android/keystore/cts/performance/AesCipherPerformanceTest.java)', 1), ('(81,key,/android/keystore/cts/performance/AesCipherPerformanceTest.java)', 1), ('(13,supported,/android/keystore/cts/performance/RsaSignaturePerformanceTest.java)', 1), ('(92,key,/android/keystore/cts/performance/RsaSignaturePerformanceTest.java)', 1), ('(44,key,/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/DesKeyGenPerformanceTest.java)', 1), ('(34,key,/android/keystore/cts/performance/DesKeyGenPerformanceTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/AttestationPerformanceTest.java)', 1), ('(2,length,/android/keystore/cts/performance/AttestationPerformanceTest.java)', 1), ('(64,key,/android/keystore/cts/performance/AttestationPerformanceTest.java)', 1), ('(6,supported,/android/keystore/cts/performance/RsaCipherPerformanceTest.java)', 1), ('(1,modes,/android/keystore/cts/performance/RsaCipherPerformanceTest.java)', 1), ('(77,key,/android/keystore/cts/performance/RsaCipherPerformanceTest.java)', 1), ('(5,supported,/android/keystore/cts/performance/DesCipherPerformanceTest.java)', 1), ('(1,modes,/android/keystore/cts/performance/DesCipherPerformanceTest.java)', 1), ('(79,key,/android/keystore/cts/performance/DesCipherPerformanceTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java)', 1), ('(83,key,/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/AesKeyGenPerformanceTest.java)', 1), ('(33,key,/android/keystore/cts/performance/AesKeyGenPerformanceTest.java)', 1), ('(6,supported,/android/keystore/cts/performance/HmacMacPerformanceTest.java)', 1), ('(58,key,/android/keystore/cts/performance/HmacMacPerformanceTest.java)', 1), ('(2,supported,/android/keystore/cts/performance/EcKeyGenPerformanceTest.java)', 1), ('(33,key,/android/keystore/cts/performance/EcKeyGenPerformanceTest.java)', 1), ('(11,supported,/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(2,length,/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(42,key,/android/mediadrm/cts/NativeMediaDrmClearkeyTest.java)', 1), ('(23,supported,/android/mediadrm/cts/MediaDrmClearkeyTest.java)', 1), ('(14,length,/android/mediadrm/cts/MediaDrmClearkeyTest.java)', 1), ('(463,key,/android/mediadrm/cts/MediaDrmClearkeyTest.java)', 1)]"	"[('([1:/android/keystore/cts/KeyFactoryTest.java]:[supported]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 6), ('([4:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[4]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 5), ('([4:/android/keystore/cts/CipherTest.java]:[key]:[4]:method_text:[   throw new RuntimeException(""Failed for "" + transformation, e);            }        }    }   ])', 5), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 4), ('([2:/android/keystore/cts/CipherTest.java]:[key]:[2]:method_text:[   throw new RuntimeException(""Failed for "" + transformation, e);            }        }    }   ])', 4), ('([5:/android/keystore/cts/CipherTest.java]:[key]:[5]:method_text:[   throw new RuntimeException(""Failed for "" + transformation, e);            }        }    }   ])', 4), ('([14:/android/keystore/cts/RSACipherTest.java]:[key]:[14]:method_text:[hrow new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }   ])', 4), ('([4:/android/keystore/cts/SignatureTest.java]:[key]:[4]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 4), ('([5:/android/keystore/cts/MacTest.java]:[key]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 3), ('([5:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 3), ('([1:/android/keystore/cts/RSACipherTest.java]:[length]:[1]:method_text:[hrow new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }   ])', 3), ('([3:/android/keystore/cts/SignatureTest.java]:[key]:[3]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 3), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[1]:method_text:[ROR_CANNOT_ATTEST_IDS == cause.getErrorCode())                );            }        }    }   ])', 2), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[1]:method_text:[ionCert));        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 2), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[length]:[1]:method_text:[ROR_CANNOT_ATTEST_IDS == cause.getErrorCode())                );            }        }    }   ])', 2), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[key]:[2]:method_text:[ROR_CANNOT_ATTEST_IDS == cause.getErrorCode())                );            }        }    }   ])', 2), ('([19:/android/keystore/cts/KeyAttestationTest.java]:[key]:[19]:method_text:[ionCert));        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 2), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[ngs()));        MoreAsserts.assertEmpty(Arrays.asList(keyInfo.getEncryptionPaddings()));    }   ])', 2), ('([5:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[5]:method_text:[rt setting the key size"");        } catch (IllegalArgumentException success) {        }    }   ])', 2), ('([7:/android/keystore/cts/MacTest.java]:[key]:[7]:method_text:[            throw new RuntimeException(algorithm + "" failed"", e);            }        }    }   ])', 2), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[2]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([1:/android/keystore/cts/KeyGeneratorTest.java]:[modes]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([8:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[8]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([6:/android/keystore/cts/CipherTest.java]:[supported]:[6]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 2), ('([2:/android/keystore/cts/CipherTest.java]:[modes]:[2]:method_text:[                      + badBlockMode,                        e);            }        }    }   ])', 2), ('([9:/android/keystore/cts/CipherTest.java]:[key]:[9]:method_text:[                      + badBlockMode,                        e);            }        }    }   ])', 2), ('([9:/android/keystore/cts/CipherTest.java]:[key]:[9]:method_text:[en authorized only for "" + badDigest,                        e);            }        }    }   ])', 2), ('([2:/android/keystore/cts/RSACipherTest.java]:[length]:[2]:method_text:[hrow new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }   ])', 2), ('([21:/android/keystore/cts/RSACipherTest.java]:[key]:[21]:method_text:[hrow new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }   ])', 2), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 2), ('([74:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[74]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 2), ('([2:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[2]:method_text:[of input.            assertNull(""buffered: "" + buffered, update(new byte[1]));        }    }   ])', 2), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[of input.            assertNull(""buffered: "" + buffered, update(new byte[1]));        }    }   ])', 2), ('([1:/android/keystore/cts/AESGCMCipherTestBase.java]:[length]:[1]:method_text:[oFinal(ciphertext);            fail();        } catch (AEADBadTagException expected) {}    }   ])', 2), ('([5:/android/keystore/cts/AESGCMCipherTestBase.java]:[key]:[5]:method_text:[oFinal(ciphertext);            fail();        } catch (AEADBadTagException expected) {}    }   ])', 2), ('([1:/android/keystore/cts/DESedeCipherTestBase.java]:[supported]:[1]:method_text:[            super.testUpdateWithEmptyInputReturnsCorrectValue();        }    }    @Override   ])', 2), ('([1:/android/keystore/cts/SignatureTest.java]:[supported]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([5:/android/keystore/cts/SignatureTest.java]:[key]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([6:/android/keystore/cts/KeyFactoryTest.java]:[key]:[6]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([11:/android/keystore/cts/KeyFactoryTest.java]:[key]:[11]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([26:/android/keystore/cts/KeyFactoryTest.java]:[key]:[26]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 2), ('([10:/com/android/cts/keysets/KeySetPermissionsTest.java]:[key]:[10]:method_text:[ private static final String KEYSET_PERM_NAME = ""com.android.cts.keysets_permdef.keysets_perm"";   ])', 1), ('([4:/com/android/cts/keysets/KeySetPermissionsTest.java]:[key]:[4]:method_text:[ pm.checkPermission(KEYSET_PERM_NAME, KEYSET_APP_PKG) == PackageManager.PERMISSION_GRANTED);    }}])', 1), ('([1:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[modes]:[1]:method_text:[    assertEquals(KeyProperties.AUTH_DEVICE_CREDENTIAL, info.getUserAuthenticationType());    }   ])', 1), ('([22:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[key]:[22]:method_text:[inal String KEY_NAME = ""nice_key"";    private static final String KEYSTORE = ""AndroidKeyStore"";   ])', 1), ('([38:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[key]:[38]:method_text:[    assertEquals(KeyProperties.AUTH_DEVICE_CREDENTIAL, info.getUserAuthenticationType());    }   ])', 1), ('([21:/com/android/cts/authboundkey/AuthBoundKeyAppTest.java]:[key]:[21]:method_text:[           return;        }        fail(""Expected an UnrecoverableKeyException or null"");    }}])', 1), ('([1:/com/android/cts/monkey/PackageTest.java]:[length]:[1]:method_text:[cmp=com\\\\.android\\\\.cts\\\\.monkey2/\\\\.ChimpActivity.*$"",                    Pattern.MULTILINE);   ])', 1), ('([2:/com/android/cts/monkey/PackageTest.java]:[length]:[2]:method_text:[ring input) {        return input.substring(0, Math.min(input.length(), MAX_ERROR_LENGTH));    }}])', 1), ('([6:/com/android/cts/monkey/PackageTest.java]:[key]:[6]:method_text:[cmp=com\\\\.android\\\\.cts\\\\.monkey2/\\\\.ChimpActivity.*$"",                    Pattern.MULTILINE);   ])', 1), ('([6:/com/android/cts/monkey/PackageTest.java]:[key]:[6]:method_text:[r2.cancel();            receiver2.clearBuffer();            receiver2 = null;        }    }   ])', 1), ('([3:/com/android/cts/monkey/PackageTest.java]:[key]:[3]:method_text:[ring input) {        return input.substring(0, Math.min(input.length(), MAX_ERROR_LENGTH));    }}])', 1), ('([4:/com/android/cts/monkey/MonkeyTest.java]:[key]:[4]:method_text:[rivate static final String MONKEY = ""@(>.<)@"";    private static final String HUMAN = ""(^_^)"";   ])', 1), ('([3:/com/android/cts/monkey/MonkeyTest.java]:[key]:[3]:method_text:[ShellCommand(MONKEY_CMD + "" -p "" + PKGS[0] + "" 1000"");        assertIsUserAMonkey(true);    }   ])', 1), ('([13:/com/android/cts/monkey/MonkeyTest.java]:[key]:[13]:method_text:[           assertTrue(monkeyLogsFound);        } finally {            s.close();        }    }}])', 1), ('([2:/com/android/cts/monkey/SeedTest.java]:[key]:[2]:method_text:[roid.cts.monkey;import java.util.Scanner;public class SeedTest extends AbstractMonkeyTest {   ])', 1), ('([1:/com/android/cts/monkey/SeedTest.java]:[key]:[1]:method_text:[      String out2 = mDevice.executeShellCommand(cmd1);        assertOutputs(out1, out2);    }   ])', 1), ('([1:/com/android/cts/monkey/SeedTest.java]:[key]:[1]:method_text:[ith("":Sending"")) {                return line;            }        }        return null;    }}])', 1), ('([2:/com/android/cts/monkey/CategoryTest.java]:[key]:[2]:method_text:[tends AbstractMonkeyTest {    private static final long MAX_TIMEOUT = 5 * 60 * 1000; // 5 min   ])', 1), ('([4:/com/android/cts/monkey/CategoryTest.java]:[key]:[4]:method_text:[iver.cancel();            receiver.clearBuffer();            receiver = null;        }    }   ])', 1), ('([9:/com/android/cts/monkey/CategoryTest.java]:[key]:[9]:method_text:[r2.cancel();            receiver2.clearBuffer();            receiver2 = null;        }    }   ])', 1), ('([5:/com/android/cts/monkey/CategoryTest.java]:[key]:[5]:method_text:[eceiver.cancel();            receiver.clearBuffer();            receiver = null;        }    }}])', 1), ('([4:/com/android/cts/monkey/VerbosityTest.java]:[length]:[4]:method_text:[       assertTrue(v0.length() < v1.length());        assertTrue(v1.length() < v2.length());    }}])', 1), ('([2:/com/android/cts/monkey/VerbosityTest.java]:[key]:[2]:method_text:[. */package com.android.cts.monkey;public class VerbosityTest extends AbstractMonkeyTest {   ])', 1), ('([3:/com/android/cts/monkey/VerbosityTest.java]:[key]:[3]:method_text:[       assertTrue(v0.length() < v1.length());        assertTrue(v1.length() < v2.length());    }}])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[1]:method_text:[00.99""));        assertEquals(0, parseSystemOsVersion(""99.99.100""));    }    @RequiresDevice   ])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[2]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[1]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[supported]:[1]:method_text:[       + devicePropertiesAttestation,                        e);            }        }    }   ])', 1), ('([4:/android/keystore/cts/KeyAttestationTest.java]:[modes]:[4]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[modes]:[1]:method_text:[ROR_CANNOT_ATTEST_IDS == cause.getErrorCode())                );            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[modes]:[1]:method_text:[ } finally {                keyStore.deleteEntry(keystoreAlias);            }        }    }   ])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[modes]:[2]:method_text:[       + devicePropertiesAttestation,                        e);            }        }    }   ])', 1), ('([23:/android/keystore/cts/KeyAttestationTest.java]:[modes]:[23]:method_text:[ionFailureMessage.equals(e.getMessage())) {                throw e;            }        }    }}])', 1), ('([2:/android/keystore/cts/KeyAttestationTest.java]:[length]:[2]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([3:/android/keystore/cts/KeyAttestationTest.java]:[length]:[3]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[length]:[1]:method_text:[ntry(keystoreAlias);            }        }    }    @RestrictedBuildTest    @RequiresDevice   ])', 1), ('([1:/android/keystore/cts/KeyAttestationTest.java]:[length]:[1]:method_text:[    @RestrictedBuildTest    @RequiresDevice  // Emulators have no place to store the needed key   ])', 1), ('([24:/android/keystore/cts/KeyAttestationTest.java]:[length]:[24]:method_text:[ionFailureMessage.equals(e.getMessage())) {                throw e;            }        }    }}])', 1), ('([69:/android/keystore/cts/KeyAttestationTest.java]:[key]:[69]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([6:/android/keystore/cts/KeyAttestationTest.java]:[key]:[6]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([19:/android/keystore/cts/KeyAttestationTest.java]:[key]:[19]:method_text:[ntry(keystoreAlias);            }        }    }    @RestrictedBuildTest    @RequiresDevice   ])', 1), ('([25:/android/keystore/cts/KeyAttestationTest.java]:[key]:[25]:method_text:[         }        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 1), ('([26:/android/keystore/cts/KeyAttestationTest.java]:[key]:[26]:method_text:[         }        } finally {            keyStore.deleteEntry(keystoreAlias);        }    }   ])', 1), ('([17:/android/keystore/cts/KeyAttestationTest.java]:[key]:[17]:method_text:[oad(null);            keyStore.deleteEntry(keystoreAlias);        }    }    @RequiresDevice   ])', 1), ('([5:/android/keystore/cts/KeyAttestationTest.java]:[key]:[5]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([20:/android/keystore/cts/KeyAttestationTest.java]:[key]:[20]:method_text:[    @RestrictedBuildTest    @RequiresDevice  // Emulators have no place to store the needed key   ])', 1), ('([19:/android/keystore/cts/KeyAttestationTest.java]:[key]:[19]:method_text:[ } finally {                keyStore.deleteEntry(keystoreAlias);            }        }    }   ])', 1), ('([25:/android/keystore/cts/KeyAttestationTest.java]:[key]:[25]:method_text:[       + devicePropertiesAttestation,                        e);            }        }    }   ])', 1), ('([207:/android/keystore/cts/KeyAttestationTest.java]:[key]:[207]:method_text:[ionFailureMessage.equals(e.getMessage())) {                throw e;            }        }    }}])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[supported]:[1]:method_text:[_SPEC, true);        }    }    //TODO: Fix b/113108008 so this test will pass for strongbox.   ])', 1), ('([6:/android/keystore/cts/KeyPairGeneratorTest.java]:[supported]:[6]:method_text:[ is resolved"");        } catch (InvalidAlgorithmParameterException expected) {        }    }   ])', 1), ('([25:/android/keystore/cts/KeyPairGeneratorTest.java]:[supported]:[25]:method_text:[);        assertKeyGenUsingECNamedCurveSupported(""SECP521R1"", ECCurves.NIST_P_521_SPEC);    }   ])', 1), ('([10:/android/keystore/cts/KeyPairGeneratorTest.java]:[supported]:[10]:method_text:[cSupported(new RSAKeyGenParameterSpec(                2048, RSAKeyGenParameterSpec.F0));    }   ])', 1), ('([8:/android/keystore/cts/KeyPairGeneratorTest.java]:[supported]:[8]:method_text:[Spec(int purposes) {        return new KeyGenParameterSpec.Builder(TEST_ALIAS_1, purposes);    }}])', 1), ('([19:/android/keystore/cts/KeyPairGeneratorTest.java]:[ciphers]:[19]:method_text:[Spec(int purposes) {        return new KeyGenParameterSpec.Builder(TEST_ALIAS_1, purposes);    }}])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([5:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[5]:method_text:[ailed for "" + algorithm, e);            }        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[3]:method_text:[ngs()));        MoreAsserts.assertEmpty(Arrays.asList(keyInfo.getEncryptionPaddings()));    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[es.SIGNATURE_PADDING_RSA_PSS,                KeyProperties.SIGNATURE_PADDING_RSA_PKCS1);    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[le    // respecting the spec constraints.    // Test fails until the resolution of b/113276806   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[ired());        assertEquals(0, keyInfo.getUserAuthenticationValidityDurationSeconds());    }   ])', 1), ('([2:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[2]:method_text:[le    // respecting the spec constraints.    // Test fails until the resolution of b/113276806   ])', 1), ('([2:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[2]:method_text:[ired());        assertEquals(0, keyInfo.getUserAuthenticationValidityDurationSeconds());    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[LIAS_1);        assertKeyPairAndCertificateUsableForTLSPeerAuthentication(TEST_ALIAS_1);    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[require that secure lock screen is set up and    // that at least one fingerprint is enrolled.   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorTest.java]:[modes]:[1]:method_text:[Spec(int purposes) {        return new KeyGenParameterSpec.Builder(TEST_ALIAS_1, purposes);    }}])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorTest.java]:[length]:[3]:method_text:[Spec(int purposes) {        return new KeyGenParameterSpec.Builder(TEST_ALIAS_1, purposes);    }}])', 1), ('([32:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[32]:method_text:[ mKeyStore = KeyStore.getInstance(""AndroidKeyStore"");        mKeyStore.load(null, null);    }   ])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[3]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([2:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[2]:method_text:[erator().initialize(spec);        getEcGenerator().initialize(spec, new SecureRandom());    }   ])', 1), ('([4:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[4]:method_text:[erator().initialize(spec);        getEcGenerator().initialize(spec, new SecureRandom());    }   ])', 1), ('([9:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[9]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[3]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([46:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[46]:method_text:[ailed for "" + algorithm, e);            }        }    }    @SuppressWarnings(""deprecation"")   ])', 1), ('([134:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[134]:method_text:[ngs()));        MoreAsserts.assertEmpty(Arrays.asList(keyInfo.getEncryptionPaddings()));    }   ])', 1), ('([50:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[50]:method_text:[es.SIGNATURE_PADDING_RSA_PSS,                KeyProperties.SIGNATURE_PADDING_RSA_PKCS1);    }   ])', 1), ('([22:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[22]:method_text:[TEST_SERIAL_2,                    NOW,                    NOW_PLUS_10_YEARS);        }    }   ])', 1), ('([30:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[30]:method_text:[,                TEST_SERIAL_1,                NOW,                NOW_PLUS_10_YEARS);    }   ])', 1), ('([22:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[22]:method_text:[.getEncoded())) {            fail(""The same EC key pair was generated twice"");        }    }   ])', 1), ('([22:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[22]:method_text:[getEncoded())) {            fail(""The same RSA key pair was generated twice"");        }    }   ])', 1), ('([36:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[36]:method_text:[ngs()));        MoreAsserts.assertEmpty(Arrays.asList(keyInfo.getEncryptionPaddings()));    }   ])', 1), ('([37:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[37]:method_text:[ngs()));        MoreAsserts.assertEmpty(Arrays.asList(keyInfo.getEncryptionPaddings()));    }   ])', 1), ('([60:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[60]:method_text:[le    // respecting the spec constraints.    // Test fails until the resolution of b/113276806   ])', 1), ('([56:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[56]:method_text:[ired());        assertEquals(0, keyInfo.getUserAuthenticationValidityDurationSeconds());    }   ])', 1), ('([75:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[75]:method_text:[le    // respecting the spec constraints.    // Test fails until the resolution of b/113276806   ])', 1), ('([71:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[71]:method_text:[ired());        assertEquals(0, keyInfo.getUserAuthenticationValidityDurationSeconds());    }   ])', 1), ('([22:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[22]:method_text:[LIAS_1);        assertKeyPairAndCertificateUsableForTLSPeerAuthentication(TEST_ALIAS_1);    }   ])', 1), ('([32:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[32]:method_text:[require that secure lock screen is set up and    // that at least one fingerprint is enrolled.   ])', 1), ('([22:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[22]:method_text:[eyPair.getPrivate());        assertEquals(validityStart, keyInfo.getKeyValidityStart());    }   ])', 1), ('([20:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[20]:method_text:[vate());        assertEquals(originationEnd, keyInfo.getKeyValidityForOriginationEnd());    }   ])', 1), ('([5:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[5]:method_text:[_SPEC, true);        }    }    //TODO: Fix b/113108008 so this test will pass for strongbox.   ])', 1), ('([21:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[21]:method_text:[ is resolved"");        } catch (InvalidAlgorithmParameterException expected) {        }    }   ])', 1), ('([24:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[24]:method_text:[);        assertKeyGenUsingECNamedCurveSupported(""SECP521R1"", ECCurves.NIST_P_521_SPEC);    }   ])', 1), ('([11:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[11]:method_text:[cSupported(new RSAKeyGenParameterSpec(                2048, RSAKeyGenParameterSpec.F0));    }   ])', 1), ('([16:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[16]:method_text:[yptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)                        .build());    }   ])', 1), ('([12:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[12]:method_text:[izedEncryptionRequired(false)                        .build());    }    // http://b/28384942   ])', 1), ('([205:/android/keystore/cts/KeyPairGeneratorTest.java]:[key]:[205]:method_text:[Spec(int purposes) {        return new KeyGenParameterSpec.Builder(TEST_ALIAS_1, purposes);    }}])', 1), ('([2:/android/keystore/cts/MacTest.java]:[supported]:[2]:method_text:[RuntimeException(""Failed for "" + algorithm, e);                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/MacTest.java]:[length]:[1]:method_text:[            throw new RuntimeException(algorithm + "" failed"", e);            }        }    }   ])', 1), ('([2:/android/keystore/cts/MacTest.java]:[length]:[2]:method_text:[code(keyBytes),                            e);                }            }        }    }   ])', 1), ('([9:/android/keystore/cts/MacTest.java]:[length]:[9]:method_text:[(byte[] key, byte[] mac) {            this.key = key;            this.mac = mac;        }    }}])', 1), ('([11:/android/keystore/cts/MacTest.java]:[key]:[11]:method_text:[25738990e6d0""));    }    private static final long DAY_IN_MILLIS = TestUtils.DAY_IN_MILLIS;   ])', 1), ('([2:/android/keystore/cts/MacTest.java]:[key]:[2]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([4:/android/keystore/cts/MacTest.java]:[key]:[4]:method_text:[            throw new RuntimeException(algorithm + "" failed"", e);            }        }    }   ])', 1), ('([11:/android/keystore/cts/MacTest.java]:[key]:[11]:method_text:[            throw new RuntimeException(algorithm + "" failed"", e);            }        }    }   ])', 1), ('([14:/android/keystore/cts/MacTest.java]:[key]:[14]:method_text:[ algorithm + "" failed, signing provider: "" + signingProvider, e);            }        }    }   ])', 1), ('([16:/android/keystore/cts/MacTest.java]:[key]:[16]:method_text:[code(keyBytes),                            e);                }            }        }    }   ])', 1), ('([6:/android/keystore/cts/MacTest.java]:[key]:[6]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/MacTest.java]:[key]:[3]:method_text:[RuntimeException(""Failed for "" + algorithm, e);                }            }        }    }   ])', 1), ('([81:/android/keystore/cts/MacTest.java]:[key]:[81]:method_text:[(byte[] key, byte[] mac) {            this.key = key;            this.mac = mac;        }    }}])', 1), ('([3:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[3]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([6:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[6]:method_text:[;            }        }    }    // TODO: This test will fail until b/117509689 is resolved.   ])', 1), ('([2:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[2]:method_text:[test will continue to fail until b/117509689 is resolved***"", e);            }        }    }   ])', 1), ('([4:/android/keystore/cts/KeyGeneratorTest.java]:[supported]:[4]:method_text:[      + "". Use Strongbox: "" + useStrongbox, e);                }            }        }    }   ])', 1), ('([5:/android/keystore/cts/KeyGeneratorTest.java]:[modes]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([22:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[22]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([3:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[3]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([7:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[7]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([16:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[16]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([24:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[24]:method_text:[;            }        }    }    // TODO: This test will fail until b/117509689 is resolved.   ])', 1), ('([19:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[19]:method_text:[test will continue to fail until b/117509689 is resolved***"", e);            }        }    }   ])', 1), ('([21:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[21]:method_text:[      + "". Use Strongbox: "" + useStrongbox, e);                }            }        }    }   ])', 1), ('([26:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[26]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([13:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[13]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([6:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[6]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([48:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[48]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([24:/android/keystore/cts/KeyGeneratorTest.java]:[key]:[24]:method_text:[viderException {        return KeyGenerator.getInstance(algorithm, EXPECTED_PROVIDER_NAME);    }}])', 1), ('([1:/android/keystore/cts/KeyProtectionTest.java]:[mandatory]:[1]:method_text:[E_COUNT, spec.getMaxUsageCount());        assertEquals(spec.isStrongBoxBacked(), false);    }   ])', 1), ('([1:/android/keystore/cts/KeyProtectionTest.java]:[modes]:[1]:method_text:[E_COUNT, spec.getMaxUsageCount());        assertEquals(spec.isStrongBoxBacked(), false);    }   ])', 1), ('([2:/android/keystore/cts/KeyProtectionTest.java]:[modes]:[2]:method_text:[getMaxUsageCount(), maxUsageCount);        assertEquals(spec.isStrongBoxBacked(), true);    }   ])', 1), ('([10:/android/keystore/cts/KeyProtectionTest.java]:[modes]:[10]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), ('([6:/android/keystore/cts/KeyProtectionTest.java]:[modes]:[6]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), ('([8:/android/keystore/cts/KeyProtectionTest.java]:[key]:[8]:method_text:[import org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class KeyProtectionTest {   ])', 1), ('([9:/android/keystore/cts/KeyProtectionTest.java]:[key]:[9]:method_text:[E_COUNT, spec.getMaxUsageCount());        assertEquals(spec.isStrongBoxBacked(), false);    }   ])', 1), ('([41:/android/keystore/cts/KeyProtectionTest.java]:[key]:[41]:method_text:[getMaxUsageCount(), maxUsageCount);        assertEquals(spec.isStrongBoxBacked(), true);    }   ])', 1), ('([7:/android/keystore/cts/KeyProtectionTest.java]:[key]:[7]:method_text:[ForOriginationEnd());        assertEquals(date, spec.getKeyValidityForConsumptionEnd());    }   ])', 1), ('([2:/android/keystore/cts/KeyProtectionTest.java]:[key]:[2]:method_text:[onSeconds(-2);            fail();        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([42:/android/keystore/cts/KeyProtectionTest.java]:[key]:[42]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), ('([30:/android/keystore/cts/KeyProtectionTest.java]:[key]:[30]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), ('([2:/android/keystore/cts/KeyProtectionTest.java]:[key]:[2]:method_text:[MaxUsageCount(0);            fail();        } catch (IllegalArgumentException expected) {}    }}])', 1), ('([1:/android/keystore/cts/KeyGenParameterSpecTest.java]:[mandatory]:[1]:method_text:[);        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, spec.getMaxUsageCount());    }   ])', 1), ('([1:/android/keystore/cts/KeyGenParameterSpecTest.java]:[modes]:[1]:method_text:[);        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, spec.getMaxUsageCount());    }   ])', 1), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[modes]:[2]:method_text:[sUnlockedDeviceRequired());        assertEquals(maxUsageCount, spec.getMaxUsageCount());    }   ])', 1), ('([10:/android/keystore/cts/KeyGenParameterSpecTest.java]:[modes]:[10]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), (""([6:/android/keystore/cts/KeyGenParameterSpecTest.java]:[modes]:[6]:method_text:[ey with UID throws an exception since CTS doesn't have the necessary     * permissions.     */   ])"", 1), ('([7:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[7]:method_text:[    private static final Date DEFAULT_CERT_NOT_AFTER = new Date(2461449600000L); // Jan 1 2048   ])', 1), ('([11:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[11]:method_text:[);        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, spec.getMaxUsageCount());    }   ])', 1), ('([44:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[44]:method_text:[sUnlockedDeviceRequired());        assertEquals(maxUsageCount, spec.getMaxUsageCount());    }   ])', 1), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[2]:method_text:[.PURPOSE_ENCRYPT);            fail();        } catch (NullPointerException expected) {}    }   ])', 1), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[2]:method_text:[POSE_ENCRYPT);            fail();        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([7:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[7]:method_text:[ForOriginationEnd());        assertEquals(date, spec.getKeyValidityForConsumptionEnd());    }   ])', 1), ('([2:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[2]:method_text:[onSeconds(-2);            fail();        } catch (IllegalArgumentException expected) {}    }   ])', 1), ('([42:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[42]:method_text:[(originalSignaturePaddings),                Arrays.asList(spec.getSignaturePaddings()));    }   ])', 1), (""([31:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[31]:method_text:[ey with UID throws an exception since CTS doesn't have the necessary     * permissions.     */   ])"", 1), ('([12:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[12]:method_text:[     .build());        assertThrows(ProviderException.class, keyGenerator::generateKey);    }   ])', 1), ('([3:/android/keystore/cts/KeyGenParameterSpecTest.java]:[key]:[3]:method_text:[MaxUsageCount(0);            fail();        } catch (IllegalArgumentException expected) {}    }}])', 1), ('([10:/android/keystore/cts/CipherTest.java]:[supported]:[10]:method_text:[s key            return Arrays.copyOf(plaintext, maxSupportedPlaintextSizeBytes);        }    }}])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[ciphers]:[1]:method_text:[pm != null && pm.hasSystemFeature(""android.software.secure_lock_screen""));    }    @Presubmit   ])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[ciphers]:[1]:method_text:[s key            return Arrays.copyOf(plaintext, maxSupportedPlaintextSizeBytes);        }    }}])', 1), ('([2:/android/keystore/cts/CipherTest.java]:[modes]:[2]:method_text:[   throw new RuntimeException(""Failed for "" + transformation, e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[in interrupted state which cannot be signaled to the user of the Java Crypto     * API.     */   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[    }    /*     * This test performs a round trip en/decryption using Cipher*Streams.     */   ])', 1), ('([7:/android/keystore/cts/CipherTest.java]:[length]:[7]:method_text:[pm != null && pm.hasSystemFeature(""android.software.secure_lock_screen""));    }    @Presubmit   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[                      e);                    }                }            }        }    }   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[key.getAlias(),                            e);                }            }        }    }   ])', 1), ('([4:/android/keystore/cts/CipherTest.java]:[length]:[4]:method_text:[yptionProvider,                            e);                }            }        }    }   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[yptionProvider,                            e);                }            }        }    }   ])', 1), ('([6:/android/keystore/cts/CipherTest.java]:[length]:[6]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 1), ('([7:/android/keystore/cts/CipherTest.java]:[length]:[7]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 1), ('([3:/android/keystore/cts/CipherTest.java]:[length]:[3]:method_text:[endsWith(""/PKCS1PADDING""))                || (transformationUpperCase.contains(""OAEP""));    }   ])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[length]:[1]:method_text:[s key            return Arrays.copyOf(plaintext, maxSupportedPlaintextSizeBytes);        }    }}])', 1), ('([31:/android/keystore/cts/CipherTest.java]:[key]:[31]:method_text:[ close() throws Exception {            mLockCredential.close();        }    }    @Presubmit   ])', 1), ('([1:/android/keystore/cts/CipherTest.java]:[key]:[1]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([19:/android/keystore/cts/CipherTest.java]:[key]:[19]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([10:/android/keystore/cts/CipherTest.java]:[key]:[10]:method_text:[         throw new RuntimeException(""Failed for"" + algorithm, e);            }        }    }   ])', 1), ('([23:/android/keystore/cts/CipherTest.java]:[key]:[23]:method_text:[in interrupted state which cannot be signaled to the user of the Java Crypto     * API.     */   ])', 1), ('([23:/android/keystore/cts/CipherTest.java]:[key]:[23]:method_text:[    }    /*     * This test performs a round trip en/decryption using Cipher*Streams.     */   ])', 1), ('([31:/android/keystore/cts/CipherTest.java]:[key]:[31]:method_text:[pm != null && pm.hasSystemFeature(""android.software.secure_lock_screen""));    }    @Presubmit   ])', 1), ('([7:/android/keystore/cts/CipherTest.java]:[key]:[7]:method_text:[rformDeviceUnlock();            assertFalse(keyguardManager.isDeviceLocked());        }    }   ])', 1), ('([25:/android/keystore/cts/CipherTest.java]:[key]:[25]:method_text:[                      e);                    }                }            }        }    }   ])', 1), ('([25:/android/keystore/cts/CipherTest.java]:[key]:[25]:method_text:[key.getAlias(),                            e);                }            }        }    }   ])', 1), ('([32:/android/keystore/cts/CipherTest.java]:[key]:[32]:method_text:[yptionProvider,                            e);                }            }        }    }   ])', 1), ('([29:/android/keystore/cts/CipherTest.java]:[key]:[29]:method_text:[yptionProvider,                            e);                }            }        }    }   ])', 1), ('([36:/android/keystore/cts/CipherTest.java]:[key]:[36]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 1), ('([26:/android/keystore/cts/CipherTest.java]:[key]:[26]:method_text:[ otherProvider,                            e);                }            }        }    }   ])', 1), ('([19:/android/keystore/cts/CipherTest.java]:[key]:[19]:method_text:[endsWith(""/PKCS1PADDING""))                || (transformationUpperCase.contains(""OAEP""));    }   ])', 1), ('([12:/android/keystore/cts/CipherTest.java]:[key]:[12]:method_text:[red)) {                    assertNotNull(key);                }            }        }    }   ])', 1), ('([11:/android/keystore/cts/CipherTest.java]:[key]:[11]:method_text:[atch (KeyStoreException e) {                // Expected behavior            }        }    }   ])', 1), ('([15:/android/keystore/cts/CipherTest.java]:[key]:[15]:method_text:[              + badEncryptionPadding,                        e);            }        }    }   ])', 1), ('([9:/android/keystore/cts/CipherTest.java]:[key]:[9]:method_text:[              + badEncryptionPadding,                        e);            }        }    }   ])', 1), ('([124:/android/keystore/cts/CipherTest.java]:[key]:[124]:method_text:[s key            return Arrays.copyOf(plaintext, maxSupportedPlaintextSizeBytes);        }    }}])', 1), ('([1:/android/keystore/cts/RSACipherTest.java]:[length]:[1]:method_text:[  throw new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }}])', 1), ('([10:/android/keystore/cts/RSACipherTest.java]:[key]:[10]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([21:/android/keystore/cts/RSACipherTest.java]:[key]:[21]:method_text:[  throw new RuntimeException(""Failed for key "" + key.getAlias(), e);            }        }    }}])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[2]:method_text:[en trying to store"");        } catch (UnsupportedOperationException success) {        }    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[4]:method_text:[en trying to store"");        } catch (UnsupportedOperationException success) {        }    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[;        Cipher.getInstance(""RSA/ECB/OAEPPadding"").init(Cipher.ENCRYPT_MODE, publicKey);    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[tVerify(publicKey);        Signature.getInstance(""NONEwithECDSA"").initVerify(publicKey);    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[   return Duration.ofNanos(System.nanoTime() - mStartTimeNanos);        }    }    @LargeTest   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[2]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[2]:method_text:[));        } finally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[2]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[m + "" with key size "" + (keySizeBytes * 8), e);                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[1]:method_text:[       ""secp512r1"", R.raw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, params);    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[supported]:[3]:method_text:[   threads.get(i).join();        }        Log.i(TAG, ""Deleted "" + numberOfKeys + "" keys"");    }}])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[modes]:[1]:method_text:[should match the original plaintext."",                plaintext2, plaintext.getBytes());    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[modes]:[1]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[modes]:[1]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[length]:[1]:method_text:[ the correct number of keystore entries"",                expectedAliases.length, count);    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[length]:[3]:method_text:[as should not be found"",                mKeyStore.getCertificateChain(getTestAlias2()));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[length]:[3]:method_text:[we put in"", it.next(),                        actualChain[i++]);            }        }    }   ])', 1), ('([1:/android/keystore/cts/AndroidKeyStoreTest.java]:[length]:[1]:method_text:[legalBlockSizeException e) {            // pass on exception as it is expected        }    }   ])', 1), ('([97:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[97]:method_text:[ the correct number of keystore entries"",                expectedAliases.length, count);    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[5]:method_text:[eCa1(), null);        assertAliases(new String[] { getTestAlias1(), getTestAlias2() });    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[exception when not initialized"");        } catch (KeyStoreException success) {        }    }   ])', 1), ('([9:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[9]:method_text:[in unadded certificate alias"",                mKeyStore.containsAlias(getTestAlias3()));    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[ertTrue(""Should contain added CA certificate"", mKeyStore.containsAlias(getTestAlias2()));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[rtFalse(""Should contain added CA certificate"", mKeyStore.containsAlias(getTestAlias1()));    }   ])', 1), ('([9:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[9]:method_text:[        mKeyStore.deleteEntry(getTestAlias2());        assertAliases(new String[] { });    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[n-existent entry is requested for delete.        mKeyStore.deleteEntry(getTestAlias1());    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[5]:method_text:[n-existent entry is requested for delete.        mKeyStore.deleteEntry(getTestAlias2());    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[ assertEquals(""Actual and retrieved certificates should be the same"", actual, retrieved);    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[hould not exist in keystore"",                mKeyStore.getCertificate(getTestAlias1()));    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[ should be found"", getTestAlias1(),                mKeyStore.getCertificateAlias(cert));    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[hould be found"", getTestAlias1(),                mKeyStore.getCertificateAlias(actual));    }   ])', 1), ('([8:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[8]:method_text:[hould be found"", getTestAlias2(),                mKeyStore.getCertificateAlias(actual));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[icate alias should not be found"",                mKeyStore.getCertificateAlias(actual));    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[ificate alias should be found"",                mKeyStore.getCertificateAlias(userCert));    }   ])', 1), ('([7:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[7]:method_text:[as should not be found"",                mKeyStore.getCertificateChain(getTestAlias2()));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[as should not be found"",                mKeyStore.getCertificateChain(getTestAlias1()));    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[        assertTrue(""Time should be close to current time"", actual.after(expectedAfter));    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[        assertTrue(""Time should be close to current time"", actual.after(expectedAfter));    }   ])', 1), ('([13:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[13]:method_text:[rtPrivateKeyEntryEquals(keyEntry, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1, FAKE_RSA_CA_1);    }   ])', 1), ('([13:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[13]:method_text:[assertPrivateKeyEntryEquals(keyEntry, ""EC"", FAKE_EC_KEY_1, FAKE_EC_USER_1, FAKE_EC_CA_1);    }   ])', 1), ('([75:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[75]:method_text:[we put in"", it.next(),                        actualChain[i++]);            }        }    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[nt entry should return null"",                mKeyStore.getEntry(getTestAlias1(), null));    }   ])', 1), ('([34:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[34]:method_text:[ieved key"",                ((RSAKey) expectedKey).getModulus(), actualKey.getModulus());    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[tNull(""Certificate entries should return null"", mKeyStore.getKey(getTestAlias1(), null));    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[5]:method_text:[Null(""A non-existent entry should return null"", mKeyStore.getKey(getTestAlias1(), null));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[s Exception {        assertEquals(""AndroidKeyStore"", mKeyStore.getProvider().getName());    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[uccess() throws Exception {        assertEquals(""AndroidKeyStore"", mKeyStore.getType());    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[true for CA certificate"",                mKeyStore.isCertificateEntry(getTestAlias1()));    }   ])', 1), ('([7:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[7]:method_text:[lse for PrivateKeyEntry"",                mKeyStore.isCertificateEntry(getTestAlias1()));    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[ for non-existent entry"",                mKeyStore.isCertificateEntry(getTestAlias1()));    }   ])', 1), ('([9:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[9]:method_text:[ertTrue(""Should return true for PrivateKeyEntry"", mKeyStore.isKeyEntry(getTestAlias1()));    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[rtFalse(""Should return false for CA certificate"", mKeyStore.isKeyEntry(getTestAlias1()));    }   ])', 1), ('([5:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[5]:method_text:[rn false for non-existent entry"",                mKeyStore.isKeyEntry(getTestAlias1()));    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[ certificate should be the same as the one inserted"", actual,                retrieved);    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[teEntry(getTestAlias1(), cert);        assertAliases(new String[] { getTestAlias1() });    }   ])', 1), ('([8:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[8]:method_text:[teKey entry with a Certificate"");        } catch (KeyStoreException success) {        }    }   ])', 1), ('([22:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[22]:method_text:[sertPrivateKeyEntryEquals(actual, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1, FAKE_RSA_CA_1);    }   ])', 1), ('([41:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[41]:method_text:[al, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1,                    FAKE_RSA_CA_1);        }    }   ])', 1), ('([25:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[25]:method_text:[ry, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1,                    FAKE_RSA_CA_1);        }    }   ])', 1), ('([25:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[25]:method_text:[tedCertificate(),                    actualCertEntry.getTrustedCertificate());        }    }   ])', 1), ('([44:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[44]:method_text:[alPrivEntry, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1,                    null);        }    }   ])', 1), ('([6:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[6]:method_text:[tedCertificate(),                    actualUserEntry.getTrustedCertificate());        }    }   ])', 1), ('([16:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[16]:method_text:[l when a password is specified"");        } catch (KeyStoreException success) {        }    }   ])', 1), ('([21:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[21]:method_text:[sertPrivateKeyEntryEquals(actual, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1, FAKE_RSA_CA_1);    }   ])', 1), ('([42:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[42]:method_text:[al, ""RSA"", FAKE_RSA_KEY_1, FAKE_RSA_USER_1,                    FAKE_RSA_CA_1);        }    }   ])', 1), ('([38:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[38]:method_text:[        assertPrivateKeyEntryEquals(keyEntry, expectedKey, expectedCert, null);        }    }   ])', 1), ('([22:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[22]:method_text:[g PrivaetKey"");            } catch (KeyStoreException success) {            }        }    }   ])', 1), ('([9:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[9]:method_text:[l);    }    /*     * Replacing an existing secret key with itself should be a no-op.     */   ])', 1), ('([28:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[28]:method_text:[should match the original plaintext."",                plaintext2, plaintext.getBytes());    }   ])', 1), ('([18:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[18]:method_text:[expected"", 1, mKeyStore.size());        assertAliases(new String[] { getTestAlias2() });    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[en trying to store"");        } catch (UnsupportedOperationException success) {        }    }   ])', 1), ('([3:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[3]:method_text:[InputStream is supplied"");        } catch (IllegalArgumentException success) {        }    }   ])', 1), ('([2:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[2]:method_text:[en password is supplied"");        } catch (IllegalArgumentException success) {        }    }   ])', 1), ('([4:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[4]:method_text:[en trying to store"");        } catch (UnsupportedOperationException success) {        }    }   ])', 1), ('([26:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[26]:method_text:[xpectedSecret.getEncoded()),                Arrays.toString(actualSecret.getEncoded()));    }   ])', 1), ('([23:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[23]:method_text:[legalBlockSizeException e) {            // pass on exception as it is expected        }    }   ])', 1), ('([20:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[20]:method_text:[;        Cipher.getInstance(""RSA/ECB/OAEPPadding"").init(Cipher.ENCRYPT_MODE, publicKey);    }   ])', 1), ('([16:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[16]:method_text:[tVerify(publicKey);        Signature.getInstance(""NONEwithECDSA"").initVerify(publicKey);    }   ])', 1), ('([13:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[13]:method_text:[y);        Cipher.getInstance(""RSA/ECB/NoPadding"").init(Cipher.ENCRYPT_MODE, publicKey);    }   ])', 1), ('([14:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[14]:method_text:[   return Duration.ofNanos(System.nanoTime() - mStartTimeNanos);        }    }    @LargeTest   ])', 1), ('([70:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[70]:method_text:[inally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }    @LargeTest   ])', 1), ('([68:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[68]:method_text:[));        } finally {            deleteManyTestKeys(keyCount, ALIAS_PREFIX);        }    }   ])', 1), ('([45:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[45]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([42:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[42]:method_text:[ow new RuntimeException(""Failed for key size "" + keySizeBits, e);            }        }    }   ])', 1), ('([35:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[35]:method_text:[m + "" with key size "" + (keySizeBytes * 8), e);                }            }        }    }   ])', 1), ('([15:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[15]:method_text:[       ""secp512r1"", R.raw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, params);    }   ])', 1), ('([79:/android/keystore/cts/AndroidKeyStoreTest.java]:[key]:[79]:method_text:[   threads.get(i).join();        }        Log.i(TAG, ""Deleted "" + numberOfKeys + "" keys"");    }}])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[1]:method_text:[of input.            assertNull(""buffered: "" + buffered, update(new byte[1]));        }    }   ])', 1), ('([4:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[4]:method_text:[ateCipher();        initKat(Cipher.DECRYPT_MODE);        assertUpdateAADNotSupported();    }   ])', 1), ('([9:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[9]:method_text:[dateAAD(ByteBuffer.allocate(getBlockSize()));    }    // TODO: Add tests for WRAP and UNWRAP   ])', 1), ('([3:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[3]:method_text:[lockSize() * 2));            fail();        } catch (IllegalStateException expected) {}    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[1]:method_text:[dOutput,                subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[supported]:[1]:method_text:[param);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }}])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[1]:method_text:[    assertEquals(0, update(ByteBuffer.allocate(1), ByteBuffer.allocate(getBlockSize())));    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[1]:method_text:[ateCipher();        initKat(Cipher.DECRYPT_MODE);        assertUpdateAADNotSupported();    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[1]:method_text:[dateAAD(ByteBuffer.allocate(getBlockSize()));    }    // TODO: Add tests for WRAP and UNWRAP   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[1]:method_text:[xt,                    subarray(decryptedPlaintext, 0, basePlaintext.length));        }    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[ciphers]:[1]:method_text:[param);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }}])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[lengths]:[1]:method_text:[xt,                    subarray(decryptedPlaintext, 0, basePlaintext.length));        }    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[modes]:[1]:method_text:[lockSize() * 2));            fail();        } catch (IllegalStateException expected) {}    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[modes]:[1]:method_text:[param);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }}])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[alid opmode: "" + opmode);        }    }    private Cipher mCipher;    private int mOpmode;   ])', 1), ('([2:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[2]:method_text:[ = mCipher.doFinal(ciphertext);        assertArrayEquals(plaintext, decryptedPlaintext);    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[ (p: 2^{-""                    + (ivBeforeReinitialization.length * 8) + ""})"");        }    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[e very unlucky (p: 2^{-""                    + (getKatIv().length * 8) + ""})"");        }    }   ])', 1), ('([2:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[2]:method_text:[ArrayEquals(getKatIv(), mCipher.getIV());        assertAlgoritmParametersIv(getKatIv());    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[    assertEquals(0, update(ByteBuffer.allocate(1), ByteBuffer.allocate(getBlockSize())));    }   ])', 1), ('([6:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[6]:method_text:[rap(expectedOutput).position(expectedOutput.length),                actualOutputBuffer);    }   ])', 1), ('([7:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[7]:method_text:[length);            assertArrayEquals(expectedFinalOutput, actualFinalOutput);        }    }   ])', 1), ('([8:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[8]:method_text:[length);            assertArrayEquals(expectedFinalOutput, actualFinalOutput);        }    }   ])', 1), ('([13:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[13]:method_text:[xt,                    subarray(decryptedPlaintext, 0, basePlaintext.length));        }    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[1]:method_text:[ion (b/194126736)"");            } else {                fail();            }        }    }   ])', 1), ('([17:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[17]:method_text:[dOutput,                subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));    }   ])', 1), ('([12:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[12]:method_text:[dOutput,                subarray(buffer, outputOffsetInBuffer, outputEndIndexInBuffer));    }   ])', 1), ('([34:/android/keystore/cts/BlockCipherTestBase.java]:[length]:[34]:method_text:[param);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }}])', 1), ('([25:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[25]:method_text:[alid opmode: "" + opmode);        }    }    private Cipher mCipher;    private int mOpmode;   ])', 1), ('([8:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[8]:method_text:[ll);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }   ])', 1), ('([5:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[5]:method_text:[ = mCipher.doFinal(ciphertext);        assertArrayEquals(plaintext, decryptedPlaintext);    }   ])', 1), ('([2:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[2]:method_text:[eratedParams);        assertArrayEquals(ciphertext, mCipher.doFinal(getKatPlaintext()));    }   ])', 1), ('([2:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[2]:method_text:[ (p: 2^{-""                    + (ivBeforeReinitialization.length * 8) + ""})"");        }    }   ])', 1), ('([1:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[1]:method_text:[e very unlucky (p: 2^{-""                    + (getKatIv().length * 8) + ""})"");        }    }   ])', 1), ('([12:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[12]:method_text:[ll);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }   ])', 1), ('([22:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[22]:method_text:[fail(""Same output when reinitialized with a different key. opmode: "" + opmode);        }    }   ])', 1), ('([16:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[16]:method_text:[lockSize() * 2));            fail();        } catch (IllegalStateException expected) {}    }   ])', 1), ('([73:/android/keystore/cts/BlockCipherTestBase.java]:[key]:[73]:method_text:[param);            fail();        } catch (InvalidAlgorithmParameterException expected) {}    }}])', 1), ('([24:/android/keystore/cts/NoAttestKeyTest.java]:[key]:[24]:method_text:[// Ignore any exception and delete the other aliases in the list.            }        }    }   ])', 1), ('([39:/android/keystore/cts/NoAttestKeyTest.java]:[key]:[39]:method_text:[          packageManager.hasSystemFeature(PackageManager.FEATURE_KEYSTORE_APP_ATTEST_KEY));    }}])', 1), ('([2:/android/keystore/cts/BackendBusyExceptionTest.java]:[key]:[2]:method_text:[lso the constructor must throw IllegalArgumentException if the backoff hint is negative.     */   ])', 1), ('([4:/android/keystore/cts/AESGCMCipherTestBase.java]:[length]:[4]:method_text:[Spec spec = params.getParameterSpec(GCMParameterSpec.class);        return spec.getIV();    }   ])', 1), ('([3:/android/keystore/cts/AESGCMCipherTestBase.java]:[length]:[3]:method_text:[Offset += chunkSize;        }        assertArrayEquals(expectedOutput, doFinal(input));    }   ])', 1), ('([2:/android/keystore/cts/AESGCMCipherTestBase.java]:[key]:[2]:method_text:[Spec spec = params.getParameterSpec(GCMParameterSpec.class);        return spec.getIV();    }   ])', 1), ('([1:/android/keystore/cts/PutOverflowTest.java]:[key]:[1]:method_text:[;import org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class PutOverflowTest {   ])', 1), ('([6:/android/keystore/cts/PutOverflowTest.java]:[key]:[6]:method_text:[on avoid causing undue failures if classes or            // methods were changed.        }    }}])', 1), ('([2:/android/keystore/cts/AttestKeyTest.java]:[length]:[2]:method_text:[n[0];        Attestation attestation = Attestation.loadFromCertificate(attestationCert);    }   ])', 1), ('([28:/android/keystore/cts/AttestKeyTest.java]:[key]:[28]:method_text:[// Ignore any exception and delete the other aliases in the list.            }        }    }   ])', 1), ('([23:/android/keystore/cts/AttestKeyTest.java]:[key]:[23]:method_text:[n[0];        Attestation attestation = Attestation.loadFromCertificate(attestationCert);    }   ])', 1), ('([17:/android/keystore/cts/AttestKeyTest.java]:[key]:[17]:method_text:[hat(e.getMessage(), is(""Invalid attestKey, does not have PURPOSE_ATTEST_KEY""));        }    }   ])', 1), ('([17:/android/keystore/cts/AttestKeyTest.java]:[key]:[17]:method_text:[              is(""AttestKey specified but no attestation challenge provided""));        }    }   ])', 1), ('([39:/android/keystore/cts/AttestKeyTest.java]:[key]:[39]:method_text:[        verifyCertificateChain((Certificate[]) combinedChain, false /* expectStrongBox */);    }}])', 1), ('([1:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[modes]:[1]:method_text:[        public byte[] iv;        public byte[] plaintext;        public byte[] ciphertext;    }}])', 1), ('([4:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[length]:[4]:method_text:[        public byte[] iv;        public byte[] plaintext;        public byte[] ciphertext;    }}])', 1), ('([8:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[8]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[oid testECBVarKey128() throws Exception {        runTestsForKatFile(""ECBVarKey128.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[void testECBVarKey192() throws Exception {        runTestsForKatFile(""ECBVarKey192.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[oid testECBVarKey256() throws Exception {        runTestsForKatFile(""ECBVarKey256.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[d testECBKeySbox128() throws Exception {        runTestsForKatFile(""ECBKeySbox128.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[d testECBKeySbox192() throws Exception {        runTestsForKatFile(""ECBKeySbox192.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[d testECBKeySbox256() throws Exception {        runTestsForKatFile(""ECBKeySbox256.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[oid testCBCVarKey128() throws Exception {        runTestsForKatFile(""CBCVarKey128.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[void testCBCVarKey192() throws Exception {        runTestsForKatFile(""CBCVarKey192.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[oid testCBCVarKey256() throws Exception {        runTestsForKatFile(""CBCVarKey256.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[d testCBCKeySbox128() throws Exception {        runTestsForKatFile(""CBCKeySbox128.rsp"");    }   ])', 1), ('([2:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[2]:method_text:[d testCBCKeySbox192() throws Exception {        runTestsForKatFile(""CBCKeySbox192.rsp"");    }   ])', 1), ('([31:/android/keystore/cts/AESCipherNistCavpKatTest.java]:[key]:[31]:method_text:[        public byte[] iv;        public byte[] plaintext;        public byte[] ciphertext;    }}])', 1), ('([1:/android/keystore/cts/DESedeCipherTestBase.java]:[modes]:[1]:method_text:[            super.testUpdateWithEmptyInputReturnsCorrectValue();        }    }    @Override   ])', 1), ('([1:/android/keystore/cts/DESedeCipherTestBase.java]:[length]:[1]:method_text:[de    protected boolean isStreamCipher() {        return false;    }    @java.lang.Override   ])', 1), ('([5:/android/keystore/cts/DESedeCipherTestBase.java]:[key]:[5]:method_text:[de    protected boolean isStreamCipher() {        return false;    }    @java.lang.Override   ])', 1), ('([1:/android/keystore/cts/DESedeCipherTestBase.java]:[key]:[1]:method_text:[            super.testUpdateWithEmptyInputReturnsCorrectValue();        }    }    @Override   ])', 1), ('([5:/android/keystore/cts/SecretKeyFactoryTest.java]:[modes]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([1:/android/keystore/cts/SecretKeyFactoryTest.java]:[modes]:[1]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([15:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[15]:method_text:[      EXPECTED_ALGORITHMS = ObjectArrays.concat(EXPECTED_ALGORITHMS, ""DESede"");        }    }   ])', 1), ('([3:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[3]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([57:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[57]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([9:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[9]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([13:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[13]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([25:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[25]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([6:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[6]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([7:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[7]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([25:/android/keystore/cts/SecretKeyFactoryTest.java]:[key]:[25]:method_text:[rException {        return SecretKeyFactory.getInstance(algorithm, EXPECTED_PROVIDER_NAME);    }}])', 1), ('([6:/android/keystore/cts/KeyInfoTest.java]:[modes]:[6]:method_text:[unt();        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, remainingUsageCount);    }   ])', 1), ('([1:/android/keystore/cts/KeyInfoTest.java]:[modes]:[1]:method_text:[t = info.getRemainingUsageCount();        assertEquals(maxUsageCount, remainingUsageCount);    }}])', 1), ('([12:/android/keystore/cts/KeyInfoTest.java]:[key]:[12]:method_text:[est;import org.junit.runner.RunWith;@RunWith(AndroidJUnit4.class)public class KeyInfoTest {   ])', 1), ('([62:/android/keystore/cts/KeyInfoTest.java]:[key]:[62]:method_text:[unt();        assertEquals(KeyProperties.UNRESTRICTED_USAGE_COUNT, remainingUsageCount);    }   ])', 1), ('([45:/android/keystore/cts/KeyInfoTest.java]:[key]:[45]:method_text:[t = info.getRemainingUsageCount();        assertEquals(maxUsageCount, remainingUsageCount);    }}])', 1), ('([3:/android/keystore/cts/SignatureTest.java]:[supported]:[3]:method_text:[ throw new IllegalArgumentException(""Unsupported key algorithm: "" + keyAlgorithm);        }    }}])', 1), ('([13:/android/keystore/cts/SignatureTest.java]:[length]:[13]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([12:/android/keystore/cts/SignatureTest.java]:[length]:[12]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([7:/android/keystore/cts/SignatureTest.java]:[length]:[7]:method_text:[ throw new IllegalArgumentException(""Unsupported key algorithm: "" + keyAlgorithm);        }    }}])', 1), ('([22:/android/keystore/cts/SignatureTest.java]:[key]:[22]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([1:/android/keystore/cts/SignatureTest.java]:[key]:[1]:method_text:[actualSigAlgsLowerCase,                expectedSigAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([9:/android/keystore/cts/SignatureTest.java]:[key]:[9]:method_text:[         throw new RuntimeException(sigAlgorithm + "" failed"", e);            }        }    }   ])', 1), ('([8:/android/keystore/cts/SignatureTest.java]:[key]:[8]:method_text:[         throw new RuntimeException(sigAlgorithm + "" failed"", e);            }        }    }   ])', 1), ('([15:/android/keystore/cts/SignatureTest.java]:[key]:[15]:method_text:[gAlgorithm + "" with key "" + key.getAlias(), e);                }            }        }    }   ])', 1), ('([55:/android/keystore/cts/SignatureTest.java]:[key]:[55]:method_text:[gAlgorithm + "" with key "" + key.getAlias(), e);                }            }        }    }   ])', 1), ('([14:/android/keystore/cts/SignatureTest.java]:[key]:[14]:method_text:[gAlgorithm + "" with key "" + key.getAlias(), e);                }            }        }    }   ])', 1), ('([17:/android/keystore/cts/SignatureTest.java]:[key]:[17]:method_text:[gAlgorithm + "" with key "" + key.getAlias(), e);                }            }        }    }   ])', 1), ('([29:/android/keystore/cts/SignatureTest.java]:[key]:[29]:method_text:[cationProvider,                            e);                }            }        }    }   ])', 1), ('([28:/android/keystore/cts/SignatureTest.java]:[key]:[28]:method_text:[igningProvider,                            e);                }            }        }    }   ])', 1), ('([23:/android/keystore/cts/SignatureTest.java]:[key]:[23]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([27:/android/keystore/cts/SignatureTest.java]:[key]:[27]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([2:/android/keystore/cts/SignatureTest.java]:[key]:[2]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([8:/android/keystore/cts/SignatureTest.java]:[key]:[8]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([6:/android/keystore/cts/SignatureTest.java]:[key]:[6]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([144:/android/keystore/cts/SignatureTest.java]:[key]:[144]:method_text:[ throw new IllegalArgumentException(""Unsupported key algorithm: "" + keyAlgorithm);        }    }}])', 1), ('([2:/android/keystore/cts/ECDSASignatureTest.java]:[length]:[2]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([3:/android/keystore/cts/ECDSASignatureTest.java]:[length]:[3]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([8:/android/keystore/cts/ECDSASignatureTest.java]:[key]:[8]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([18:/android/keystore/cts/ECDSASignatureTest.java]:[key]:[18]:method_text:[date(message, 0, (keySizeBits / 8) - 1);        assertFalse(signature.verify(sigBytes));    }   ])', 1), ('([36:/android/keystore/cts/ECDSASignatureTest.java]:[key]:[36]:method_text:[aw.ec_key6_secp521r1_pkcs8, R.raw.ec_key6_secp521r1_cert, importParams),                });    }}])', 1), ('([7:/android/keystore/cts/ImportWrappedKeyTest.java]:[modes]:[7]:method_text:[(isStrongBoxBacked)                        .build());        return kpg.generateKeyPair();    }}])', 1), ('([1:/android/keystore/cts/ImportWrappedKeyTest.java]:[length]:[1]:method_text:[RYPT_MODE, key);        assertEquals(new String(c.doFinal(encrypted)), ""hello, world"");    }   ])', 1), ('([5:/android/keystore/cts/ImportWrappedKeyTest.java]:[length]:[5]:method_text:[(isStrongBoxBacked)                        .build());        return kpg.generateKeyPair();    }}])', 1), ('([48:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[48]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([27:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[27]:method_text:[RYPT_MODE, key);        assertEquals(new String(c.doFinal(encrypted)), ""hello, world"");    }   ])', 1), ('([10:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[10]:method_text:[re but expected one"");        }        assertEquals(failureMessage, EXPECTED_FAILURE);    }   ])', 1), ('([29:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[29]:method_text:[key, paramSpec);        assertEquals(new String(c.doFinal(encrypted)), ""hello, world"");    }   ])', 1), ('([29:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[29]:method_text:[oxUnavailableException | SecureKeyImportUnavailableException e) {            }        }    }   ])', 1), ('([112:/android/keystore/cts/ImportWrappedKeyTest.java]:[key]:[112]:method_text:[(isStrongBoxBacked)                        .build());        return kpg.generateKeyPair();    }}])', 1), ('([5:/android/keystore/cts/KeyFactoryTest.java]:[modes]:[5]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([28:/android/keystore/cts/KeyFactoryTest.java]:[key]:[28]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([3:/android/keystore/cts/KeyFactoryTest.java]:[key]:[3]:method_text:[Order(actualAlgsLowerCase,                expectedAlgsLowerCase.toArray(new String[0]));    }   ])', 1), ('([62:/android/keystore/cts/KeyFactoryTest.java]:[key]:[62]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([21:/android/keystore/cts/KeyFactoryTest.java]:[key]:[21]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([34:/android/keystore/cts/KeyFactoryTest.java]:[key]:[34]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([25:/android/keystore/cts/KeyFactoryTest.java]:[key]:[25]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([42:/android/keystore/cts/KeyFactoryTest.java]:[key]:[42]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([9:/android/keystore/cts/KeyFactoryTest.java]:[key]:[9]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([13:/android/keystore/cts/KeyFactoryTest.java]:[key]:[13]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([23:/android/keystore/cts/KeyFactoryTest.java]:[key]:[23]:method_text:[        throw new RuntimeException(""Failed for "" + algorithm, e);            }        }    }   ])', 1), ('([26:/android/keystore/cts/KeyFactoryTest.java]:[key]:[26]:method_text:[roviderException {        return KeyFactory.getInstance(algorithm, EXPECTED_PROVIDER_NAME);    }}])', 1), ('([3:/android/keystore/cts/RSASignatureTest.java]:[length]:[3]:method_text:[untimeException(""Failed for "" + modulusSizeBits + "" bit key"", e);            }        }    }   ])', 1), ('([3:/android/keystore/cts/RSASignatureTest.java]:[length]:[3]:method_text:[     R.raw.rsa_key4_4096_pkcs8, R.raw.rsa_key4_4096_cert, importParams),                });    }}])', 1), ('([19:/android/keystore/cts/RSASignatureTest.java]:[key]:[19]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([20:/android/keystore/cts/RSASignatureTest.java]:[key]:[20]:method_text:[untimeException(""Failed for "" + modulusSizeBits + "" bit key"", e);            }        }    }   ])', 1), ('([44:/android/keystore/cts/RSASignatureTest.java]:[key]:[44]:method_text:[     R.raw.rsa_key4_4096_pkcs8, R.raw.rsa_key4_4096_cert, importParams),                });    }}])', 1), ('([1:/android/keystore/cts/KeyAgreementTest.java]:[supported]:[1]:method_text:[t being enabled. See b/160623310 for more information."");            return null;        }    }}])', 1), ('([17:/android/keystore/cts/KeyAgreementTest.java]:[key]:[17]:method_text:[s KeyAgreementTest {    private static final String PRIVATE_KEY_ALIAS = ""TemporaryPrivateKey"";   ])', 1), ('([6:/android/keystore/cts/KeyAgreementTest.java]:[key]:[6]:method_text:[;        byte[] sharedSecret = ka.generateSecret();        assertNotNull(sharedSecret);    }   ])', 1), ('([22:/android/keystore/cts/KeyAgreementTest.java]:[key]:[22]:method_text:[.generateSecret();        Assert.assertArrayEquals(ourSharedSecret, theirSharedSecret);    }   ])', 1), ('([12:/android/keystore/cts/KeyAgreementTest.java]:[key]:[12]:method_text:[2 = ka.generateSecret();        Assert.assertArrayEquals(sharedSecret1, sharedSecret2);    }   ])', 1), ('([9:/android/keystore/cts/KeyAgreementTest.java]:[key]:[9]:method_text:[ception."");        } catch (InvalidKeyException ike) {            // Expected        }    }   ])', 1), ('([20:/android/keystore/cts/KeyAgreementTest.java]:[key]:[20]:method_text:[ld fail."");        } catch (InvalidKeyException ike) {            // Expected        }    }   ])', 1), ('([4:/android/keystore/cts/KeyAgreementTest.java]:[key]:[4]:method_text:[ first"");        } catch (IllegalStateException ise) {            // Expected        }    }   ])', 1), ('([7:/android/keystore/cts/KeyAgreementTest.java]:[key]:[7]:method_text:[y key."");        } catch (IllegalStateException ise) {            // Expected        }    }   ])', 1), ('([57:/android/keystore/cts/KeyAgreementTest.java]:[key]:[57]:method_text:[t being enabled. See b/160623310 for more information."");            return null;        }    }}])', 1), ('([8:/android/keystore/cts/KeyChainTest.java]:[supported]:[8]:method_text:[));        assertTrue(""RSA must be supported"", KeyChain.isKeyAlgorithmSupported(""RSA""));    }   ])', 1), ('([1:/android/keystore/cts/KeyChainTest.java]:[supported]:[1]:method_text:[ger();        return (pm != null && pm.hasSystemFeature(""android.software.leanback_only""));    }}])', 1), ('([4:/android/keystore/cts/KeyChainTest.java]:[key]:[4]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([7:/android/keystore/cts/KeyChainTest.java]:[key]:[7]:method_text:[));        assertTrue(""RSA must be supported"", KeyChain.isKeyAlgorithmSupported(""RSA""));    }   ])', 1), ('([6:/android/keystore/cts/KeyChainTest.java]:[key]:[6]:method_text:[rivateKey(Context, String)"");        } catch (NullPointerException expected) {        }    }   ])', 1), ('([6:/android/keystore/cts/KeyChainTest.java]:[key]:[6]:method_text:[ivateKey(Context, String)."");        } catch (NullPointerException expected) {        }    }   ])', 1), ('([11:/android/keystore/cts/KeyChainTest.java]:[key]:[11]:method_text:[are/keymaster.h and the associated     * tests in hardware/libhardware/tests/keymaster/     */   ])', 1), ('([10:/android/keystore/cts/KeyChainTest.java]:[key]:[10]:method_text:[ger();        return (pm != null && pm.hasSystemFeature(""android.software.leanback_only""));    }}])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[3]:method_text:[ntext() {        return InstrumentationRegistry.getInstrumentation().getTargetContext();    }   ])', 1), ('([3:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[3]:method_text:[);        assertFalse(""encryption flag should not be on"", spec.isEncryptionRequired());    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[ption when context is null"");        } catch (NullPointerException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[ when alias is missing"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[hen subject is missing"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[erialNumber is missing"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[n startDate is missing"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[hen endDate is missing"");        } catch (IllegalArgumentException expected) {        }    }   ])', 1), ('([1:/android/keystore/cts/KeyPairGeneratorSpecTest.java]:[key]:[1]:method_text:[ when end is before start"");        } catch (IllegalArgumentException expected) {        }    }}])', 1), ('([1:/android/keystore/cts/AESECBCipherTestBase.java]:[supported]:[1]:method_text:[params != null) {            fail(""ECB does not use IV"");        }        return null;    }   ])', 1), ('([1:/android/keystore/cts/AESECBCipherTestBase.java]:[length]:[1]:method_text:[params != null) {            fail(""ECB does not use IV"");        }        return null;    }   ])', 1), ('([1:/android/keystore/cts/AESECBCipherTestBase.java]:[key]:[1]:method_text:[params != null) {            fail(""ECB does not use IV"");        }        return null;    }   ])', 1), ('([8:/android/keystore/cts/KeyStoreTest.java]:[supported]:[8]:method_text:[List(getPrivateKey().getCertificateChain()),                     Arrays.asList(actual));    }   ])', 1), ('([6:/android/keystore/cts/KeyStoreTest.java]:[supported]:[6]:method_text:[ } catch (UnrecoverableKeyException expected) {                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[icateChain(keyStore.getCertificateChain(ALIAS_ALT_CASE_PRIVATE));            }        }    }   ])', 1), ('([7:/android/keystore/cts/KeyStoreTest.java]:[supported]:[7]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([6:/android/keystore/cts/KeyStoreTest.java]:[supported]:[6]:method_text:[e.getKey(ALIAS_ALT_CASE_SECRET, PASSWORD_KEY));                }            }        }    }   ])', 1), ('([2:/android/keystore/cts/KeyStoreTest.java]:[supported]:[2]:method_text:[Certificate2(keyStore.getCertificate(ALIAS_ALT_CASE_CERTIFICATE));            }        }    }   ])', 1), ('([4:/android/keystore/cts/KeyStoreTest.java]:[supported]:[4]:method_text:[       keyStore.deleteEntry(ALIAS_CERTIFICATE);                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[cted, new HashSet<String>(Collections.list(keyStore.aliases())));            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[,                         keyStore.containsAlias(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[ expected++;            }            assertEquals(expected, keyStore.size());        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[ET));            assertFalse(keyStore.isKeyEntry(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[,                    keyStore.isCertificateEntry(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[    assertEquals(expected.getCertificate(alias), actual.getCertificate(alias));        }    }   ])', 1), ('([8:/android/keystore/cts/KeyStoreTest.java]:[supported]:[8]:method_text:[SWORD_STORE);            assertEqualsKeyStores(keyStore, out, PASSWORD_STORE);        }    }   ])', 1), ('([4:/android/keystore/cts/KeyStoreTest.java]:[supported]:[4]:method_text:[             assertTrue(isLoadStoreParameterSupported(keyStore));            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[   }        // test_KeyStore_store_OutputStream effectively tests load as well as store    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[);            } catch (UnsupportedOperationException expected) {            }        }    }   ])', 1), ('([4:/android/keystore/cts/KeyStoreTest.java]:[supported]:[4]:method_text:[}    }    public static class FakeProtectionParameter implements ProtectionParameter {    }   ])', 1), ('([7:/android/keystore/cts/KeyStoreTest.java]:[supported]:[7]:method_text:[toreException expected) {                    }                }            }        }    }   ])', 1), ('([1:/android/keystore/cts/KeyStoreTest.java]:[supported]:[1]:method_text:[        }    }    // TODO(27810271): investigate why this is taking too long for armeabi-v7a   ])', 1), ('([3:/android/keystore/cts/KeyStoreTest.java]:[supported]:[3]:method_text:[());            assertEquals(PARAM_STORE, builder.getProtectionParameter(""""));        }    }   ])', 1), ('([264:/android/keystore/cts/KeyStoreTest.java]:[key]:[264]:method_text:[List(getPrivateKey().getCertificateChain()),                     Arrays.asList(actual));    }   ])', 1), ('([4:/android/keystore/cts/KeyStoreTest.java]:[key]:[4]:method_text:[ovider());                assertEquals(algorithm, ks.getType());            }        }    }   ])', 1), ('([13:/android/keystore/cts/KeyStoreTest.java]:[key]:[13]:method_text:[eption expected) {        }        assertNotNull(KeyStore.getInstance(type, provider));    }   ])', 1), ('([4:/android/keystore/cts/KeyStoreTest.java]:[key]:[4]:method_text:[e.getInstance(type);        assertNotNull(ks);        assertEquals(type, ks.getType());    }   ])', 1), ('([8:/android/keystore/cts/KeyStoreTest.java]:[key]:[8]:method_text:[re keyStore : keyStores()) {            assertNotNull(keyStore.getProvider());        }    }   ])', 1), ('([8:/android/keystore/cts/KeyStoreTest.java]:[key]:[8]:method_text:[yStore keyStore : keyStores()) {            assertNotNull(keyStore.getType());        }    }   ])', 1), ('([126:/android/keystore/cts/KeyStoreTest.java]:[key]:[126]:method_text:[ } catch (UnrecoverableKeyException expected) {                }            }        }    }   ])', 1), ('([25:/android/keystore/cts/KeyStoreTest.java]:[key]:[25]:method_text:[icateChain(keyStore.getCertificateChain(ALIAS_ALT_CASE_PRIVATE));            }        }    }   ])', 1), ('([23:/android/keystore/cts/KeyStoreTest.java]:[key]:[23]:method_text:[re.getCertificate(ALIAS_ALT_CASE_CERTIFICATE));                }            }        }    }   ])', 1), ('([24:/android/keystore/cts/KeyStoreTest.java]:[key]:[24]:method_text:[           assertTrue(date.getTime() <= after);                }            }        }    }   ])', 1), ('([265:/android/keystore/cts/KeyStoreTest.java]:[key]:[265]:method_text:[                        }                    }                }            }        }    }   ])', 1), ('([212:/android/keystore/cts/KeyStoreTest.java]:[key]:[212]:method_text:[e.getKey(ALIAS_ALT_CASE_SECRET, PASSWORD_KEY));                }            }        }    }   ])', 1), ('([70:/android/keystore/cts/KeyStoreTest.java]:[key]:[70]:method_text:[Certificate2(keyStore.getCertificate(ALIAS_ALT_CASE_CERTIFICATE));            }        }    }   ])', 1), ('([100:/android/keystore/cts/KeyStoreTest.java]:[key]:[100]:method_text:[       keyStore.deleteEntry(ALIAS_CERTIFICATE);                }            }        }    }   ])', 1), ('([36:/android/keystore/cts/KeyStoreTest.java]:[key]:[36]:method_text:[cted, new HashSet<String>(Collections.list(keyStore.aliases())));            }        }    }   ])', 1), ('([40:/android/keystore/cts/KeyStoreTest.java]:[key]:[40]:method_text:[,                         keyStore.containsAlias(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([34:/android/keystore/cts/KeyStoreTest.java]:[key]:[34]:method_text:[ expected++;            }            assertEquals(expected, keyStore.size());        }    }   ])', 1), ('([50:/android/keystore/cts/KeyStoreTest.java]:[key]:[50]:method_text:[ET));            assertFalse(keyStore.isKeyEntry(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([36:/android/keystore/cts/KeyStoreTest.java]:[key]:[36]:method_text:[,                    keyStore.isCertificateEntry(ALIAS_ALT_CASE_CERTIFICATE));        }    }   ])', 1), ('([58:/android/keystore/cts/KeyStoreTest.java]:[key]:[58]:method_text:[    assertEquals(expected.getCertificate(alias), actual.getCertificate(alias));        }    }   ])', 1), ('([57:/android/keystore/cts/KeyStoreTest.java]:[key]:[57]:method_text:[SWORD_STORE);            assertEqualsKeyStores(keyStore, out, PASSWORD_STORE);        }    }   ])', 1), ('([15:/android/keystore/cts/KeyStoreTest.java]:[key]:[15]:method_text:[             assertTrue(isLoadStoreParameterSupported(keyStore));            }        }    }   ])', 1), ('([27:/android/keystore/cts/KeyStoreTest.java]:[key]:[27]:method_text:[   }        // test_KeyStore_store_OutputStream effectively tests load as well as store    }   ])', 1), ('([18:/android/keystore/cts/KeyStoreTest.java]:[key]:[18]:method_text:[);            } catch (UnsupportedOperationException expected) {            }        }    }   ])', 1), ('([101:/android/keystore/cts/KeyStoreTest.java]:[key]:[101]:method_text:[}    }    public static class FakeProtectionParameter implements ProtectionParameter {    }   ])', 1), ('([319:/android/keystore/cts/KeyStoreTest.java]:[key]:[319]:method_text:[toreException expected) {                    }                }            }        }    }   ])', 1), ('([90:/android/keystore/cts/KeyStoreTest.java]:[key]:[90]:method_text:[        }    }    // TODO(27810271): investigate why this is taking too long for armeabi-v7a   ])', 1), ('([58:/android/keystore/cts/KeyStoreTest.java]:[key]:[58]:method_text:[());            assertEquals(PARAM_STORE, builder.getProtectionParameter(""""));        }    }   ])', 1), ('([7:/android/keystore/cts/KeyStoreTest.java]:[key]:[7]:method_text:[as + "" cert="" + c, t);            }        }    }    // http://b/857840: want JKS key store   ])', 1), ('([11:/android/keystore/cts/KeyStoreTest.java]:[key]:[11]:method_text:[ore);        } catch (Exception ex) {            throw new RuntimeException(ex);        }    }}])', 1), ('([1:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[eTest extends PerformanceTestBase {    final int[] SUPPORTED_KEY_SIZES = {64, 128, 256, 512};   ])', 1), ('([1:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([5:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[key]:[5]:method_text:[eTest extends PerformanceTestBase {    final int[] SUPPORTED_KEY_SIZES = {64, 128, 256, 512};   ])', 1), ('([28:/android/keystore/cts/performance/HmacKeyGenPerformanceTest.java]:[key]:[28]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[ED_AES_KEY_SIZES = {128, 256};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[        testAesCipher(""AES/CBC/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[      testAesCipher(""AES/CBC/PKCS7Padding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[        testAesCipher(""AES/CTR/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[        testAesCipher(""AES/ECB/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[      testAesCipher(""AES/ECB/PKCS7Padding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[supported]:[1]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[modes]:[1]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([6:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[6]:method_text:[ED_AES_KEY_SIZES = {128, 256};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[1]:method_text:[        testAesCipher(""AES/CBC/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[1]:method_text:[      testAesCipher(""AES/CBC/PKCS7Padding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[1]:method_text:[        testAesCipher(""AES/CTR/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[1]:method_text:[        testAesCipher(""AES/ECB/NoPadding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[1]:method_text:[      testAesCipher(""AES/ECB/PKCS7Padding"", SUPPORTED_AES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([70:/android/keystore/cts/performance/AesCipherPerformanceTest.java]:[key]:[70]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[EY_SIZES = {2048, 3072, 4096};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[y();            testRsaSign(""NONEwithRSA"", new int[] {keySize}, messageSizes);        }    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[ception {        testRsaSign(""MD5withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[eption {        testRsaSign(""SHA1withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[tion {        testRsaSign(""SHA224withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[tion {        testRsaSign(""SHA256withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[tion {        testRsaSign(""SHA384withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[tion {        testRsaSign(""SHA512withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[on {        testRsaSign(""SHA1withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[ {        testRsaSign(""SHA224withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[ {        testRsaSign(""SHA256withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[ {        testRsaSign(""SHA384withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[mSignature.update(getMessage());            mSignature.verify(mMessageSignature);        }    }}])', 1), ('([6:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[6]:method_text:[EY_SIZES = {2048, 3072, 4096};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([4:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[4]:method_text:[y();            testRsaSign(""NONEwithRSA"", new int[] {keySize}, messageSizes);        }    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[ception {        testRsaSign(""MD5withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[eption {        testRsaSign(""SHA1withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[tion {        testRsaSign(""SHA224withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[tion {        testRsaSign(""SHA256withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[tion {        testRsaSign(""SHA384withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[tion {        testRsaSign(""SHA512withRSA"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[on {        testRsaSign(""SHA1withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[ {        testRsaSign(""SHA224withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[ {        testRsaSign(""SHA256withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[1]:method_text:[ {        testRsaSign(""SHA384withRSA/PSS"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([72:/android/keystore/cts/performance/RsaSignaturePerformanceTest.java]:[key]:[72]:method_text:[mSignature.update(getMessage());            mSignature.verify(mMessageSignature);        }    }}])', 1), ('([4:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[4]:method_text:[s;import org.junit.Test;public class RsaKeyGenPerformanceTest extends PerformanceTestBase {   ])', 1), ('([2:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[2]:method_text:[nWithAndroidProvider() throws Exception {        measureKeyGenWithAndroidProvider(2048);    }   ])', 1), ('([2:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[2]:method_text:[nWithAndroidProvider() throws Exception {        measureKeyGenWithAndroidProvider(3072);    }   ])', 1), ('([2:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[2]:method_text:[nWithAndroidProvider() throws Exception {        measureKeyGenWithAndroidProvider(4096);    }   ])', 1), ('([2:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[2]:method_text:[nWithDefaultProvider() throws Exception {        measureKeyGenWithDefaultProvider(2048);    }   ])', 1), ('([2:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[2]:method_text:[nWithDefaultProvider() throws Exception {        measureKeyGenWithDefaultProvider(3072);    }   ])', 1), ('([30:/android/keystore/cts/performance/RsaKeyGenPerformanceTest.java]:[key]:[30]:method_text:[ption {        measureKeyGen(new DefaultKeystoreKeyPairGenerator(""RSA"", keySize), keySize);    }}])', 1), ('([1:/android/keystore/cts/performance/DesKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[PerformanceTest extends PerformanceTestBase {    final int[] SUPPORTED_DES_KEY_SIZES = {168};   ])', 1), ('([1:/android/keystore/cts/performance/DesKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([6:/android/keystore/cts/performance/DesKeyGenPerformanceTest.java]:[key]:[6]:method_text:[PerformanceTest extends PerformanceTestBase {    final int[] SUPPORTED_DES_KEY_SIZES = {168};   ])', 1), ('([28:/android/keystore/cts/performance/DesKeyGenPerformanceTest.java]:[key]:[28]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([1:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[supported]:[1]:method_text:[ challenge),                        keySize, challenge.length));            }        }    }   ])', 1), ('([1:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[supported]:[1]:method_text:[ublic void measure() throws Exception {            mKeyGen.getCertificateChain();        }    }}])', 1), ('([1:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[length]:[1]:method_text:[ challenge),                        keySize, challenge.length));            }        }    }   ])', 1), ('([1:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[length]:[1]:method_text:[ublic void measure() throws Exception {            mKeyGen.getCertificateChain();        }    }}])', 1), ('([8:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[key]:[8]:method_text:[     ""challenge"".getBytes(), // short challenge        new byte[128], // long challenge    };   ])', 1), ('([8:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[key]:[8]:method_text:[ challenge),                        keySize, challenge.length));            }        }    }   ])', 1), ('([48:/android/keystore/cts/performance/AttestationPerformanceTest.java]:[key]:[48]:method_text:[ublic void measure() throws Exception {            mKeyGen.getCertificateChain();        }    }}])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[supported]:[1]:method_text:[TED_RSA_KEY_SIZES = {2048, 3072, 4096};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10};   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[supported]:[1]:method_text:[        testRsaCipher(""RSA/ECB/NoPadding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[supported]:[1]:method_text:[      testRsaCipher(""RSA/ECB/PKCS1Padding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[supported]:[1]:method_text:[     ""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([2:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[supported]:[2]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[modes]:[1]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([7:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[key]:[7]:method_text:[TED_RSA_KEY_SIZES = {2048, 3072, 4096};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10};   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[key]:[1]:method_text:[        testRsaCipher(""RSA/ECB/NoPadding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[key]:[1]:method_text:[      testRsaCipher(""RSA/ECB/PKCS1Padding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[key]:[1]:method_text:[     ""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"", SUPPORTED_RSA_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([67:/android/keystore/cts/performance/RsaCipherPerformanceTest.java]:[key]:[67]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[supported]:[1]:method_text:[PPORTED_DES_KEY_SIZES = {168};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[supported]:[1]:method_text:[      testDesCipher(""DESede/CBC/NoPadding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[supported]:[1]:method_text:[   testDesCipher(""DESede/CBC/PKCS7Padding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[supported]:[1]:method_text:[      testDesCipher(""DESede/ECB/NoPadding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[supported]:[1]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[modes]:[1]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([6:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[key]:[6]:method_text:[PPORTED_DES_KEY_SIZES = {168};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[key]:[1]:method_text:[      testDesCipher(""DESede/CBC/NoPadding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[key]:[1]:method_text:[   testDesCipher(""DESede/CBC/PKCS7Padding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[key]:[1]:method_text:[      testDesCipher(""DESede/ECB/NoPadding"", SUPPORTED_DES_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([70:/android/keystore/cts/performance/DesCipherPerformanceTest.java]:[key]:[70]:method_text:[ void measure() throws Exception {            mCipher.doFinal(mEncryptedMessage);        }    }}])', 1), ('([1:/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[_SIZES = {224, 256, 384, 521};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java]:[supported]:[1]:method_text:[mSignature.update(getMessage());            mSignature.verify(mMessageSignature);        }    }}])', 1), ('([6:/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java]:[key]:[6]:method_text:[_SIZES = {224, 256, 384, 521};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([77:/android/keystore/cts/performance/EcdsaSignaturePerformanceTest.java]:[key]:[77]:method_text:[mSignature.update(getMessage());            mSignature.verify(mMessageSignature);        }    }}])', 1), ('([1:/android/keystore/cts/performance/AesKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[rmanceTest extends PerformanceTestBase {    final int[] SUPPORTED_AES_KEY_SIZES = {128, 256};   ])', 1), ('([1:/android/keystore/cts/performance/AesKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([5:/android/keystore/cts/performance/AesKeyGenPerformanceTest.java]:[key]:[5]:method_text:[rmanceTest extends PerformanceTestBase {    final int[] SUPPORTED_AES_KEY_SIZES = {128, 256};   ])', 1), ('([28:/android/keystore/cts/performance/AesKeyGenPerformanceTest.java]:[key]:[28]:method_text:[               .setKeySize(keySize)                                    .build());        }    }}])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[Y_SIZES = {64, 128, 256, 512};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[throws Exception {        testHmac(""HmacSHA1"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA224"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA256"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA384"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[supported]:[1]:method_text:[ows Exception {            mMac.update(getMessage());            mMac.doFinal();        }    }}])', 1), ('([5:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[5]:method_text:[Y_SIZES = {64, 128, 256, 512};    final int[] TEST_MESSAGE_SIZES = {1 << 6, 1 << 10, 1 << 17};   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[1]:method_text:[throws Exception {        testHmac(""HmacSHA1"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA224"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA256"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([1:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[1]:method_text:[rows Exception {        testHmac(""HmacSHA384"", SUPPORTED_KEY_SIZES, TEST_MESSAGE_SIZES);    }   ])', 1), ('([49:/android/keystore/cts/performance/HmacMacPerformanceTest.java]:[key]:[49]:method_text:[ows Exception {            mMac.update(getMessage());            mMac.doFinal();        }    }}])', 1), ('([1:/android/keystore/cts/performance/EcKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[nceTest extends PerformanceTestBase {    final int[] SUPPORTED_CURVES = {224, 256, 384, 521};   ])', 1), ('([1:/android/keystore/cts/performance/EcKeyGenPerformanceTest.java]:[supported]:[1]:method_text:[            super(algorithm);            getKeyPairGenerator().initialize(curve);        }    }}])', 1), ('([4:/android/keystore/cts/performance/EcKeyGenPerformanceTest.java]:[key]:[4]:method_text:[nceTest extends PerformanceTestBase {"	""	""	"[('key', 491), ('supported', 139), ('length', 75), ('modes', 49), ('ciphers', 10), ('mandatory', 2), ('lengths', 1)]"	"[('[android.keystore.cts.KeyPairGeneratorTest testGenerateWithFarsiLocale CtsKeystoreTestCases]', 5), ('[android.keystore.cts.BlockCipherTestBase testVeryLargeBlock CtsKeystoreTestCases]', 5), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation_TooLargeChallenge CtsKeystoreTestCases]', 4), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresThatKeyNoLongerValid CtsKeystoreTestCases]', 4), ('[android.keystore.cts.KeyAttestationTest testEcAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_TooLargeChallenge CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyAttestationTest testHmacAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyAttestationTest testDeviceIdAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyProtectionTest testDefaults CtsKeystoreTestCases]', 3), ('[android.keystore.cts.KeyGenParameterSpecTest testDefaults CtsKeystoreTestCases]', 3), ('[android.keystore.cts.CipherTest testMaxSizedPlaintextSupported CtsKeystoreTestCases]', 3), ('[android.keystore.cts.CipherTest testLargerThanMaxSizedPlaintextRejected CtsKeystoreTestCases]', 3), ('[android.keystore.cts.CipherTest testEncryptsAndDecryptsUsingCipherStreams CtsKeystoreTestCases]', 3), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_AES CtsKeystoreTestCases]', 3), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_AES CtsKeystoreTestCases]', 3), ('[android.keystore.cts.BlockCipherTestBase testGetOutputSizeInDecryptionMode CtsKeystoreTestCases]', 3), ('[android.keystore.cts.BlockCipherTestBase testUpdateAndDoFinalNotSupportedInWrapAndUnwrapModes CtsKeystoreTestCases]', 3), ('[android.keystore.cts.BlockCipherTestBase testGeneratedPadding CtsKeystoreTestCases]', 3), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCKeySbox256 CtsKeystoreTestCases]', 3), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatKeyNoLongerValidForConsumption CtsKeystoreTestCases]', 3), ('[android.keystore.cts.ImportWrappedKeyTest testKeyStore_ImportWrappedKey_AES_StrongBox CtsKeystoreTestCases]', 3), ('[android.keystore.cts.AESECBCipherTestBase isStreamCipher CtsKeystoreTestCases]', 3), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_GCM_NoPadding CtsKeystoreTestCases]', 3), ('[android.keystore.cts.performance.AttestationPerformanceTest testRsaKeyAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.performance.AttestationPerformanceTest testEcKeyAttestation CtsKeystoreTestCases]', 3), ('[android.keystore.cts.performance.RsaCipherPerformanceTest testRSA_ECB_OAEPPadding CtsKeystoreTestCases]', 3), ('[android.keystore.cts.performance.DesCipherPerformanceTest testDESede_ECB_PKCS7Padding CtsKeystoreTestCases]', 3), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testUnknownPropertyString CtsMediaDrmTestCases]', 3), ('[android.mediadrm.cts.MediaDrmClearkeyTest MediaDrmClearkeyTest CtsMediaDrmTestCases]', 3), ('[android.mediadrm.cts.MediaDrmClearkeyTest testSecureStop CtsMediaDrmTestCases]', 3), ('[com.android.cts.authboundkey.AuthBoundKeyAppTest testGenerateAuthBoundKey None]', 2), ('[com.android.cts.monkey.PackageTest testMultiplePackages CtsMonkeyTestCases]', 2), ('[com.android.cts.monkey.VerbosityTest testVerbosity CtsMonkeyTestCases]', 2), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_DeviceLocked CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation_DeviceLocked CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyAttestationTest testAesAttestation CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_NoChallenge CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyAttestationTest testRsaAttestation_NoChallenge CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_SupportedSizes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_UnsupportedSizesRejected CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_SupportedNamedCurves CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_SupportedSizes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testInitWithUnknownBlockModeFails CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerateHonorsRequestedAuthorizations CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_LegacySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_LegacySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_Defaults CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_Defaults CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_AsCustomAsPossible CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_AsCustomAsPossibleStrongbox CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_AsCustomAsPossible CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_AsCustomAsPossibleStrongbox CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_UsableForTLSPeerAuth CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_UsableForTLSPeerAuth CtsKeystoreTestCases]', 2), ('[android.keystore.cts.MacTest testInitFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 2), ('[android.keystore.cts.MacTest testMacGeneratedForEmptyMessage CtsKeystoreTestCases]', 2), ('[android.keystore.cts.MacTest testSmallMsgKat CtsKeystoreTestCases]', 2), ('[android.keystore.cts.MacTest testInitIgnoresThatKeyNoLongerValidForConsumption CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testInitWithKeySizeThrowsUnsupportedOperationException CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testInitWithKeySizeAndSecureRandomThrowsUnsupportedOperationException CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testInitWithUnsupportedAlgParamsTypeThrowsInvalidAlgorithmParameterException CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testAesKeySupportedSizes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testDESKeySupportedSizes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testHmacKeySupportedSizes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testInitWithUnknownBlockModeFails CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testInitRandomizedEncryptionRequiredButViolatedFails CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGeneratorTest testGenerateHonorsRequestedAuthorizations CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyProtectionTest testSettersReflectedInGetters CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyProtectionTest testImmutabilityViaSetterParams CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyProtectionTest testImmutabilityViaGetterReturnValues CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGenParameterSpecTest testSettersReflectedInGetters CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGenParameterSpecTest testImmutabilityViaSetterParams CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyGenParameterSpecTest testImmutabilityViaGetterReturnValues CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenBlockModeNotAuthorized CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenBlockModeNotAuthorized CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresAuthorizedBlockModes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testEmptyPlaintextEncryptsAndDecrypts CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testEncryptsAndDecryptsInterrupted CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testEmptyPlaintextEncryptsAndDecryptsWhenUnlockedRequired CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByAndroidKeyStoreDecryptsByAndroidKeyStore CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByHighestPriorityProviderDecryptsByAndroidKeyStore CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testCiphertextGeneratedByAndroidKeyStoreDecryptsByHighestPriorityProvider CtsKeystoreTestCases]', 2), ('[android.keystore.cts.CipherTest testKat CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingEncryptionAndDecryptionSucceedsWithInputShorterThanModulus CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingEncryptionFailsWithPlaintextEqualToModulus CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingEncryptionFailsWithPlaintextOneLargerThanModulus CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingEncryptionFailsWithPlaintextOneByteLongerThanModulus CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingDecryptionFailsWithCiphertextOneByteLongerThanModulus CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSACipherTest testNoPaddingWithZeroMessage CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Store_LoadStoreParam_Unencrypted_Failure CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Store_OutputStream_Unencrypted_Failure CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_PrivateKeyEntry_RSA_PublicKeyWorksWithCrypto CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_PrivateKeyEntry_EC_PublicKeyWorksWithCrypto CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_TrustedCertificateEntry_EC_PublicKeyWorksWithCrypto CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_RSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_EC CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_LargeNumberOfKeysSupported_HMAC CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_HMAC CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_EC CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ImportSupportedSizes_RSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedWithSameGeneratedSecretKey CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest getTestAlias1 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateChain_SingleLength_Unencrypted_Success CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetEntry_RSA_NullParams_Unencrypted_Success CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Encrypting_RSA_NONE_NOPADDING CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testUpdateAADNotSupported CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testUpdateAADSupported CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testUpdateCopySafe CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testGetOutputSizeInEncryptionMode CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testUpdateDoesNotProduceOutputWhenInsufficientInput CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase isStrongbox CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testIvGeneratedAndUsedWhenEncryptingWithoutExplicitIv CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testGeneratedIvDoesNotSurviveReinitialization CtsKeystoreTestCases]', 2), ('[android.keystore.cts.BlockCipherTestBase testExplicitlySetIvDoesNotSurviveReinitialization CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AESGCMCipherTestBase isStreamCipher CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AESGCMCipherTestBase testCiphertextBitflipDetectedWhenDecrypting CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AESGCMCipherTestBase testAadBitflipDetectedWhenDecrypting CtsKeystoreTestCases]', 2), ('[android.keystore.cts.AttestKeyTest testEcAttestKey CtsKeystoreTestCases]', 2), ('[android.keystore.cts.DESedeCipherTestBase testUpdateAndDoFinalNotSupportedInWrapAndUnwrapModes CtsKeystoreTestCases]', 2), ('[android.keystore.cts.DESedeCipherTestBase isAuthenticatedCipher CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SecretKeyFactoryTest testGetKeySpecWithKeystoreKeyAndKeyInfoReflectsAllAuthorizations CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SecretKeyFactoryTest testTranslateKeyAcceptsAndroidKeystoreKeys CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyInfoTest testImmutabilityViaGetterReturnValues CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyInfoTest testLimitedUseKey CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SignatureTest testInitSignFailsWhenPaddingNotAuthorized CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatPaddingNotAuthorized CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SignatureTest testSmallMsgKat CtsKeystoreTestCases]', 2), ('[android.keystore.cts.SignatureTest testLongMsgKat CtsKeystoreTestCases]', 2), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSATruncatesInputToFieldSize CtsKeystoreTestCases]', 2), ('[android.keystore.cts.ECDSASignatureTest testNONEwithECDSASupportsMessagesShorterThanFieldSize CtsKeystoreTestCases]', 2), ('[android.keystore.cts.ImportWrappedKeyTest testKeyStore_ImportWrappedKey CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePrivateKeyRejectsTransparentKeySpecAndEncodedKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePublicKeyAcceptsTransparentKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGeneratePrivateRejectsPKCS8EncodedKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGeneratePublicRejectsX509EncodedKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGeneratePrivateRejectsTransparentKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGeneratePublicRejectsTransparentKeySpec CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePrivateKeyAndKeyInfoReflectsAllAuthorizations CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSASignatureTest testMaxMessageSizeWhenNoDigestUsed CtsKeystoreTestCases]', 2), ('[android.keystore.cts.RSASignatureTest testSmallKeyRejected CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyAgreementTest testDoPhase_multiparty_fails CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyChainTest testIsKeyAlgorithmSupported_RequiredAlgorithmsSupported CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyChainTest testIsBoundKeyAlgorithm_RequiredAlgorithmsSupported CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getKey CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getCertificateChain CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_setKeyEntry_Key CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_setKeyEntry_array CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_setCertificateEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_deleteEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_aliases CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_containsAlias CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_size CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_isKeyEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_isCertificateEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getCertificateAlias CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_store_OutputStream CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_store_LoadStoreParameter CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_load_InputStream CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_load_LoadStoreParameter CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_setEntry CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_entryInstanceOf CtsKeystoreTestCases]', 2), ('[android.keystore.cts.KeyStoreTest test_KeyStore_Builder CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacKeyGenPerformanceTest testHmacKeyGen CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_CBC_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_CBC_PKCS7Padding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_CTR_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_ECB_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesCipherPerformanceTest testAES_ECB_PKCS7Padding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testNONEwithRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testMD5withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA1withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA224withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA256withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA384withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA512withRSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA1withRSA_PSS CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA224withRSA_PSS CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA256withRSA_PSS CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA384withRSA_PSS CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaSignaturePerformanceTest testSHA512withRSA_PSS CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.DesKeyGenPerformanceTest testDesKeyGen CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaCipherPerformanceTest testRSA_ECB_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaCipherPerformanceTest testRSA_ECB_PKCS1Padding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.RsaCipherPerformanceTest testRSA_ECB_OAEPWithSHA_1AndMGF1Padding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.DesCipherPerformanceTest testDESede_CBC_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.DesCipherPerformanceTest testDESede_CBC_PKCS7Padding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.DesCipherPerformanceTest testDESede_ECB_NoPadding CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.EcdsaSignaturePerformanceTest testSHA512withECDSA CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.AesKeyGenPerformanceTest testAesKeyGen CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacMacPerformanceTest testHmacSHA1 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacMacPerformanceTest testHmacSHA224 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacMacPerformanceTest testHmacSHA256 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacMacPerformanceTest testHmacSHA384 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.HmacMacPerformanceTest testHmacSHA512 CtsKeystoreTestCases]', 2), ('[android.keystore.cts.performance.EcKeyGenPerformanceTest testEcKeyGen CtsKeystoreTestCases]', 2), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest isWatchDevice CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testIsCryptoSchemeSupported CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testGetPropertyString CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testOfflineKeyManagement CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testGetNumberOfSessions CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testHdcpLevels CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testSecurityLevels CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testIsCryptoSchemeSupportedWithSecurityLevel CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testMediaDrmStateExceptionErrorCode CtsMediaDrmTestCases]', 2), ('[android.mediadrm.cts.MediaDrmClearkeyTest testGetProperties CtsMediaDrmTestCases]', 2), ('[com.android.cts.keysets.KeySetPermissionsTest testHasPerm None]', 1), ('[com.android.cts.authboundkey.AuthBoundKeyAppTest testUseKey None]', 1), ('[com.android.cts.monkey.PackageTest testSinglePackage CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.MonkeyTest testIsMonkey CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.MonkeyTest testNotMonkey CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.SeedTest testSeed CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.SeedTest testSeed2 CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.CategoryTest testDefaultCategories CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.CategoryTest testSingleCategory CtsMonkeyTestCases]', 1), ('[com.android.cts.monkey.CategoryTest testMultipleCategories CtsMonkeyTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testVersionParser CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testAttestationKmVersionMatchesFeatureVersion CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testAttestationKmVersionMatchesFeatureVersionStrongBox CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAttestationTest testEcAttestation_KeyStoreExceptionWhenRequestingUniqueId CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitialize_LegacySpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitialize_ModernSpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitialize_KeySizeOnly CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitialize_KeySizeAndSecureRandomOnly CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testDefaultKeySize CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitWithUnknownEncryptionPaddingFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitWithUnknownSignaturePaddingFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitWithUnknownDigestFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testInitRandomizedEncryptionRequiredButViolatedFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_ReplacesOldEntryWithSameAlias CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_DoesNotReplaceOtherEntries CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_Different_Keys CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_Different_Keys CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_ModernSpec_KeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_ModernSpec_KeyExpiredForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_RSA_IndCpaEnforced CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorTest testGenerate_EC_IndCpaEnforced CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest isStrongbox CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testAndroidKeyStoreKeysHandledByAndroidKeyStoreProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testMacGeneratedByAndroidKeyStoreVerifiesByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testMacGeneratedByAndroidKeyStoreVerifiesByHighestPriorityProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testMacGeneratedByHighestPriorityProviderVerifiesByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testLargeMsgKat CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testInitFailsWhenNotAuthorizedToSign CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testInitFailsWhenKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.MacTest testInitFailsWhenKeyNoLongerValidForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testGenerateWithoutInitThrowsIllegalStateException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithNullAlgParamsThrowsInvalidAlgorithmParameterException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithNullAlgParamsAndSecureRandomThrowsInvalidAlgorithmParameterException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithAlgParamsAndNullSecureRandom CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testDefaultKeySize CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testHmacKeyOnlyOneDigestCanBeAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithUnknownEncryptionPaddingFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithSignaturePaddingFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithUnknownDigestFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testInitWithKeyAlgorithmDigestMissingFromAuthorizedDigestFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGeneratorTest testLimitedUseKey CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyProtectionTest testSetKeyValidityEndDateAppliesToBothEndDates CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyProtectionTest testSetUserAuthenticationValidityDurationSecondsValidityCheck CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyProtectionTest testIllegalMaxUsageCountNotPermitted CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testNullAliasNotPermitted CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testEmptyAliasNotPermitted CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testSetKeyValidityEndDateAppliesToBothEndDates CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testSetUserAuthenticationValidityDurationSecondsValidityCheck CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testBuilderSetUidGenerateKeyThrowsException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyGenParameterSpecTest testIllegalMaxUsageCountNotPermitted CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest isDeviceLocked CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testAndroidKeyStoreKeysHandledByAndroidKeyStoreProviderWhenDecrypting CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testAndroidKeyStorePublicKeysAcceptedByHighestPriorityProviderWhenEncrypting CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testKeyguardLockAndUnlock CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCanCreateAuthBoundKeyWhenScreenLocked CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testCannotCreateAuthBoundKeyWhenDevicePinNotSet CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenNotAuthorizedToDecrypt CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenNotAuthorizedToEncrypt CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresAuthorizedPurposes CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresAuthorizedDigests CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenPaddingSchemeNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenPaddingSchemeNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresAuthorizedPaddingSchemes CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptAsymmetricIgnoresThatKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptFailsWhenKeyNoLongerValidForConsumption CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitDecryptIgnoresThatKeyNoLongerValidForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricFailsWhenKeyNoLongerValidForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.CipherTest testInitEncryptSymmetricIgnoresThatKeyNoLongerValidForConsumption CtsKeystoreTestCases]', 1), ('[android.keystore.cts.RSACipherTest testNoPaddingEncryptionSucceedsWithPlaintextOneSmallerThanModulus CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Aliases_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Aliases_NotInitialized_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ContainsAliases_PrivateAndCA_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ContainsAliases_CAOnly_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_ContainsAliases_NonExistent_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_DeleteEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_DeleteEntry_EmptyStore_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_DeleteEntry_NonExistent_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificate_Single_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificate_NonExist_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateAlias_CAEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateAlias_PrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateAlias_CAEntry_WithPrivateKeyUsingCA_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateAlias_NonExist_Empty_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateAlias_NonExist_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCertificateChain_NonExist_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCreationDate_PrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetCreationDate_CAEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetEntry_NullParams_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetEntry_EC_NullParams_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetEntry_Nonexistent_NullParams_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetKey_NoPassword_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetKey_Certificate_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetKey_NonExistent_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetProvider_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_GetType_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsCertificateEntry_CA_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsCertificateEntry_PrivateKey_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsCertificateEntry_NonExist_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsKeyEntry_PrivateKey_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsKeyEntry_CA_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_IsKeyEntry_NonExist_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetCertificate_CA_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetCertificate_CAExists_Overwrite_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetCertificate_PrivateKeyExists_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_PrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_PrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_CAEntry_Overwrites_PrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_CAEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_ShortPrivateKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetEntry_CAEntry_Overwrites_CAEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ProtectedKey_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_Replaced_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedChain_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedChain_DifferentPrivateKey_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_SetKeyEntry_ReplacedWithSame_UnencryptedToUnencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Size_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Load_InputStreamSupplied_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_Load_PasswordSupplied_Unencrypted_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_KeyOperations_Wrap_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_TrustedCertificateEntry_RSA_PublicKeyWorksWithCrypto CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AndroidKeyStoreTest testKeyStore_OnlyOneDigestCanBeAuthorized_HMAC CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testDoFinalResets CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testKatOneShotDecryptUsingDoFinal CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testKatEncryptOneByteAtATime CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testKatDecryptOneByteAtATime CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testDecryptWithMangledPadding CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testDoFinalCopySafe CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testInitRequiresIvInDecryptMode CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testGeneratedIvSurvivesReset CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testReinitializingInDecryptModeDoesNotUsePreviouslyUsedIv CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BlockCipherTestBase testKeyDoesNotSurviveReinitialization CtsKeystoreTestCases]', 1), ('[android.keystore.cts.NoAttestKeyTest ArrayList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.NoAttestKeyTest testEcAttestKeyFail CtsKeystoreTestCases]', 1), ('[android.keystore.cts.BackendBusyExceptionTest getBackOffHintMillis CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESGCMCipherTestBase testKatDecryptWithAadProvidedInChunks CtsKeystoreTestCases]', 1), ('[android.keystore.cts.PutOverflowTest testCrash CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AttestKeyTest ArrayList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AttestKeyTest testAttestationWithNonAttestKey CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AttestKeyTest testAttestKeyWithoutChallenge CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AttestKeyTest testAttestKeySecurityLevelMismatch CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBVarKey128 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBVarKey192 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBVarKey256 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBKeySbox128 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBKeySbox192 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testECBKeySbox256 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCVarKey128 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCVarKey192 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCVarKey256 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCKeySbox128 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.AESCipherNistCavpKatTest testCBCKeySbox192 CtsKeystoreTestCases]', 1), ('[android.keystore.cts.DESedeCipherTestBase testUpdateAADNotSupported CtsKeystoreTestCases]', 1), ('[android.keystore.cts.DESedeCipherTestBase testKeyDoesNotSurviveReinitialization CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testTranslateKeyWithNullKeyThrowsInvalidKeyException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testTranslateKeyRejectsNonAndroidKeystoreKeys CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testGenerateSecretWithNullSpecThrowsInvalidKeySpecException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testGenerateSecretRejectsSecretKeySpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SecretKeyFactoryTest testGenerateSecretRejectsKeyInfo CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testAndroidKeyStoreKeysHandledByAndroidKeyStoreProviderWhenSigning CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testAndroidKeyStorePublicKeysAcceptedByHighestPriorityProviderWhenVerifying CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testValidSignatureGeneratedForEmptyMessage CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testValidSignatureGeneratedForEmptyMessageByLimitedUseKey CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testEmptySignatureDoesNotVerify CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testSignatureGeneratedByAndroidKeyStoreVerifiesByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testSignatureGeneratedByAndroidKeyStoreVerifiesByHighestPriorityProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testSignatureGeneratedByHighestPriorityProviderVerifiesByAndroidKeyStore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitVerifySucceedsDespiteMissingAuthorizations CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitSignFailsWhenNotAuthorizedToSign CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatNotAuthorizedToVerify CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitSignFailsWhenDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatDigestNotAuthorized CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitSignFailsWhenKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatKeyNotYetValid CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitSignFailsWhenKeyNoLongerValidForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitVerifyIgnoresThatKeyNoLongerValidForOrigination CtsKeystoreTestCases]', 1), ('[android.keystore.cts.SignatureTest testInitSignIgnoresThatKeyNoLongerValidForConsumption CtsKeystoreTestCases]', 1), ('[android.keystore.cts.ImportWrappedKeyTest testKeyStore_ImportWrappedKeyWrappingKeyMissing CtsKeystoreTestCases]', 1), ('[android.keystore.cts.ImportWrappedKeyTest testKeyStore_ImportWrappedKey_3DES CtsKeystoreTestCases]', 1), ('[android.keystore.cts.ImportWrappedKeyTest testKeyStore_ImportWrappedKey_3DES_StrongBox CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testAlgorithmList CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePublicKeyRejectsKeyInfo CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGetKeySpecWithKeystorePublicKeyAcceptsX509EncodedKeySpec CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testTranslateKeyWithNullKeyThrowsInvalidKeyException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testTranslateKeyRejectsNonAndroidKeystoreKeys CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testTranslateKeyAcceptsAndroidKeystoreKeys CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGeneratePrivateWithNullSpecThrowsInvalidKeySpecException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGeneratePublicWithNullSpecThrowsInvalidKeySpecException CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyFactoryTest testGeneratePrivateAndPublicRejectKeyInfo CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testGenerateSecret_succeeds CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testGenerateSecret_forTwoParties_returnsSameSharedSecret CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testGenerateSecret_preservesPrivateKeyAndNothingElse CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testInit_withNonPrivateKey_fails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testInit_withNonEcKey_fails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testDoPhase_withoutInitialization_fails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyAgreementTest testGenerateSecret_withoutSecondPartyKey_fails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyChainTest testNullPrivateKeyArgumentsFail CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyChainTest testNullPrivateKeyAliasArgumentFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyChainTest testNullPrivateKeyContextArgumentFails CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest currentTimeMillis CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_Unencrypted_Success CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_NullContext_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_MissingAlias_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_MissingSubjectDN_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_MissingSerialNumber_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_MissingStartDate_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_MissingEndDate_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyPairGeneratorSpecTest testBuilder_EndBeforeStart_Failure CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_create CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getInstance CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getDefaultType CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getType CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getCertificate CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_getCreationDate CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest test_KeyStore_cacerts CtsKeystoreTestCases]', 1), ('[android.keystore.cts.KeyStoreTest testDefaultKeystore CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa2048KeyGenWithAndroidProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa3072KeyGenWithAndroidProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa4096KeyGenWithAndroidProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa2048KeyGenWithDefaultProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa3072KeyGenWithDefaultProvider CtsKeystoreTestCases]', 1), ('[android.keystore.cts.performance.RsaKeyGenPerformanceTest testRsa4096KeyGenWithDefaultProvider CtsKeystoreTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testIsCryptoSchemeNotSupported CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testPssh CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testQueryKeyStatus CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testFindSessionId CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testPropertyByteArray CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testClearKeyPlaybackCenc CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.NativeMediaDrmClearkeyTest testClearKeyPlaybackCenc2 CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testReleaseOfflineLicense CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testQueryKeyStatus CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearKeyPlaybackCenc2 CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearKeyPlaybackOfflineCenc CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearKeyPlaybackWebm CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearKeyPlaybackMpeg2ts CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testPlaybackMpeg2ts CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testSetProperties CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testResourceContentionError CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testOnExpirationUpdateListener CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearOnExpirationUpdateListener CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearOnEventListener CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testSessionLostStateError CtsMediaDrmTestCases]', 1), ('[android.mediadrm.cts.MediaDrmClearkeyTest testClearOnSessionLostStateListener CtsMediaDrmTestCases]', 1)]"	""	""	""	""	""	""	""	""	""
