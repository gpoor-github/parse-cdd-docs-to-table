"Section"	"section_id"	"req_id"	"Test Availability"	"class_def"	"method"	"module"	"method_text"	"full_key"	"requirement"	"key_as_number"	"search_terms"	"manual_search_terms"	"not_search_terms"	"not_files"	"matched_terms"	"search_roots"	"qualified_method"	"max_matches"	"file_name"	"matched_files"	"methods_string"	"urls"	"protected"	"Area"	"Shortened"	"Test Level"
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-6-1"	""	"[('android.app.cts.NotificationManagerTest', 10), ('android.media.cts.AudioManagerTest', 9), ('android.telecom.cts.CarModeInCallServiceTest', 6), ('android.app.notification.legacy.cts.ConditionProviderServiceTest', 5), ('com.android.cts.verifier.audio.RingerModeActivity', 3), ('android.app.cts.NotificationChannelTest', 2), ('com.android.cts.delegate.CertInstallDelegateTest', 1), ('com.android.cts.deviceandprofileowner.DelegatedCertInstallerTest', 1), ('android.app.notification.legacy29.cts.NotificationManager29Test', 1), ('android.app.notification.legacy20.cts.LegacyNotificationManager20Test', 1), ('android.hardware.camera2.cts.CameraManagerTest', 1), ('android.app.cts.UiModeManagerTest', 1), ('android.systemintents.cts.TestSystemIntents', 1), ('com.android.cts.certinstaller.DirectDelegatedCertInstallerTest', 1), ('android.accessibilityservice.cts.AccessibilityEndToEndTest', 1), ('com.android.cts.deviceowner.AdminActionBookkeepingTest', 1), ('com.android.cts.deviceandprofileowner.SecurityLoggingTest', 1), ('android.ndef.cts.NdefTest', 1), ('android.app.notification.legacy.cts.LegacyNotificationManagerTest', 1), ('com.android.cts.profileowner.AdminActionBookkeepingTest', 1), ('android.server.wm.CrossAppDragAndDropTests', 1)]"	"[('setUp', 16), ('getInstrumentation', 14), ('tearDown', 13), ('of', 8), ('getContext', 7), ('getPackageName', 7), ('getId', 7), ('build', 6), ('getPackageManager', 5), ('toString', 5), ('getActiveNotifications', 5), ('getBytes', 4), ('getWho', 4), ('getContentResolver', 4), ('getMessage', 4), ('getRingerMode', 2), ('getResources', 2), ('getSystem', 2), ('cancelAll', 2), ('printStackTrace', 2), ('getKey', 2), ('getGroupKey', 2), ('getUiAutomation', 2), ('reset', 2), ('BroadcastReceiver', 1), ('getAction', 1), ('release', 1), ('IntentFilter', 1), ('getUserId', 1), ('create', 1), ('getService', 1), ('areChannelsBypassingDnd', 1), ('hasVibrator', 1), ('getNotificationPolicy', 1), ('getCurrentInterruptionFilter', 1), ('getSimpleName', 1), ('randomUUID', 1), ('getNotificationChannels', 1), ('getNotificationChannelGroups', 1), ('getCount', 1), ('moveToFirst', 1), ('close', 1), ('getPendingIntent', 1), ('getClass', 1), ('getGroup', 1), ('getNotification', 1), ('getOverrideGroupKey', 1), ('getCurrentModeType', 1), ('supportsSplitScreenMultiWindow', 1), ('supportsFreeform', 1)]"	"[('CtsAndroidAppTestCases', 13), ('CtsMediaTestCases', 9), ('CtsLegacyNotification27TestCases', 6), ('CtsTelecomTestCases', 6), ('CtsLegacyNotification29TestCases', 1), ('CtsLegacyNotification20TestCases', 1), ('CtsCameraTestCases', 1), ('CtsSystemIntentTestCases', 1), ('CtsAccessibilityServiceTestCases', 1), ('CtsNdefTestCases', 1), ('CtsWindowManagerDeviceTestCases', 1)]"	""	"3.2.3.5/C-6-1"	"""C-6-1] MUST implement an activity that would respond to the intent ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS, which for implementations with UI_MODE_TYPE_NORMAL it MUST be an activity where the user can grant or deny the app access to DND policy configurations. If device implementations allow users to use third-party input methods on the device, they: """	"03020305.670601"	"MODE_TYPE_NORMAL ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS DND"	""	""	""	"[('DND', 42), ('MODE_TYPE_NORMAL', 7), ('ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS', 1)]"	""	"[('[android.app.notification.legacy29.cts.NotificationManager29Test isNotificationPolicyAccessGranted CtsLegacyNotification29TestCases]', 1), ('[android.app.notification.legacy20.cts.LegacyNotificationManager20Test testNotificationListener_cancelNotifications CtsLegacyNotification20TestCases]', 1), ('[android.hardware.camera2.cts.CameraManagerTest testCameraManagerWithDnD CtsCameraTestCases]', 1), ('[android.app.cts.NotificationChannelTest testConstructor CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationChannelTest testWriteToParcel CtsAndroidAppTestCases]', 1), ('[android.app.cts.UiModeManagerTest testEnterCarModePrioritized CtsAndroidAppTestCases]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStreamDndOn None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStream None]', 1), ('[android.media.cts.AudioManagerTest isMicrophoneMute CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndAffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testMuteDndUnaffectedStreams CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testSetStreamVolumeInPriorityOnlyMode CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testAdjustVolumeInPriorityOnly CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMuteAll CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyMediaAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyAlarmsAllowed CtsMediaTestCases]', 1), ('[android.media.cts.AudioManagerTest testPriorityOnlyChannelsCanBypassDnd CtsMediaTestCases]', 1), ('[android.accessibilityservice.cts.AccessibilityEndToEndTest testTypeNotificationStateChangedAccessibilityEvent CtsAccessibilityServiceTestCases]', 1), ('[android.app.cts.NotificationManagerTest isGroup CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicy CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testConsolidatedNotificationPolicyMultiRules CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testCreateChannel CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testTotalSilenceOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testAlarmsOnlyMuteStreams CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_turnOff CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_deletedRule CtsAndroidAppTestCases]', 1), ('[android.app.cts.NotificationManagerTest testSetAutomaticZenRuleState_multipleRules CtsAndroidAppTestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_addsNewRule CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherConditionChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testUnboundCPSMaintainsCondition_otherProviderRuleChanges CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testRequestRebindWhenLostAccess CtsLegacyNotification27TestCases]', 1), ('[android.app.notification.legacy.cts.ConditionProviderServiceTest testMethodsExistAndDoNotThrow CtsLegacyNotification27TestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest dropShellPermissionIdentity CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSetCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testStartCallInCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarMode CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarModeAndBack CtsTelecomTestCases]', 1), ('[android.telecom.cts.CarModeInCallServiceTest testSwitchToCarModeMultiple CtsTelecomTestCases]', 1), ('[android.ndef.cts.NdefTest testInvalidParsing CtsNdefTestCases]', 1), ('[android.app.notification.legacy.cts.LegacyNotificationManagerTest testSetNotificationPolicy_preP_setOldNewFields CtsLegacyNotification27TestCases]', 1), ('[android.server.wm.CrossAppDragAndDropTests uptimeMillis CtsWindowManagerDeviceTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationManagerTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AudioManagerTest.java', 9), ('/home/gpoor/cts-source/cts/tests/tests/telecom/src/android/telecom/cts/CarModeInCallServiceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 5), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 3), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DelegateApp/src/com/android/cts/delegate/CertInstallDelegateTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy29/src/android/app/notification/legacy29/cts/NotificationManager29Test.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy20/src/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 1), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CertInstaller/src/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/ndef/src/android/ndef/cts/NdefTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/notificationlegacy/notificationlegacy27/src/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/CrossAppDragAndDropTests.java', 1)]"	"[('/android/app/cts/NotificationManagerTest.java', 11), ('/android/media/cts/AudioManagerTest.java', 10), ('/android/telecom/cts/CarModeInCallServiceTest.java', 7), ('/android/app/notification/legacy/cts/ConditionProviderServiceTest.java', 6), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 4), ('/android/app/cts/NotificationChannelTest.java', 3), ('/com/android/cts/delegate/CertInstallDelegateTest.java', 2), ('/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java', 2), ('/android/app/notification/legacy29/cts/NotificationManager29Test.java', 2), ('/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java', 2), ('/android/hardware/camera2/cts/CameraManagerTest.java', 2), ('/android/app/cts/UiModeManagerTest.java', 2), ('/android/systemintents/cts/TestSystemIntents.java', 2), ('/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityEndToEndTest.java', 2), ('/com/android/cts/deviceowner/AdminActionBookkeepingTest.java', 2), ('/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java', 2), ('/android/ndef/cts/NdefTest.java', 2), ('/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java', 2), ('/com/android/cts/profileowner/AdminActionBookkeepingTest.java', 2), ('/android/server/wm/CrossAppDragAndDropTests.java', 2)]"	"[('([1:/android/app/cts/NotificationManagerTest.java]:[DND]:[1]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 3), ('([2:/android/media/cts/AudioManagerTest.java]:[DND]:[2]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([3:/android/media/cts/AudioManagerTest.java]:[DND]:[3]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 2), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 2), ('([1:/com/android/cts/delegate/CertInstallDelegateTest.java]:[DND]:[1]:method_text:[ation().getContext();         mDpm = context.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/deviceandprofileowner/DelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[  mDpm.setCertInstallerPackage(ADMIN_RECEIVER_COMPONENT, null);         super.tearDown();     }     ])', 1), ('([2:/android/app/notification/legacy29/cts/NotificationManager29Test.java]:[DND]:[2]:method_text:[ent.getActivity(                 mContext, 0, new Intent(mContext, this.getClass()), 0);     }      ])', 1), ('([2:/android/app/notification/legacy20/cts/LegacyNotificationManager20Test.java]:[DND]:[2]:method_text:[InterruptedException ex) {                 // pass             }         }         return n;     } }])', 1), ('([6:/android/hardware/camera2/cts/CameraManagerTest.java]:[DND]:[6]:method_text:[        throw new IOException(""Could not read stdout of command:\xa0"" + command, e);         }     }  }])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[DND]:[1]:method_text:[icationChannel.CREATOR.createFromParcel(parcel);         assertEquals(channel, channel1);     }     ])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ar mode API when the caller does not hold the correct      * permission to use that API.      */    ])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[4]:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a])', 1), ('([2:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[2]:method_text:[TestVibrateRinger());         tests.add(new TestSetRingerModePolicyAccess());         // TODO: Add a])', 1), ('([16:/com/android/cts/verifier/audio/RingerModeActivity.java]:[DND]:[16]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ])', 1), ('([8:/android/media/cts/AudioManagerTest.java]:[DND]:[8]:method_text:[      @AppModeFull(reason = ""Instant apps cannot hold android.permission.MODIFY_AUDIO_SETTINGS"")    ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[ckageName(), getInstrumentation(), true);             testStreamMuting(stream);         }     }     ])', 1), ('([1:/android/media/cts/AudioManagerTest.java]:[DND]:[1]:method_text:[etStreamMute failed."",                     mAudioManager.isStreamMute(stream));         }     }     ])', 1), ('([4:/android/media/cts/AudioManagerTest.java]:[DND]:[4]:method_text:[            setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL);         }     }     ])', 1), ('([7:/android/media/cts/AudioManagerTest.java]:[DND]:[7]:method_text:[ss(mContext.getPackageName(), getInstrumentation(),                     false);         }     }     ])', 1), ('([1:/com/android/cts/certinstaller/DirectDelegatedCertInstallerTest.java]:[DND]:[1]:method_text:[ption {         mDpm.uninstallCaCert(null, TEST_CA.getBytes());         super.tearDown();     }     ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityEndToEndTest.java]:[DND]:[1]:method_text:[notificationManager.deleteNotificationChannel(channel.getId());         }     }      @MediumTest    ])', 1), ('([1:/com/android/cts/deviceowner/AdminActionBookkeepingTest.java]:[DND]:[1]:method_text:[    /**      * Test: Retrieving security logs should update the corresponding timestamp.      */    ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[anupSendBubbleActivity() {         mContext.unregisterReceiver(mBubbleBroadcastReceiver);     }     ])', 1), ('([5:/android/app/cts/NotificationManagerTest.java]:[DND]:[5]:method_text:[nalFilter);             mNotificationManager.setNotificationPolicy(origPolicy);         }     }     ])', 1), ('([3:/android/app/cts/NotificationManagerTest.java]:[DND]:[3]:method_text:[) != Notification.VISIBILITY_SECRET);         assertFalse(createdChannel.canBypassDnd());     }     ])', 1), ('([4:/android/app/cts/NotificationManagerTest.java]:[DND]:[4]:method_text:[te(id, condition);          assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), ('([8:/android/app/cts/NotificationManagerTest.java]:[DND]:[8]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([6:/android/app/cts/NotificationManagerTest.java]:[DND]:[6]:method_text:[         // make sure DND is off         assertExpectedDndState(INTERRUPTION_FILTER_ALL);     }     ])', 1), ('([7:/android/app/cts/NotificationManagerTest.java]:[DND]:[7]:method_text:[cZenRule(secondId);         assertExpectedDndState(ruleToCreate.getInterruptionFilter());     }     ])', 1), (""([1:/com/android/cts/deviceandprofileowner/SecurityLoggingTest.java]:[DND]:[1]:method_text:[ there's one user on the device or all      * secondary users / profiles are affiliated.      */    ])"", 1), ('([3:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[3]:method_text:[ote         assertEquals(INTERRUPTION_FILTER_ALARMS, mNm.getCurrentInterruptionFilter());     }     ])', 1), ('([1:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[1]:method_text:[nd after permission lost"");         } catch (Exception e) {             // pass         }     }     ])', 1), ('([2:/android/app/notification/legacy/cts/ConditionProviderServiceTest.java]:[DND]:[2]:method_text:[ } else {             Log.d(TAG, service.getName() + "" has a correct bind state"");         }     } }])', 1), ('([2:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[2]:method_text:[  * Verifies that a car mode InCallService can enter and exit car mode using a priority.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[mode InCallService when a call is started when the device is      * already in car mode.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ies that the lower priority app is bound      * and receives information about the call.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[milar to {@link #testSwitchToCarMode}, except exits car mode before the call terminates.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ters car mode after the call starts.  Also      * uses multiple car mode InCallServices.      */    ])', 1), ('([1:/android/telecom/cts/CarModeInCallServiceTest.java]:[MODE_TYPE_NORMAL]:[1]:method_text:[ -- bind error"");         }         return queue.poll(ASYNC_TIMEOUT, TimeUnit.MILLISECONDS);     } }])', 1), ('([2:/android/ndef/cts/NdefTest.java]:[DND]:[2]:method_text:[on for input "" + bytesToString(b));             } catch (FormatException e) { }         }     }     ])', 1), ('([2:/android/app/notification/legacy/cts/LegacyNotificationManagerTest.java]:[DND]:[2]:method_text:[ {       return mContext.getPackageManager().hasSystemFeature(PackageManagfest.java]:[DND]:[1]:method_text:[ * Test: It should be recored whether the Profile Owner or the user set the current IME.      */    ])', 1), ('([3:/android/server/wm/CrossAppDragAndDropTests.java]:[DND]:[3]:method_text:[result mismatch,"", expectedResult,                     results.get(resultKey));         }     }     ])', 1)]""[('android.autofillservice.cts.SettingsIntentTest', 2), ('android.content.cts.AvailableIntentsTest', 2)]"	""	"[('CtsAutoFillServiceTestCases', 2), ('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-14-1"	"""C-14-1] MUST fully implement the AutofillService and AutofillManager APIs and honor the android.settings.REQUEST_SET_AUTOFILL_SERVICE intent to show a default app settings menu to enable and disable autofill and change the default autofill service for the user. If device implementations include a pre-installed app or wish to allow third-party apps to access the usage statistics, they: """	"03020305.671401"	"REQUEST_SET_AUTOFILL_SERVICE android.settings.REQUEST"	""	""	""	"[('REQUEST_SET_AUTOFILL_SERVICE', 4)]"	""	"[('[android.autofillservice.cts.SettingsIntentTest testWarningShown_userRejectsByTappingBack CtsAutoFillServiceTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testRequestSetAutofillServiceIntent CtsContentTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/SettingsIntentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('/android/autofillservice/cts/SettingsIntentTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 4)]"	"[('([1:/android/autofillservice/cts/SettingsIntentTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[FLAG_ACTIVITY_NEW_TASK)                 .setData(Uri.parse(""package:"" + Helper.MY_PACKAGE));     } }])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[REQUEST_SET_AUTOFILL_SERVICE]:[1]:method_text:[  .setData(Uri.parse(""package:android.content.cts""));         assertCanBeHandled(intent);     }     ])', 2)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-11-1"	""	"[('android.angle.cts.CtsAngleDeveloperOptionHostTest', 11), ('android.provider.cts.settings.SettingsTest', 10), ('android.content.pm.cts.LauncherAppsTest', 9), ('android.view.accessibility.cts.AccessibilityShortcutTest', 8), ('android.hardware.camera2.cts.CameraDeviceTest', 6), ('android.view.inputmethod.cts.InputMethodInfoTest', 5), ('android.webkit.cts.ServiceWorkerWebSettingsTest', 5), ('android.view.accessibility.cts.AccessibilityManagerTest', 5), ('android.hardware.camera2.cts.CaptureRequestTest', 5), ('com.android.cts.devicepolicy.MixedManagedProfileOwnerTest', 5), ('android.media.tv.tuner.cts.TunerDvrTest', 4), ('android.net.wifi.nl80211.cts.PnoSettingsTest', 4), ('android.admin.cts.DevicePolicyManagerTest', 4), ('android.bluetooth.cts.ScanSettingsTest', 4), ('android.location.cts.fine.ScanningSettingsTest', 4), ('com.android.cts.devicepolicy.ManagedProfileRingtoneTest', 4), ('android.bluetooth.cts.ScanCallbackTest', 4), ('android.hardware.camera2.cts.BurstCaptureTest', 4), ('android.hardware.cts.helpers.sensoroperations.SensorOperationTest', 4), ('android.app.cts.BooleanTileServiceTest', 3), ('android.view.inputmethod.cts.InputMethodStartInputLifecycleTest', 3), ('android.vr.cts.VrSetFIFOThreadTest', 3), ('com.android.cts.storageapp.StorageTest', 3), ('android.contentcaptureservice.cts.ChildlessActivityTest', 3), ('android.text.cts.StaticLayoutLineBreakingTest', 3), ('android.voicesettings.cts.AirplaneModeTest', 3), ('com.android.cts.packageinstaller.ManualPackageInstallTest', 3), ('android.permission.cts.ProviderPermissionTest', 3), ('android.autofillservice.cts.VirtualContainerActivityCompatModeTest', 3), ('android.widget.cts.ToastTest', 3), ('android.telephony.cts.TelephonyManagerTest', 3), ('android.inputmethodservice.cts.hostside.InputMethodServiceLifecycleTest', 3), ('android.systemintents.cts.TestSystemIntents', 3), ('android.tv.settings.cts.SettingsLeanbackTest', 3), ('android.media.cts.AsyncPlayerTest', 3), ('android.net.wifi.cts.WifiMigrationTest', 3), ('com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest', 3), ('android.autofillservice.cts.FieldsClassificationTest', 2), ('android.provider.cts.contacts.Contacts_SettingsTest', 2), ('com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest', 2), ('android.accessibilityservice.cts.AccessibilitySoftKeyboardTest', 2), ('android.hardware.camera2.cts.StaticMetadataTest', 2), ('android.net.wifi.cts.WifiBackupRestoreTest', 2), ('android.server.wm.WindowInsetsAnimationSynchronicityTests', 2), ('android.provider.cts.settings.Settings_SystemTest', 2), ('com.android.cts.net.hostside.VpnTest', 2), ('com.android.cts.deviceandprofileowner.UserRestrictionsParentTest', 2), ('android.security.cts.IntentSenderRemovalTest', 2), ('com.android.cts.deviceandprofileowner.AutofillRestrictionsTest', 2), ('android.app.cts.NotificationChannelTest', 2), ('android.app.cts.UiModeManagerTest', 2), ('android.carrierapi.cts.NetworkScanApiTest', 2), ('android.media.tv.cts.HardwareSessionTest', 2), ('android.app.cts.ActivityManagerAppExitInfoTest', 2), ('android.server.wm.PinnedStackTests', 2), ('com.android.cts.verifier.audio.RingerModeActivity', 2), ('android.media.cts.MediaProjectionTest', 2), ('android.SustainedPerformance.cts.SustainedPerformanceHostTest', 2), ('android.host.systemui.ActiveTileServiceTest', 2), ('android.bluetooth.cts.AdvertiseCallbackTest', 2), ('android.hardware.cts.SensorIntegrationTests', 2), ('com.android.cts.deviceandprofileowner.PolicyTransparencyTest', 1), ('android.nfc.cts.NfcPreferredPaymentTest', 1), ('android.keystore.cts.CipherTest', 1), ('android.media.cts.EncoderTest', 1), ('android.server.wm.DreamManagerServiceTests', 1), ('com.android.cts.appbinding.AppBindingHostTest', 1), ('com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerTest', 1), ('android.server.wm.WindowInsetsAnimationControllerTests', 1), ('android.appsecurity.cts.PackageVisibilityTest', 1), ('com.android.cts.devicepolicy.ManagedProfileContactsTest', 1), ('android.webkit.cts.ServiceWorkerClientTest', 1), ('android.content.res.cts.ResourcesTest', 1), ('android.server.wm.VrDisplayTests', 1), ('android.jobscheduler.cts.BatteryConstraintTest', 1), ('android.accessibilityservice.cts.AccessibilityMagnificationTest', 1), ('com.android.cts.devicepolicy.MixedDeviceOwnerTest', 1), ('android.server.wm.intent.IntentGenerationTests', 1), ('android.server.wm.KeyguardTests', 1), ('android.view.inputmethod.cts.InputConnectionBlockingMethodTest', 1), ('android.net.wifi.cts.ConcurrencyTest', 1), ('android.graphics.cts.TypefaceCustomFallbackBuilderTest', 1), ('com.android.cts.devicepolicy.ManagedProfileTest', 1), ('android.media.cts.DecoderTestXheAac', 1), ('com.android.server.cts.IncidentdTest', 1), ('com.android.cts.deviceandprofileowner.AudioRestrictionTest', 1), ('android.print.cts.CustomPrintOptionsTest', 1), ('com.android.server.cts.AlarmManagerIncidentTest', 1), ('com.android.cts.verifier.sensors.MotionIndicatorView', 1), ('android.view.accessibility.cts.CaptioningManagerTest', 1), ('android.permission.cts.telephony.TelephonyManagerPermissionTest', 1), ('com.android.cts.devicepolicy.MixedProfileOwnerTest', 1), ('android.text.cts.StaticLayoutTest', 1), ('android.media.cts.ResourceManagerStubActivity', 1), ('android.media.cts.bitstreams.app.MediaBitstreamsDeviceSideTest', 1), ('android.net.cts.IpConfigurationTest', 1), ('android.graphics.drawable.cts.VectorDrawableTest', 1), ('android.server.wm.AnrTests', 1), ('com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest', 1), ('android.webkit.cts.PostMessageTest', 1), ('com.android.cts.devicepolicy.PasswordComplexityTest', 1), ('com.android.cts.deviceandprofileowner.DeviceIdAttestationTest', 1), ('android.media.cts.ExifInterfaceTest', 1), ('android.settings.cts.WifiSliceTest', 1), ('android.server.wm.ToastWindowTest', 1), ('android.webkit.cts.WebViewRenderProcessClientTest', 1), ('com.android.cts.deviceandprofileowner.SecondaryLockscreenTest', 1)]"	"[('setUp', 66), ('getInstrumentation', 44), ('getContext', 33), ('tearDown', 26), ('getDevice', 23), ('getPackageName', 14), ('getPackageManager', 13), ('getTargetContext', 13), ('getUiAutomation', 13), ('getContentResolver', 12), ('trim', 12), ('getAbsolutePath', 11), ('getName', 7), ('getSimpleName', 7), ('Object', 6), ('saveAttributes', 6), ('setup', 5), ('notify', 5), ('getResources', 5), ('build', 5), ('getExternalStorageDirectory', 5), ('getService', 4), ('length', 4), ('getLineCount', 4), ('myUserHandle', 4), ('find', 3), ('toString', 3), ('ime', 3), ('AccessibilityDumpOnFailureRule', 3), ('notifyAll', 3), ('create', 3), ('getThumbnailBytes', 3), ('getWidth', 3), ('getHeight', 3), ('getThumbnailRange', 3), ('Bundle', 2), ('supportsHardware', 2), ('stopDream', 2), ('run', 2), ('waitForBroadcastIdle', 2), ('LimitedErrorCollector', 2), ('Builder', 2), ('getUserId', 2), ('never', 2), ('elapsedRealtime', 2), ('enableService', 2), ('BroadcastReceiver', 2), ('getAction', 2), ('getMetricAffectingSpan', 2), ('customSetup', 2), ('getArguments', 2), ('performAccessibilityShortcut', 2), ('start', 2), ('getLooper', 2), ('hasThumbnail', 2), ('rethrowAsIOException', 2), ('postActivityLaunched', 1), ('getAutofillManager', 1), ('flattenToString', 1), ('canSerializeAndDeserialize', 1), ('PnoSettings', 1), ('supportsDream', 1), ('reset', 1), ('StringBuilder', 1), ('CancellationSignal', 1), ('types', 1), ('statusBars', 1), ('navigationBars', 1), ('nullValue', 1), ('openEventStream', 1), ('getWindow', 1), ('getDecorView', 1), ('setUpPackage', 1), ('getCacheDir', 1), ('BlockingStateCallback', 1), ('anyInt', 1), ('supportsVrMode', 1), ('hashCode', 1), ('hasBattery', 1), ('getJobState', 1), ('assertJobReady', 1), ('assertJobWaiting', 1), ('assertJobNotReady', 1), ('generate', 1), ('verifySingle', 1), ('Cases', 1), ('createFlagParsingTable', 1), ('getReceiverComponent', 1), ('AodSession', 1), ('BitSet', 1), ('WifiP2pGroup', 1), ('MySync', 1), ('MyResponse', 1), ('call', 1), ('getSystem', 1), ('getPages', 1), ('setUpServicesAndAdapter', 1), ('getMock', 1), ('getSession', 1), ('supportedHardware', 1), ('storePrivateDnsSetting', 1), ('bind', 1), ('waitForIdle', 1), ('restorePrivateDnsSetting', 1), ('unbind', 1), ('stopVpn', 1), ('startBackgroundThread', 1), ('TextPaint', 1), ('getAssets', 1), ('MetricAffectingSpan', 1), ('getExternalCacheDir', 1), ('MockScanner', 1), ('BleScanCallback', 1), ('AccessibilityShortcutSettingsRule', 1), ('oneTimeSetup', 1), ('performAccessibilityShortcut_launchAccessibilityService', 1), ('performAccessibilityShortcut_launchShortcutTargetActivity', 1), ('performAccessibilityShortcut_withReqA11yButtonService_a11yButtonCallback', 1), ('getAccessibilityButton_assignedTarget_returnAssignedTarget', 1), ('getAccessibilityButton_assignedMultipleTargets_returnMultipleTargets', 1), ('separateLogs', 1), ('teardown', 1), ('close', 1), ('getCurrentUser', 1), ('quit', 1), ('waitUntilReady', 1), ('waitUntilDone', 1), ('onLooperPrepared', 1), ('myUid', 1), ('supportsMultipleUsers', 1), ('countDown', 1), ('supportsPip', 1), ('recycle', 1), ('getThumbnailBitmap', 1), ('getThumbnail', 1), ('detectUnbufferedIo', 1), ('penaltyDeath', 1), ('open', 1), ('IntentFilter', 1), ('getRingerMode', 1), ('getPackage', 1)]"	"[('CtsCameraTestCases', 17), ('CtsAccessibilityTestCases', 14), ('CtsProviderTestCases', 12), ('CtsWindowManagerDeviceTestCases', 11), ('CtsWifiTestCases', 10), ('CtsContentTestCases', 10), ('CtsBluetoothTestCases', 10), ('CtsInputMethodTestCases', 9), ('CtsTvTestCases', 9), ('CtsMediaTestCases', 9), ('CtsWebkitTestCases', 8), ('CtsAndroidAppTestCases', 7), ('CtsSensorTestCases', 6), ('CtsAutoFillServiceTestCases', 5), ('CtsAdminTestCases', 4), ('CtsLocationFineTestCases', 4), ('CtsTextTestCases', 4), ('CtsPermissionTestCases', 4), ('CtsVrTestCases', 3), ('CtsAccessibilityServiceTestCases', 3), ('CtsContentCaptureServiceTestCases', 3), ('CtsVoiceSettingsTestCases', 3), ('CtsWidgetTestCases', 3), ('CtsTelephonyTestCases', 3), ('CtsSystemIntentTestCases', 3), ('CtsContactsProviderTestCases', 2), ('CtsGraphicsTestCases', 2), ('CtsSecurityTestCases', 2), ('CtsCarrierApiTestCases', 2), ('CtsAppExitTestCases', 2), ('CtsNfcTestCases', 1), ('CtsKeystoreTestCases', 1), ('CtsJobSchedulerTestCases', 1), ('CtsPrintTestCases', 1), ('CtsSettingsTestCases', 1)]"	""	"3.2.3.5/C-11-1"	"""C-11-1] MUST have an activity that handles the Settings.ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS intent but MAY implement it as a no-op. If device implementations declare the support for camera via android.hardware.camera.any they: """	"03020305.671101"	"android.hardware.camera.any TINGS Settings.ACTION ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET"	""	""	""	"[('TINGS', 246), ('Settings.ACTION', 7), ('ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET', 1)]"	""	"[('[android.net.wifi.nl80211.cts.PnoSettingsTest createTestNetworks CtsWifiTestCases]', 2), ('[android.provider.cts.settings.SettingsTest testUserDictionarySettingsExists CtsProviderTestCases]', 2), ('[com.android.cts.storageapp.StorageTest testClearSpace None]', 2), ('[android.location.cts.fine.ScanningSettingsTest testBleScanningSettings CtsLocationFineTestCases]', 2), ('[com.android.cts.packageinstaller.ManualPackageInstallTest testManualInstallBlocked None]', 2), ('[android.autofillservice.cts.VirtualContainerActivityCompatModeTest testMultipleUrlBars_firstDoesNotExist CtsAutoFillServiceTestCases]', 2), ('[com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest testCreateRequestInteractAcrossProfilesIntent_canRequestInteraction_returnsIntent None]', 2), ('[android.autofillservice.cts.FieldsClassificationTest testUserDataConstraints CtsAutoFillServiceTestCases]', 1), ('[android.app.cts.BooleanTileServiceTest testTileIsBoundAndListening CtsAndroidAppTestCases]', 1), ('[android.app.cts.BooleanTileServiceTest testValueTracksState CtsAndroidAppTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodInfoTest testInputMethodInfoProperties CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodInfoTest testInputMethodSubtypeProperties CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodInfoTest testEquals CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodInfoTest testInputMethodInfoWriteToParcel CtsInputMethodTestCases]', 1), ('[android.keystore.cts.CipherTest testEntropyConsumption CtsKeystoreTestCases]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest ServiceWorkerWebSettingsTest CtsWebkitTestCases]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testCacheMode CtsWebkitTestCases]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testAllowContentAccess CtsWebkitTestCases]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testAllowFileAccess CtsWebkitTestCases]', 1), ('[android.webkit.cts.ServiceWorkerWebSettingsTest testBlockNetworkLoads CtsWebkitTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest DisableScreenDozeRule CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testInputConnectionStateWhenScreenStateChanges CtsInputMethodTestCases]', 1), ('[android.view.inputmethod.cts.InputMethodStartInputLifecycleTest testNoStartNewInputWhileOtherProcessHasWindowFocus CtsInputMethodTestCases]', 1), ('[android.media.tv.tuner.cts.TunerDvrTest adoptShellPermissionIdentity CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerDvrTest testDvrSettings CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerDvrTest testDvrRecorder CtsTvTestCases]', 1), ('[android.media.tv.tuner.cts.TunerDvrTest testDvrPlayback CtsTvTestCases]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest testGetters CtsWifiTestCases]', 1), ('[android.net.wifi.nl80211.cts.PnoSettingsTest testEquals CtsWifiTestCases]', 1), ('[android.media.cts.EncoderTest testAACEncoders CtsMediaTestCases]', 1), ('[android.server.wm.DreamManagerServiceTests getIsDreaming CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.appbinding.AppBindingHostTest isSmsCapable None]', 1), ('[android.provider.cts.contacts.Contacts_SettingsTest testAccessSetting CtsContactsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.OrgOwnedProfileOwnerTest testDelegatedCertInstallerDeviceIdAttestation None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerTest testCreateAndManageUser_LowStorage None]', 1), ('[android.server.wm.WindowInsetsAnimationControllerTests assumeTestCompatibility CtsWindowManagerDeviceTestCases]', 1), ('[com.android.cts.deviceandprofileowner.ContentCaptureRestrictionsTest disableService None]', 1), ('[android.provider.cts.settings.SettingsTest testSystemTable CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testSecureTable CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testNoStaleValueModifiedFromSameProcess CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testNoStaleValueModifiedFromOtherProcess CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testNoStaleValueModifiedFromMultipleProcesses CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testUriChangesUpdatingFromDifferentProcesses CtsProviderTestCases]', 1), ('[android.provider.cts.settings.SettingsTest testCheckWriteSettingsOperation CtsProviderTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileContactsTest testManagedContactsPolicies None]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDevicePreviewTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceRecordingTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCameraDeviceZSLTemplate CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testCreateSessionWithParameters CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CameraDeviceTest testAudioRestrictionSingleDevice CtsCameraTestCases]', 1), ('[android.vr.cts.VrSetFIFOThreadTest VrSetFIFOThreadTest CtsVrTestCases]', 1), ('[android.vr.cts.VrSetFIFOThreadTest testSetVrThreadAPISuccess CtsVrTestCases]', 1), ('[android.vr.cts.VrSetFIFOThreadTest testSetVrThreadAPIFailure CtsVrTestCases]', 1), ('[android.webkit.cts.ServiceWorkerClientTest registrationSuccess CtsWebkitTestCases]', 1), ('[android.content.res.cts.ResourcesTest testGetFont_xmlFileWithVariationSettings CtsContentTestCases]', 1), ('[android.server.wm.VrDisplayTests isUiModeLockedToVrHeadset CtsWindowManagerDeviceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testRemoveChildrenFromDifferentSessions CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledBySettings CtsContentCaptureServiceTestCases]', 1), ('[android.contentcaptureservice.cts.ChildlessActivityTest testSetContentCaptureFeatureEnabled_disabledThenReEnabledBySettings CtsContentCaptureServiceTestCases]', 1), ('[com.android.cts.devicepolicy.MixedDeviceOwnerTest testDelegatedCertInstallerDeviceIdAttestation None]', 1), ('[android.accessibilityservice.cts.AccessibilitySoftKeyboardTest testSwitchToInputMethod CtsAccessibilityServiceTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetInstalledAccessibilityServicesList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetEnabledAccessibilityServiceListForTypes CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetAccessibilityServiceList CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityManagerTest testGetRecommendedTimeoutMillis CtsAccessibilityTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetGlobalSetting_failIfNotDeviceOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failIfNotDeviceOrProfileOwner CtsAdminTestCases]', 1), ('[android.admin.cts.DevicePolicyManagerTest testSetSecureSetting_failForInstallNonMarketApps CtsAdminTestCases]', 1), ('[android.hardware.camera2.cts.StaticMetadataTest testHwSupportedLevel CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.StaticMetadataTest testCapabilities CtsCameraTestCases]', 1), ('[android.server.wm.KeyguardTests isAodAvailable CtsWindowManagerDeviceTestCases]', 1), ('[android.view.inputmethod.cts.InputConnectionBlockingMethodTest getTestMarker CtsInputMethodTestCases]', 1), ('[android.net.wifi.cts.ConcurrencyTest ActionListener CtsWifiTestCases]', 1), ('[android.graphics.cts.TypefaceCustomFallbackBuilderTest testSingleFont_vf CtsGraphicsTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileTest testSettingsIntents None]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest isNotNull CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiBackupRestoreTest testCanRestoreSoftApBackupData CtsWifiTestCases]', 1), ('[android.media.cts.DecoderTestXheAac testDecodeUsacSamplingRatesM4a CtsMediaTestCases]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testEnableAngleForAll None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testSettingsLengthMismatch None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testUpdateDriverValues None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testMultipleUpdateDriverValues None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testDefaultNotInSettings None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testUninstalledPkgsNotInSettings None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testMultipleDevOptionsAngleDefault None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testMultipleDevOptionsAngleNativeUninstall None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testAngleInUseDialogBoxWithAngle None]', 1), ('[android.angle.cts.CtsAngleDeveloperOptionHostTest testAngleInUseDialogBoxWithNative None]', 1), ('[android.server.wm.WindowInsetsAnimationSynchronicityTests testControl_rendersSynchronouslyBetweenImeWindowAndAppContent CtsWindowManagerDeviceTestCases]', 1), ('[com.android.server.cts.IncidentdTest incidentdDisabled None]', 1), ('[android.provider.cts.settings.Settings_SystemTest testSystemSettings CtsProviderTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testDefaultSettings CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testDescribeContents CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanSettingsTest testReadWriteParcel CtsBluetoothTestCases]', 1), ('[com.android.cts.deviceandprofileowner.AudioRestrictionTest isFullVolumeDevice None]', 1), ('[android.print.cts.CustomPrintOptionsTest onPrinterDiscoverySessionDestroyCalled CtsPrintTestCases]', 1), ('[com.android.server.cts.AlarmManagerIncidentTest testAlarmManagerServiceDump None]', 1), ('[com.android.cts.verifier.sensors.MotionIndicatorView testUI None]', 1), ('[com.android.cts.net.hostside.VpnTest finish None]', 1), ('[android.location.cts.fine.ScanningSettingsTest isTV CtsLocationFineTestCases]', 1), ('[android.location.cts.fine.ScanningSettingsTest testWifiScanningSettings CtsLocationFineTestCases]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest dropShellPermissionIdentity None]', 1), ('[com.android.cts.deviceandprofileowner.UserRestrictionsParentTest testPerProfileUserRestriction_onParent None]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testSettingsBinderParcel CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testBlackLevelLock CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testLensShadingMap CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.CaptureRequestTest testExtendedSceneModes CtsCameraTestCases]', 1), ('[android.security.cts.IntentSenderRemovalTest testIntentSenderIntent CtsSecurityTestCases]', 1), ('[android.view.accessibility.cts.CaptioningManagerTest testUserStyle CtsAccessibilityTestCases]', 1), ('[android.text.cts.StaticLayoutLineBreakingTest testWithOneSpan CtsTextTestCases]', 1), ('[android.text.cts.StaticLayoutLineBreakingTest testWithTwoSpans CtsTextTestCases]', 1), ('[android.permission.cts.telephony.TelephonyManagerPermissionTest testVoiceMailNumber CtsPermissionTestCases]', 1), ('[android.voicesettings.cts.AirplaneModeTest testAll CtsVoiceSettingsTestCases]', 1), ('[android.permission.cts.ProviderPermissionTest testReadSmsInstant CtsPermissionTestCases]', 1), ('[android.permission.cts.ProviderPermissionTest testWriteSettings CtsPermissionTestCases]', 1), ('[com.android.cts.devicepolicy.MixedProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None]', 1), ('[com.android.cts.deviceandprofileowner.AutofillRestrictionsTest disableService None]', 1), ('[com.android.cts.deviceandprofileowner.AutofillRestrictionsTest testDisallowAutofill_allowed None]', 1), ('[android.text.cts.StaticLayoutTest testIndent CtsTextTestCases]', 1), ('[android.media.cts.bitstreams.app.MediaBitstreamsDeviceSideTest isDebuggerConnected None]', 1), ('[android.net.cts.IpConfigurationTest testConstructor None]', 1), ('[android.autofillservice.cts.VirtualContainerActivityCompatModeTest VirtualContainerActivityCompatModeTest CtsAutoFillServiceTestCases]', 1), ('[com.android.cts.devicepolicy.ManagedProfileRingtoneTest testRingtoneSync None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileRingtoneTest testRingtoneSyncAutoDisableRingtone None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileRingtoneTest testRingtoneSyncAutoDisableNotification None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileRingtoneTest testRingtoneSyncAutoDisableAlarm None]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenCustomToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.widget.cts.ToastTest testAccessDuration_whenTextToastAndWithA11yTimeoutEnabled CtsWidgetTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testScanSuccess CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testBatchScans CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.ScanCallbackTest testScanFail CtsBluetoothTestCases]', 1), ('[android.app.cts.NotificationChannelTest testConstructor CtsAndroidAppTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityShortcutTest postTestTearDown CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityShortcutTest testAccessibilityButtonService_disableSelf_buttonRemoved CtsAccessibilityTestCases]', 1), ('[android.view.accessibility.cts.AccessibilityShortcutTest testAccessibilityButtonService_disableSelf_shortcutRemoved CtsAccessibilityTestCases]', 1), ('[com.android.cts.deviceandprofileowner.systemupdate.InstallUpdateTest testInstallUpdate_charging_aboveThreshold_passesBatteryCheck None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest removeTestUsers None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testAlwaysOnVpnUnsupportedPackageReplaced None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testSetSystemSetting None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testLockTaskAfterReboot_tryOpeningSettings None]', 1), ('[com.android.cts.devicepolicy.MixedManagedProfileOwnerTest testProfileOwnerCanGetDeviceIdentifiers None]', 1), ('[android.telephony.cts.TelephonyManagerTest testGetCallWaitingStatus CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testSetCallWaitingStatus CtsTelephonyTestCases]', 1), ('[android.telephony.cts.TelephonyManagerTest testResetSettings CtsTelephonyTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_isNull CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_isNotNull CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_isNullOnUnregister CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_getTotalUsageLimit CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_getTotalUsageRemaining CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_smallestLimitReturned CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testGetAppUsageLimit_zeroUsageRemaining CtsContentTestCases]', 1), ('[android.content.pm.cts.LauncherAppsTest testIsActivityEnabled CtsContentTestCases]', 1), ('[android.app.cts.UiModeManagerTest testEnterCarModePrioritizedDenied CtsAndroidAppTestCases]', 1), ('[android.inputmethodservice.cts.hostside.InputMethodServiceLifecycleTest testSwitchImeInstant None]', 1), ('[android.inputmethodservice.cts.hostside.InputMethodServiceLifecycleTest testUninstallCurrentImeInstant None]', 1), ('[android.inputmethodservice.cts.hostside.InputMethodServiceLifecycleTest testImeVisibilityAfterImeSwitchingInstant None]', 1), ('[android.webkit.cts.PostMessageTest PostMessageTest CtsWebkitTestCases]', 1), ('[android.carrierapi.cts.NetworkScanApiTest adoptShellPermissionIdentity CtsCarrierApiTestCases]', 1), ('[android.carrierapi.cts.NetworkScanApiTest testNetworkScanPermission CtsCarrierApiTestCases]', 1), ('[android.media.tv.cts.HardwareSessionTest HardwareSessionTest CtsTvTestCases]', 1), ('[android.media.tv.cts.HardwareSessionTest testHardwareProxyTvInputService CtsTvTestCases]', 1), ('[android.tv.settings.cts.SettingsLeanbackTest SettingsLeanbackTest CtsTvTestCases]', 1), ('[android.tv.settings.cts.SettingsLeanbackTest testLeanbackLauncherIntentCategory CtsTvTestCases]', 1), ('[android.tv.settings.cts.SettingsLeanbackTest testLeanbackSettingsIntentCategory CtsTvTestCases]', 1), ('[android.media.cts.AsyncPlayerTest testAsyncPlayer CtsMediaTestCases]', 1), ('[android.media.cts.AsyncPlayerTest testAsyncPlayerAudioAttributes CtsMediaTestCases]', 1), ('[com.android.cts.deviceandprofileowner.DeviceIdAttestationTest testSucceedsWithProfileOwnerIdsGrant None]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest finish CtsAppExitTestCases]', 1), ('[android.app.cts.ActivityManagerAppExitInfoTest testAnr CtsAppExitTestCases]', 1), ('[android.server.wm.PinnedStackTests testConfigurationChangeOrderDuringTransition CtsWindowManagerDeviceTestCases]', 1), ('[android.settings.cts.WifiSliceTest isCar CtsSettingsTestCases]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity isLowRamDevice None]', 1), ('[com.android.cts.verifier.audio.RingerModeActivity TestVolumeDndAffectedStream None]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettingsDataBuilder CtsWifiTestCases]', 1), ('[android.net.wifi.cts.WifiMigrationTest testWifiMigrationSettings CtsWifiTestCases]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurst CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testJpegBurst CtsCameraTestCases]', 1), ('[android.hardware.camera2.cts.BurstCaptureTest testYuvBurstWithStillBokeh CtsCameraTestCases]', 1), ('[android.media.cts.MediaProjectionTest testOverlayAllowedDuringScreenCapture CtsMediaTestCases]', 1), ('[android.webkit.cts.WebViewRenderProcessClientTest WebViewRenderProcessClientTest CtsWebkitTestCases]', 1), ('[android.hardware.cts.helpers.sensoroperations.SensorOperationTest ISensorTestNode CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensoroperations.SensorOperationTest testParallelSensorOperation_timeout CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensoroperations.SensorOperationTest testRepeatingSensorOperation CtsSensorTestCases]', 1), ('[android.hardware.cts.helpers.sensoroperations.SensorOperationTest testRepeatingSensorOperation_fail CtsSensorTestCases]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest currentTimeMillis None]', 1), ('[android.SustainedPerformance.cts.SustainedPerformanceHostTest testShader None]', 1), ('[android.host.systemui.ActiveTileServiceTest testNotListening None]', 1), ('[android.host.systemui.ActiveTileServiceTest testClick None]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest MockAdvertiser CtsBluetoothTestCases]', 1), ('[android.bluetooth.cts.AdvertiseCallbackTest testAdvertiseFailure CtsBluetoothTestCases]', 1), ('[com.android.cts.crossprofileappstest.CrossProfileAppsPermissionToInteractTest dropShellPermissionIdentity None]', 1), ('[android.hardware.cts.SensorIntegrationTests testSensorsWithSeveralClients CtsSensorTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/angle/src/android/angle/cts/CtsAngleDeveloperOptionHostTest.java', 11), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/SettingsTest.java', 10), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/pm/cts/LauncherAppsTest.java', 9), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityShortcutTest.java', 8), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CameraDeviceTest.java', 6), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodInfoTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/ServiceWorkerWebSettingsTest.java', 5), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/AccessibilityManagerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/CaptureRequestTest.java', 5), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 5), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/tuner/cts/TunerDvrTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DevicePolicyManagerTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanSettingsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/location/location_fine/src/android/location/cts/fine/ScanningSettingsTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java', 4), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/ScanCallbackTest.java', 4), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/BurstCaptureTest.java', 4), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java', 4), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/BooleanTileServiceTest.java', 3), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/vr/src/android/vr/cts/VrSetFIFOThreadTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/test-apps/StorageApp/src/com/android/cts/storageapp/StorageTest.java', 3), ('/home/gpoor/cts-source/cts/tests/contentcaptureservice/src/android/contentcaptureservice/cts/ChildlessActivityTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutLineBreakingTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/voicesettings/src/android/voicesettings/cts/AirplaneModeTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/PackageInstaller/src/com/android/cts/packageinstaller/ManualPackageInstallTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/permission/src/android/permission/cts/ProviderPermissionTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/VirtualContainerActivityCompatModeTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/widget/src/android/widget/cts/ToastTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/telephony/current/src/android/telephony/cts/TelephonyManagerTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/inputmethodservice/hostside/src/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/tv/settings/cts/SettingsLeanbackTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/AsyncPlayerTest.java', 3), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiMigrationTest.java', 3), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CrossProfileTestApps/CrossProfileAppsTest/src/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java', 3), ('/home/gpoor/cts-source/cts/tests/autofillservice/src/android/autofillservice/cts/FieldsClassificationTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/contactsprovider/src/android/provider/cts/contacts/Contacts_SettingsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySoftKeyboardTest.java', 2), ('/home/gpoor/cts-source/cts/tests/camera/src/android/hardware/camera2/cts/StaticMetadataTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/WifiBackupRestoreTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationSynchronicityTests.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/provider/src/android/provider/cts/settings/Settings_SystemTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/net/app/src/com/android/cts/net/hostside/VpnTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/security/src/android/security/cts/IntentSenderRemovalTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/NotificationChannelTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/src/android/app/cts/UiModeManagerTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/carrierapi/src/android/carrierapi/cts/NetworkScanApiTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/tv/src/android/media/tv/cts/HardwareSessionTest.java', 2), ('/home/gpoor/cts-source/cts/tests/app/AppExitTest/src/android/app/cts/ActivityManagerAppExitInfoTest.java', 2), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/PinnedStackTests.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/audio/RingerModeActivity.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/MediaProjectionTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/sustainedperf/src/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/systemui/src/android/host/systemui/ActiveTileServiceTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/bluetooth/src/android/bluetooth/cts/AdvertiseCallbackTest.java', 2), ('/home/gpoor/cts-source/cts/tests/sensor/src/android/hardware/cts/SensorIntegrationTests.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/nfc/src/android/nfc/cts/NfcPreferredPaymentTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/keystore/src/android/keystore/cts/CipherTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/EncoderTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/DreamManagerServiceTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appbinding/hostside/src/com/android/cts/appbinding/AppBindingHostTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/WindowInsetsAnimationControllerTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/appsecurity/src/android/appsecurity/cts/PackageVisibilityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileContactsTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/ServiceWorkerClientTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/res/cts/ResourcesTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/VrDisplayTests.java', 1), ('/home/gpoor/cts-source/cts/tests/JobScheduler/src/android/jobscheduler/cts/BatteryConstraintTest.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/intent/IntentGenerationTests.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/KeyguardTests.java', 1), ('/home/gpoor/cts-source/cts/tests/inputmethod/src/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/wifi/src/android/net/wifi/cts/ConcurrencyTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/cts/TypefaceCustomFallbackBuilderTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/DecoderTestXheAac.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/IncidentdTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/print/src/android/print/cts/CustomPrintOptionsTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/incident/src/com/android/server/cts/AlarmManagerIncidentTest.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/sensors/MotionIndicatorView.java', 1), ('/home/gpoor/cts-source/cts/tests/accessibility/src/android/view/accessibility/cts/CaptioningManagerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/permission/telephony/src/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/text/src/android/text/cts/StaticLayoutTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ResourceManagerStubActivity.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/media/bitstreams/app/src/android/media/cts/bitstreams/app/MediaBitstreamsDeviceSideTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/net/src/android/net/cts/IpConfigurationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/graphics/src/android/graphics/drawable/cts/VectorDrawableTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/AnrTests.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/PostMessageTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/PasswordComplexityTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/media/src/android/media/cts/ExifInterfaceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/settings/src/android/settings/cts/WifiSliceTest.java', 1), ('/home/gpoor/cts-source/cts/tests/framework/base/windowmanager/src/android/server/wm/ToastWindowTest.java', 1), ('/home/gpoor/cts-source/cts/tests/tests/webkit/src/android/webkit/cts/WebViewRenderProcessClientTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceAndProfileOwner/src/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java', 1)]"	"[('/android/provider/cts/settings/SettingsTest.java', 12), ('/android/angle/cts/CtsAngleDeveloperOptionHostTest.java', 12), ('/android/content/pm/cts/LauncherAppsTest.java', 10), ('/android/view/accessibility/cts/AccessibilityShortcutTest.java', 9), ('/android/hardware/camera2/cts/CameraDeviceTest.java', 7), ('/android/view/inputmethod/cts/InputMethodInfoTest.java', 6), ('/android/webkit/cts/ServiceWorkerWebSettingsTest.java', 6), ('/android/view/accessibility/cts/AccessibilityManagerTest.java', 6), ('/android/location/cts/fine/ScanningSettingsTest.java', 6), ('/android/hardware/camera2/cts/CaptureRequestTest.java', 6), ('/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java', 6), ('/android/systemintents/cts/TestSystemIntents.java', 6), ('/android/media/tv/tuner/cts/TunerDvrTest.java', 5), ('/android/net/wifi/nl80211/cts/PnoSettingsTest.java', 5), ('/com/android/cts/storageapp/StorageTest.java', 5), ('/android/admin/cts/DevicePolicyManagerTest.java', 5), ('/android/bluetooth/cts/ScanSettingsTest.java', 5), ('/android/voicesettings/cts/AirplaneModeTest.java', 5), ('/com/android/cts/packageinstaller/ManualPackageInstallTest.java', 5), ('/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java', 5), ('/android/bluetooth/cts/ScanCallbackTest.java', 5), ('/android/hardware/camera2/cts/BurstCaptureTest.java', 5), ('/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java', 5), ('/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java', 5), ('/android/app/cts/BooleanTileServiceTest.java', 4), ('/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java', 4), ('/android/vr/cts/VrSetFIFOThreadTest.java', 4), ('/android/contentcaptureservice/cts/ChildlessActivityTest.java', 4), ('/android/text/cts/StaticLayoutLineBreakingTest.java', 4), ('/android/permission/cts/ProviderPermissionTest.java', 4), ('/android/autofillservice/cts/VirtualContainerActivityCompatModeTest.java', 4), ('/android/widget/cts/ToastTest.java', 4), ('/android/telephony/cts/TelephonyManagerTest.java', 4), ('/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java', 4), ('/android/tv/settings/cts/SettingsLeanbackTest.java', 4), ('/android/media/cts/AsyncPlayerTest.java', 4), ('/android/net/wifi/cts/WifiMigrationTest.java', 4), ('/android/autofillservice/cts/FieldsClassificationTest.java', 3), ('/android/provider/cts/contacts/Contacts_SettingsTest.java', 3), ('/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java', 3), ('/android/accessibilityservice/cts/AccessibilitySoftKeyboardTest.java', 3), ('/android/hardware/camera2/cts/StaticMetadataTest.java', 3), ('/android/net/wifi/cts/WifiBackupRestoreTest.java', 3), ('/android/server/wm/WindowInsetsAnimationSynchronicityTests.java', 3), ('/android/provider/cts/settings/Settings_SystemTest.java', 3), ('/com/android/cts/net/hostside/VpnTest.java', 3), ('/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java', 3), ('/android/security/cts/IntentSenderRemovalTest.java', 3), ('/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java', 3), ('/android/app/cts/NotificationChannelTest.java', 3), ('/android/app/cts/UiModeManagerTest.java', 3), ('/android/carrierapi/cts/NetworkScanApiTest.java', 3), ('/android/media/tv/cts/HardwareSessionTest.java', 3), ('/android/app/cts/ActivityManagerAppExitInfoTest.java', 3), ('/android/server/wm/PinnedStackTests.java', 3), ('/com/android/cts/verifier/audio/RingerModeActivity.java', 3), ('/android/media/cts/MediaProjectionTest.java', 3), ('/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java', 3), ('/android/host/systemui/ActiveTileServiceTest.java', 3), ('/android/bluetooth/cts/AdvertiseCallbackTest.java', 3), ('/android/hardware/cts/SensorIntegrationTests.java', 3), ('/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java', 2), ('/android/nfc/cts/NfcPreferredPaymentTest.java', 2), ('/android/keystore/cts/CipherTest.java', 2), ('/android/media/cts/EncoderTest.java', 2), ('/android/server/wm/DreamManagerServiceTests.java', 2), ('/com/android/cts/appbinding/AppBindingHostTest.java', 2), ('/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerTest.java', 2), ('/android/server/wm/WindowInsetsAnimationControllerTests.java', 2), ('/android/appsecurity/cts/PackageVisibilityTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileContactsTest.java', 2), ('/android/webkit/cts/ServiceWorkerClientTest.java', 2), ('/android/content/res/cts/ResourcesTest.java', 2), ('/android/server/wm/VrDisplayTests.java', 2), ('/android/jobscheduler/cts/BatteryConstraintTest.java', 2), ('/android/accessibilityservice/cts/AccessibilityMagnificationTest.java', 2), ('/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java', 2), ('/android/server/wm/intent/IntentGenerationTests.java', 2), ('/android/server/wm/KeyguardTests.java', 2), ('/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java', 2), ('/android/net/wifi/cts/ConcurrencyTest.java', 2), ('/android/graphics/cts/TypefaceCustomFallbackBuilderTest.java', 2), ('/com/android/cts/devicepolicy/ManagedProfileTest.java', 2), ('/android/media/cts/DecoderTestXheAac.java', 2), ('/com/android/server/cts/IncidentdTest.java', 2), ('/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java', 2), ('/android/print/cts/CustomPrintOptionsTest.java', 2), ('/com/android/server/cts/AlarmManagerIncidentTest.java', 2), ('/com/android/cts/verifier/sensors/MotionIndicatorView.java', 2), ('/android/view/accessibility/cts/CaptioningManagerTest.java', 2), ('/android/permission/cts/telephony/TelephonyManagerPermissionTest.java', 2), ('/com/android/cts/devicepolicy/MixedProfileOwnerTest.java', 2), ('/android/text/cts/StaticLayoutTest.java', 2), ('/android/media/cts/ResourceManagerStubActivity.java', 2), ('/android/media/cts/bitstreams/app/MediaBitstreamsDeviceSideTest.java', 2), ('/android/net/cts/IpConfigurationTest.java', 2), ('/android/graphics/drawable/cts/VectorDrawableTest.java', 2), ('/android/server/wm/AnrTests.java', 2), ('/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java', 2), ('/android/webkit/cts/PostMessageTest.java', 2), ('/com/android/cts/devicepolicy/PasswordComplexityTest.java', 2), ('/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java', 2), ('/android/media/cts/ExifInterfaceTest.java', 2), ('/android/settings/cts/WifiSliceTest.java', 2), ('/android/server/wm/ToastWindowTest.java', 2), ('/android/webkit/cts/WebViewRenderProcessClientTest.java', 2), ('/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java', 2)]"	"[('([4:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[TINGS]:[4]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 2), ('([9:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[9]:method_text:[ver(),                     Settings.System.VIBRATE_WHEN_RINGING, initialValue);         }     }     ])', 2), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[     assertTrue(""The vibrating service should be installed."", vibratingServiceInstalled);     }     ])', 2), ('([19:/android/autofillservice/cts/FieldsClassificationTest.java]:[TINGS]:[19]:method_text:[G_MAX_CC_LENGTH"", 19);         mCreditCardBundle.putInt(""OPTIONAL_ARG_SUFFIX_LENGTH"", 4);     }     ])', 1), ('([1:/android/autofillservice/cts/FieldsClassificationTest.java]:[TINGS]:[1]:method_text:[ength()).isEqualTo(50);         assertThat(UserData.getMaxCategoryCount()).isEqualTo(42);     }     ])', 1), ('([1:/com/android/cts/deviceandprofileowner/PolicyTransparencyTest.java]:[TINGS]:[1]:method_text:[ extends BaseDeviceAdminTest {      private static final String TAG = ""PolicyTransparencyTest"";     ])', 1), ('([3:/android/nfc/cts/NfcPreferredPaymentTest.java]:[TINGS]:[3]:method_text:[void tearDown() throws Exception {     }      /** Tests getAidsForPreferredPaymentService API */    ])', 1), ('([2:/android/app/cts/BooleanTileServiceTest.java]:[TINGS]:[2]:method_text:[t extends BaseTileServiceTest {     private final static String TAG = ""BooleanTileServiceTest"";     ])', 1), ('([1:/android/app/cts/BooleanTileServiceTest.java]:[TINGS]:[1]:method_text:[        startTileService();         expandSettings(true);         waitForListening(true);     }     ])', 1), ('([2:/android/app/cts/BooleanTileServiceTest.java]:[TINGS]:[2]:method_text:[HECK_DELAY);         }         assertEquals(state, ToggleableTestTileService.isConnected());     } }])', 1), ('([5:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[TINGS]:[5]:method_text:[btypeIsAuxiliary,                 mSubtypeOverridesImplicitlyEnabledSubtype, mSubtypeId);     }     ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[TINGS]:[1]:method_text:[, mInputMethodInfo.getServiceInfo());             assertInfo(mInputMethodInfo);         }     }     ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[TINGS]:[2]:method_text:[quals(expectedId, info.getId());         assertEquals(mClassName, info.getServiceName());     }     ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[TINGS]:[1]:method_text:[        mSettingsActivity);         assertTrue(inputMethodInfo.equals(mInputMethodInfo));     }     ])', 1), ('([2:/android/view/inputmethod/cts/InputMethodInfoTest.java]:[TINGS]:[2]:method_text:[rceId());         assertService(mInputMethodInfo.getServiceInfo(), imi.getServiceInfo());     }     ])', 1), ('([2:/android/keystore/cts/CipherTest.java]:[TINGS]:[2]:method_text:[s key             return Arrays.copyOf(plaintext, maxSupportedPlaintextSizeBytes);         }     } }])', 1), ('([9:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[TINGS]:[9]:method_text:[   * should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([6:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[TINGS]:[6]:method_text:[test should be reflected in that test as necessary. See http://go/modifying-webview-cts.      */    ])', 1), ('([3:/android/webkit/cts/ServiceWorkerWebSettingsTest.java]:[TINGS]:[3]:method_text:[ockNetworkLoads(b);             assertEquals(b, mSettings.getBlockNetworkLoads());         }     } }])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[ new UnlockScreenRule();      private static final long TIMEOUT = TimeUnit.SECONDS.toMillis(5);     ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[able window hosted by a different process      * temporarily becomes the focused window.      */    ])', 1), ('([1:/android/view/inputmethod/cts/InputMethodStartInputLifecycleTest.java]:[TINGS]:[1]:method_text:[Matcher() {         return event -> TextUtils.equals(""onFinishInput"", event.getEventName());     } }])', 1), ('([3:/android/media/tv/tuner/cts/TunerDvrTest.java]:[TINGS]:[3]:method_text:[       if (mTuner != null) {           mTuner.close();           mTuner = null;         }     }     ])', 1), ('([10:/android/media/tv/tuner/cts/TunerDvrTest.java]:[TINGS]:[10]:method_text:[acketSize());         assertEquals(DvrSettings.DATA_FORMAT_TS, settings.getDataFormat());     }     ])', 1), ('([7:/android/media/tv/tuner/cts/TunerDvrTest.java]:[TINGS]:[7]:method_text:[          filter.stop();             filter.close();         }          tmpFile.delete();     }     ])', 1), ('([5:/android/media/tv/tuner/cts/TunerDvrTest.java]:[TINGS]:[5]:method_text:[.         return mContext.getPackageManager().hasSystemFeature(""android.hardware.tv.tuner"");     } }])', 1), ('([3:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[TINGS]:[3]:method_text:[ tests if Wifi is not supported         assumeTrue(WifiFeature.isWifiSupported(context));     }     ])', 1), ('([13:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[TINGS]:[13]:method_text:[alTo(-50);         assertThat(settings.getPnoNetworks()).isEqualTo(createTestNetworks());     }     ])', 1), ('([21:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[TINGS]:[21]:method_text:[ngs);         assertThat(settingsDeserialized.hashCode()).isEqualTo(settings.hashCode());     }     ])', 1), ('([18:/android/net/wifi/nl80211/cts/PnoSettingsTest.java]:[TINGS]:[18]:method_text:[setPnoNetworks(createTestNetworks());          assertThat(settings2).isNotEqualTo(settings);     } }])', 1), ('([4:/android/media/cts/EncoderTest.java]:[TINGS]:[4]:method_text:[             muxer.stop();             muxer.release();             muxer = null;         }     } } ])', 1), ('([4:/android/server/wm/DreamManagerServiceTests.java]:[TINGS]:[4]:method_text:[ld be the top resumed activity"");         mWmState.assertVisibility(TEST_ACTIVITY, true);     }     ])', 1), ('([5:/com/android/cts/appbinding/AppBindingHostTest.java]:[TINGS]:[5]:method_text:[   * Install APK 1 and make it the default SMS app and make sure the service gets bound.      */    ])', 1), ('([2:/android/provider/cts/contacts/Contacts_SettingsTest.java]:[TINGS]:[2]:method_text:[         mContentResolver = getInstrumentation().getTargetContext().getContentResolver();     }     ])', 1), ('([7:/android/provider/cts/contacts/Contacts_SettingsTest.java]:[TINGS]:[7]:method_text:[lue2);         assertEquals(value2, Settings.getSetting(mContentResolver, ""account"", key1));     } }])', 1), ('([1:/com/android/cts/devicepolicy/OrgOwnedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[,                 ""testGenerateKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId);     }     ])', 1), ('([2:/com/android/cts/devicepolicy/DeviceOwnerTest.java]:[TINGS]:[2]:method_text:[                     ""settings delete global sys_storage_threshold_max_bytes"");         }     }     ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationControllerTests.java]:[TINGS]:[2]:method_text:[tView.getRootWindowInsets().getInsetsIgnoringVisibility(mType));         }     }      @Presubmit    ])', 1), ('([1:/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java]:[TINGS]:[1]:method_text:[ic class ContentCaptureRestrictionsTest extends BaseDeviceAdminTest {      // TODO(b/123540602): use])', 1), ('([1:/com/android/cts/deviceandprofileowner/ContentCaptureRestrictionsTest.java]:[TINGS]:[1]:method_text:[ervice() {         runShellCommand(""cmd content_capture set temporary-service %d"", mUserId);     } }])', 1), ('([3:/android/appsecurity/cts/PackageVisibilityTest.java]:[TINGS]:[3]:method_text:[mand(""settings put global package_verifier_enable ""                 + mOldVerifierValue);     }     ])', 1), ('([5:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[5]:method_text:[ommand(                 ""appops set "" + packageName + "" android:write_settings default"");     }     ])', 1), ('([16:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[16]:method_text:[            if (cursor != null) {                 cursor.close();            }         }     }     ])', 1), ('([15:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[15]:method_text:[  c.close();         } catch (SQLiteException e) {             // This is fine.         }     }     ])', 1), ('([3:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[3]:method_text:[              intent, PackageManager.MATCH_DEFAULT_ONLY);         assertTrue(ri != null);     }     ])', 1), ('([13:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[13]:method_text:[ver(),                     Settings.System.VIBRATE_WHEN_RINGING, initialValue);         }     }     ])', 1), ('([16:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[16]:method_text:[s.System.VIBRATE_WHEN_RINGING, initialValue);             handlerThread.quit();         }     }     ])', 1), ('([10:/android/provider/cts/settings/SettingsTest.java]:[TINGS]:[10]:method_text:[   private Context getContext() {         return InstrumentationRegistry.getTargetContext();     } }])', 1), ('([1:/android/provider/cts/settings/SettingsTest.java]:[Settings.ACTION]:[1]:method_text:[              intent, PackageManager.MATCH_DEFAULT_ONLY);         assertTrue(ri != null);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileContactsTest.java]:[TINGS]:[1]:method_text:[seDirectories_canNotAccessManagedDirectories"",                     mParentUserId);         }     } }])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[ure the stable frame rate is guaranteed for the given      * settings.</li>      * </ul>      */    ])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[takes priority to the stable      * frame rate for the given settings.</li>      * </ul>      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[1]:method_text:[ettings should maximize image quality      * without compromising stable frame rate.</p>      */    ])', 1), ('([2:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[2]:method_text:[posure, sensitivity, and so on) are      * set to reasonable defaults.</li>      * </ul>      */    ])', 1), ('([5:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[5]:method_text:[     /**      * Verify audio restrictions are set properly for single CameraDevice usage      */    ])', 1), ('([1:/android/hardware/camera2/cts/CameraDeviceTest.java]:[TINGS]:[1]:method_text:[_CLOSED, CAMERA_CLOSE_TIMEOUT_MS);                 cam1Cb = null;             }         }     }     ])', 1), ('([3:/android/vr/cts/VrSetFIFOThreadTest.java]:[TINGS]:[3]:method_text:[tra(OpenGLESActivity.EXTRA_MUTABLE, mutableAttribute);         setActivityIntent(intent);     }     ])', 1), ('([1:/android/vr/cts/VrSetFIFOThreadTest.java]:[TINGS]:[1]:method_text:[ policy);             assertEquals((SCHED_FIFO | SCHED_RESET_ON_FORK), policy);         }     }     ])', 1), ('([1:/android/vr/cts/VrSetFIFOThreadTest.java]:[TINGS]:[1]:method_text:[G, ""scheduling policy: "" + policy);             assertEquals(SCHED_OTHER, policy);         }     } }])', 1), ('([1:/android/webkit/cts/ServiceWorkerClientTest.java]:[TINGS]:[1]:method_text:[bview-cts.      */     // Test correct invocation of shouldInterceptRequest for Service Workers.    ])', 1), ('([4:/android/content/res/cts/ResourcesTest.java]:[TINGS]:[4]:method_text:[ypeface2);         assertEquals(getLargerTypeface(""-"", typeface1, typeface2), typeface2);     }     ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[TINGS]:[1]:method_text:[se {     private Context getContext() {         return getInstrumentation().getContext();     }     ])', 1), ('([2:/com/android/cts/storageapp/StorageTest.java]:[TINGS]:[2]:method_text:[(new UiSelector().text(""OK"")).click();     }      /**      * Measure ourselves manually.      */    ])', 1), ('([1:/com/android/cts/storageapp/StorageTest.java]:[Settings.ACTION]:[1]:method_text:[(new UiSelector().text(""OK"")).click();     }      /**      * Measure ourselves manually.      */    ])', 1), ('([9:/android/server/wm/VrDisplayTests.java]:[TINGS]:[9]:method_text:[ }     }      /**      * Tests that any new activity launch in Vr mode is in Vr display.      */    ])', 1), ('([9:/android/jobscheduler/cts/BatteryConstraintTest.java]:[TINGS]:[9]:method_text:[ that requires the device is charging, when the battery reports it is      * plugged in.      */    ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilityMagnificationTest.java]:[TINGS]:[1]:method_text:[to disable it.         mService = mMagnificationAccessibilityServiceRule.enableService();     }     ])', 1), ('([5:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[TINGS]:[5]:method_text:[               throw new IllegalArgumentException(""invalid reason: "" + reason);         }     }     ])', 1), ('([2:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[TINGS]:[2]:method_text:[   watcher.waitFor(DESTROYED);          assertThat(service.getAllSessionIds()).isEmpty();     }     ])', 1), ('([2:/android/contentcaptureservice/cts/ChildlessActivityTest.java]:[TINGS]:[2]:method_text:[sion = service2.getOnlyFinishedSession();         activity2.assertDefaultEvents(session);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/MixedDeviceOwnerTest.java]:[TINGS]:[1]:method_text:[eKeyPairWithDeviceIdAttestationExpectingSuccess"", mUserId));     }      @FlakyTest     @Override    ])', 1), ('([1:/android/accessibilityservice/cts/AccessibilitySoftKeyboardTest.java]:[TINGS]:[1]:method_text:[strumentationRegistry.getInstrumentation();         mService = mServiceRule.getService();     }     ])', 1), ('([4:/android/accessibilityservice/cts/AccessibilitySoftKeyboardTest.java]:[TINGS]:[4]:method_text:[            .addCommand(ShellCommandUtils.resetImes())                     .run();         }     } }])', 1), ('([1:/android/server/wm/intent/IntentGenerationTests.java]:[TINGS]:[1]:method_text:[vate Context mTargetContext = getInstrumentation().getTargetContext();      //20 minute timeout.    ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[         assertTrue(""The vibrating service should be enabled."", vibratingServiceEnabled);     }     ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[3]:method_text:[               multipleFeedbackTypesServiceEnabled);     }      @SuppressWarnings(""deprecation"")    ])', 1), ('([8:/android/view/accessibility/cts/AccessibilityManagerTest.java]:[TINGS]:[8]:method_text:[;         } catch (IOException e) {             fail(""Fail to run shell command"");         }     } }])', 1), ('([2:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[2]:method_text:[             mPackageManager.hasSystemFeature(PackageManager.FEATURE_SECURE_LOCK_SCREEN);     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[h (SecurityException e) {             assertDeviceOwnerMessage(e.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[ (SecurityException e) {             assertProfileOwnerMessage(e.getMessage());         }     }     ])', 1), ('([1:/android/admin/cts/DevicePolicyManagerTest.java]:[TINGS]:[1]:method_text:[h (UnsupportedOperationException exc) {             // Supposed to throw. Pass.         }     }     ])', 1), ('([2:/android/hardware/camera2/cts/StaticMetadataTest.java]:[TINGS]:[2]:method_text:[ces.         }     }      /**      * Test max number of output stream reported by device      */    ])', 1), ('([2:/android/hardware/camera2/cts/StaticMetadataTest.java]:[TINGS]:[2]:method_text:[eraId, capabilityName));             }         }     }      /**      * Test lens facing.      */    ])', 1), ('([8:/android/server/wm/KeyguardTests.java]:[TINGS]:[8]:method_text:[    assumeTrue(supportsInsecureLock());         assertFalse(isUiModeLockedToVrHeadset());     }     ])', 1), ('([2:/android/view/inputmethod/cts/InputConnectionBlockingMethodTest.java]:[TINGS]:[2]:method_text:[ /**      * Test {@link InputConnection#getTextAfterCursor(int, int)} works as expected.      */    ])', 1), ('([5:/android/net/wifi/cts/ConcurrencyTest.java]:[TINGS]:[5]:method_text:[to EnabledState         assertNotNull(mMySync.expectedNetworkInfo);          return true;     }     ])', 1), ('([6:/android/graphics/cts/TypefaceCustomFallbackBuilderTest.java]:[TINGS]:[6]:method_text:[            .setFontVariationSettings(varSettings).build()).build()).build()));         }     }     ])', 1), ('([2:/com/android/cts/devicepolicy/ManagedProfileTest.java]:[TINGS]:[2]:method_text:[IntentsTest"",                 mProfileUserId);     }      /** Tests for the API helper class. */    ])', 1), (""([1:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[TINGS]:[1]:method_text:[     * a no-op, will only ensure that the device does not crash when invoking the API's.      */    ])"", 1), ('([6:/android/net/wifi/cts/WifiBackupRestoreTest.java]:[TINGS]:[6]:method_text:[ is deserialized correctly from AOSP      * legacy supplicant/ipconf backup data format.      */    ])', 1), ('([1:/android/media/cts/DecoderTestXheAac.java]:[TINGS]:[1]:method_text:[fy the correct decoding of USAC bitstreams with different boost and attenuation settings      */    ])', 1), (""([9:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[9]:method_text:[**      * Test ANGLE is loaded when the 'Use ANGLE for all' Developer Option is enabled.      */    ])"", 1), (""([1:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[1]:method_text:[      /**      * Test ANGLE is not loaded when the Developer Option is set to 'default'.      */    ])"", 1), ('([1:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[1]:method_text:[D);     }      /**      * Test ANGLE is not loaded when the Developer Option is invalid.      */    ])', 1), ('([1:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[1]:method_text:[n have different developer option values.      * Primary: ANGLE      * Secondary: Native      */    ])', 1), ('([4:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[4]:method_text:[keep the value in the settings when the ANGLE      * activity runs and cleans things up.      */    ])', 1), ('([7:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[7]:method_text:[evOptionValue);     }      /**      * Test uninstalled PKGs have their settings removed.      */    ])', 1), (""([7:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[7]:method_text:[ary: Default      *      * Verify the PKG set to 'default' is removed from the settings.      */    ])"", 1), ('([6:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[6]:method_text:[econdary: Default      *      * Verify the uninstalled PKG is removed from the settings.      */    ])', 1), (""([5:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[5]:method_text:[ attempting to      * show it doesn't cause a crash or prevent ANGLE from being enabled.      */    ])"", 1), (""([1:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[1]:method_text:[ shows up, just that enabling it and attempting to      * show it doesn't cause a crash.      */    ])"", 1), ('([1:/android/angle/cts/CtsAngleDeveloperOptionHostTest.java]:[TINGS]:[1]:method_text:[(getDevice(), SETTINGS_GLOBAL_ANGLE_IN_USE_DIALOG_BOX, ""1"");          testUseNativeDriver();     } }])', 1), ('([1:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[TINGS]:[1]:method_text:[Context = InstrumentationRegistry.getInstrumentation().getContext();      @Ignore(""b/168446060"")    ])', 1), ('([2:/android/server/wm/WindowInsetsAnimationSynchronicityTests.java]:[TINGS]:[2]:method_text:[Context context) {             return new ComponentName(context, SimpleIme.class);         }     } }])', 1), ('([3:/com/android/server/cts/IncidentdTest.java]:[TINGS]:[3]:method_text:[(), filterLevel);     }      // Splitting these into separate methods to make debugging easier.     ])', 1), ('([7:/android/provider/cts/settings/Settings_SystemTest.java]:[TINGS]:[7]:method_text:[ommand(                 ""appops set "" + packageName + "" android:write_settings default"");     }     ])', 1), ('([2:/android/provider/cts/settings/Settings_SystemTest.java]:[TINGS]:[2]:method_text:[fg.fontScale = store;             assertTrue(System.putConfiguration(cr, cfg));         }     }     ])', 1), ('([3:/android/bluetooth/cts/ScanSettingsTest.java]:[TINGS]:[3]:method_text:[@link ScanSettings}.  */ public class ScanSettingsTest extends AndroidTestCase {      @SmallTest    ])', 1), ('([10:/android/bluetooth/cts/ScanSettingsTest.java]:[TINGS]:[10]:method_text:[anResultType());         assertEquals(0, settings.getReportDelayMillis());     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/ScanSettingsTest.java]:[TINGS]:[4]:method_text:[s.Builder().build();         assertEquals(0, settings.describeContents());     }      @SmallTest    ])', 1), ('([13:/android/bluetooth/cts/ScanSettingsTest.java]:[TINGS]:[13]:method_text:[Millis());         assertEquals(ScanSettings.SCAN_MODE_LOW_LATENCY, settings.getScanMode());     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/AudioRestrictionTest.java]:[TINGS]:[1]:method_text:[lumeDevice();     }      // Here we test that DISALLOW_ADJUST_VOLUME disallows to unmute volume.    ])', 1), ('([3:/android/print/cts/CustomPrintOptionsTest.java]:[TINGS]:[3]:method_text:[Helper.cancelPrinting();          waitForPrinterDiscoverySessionDestroyCallbackCalled(1);     }     ])', 1), ('([8:/com/android/server/cts/AlarmManagerIncidentTest.java]:[TINGS]:[8]:method_text:[);         // Nesting should be non-negative.         assertTrue(0 <= filter.getNesting());     } } ])', 1), ('([1:/com/android/cts/verifier/sensors/MotionIndicatorView.java]:[TINGS]:[1]:method_text:[Value() {         // ensure float division         return ((float)(mLastData - mLow))/mStep;     } }])', 1), ('([1:/com/android/cts/net/hostside/VpnTest.java]:[TINGS]:[1]:method_text:[l  *  */ public class VpnTest extends InstrumentationTestCase {      // These are neither public nor])', 1), ('([10:/com/android/cts/net/hostside/VpnTest.java]:[TINGS]:[10]:method_text:[      super.onReceive(context, intent);             }             received = true;         }     } }])', 1), ('([7:/android/location/cts/fine/ScanningSettingsTest.java]:[TINGS]:[7]:method_text:[r.MATCH_DEFAULT_ONLY).activityInfo.packageName;     }      @CddTest(requirement = ""7.4.2/C-2-1"")    ])', 1), ('([4:/android/location/cts/fine/ScanningSettingsTest.java]:[TINGS]:[4]:method_text:[ wifiManager.isScanAlwaysAvailable()         );     }      @CddTest(requirement = ""7.4.3/C-4-1"")    ])', 1), ('([13:/android/location/cts/fine/ScanningSettingsTest.java]:[TINGS]:[13]:method_text:[ngKey);         assertEquals(checked, Settings.Global.getInt(resolver, settingKey, 0) == 1);     } }])', 1), ('([1:/android/location/cts/fine/ScanningSettingsTest.java]:[Settings.ACTION]:[1]:method_text:[ngKey);         assertEquals(checked, Settings.Global.getInt(resolver, settingKey, 0) == 1);     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[TINGS]:[1]:method_text:[ad.sleep(1000);         }         throw new AssertionError(""Failed to get UiAutomation"");     }     ])', 1), ('([5:/com/android/cts/deviceandprofileowner/UserRestrictionsParentTest.java]:[TINGS]:[5]:method_text:[ISALLOW_CONFIG_DATE_TIME,                     UserManager.DISALLOW_AIRPLANE_MODE             );     ])', 1), ('([1:/android/hardware/camera2/cts/CaptureRequestTest.java]:[TINGS]:[1]:method_text:[        super.tearDown();     }      /**      * Test CaptureRequest settings parcelling.      */    ])', 1), ('([7:/android/hardware/camera2/cts/CaptureRequestTest.java]:[TINGS]:[7]:method_text:[ain locked after exposure      * value changes (when requests have lock ON).      * </p>      */    ])', 1), ('([2:/android/hardware/camera2/cts/CaptureRequestTest.java]:[TINGS]:[2]:method_text:[ack level should be      *   close enough to the optical black level values.      * </p>      */    ])', 1), ('([3:/android/hardware/camera2/cts/CaptureRequestTest.java]:[TINGS]:[3]:method_text:[anti-banding modes, check if the exposure time adjustment is      * correct.      * </p>      */    ])', 1), ('([25:/android/hardware/camera2/cts/CaptureRequestTest.java]:[TINGS]:[25]:method_text:[                  maxDist, Math.abs(a.bottom - e.bottom))) continue;             }         }     } }])', 1), ('([1:/android/security/cts/IntentSenderRemovalTest.java]:[TINGS]:[1]:method_text:[he DebugIntentSender activity in Settings has been removed      * and cannot be invoked.      */    ])', 1), ('([3:/android/security/cts/IntentSenderRemovalTest.java]:[TINGS]:[3]:method_text:[    assertNull(""com.android.settings.DebugIntentSender should not be a valid activity"", ri);     } }])', 1), ('([2:/android/view/accessibility/cts/CaptioningManagerTest.java]:[TINGS]:[2]:method_text:[IOException e) {             throw new RuntimeException(""Failed to exec: "" + cmd);         }     } }])', 1), ('([6:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[6]:method_text:[,                     Spanned.SPAN_INCLUSIVE_INCLUSIVE);         }         return result;     }     ])', 1), ('([4:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[4]:method_text:[SIVE);                     layout(ssb, breaks);                 }             }         }     }     ])', 1), ('([8:/android/text/cts/StaticLayoutLineBreakingTest.java]:[TINGS]:[8]:method_text:[char c, char r) {         return string.replaceAll(String.valueOf(c), String.valueOf(r));     }     ])', 1), ('([1:/android/permission/cts/telephony/TelephonyManagerPermissionTest.java]:[TINGS]:[1]:method_text:[id.Manifest.permission#MODIFY_PHONE_STATE} for      * {@link AudioManager#MODE_IN_CALL}.      */    ])', 1), ('([6:/android/voicesettings/cts/AirplaneModeTest.java]:[TINGS]:[6]:method_text:[re(FEATURE_VOICE_RECOGNIZERS);         Log.v(TAG, ""setUp(): mHasFeature="" + mHasFeature);     }     ])', 1), ('([8:/android/voicesettings/cts/AirplaneModeTest.java]:[TINGS]:[8]:method_text:[bal.getInt(mContext.getContentResolver(),                 Settings.Global.AIRPLANE_MODE_ON);     } }])', 1), ('([1:/android/voicesettings/cts/AirplaneModeTest.java]:[Settings.ACTION]:[1]:method_text:[re(FEATURE_VOICE_RECOGNIZERS);         Log.v(TAG, ""setUp(): mHasFeature="" + mHasFeature);     }     ])', 1), ('([1:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[TINGS]:[1]:method_text:[ {         super.setUp();         mUiAutomation = getInstrumentation().getUiAutomation();     }     ])', 1), ('([12:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[TINGS]:[12]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                 .pkg(settingsPackageName);     } }])', 1), ('([1:/com/android/cts/packageinstaller/ManualPackageInstallTest.java]:[Settings.ACTION]:[1]:method_text:[s(settingsPackageName + "":id/admin_support_icon"")                 .pkg(settingsPackageName);     } }])', 1), ('([1:/android/permission/cts/ProviderPermissionTest.java]:[TINGS]:[1]:method_text:[.      * <p>Tests Permission:      *   {@link android.Manifest.permission#READ_CONTACTS}      */    ])', 1), ('([2:/android/permission/cts/ProviderPermissionTest.java]:[TINGS]:[2]:method_text:[      * <p>Tests Permission:      *   {@link android.Manifest.permission#WRITE_SETTINGS}      */    ])', 1), ('([5:/android/permission/cts/ProviderPermissionTest.java]:[TINGS]:[5]:method_text:[* {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION} and related      * APIs.      */    ])', 1), ('([2:/com/android/cts/devicepolicy/MixedProfileOwnerTest.java]:[TINGS]:[2]:method_text:[LockTaskAfterReboot_tryOpeningSettings();     }      @Override     @FlakyTest(bugId = 140932104)    ])', 1), ('([3:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[TINGS]:[3]:method_text:[riction(ADMIN_RECEIVER_COMPONENT, DISALLOW_AUTOFILL);         }         super.tearDown();     }     ])', 1), ('([12:/com/android/cts/deviceandprofileowner/AutofillRestrictionsTest.java]:[TINGS]:[12]:method_text:[+ mUserId + "": "" + expected                 + ""; actual: "" + actual + "" after 0.5 seconds"");     } }])', 1), ('([4:/android/text/cts/StaticLayoutTest.java]:[TINGS]:[4]:method_text:[MP = drawToBitmap(resultLayout);          assertTrue(msg, resultBMP.sameAs(expectedBMP));     }     ])', 1), ('([4:/android/media/cts/ResourceManagerStubActivity.java]:[TINGS]:[4]:method_text:[chronized (mFinishEvent) {                 mFinishEvent.notify();             }         }     }     ])', 1), ('([11:/android/media/cts/bitstreams/app/MediaBitstreamsDeviceSideTest.java]:[TINGS]:[11]:method_text:[(out);             out.flush();          } finally {              out.close();          }     }     ])', 1), ('([16:/android/net/cts/IpConfigurationTest.java]:[TINGS]:[16]:method_text:[      assertEquals(source.getStaticIpConfiguration(), target.getStaticIpConfiguration());     }     ])', 1), ('([6:/android/autofillservice/cts/VirtualContainerActivityCompatModeTest.java]:[TINGS]:[6]:method_text:[ain()).isEqualTo(""dev.null"");         assertThat(urlBar.getWebScheme()).isEqualTo(""ftp"");     }     ])', 1), ('([1:/android/autofillservice/cts/VirtualContainerActivityCompatModeTest.java]:[TINGS]:[1]:method_text:[odeByResourceId(request.structure, ID_URL_BAR);          assertUrlBarIsSanitized(urlBar);     }     ])', 1), ('([1:/android/autofillservice/cts/VirtualContainerActivityCompatModeTest.java]:[TINGS]:[1]:method_text:[_BAR2);          assertUrlBarIsSanitized(urlBar);         assertTextIsSanitized(urlBar2);     }     ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[       ""testRingtoneSync"", mProfileUserId);     }      // Test if setting RINGTONE disables sync    ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[tRingtoneDisableSync"", mProfileUserId);     }      // Test if setting NOTIFICATION disables sync    ])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[1]:method_text:[testNotificationDisableSync"", mProfileUserId);     }      // Test if setting ALARM disables sync    ])', 1), ('([4:/com/android/cts/devicepolicy/ManagedProfileRingtoneTest.java]:[TINGS]:[4]:method_text:[  CLog.d(""Output for command "" + command + "": "" + getDevice().executeShellCommand(command));     } }])', 1), ('([2:/android/widget/cts/ToastTest.java]:[TINGS]:[2]:method_text:[.getUiAutomation();         mLayoutListener = () -> mLayoutDone = true;     }      @UiThreadTest    ])', 1), ('([4:/android/widget/cts/ToastTest.java]:[TINGS]:[4]:method_text:[          putSecureSetting(SETTINGS_ACCESSIBILITY_UI_TIMEOUT, originalSetting);         }     }     ])', 1), ('([5:/android/widget/cts/ToastTest.java]:[TINGS]:[5]:method_text:[("" "")                 .append(value);         SystemUtil.runShellCommand(cmd.toString());     }     ])', 1), ('([2:/android/graphics/drawable/cts/VectorDrawableTest.java]:[TINGS]:[2]:method_text:[InstrumentationRegistry.getTargetContext();         mResources = mContext.getResources();     }     ])', 1), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[TINGS]:[1]:method_text:[canner();     private BleScanCallback mMockScanCallback = new BleScanCallback();      @SmallTest    ])', 1), ('([1:/android/bluetooth/cts/ScanCallbackTest.java]:[TINGS]:[1]:method_text:[kScanner.startScan(new ScanSettings.Builder().build(), mMockScanCallback);     }      @SmallTest    ])', 1), ('([4:/android/bluetooth/cts/ScanCallbackTest.java]:[TINGS]:[4]:method_text:[N_TYPE_BATCH;         mMockScanner.startScan(settings, mMockScanCallback);     }      @SmallTest    ])', 1), ('([8:/android/bluetooth/cts/ScanCallbackTest.java]:[TINGS]:[8]:method_text:[ != SCAN_TYPE_FAIL) {                 fail(""scan should not fail"");             }         }      } }])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[TINGS]:[1]:method_text:[ase {      @Override     protected void setUp() throws Exception {         super.setUp();     }     ])', 1), ('([1:/android/app/cts/NotificationChannelTest.java]:[TINGS]:[1]:method_text:[ll(channel.getParentChannelId());         assertFalse(channel.isImportantConversation());     }     ])', 1), ('([6:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[6]:method_text:[        sInstrumentation.runOnMainSync(() -> mShortcutTargetActivity.finish());         }     }     ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[rvice();         assertTrue(""Speaking accessibility service starts up"", service != null);     }     ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[cessibility shortcut target starts up"",                 mShortcutTargetActivity != null);     }     ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[         performShortcutAndWaitForA11yButtonClicked(mA11yButtonServiceRule.getService());     }     ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[ttonStateChange(                 sUiAutomation, Arrays.asList(mSpeakingA11yServiceName));     }     ])', 1), ('([2:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[2]:method_text:[n,                 Arrays.asList(mSpeakingA11yServiceName, mShortcutTargetActivityName));     }     ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[3]:method_text:[orAccessibilityButtonStateChange(sUiAutomation,                 Collections.emptyList());     }     ])', 1), ('([3:/android/view/accessibility/cts/AccessibilityShortcutTest.java]:[TINGS]:[3]:method_text:[Controller()                     .unregisterAccessibilityButtonCallback(callback);         }     } }])', 1), ('([9:/android/server/wm/AnrTests.java]:[TINGS]:[9]:method_text:[SIVE_ACTIVITY.getPackageName());         stopTestPackage(HOST_ACTIVITY.getPackageName());     }     ])', 1), ('([3:/com/android/cts/deviceandprofileowner/systemupdate/InstallUpdateTest.java]:[TINGS]:[3]:method_text:[eviceAB() {         return ""true"".equalsIgnoreCase(SystemProperties.get(AB_DEVICE_KEY, """"));     } }])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[s in the primary user when the policy      * is set on the profile owner.      */     @LargeTest    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[   super.testAlwaysOnVpnUnsupportedPackageReplaced();     }      @Override     @LockSettingsTest    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ // Managed profile owner cannot set currently whitelisted system settings.     }      @Override    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[ngSettings() {         // Managed profiles are not allowed to use lock task     }      @Override    ])', 1), ('([1:/com/android/cts/devicepolicy/MixedManagedProfileOwnerTest.java]:[TINGS]:[1]:method_text:[wnerCanGetDeviceIdentifiersWithPermission"", mUserId);     }      @Override     @LockSettingsTest    ])', 1), ('([8:/android/telephony/cts/TelephonyManagerTest.java]:[TINGS]:[8]:method_text:[will be public in S, this test      * is commented and will be un-commented in Android S.      *    ])', 1), ('([3:/android/telephony/cts/TelephonyManagerTest.java]:[TINGS]:[3]:method_text:[sions(mTelephonyManager,                 (tm) -> tm.setCallWaitingStatus(false));     }      */     ])', 1), ('([15:/android/telephony/cts/TelephonyManagerTest.java]:[TINGS]:[15]:method_text:[isDataEnabled(),                         5 /*times*/, TOLERANCE/5 /*timeout per poll*/));     }     ])', 1), ('([4:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[4]:method_text:[e = new ComponentName(PACKAGE_NAME, FULL_CLASS_NAME);         setHomeActivity(mTestHome);     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[NGS_PACKAGE, USER_HANDLE);         assertNull(limit); // An observer was never registered     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[UsageLimit(                 SETTINGS_PACKAGE, USER_HANDLE);         assertNotNull(limit);     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[CKAGE, USER_HANDLE);         assertNull(""An unregistered observer was returned."", limit);     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[              TimeUnit.MINUTES.toMillis(DEFAULT_TIME_LIMIT), limit.getTotalUsageLimit());     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[ with no usage."",                 limit.getTotalUsageLimit(), limit.getUsageRemaining());     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[t.getTotalUsageLimit());         } finally {             unregisterObserver(1);         }     }     ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[        assertEquals(""Usage remaining expected to be 0."", 0, limit.getUsageRemaining());     }      ])', 1), ('([1:/android/content/pm/cts/LauncherAppsTest.java]:[TINGS]:[1]:method_text:[--user ""                 + USER_HANDLE.getIdentifier() + "" "" + component.flattenToString());     } }])', 1), ('([1:/android/app/cts/UiModeManagerTest.java]:[TINGS]:[1]:method_text:[ghtMode(UiModeManager.MODE_NIGHT_YES);         setNightMode(UiModeManager.MODE_NIGHT_NO);     }     ])', 1), ('([3:/android/app/cts/UiModeManagerTest.java]:[TINGS]:[3]:method_text:[ngAsUser(UserHandle.USER_SYSTEM, key)                 : SettingsUtils.getSecureSetting(key);     } }])', 1), ('([1:/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java]:[TINGS]:[1]:method_text:[st uninstalling the currently selected IME for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([1:/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java]:[TINGS]:[1]:method_text:[ Test disabling the currently selected IME for full (non-instant) apps.      */     @AppModeFull    ])', 1), ('([2:/android/inputmethodservice/cts/hostside/InputMethodServiceLifecycleTest.java]:[TINGS]:[2]:method_text:[           imeId + "" should be "" + (shouldBeEnabled ? ""enabled."" : ""available.""));         }     } }])', 1), ('([1:/android/webkit/cts/PostMessageTest.java]:[TINGS]:[1]:method_text:[ng-webview-cts.      */     // Post a string message to main frame and make sure it is received.    ])', 1), ('([1:/com/android/cts/devicepolicy/PasswordComplexityTest.java]:[TINGS]:[1]:method_text:[en) {             getDevice().uninstallPackage(PKG);         }          super.tearDown();     }     ])', 1), ('([1:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[1]:method_text:[Specifier;     }      /**      * Tests that the device properly requests a network scan.      */    ])', 1), ('([14:/android/carrierapi/cts/NetworkScanApiTest.java]:[TINGS]:[14]:method_text:[20"");         return mccMncs;     }      /**      * To test its constructor and getters.      */    ])', 1), ('([1:/android/media/tv/cts/HardwareSessionTest.java]:[TINGS]:[1]:method_text:[PassthroughInputList.add(info);             }         }         assertNotNull(mStubInfo);     }     ])', 1), ('([5:/android/media/tv/cts/HardwareSessionTest.java]:[TINGS]:[5]:method_text:[able(int reason) {                 mHardwareVideoUnavailableCount++;             }         }     } }])', 1), ('([19:/android/systemintents/cts/TestSystemIntents.java]:[TINGS]:[19]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([9:/android/systemintents/cts/TestSystemIntents.java]:[Settings.ACTION]:[9]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([1:/android/systemintents/cts/TestSystemIntents.java]:[ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SET]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1), ('([8:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[8]:method_text:[hat can handle LEANBACK_LAUNCHER      * category intent.      *      * @throws Exception      */    ])', 1), ('([1:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[1]:method_text:[hat can handle LEANBACK_SETTINGS      * category intent.      *      * @throws Exception      */    ])', 1), ('([2:/android/tv/settings/cts/SettingsLeanbackTest.java]:[TINGS]:[2]:method_text:[one or more activity can handle this intent.         assertTrue(resolveInfoList.size() > 0);     } }])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[.AndroidTestCase;  @NonMediaMainlineTest public class AsyncPlayerTest extends AndroidTestCase {     ])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[ final int PLAY_TIME = 3000;         Thread.sleep(PLAY_TIME);         asyncPlayer.stop();     }     ])', 1), ('([1:/android/media/cts/AsyncPlayerTest.java]:[TINGS]:[1]:method_text:[    final int PLAY_TIME = 3000;         Thread.sleep(PLAY_TIME);         asyncPlayer.stop();     } }])', 1), ('([1:/com/android/cts/deviceandprofileowner/DeviceIdAttestationTest.java]:[TINGS]:[1]:method_text:[    }     }      protected ComponentName getWho() {         return ADMIN_RECEIVER_COMPONENT;     } }])', 1), ('([25:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[TINGS]:[25]:method_text:[Manager.class);         return am.getHistoricalProcessExitReasons(packageName, pid, max);     }     ])', 1), ('([2:/android/app/cts/ActivityManagerAppExitInfoTest.java]:[TINGS]:[2]:method_text:[f(trace) >= 0);          monitor.finish();         mContext.unregisterReceiver(receiver);     }     ])', 1), ('([3:/android/server/wm/PinnedStackTests.java]:[TINGS]:[3]:method_text:[void setUp() throws Exception {         super.setUp();         assumeTrue(supportsPip());     }     ])', 1), ('([5:/android/server/wm/PinnedStackTests.java]:[TINGS]:[5]:method_text:[        } catch (InterruptedException impossible) {}         }     }      @Ignore(""b/149946388"")    ])', 1), ('([2:/android/media/cts/ExifInterfaceTest.java]:[TINGS]:[2]:method_text:[         .detectUnbufferedIo()                 .penaltyDeath()                 .build());     }     ])', 1), ('([6:/android/settings/cts/WifiSliceTest.java]:[TINGS]:[6]:method_text:[stant)) {       Secure.putString(mContext.getContentResolver(), ASSISTANT, mAssistant);     }   }   ])', 1), ('([4:/android/server/wm/ToastWindowTest.java]:[TINGS]:[4]:method_text:[(), SETTING_HIDDEN_API_POLICY,                     mPreviousHiddenApiPolicy);         });     }     ])', 1), ('([1:/com/android/cts/verifier/audio/RingerModeActivity.java]:[TINGS]:[1]:method_text:[eRingerDndOn());         tests.add(new TestSetRingerModePolicyAccessDndOn());         // TODO: Add a])', 1), ('([4:/com/android/cts/verifier/audio/RingerModeActivity.java]:[TINGS]:[4]:method_text:[dioManager.getStreamVolume(AudioManager.STREAM_MUSIC));              status = PASS;         }     } ])', 1), ('([1:/android/net/wifi/cts/WifiMigrationTest.java]:[TINGS]:[1]:method_text:[     * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData.Builder} class.      */    ])', 1), ('([4:/android/net/wifi/cts/WifiMigrationTest.java]:[TINGS]:[4]:method_text:[    /**      * Tests {@link android.net.wifi.WifiMigration.SettingsMigrationData} class.      */    ])', 1), ('([2:/android/net/wifi/cts/WifiMigrationTest.java]:[TINGS]:[2]:method_text:[eFile(int)} and      * {@link WifiMigration#removeUserConfigStoreFile(int, UserHandle)}.      */    ])', 1), ('([2:/android/hardware/camera2/cts/BurstCaptureTest.java]:[TINGS]:[2]:method_text:[ol.      * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.      */    ])', 1), ('([2:/android/hardware/camera2/cts/BurstCaptureTest.java]:[TINGS]:[2]:method_text:[is test uses STILL_CAPTURE intent, and exercises path where      * enableZsl is enabled.      */    ])', 1), ('([2:/android/hardware/camera2/cts/BurstCaptureTest.java]:[TINGS]:[2]:method_text:[de.      * Also verifies sensor settings operation if READ_SENSOR_SETTINGS is available.      */    ])', 1), ('([9:/android/hardware/camera2/cts/BurstCaptureTest.java]:[TINGS]:[9]:method_text:[ameDuration/1e6,                         limit95FrameDuration/1e6));             }         }     } }])', 1), ('([1:/android/media/cts/MediaProjectionTest.java]:[TINGS]:[1]:method_text:[Before     public void setUp() {         mContext = InstrumentationRegistry.getContext();     }     ])', 1), ('([3:/android/media/cts/MediaProjectionTest.java]:[TINGS]:[3]:method_text:[EOUT_MS + ""ms"",                 stoppedLatch.await(STOP_TIMEOUT_MS, TimeUnit.MILLISECONDS));     } }])', 1), ('([1:/android/webkit/cts/WebViewRenderProcessClientTest.java]:[TINGS]:[1]:method_text:[       blockRenderProcess(blocker);         WebkitUtils.waitForFuture(rendererUnblocked);     }     ])', 1), ('([1:/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java]:[TINGS]:[1]:method_text:[Operation} functions correctly. Other tests in this class      * rely on this operation.      */    ])', 1), ('([1:/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java]:[TINGS]:[1]:method_text:[   }      /**      * Test that the {@link RepeatingSensorOperation} functions correctly.      */    ])', 1), ('([4:/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java]:[TINGS]:[4]:method_text:[gSensorOperation} functions correctly if there is a failure in      * a child operation.      */    ])', 1), ('([4:/android/hardware/cts/helpers/sensoroperations/SensorOperationTest.java]:[TINGS]:[4]:method_text:[  }      /**      * Test that the {@link SequentialSensorOperation} functions correctly.      */    ])', 1), ('([1:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[TINGS]:[1]:method_text:[ecuteShellCommand(""am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true"");     }     ])', 1), ('([1:/android/SustainedPerformance/cts/SustainedPerformanceHostTest.java]:[TINGS]:[1]:method_text:[e not sustainable"",                     (resDhry > 15) ||                     (resApp > 5));     } }])', 1), ('([2:/android/host/systemui/ActiveTileServiceTest.java]:[TINGS]:[2]:method_text:[an active tile.         openSettings();         assertFalse(waitFor(""onStartListening""));     }     ])', 1), ('([2:/android/host/systemui/ActiveTileServiceTest.java]:[TINGS]:[2]:method_text:[);         assertTrue(waitFor(""onStartListening""));         assertTrue(waitFor(""onClick""));     }  }])', 1), ('([1:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[TINGS]:[1]:method_text:[vate final BleAdvertiseCallback mAdvertiseCallback = new BleAdvertiseCallback();      @SmallTest    ])', 1), ('([2:/android/bluetooth/cts/AdvertiseCallbackTest.java]:[TINGS]:[2]:method_text:[rtEquals(AdvertiseCallback.ADVERTISE_FAILED_ALREADY_STARTED, error);             }         }     } }])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[TINGS]:[1]:method_text:[ry.getInstrumentation().getUiAutomation()                 .dropShellPermissionIdentity();     }     ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[TINGS]:[1]:method_text:[ssertThat(intent.getData().getSchemeSpecificPart()).isEqualTo(mContext.getPackageName());     }     ])', 1), ('([1:/com/android/cts/crossprofileappstest/CrossProfileAppsPermissionToInteractTest.java]:[Settings.ACTION]:[1]:method_text:[ssertThat(intent.getData().getSchemeSpecificPart()).isEqualTo(mContext.getPackageName());     }     ])', 1), ('([2:/com/android/cts/deviceandprofileowner/SecondaryLockscreenTest.java]:[TINGS]:[2]:method_text:[(SecurityException expected) {}         runShellCommand(""locksettings clear --old 1234"");     }     ])', 1), ('([1:/android/hardware/cts/SensorIntegrationTests.java]:[TINGS]:[1]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1), ('([2:/android/hardware/cts/SensorIntegrationTests.java]:[TINGS]:[2]:method_text:[to identify how the interaction      * of several clients can lead to the failing state.      */    ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-7-1"	""	"[('android.systemintents.cts.TestSystemIntents', 1)]"	"[('create', 1), ('setUp', 1), ('getInstrumentation', 1), ('getContext', 1), ('getPackageManager', 1)]"	"[('CtsSystemIntentTestCases', 1)]"	""	"3.2.3.5/C-7-1"	"""C-7-1] MUST provide a user-accessible mechanism to add and configure third-party input methods in response to the android.settings.INPUT_METHOD_SETTINGS intent. If device implementations support third-party accessibility services, they: """	"03020305.670701"	"INPUT_METHOD_SETTINGS android.settings.INPUT"	""	""	""	"[('INPUT_METHOD_SETTINGS', 1)]"	""	""	""	"[('/home/gpoor/cts-source/cts/tests/tests/systemintents/src/android/systemintents/cts/TestSystemIntents.java', 1)]"	"[('/android/systemintents/cts/TestSystemIntents.java', 2)]"	"[('([1:/android/systemintents/cts/TestSystemIntents.java]:[INPUT_METHOD_SETTINGS]:[1]:method_text:[etInstrumentation().getContext();         mPackageManager = mContext.getPackageManager();     }     ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-13-2"	""	"[('com.android.cts.managedprofile.ProvisioningTest', 4), ('com.android.cts.deviceowner.DeviceOwnerProvisioningTest', 2), ('com.android.cts.managedprofile.PreManagedProfileTest', 2), ('com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest', 2), ('com.android.cts.comp.provisioning.ManagedProfileProvisioningTest', 2), ('com.android.cts.deviceowner.PreDeviceOwnerTest', 2), ('com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest', 1), ('com.android.cts.profileowner.ManagementTest', 1), ('com.android.cts.comp.ManagementTest', 1), ('com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest', 1), ('com.android.cts.devicepolicy.DeviceAndProfileOwnerTest', 1)]"	"[('setUp', 5), ('getSimpleName', 2), ('getContext', 2), ('getName', 2), ('getPackageManager', 1), ('getPackage', 1), ('getTargetContext', 1)]"	""	""	"3.2.3.5/C-13-2"	"""C-13-2] MUST honor the intents android.app.action.ADMIN_POLICY_COMPLIANCE, android.app.action.GET_PROVISIONING_MODE, android.app.action.PROVISIONING_SUCCESSFUL, android.app.action.PROVISION_MANAGED_DEVICE, android.app.action.PROVISION_MANAGED_PROFILE, android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD, android.app.action.SET_NEW_PASSWORD & android.app.action.START_ENCRYPTION and have an activity to provide fulfillment for these intents as described in SDK here. If device implementations declare the android.software.autofill feature flag, they: """	"03020305.671302"	"android.app.action.PROVISION android.app.action.SET SET_NEW_PARENT_PROFILE_PASSWORD android.app.action.START PROVISIONING_SUCCESSFUL GET_PROVISIONING_MODE SET_NEW_PASSWORD PROVISION_MANAGED_DEVICE android.app.action.GET START_ENCRYPTION android.app.action.PROVISIONING ADMIN_POLICY_COMPLIANCE android.app.action.ADMIN android.software.autofill PROVISION_MANAGED_PROFILE"	""	""	""	"[('PROVISION_MANAGED_PROFILE', 13), ('PROVISION_MANAGED_DEVICE', 3), ('PROVISIONING_SUCCESSFUL', 2), ('android.software.autofill', 1)]"	""	"[('[com.android.cts.managedprofile.ProvisioningTest PersistableBundle None]', 2), ('[com.android.cts.managedprofile.ProvisioningTest testVerifySuccessfulIntentWasReceived None]', 1), ('[com.android.cts.managedprofile.ProvisioningTest testAccountNotExist None]', 1), ('[com.android.cts.deviceowner.DeviceOwnerProvisioningTest getSystemPackageNameList None]', 1), ('[com.android.cts.deviceowner.DeviceOwnerProvisioningTest testProvisionDeviceOwner_withAllSystemAppsEnabled None]', 1), ('[com.android.cts.devicepolicy.ManagedProfileProvisioningSingleAdminTest removeTestUsers None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedTrue None]', 1), ('[com.android.cts.managedprofile.PreManagedProfileTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.profileowner.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[com.android.cts.comp.ManagementTest testProvisionManagedProfileNotAllowed None]', 1), ('[com.android.cts.devicepolicy.DeviceOwnerPlusProfileOwnerTest testCannotAddManagedProfileViaManagedProvisioning None]', 1), ('[com.android.cts.devicepolicy.singleadmin.ProvisioningSingleAdminTest testManagedProfileProvisioning None]', 1), ('[com.android.cts.comp.provisioning.ManagedProfileProvisioningTest testProvisioningCorpOwnedManagedProfile None]', 1), ('[com.android.cts.devicepolicy.DeviceAndProfileOwnerTest testDisallowAutofill_allowed None]', 1), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningAllowedFalse None]', 1), ('[com.android.cts.deviceowner.PreDeviceOwnerTest testIsProvisioningNotAllowedForManagedProfileAction None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/ProvisioningTest.java', 4), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/PreManagedProfileTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/SingleAdminApp/src/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/DeviceOwner/src/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ProfileOwner/src/com/android/cts/profileowner/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/CorpOwnedManagedProfile/src/com/android/cts/comp/ManagementTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 1), ('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/src/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 1)]"	"[('/com/android/cts/managedprofile/ProvisioningTest.java', 6), ('/com/android/cts/deviceowner/PreDeviceOwnerTest.java', 4), ('/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java', 3), ('/com/android/cts/managedprofile/PreManagedProfileTest.java', 3), ('/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java', 3), ('/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java', 3), ('/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java', 2), ('/com/android/cts/profileowner/ManagementTest.java', 2), ('/com/android/cts/comp/ManagementTest.java', 2), ('/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java', 2), ('/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java', 2)]"	"[('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISIONING_SUCCESSFUL]:[1]:method_text:[ences(mContext).getBoolean(KEY_PROVISIONING_SUCCESSFUL_RECEIVED,                 false));     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[.getTargetContext();         mDpm = mContext.getSystemService(DevicePolicyManager.class);     }     ])', 1), ('([1:/com/android/cts/managedprofile/ProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ext context) {         return context.getSharedPreferences(SHARED_PREFERENCE_FILE_NAME, 0);     }  }])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[d tearDown() throws Exception {         enableUninstalledApp();         super.tearDown();     }     ])', 1), ('([1:/com/android/cts/deviceowner/DeviceOwnerProvisioningTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[pInfo) -> appInfo.packageName)                 .sorted()                 .collect(toList());     } }])', 1), ('([1:/com/android/cts/devicepolicy/ManagedProfileProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[().uninstallPackage(SINGLE_ADMIN_PKG);         }         super.tearDown();     }      @FlakyTest    ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[           .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), ('([1:/com/android/cts/managedprofile/PreManagedProfileTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1), ('([1:/com/android/cts/profileowner/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ProvisioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     } }])', 1), ('([1:/com/android/cts/comp/ManagementTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[visioningAllowed(                 DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }     ])', 1), (""([1:/com/android/cts/devicepolicy/DeviceOwnerPlusProfileOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[se when called with      * ACTION_PROVISION_MANAGED_PROFILE when there's a device owner.      */    ])"", 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[     public void setUp() {         mContext = InstrumentationRegistry.getTargetContext();     }     ])', 1), ('([1:/com/android/cts/devicepolicy/singleadmin/ProvisioningSingleAdminTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[TestManager(mContext);         assertTrue(provisioningMgr.startProvisioningAndWait(intent));     } }])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[tends AndroidTestCase {     private static final String TAG = ""ManagedProfileProvisioningTest"";     ])', 1), ('([1:/com/android/cts/comp/provisioning/ManagedProfileProvisioningTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[ntent) {         return intent != null && intent.getExtras().containsKey(Intent.EXTRA_USER);     } }])', 1), ('([1:/com/android/cts/devicepolicy/DeviceAndProfileOwnerTest.java]:[android.software.autofill]:[1]:method_text:[eTestMethod("".AutofillRestrictionsTest"",                 ""testDisallowAutofill_allowed"");     }     ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_DEVICE]:[1]:method_text:[olicyManager.isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_DEVICE));     }     ])', 1), ('([1:/com/android/cts/deviceowner/PreDeviceOwnerTest.java]:[PROVISION_MANAGED_PROFILE]:[1]:method_text:[             .isProvisioningAllowed(DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE));     }  }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-12-1"	""	"[('com.android.cts.managedprofile.DisallowSharingIntoProfileTest', 2), ('android.content.cts.AvailableIntentsTest', 1)]"	"[('setUp', 4), ('getInstrumentation', 2), ('getContext', 2)]"	"[('CtsContentTestCases', 1)]"	""	"3.2.3.5/C-12-1"	"""C-12-1] MUST honor the android.media.action.STILL_IMAGE_CAMERA and android.media.action.STILL_IMAGE_CAMERA_SECURE intent and launch the camera in still image mode as described in the SDK. """	"03020305.671201"	"STILL_IMAGE_CAMERA_SECURE android.media.action.STILL STILL_IMAGE_CAMERA"	""	""	""	"[('STILL_IMAGE_CAMERA', 2), ('STILL_IMAGE_CAMERA_SECURE', 1)]"	""	"[('[android.content.cts.AvailableIntentsTest testCamera CtsContentTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/hostsidetests/devicepolicy/app/ManagedProfile/src/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 2), ('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 1)]"	"[('/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java', 4), ('/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('([1:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA_SECURE]:[1]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1), ('([2:/com/android/cts/managedprofile/DisallowSharingIntoProfileTest.java]:[STILL_IMAGE_CAMERA]:[2]:method_text:[getSystemService(DevicePolicyManager.class);         assertNotNull(mDevicePolicyManager);     }     ])', 1), ('([1:/android/content/cts/AvailableIntentsTest.java]:[STILL_IMAGE_CAMERA]:[1]:method_text:[it can more easily be suppressed while we      * fix targets that are out of compliance.      */    ])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-15-1"	""	"[('android.content.cts.AvailableIntentsTest', 2), ('android.cts.statsd.atom.AtomTestCase', 1), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 1)]"	"[('setUp', 2), ('addIntentsThatDependOnDeviceConfigs', 2), ('addIntentsThatDependOnDeviceFeatures', 2), ('getPackageManager', 2), ('checkIntentForwardingFromPrimary', 2), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 2), ('hashCode', 1), ('supportsMultipleUsers', 1), ('getExternalStorageState', 1), ('checkIntentForwardingFromManaged', 1)]"	"[('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-15-1"	"""C-15-1] MUST still have an activity that handles the android.settings.ACTION_USAGE_ACCESS_SETTINGS intent pattern but MUST implement it as a no-op, that is to have an equivalent behavior as when the user is declined for access. If device implementations report the feature android.hardware.audio.output, they: """	"03020305.671501"	"ACTION_USAGE_ACCESS_SETTINGS android.settings.ACTION android.hardware.audio.output"	""	""	""	"[('ACTION_USAGE_ACCESS_SETTINGS', 2), ('android.hardware.audio.output', 1), ('android.settings.ACTION', 1)]"	""	"[('[android.content.cts.AvailableIntentsTest testUsageAccessSettings CtsContentTestCases]', 2), ('[android.cts.statsd.atom.AtomTestCase getReportList None]', 1), ('[com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2), ('/home/gpoor/cts-source/cts/hostsidetests/statsd/src/android/cts/statsd/atom/AtomTestCase.java', 1), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 1)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4), ('/android/cts/statsd/atom/AtomTestCase.java', 2), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_USAGE_ACCESS_SETTINGS]:[1]:method_text:[         assertCanBeHandled(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));         }     }     ])', 2), ('([1:/android/cts/statsd/atom/AtomTestCase.java]:[android.hardware.audio.output]:[1]:method_text:[estamp is not truncated"")                 .that(timestampNs % fiveMinutesInNs).isEqualTo(0);     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACTION]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-8-1"	""	"[('android.content.cts.AvailableIntentsTest', 4), ('android.accessibilityservice.cts.AccessibilitySettingsTest', 2), ('com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper', 2), ('com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity', 1)]"	"[('addIntentsThatDependOnDeviceConfigs', 4), ('addIntentsThatDependOnDeviceFeatures', 4), ('getPackageManager', 4), ('checkIntentForwardingFromPrimary', 4), ('checkIntentsWithOptionalForwardingFromManagedAreHandled', 4), ('supportsMultipleUsers', 2), ('getExternalStorageState', 2), ('checkIntentForwardingFromManaged', 2)]"	"[('CtsContentTestCases', 4), ('CtsAccessibilityServiceTestCases', 2)]"	""	"3.2.3.5/C-8-1"	"""C-8-1] MUST honor the android.settings.ACCESSIBILITY_SETTINGS intent to provide a user-accessible mechanism to enable and disable the third-party accessibility services alongside the preloaded accessibility services. If device implementations include support for Wi-Fi Easy Connect and expose the functionality to third-party apps, they: """	"03020305.670801"	"android.settings.ACCESSIBILITY ACCESSIBILITY_SETTINGS"	""	""	""	"[('ACCESSIBILITY_SETTINGS', 8), ('android.settings.ACCESSIBILITY', 1)]"	""	"[('[android.accessibilityservice.cts.AccessibilitySettingsTest testAccessibilitySettingsIntentHandled CtsAccessibilityServiceTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testChangePhoneAccounts CtsContentTestCases]', 2), ('[android.content.cts.AvailableIntentsTest testShowCallAccessibilitySettings CtsContentTestCases]', 2), ('[com.android.cts.verifier.managedprovisioning.IntentFiltersTestHelper isEmpty None]', 2), ('[com.android.cts.verifier.managedprovisioning.PolicyTransparencyTestListActivity setPassFailButtonClickListeners None]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 4), ('/home/gpoor/cts-source/cts/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 2), ('/home/gpoor/cts-source/cts/apps/CtsVerifier/src/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 1)]"	"[('/android/content/cts/AvailableIntentsTest.java', 6), ('/android/accessibilityservice/cts/AccessibilitySettingsTest.java', 4), ('/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java', 4), ('/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java', 2)]"	"[('([2:/android/accessibilityservice/cts/AccessibilitySettingsTest.java]:[ACCESSIBILITY_SETTINGS]:[2]:method_text:[ACTION_ACCESSIBILITY_SETTINGS"";         assertTrue(message, !resolvedActivities.isEmpty());     } } ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ON_SHOW_CALL_ACCESSIBILITY_SETTINGS, it will display the call accessibility preferences.      */    ])', 2), ('([1:/android/content/cts/AvailableIntentsTest.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[ }      /**      * Test ACTION_SHOW_CALL_SETTINGS, it will display the call preferences.      */    ])', 2), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[android.settings.ACCESSIBILITY]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/IntentFiltersTestHelper.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[orMessage);                 success = false;             }         }         return success;     } }])', 1), ('([1:/com/android/cts/verifier/managedprovisioning/PolicyTransparencyTestListActivity.java]:[ACCESSIBILITY_SETTINGS]:[1]:method_text:[tExtra(PolicyTransparencyTestListActivity.EXTRA_MODE, mMode);         startActivity(intent);     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-13-1"	""	"[('android.admin.cts.DeviceAdminActivationTest', 2)]"	"[('getSimpleName', 1)]"	"[('CtsAdminTestCases', 2)]"	""	"3.2.3.5/C-13-1"	"""C-13-1] MUST honor the intent android.app.action.ADD_DEVICE_ADMIN to invoke a UI to bring the user through adding the device administrator to the system (or allowing them to reject it). """	"03020305.671301"	"android.app.action.ADD ADD_DEVICE_ADMIN"	""	""	""	"[('ADD_DEVICE_ADMIN', 2)]"	""	"[('[android.admin.cts.DeviceAdminActivationTest DeviceAdminActivationTest CtsAdminTestCases]', 1), ('[android.admin.cts.DeviceAdminActivationTest testActivateBrokenReceiver5Fails CtsAdminTestCases]', 1)]"	""	"[('/home/gpoor/cts-source/cts/tests/admin/src/android/admin/cts/DeviceAdminActivationTest.java', 2)]"	"[('/android/admin/cts/DeviceAdminActivationTest.java', 3)]"	"[('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[ctivateDeviceAdminActivity();         } finally {             super.tearDown();         }     }     ])', 1), ('([1:/android/admin/cts/DeviceAdminActivationTest.java]:[ADD_DEVICE_ADMIN]:[1]:method_text:[                new ComponentName(getInstrumentation().getTargetContext(), receiverClass)));     } }])', 1)]"	""	""	""	""	""
"52:260955) 3.2.3.5  . Conditional Application Intents"	"3.2.3.5"	"C-9-1"	""	"[('android.content.cts.AvailableIntentsTest', 2)]"	""	"[('CtsContentTestCases', 2)]"	""	"3.2.3.5/C-9-1"	"""C-9-1] MUST implement the Settings#ACTION_PROCESS_WIFI_EASY_CONNECT_URI Intent APIs as described in the SDK documentation. If device implementations provide the data saver mode, they: *"""	"03020305.670901"	"ACTION_PROCESS_WIFI_EASY_CONNECT_URI"	""	""	""	"[('ACTION_PROCESS_WIFI_EASY_CONNECT_URI', 2)]"	""	"[('[android.content.cts.AvailableIntentsTest testEasyConnectIntent CtsContentTestCases]', 2)]"	""	"[('/home/gpoor/cts-source/cts/tests/tests/content/src/android/content/cts/AvailableIntentsTest.java', 2)]"	"[('/android/content/cts/AvailableIntentsTest.java', 4)]"	"[('([1:/android/content/cts/AvailableIntentsTest.java]:[ACTION_PROCESS_WIFI_EASY_CONNECT_URI]:[1]:method_text:[     intent.setData(Uri.parse(QRCODE));             assertCanBeHandled(intent);         }     }     ])', 2)]"	""	""	""	""	""
